<Type Name="CivicAddressResolver" FullName="System.Device.Location.CivicAddressResolver">
  <TypeSignature Language="C#" Value="public sealed class CivicAddressResolver : System.Device.Location.ICivicAddressResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CivicAddressResolver extends System.Object implements class System.Device.Location.ICivicAddressResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Device</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Device.Location.ICivicAddressResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides functionality for resolving a coordinate-based location to a civic address.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CivicAddressResolver class provides an implementation of <xref:System.Device.Location.ICivicAddressResolver> that resolves a coordinate-based location to a civic address if the location provider provides both coordinates and civic address data.  
  
   
  
## Examples  
 The following program shows how to call <xref:System.Device.Location.CivicAddressResolver.ResolveAddress%2A> to resolve a civic address synchronously.  
  
 [!code-cs[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/csharp/resolveaddresssync/resolvecivicaddresssync.cs#1)]
 [!code-vb[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/visualbasic/resolvecivicaddresssync/resolvecivicaddresssync.vb#1)]  
  
 The following program shows how to call <xref:System.Device.Location.CivicAddressResolver.ResolveAddressAsync%2A> to resolve a civic address asynchronously.  
  
 [!code-cs[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/csharp/resolveaddresssync/resolvecivicaddresssync.cs#1)]
 [!code-vb[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/visualbasic/resolvecivicaddresssync/resolvecivicaddresssync.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CivicAddressResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Device.Location.CivicAddressResolver" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to initialize a new instance of the <xref:System.Device.Location.CivicAddressResolver> class.  
  
```c#  
CivicAddressResolver resolver = new CivicAddressResolver();  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResolveAddress">
      <MemberSignature Language="C#" Value="public System.Device.Location.CivicAddress ResolveAddress (System.Device.Location.GeoCoordinate coordinate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Device.Location.CivicAddress ResolveAddress(class System.Device.Location.GeoCoordinate coordinate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Device.Location.CivicAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coordinate" Type="System.Device.Location.GeoCoordinate" />
      </Parameters>
      <Docs>
        <param name="coordinate">The <see cref="T:System.Device.Location.GeoCoordinate" /> containing the location to resolve to a civic address.</param>
        <summary>Synchronously resolves a civic address from a location based on latitude and longitude. This call will block execution of the calling thread while the address is being resolved.</summary>
        <returns>The civic address that is resolved from the <paramref name="coordinate" /> parameter. <see cref="T:System.Device.Location.CivicAddress" /> is returned if the address cannot be resolved.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted> event is raised when the address resolve operation completes. The civic address that is resolved from the `coordinate` parameter is returned by the <xref:System.Device.Location.ResolveAddressCompletedEventArgs.Address%2A> member of the <xref:System.Device.Location.ResolveAddressCompletedEventArgs> object that is passed to the event handler.  
  
   
  
## Examples  
 The following program demonstrates how to call ResolveAddress to resolve a civic address synchronously.  
  
 [!code-cs[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/csharp/resolveaddresssync/resolvecivicaddresssync.cs#1)]
 [!code-vb[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/visualbasic/resolvecivicaddresssync/resolvecivicaddresssync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="coordinate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="coordinate" /> does not contain a valid latitude and longitude.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResolveAddressAsync">
      <MemberSignature Language="C#" Value="public void ResolveAddressAsync (System.Device.Location.GeoCoordinate coordinate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResolveAddressAsync(class System.Device.Location.GeoCoordinate coordinate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coordinate" Type="System.Device.Location.GeoCoordinate" />
      </Parameters>
      <Docs>
        <param name="coordinate">The <see cref="T:System.Device.Location.GeoCoordinate" /> containing the location to resolve to a civic address.</param>
        <summary>Resolves an address asynchronously from a location that is based on latitude and longitude. The call does not block execution of the calling thread while the address is being resolved.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following program shows how to call ResolveAddressAsync to resolve a civic address asynchronously.  
  
 [!code-cs[System.Device.Location.ResolveCivicAddressAsync#1](~/add/codesnippet/csharp/resolveaddressasync/resolvecivicaddressasync.cs#1)]
 [!code-vb[System.Device.Location.ResolveCivicAddressAsync#1](~/add/codesnippet/visualbasic/resolvecivicaddressasync/resolvecivicaddressasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="coordinate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="coordinate" /> does not contain a valid latitude and longitude.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResolveAddressCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Device.Location.ResolveAddressCompletedEventArgs&gt; ResolveAddressCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Device.Location.ResolveAddressCompletedEventArgs&gt; ResolveAddressCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Device.Location.ResolveAddressCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the address resolution that was initiated by a call to &lt;xref:System.Device.Location.CivicAddressResolver.ResolveAddressAsync%2A&gt; completes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following program shows how to call <xref:System.Device.Location.CivicAddressResolver.ResolveAddressAsync%2A> to resolve a civic address asynchronously.  
  
 [!code-cs[System.Device.Location.ResolveCivicAddressAsync#1](~/add/codesnippet/csharp/resolveaddressasync/resolvecivicaddressasync.cs#1)]
 [!code-vb[System.Device.Location.ResolveCivicAddressAsync#1](~/add/codesnippet/visualbasic/resolvecivicaddressasync/resolvecivicaddressasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>