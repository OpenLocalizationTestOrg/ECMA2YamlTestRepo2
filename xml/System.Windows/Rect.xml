<Type Name="Rect" FullName="System.Windows.Rect">
  <TypeSignature Language="C#" Value="public struct Rect : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Rect extends System.ValueType implements class System.IFormattable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.RectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.RectValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes the width, height, and location of a rectangle.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_Duration"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ property="x,y,width,height"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## XAML Values  
 *x*  
 <xref:System.Double?displayProperty=fullName>  
  
 The x-coordinate location of the left side of the rectangle.  
  
 *y*  
 <xref:System.Double?displayProperty=fullName>  
  
 The y-coordinate location of the top side of the rectangle.  
  
 *width*  
 <xref:System.Double?displayProperty=fullName>  
  
 A non-negative value that represents the <xref:System.Windows.Rect.Width%2A> of the rectangle.  
  
 *height*  
 <xref:System.Double?displayProperty=fullName>  
  
 A non-negative value that represents the <xref:System.Windows.Rect.Height%2A> of the rectangle.  
  
   
  
## Examples  
 The following example shows how to use a Rect structure to specify the dimensions and location of a rectangle using XAML.  
  
 [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]
 [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  
  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Size size) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="size">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is of the specified size and is located at (0,0).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  
  
 [!code-cs[RectExamples_snip#CreateRectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">The first point that the new rectangle must contain.</param>
        <param name="point2">The second point that the new rectangle must contain.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the two specified points.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  
  
 [!code-cs[RectExamples_snip#CreateRectExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Point location, System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point location, valuetype System.Windows.Size size) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="location" Type="System.Windows.Point" />
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="location">A point that specifies the location of the top-left corner of the rectangle.</param>
        <param name="size">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified top-left corner location and the specified width and height.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  
  
 [!code-cs[RectExamples_snip#CreateRectExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point">The first point the rectangle must contain.</param>
        <param name="vector">The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  
  
 [!code-cs[RectExamples_snip#CreateRectExample5_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample5_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (double x, double y, double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y, float64 width, float64 height) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
        <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
        <param name="width">The width of the rectangle.</param>
        <param name="height">The height of the rectangle.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified x-coordinate, y-coordinate, width, and height.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  
  
 [!code-cs[RectExamples_snip#CreateRectExample6_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample6_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="width" /> is a negative value.  
  
 -or-  
  
 <paramref name="height" /> is a negative value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public double Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the y-axis value of the bottom of the rectangle.</summary>
        <value>The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is &lt;xref:System.Double&gt; .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The y-axis value of the bottom of the rectangle is equal to the sum of the <xref:System.Windows.Rect.Y%2A> and <xref:System.Windows.Rect.Height%2A> properties.  
  
   
  
## Examples  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BottomLeft">
      <MemberSignature Language="C#" Value="public System.Windows.Point BottomLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point BottomLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the position of the bottom-left corner of the rectangle</summary>
        <value>The position of the bottom-left corner of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The position of the bottom-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).  
  
   
  
## Examples  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BottomRight">
      <MemberSignature Language="C#" Value="public System.Windows.Point BottomRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point BottomRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the position of the bottom-right corner of the rectangle.</summary>
        <value>The position of the bottom-right corner of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The position of the bottom-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).  
  
   
  
## Examples  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(valuetype System.Windows.Point point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">The point to check.</param>
        <summary>Indicates whether the rectangle contains the specified point.</summary>
        <returns>
          <see langword="true" /> if the rectangle contains the specified point; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Contains method to determine if the rectangle contains the specified <xref:System.Windows.Point>.  
  
 [!code-cs[RectExamples_snip#ContainsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(valuetype System.Windows.Rect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to check.</param>
        <summary>Indicates whether the rectangle contains the specified rectangle.</summary>
        <returns>
          <see langword="true" /> if <paramref name="rect" /> is entirely contained by the rectangle; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Contains method to determine if one rectangle is contained by another rectangle.  
  
 [!code-cs[RectExamples_snip#ContainsExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(float64 x, float64 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate of the point to check.</param>
        <param name="y">The y-coordinate of the point to check.</param>
        <summary>Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.</summary>
        <returns>
          <see langword="true" /> if (<paramref name="x" />, <paramref name="y" />) is contained by the rectangle; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Contains method to determine if the rectangle contains the point specified by the given x-coordinate and y-coordinate.  
  
 [!code-cs[RectExamples_snip#ContainsExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Rect Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a special value that represents a rectangle with no position or area.</summary>
        <value>The empty rectangle, which has &lt;xref:System.Windows.Rect.X%2A&gt; and &lt;xref:System.Windows.Rect.Y%2A&gt; property values of &lt;xref:System.Double.PositiveInfinity&gt;, and has &lt;xref:System.Windows.Rect.Width%2A&gt; and &lt;xref:System.Windows.Rect.Height%2A&gt; property values of &lt;xref:System.Double.NegativeInfinity&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avoid mathematical computations involving empty rectangles. Because both <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> are infinite values, processor operations are severely impaired by these operations. Comparisons involving these values will not affect application performance.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to compare to the current rectangle.</param>
        <summary>Indicates whether the specified object is equal to the current rectangle.</summary>
        <returns>
          <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Rect" /> and has the same &lt;xref:System.Windows.Rect.Location%2A&gt; and &lt;xref:System.Windows.Rect.Size%2A&gt; values as the current rectangle; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation tests for object equality.  
  
 In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  
  
> [!NOTE]
>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.  
  
   
  
## Examples  
 The following example shows how to use the Equals method to determine if a rectangle is equal to a specified object.  
  
 [!code-cs[RectExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Rect value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Rect value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="value">The rectangle to compare to the current rectangle.</param>
        <summary>Indicates whether the specified rectangle is equal to the current rectangle.</summary>
        <returns>
          <see langword="true" /> if the specified rectangle has the same &lt;xref:System.Windows.Rect.Location%2A&gt; and &lt;xref:System.Windows.Rect.Size%2A&gt; values as the current rectangle; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation tests for object equality.  
  
 In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  
  
> [!NOTE]
>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.  
  
   
  
## Examples  
 The following example shows how to use the Equals method to determine if a rectangle is equal to a specified rectangle.  
  
 [!code-cs[RectExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1">The first rectangle to compare.</param>
        <param name="rect2">The second rectangle to compare.</param>
        <summary>Indicates whether the specified rectangles are equal.</summary>
        <returns>
          <see langword="true" /> if the rectangles have the same &lt;xref:System.Windows.Rect.Location%2A&gt; and &lt;xref:System.Windows.Rect.Size%2A&gt; values; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation tests for object equality.  
  
 In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  
  
> [!NOTE]
>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.  
  
   
  
## Examples  
 The following example shows how to use the Equals method to determine if one rectangle is equal to another.  
  
 [!code-cs[RectExamples_snip#EqualsExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a hash code for the rectangle.</summary>
        <returns>A hash code for the current <see cref="T:System.Windows.Rect" /> structure.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method creates a hash code by using the <xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>, <xref:System.Windows.Rect.Width%2A>, and <xref:System.Windows.Rect.Height%2A> property values.  
  
   
  
## Examples  
 The following example shows how to use the GetHashCode method to get the hash code of a <xref:System.Windows.Rect>.  
  
 [!code-cs[RectExamples_snip#GetHashCodeExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the rectangle.</summary>
        <value>A positive number that represents the height of the rectangle. The default is 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Rect.Empty%2A> rectangle has a Height of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Height cannot not be changed.  
  
   
  
## Examples  
 The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  
  
 [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]
 [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  
  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Height is set to a negative value.</exception>
        <exception cref="T:System.InvalidOperationException">Height is set on an &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public void Inflate (System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Inflate(valuetype System.Windows.Size size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" /> structure's &lt;xref:System.Windows.Size.Width%2A&gt; property specifies the amount to increase the rectangle's &lt;xref:System.Windows.Rect.Left%2A&gt; and &lt;xref:System.Windows.Rect.Right%2A&gt; properties. The <see cref="T:System.Windows.Size" /> structure's &lt;xref:System.Windows.Size.Height%2A&gt; property specifies the amount to increase the rectangle's &lt;xref:System.Windows.Rect.Top%2A&gt; and &lt;xref:System.Windows.Rect.Bottom%2A&gt; properties.</param>
        <summary>Expands the rectangle by using the specified <see cref="T:System.Windows.Size" />, in all directions.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.  
  
   
  
## Examples  
 The following example shows how to use the Inflate method to increase the size of a rectangle.  
  
 [!code-cs[RectExamples_snip#InflateExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public void Inflate (double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Inflate(float64 width, float64 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
        <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
        <summary>Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.  
  
 If the specified width or height shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>âgiving the rectangle a negative areaâthe rectangle becomes the <xref:System.Windows.Rect.Empty%2A> rectangle.  
  
   
  
## Examples  
 The following example shows how to use the Inflate method to change the size of a rectangle.  
  
 [!code-cs[RectExamples_snip#InflateExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Inflate (System.Windows.Rect rect, System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Inflate(valuetype System.Windows.Rect rect, valuetype System.Windows.Size size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="rect">The <see cref="T:System.Windows.Rect" /> structure to modify.</param>
        <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" /> structure's &lt;xref:System.Windows.Size.Width%2A&gt; property specifies the amount to increase the rectangle's &lt;xref:System.Windows.Rect.Left%2A&gt; and &lt;xref:System.Windows.Rect.Right%2A&gt; properties. The <see cref="T:System.Windows.Size" /> structure's &lt;xref:System.Windows.Size.Height%2A&gt; property specifies the amount to increase the rectangle's &lt;xref:System.Windows.Rect.Top%2A&gt; and &lt;xref:System.Windows.Rect.Bottom%2A&gt; properties.</param>
        <summary>Returns the rectangle that results from expanding the specified rectangle by the specified <see cref="T:System.Windows.Size" />, in all directions.</summary>
        <returns>The resulting rectangle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.  
  
   
  
## Examples  
 The following example shows how to use the Inflate method to change the size of a rectangle.  
  
 [!code-cs[RectExamples_snip#InflateExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="rect" /> is an &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Inflate (System.Windows.Rect rect, double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Inflate(valuetype System.Windows.Rect rect, float64 width, float64 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="rect">The <see cref="T:System.Windows.Rect" /> structure to modify.</param>
        <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
        <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
        <summary>Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.</summary>
        <returns>The resulting rectangle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.  
  
 If the specified width or height modifiers shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>âgiving the rectangle a negative areaâthis method returns <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example shows how to use the Inflate method to change the size of a rectangle.  
  
 [!code-cs[RectExamples_snip#InflateExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="rect" /> is an &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public void Intersect (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Intersect(valuetype System.Windows.Rect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to intersect with the current rectangle.</param>
        <summary>Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If no intersection exists, the current rectangle becomes <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example shows how to use the Intersect method to find the intersection of two rectangles and store the result as a rectangle.  
  
 [!code-cs[RectExamples_snip#IntersectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Intersect (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Intersect(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1">The first rectangle to compare.</param>
        <param name="rect2">The second rectangle to compare.</param>
        <summary>Returns the intersection of the specified rectangles.</summary>
        <returns>The intersection of the two rectangles, or &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; if no intersection exists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following example shows how to use the Intersect method to find the intersection of two rectangles.  
  
 [!code-cs[RectExamples_snip#IntersectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IntersectsWith">
      <MemberSignature Language="C#" Value="public bool IntersectsWith (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IntersectsWith(valuetype System.Windows.Rect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to check.</param>
        <summary>Indicates whether the specified rectangle intersects with the current rectangle.</summary>
        <returns>
          <see langword="true" /> if the specified rectangle intersects with the current rectangle; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the IntersectsWith method to determine if two rectangles intersect.  
  
 [!code-cs[RectExamples_snip#IntersectsWithExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectswithexample_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the rectangle is the &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle.</summary>
        <value>
          <see langword="true" /> if the rectangle is the &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not use this property to test for zero area; a rectangle with zero area is not necessarily the <xref:System.Windows.Rect.Empty%2A> rectangle. For more information, see the <xref:System.Windows.Rect.Empty%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the x-axis value of the left side of the rectangle.</summary>
        <value>The x-axis value of the left side of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Getting this property is equivalent to getting the <xref:System.Windows.Rect.X%2A> property.  
  
   
  
## Examples  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Windows.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the position of the top-left corner of the rectangle.</summary>
        <value>The position of the top-left corner of the rectangle. The default is (0, 0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).  
  
   
  
## Examples  
 The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  
  
 [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]
 [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  
  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Location is set on an &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (System.Windows.Vector offsetVector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(valuetype System.Windows.Vector offsetVector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetVector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="offsetVector">A vector that specifies the horizontal and vertical amounts to move the rectangle.</param>
        <summary>Moves the rectangle by the specified vector.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.  
  
 Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.  
  
   
  
## Examples  
 The following example shows how to use the Offset method to change the position of a rectangle.  
  
 [!code-cs[RectExamples_snip#OffsetExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(float64 offsetX, float64 offsetY) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offsetX">The amount to move the rectangle horizontally.</param>
        <param name="offsetY">The amount to move the rectangle vertically.</param>
        <summary>Moves the rectangle by the specified horizontal and vertical amounts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.  
  
 Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.  
  
   
  
## Examples  
 The following example shows how to use the Offset method to change the position of a rectangle.  
  
 [!code-cs[RectExamples_snip#OffsetExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Offset (System.Windows.Rect rect, System.Windows.Vector offsetVector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Offset(valuetype System.Windows.Rect rect, valuetype System.Windows.Vector offsetVector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="offsetVector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="rect">The original rectangle.</param>
        <param name="offsetVector">A vector that specifies the horizontal and vertical offsets for the new rectangle.</param>
        <summary>Returns a rectangle that is offset from the specified rectangle by using the specified vector.</summary>
        <returns>The resulting rectangle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.  
  
   
  
## Examples  
 The following example shows how to use the Offset method to change the position of a rectangle.  
  
 [!code-cs[RectExamples_snip#OffsetExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="rect" /> is &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Offset (System.Windows.Rect rect, double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Offset(valuetype System.Windows.Rect rect, float64 offsetX, float64 offsetY) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to move.</param>
        <param name="offsetX">The horizontal offset for the new rectangle.</param>
        <param name="offsetY">The vertical offset for the new rectangle.</param>
        <summary>Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.</summary>
        <returns>The resulting rectangle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.  
  
   
  
## Examples  
 The following example shows how to use the Offset method to change the position of a rectangle.  
  
 [!code-cs[RectExamples_snip#OffsetExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="rect" /> is &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1">The first rectangle to compare.</param>
        <param name="rect2">The second rectangle to compare.</param>
        <summary>Compares two rectangles for exact equality.</summary>
        <returns>
          <see langword="true" /> if the rectangles have the same &lt;xref:System.Windows.Rect.Location%2A&gt; and &lt;xref:System.Windows.Rect.Size%2A&gt; values; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation tests for object equality.  
  
 In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  
  
> [!NOTE]
>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.  
  
   
  
## Examples  
 The following example shows how to use the Equality operator to determine if two rectangles are exactly equal.  
  
 [!code-cs[RectExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[RectExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1">The first rectangle to compare.</param>
        <param name="rect2">The second rectangle to compare.</param>
        <summary>Compares two rectangles for inequality.</summary>
        <returns>
          <see langword="true" /> if the rectangles do not have the same &lt;xref:System.Windows.Rect.Location%2A&gt; and &lt;xref:System.Windows.Rect.Size%2A&gt; values; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation tests for object inequality.  
  
 In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  
  
> [!NOTE]
>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.  
  
   
  
## Examples  
 The following example shows how to use the Inequality operator to determine if two rectangles are not exactly equal.  
  
 [!code-cs[RectExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[RectExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Parse(string source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string representation of the rectangle, in the form "x, y, width, height".</param>
        <summary>Creates a new rectangle from the specified string representation.</summary>
        <returns>The resulting rectangle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Parse method to convert a string representation of a rectangle into a <xref:System.Windows.Rect> structure.  
  
 [!code-cs[RectExamples_snip#ParseExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#parseexample)]
 [!code-vb[RectExamples_snip#ParseExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public double Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the x-axis value of the right side of the rectangle.</summary>
        <value>The x-axis value of the right side of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The x-axis value of the right side of the rectangle is equal to the sum of the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Width%2A> properties.  
  
   
  
## Examples  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (double scaleX, double scaleY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float64 scaleX, float64 scaleY) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX">The scale factor in the x-direction.</param>
        <param name="scaleY">The scale factor in the y-direction.</param>
        <summary>Multiplies the size of the current rectangle by the specified x and y values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Scale method to multiply the width and height of a rectangle by the specified amount.  
  
 [!code-cs[RectExamples_snip#ScaleExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#scaleexample_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Windows.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width and height of the rectangle.</summary>
        <value>A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  
  
 [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]
 [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  
  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Size is set on an &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">The format to use.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the &lt;xref:System.IFormattable&gt; implementation.</param>
        <param name="provider">The provider to use to format the value.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
        <summary>Formats the value of the current instance using the specified format.</summary>
        <returns>A string representation of the rectangle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Rect> instance is cast to an <xref:System.IFormattable> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the y-axis position of the top of the rectangle.</summary>
        <value>The y-axis position of the top of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Getting this property is equivalent to getting the <xref:System.Windows.Rect.Y%2A> property.  
  
   
  
## Examples  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TopLeft">
      <MemberSignature Language="C#" Value="public System.Windows.Point TopLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point TopLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the position of the top-left corner of the rectangle.</summary>
        <value>The position of the top-left corner of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).  
  
   
  
## Examples  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TopRight">
      <MemberSignature Language="C#" Value="public System.Windows.Point TopRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point TopRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the position of the top-right corner of the rectangle.</summary>
        <value>The position of the top-right corner of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The position of the top-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A>).  
  
   
  
## Examples  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the rectangle.</summary>
        <returns>A string representation of the current rectangle. The string has the following form: "&lt;xref:System.Windows.Rect.X%2A&gt;,&lt;xref:System.Windows.Rect.Y%2A&gt;,&lt;xref:System.Windows.Rect.Width%2A&gt;,&lt;xref:System.Windows.Rect.Height%2A&gt;".</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the ToString method to get a string representation of a <xref:System.Windows.Rect> structure.  
  
 [!code-cs[RectExamples_snip#ToStringExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#tostringexample_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Culture-specific formatting information.</param>
        <summary>Returns a string representation of the rectangle by using the specified format provider.</summary>
        <returns>A string representation of the current rectangle that is determined by the specified format provider.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">A matrix that specifies the transformation to apply.</param>
        <summary>Transforms the rectangle by applying the specified matrix.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Transform method to transform a <xref:System.Windows.Rect> structure by using a <xref:System.Windows.Media.Matrix>.  
  
 [!code-cs[RectExamples_snip#TransformExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#transformexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Transform (System.Windows.Rect rect, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Transform(valuetype System.Windows.Rect rect, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle that is the basis for the transformation.</param>
        <param name="matrix">A matrix that specifies the transformation to apply.</param>
        <summary>Returns the rectangle that results from applying the specified matrix to the specified rectangle.</summary>
        <returns>The rectangle that results from the operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Transform method to create a new <xref:System.Windows.Rect> structure that results from applying a <xref:System.Windows.Media.Matrix> to an existing rectangle.  
  
 [!code-cs[RectExamples_snip#TransformExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#transformexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(valuetype System.Windows.Point point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">The point to include.</param>
        <summary>Expands the current rectangle exactly enough to contain the specified point.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Union method to expand the current rectangle exactly enough to contain a given <xref:System.Windows.Point>.  
  
 [!code-cs[RectExamples_snip#UnionExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(valuetype System.Windows.Rect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to include.</param>
        <summary>Expands the current rectangle exactly enough to contain the specified rectangle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Union method to expand the current rectangle exactly enough to contain the specified rectangle.  
  
 [!code-cs[RectExamples_snip#UnionExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Union (System.Windows.Rect rect, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Union(valuetype System.Windows.Rect rect, valuetype System.Windows.Point point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to include.</param>
        <param name="point">The point to include.</param>
        <summary>Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.</summary>
        <returns>A rectangle that is exactly large enough to contain the specified rectangle and the specified point.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain a given rectangle and a given <xref:System.Windows.Point>.  
  
 [!code-cs[RectExamples_snip#UnionExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Union (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Union(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1">The first rectangle to include.</param>
        <param name="rect2">The second rectangle to include.</param>
        <summary>Creates a rectangle that is exactly large enough to contain the two specified rectangles.</summary>
        <returns>The resulting rectangle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain two given rectangles.  
  
 [!code-cs[RectExamples_snip#UnionExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the rectangle.</summary>
        <value>A positive number that represents the width of the rectangle. The default is 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Rect.Empty%2A> rectangle has a Width of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Width cannot not be changed.  
  
   
  
## Examples  
 The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  
  
 [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]
 [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  
  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Width is set to a negative value.</exception>
        <exception cref="T:System.InvalidOperationException">Width is set on an &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the x-axis value of the left side of the rectangle.</summary>
        <value>The x-axis value of the left side of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Getting this property is equivalent to getting the <xref:System.Windows.Rect.Left%2A> property.  
  
   
  
## Examples  
 The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  
  
 [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]
 [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  
  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">X is set on an &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the y-axis value of the top side of the rectangle.</summary>
        <value>The y-axis value of the top side of the rectangle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Getting this property is equivalent to getting the <xref:System.Windows.Rect.Top%2A> property.  
  
   
  
## Examples  
 The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  
  
 [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]
 [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  
  
 The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  
  
 [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Y is set on an &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>