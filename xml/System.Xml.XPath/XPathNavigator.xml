<Type Name="XPathNavigator" FullName="System.Xml.XPath.XPathNavigator">
  <TypeSignature Language="C#" Value="public abstract class XPathNavigator : System.Xml.XPath.XPathItem, ICloneable, System.Xml.IXmlNamespaceResolver, System.Xml.XPath.IXPathNavigable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XPathNavigator extends System.Xml.XPath.XPathItem implements class System.ICloneable, class System.Xml.IXmlNamespaceResolver, class System.Xml.XPath.IXPathNavigable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XPath.XPathItem</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.XPath.IXPathNavigable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{debuggerDisplayProxy}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a cursor model for navigating and editing XML data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The XPathNavigator class in the <xref:System.Xml.XPath?displayProperty=fullName> namespace is an abstract class which defines a cursor model for navigating and editing XML information items as instances of the XQuery 1.0 and XPath 2.0 Data Model.  
  
 An XPathNavigator object is created from a class that implements the <xref:System.Xml.XPath.IXPathNavigable> interface such as the <xref:System.Xml.XPath.XPathDocument> and <xref:System.Xml.XmlDocument> classes. XPathNavigator objects created by <xref:System.Xml.XPath.XPathDocument> objects are read-only while XPathNavigator objects created by <xref:System.Xml.XmlDocument> objects can be edited. An XPathNavigator object's read-only or editable status is determined using the <xref:System.Xml.XPath.XPathNavigator.CanEdit%2A> property of the XPathNavigator class.  
  
 For more information about processing XML data using the XPath data model, see the [Process XML Data Using the XPath Data Model](~/add/includes/ajax-current-ext-md.md) topic.  
  
> [!IMPORTANT]
>  Exceptions raised as a result of using the XPathNavigator class, such as the <xref:System.Xml.XPath.XPathException> class, may contain sensitive information that should not be exposed in untrusted scenarios. Exceptions should be properly handled so that this sensitive information is not exposed in untrusted scenarios.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XPathNavigator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is called by derived class constructors to initialize state in this type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriter AppendChild ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlWriter AppendChild() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an &lt;xref:System.Xml.XmlWriter&gt; object used to create one or more new child nodes at the end of the list of child nodes of the current node.</summary>
        <returns>An &lt;xref:System.Xml.XmlWriter&gt; object used to create new child nodes at the end of the list of child nodes of the current node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appending child nodes adds the new nodes to the end of the list of child nodes for the current node. For example, when three child nodes exist for an element, the first appended node becomes the fourth child node. If no child nodes exist, then a new child node is created.  
  
 The following are important notes to consider when using the AppendChild method.  
  
-   The new child node is not inserted until the <xref:System.Xml.XmlWriter.Close%2A> method of the <xref:System.Xml.XmlWriter> object is called.  
  
-   The AppendChild method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on the root node or an element node.  
  
-   The AppendChild method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
 You can write more than one node to the writer. All nodes are appended to the end of the list of child nodes of the current node.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned from the AppendChild method.  
  
 [!code-cs[XPathNavigatorMethods#1](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_11_1.cs)]
 [!code-vb[XPathNavigatorMethods#1](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_11_1.vb)]
 [!code-cpp[XPathNavigatorMethods#1](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_11_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public virtual void AppendChild (string newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendChild(string newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newChild">The XML data string for the new child node.</param>
        <summary>Creates a new child node at the end of the list of child nodes of the current node using the XML data string specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appending a child node adds the new node to the end of the list of child nodes for the current node. For example, when three child nodes exist for an element, the appended node becomes the fourth child node. If no child nodes exist, then a new child node is created.  
  
 To create a new element node, include all XML syntax in the XML string parameter. The string for a new `book` node is `AppendChild("<book/>")`. The string for appending the text "book" to the current node's text node is `AppendChild("book")`. If the XML string contains multiple nodes, all nodes are added.  
  
 The following are important notes to consider when using the AppendChild method.  
  
-   The AppendChild method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on the root node or an element node.  
  
-   The AppendChild method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#2](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_29_1.cs)]
 [!code-vb[XPathNavigatorMethods#2](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_29_1.vb)]
 [!code-cpp[XPathNavigatorMethods#2](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_29_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The XML data string parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML data string parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public virtual void AppendChild (System.Xml.XmlReader newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendChild(class System.Xml.XmlReader newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="newChild">An &lt;xref:System.Xml.XmlReader&gt; object positioned on the XML data for the new child node.</param>
        <summary>Creates a new child node at the end of the list of child nodes of the current node using the XML contents of the &lt;xref:System.Xml.XmlReader&gt; object specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appending a child node adds the new node to the end of the list of child nodes for the current node. For example, when three child nodes exist for an element, the appended node becomes the fourth child node. If no child nodes exist, then a new child node is created.  
  
 The following are important notes to consider when using the AppendChild method.  
  
-   If the <xref:System.Xml.XmlReader> object is positioned over a sequence of XML nodes, all the nodes in the sequence are added.  
  
-   The AppendChild method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on the root node or an element node.  
  
-   The AppendChild method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlReader> object specified. The `http://www.contoso.com/books` namespace is specified so that the new child element is appended using the same namespace as the XML document.  
  
 [!code-cs[XPathNavigatorMethods#3](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_25_1.cs)]
 [!code-vb[XPathNavigatorMethods#3](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_25_1.vb)]
 [!code-cpp[XPathNavigatorMethods#3](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_25_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The &lt;xref:System.Xml.XmlReader&gt; object is in an error state or closed.</exception>
        <exception cref="T:System.ArgumentNullException">The &lt;xref:System.Xml.XmlReader&gt; object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML contents of the &lt;xref:System.Xml.XmlReader&gt; object parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public virtual void AppendChild (System.Xml.XPath.XPathNavigator newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendChild(class System.Xml.XPath.XPathNavigator newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="newChild">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new child node.</param>
        <summary>Creates a new child node at the end of the list of child nodes of the current node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appending a child node adds the new node to the end of the list of child nodes for the current node. For example, when three child nodes exist for an element, the appended node becomes the fourth child node. If no child nodes exist, then a new child node is created.  
  
 The following are important notes to consider when using the AppendChild method.  
  
-   If the <xref:System.Xml.XPath.XPathNavigator> object is positioned over a sequence of XML nodes, all the nodes in the sequence are added.  
  
-   The AppendChild method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on the root node or an element node.  
  
-   The AppendChild method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file using the node contained in the <xref:System.Xml.XPath.XPathNavigator> specified. The `http://www.contoso.com/books` namespace is specified so that the new child element is appended using the same namespace as the XML document.  
  
 [!code-cs[XPathNavigatorMethods#4](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_13_1.cs)]
 [!code-vb[XPathNavigatorMethods#4](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_13_1.vb)]
 [!code-cpp[XPathNavigatorMethods#4](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_13_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendChildElement">
      <MemberSignature Language="C#" Value="public virtual void AppendChildElement (string prefix, string localName, string namespaceURI, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendChildElement(string prefix, string localName, string namespaceURI, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The namespace prefix of the new child element node (if any).</param>
        <param name="localName">The local name of the new child element node (if any).</param>
        <param name="namespaceURI">The namespace URI of the new child element node (if any). &lt;xref:System.String&gt; and <see langword="null" /> are equivalent.</param>
        <param name="value">The value of the new child element node. If &lt;xref:System.String&gt; or <see langword="null" /> are passed, an empty element is created.</param>
        <summary>Creates a new child element node at the end of the list of child nodes of the current node using the namespace prefix, local name and namespace URI specified with the value specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appending a child node adds the new node to the end of the list of child nodes for the current node. For example, when three child nodes exist for an element node, the appended node becomes the fourth child node. If no child nodes exist, then a new child node is created.  
  
 Namespace prefix and URI values can be obtained by using the <xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> method or the  <xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> method. For example, the following syntax appends a child element by using the in-scope namespace `xmlns:bk=http://www.contoso.com/books`:  
  
```  
navigator.AppendChildElement(navigator.Prefix, "pages", LookupNamespaceURI(navigator.Prefix), String.Empty)  
```  
  
 This creates the new child `<bk:pages/>` element.  
  
 The following are important notes to consider when using the AppendChildElement method.  
  
-   If the namespace prefix specified is `null` or <xref:System.String.Empty?displayProperty=fullName>, then the prefix for the namespace URI of the new element is obtained from the current namespaces in-scope. If there is no namespace prefix assigned to the specified namespace URI at the current scope, then a namespace prefix is automatically generated.  
  
-   The AppendChildElement method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on the root node or an element node.  
  
-   The AppendChildElement method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#5](~/add/codesnippet/csharp/4b2e9d51-d3ec-4315-b1b0-_1.cs)]
 [!code-vb[XPathNavigatorMethods#5](~/add/codesnippet/visualbasic/4b2e9d51-d3ec-4315-b1b0-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#5](~/add/codesnippet/cpp/4b2e9d51-d3ec-4315-b1b0-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public abstract string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the base URI for the current node.</summary>
        <value>The location from which the node was loaded, or &lt;xref:System.String?displayProperty=fullName&gt; if there is no value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A networked XML document is comprised of chunks of data, aggregated using various W3C standard inclusion mechanisms, and therefore contains nodes that come from different places. DTD entities are an example of this aggregated data, but it is not limited to DTDs. The BaseURI property tells you where these nodes originate from.  
  
 For example, if the XML data is loaded from http://server/mydata.xml, the BaseURI property returns http://server/mydata.xml.  
  
> [!NOTE]
>  Nodes created using the <xref:System.Xml.XPath.XPathNavigator> class have the same BaseURI as the XML document the <xref:System.Xml.XPath.XPathNavigator> was created from.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanEdit">
      <MemberSignature Language="C#" Value="public virtual bool CanEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Xml.XPath.XPathNavigator" /> can edit the underlying XML data.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> can edit the underlying XML data; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CanEdit property has different values based on the three different implementations of the <xref:System.Xml.XPath.IXPathNavigable> interface in the .NET Framework. The CanEdit values for <xref:System.Xml.XPath.XPathNavigator> objects created by each implementation are listed in the following table.  
  
|<xref:System.Xml.XPath.IXPathNavigable> Implementation|CanEdit Value|  
|--------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Xml.XPath.XPathDocument>|`false`|  
|<xref:System.Xml.XmlDocument>|`true`|  
  
   
  
## Examples  
 The following example uses the CanEdit property to display the CanEdit values of the <xref:System.Xml.XPath.XPathDocument> and <xref:System.Xml.XmlDocument> classes.  
  
 [!code-vb[XPathNavigatorProperties#1](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_8_1.vb)]
 [!code-cpp[XPathNavigatorProperties#1](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_8_1.cpp)]
 [!code-cs[XPathNavigatorProperties#1](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_8_1.cs)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CheckValidity">
      <MemberSignature Language="C#" Value="public virtual bool CheckValidity (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckValidity(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> containing the schemas used to validate the XML data contained in the <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
        <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> that receives information about schema validation warnings and errors.</param>
        <summary>Verifies that the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> conforms to the XML Schema definition language (XSD) schema provided.</summary>
        <returns>
          <see langword="true" /> if no schema validation errors occurred; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   The CheckValidity method verifies that the XML data contained in the <xref:System.Xml.XPath.XPathNavigator> conforms to a global type or declaration in the schema or schemas provided in the <xref:System.Xml.Schema.XmlSchemaSet>.  
  
-   The CheckValidity method does not perform infoset augmentation. This means that schema defaults are not applied, text values are not converted to atomic values, and no new type information is associated with information items.  
  
-   Schema `xsi:schemaLocation` or `xsi:noNamespaceSchemaLocation` hints in the XML data of are ignored.  
  
-   If the <xref:System.Xml.XPath.XPathNavigator> is positioned on a document node, the validation process includes checking of uniqueness and reference constraints (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, and `xs:unique`). Otherwise, these checks are omitted.  
  
-   If the <xref:System.Xml.Schema.XmlSchemaSet> passed as a parameter is `null` and the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element node, the type information exposed by the <xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> property's <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaType%2A> property is used to check the node's validity. If the <xref:System.Xml.Schema.XmlSchemaSet> passed as a parameter is `null` and the <xref:System.Xml.XPath.XPathNavigator> is positioned on the root node, the <xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> property of the document element (that is, the element child of the root node) is used. In both cases if the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaType%2A> property of the element's <xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> property is `null` and the <xref:System.Xml.Schema.XmlSchemaSet> passed as a parameter is `null`, an <xref:System.InvalidOperationException> is thrown because there is no type information to use to perform validation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation error occurred, and no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> was specified to handle validation errors.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on a node that is not an element, attribute, or the root node or there is not type information to perform validation.</exception>
        <exception cref="T:System.ArgumentException">The CheckValidity method was called with an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> parameter when the <see cref="T:System.Xml.XPath.XPathNavigator" /> was not positioned on the root node of the XML data.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XPath.XPathNavigator Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNavigator Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned at the same node as this <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <returns>A new <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned at the same node as this <see cref="T:System.Xml.XPath.XPathNavigator" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Clone method is especially useful in conjunction with the <xref:System.Xml.XPath.XPathNodeIterator>. An <xref:System.Xml.XPath.XPathNodeIterator> is used to iterate over a selected node set, and contains a <xref:System.Xml.XPath.XPathNodeIterator.Current%2A> property which returns an <xref:System.Xml.XPath.XPathNavigator> positioned on the context node of the <xref:System.Xml.XPath.XPathNodeIterator>. However, the <xref:System.Xml.XPath.XPathNavigator> returned by the <xref:System.Xml.XPath.XPathNodeIterator.Current%2A> property cannot be used to move away from the node set. Instead, you clone the returned <xref:System.Xml.XPath.XPathNavigator> and use the cloned navigator to do any additional moves.  
  
 The cloned <xref:System.Xml.XPath.XPathNavigator> is not affected by subsequent changes to the original <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example gets all book titles authored by Herman Melville.  
  
 [!code-cs[XPathNavigatorMethods#6](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_27_1.cs)]
 [!code-vb[XPathNavigatorMethods#6](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_27_1.vb)]
 [!code-cpp[XPathNavigatorMethods#6](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_27_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ComparePosition">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNodeOrder ComparePosition (System.Xml.XPath.XPathNavigator nav);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Xml.XmlNodeOrder ComparePosition(class System.Xml.XPath.XPathNavigator nav) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeOrder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nav" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to compare against.</param>
        <summary>Compares the position of the current <see cref="T:System.Xml.XPath.XPathNavigator" /> with the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> specified.</summary>
        <returns>An <see cref="T:System.Xml.XmlNodeOrder" /> value representing the comparative position of the two <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table describes the <xref:System.Xml.XmlNodeOrder> enumeration.  
  
|XmlNodeOrder|Description|  
|------------------|-----------------|  
|<xref:System.Xml.XmlNodeOrder>|The current node of this <xref:System.Xml.XPath.XPathNavigator> is before the current node of the supplied <xref:System.Xml.XPath.XPathNavigator>.|  
|<xref:System.Xml.XmlNodeOrder>|The current node of this <xref:System.Xml.XPath.XPathNavigator> is after the current node of the supplied <xref:System.Xml.XPath.XPathNavigator>.|  
|<xref:System.Xml.XmlNodeOrder>|The two <xref:System.Xml.XPath.XPathNavigator> objects are positioned on the same node.|  
|<xref:System.Xml.XmlNodeOrder>|The node positions cannot be determined relative to each other in the document order, or `null` is specified as the <xref:System.Xml.XPath.XPathNavigator> parameter. This could occur if the two nodes reside in different trees.|  
  
 The ComparePosition method's behavior is dependent on the <xref:System.Xml.XPath.XPathNodeType> the <xref:System.Xml.XPath.XPathNavigator> is currently positioned on. When comparing nodes in the XML document, the following rules apply:  
  
-   <xref:System.Xml.XPath.XPathNodeType> nodes: These nodes are returned in document order from the source document.  
  
-   <xref:System.Xml.XPath.XPathNodeType> nodes: These nodes may be returned in document order and are always before the <xref:System.Xml.XPath.XPathNodeType> nodes of the parent element.  
  
-   <xref:System.Xml.XPath.XPathNodeType> nodes: These nodes may be returned in document order. They always come after the <xref:System.Xml.XPath.XPathNodeType> nodes and before any child nodes of the parent node.  
  
> [!NOTE]
>  For more information about the XPath data model and details about each of the node types, see section 5 of the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.  
  
 This method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
> [!NOTE]
>  Use the <xref:System.Xml.XPath.XPathNavigator.IsSamePosition%2A> method rather than the ComparePosition method when possible.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathExpression Compile (string xpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathExpression Compile(string xpath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">A string representing an XPath expression.</param>
        <summary>Compiles a string representing an XPath expression and returns an <see cref="T:System.Xml.XPath.XPathExpression" /> object.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathExpression" /> object representing the XPath expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An XPath expression is evaluated to yield one of the following return types:  
  
-   Node Set: an unordered collection of nodes without duplicates  
  
-   Boolean: `true` or `false`  
  
-   Number: a floating-point number  
  
-   String: a sequence of UCS characters  
  
 Expressions that return a node set can be used in the <xref:System.Xml.XPath.XPathNavigator.Select%2A> and <xref:System.Xml.XPath.XPathNavigator.Evaluate%2A> methods. Expressions that return a Boolean, number, or string can be used in the <xref:System.Xml.XPath.XPathNavigator.Evaluate%2A> method. The rules on valid expressions for the <xref:System.Xml.XPath.XPathNavigator.Matches%2A> method are specific to that method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="xpath" /> parameter contains an XPath expression that is not valid.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateAttribute">
      <MemberSignature Language="C#" Value="public virtual void CreateAttribute (string prefix, string localName, string namespaceURI, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateAttribute(string prefix, string localName, string namespaceURI, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The namespace prefix of the new attribute node (if any).</param>
        <param name="localName">The local name of the new attribute node which cannot &lt;xref:System.String?displayProperty=fullName&gt; or <see langword="null" />.</param>
        <param name="namespaceURI">The namespace URI for the new attribute node (if any).</param>
        <param name="value">The value of the new attribute node. If &lt;xref:System.String?displayProperty=fullName&gt; or <see langword="null" /> are passed, an empty attribute node is created.</param>
        <summary>Creates an attribute node on the current element node using the namespace prefix, local name and namespace URI specified with the value specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Namespace prefix and URI values can be obtained using the <xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> or <xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> method. For example, the following syntax creates an attribute by using the in-scope namespace `xmlns:bk="http://www.contoso.com/books"`:  
  
```  
editor.CreateAttribute(navigator.Prefix, "attributeName", LookupNamespace(navigator.Prefix), "text")  
```  
  
 This creates the new attribute `<bk:element attributeName="text"/>` on the current element.  
  
 The following are important notes to consider when using the CreateAttribute method.  
  
-   If the namespace prefix specified is <xref:System.String.Empty?displayProperty=fullName> or `null`, the prefix for the namespace URI of the new attribute is obtained from the current namespaces in-scope. If there is no namespace prefix assigned to the specified namespace URI at the current scope, a namespace prefix is automatically generated. For example to create a new attribute on an element in the default namespace of the `contosoBooks.xml` file, (`xmlns="http://www.contoso.com/books"`), you specify `null` or <xref:System.String.Empty?displayProperty=fullName> for both the namespace prefix and namespace URI parameters. Specifying `http://www.contoso.com/books` as the namespace URI parameter will cause the CreateAttribute method to auto generate a namespace prefix for the new attribute.  
  
-   If the new attribute created is a namespace node which conflicts with a namespace declaration on the element, either because the namespace prefix chosen is used by another namespace declaration at the same scope, or because the prefix chosen is the same as that of the element but is bound to a different namespace URI, an exception is thrown.  
  
-   The CreateAttribute method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `discount` attribute is created on the `price` child element of the first `book` element in the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#7](~/add/codesnippet/csharp/59adcad2-a883-49a8-bace-_1.cs)]
 [!code-vb[XPathNavigatorMethods#7](~/add/codesnippet/visualbasic/59adcad2-a883-49a8-bace-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#7](~/add/codesnippet/cpp/59adcad2-a883-49a8-bace-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriter CreateAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlWriter CreateAttributes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an &lt;xref:System.Xml.XmlWriter&gt; object used to create new attributes on the current element.</summary>
        <returns>An &lt;xref:System.Xml.XmlWriter&gt; object used to create new attributes on the current element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following are important notes to consider when using the CreateAttributes method.  
  
-   When the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, the new attributes created by the <xref:System.Xml.XPath.XPathNavigator> method are placed at the end of the attribute list of the current element.  
  
-   The new attributes are not inserted until the <xref:System.Xml.XmlWriter.Close%2A> method of the <xref:System.Xml.XmlWriter> object is called.  
  
-   If the namespace prefix specified is <xref:System.String.Empty?displayProperty=fullName> or `null`, the prefix for the namespace URI of the new attribute is obtained from the current namespaces in-scope. If there is no namespace prefix assigned to the specified namespace URI at the current scope, a namespace prefix is automatically generated. For example to create a new attribute on an element in the default namespace of the `contosoBooks.xml` file, (`xmlns="http://www.contoso.com/books"`), you specify `null` or <xref:System.String.Empty?displayProperty=fullName> for both the namespace prefix and namespace URI parameters. Specifying `http://www.contoso.com/books` as the namespace URI parameter will cause the <xref:System.Xml.XPath.XPathNavigator.CreateAttribute%2A> method to auto generate a namespace prefix for the new attribute.  
  
-   If the new attribute created is a namespace node which conflicts with a namespace declaration on the element, either because the namespace prefix chosen is used by another namespace declaration at the same scope, or because the prefix chosen is the same as that of the element but is bound to a different namespace URI, an exception is thrown.  
  
-   The <xref:System.Xml.XmlWriter> object returned may only be used to create attributes. Calling other <xref:System.Xml.XmlWriter> object methods that do not create attributes throws an exception.  
  
-   The CreateAttributes method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, new `discount` and `currency` attributes are created on the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned from the CreateAttributes method.  
  
 [!code-cs[XPathNavigatorMethods#8](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_1_1.cs)]
 [!code-vb[XPathNavigatorMethods#8](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_1_1.vb)]
 [!code-cpp[XPathNavigatorMethods#8](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_1_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNavigator CreateNavigator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a copy of the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> copy of this <see cref="T:System.Xml.XPath.XPathNavigator" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is equivalent to the <xref:System.Xml.XPath.XPathNavigator.Clone%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteRange">
      <MemberSignature Language="C#" Value="public virtual void DeleteRange (System.Xml.XPath.XPathNavigator lastSiblingToDelete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteRange(class System.Xml.XPath.XPathNavigator lastSiblingToDelete) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lastSiblingToDelete" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="lastSiblingToDelete">An <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned on the last sibling node in the range to delete.</param>
        <summary>Deletes a range of sibling nodes from the current node to the node specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DeleteRange method deletes a range of sibling nodes from the current node the <xref:System.Xml.XPath.XPathNavigator> is positioned on (inclusive) to the node specified by the <xref:System.Xml.XPath.XPathNavigator> parameter (inclusive). The <xref:System.Xml.XPath.XPathNavigator> is then positioned on its parent node.  
  
   
  
## Examples  
 In the following example, the first and second `book` elements of the `contosoBooks.xml` file are deleted using the DeleteRange method.  
  
 [!code-cs[XPathNavigatorMethods#52](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_9_1.cs)]
 [!code-vb[XPathNavigatorMethods#52](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_9_1.vb)]
 [!code-cpp[XPathNavigatorMethods#52](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_9_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> specified is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.InvalidOperationException">The last node to delete specified is not a valid sibling node of the current node.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteSelf">
      <MemberSignature Language="C#" Value="public virtual void DeleteSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteSelf() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deletes the current node and its child nodes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   The <xref:System.Xml.XPath.XPathNavigator> is positioned on the deleted node's parent node on successful deletion.  
  
-   If the deleted node is a text node which is the content of a simple typed element, the element loses its type information. This means that when positioned on the element the <xref:System.Xml.XPath.XPathNavigator.XmlType%2A>, <xref:System.Xml.XPath.XPathNavigator.ValueType%2A> and <xref:System.Xml.XPath.XPathNavigator.TypedValue%2A> properties have the values `null`, <xref:System.String> and <xref:System.String.Empty> respectively.  
  
-   Deleted nodes are still accessible to <xref:System.Xml.XPath.XPathNavigator> objects positioned over them prior to deletion. However methods that attempt to move away from the deleted sub-tree fail. For example, the <xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> and <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> methods always fail when the <xref:System.Xml.XPath.XPathNavigator> is positioned over the top most deleted node. This is because the deleted node is no longer connected to the XML document. Similarly the <xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A> method always fails if the <xref:System.Xml.XPath.XPathNavigator> is positioned on the bottom-most deleted node.  
  
   
  
## Examples  
 In the following example the `price` element of the first `book` element of the `contosoBooks.xml` file is deleted using the DeleteSelf method. The position of the <xref:System.Xml.XPath.XPathNavigator> object after the `price` element is deleted is on the parent `book` element.  
  
 [!code-cs[XPathNavigatorMethods#9](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_31_1.cs)]
 [!code-vb[XPathNavigatorMethods#9](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_31_1.vb)]
 [!code-cpp[XPathNavigatorMethods#9](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_31_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on a node that cannot be deleted such as the root node or a namespace node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public virtual object Evaluate (string xpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate(string xpath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">A string representing an XPath expression that can be evaluated.</param>
        <summary>Evaluates the specified XPath expression and returns the typed result.</summary>
        <returns>The result of the expression (Boolean, number, string, or node set). This maps to &lt;xref:System.Boolean&gt;, &lt;xref:System.Double&gt;, &lt;xref:System.String&gt;, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following C# code converts the `Price/text()` node to a number, multiplies it by 10, and returns the resulting value.  
  
```  
nav.Evaluate("Price/text()*10");  
```  
  
> [!NOTE]
>  The XPath position() and last() functions, unless used as a predicate in a location step, require a reference to a node set in order to be evaluated. In this case, you must use the overload which takes an <xref:System.Xml.XPath.XPathNodeIterator> as an argument; otherwise, position() and last() return 0.  
  
 This method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example evaluates an XPath expression and returns a <xref:System.Double>.  
  
 [!code-cs[XPathNavigatorMethods#10](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_34_1.cs)]
 [!code-vb[XPathNavigatorMethods#10](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_34_1.vb)]
 [!code-cpp[XPathNavigatorMethods#10](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_34_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public virtual object Evaluate (System.Xml.XPath.XPathExpression expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate(class System.Xml.XPath.XPathExpression expr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expr" Type="System.Xml.XPath.XPathExpression" />
      </Parameters>
      <Docs>
        <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> that can be evaluated.</param>
        <summary>Evaluates the <see cref="T:System.Xml.XPath.XPathExpression" /> and returns the typed result.</summary>
        <returns>The result of the expression (Boolean, number, string, or node set). This maps to &lt;xref:System.Boolean&gt;, &lt;xref:System.Double&gt;, &lt;xref:System.String&gt;, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following C# code returns a number after converting the `Price/text()` node to a number and multiplying the value by 10.  
  
```  
XPathExpression expr = nav.Compile("Price/text()*10");  
nav.Evaluate(expr);  
```  
  
> [!NOTE]
>  The XPath position() and last() functions, unless used as a predicate in a location step, require a reference to a node set in order to be evaluated. In this case, you must use the overload which takes an <xref:System.Xml.XPath.XPathNodeIterator> as an argument; otherwise, position() and last() return 0.  
  
 This method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example evaluates an <xref:System.Xml.XPath.XPathExpression> and returns a <xref:System.Double>.  
  
 [!code-cs[XPathNavigatorMethods#11](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_37_1.cs)]
 [!code-vb[XPathNavigatorMethods#11](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_37_1.vb)]
 [!code-cpp[XPathNavigatorMethods#11](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_37_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public virtual object Evaluate (string xpath, System.Xml.IXmlNamespaceResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate(string xpath, class System.Xml.IXmlNamespaceResolver resolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="xpath">A string representing an XPath expression that can be evaluated.</param>
        <param name="resolver">The &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object used to resolve namespace prefixes in the XPath expression.</param>
        <summary>Evaluates the specified XPath expression and returns the typed result, using the &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object specified to resolve namespace prefixes in the XPath expression.</summary>
        <returns>The result of the expression (Boolean, number, string, or node set). This maps to &lt;xref:System.Boolean&gt;, &lt;xref:System.Double&gt;, &lt;xref:System.String&gt;, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following C# code returns a number after converting the `Price/text()` node to a number and multiplying the value by 10.  
  
```  
XPathExpression expr = nav.Compile("Price/text()*10");  
nav.Evaluate(expr);  
```  
  
> [!NOTE]
>  The XPath position() and last() functions, unless used as a predicate in a location step, require a reference to a node set in order to be evaluated. In this case, you must use the overload which takes an <xref:System.Xml.XPath.XPathNodeIterator> as an argument; otherwise, position() and last() return 0.  
  
 This method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example evaluates an XPath expression and returns a <xref:System.Double> using the <xref:System.Xml.XmlNamespaceManager> object specified to resolve namespace prefixes in the XPath expression.  
  
 [!code-cs[XPathNavigatorMethods#12](~/add/codesnippet/csharp/bb1f44fa-0086-4843-b4f9-_1.cs)]
 [!code-vb[XPathNavigatorMethods#12](~/add/codesnippet/visualbasic/bb1f44fa-0086-4843-b4f9-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#12](~/add/codesnippet/cpp/bb1f44fa-0086-4843-b4f9-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public virtual object Evaluate (System.Xml.XPath.XPathExpression expr, System.Xml.XPath.XPathNodeIterator context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate(class System.Xml.XPath.XPathExpression expr, class System.Xml.XPath.XPathNodeIterator context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expr" Type="System.Xml.XPath.XPathExpression" />
        <Parameter Name="context" Type="System.Xml.XPath.XPathNodeIterator" />
      </Parameters>
      <Docs>
        <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> that can be evaluated.</param>
        <param name="context">An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that points to the selected node set that the evaluation is to be performed on.</param>
        <summary>Uses the supplied context to evaluate the <see cref="T:System.Xml.XPath.XPathExpression" />, and returns the typed result.</summary>
        <returns>The result of the expression (Boolean, number, string, or node set). This maps to &lt;xref:System.Boolean&gt;, &lt;xref:System.Double&gt;, &lt;xref:System.String&gt;, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The expression is evaluated using the <xref:System.Xml.XPath.XPathNodeIterator.Current%2A> node of the <xref:System.Xml.XPath.XPathNodeIterator> as the context node. If `context` is `null`, the node on which the <xref:System.Xml.XPath.XPathNavigator> is currently positioned is used as the context node.  
  
 The position() and last() functions, unless used as a predicate in a location step, always return 0 under the following conditions:  
  
-   The `context` argument is `null`.  
  
-   <xref:System.Xml.XPath.XPathNodeIterator.MoveNext%2A> has not been called on the <xref:System.Xml.XPath.XPathNodeIterator>.  
  
 Because the position() and last() functions work on the current node, you should not use the <xref:System.Xml.XPath.XPathNodeIterator.Current%2A> property to move away from the selected node set. This could invalidate the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
 This method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example evaluates an <xref:System.Xml.XPath.XPathExpression> and returns a <xref:System.Double> using the <xref:System.Xml.XPath.XPathNodeIterator.Current%2A> node of the <xref:System.Xml.XPath.XPathNodeIterator> as the context node.  
  
 [!code-cs[XPathNavigatorMethods#13](~/add/codesnippet/csharp/5558037b-c92b-456f-bb8e-_1.cs)]
 [!code-vb[XPathNavigatorMethods#13](~/add/codesnippet/visualbasic/5558037b-c92b-456f-bb8e-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#13](~/add/codesnippet/cpp/5558037b-c92b-456f-bb8e-_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public virtual string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the attribute. `localName` is case-sensitive.</param>
        <param name="namespaceURI">The namespace URI of the attribute.</param>
        <summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
        <returns>A &lt;xref:System.String&gt; that contains the value of the specified attribute; &lt;xref:System.String?displayProperty=fullName&gt; if a matching attribute is not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathNavigator> must be positioned on an element node before calling the GetAttribute method.  
  
 This method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNamespace">
      <MemberSignature Language="C#" Value="public virtual string GetNamespace (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetNamespace(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The local name of the namespace node.</param>
        <summary>Returns the value of the namespace node corresponding to the specified local name.</summary>
        <returns>A &lt;xref:System.String&gt; that contains the value of the namespace node; &lt;xref:System.String?displayProperty=fullName&gt; if a matching namespace node is not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Namespaces `xml` and `xmlns` always return a value. If <xref:System.String.Empty?displayProperty=fullName> is specified as the `name` parameter, the GetNamespace method returns the default `xmlns` namespace.  
  
 For a definition of namespace nodes, see section 5.4 of the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.  
  
 This method does not affect the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNamespacesInScope">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IDictionary&lt;string,string&gt; GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">An &lt;xref:System.Xml.XmlNamespaceScope&gt; value specifying the namespaces to return.</param>
        <summary>Returns the in-scope namespaces of the current node.</summary>
        <returns>An &lt;xref:System.Collections.Generic.IDictionary%602&gt; collection of namespace names keyed by prefix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The namespaces returned depends on the <xref:System.Xml.XmlNamespaceScope> value specified.  
  
|XmlNamespaceScope Value|Namespaces Returned|  
|-----------------------------|-------------------------|  
|<xref:System.Xml.XmlNamespaceScope>|All namespaces defined in the scope of the current node. This includes the `xmlns:xml` namespace, which is always declared implicitly. The order of the namespaces returned is not defined.|  
|<xref:System.Xml.XmlNamespaceScope>|All namespaces defined in the scope of the current node, excluding the `xmlns:xml` namespace, which is always declared implicitly. The order of the namespaces returned is not defined.|  
|<xref:System.Xml.XmlNamespaceScope>|All namespaces that are defined locally at the current node.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public virtual bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current node has any attributes.</summary>
        <value>Returns <see langword="true" /> if the current node has attributes; returns <see langword="false" /> if the current node has no attributes, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public virtual bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current node has any child nodes.</summary>
        <value>
          <see langword="true" /> if the current node has any child nodes; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Xml.XPath.XPathNavigator> is positioned on a node that cannot have child nodes, the HasChildren property always returns `false`.  
  
 The following table lists the child node <xref:System.Xml.XPath.XPathNodeType> nodes allowed for each <xref:System.Xml.XPath.XPathNodeType> node.  
  
|XPathNodeType Node|Child XPathNodeType Nodes|  
|------------------------|-------------------------------|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType> nodes. **Note:**  <xref:System.Xml.XmlNodeType> is equivalent to <xref:System.Xml.XPath.XPathNodeType> when using the <xref:System.Xml.XmlDocument> class and can have the same children as an element.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType> nodes.|  
|All other <xref:System.Xml.XPath.XPathNodeType> nodes|Cannot have child nodes.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InnerXml">
      <MemberSignature Language="C#" Value="public virtual string InnerXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the markup representing the child nodes of the current node.</summary>
        <value>A &lt;xref:System.String&gt; that contains the markup of the child nodes of the current node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The InnerXml and <xref:System.Xml.XPath.XPathNavigator.OuterXml%2A> properties are not very efficient. If performance is a priority, it is more efficient to use the node navigation methods of the <xref:System.Xml.XPath.XPathNavigator> to get values of child nodes.  
  
   
  
## Examples  
 The following example uses the InnerXml property to display the contents of the first `book` element in the `contosoBooks.xml` file and its child nodes in the <xref:System.Xml.XPath.XPathNavigator>.  
  
 [!code-vb[XPathNavigatorProperties#2](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_0_1.vb)]
 [!code-cpp[XPathNavigatorProperties#2](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_0_1.cpp)]
 [!code-cs[XPathNavigatorProperties#2](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_0_1.cs)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The InnerXml property cannot be set.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriter InsertAfter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlWriter InsertAfter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an &lt;xref:System.Xml.XmlWriter&gt; object used to create a new sibling node after the currently selected node.</summary>
        <returns>An &lt;xref:System.Xml.XmlWriter&gt; object used to create a new sibling node after the currently selected node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following are important notes to consider when using the InsertAfter method.  
  
-   The new sibling node is not inserted until the <xref:System.Xml.XmlWriter.Close%2A> method of the <xref:System.Xml.XmlWriter> object is called.  
  
-   The InsertAfter method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertAfter method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned by the InsertAfter method.  
  
 [!code-cs[XPathNavigatorMethods#14](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_36_1.cs)]
 [!code-vb[XPathNavigatorMethods#14](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_36_1.vb)]
 [!code-cpp[XPathNavigatorMethods#14](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_36_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public virtual void InsertAfter (string newSibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertAfter(string newSibling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSibling" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newSibling">The XML data string for the new sibling node.</param>
        <summary>Creates a new sibling node after the currently selected node using the XML string specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To create a new element node, include all XML syntax in the XML string parameter. The string for a new `book` node is `InsertAfter("<book/>")`. The string for inserting the text "book" after the current node's text node is `InsertAfter("book")`. If the XML string contains multiple nodes, all nodes are added.  
  
 The following are important notes to consider when using the InsertAfter method.  
  
-   The InsertAfter method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertAfter method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#15](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_7_1.cs)]
 [!code-vb[XPathNavigatorMethods#15](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_7_1.vb)]
 [!code-cpp[XPathNavigatorMethods#15](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_7_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The XML string parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public virtual void InsertAfter (System.Xml.XmlReader newSibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertAfter(class System.Xml.XmlReader newSibling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSibling" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="newSibling">An &lt;xref:System.Xml.XmlReader&gt; object positioned on the XML data for the new sibling node.</param>
        <summary>Creates a new sibling node after the currently selected node using the XML contents of the &lt;xref:System.Xml.XmlReader&gt; object specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following are important notes to consider when using the InsertAfter method.  
  
-   If the <xref:System.Xml.XmlReader> object is positioned over a sequence of XML nodes, all the nodes in the sequence are added.  
  
-   The InsertAfter method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertAfter method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlReader> object specified. The `http://www.contoso.com/books` namespace is specified so that the new sibling element is inserted using the same namespace as the XML document.  
  
 [!code-cs[XPathNavigatorMethods#16](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_42_1.cs)]
 [!code-vb[XPathNavigatorMethods#16](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_42_1.vb)]
 [!code-cpp[XPathNavigatorMethods#16](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_42_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The &lt;xref:System.Xml.XmlReader&gt; object is in an error state or closed.</exception>
        <exception cref="T:System.ArgumentNullException">The &lt;xref:System.Xml.XmlReader&gt; object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML contents of the &lt;xref:System.Xml.XmlReader&gt; object parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public virtual void InsertAfter (System.Xml.XPath.XPathNavigator newSibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertAfter(class System.Xml.XPath.XPathNavigator newSibling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSibling" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="newSibling">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new sibling node.</param>
        <summary>Creates a new sibling node after the currently selected node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> object specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following are important notes to consider when using the InsertAfter method.  
  
-   If the <xref:System.Xml.XmlReader> object is positioned over a sequence of XML nodes, all the nodes in the sequence are added.  
  
-   The InsertAfter method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertAfter method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file using the node contained in the <xref:System.Xml.XPath.XPathNavigator> object specified. The `http://www.contoso.com/books` namespace is specified so that the new sibling element is inserted using the same namespace as the XML document.  
  
 [!code-cs[XPathNavigatorMethods#17](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_4_1.cs)]
 [!code-vb[XPathNavigatorMethods#17](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_4_1.vb)]
 [!code-cpp[XPathNavigatorMethods#17](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_4_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriter InsertBefore ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlWriter InsertBefore() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an &lt;xref:System.Xml.XmlWriter&gt; object used to create a new sibling node before the currently selected node.</summary>
        <returns>An &lt;xref:System.Xml.XmlWriter&gt; object used to create a new sibling node before the currently selected node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following are important notes to consider when using the InsertBefore method.  
  
-   The new sibling node is not inserted until the <xref:System.Xml.XmlWriter.Close%2A> method of the <xref:System.Xml.XmlWriter> object is called.  
  
-   The InsertBefore method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertBefore method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned by the InsertBefore method.  
  
 [!code-cs[XPathNavigatorMethods#18](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_38_1.cs)]
 [!code-vb[XPathNavigatorMethods#18](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_38_1.vb)]
 [!code-cpp[XPathNavigatorMethods#18](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_38_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public virtual void InsertBefore (string newSibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertBefore(string newSibling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSibling" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newSibling">The XML data string for the new sibling node.</param>
        <summary>Creates a new sibling node before the currently selected node using the XML string specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To create a new element node, include all XML syntax in the XML string parameter. The string for a new `book` node is `InsertBefore("<book/>")`. The string for inserting the text "book" before the current node's text node is `InsertBefore("book")`. If the XML string contains multiple nodes, all nodes are added.  
  
 The following are important notes to consider when using the InsertBefore method.  
  
-   The InsertBefore method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertBefore method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#19](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_8_1.cs)]
 [!code-vb[XPathNavigatorMethods#19](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_8_1.vb)]
 [!code-cpp[XPathNavigatorMethods#19](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_8_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The XML string parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public virtual void InsertBefore (System.Xml.XmlReader newSibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertBefore(class System.Xml.XmlReader newSibling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSibling" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="newSibling">An &lt;xref:System.Xml.XmlReader&gt; object positioned on the XML data for the new sibling node.</param>
        <summary>Creates a new sibling node before the currently selected node using the XML contents of the &lt;xref:System.Xml.XmlReader&gt; object specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following are important notes to consider when using the InsertBefore method.  
  
-   If the <xref:System.Xml.XmlReader> object is positioned over a sequence of XML nodes, all the nodes in the sequence are added.  
  
-   The InsertBefore method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertBefore method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlReader> object specified. The `http://www.contoso.com/books` namespace is specified so that the new sibling element is inserted using the same namespace as the XML document.  
  
 [!code-cs[XPathNavigatorMethods#20](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_2_1.cs)]
 [!code-vb[XPathNavigatorMethods#20](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_2_1.vb)]
 [!code-cpp[XPathNavigatorMethods#20](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_2_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The &lt;xref:System.Xml.XmlReader&gt; object is in an error state or closed.</exception>
        <exception cref="T:System.ArgumentNullException">The &lt;xref:System.Xml.XmlReader&gt; object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML contents of the &lt;xref:System.Xml.XmlReader&gt; object parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public virtual void InsertBefore (System.Xml.XPath.XPathNavigator newSibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertBefore(class System.Xml.XPath.XPathNavigator newSibling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSibling" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="newSibling">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new sibling node.</param>
        <summary>Creates a new sibling node before the currently selected node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following are important notes to consider when using the InsertBefore method.  
  
-   If the <xref:System.Xml.XPath.XPathNavigator> object is positioned over a sequence of XML nodes, all the nodes in the sequence are added.  
  
-   The InsertBefore method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertBefore method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file using the node contained in the <xref:System.Xml.XPath.XPathNavigator> object specified. The `http://www.contoso.com/books` namespace is specified so that the new sibling element is inserted using the same namespace as the XML document.  
  
 [!code-cs[XPathNavigatorMethods#21](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_5_1.cs)]
 [!code-vb[XPathNavigatorMethods#21](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_5_1.vb)]
 [!code-cpp[XPathNavigatorMethods#21](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_5_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertElementAfter">
      <MemberSignature Language="C#" Value="public virtual void InsertElementAfter (string prefix, string localName, string namespaceURI, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertElementAfter(string prefix, string localName, string namespaceURI, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The namespace prefix of the new child element (if any).</param>
        <param name="localName">The local name of the new child element (if any).</param>
        <param name="namespaceURI">The namespace URI of the new child element (if any). &lt;xref:System.String&gt; and <see langword="null" /> are equivalent.</param>
        <param name="value">The value of the new child element. If &lt;xref:System.String&gt; or <see langword="null" /> are passed, an empty element is created.</param>
        <summary>Creates a new sibling element after the current node using the namespace prefix, local name and namespace URI specified, with the value specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Namespace prefix and URI values can be obtained using the <xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> or <xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> method. For example, the following syntax inserts a sibling element by using the in-scope namespace `xmlns:bk="http://www.contoso.com/books"`:  
  
```  
navigator.InsertElementAfter(navigator.Prefix, "pages", LookupNamespaceURI(navigator.Prefix), String.Empty)  
```  
  
 This creates the new sibling `<bk:pages/>` element.  
  
 The following are important notes to consider when using the InsertElementAfter method.  
  
-   If the namespace prefix specified is `null` or <xref:System.String.Empty?displayProperty=fullName>, then the prefix for the namespace URI of the new element is obtained from the current namespaces in-scope. If there is no namespace prefix assigned to the specified namespace URI at the current scope, then a namespace prefix is automatically generated.  
  
-   The InsertElementAfter method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertElementAfter method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#22](~/add/codesnippet/csharp/a264880b-8998-4101-acb3-_1.cs)]
 [!code-vb[XPathNavigatorMethods#22](~/add/codesnippet/visualbasic/a264880b-8998-4101-acb3-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#22](~/add/codesnippet/cpp/a264880b-8998-4101-acb3-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertElementBefore">
      <MemberSignature Language="C#" Value="public virtual void InsertElementBefore (string prefix, string localName, string namespaceURI, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertElementBefore(string prefix, string localName, string namespaceURI, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The namespace prefix of the new child element (if any).</param>
        <param name="localName">The local name of the new child element (if any).</param>
        <param name="namespaceURI">The namespace URI of the new child element (if any). &lt;xref:System.String&gt; and <see langword="null" /> are equivalent.</param>
        <param name="value">The value of the new child element. If &lt;xref:System.String&gt; or <see langword="null" /> are passed, an empty element is created.</param>
        <summary>Creates a new sibling element before the current node using the namespace prefix, local name, and namespace URI specified, with the value specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Namespace prefix and URI values can be obtained using the <xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> or <xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> method. For example, the following syntax inserts a sibling element by using the in-scope namespace `xmlns:bk="http://www.contoso.com/books"`:  
  
```  
navigator.InsertElementBefore(navigator.Prefix, "pages", LookupNamespaceURI(navigator.Prefix), String.Empty)  
```  
  
 This creates the new sibling `<bk:pages/>` element.  
  
 The following are important notes to consider when using the InsertElementBefore method.  
  
-   If the namespace prefix specified is `null` or <xref:System.String.Empty?displayProperty=fullName>, then the prefix for the namespace URI of the new element is obtained from the current namespaces in-scope. If there is no namespace prefix assigned to the specified namespace URI at the current scope, then a namespace prefix is automatically generated.  
  
-   The InsertElementBefore method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   The InsertElementBefore method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#23](~/add/codesnippet/csharp/8d231bd2-ec77-4095-aaef-_1.cs)]
 [!code-vb[XPathNavigatorMethods#23](~/add/codesnippet/visualbasic/8d231bd2-ec77-4095-aaef-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#23](~/add/codesnippet/cpp/8d231bd2-ec77-4095-aaef-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDescendant">
      <MemberSignature Language="C#" Value="public virtual bool IsDescendant (System.Xml.XPath.XPathNavigator nav);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDescendant(class System.Xml.XPath.XPathNavigator nav) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nav" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
        <summary>Determines whether the specified <see cref="T:System.Xml.XPath.XPathNavigator" /> is a descendant of the current <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <returns>
          <see langword="true" /> if the specified <see cref="T:System.Xml.XPath.XPathNavigator" /> is a descendant of the current <see cref="T:System.Xml.XPath.XPathNavigator" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An <xref:System.Xml.XPath.XPathNavigator> is a descendant of the current <xref:System.Xml.XPath.XPathNavigator> if it is positioned on a descendant node of the current <xref:System.Xml.XPath.XPathNavigator>. Take, for example, the following XML string:  
  
 `<item><name>widget</name></item>`  
  
 If the current <xref:System.Xml.XPath.XPathNavigator> is positioned on the `item` node, and the <xref:System.Xml.XPath.XPathNavigator> specified is positioned on the `name` node, IsDescendant returns `true`.  
  
 This method always returns `false` under the following conditions:  
  
-   The <xref:System.Xml.XPath.XPathNavigator> specified shares the same implementation but points at a different document instance than the current navigator.  
  
-   The <xref:System.Xml.XPath.XPathNavigator> specified has a different implementation than the current navigator.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public abstract bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets a value indicating whether the current node is an empty element without an end element tag.</summary>
        <value>
          <see langword="true" /> if the current node is an empty element; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property enables you to determine the difference between the following different elements.  
  
|Element|IsEmptyElement Value|  
|-------------|--------------------------|  
|`<item num="123"/>`|`true`|  
|`<item num="123">test</item>`|`false`|  
|`<item num="123"></item>`|`false`|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNode">
      <MemberSignature Language="C#" Value="public override sealed bool IsNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating if the current node represents an XPath node.</summary>
        <value>Always returns <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSamePosition">
      <MemberSignature Language="C#" Value="public abstract bool IsSamePosition (System.Xml.XPath.XPathNavigator other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSamePosition(class System.Xml.XPath.XPathNavigator other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
        <summary>When overridden in a derived class, determines whether the current <see cref="T:System.Xml.XPath.XPathNavigator" /> is at the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <returns>
          <see langword="true" /> if the two <see cref="T:System.Xml.XPath.XPathNavigator" /> objects have the same position; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsSamePosition method assumes that the <xref:System.Xml.XPath.XPathNavigator> specified shares the same implementation and is points at the same document instance as the current <xref:System.Xml.XPath.XPathNavigator>.  
  
 This method always returns `false` under the following conditions:  
  
-   The <xref:System.Xml.XPath.XPathNavigator> specified shares the same implementation but points at a different document instance than the current <xref:System.Xml.XPath.XPathNavigator>.  
  
-   The <xref:System.Xml.XPath.XPathNavigator> has a different implementation than the current <xref:System.Xml.XPath.XPathNavigator>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public abstract string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the &lt;xref:System.Xml.XPath.XPathNavigator.Name%2A&gt; of the current node without any namespace prefix.</summary>
        <value>A &lt;xref:System.String&gt; that contains the local name of the current node, or &lt;xref:System.String?displayProperty=fullName&gt; if the current node does not have a name (for example, text or comment nodes).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The local name returned depends on the <xref:System.Xml.XPath.XPathNodeType> of the current node. For example, the local name for the `<bk:book>` element is `book`.  
  
 The following table lists the value returned by the LocalName property, based on the <xref:System.Xml.XPath.XPathNodeType> of the current node.  
  
|XPathNodeType|Property Value|  
|-------------------|--------------------|  
|<xref:System.Xml.XPath.XPathNodeType>|The local name of the element.|  
|<xref:System.Xml.XPath.XPathNodeType>|The local name of the attribute.|  
|<xref:System.Xml.XPath.XPathNodeType>|The prefix associated with the namespace URI.|  
|<xref:System.Xml.XPath.XPathNodeType>|The target of the processing instruction.|  
|All other <xref:System.Xml.XPath.XPathNodeType> nodes|<xref:System.String.Empty?displayProperty=fullName>.|  
  
   
  
## Examples  
 The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  
  
 [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_6_1.cs)]
 [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_6_1.vb)]
 [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_6_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public virtual string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass &lt;xref:System.String?displayProperty=fullName&gt;.</param>
        <summary>Gets the namespace URI for the specified prefix.</summary>
        <returns>A &lt;xref:System.String&gt; that contains the namespace URI assigned to the namespace prefix specified; <see langword="null" /> if no namespace URI is assigned to the prefix specified. The &lt;xref:System.String&gt; returned is atomized.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If <xref:System.String?displayProperty=fullName> is specified as the `prefix` parameter, the currently assigned default namespace URI is returned. If no default namespace URI is explicitly assigned, and <xref:System.String.Empty?displayProperty=fullName> is specified as the `prefix` parameter, the blank prefix is associated with elements that are not in any namespace, and <xref:System.String?displayProperty=fullName> is returned.  
  
> [!NOTE]
>  The prefix to namespace URI mappings can change from node to node in an XML document. As a result, the value of the LookupNamespace method may not be consistent from one node to the next.  
  
   
  
## Examples  
 For an example of the LookupNamespace method, see the <xref:System.Xml.XPath.XPathNavigator.InsertElementAfter%2A> or <xref:System.Xml.XPath.XPathNavigator.InsertElementBefore%2A> methods.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public virtual string LookupPrefix (string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupPrefix(string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceURI">The namespace URI to resolve for the prefix.</param>
        <summary>Gets the prefix declared for the specified namespace URI.</summary>
        <returns>A &lt;xref:System.String&gt; that contains the namespace prefix assigned to the namespace URI specified; otherwise, &lt;xref:System.String?displayProperty=fullName&gt; if no prefix is assigned to the namespace URI specified. The &lt;xref:System.String&gt; returned is atomized.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LookupPrefix method returns the first prefix that matches the namespace URI specified. Multiple prefixes referring to the same namespace URI are not ordered in any particular way, so a particular prefix may not be returned each time when more than one is assigned.  
  
> [!NOTE]
>  Namespace URI to prefix mappings can change from node to node in an XML document. As a result, the value of the LookupPrefix method may not be consistent from one node to the next.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public virtual bool Matches (string xpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Matches(string xpath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">The XPath expression.</param>
        <summary>Determines whether the current node matches the specified XPath expression.</summary>
        <returns>
          <see langword="true" /> if the current node matches the specified XPath expression; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method has no affect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 For an example of the <xref:System.Xml.XPath.XPathNavigator.Matches%2A> method, see the <xref:System.Xml.XPath.XPathNavigator.Matches%2A?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The XPath expression cannot be evaluated.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public virtual bool Matches (System.Xml.XPath.XPathExpression expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Matches(class System.Xml.XPath.XPathExpression expr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expr" Type="System.Xml.XPath.XPathExpression" />
      </Parameters>
      <Docs>
        <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> object containing the compiled XPath expression.</param>
        <summary>Determines whether the current node matches the specified <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
        <returns>
          <see langword="true" /> if the current node matches the <see cref="T:System.Xml.XPath.XPathExpression" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>. This method is identical to the <xref:System.Xml.XPath.XPathNavigator.Matches%2A?displayProperty=fullName> method, except that a <xref:System.Xml.XPath.XPathExpression> object containing the compiled XPath expression is specified, rather than an XPath expression <xref:System.String>.  
  
   
  
## Examples  
 The following example displays the titles of all novels.  
  
 [!code-cs[XPathNavigatorMethods#24](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_20_1.cs)]
 [!code-vb[XPathNavigatorMethods#24](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_20_1.vb)]
 [!code-cpp[XPathNavigatorMethods#24](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_20_1.cpp)]  
  
 The example uses the file, `books.xml`, as input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The XPath expression cannot be evaluated.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public abstract bool MoveTo (System.Xml.XPath.XPathNavigator other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveTo(class System.Xml.XPath.XPathNavigator other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned on the node that you want to move to.</param>
        <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator" />; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method always returns `true` if the <xref:System.Xml.XPath.XPathNavigator> specified is an <xref:System.Xml.XPath.XPathNavigator> that shares the same implementation and points at the same document instance as the current <xref:System.Xml.XPath.XPathNavigator>.  
  
 This method always returns `false` if the <xref:System.Xml.XPath.XPathNavigator> specified is an <xref:System.Xml.XPath.XPathNavigator> that has a different implementation than the current <xref:System.Xml.XPath.XPathNavigator>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public virtual bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the attribute.</param>
        <param name="namespaceURI">The namespace URI of the attribute; <see langword="null" /> for an empty namespace.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the attribute with the matching local name and namespace URI.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the attribute; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Xml.XPath.XPathNavigator> is not currently positioned on an element, this method returns `false`.  
  
 After a successful call to MoveToAttribute, the <xref:System.Xml.XPath.XPathNavigator.LocalName%2A>, <xref:System.Xml.XPath.XPathNavigator.NamespaceURI%2A> and <xref:System.Xml.XPath.XPathNavigator.Prefix%2A> properties reflect the values of the attribute. When the <xref:System.Xml.XPath.XPathNavigator> is positioned on an attribute, the methods <xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>, <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>, and <xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> are not applicable. These methods always return `false` and do not change the position of the navigator. Rather, you can call <xref:System.Xml.XPath.XPathNavigator.MoveToNextAttribute%2A> to move to the next attribute node.  
  
 Once positioned on an attribute, you can call <xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> to move to the owner element.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToChild">
      <MemberSignature Language="C#" Value="public virtual bool MoveToChild (System.Xml.XPath.XPathNodeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToChild(valuetype System.Xml.XPath.XPathNodeType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XPath.XPathNodeType" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the child node to move to.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the child node of the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the child node; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value of the MoveToChild method depends on the <xref:System.Xml.XPath.XPathNodeType> of the current node, and the <xref:System.Xml.XPath.XPathNodeType> of the child node to move to.  
  
 The following table shows the different <xref:System.Xml.XPath.XPathNodeType> nodes, and the child nodes they can move to.  
  
|Current Node's XPathNodeType|Child Node's XPathNodeType|  
|----------------------------------|--------------------------------|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  
|All other <xref:System.Xml.XPath.XPathNodeType> values|None.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToChild">
      <MemberSignature Language="C#" Value="public virtual bool MoveToChild (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToChild(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the child node to move to.</param>
        <param name="namespaceURI">The namespace URI of the child node to move to.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the child node with the local name and namespace URI specified.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the child node; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 For an example of the MoveToChild method, see the <xref:System.Xml.XPath.XPathNavigator.AppendChild%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirst">
      <MemberSignature Language="C#" Value="public virtual bool MoveToFirst ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFirst() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first sibling node of the current node.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first sibling node of the current node; <see langword="false" /> if there is no first sibling, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If the <see cref="T:System.Xml.XPath.XPathNavigator" /> is already positioned on the first sibling, <see cref="T:System.Xml.XPath.XPathNavigator" /> will return <see langword="true" /> and will not move its position.  
  
 If MoveToFirst returns <see langword="false" /> because there is no first sibling, or if <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first attribute of the current node.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first attribute of the current node; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Xml.XPath.XPathNavigator> is not currently positioned on an element, this method returns `false` and the position of the <xref:System.Xml.XPath.XPathNavigator> does not change.  
  
 After a successful call to MoveToFirstAttribute, the <xref:System.Xml.XPath.XPathNavigator.LocalName%2A>, <xref:System.Xml.XPath.XPathNavigator.NamespaceURI%2A> and <xref:System.Xml.XPath.XPathNavigator.Prefix%2A> properties reflect the values of the attribute. When the <xref:System.Xml.XPath.XPathNavigator> is positioned on an attribute, the methods <xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>, <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>, and <xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> are not applicable. These methods always return `false` and do not change the position of the <xref:System.Xml.XPath.XPathNavigator>. Rather, you can call <xref:System.Xml.XPath.XPathNavigator.MoveToNextAttribute%2A> to move to the next attribute node.  
  
 After the <xref:System.Xml.XPath.XPathNavigator> is positioned on an attribute, you can call <xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> to move to the owner element.  
  
   
  
## Examples  
 The following example uses the MoveToFirstAttribute and <xref:System.Xml.XPath.XPathNavigator.MoveToNextAttribute%2A> methods to display all the attributes for each book in the `books.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#49](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_18_1.cs)]
 [!code-vb[XPathNavigatorMethods#49](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_18_1.vb)]
 [!code-cpp[XPathNavigatorMethods#49](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_18_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstChild">
      <MemberSignature Language="C#" Value="public abstract bool MoveToFirstChild ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFirstChild() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first child node of the current node.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first child node of the current node; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> are the only two <xref:System.Xml.XPath.XPathNodeType> values that can have children. This property always returns `false` for all other <xref:System.Xml.XPath.XPathNodeType> node types.  
  
   
  
## Examples  
 For an example of the MoveToFirstChild method, see the <xref:System.Xml.XPath.XPathNavigator.Clone%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstNamespace">
      <MemberSignature Language="C#" Value="public bool MoveToFirstNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveToFirstNamespace() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to first namespace node of the current node.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first namespace node; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathNavigator> class returns namespace nodes in reverse document order. Therefore, MoveToFirstNamespace essentially moves to the last namespace node in the current scope.  
  
 After the <xref:System.Xml.XPath.XPathNavigator> has been moved to the namespace node, the <xref:System.Xml.XPath.XPathNavigator.Name%2A> property reflects the name of the namespace.  
  
 When the <xref:System.Xml.XPath.XPathNavigator> is positioned on a namespace node, the methods <xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>, <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>, and <xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> are not applicable. These methods always return `false` and do not change the position of the <xref:System.Xml.XPath.XPathNavigator>. Rather, you can call <xref:System.Xml.XPath.XPathNavigator.MoveToNextNamespace%2A> to move to the next namespace node.  
  
 After the <xref:System.Xml.XPath.XPathNavigator> is positioned on an namespace node, call <xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> to move back to the element node.  
  
 For a definition of namespace nodes, see section 5.4 of the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstNamespace">
      <MemberSignature Language="C#" Value="public abstract bool MoveToFirstNamespace (System.Xml.XPath.XPathNamespaceScope namespaceScope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFirstNamespace(valuetype System.Xml.XPath.XPathNamespaceScope namespaceScope) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceScope" Type="System.Xml.XPath.XPathNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope.</param>
        <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first namespace node that matches the <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> specified.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first namespace node; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathNavigator> class returns namespace nodes in reverse document order. Therefore, MoveToFirstNamespace essentially moves to the last namespace node in the current scope.  
  
 Using the following XML fragment as an example, if the <xref:System.Xml.XPath.XPathNavigator> is positioned on the `data` node, MoveToFirstNamespace behaves in the following manner.  
  
-   `MoveToFirstNamespace(XPathNamespaceScope.All)` moves to one of the following namespace nodes: `xmlns:c='C'`, `xmlns:a='A2'`, `xmlns=''`, `xmlns:b='B'`, or `xmlns:xml='http://www.w3.org/XML/1998/namespace'`.  
  
-   `MoveToFirstNamespace(XPathNamespaceScope.ExcludeXml)` moves to one of the following namespace nodes: `xmlns:c='C'`, `xmlns:a='A2'`, `xmlns=''`, or `xmlns:b='B'`.  
  
-   `MoveToFirstNamespace(XPathNamespaceScope.Local)` moves to the `xmlns:c='C'` node.  
  
```  
<root xmlns='urn:default' xmlns:a='A1' xmlns:b='B'>  
    <item xmlns='' xmlns:a='A2'>  
        <data xmlns:c='C' />  
    </item>  
</root>  
```  
  
 If the <xref:System.Xml.XPath.XPathNavigator> is not currently positioned on an element, this method returns `false` and the position of the <xref:System.Xml.XPath.XPathNavigator> does not change. After the <xref:System.Xml.XPath.XPathNavigator> has been moved to the namespace node, the <xref:System.Xml.XPath.XPathNavigator.Name%2A> property reflects the name of the namespace.  
  
 When the <xref:System.Xml.XPath.XPathNavigator> is positioned on a namespace node, the methods <xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>, <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>, and <xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> are not applicable. These methods always return `false` and do not change the position of the <xref:System.Xml.XPath.XPathNavigator>. Rather, you can call <xref:System.Xml.XPath.XPathNavigator.MoveToNextNamespace%2A> to move to the next namespace node.  
  
 After the <xref:System.Xml.XPath.XPathNavigator> is positioned on an namespace node, call <xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> to move back to the element node.  
  
 For a definition of namespace nodes, see section 5.4 of the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool MoveToFollowing (System.Xml.XPath.XPathNodeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFollowing(valuetype System.Xml.XPath.XPathNodeType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XPath.XPathNodeType" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the element. The <see cref="T:System.Xml.XPath.XPathNodeType" /> cannot be <see cref="T:System.Xml.XPath.XPathNodeType" /> or <see cref="T:System.Xml.XPath.XPathNodeType" />.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the following element of the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified in document order.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   The MoveToFollowing method does not move to attribute or namespace nodes. If the <xref:System.Xml.XPath.XPathNodeType> parameter value is <xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType>, the MoveToFollowing method returns `false` and the position of the <xref:System.Xml.XPath.XPathNavigator> is unchanged.  
  
-   If the <xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A> method returns `false`, the position of the <xref:System.Xml.XPath.XPathNavigator> is unchanged.  
  
   
  
## Examples  
 In the following example, the <xref:System.Xml.XPath.XPathNavigator> is moved from the root of the `contosoBooks.xml` file to the following `bookstore` element.  
  
 [!code-cs[XPathNavigatorMethods#25](~/add/codesnippet/csharp/f98a9cba-50b6-4275-968f-_1.cs)]
 [!code-vb[XPathNavigatorMethods#25](~/add/codesnippet/visualbasic/f98a9cba-50b6-4275-968f-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#25](~/add/codesnippet/cpp/f98a9cba-50b6-4275-968f-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool MoveToFollowing (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFollowing(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the element.</param>
        <param name="namespaceURI">The namespace URI of the element.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the element with the local name and namespace URI specified in document order.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the MoveToFollowing method returns `false`, the position of the <xref:System.Xml.XPath.XPathNavigator> is unchanged.  
  
   
  
## Examples  
 In the following example, the <xref:System.Xml.XPath.XPathNavigator> is moved from the root of the `contosoBooks.xml` file to the first `price` element.  
  
 [!code-cs[XPathNavigatorMethods#26](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_40_1.cs)]
 [!code-vb[XPathNavigatorMethods#26](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_40_1.vb)]
 [!code-cpp[XPathNavigatorMethods#26](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_40_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool MoveToFollowing (System.Xml.XPath.XPathNodeType type, System.Xml.XPath.XPathNavigator end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFollowing(valuetype System.Xml.XPath.XPathNodeType type, class System.Xml.XPath.XPathNavigator end) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XPath.XPathNodeType" />
        <Parameter Name="end" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the element. The <see cref="T:System.Xml.XPath.XPathNodeType" /> cannot be <see cref="T:System.Xml.XPath.XPathNodeType" /> or <see cref="T:System.Xml.XPath.XPathNodeType" />.</param>
        <param name="end">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the element boundary which the current <see cref="T:System.Xml.XPath.XPathNavigator" /> will not move past while searching for the following element.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the following element of the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified, to the boundary specified, in document order.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   The MoveToFollowing method does not move to attribute or namespace nodes. If the <xref:System.Xml.XPath.XPathNodeType> parameter value is <xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType>, the MoveToFollowing method returns `false` and the position of the <xref:System.Xml.XPath.XPathNavigator> is unchanged.  
  
-   If the <xref:System.Xml.XPath.XPathNavigator> boundary passed as a parameter is not positioned after the position of the current <xref:System.Xml.XPath.XPathNavigator> it is ignored.  
  
-   If <xref:System.Xml.XPath.XPathNavigator> boundary passed as a parameter is `null` the next following node with the specified <xref:System.Xml.XPath.XPathNodeType> is located in document order.  
  
-   The <xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A> methods cannot be used to move to attribute or namespace nodes. If the <xref:System.Xml.XPath.XPathNavigator> boundary passed as a parameter is positioned over an attribute or namespace node, it is equivalent to the <xref:System.Xml.XPath.XPathNavigator> boundary parameter having been positioned on the first child node of its parent element. This ensures that the parent element of the attribute or namespace node that the <xref:System.Xml.XPath.XPathNavigator> boundary parameter is positioned on can be matched by this method.  
  
-   If the <xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A> method returns `false`, the position of the <xref:System.Xml.XPath.XPathNavigator> is unchanged.  
  
   
  
## Examples  
 In the following example, the <xref:System.Xml.XPath.XPathNavigator> is moved from the root of the `contosoBooks.xml` file to the following `price` element. A clone of the <xref:System.Xml.XPath.XPathNavigator> object is made using the <xref:System.Xml.XPath.XPathNavigator.Clone%2A> method. The cloned <xref:System.Xml.XPath.XPathNavigator>, positioned on the `price` element, will be used as a boundary. Changes in the position of the cloned <xref:System.Xml.XPath.XPathNavigator> do not affect the original <xref:System.Xml.XPath.XPathNavigator>. The original <xref:System.Xml.XPath.XPathNavigator> is moved back to the root of the `contosoBooks.xml` file using the <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> method. The title and first and last name of the author are retrieved using the MoveToFollowing method and an <xref:System.Xml.XPath.XPathNodeType> of <xref:System.Xml.XPath.XPathNodeType>. The MoveToFollowing method will return true until the `price` element boundary is reached.  
  
 [!code-cs[XPathNavigatorMethods#27](~/add/codesnippet/csharp/d7939994-0d32-4505-9753-_1.cs)]
 [!code-vb[XPathNavigatorMethods#27](~/add/codesnippet/visualbasic/d7939994-0d32-4505-9753-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#27](~/add/codesnippet/cpp/d7939994-0d32-4505-9753-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool MoveToFollowing (string localName, string namespaceURI, System.Xml.XPath.XPathNavigator end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFollowing(string localName, string namespaceURI, class System.Xml.XPath.XPathNavigator end) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="end" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the element.</param>
        <param name="namespaceURI">The namespace URI of the element.</param>
        <param name="end">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the element boundary which the current <see cref="T:System.Xml.XPath.XPathNavigator" /> will not move past while searching for the following element.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the element with the local name and namespace URI specified, to the boundary specified, in document order.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   If the <xref:System.Xml.XPath.XPathNavigator> boundary passed as a parameter is not positioned after the position of the current <xref:System.Xml.XPath.XPathNavigator> it is ignored.  
  
-   If the <xref:System.Xml.XPath.XPathNavigator> boundary parameter is `null`, the following element with the local name and namespace URI specified is located in document order.  
  
-   The <xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A> methods cannot be used to move to attribute or namespace nodes. If the <xref:System.Xml.XPath.XPathNavigator> boundary passed as a parameter is positioned over an attribute or namespace node, it is equivalent to the <xref:System.Xml.XPath.XPathNavigator> boundary parameter having been positioned on the first child node of its parent element. This ensures that the parent element of the attribute or namespace node that the <xref:System.Xml.XPath.XPathNavigator> boundary parameter is positioned on can be matched by this method.  
  
-   If the MoveToFollowing method returns `false`, the position of the <xref:System.Xml.XPath.XPathNavigator> is unchanged.  
  
   
  
## Examples  
 In the following example, the <xref:System.Xml.XPath.XPathNavigator> is moved from the root of the `contosoBooks.xml` file to the following `book` element. A clone of the <xref:System.Xml.XPath.XPathNavigator> object is made using the <xref:System.Xml.XPath.XPathNavigator.Clone%2A> method and is moved from the `book` element to the following `first-name` element. The cloned <xref:System.Xml.XPath.XPathNavigator>, positioned on the `first-name` element, will be used as a boundary. Changes in the position of the cloned <xref:System.Xml.XPath.XPathNavigator> do not affect the original <xref:System.Xml.XPath.XPathNavigator>. The original <xref:System.Xml.XPath.XPathNavigator> then attempts to move to the following `price` element using the MoveToFollowing method with the boundary passed as a parameter. This move fails because the following `price` element is beyond the boundary. The original <xref:System.Xml.XPath.XPathNavigator> then attempts to move to the following `title` element which is before the boundary using the same method and succeeds.  
  
 [!code-cs[XPathNavigatorMethods#28](~/add/codesnippet/csharp/4f1b54c7-aeb2-4ebd-b9cd-_1.cs)]
 [!code-vb[XPathNavigatorMethods#28](~/add/codesnippet/visualbasic/4f1b54c7-aeb2-4ebd-b9cd-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#28](~/add/codesnippet/cpp/4f1b54c7-aeb2-4ebd-b9cd-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToId">
      <MemberSignature Language="C#" Value="public abstract bool MoveToId (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToId(string id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">A &lt;xref:System.String&gt; representing the `ID` value of the node to which you want to move.</param>
        <summary>When overridden in a derived class, moves to the node that has an attribute of type `ID` whose value matches the specified &lt;xref:System.String&gt;.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving; otherwise, <see langword="false" />. If <see langword="false" />, the position of the navigator is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to identify nodes by unique `ID` provided the source document explicitly declares attributes of type `ID` using a DTD.  
  
 For example, suppose the following XML data, `<data><x a="a1"/></data>`, was loaded using a DTD that included the following: `<!ATTLIST x a ID #REQUIRED>`.  
  
 If the <xref:System.Xml.XPath.XPathNavigator> was positioned somewhere in the XML data, calling `MoveToId("a1")` positions the <xref:System.Xml.XPath.XPathNavigator> on the element node `x`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToNamespace">
      <MemberSignature Language="C#" Value="public virtual bool MoveToNamespace (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToNamespace(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The namespace prefix of the namespace node.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the namespace node with the specified namespace prefix.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the specified namespace; <see langword="false" /> if a matching namespace node was not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After the <xref:System.Xml.XPath.XPathNavigator> has been moved to the namespace node, the <xref:System.Xml.XPath.XPathNavigator.Name%2A> property reflects the name of the namespace.  
  
 When the <xref:System.Xml.XPath.XPathNavigator> is positioned on a namespace node, the methods <xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>, <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>, and <xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> are not applicable. These methods always return `false` and do not change the position of the <xref:System.Xml.XPath.XPathNavigator>. Rather, you can call <xref:System.Xml.XPath.XPathNavigator.MoveToNextNamespace%2A> to move to the next namespace node.  
  
 After the <xref:System.Xml.XPath.XPathNavigator> is positioned on a namespace node, you can call <xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> to move back to the element node.  
  
 For a definition of namespace nodes, see section 5.4 of the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToNext">
      <MemberSignature Language="C#" Value="public abstract bool MoveToNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToNext() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next sibling node of the current node.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next sibling node; otherwise, <see langword="false" /> if there are no more siblings or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example iterates over the node tree recursively, and displays information about element and text nodes.  
  
 [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_17_1.cs)]
 [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_17_1.vb)]
 [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_17_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToNext">
      <MemberSignature Language="C#" Value="public virtual bool MoveToNext (System.Xml.XPath.XPathNodeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToNext(valuetype System.Xml.XPath.XPathNodeType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XPath.XPathNodeType" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the sibling node to move to.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next sibling node of the current node that matches the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next sibling node; otherwise, <see langword="false" /> if there are no more siblings or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value of the MoveToNext method depends on the <xref:System.Xml.XPath.XPathNodeType> of the current node and the <xref:System.Xml.XPath.XPathNodeType> of the next sibling node to move to.  
  
 The following table shows the different <xref:System.Xml.XPath.XPathNodeType> nodes and the sibling nodes they can move to.  
  
|Current Node's XPathNodeType|Sibling Node's XPathNodeType|  
|----------------------------------|----------------------------------|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  
|All other <xref:System.Xml.XPath.XPathNodeType> values|None.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToNext">
      <MemberSignature Language="C#" Value="public virtual bool MoveToNext (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToNext(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the next sibling node to move to.</param>
        <param name="namespaceURI">The namespace URI of the next sibling node to move to.</param>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next sibling node with the local name and namespace URI specified.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next sibling node; <see langword="false" /> if there are no more siblings, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next attribute.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next attribute; <see langword="false" /> if there are no more attributes. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Xml.XPath.XPathNavigator> is not currently positioned on an attribute, this method returns `false` and the position of the <xref:System.Xml.XPath.XPathNavigator> does not change.  
  
 When the <xref:System.Xml.XPath.XPathNavigator> is positioned on an attribute, the methods <xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>, <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>, and <xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> methods are not applicable. These methods always return `false` and do not change the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
 After the <xref:System.Xml.XPath.XPathNavigator> is positioned on an attribute, you can call <xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> to move to the owner element.  
  
   
  
## Examples  
 The following example uses the <xref:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute%2A> and MoveToNextAttribute methods to display all the attributes for each book in the `books.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#49](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_23_1.cs)]
 [!code-vb[XPathNavigatorMethods#49](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_23_1.vb)]
 [!code-cpp[XPathNavigatorMethods#49](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_23_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextNamespace">
      <MemberSignature Language="C#" Value="public bool MoveToNextNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveToNextNamespace() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next namespace node.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next namespace node; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathNavigator> class returns namespace nodes in reverse document order. Therefore, MoveToNextNamespace essentially moves to the namespace node above the one in the current scope.  
  
 If the <xref:System.Xml.XPath.XPathNavigator> is not currently positioned on a namespace node, this method returns `false` and the position of the <xref:System.Xml.XPath.XPathNavigator> does not change.  
  
 When the <xref:System.Xml.XPath.XPathNavigator> is positioned on a namespace node, the methods <xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>, <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>, and <xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> are not applicable. These methods always return `false` and do not change the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
 After the <xref:System.Xml.XPath.XPathNavigator> is positioned on an namespace node, call <xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> to move back to the element node.  
  
 For a definition of namespace nodes, see section 5.4 of the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextNamespace">
      <MemberSignature Language="C#" Value="public abstract bool MoveToNextNamespace (System.Xml.XPath.XPathNamespaceScope namespaceScope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToNextNamespace(valuetype System.Xml.XPath.XPathNamespaceScope namespaceScope) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceScope" Type="System.Xml.XPath.XPathNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope.</param>
        <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next namespace node matching the <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> specified.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next namespace node; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathNavigator> class returns namespace nodes in reverse document order.  
  
 If the <xref:System.Xml.XPath.XPathNavigator> is not currently positioned on a namespace node, this method returns `false` and the position of the <xref:System.Xml.XPath.XPathNavigator> does not change.  
  
 When the <xref:System.Xml.XPath.XPathNavigator> is positioned on a namespace node, the methods <xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>, <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>, and <xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> are not applicable. These methods always return `false` and do not change the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
 After the <xref:System.Xml.XPath.XPathNavigator> is positioned on an namespace node, call <xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> to move back to the element node.  
  
 For a definition of namespace nodes, see section 5.4 of the W3C XML Path Language (XPath) recommendation located at http://www.w3.org/TR/xpath#data-model.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToParent">
      <MemberSignature Language="C#" Value="public abstract bool MoveToParent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToParent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the parent node of the current node.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the parent node of the current node; otherwise, <see langword="false" />. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value of the MoveToParent method depends on the <xref:System.Xml.XPath.XPathNodeType> of the current node, and the <xref:System.Xml.XPath.XPathNodeType> of the parent node to move to.  
  
 The following table shows the different <xref:System.Xml.XPath.XPathNodeType> nodes, and the parent nodes they can move to.  
  
|XPathNodeType|Parent Node|  
|-------------------|-----------------|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> nodes do not have parents.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType> node.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> node.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> node.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> node.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType> node.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType> node.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType> node.|  
|<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType> node.|  
  
   
  
## Examples  
 For an example of the MoveToParent method, see the <xref:System.Xml.XPath.XPathNavigator.CreateAttribute%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToPrevious">
      <MemberSignature Language="C#" Value="public abstract bool MoveToPrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToPrevious() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the previous sibling node of the current node.</summary>
        <returns>Returns <see langword="true" /> if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the previous sibling node; otherwise, <see langword="false" /> if there is no previous sibling node or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If <see langword="false" />, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveToRoot">
      <MemberSignature Language="C#" Value="public virtual void MoveToRoot ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveToRoot() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the root node that the current node belongs to.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 All nodes belong to one and only one document. Therefore, this method is always successful.  
  
   
  
## Examples  
 For an example of the MoveToRoot method, see the <xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
        <value>A &lt;xref:System.String&gt; that contains the qualified Name of the current node, or &lt;xref:System.String?displayProperty=fullName&gt; if the current node does not have a name (for example, text or comment nodes).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Name returned depends on the <xref:System.Xml.XPath.XPathNodeType> of the current node. For example, the name for the `<bk:book>` element is `bk:book`.  
  
 The following table lists the value returned by the Name property, based on the <xref:System.Xml.XPath.XPathNodeType> of the current node.  
  
|XPathNodeType|Property Value|  
|-------------------|--------------------|  
|<xref:System.Xml.XPath.XPathNodeType>|The qualified name of the <xref:System.Xml.XPath.XPathNodeType>. In the following example, `<bk:book>`, the name of the element node is `bk:book`.|  
|<xref:System.Xml.XPath.XPathNodeType>|The qualified name of the <xref:System.Xml.XPath.XPathNodeType>. In the following example, `<book bk:genre='novel'>`, the name of the <xref:System.Xml.XPath.XPathNodeType> node is `bk:genre`.|  
|<xref:System.Xml.XPath.XPathNodeType>|The prefix associated with the namespace URI. In the following namespace declaration, `xmlns:bk='urn:samples'`, the Name property returns `bk`.|  
|<xref:System.Xml.XPath.XPathNodeType>|The target of the <xref:System.Xml.XPath.XPathNodeType>. In the following example, `<?xml-stylesheet type='text/xsl' href= 'books.xsl'?>`, the Name property returns `xml-stylesheet`.|  
|All other <xref:System.Xml.XPath.XPathNodeType> nodes|<xref:System.String.Empty?displayProperty=fullName>.|  
  
   
  
## Examples  
 The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  
  
 [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_12_1.cs)]
 [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_12_1.vb)]
 [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_12_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public abstract string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the namespace URI of the current node.</summary>
        <value>A &lt;xref:System.String&gt; that contains the namespace URI of the current node, or &lt;xref:System.String?displayProperty=fullName&gt; if the current node has no namespace URI.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The namespace URI returned depends on the <xref:System.Xml.XPath.XPathNodeType> of the current node.  
  
 The NamespaceURI property returns `urn:samples` for the node `<bk:book xmlns:bk='urn:samples'>`.  
  
 Only <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType><xref:System.Xml.XPath.XPathNodeType> nodes can have a namespace URI.  
  
   
  
## Examples  
 The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  
  
 [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_5_1.cs)]
 [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_5_1.vb)]
 [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_5_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the &lt;xref:System.Xml.XmlNameTable&gt; of the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <value>An &lt;xref:System.Xml.XmlNameTable&gt; object enabling you to get the atomized version of a &lt;xref:System.String&gt; within the XML document.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XmlNameTable> stores atomized strings of any local name, namespace URI, and prefix used by the <xref:System.Xml.XPath.XPathNavigator>. This means that when the same <xref:System.Xml.XPath.XPathNavigator.Name%2A> is returned multiple times (like "book"), the same <xref:System.String> object is returned for that <xref:System.Xml.XPath.XPathNavigator.Name%2A>. This makes it possible to write efficient code that does object comparisons on these strings, instead of expensive string comparisons.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NavigatorComparer">
      <MemberSignature Language="C#" Value="public static System.Collections.IEqualityComparer NavigatorComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IEqualityComparer NavigatorComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEqualityComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an &lt;xref:System.Collections.IEqualityComparer&gt; used for equality comparison of <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</summary>
        <value>An &lt;xref:System.Collections.IEqualityComparer&gt; used for equality comparison of <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The NavigatorComparer property allows <xref:System.Xml.XPath.XPathNavigator> objects to be compared on the basis of position rather than reference to the object. The <xref:System.Xml.XPath.XPathNavigator.ComparePosition%2A> and <xref:System.Object.Equals%2A> methods implemented by this class are based on the position of the <xref:System.Xml.XPath.XPathNavigator> objects passed as parameters. The <xref:System.Object.GetHashCode%2A> method implemented by this class uses the properties of the node such as its local name and namespace URI to create a hash code for the node.  
  
   
  
## Examples  
 The following example illustrates the use of the NavigatorComparer property.  
  
 [!code-vb[XPathNavigatorProperties#3](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_11_1.vb)]
 [!code-cpp[XPathNavigatorProperties#3](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_11_1.cpp)]
 [!code-cs[XPathNavigatorProperties#3](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_11_1.cs)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XPath.XPathNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XPath.XPathNodeType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XPath.XPathNodeType" /> of the current node.</summary>
        <value>One of the <see cref="T:System.Xml.XPath.XPathNodeType" /> values representing the current node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  
  
 [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_4_1.cs)]
 [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_4_1.vb)]
 [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_4_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OuterXml">
      <MemberSignature Language="C#" Value="public virtual string OuterXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the markup representing the opening and closing tags of the current node and its child nodes.</summary>
        <value>A &lt;xref:System.String&gt; that contains the markup representing the opening and closing tags of the current node and its child nodes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XPath.XPathNavigator.InnerXml%2A> and OuterXml properties are not very efficient. If performance is a priority, it is more efficient to use the node navigation methods of the <xref:System.Xml.XPath.XPathNavigator> to get values of child nodes.  
  
   
  
## Examples  
 The following example uses the OuterXml property to display the contents of the first `book` element in the `contosoBooks.xml` file, its child nodes, and its opening and closing tags in the <xref:System.Xml.XPath.XPathNavigator>.  
  
 [!code-vb[XPathNavigatorProperties#4](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_2_1.vb)]
 [!code-cpp[XPathNavigatorProperties#4](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_2_1.cpp)]
 [!code-cs[XPathNavigatorProperties#4](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_2_1.cs)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public abstract string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
        <value>A &lt;xref:System.String&gt; that contains the namespace prefix associated with the current node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Prefix property gets the namespace prefix associated with the current node. For example, the Prefix property returns `bk` for the `<bk:book>` element. If a prefix does not exist, or the <xref:System.Xml.XPath.XPathNodeType> of the current node is not <xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType>, the Prefix property returns <xref:System.String.Empty?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  
  
 [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_9_1.cs)]
 [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_9_1.vb)]
 [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_9_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrependChild">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriter PrependChild ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlWriter PrependChild() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an &lt;xref:System.Xml.XmlWriter&gt; object used to create a new child node at the beginning of the list of child nodes of the current node.</summary>
        <returns>An &lt;xref:System.Xml.XmlWriter&gt; object used to create a new child node at the beginning of the list of child nodes of the current node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prepending a child node adds the new node to the beginning of the list of child nodes for the current node. For example, when three child nodes exist for an element, the prepended node becomes the first child node. If no child nodes exist, then a new child node is created.  
  
 The following are important notes to consider when using the PrependChild method.  
  
-   The new child node is not inserted until the <xref:System.Xml.XmlWriter.Close%2A> method of the <xref:System.Xml.XmlWriter> object is called.  
  
-   The PrependChild method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element node.  
  
-   The PrependChild method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned from the PrependChild method.  
  
 [!code-cs[XPathNavigatorMethods#30](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_6_1.cs)]
 [!code-vb[XPathNavigatorMethods#30](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_6_1.vb)]
 [!code-cpp[XPathNavigatorMethods#30](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_6_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrependChild">
      <MemberSignature Language="C#" Value="public virtual void PrependChild (string newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrependChild(string newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newChild">The XML data string for the new child node.</param>
        <summary>Creates a new child node at the beginning of the list of child nodes of the current node using the XML string specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prepending a child node adds the new node to the beginning of the list of child nodes for the current node. For example, when three child nodes exist for an element, the prepended node becomes the first child node. If no child nodes exist, then a new child node is created.  
  
 To create a new element node, include all XML syntax in the XML string parameter. The string for a new `book` node is `PrependChild("<book/>")`. The string for appending the text "book" to the current node's text node is `PrependChild("book")`. If the XML string contains multiple nodes, all nodes are added.  
  
 The following are important notes to consider when using the PrependChild method.  
  
-   The PrependChild method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element node.  
  
-   The PrependChild method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#31](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_32_1.cs)]
 [!code-vb[XPathNavigatorMethods#31](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_32_1.vb)]
 [!code-cpp[XPathNavigatorMethods#31](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_32_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The XML string parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrependChild">
      <MemberSignature Language="C#" Value="public virtual void PrependChild (System.Xml.XmlReader newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrependChild(class System.Xml.XmlReader newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="newChild">An &lt;xref:System.Xml.XmlReader&gt; object positioned on the XML data for the new child node.</param>
        <summary>Creates a new child node at the beginning of the list of child nodes of the current node using the XML contents of the &lt;xref:System.Xml.XmlReader&gt; object specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prepending a child node adds the new node to the beginning of the list of child nodes for the current node. For example, when three child nodes exist for an element, the prepended node becomes the first child node. If no child nodes exist, then a new child node is created.  
  
 The following are important notes to consider when using the PrependChild method.  
  
-   If the <xref:System.Xml.XmlReader> object is positioned over a sequence of XML nodes, all the nodes in the sequence are added.  
  
-   The PrependChild method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element node.  
  
-   The PrependChild method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlReader> object specified. The `http://www.contoso.com/books` namespace is specified so that the new child element is prepended using the same namespace as the XML document.  
  
 [!code-cs[XPathNavigatorMethods#32](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_19_1.cs)]
 [!code-vb[XPathNavigatorMethods#32](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_19_1.vb)]
 [!code-cpp[XPathNavigatorMethods#32](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_19_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The &lt;xref:System.Xml.XmlReader&gt; object is in an error state or closed.</exception>
        <exception cref="T:System.ArgumentNullException">The &lt;xref:System.Xml.XmlReader&gt; object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML contents of the &lt;xref:System.Xml.XmlReader&gt; object parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrependChild">
      <MemberSignature Language="C#" Value="public virtual void PrependChild (System.Xml.XPath.XPathNavigator newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrependChild(class System.Xml.XPath.XPathNavigator newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="newChild">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new child node.</param>
        <summary>Creates a new child node at the beginning of the list of child nodes of the current node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> object specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prepending a child node adds the new node to the beginning of the list of child nodes for the current node. For example, when three child nodes exist for an element, the prepended node becomes the first child node. If no child nodes exist, then a new child node is created.  
  
 The following are important notes to consider when using the PrependChild method.  
  
-   If the <xref:System.Xml.XPath.XPathNavigator> object is positioned over a sequence of XML nodes, all the nodes in the sequence are added.  
  
-   The PrependChild method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element node.  
  
-   The PrependChild method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file using the node contained in the <xref:System.Xml.XPath.XPathNavigator> object specified. The `http://www.contoso.com/books` namespace is specified so that the new child element is prepended using the same namespace as the XML document.  
  
 [!code-cs[XPathNavigatorMethods#33](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_10_1.cs)]
 [!code-vb[XPathNavigatorMethods#33](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_10_1.vb)]
 [!code-cpp[XPathNavigatorMethods#33](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_10_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrependChildElement">
      <MemberSignature Language="C#" Value="public virtual void PrependChildElement (string prefix, string localName, string namespaceURI, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrependChildElement(string prefix, string localName, string namespaceURI, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The namespace prefix of the new child element (if any).</param>
        <param name="localName">The local name of the new child element (if any).</param>
        <param name="namespaceURI">The namespace URI of the new child element (if any). &lt;xref:System.String&gt; and <see langword="null" /> are equivalent.</param>
        <param name="value">The value of the new child element. If &lt;xref:System.String&gt; or <see langword="null" /> are passed, an empty element is created.</param>
        <summary>Creates a new child element at the beginning of the list of child nodes of the current node using the namespace prefix, local name, and namespace URI specified with the value specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prepending a child node adds the new node to the beginning of the list of child nodes for the current node. For example, when three child nodes exist for an element, the prepended node becomes the first child node. If no child nodes exist, then a new child node is created.  
  
 Namespace prefix and URI values can be obtained by using the <xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> or <xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> method. For example, the following syntax prepends a child element by using the in-scope namespace `xmlns:bk="http://www.contoso.com/books"`:  
  
```  
navigator.PrependChildElement(navigator.Prefix, "pages", LookupNamespaceURI(navigator.Prefix), String.Empty)  
```  
  
 This creates the new child `<bk:pages/>` element.  
  
 The following are important notes to consider when using the PrependChildElement method.  
  
-   If the namespace prefix specified is `null` or <xref:System.String.Empty?displayProperty=fullName>, then the prefix for the namespace URI of the new element is obtained from the current namespaces in-scope. If there is no namespace prefix assigned to the specified namespace URI at the current scope, then a namespace prefix is automatically generated.  
  
-   The PrependChildElement method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element node.  
  
-   The PrependChildElement method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#34](~/add/codesnippet/csharp/4c6c6f27-ac50-41dd-9f8b-_1.cs)]
 [!code-vb[XPathNavigatorMethods#34](~/add/codesnippet/visualbasic/4c6c6f27-ac50-41dd-9f8b-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#34](~/add/codesnippet/cpp/4c6c6f27-ac50-41dd-9f8b-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlReader ReadSubtree() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an &lt;xref:System.Xml.XmlReader&gt; object that contains the current node and its child nodes.</summary>
        <returns>An &lt;xref:System.Xml.XmlReader&gt; object that contains the current node and its child nodes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Xml.XmlReader> object is created with the current node and its child nodes, the <xref:System.Xml.XmlReader> object's <xref:System.Xml.XmlReader.ReadState%2A> property is set to <xref:System.Xml.ReadState>. When the <xref:System.Xml.XmlReader> object's <xref:System.Xml.XmlReader.Read%2A> method is called for the first time, the <xref:System.Xml.XmlReader> is moved to the current node of the <xref:System.Xml.XPath.XPathNavigator>. The new <xref:System.Xml.XmlReader> object continues to read until the end of the XML tree is reached. At this point, the <xref:System.Xml.XmlReader.Read%2A> method returns `false` and the <xref:System.Xml.XmlReader> object's <xref:System.Xml.XmlReader.ReadState%2A> property is set to <xref:System.Xml.ReadState>.  
  
> [!NOTE]
>  Changing the position of the <xref:System.Xml.XmlReader> object does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
 Namespace declarations for the in-scope namespaces of the current node are not inserted into the XML stream provided to the <xref:System.Xml.XmlReader> object.  
  
> [!NOTE]
>  This behavior differs from the <xref:System.Xml.XPath.XPathNavigator.WriteSubtree%2A> method.  
  
 This method creates the <xref:System.Xml.XmlReader> object with specific reader settings, and the module that uses this method has no control over those settings. For example, the reader returned by this method prohibits processing Data Type Definitions (DTDs). If the reader attempts to read a file that uses a DTD, it will throw an error, <xref:System.Xml.XmlException>. The message for the exception will be `Unexpected DTD declaration`.  
  
 You can change this behavior by implementing a custom <xref:System.Xml.XmlResolver> that returns an <xref:System.Xml.XmlReader> with the desired <xref:System.Xml.XmlReaderSettings>.  
  
   
  
## Examples  
 The following example illustrates using the ReadSubtree method on the first `book` element of the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#35](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_33_1.cs)]
 [!code-vb[XPathNavigatorMethods#35](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_33_1.vb)]
 [!code-cpp[XPathNavigatorMethods#35](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_33_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node or the root node.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReplaceRange">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriter ReplaceRange (System.Xml.XPath.XPathNavigator lastSiblingToReplace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlWriter ReplaceRange(class System.Xml.XPath.XPathNavigator lastSiblingToReplace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lastSiblingToReplace" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="lastSiblingToReplace">An <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned on the last sibling node in the range to replace.</param>
        <summary>Replaces a range of sibling nodes from the current node to the node specified.</summary>
        <returns>An &lt;xref:System.Xml.XmlWriter&gt; object used to specify the replacement range.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ReplaceRange method replaces a range of sibling nodes from the current node the <xref:System.Xml.XPath.XPathNavigator> is positioned on (inclusive) to the node specified by the <xref:System.Xml.XPath.XPathNavigator> parameter (inclusive).  
  
> [!NOTE]
>  The replacement range is not inserted until the <xref:System.Xml.XmlWriter.Close%2A> method of the <xref:System.Xml.XmlWriter> object is called.  
  
   
  
## Examples  
 In the following example, the first and second `book` elements of the `contosoBooks.xml` file are replaced with a new empty `book` element using the ReplaceRange method.  
  
 [!code-cs[XPathNavigatorMethods#53](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_22_1.cs)]
 [!code-vb[XPathNavigatorMethods#53](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_22_1.vb)]
 [!code-cpp[XPathNavigatorMethods#53](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_22_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> specified is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.InvalidOperationException">The last node to replace specified is not a valid sibling node of the current node.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReplaceSelf">
      <MemberSignature Language="C#" Value="public virtual void ReplaceSelf (string newNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceSelf(string newNode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newNode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newNode">The XML data string for the new node.</param>
        <summary>Replaces the current node with the content of the string specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathNavigator> is positioned on the new node on completion of the ReplaceSelf method and returns `true`. The <xref:System.Xml.XPath.XPathNavigator> is not positioned on the new node after completion of the ReplaceSelf method when the XML input is <xref:System.String.Empty> in which case the <xref:System.Xml.XPath.XPathNavigator> is either positioned on the next sibling node or the parent node if there is no next sibling node to the replaced node and the ReplaceSelf returns `false`.  
  
-   The ReplaceSelf method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   If the XML data string is not well-formed than an exception is thrown and the result of this method is equivalent to calling <xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A> on the current node.  
  
-   If the XML string contains multiple nodes, all nodes are added and the <xref:System.Xml.XPath.XPathNavigator> is positioned on the first node in the series of nodes.  
  
-   The ReplaceSelf method is not equivalent to the <xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A> method.  
  
   
  
## Examples  
 In the following example the `price` element in the `contosoBooks.xml` file is replaced by a new `pages` element.  
  
 [!code-cs[XPathNavigatorMethods#36](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_21_1.cs)]
 [!code-vb[XPathNavigatorMethods#36](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_21_1.vb)]
 [!code-cpp[XPathNavigatorMethods#36](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_21_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The XML string parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element, text, processing instruction, or comment node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReplaceSelf">
      <MemberSignature Language="C#" Value="public virtual void ReplaceSelf (System.Xml.XmlReader newNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceSelf(class System.Xml.XmlReader newNode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newNode" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="newNode">An &lt;xref:System.Xml.XmlReader&gt; object positioned on the XML data for the new node.</param>
        <summary>Replaces the current node with the contents of the &lt;xref:System.Xml.XmlReader&gt; object specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathNavigator> is positioned on the new node on completion of the ReplaceSelf method and returns `true`. The <xref:System.Xml.XPath.XPathNavigator> is not positioned on the new node after completion of the ReplaceSelf method when the XML input is <xref:System.String.Empty> in which case the <xref:System.Xml.XPath.XPathNavigator> is either positioned on the next sibling node or the parent node if there is no next sibling node to the replaced node and the ReplaceSelf returns `false`.  
  
-   The ReplaceSelf method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   If the XML data string is not well-formed than an exception is thrown and the result of this method is equivalent to calling <xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A> on the current node.  
  
-   If the XML string contains multiple nodes, all nodes are added and the <xref:System.Xml.XPath.XPathNavigator> is positioned on the first node in the series of nodes.  
  
-   The ReplaceSelf method is not equivalent to the <xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A> method.  
  
   
  
## Examples  
 In the following example the `price` element in the `contosoBooks.xml` file is replaced by a new `pages` element.  
  
 [!code-cs[XPathNavigatorMethods#37](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_16_1.cs)]
 [!code-vb[XPathNavigatorMethods#37](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_16_1.vb)]
 [!code-cpp[XPathNavigatorMethods#37](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_16_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The &lt;xref:System.Xml.XmlReader&gt; object is in an error state or closed.</exception>
        <exception cref="T:System.ArgumentNullException">The &lt;xref:System.Xml.XmlReader&gt; object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element, text, processing instruction, or comment node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML contents of the &lt;xref:System.Xml.XmlReader&gt; object parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReplaceSelf">
      <MemberSignature Language="C#" Value="public virtual void ReplaceSelf (System.Xml.XPath.XPathNavigator newNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceSelf(class System.Xml.XPath.XPathNavigator newNode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newNode" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="newNode">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the new node.</param>
        <summary>Replaces the current node with the contents of the <see cref="T:System.Xml.XPath.XPathNavigator" /> object specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathNavigator> is positioned on the new node on completion of the ReplaceSelf method and returns `true`. The <xref:System.Xml.XPath.XPathNavigator> is not positioned on the new node after completion of the ReplaceSelf method when the XML input is <xref:System.String.Empty> in which case the <xref:System.Xml.XPath.XPathNavigator> is either positioned on the next sibling node or the parent node if there is no next sibling node to the replaced node and the ReplaceSelf returns `false`.  
  
-   The ReplaceSelf method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element, text, processing instruction, or comment node.  
  
-   If the XML data string is not well-formed than an exception is thrown and the result of this method is equivalent to calling <xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A> on the current node.  
  
-   If the XML string contains multiple nodes, all nodes are added and the <xref:System.Xml.XPath.XPathNavigator> is positioned on the first node in the series of nodes.  
  
-   The ReplaceSelf method is not equivalent to the <xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A> method.  
  
   
  
## Examples  
 In the following example the `price` element in the `contosoBooks.xml` file is replaced by a new `pages` element.  
  
 [!code-cs[XPathNavigatorMethods#38](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_15_1.cs)]
 [!code-vb[XPathNavigatorMethods#38](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_15_1.vb)]
 [!code-cpp[XPathNavigatorMethods#38](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_15_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element, text, processing instruction, or comment node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SchemaInfo">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.IXmlSchemaInfo SchemaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the schema information that has been assigned to the current node as a result of schema validation.</summary>
        <value>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object that contains the schema information for the current node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schema information can be set on <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or on <xref:System.Xml.XPath.XPathNodeType> nodes with a non-`null`<xref:System.Xml.XPath.XPathNavigator.ValueType%2A>. If the current node is not one of the above node types, or if the <xref:System.Xml.XPath.XPathNavigator> instance does not report schema information, the SchemaInfo property returns `null`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNodeIterator Select (string xpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNodeIterator Select(string xpath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">A &lt;xref:System.String&gt; representing an XPath expression.</param>
        <summary>Selects a node set, using the specified XPath expression.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected node set.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The context for the selection is the position of the <xref:System.Xml.XPath.XPathNavigator> when this method is called. After calling this method, the <xref:System.Xml.XPath.XPathNodeIterator> returned represents the set of selected nodes. Use <xref:System.Xml.XPath.XPathNodeIterator.MoveNext%2A> method of the <xref:System.Xml.XPath.XPathNodeIterator> to iterate over the selected node set.  
  
 The following C# code iterates over the selected set of nodes.  
  
```  
XPathNodeIterator iterator = nav.Select("/bookstore/book");  
while (iterator.MoveNext())  
{  
    Console.WriteLine(Iterator.Current.Name);  
}  
```  
  
 The following are important notes to consider when using the Select method.  
  
-   You can still use any of the <xref:System.Xml.XPath.XPathNavigator> object's navigation methods to move within the <xref:System.Xml.XPath.XPathNavigator>. The <xref:System.Xml.XPath.XPathNavigator> navigation methods are independent of the selected nodes in the <xref:System.Xml.XPath.XPathNodeIterator>.  
  
-   Future calls to the Select method return a new <xref:System.Xml.XPath.XPathNodeIterator> object that points to the selected set of nodes that matches the new Select call. The two <xref:System.Xml.XPath.XPathNodeIterator> objects are completely independent of each other.  
  
-   If the XPath expression requires namespace resolution, use the <xref:System.Xml.XPath.XPathNavigator.Select%2A> overload, which takes an <xref:System.Xml.XPath.XPathExpression> as its argument.  
  
-   This method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example uses the Select method to select a node set.  
  
 [!code-cs[XPathNavigatorMethods#39](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_0_1.cs)]
 [!code-vb[XPathNavigatorMethods#39](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_0_1.vb)]
 [!code-cpp[XPathNavigatorMethods#39](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_0_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNodeIterator Select (System.Xml.XPath.XPathExpression expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNodeIterator Select(class System.Xml.XPath.XPathExpression expr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expr" Type="System.Xml.XPath.XPathExpression" />
      </Parameters>
      <Docs>
        <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> object containing the compiled XPath query.</param>
        <summary>Selects a node set using the specified <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that points to the selected node set.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The context for the selection is the position of the <xref:System.Xml.XPath.XPathNavigator> when you called this method. After you call this method, the <xref:System.Xml.XPath.XPathNodeIterator> returned represents the set of selected nodes. Use <xref:System.Xml.XPath.XPathNodeIterator.MoveNext%2A> on the <xref:System.Xml.XPath.XPathNodeIterator> to iterate over the selected node set.  
  
 The following C# code iterates over the selected set of nodes.  
  
```  
XPathNodeIterator ni = nav.Select(expr);  
while (ni.MoveNext())  
{  
    Console.WriteLine(ni.Current.Name);  
}  
```  
  
 The following are important notes to consider when using the <xref:System.Xml.XPath.XPathNavigator.Select%2A> method.  
  
-   You can still use any of the <xref:System.Xml.XPath.XPathNavigator> object's navigation methods to move within the <xref:System.Xml.XPath.XPathNavigator>. The <xref:System.Xml.XPath.XPathNavigator> navigation methods are independent of the selected nodes in the <xref:System.Xml.XPath.XPathNodeIterator>.  
  
-   Future calls to the <xref:System.Xml.XPath.XPathNavigator.Select%2A> method return a new <xref:System.Xml.XPath.XPathNodeIterator> object that points to the selected set of nodes that matches the new <xref:System.Xml.XPath.XPathNavigator.Select%2A> call. The two <xref:System.Xml.XPath.XPathNodeIterator> objects are completely independent of each other.  
  
-   If the <xref:System.Xml.XPath.XPathExpression> requires namespace resolution, the prefix and namespace URI pair must be added to an <xref:System.Xml.XmlNamespaceManager>, and the <xref:System.Xml.XPath.XPathExpression.SetContext%2A> method must be called to specify the <xref:System.Xml.XmlNamespaceManager> to use for namespace resolution.  
  
 For example, suppose the document contains the following XML nodes.  
  
```  
<bookstore xmlns:bk='urn:samples'>  
    <book bk:ISBN='1-325-0980'>  
        <title>Pride And Prejudice</title>  
    </book>  
</bookstore>  
```  
  
 In this case, the following C# code selects the `bk:ISBN` node.  
  
```  
XPathExpression expr = nav.Compile("book/@bk:ISBN");  
XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());  
mngr.AddNamespace("bk","urn:samples");  
expr.SetContext(mngr);  
XPathNodeIterator ni = nav.Select(expr);  
```  
  
> [!NOTE]
>  If the <xref:System.Xml.XPath.XPathExpression> does not include a prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must still use the <xref:System.Xml.XPath.XPathExpression.SetContext%2A> method and provide an <xref:System.Xml.XmlNamespaceManager> that contains a prefix and namespace URI to handle the default namespace.  
  
 For example, suppose you have the following XML.  
  
```  
<bookstore xmlns="http://www.lucernepublishing.com">  
    <book>  
        <title>Pride And Prejudice</title>  
    </book>  
</bookstore>  
```  
  
 In this case, the following C# code selects all book nodes:  
  
```  
XmlNamespaceManager nsmgr = new XmlNamespaceManager(nav.NameTable);  
nsmgr.AddNamespace("ab", "http://www.lucernepublishing.com");  
XPathExpression expr;  
expr = nav.Compile("//ab:book");  
expr.SetContext(nsmgr);  
XPathNodeIterator ni = nav.Select(expr);  
```  
  
 This method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example uses the Select method to select a node set.  
  
 [!code-cs[XPathNavigatorMethods#40](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_12_1.cs)]
 [!code-vb[XPathNavigatorMethods#40](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_12_1.vb)]
 [!code-cpp[XPathNavigatorMethods#40](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_12_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNodeIterator Select (string xpath, System.Xml.IXmlNamespaceResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNodeIterator Select(string xpath, class System.Xml.IXmlNamespaceResolver resolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="xpath">A &lt;xref:System.String&gt; representing an XPath expression.</param>
        <param name="resolver">The &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object used to resolve namespace prefixes.</param>
        <summary>Selects a node set using the specified XPath expression with the &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object specified to resolve namespace prefixes.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that points to the selected node set.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example illustrates selecting a node set using the Select method with the <xref:System.Xml.XmlNamespaceManager> object specified to resolve namespace prefixes in the XPath expression.  
  
 [!code-cs[XPathNavigatorMethods#41](~/add/codesnippet/csharp/8f97f71d-30c6-43d1-888b-_1.cs)]
 [!code-vb[XPathNavigatorMethods#41](~/add/codesnippet/visualbasic/8f97f71d-30c6-43d1-888b-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#41](~/add/codesnippet/cpp/8f97f71d-30c6-43d1-888b-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectAncestors">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNodeIterator SelectAncestors (System.Xml.XPath.XPathNodeType type, bool matchSelf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNodeIterator SelectAncestors(valuetype System.Xml.XPath.XPathNodeType type, bool matchSelf) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XPath.XPathNodeType" />
        <Parameter Name="matchSelf" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the ancestor nodes.</param>
        <param name="matchSelf">To include the context node in the selection, <see langword="true" />; otherwise, <see langword="false" />.</param>
        <summary>Selects all the ancestor nodes of the current node that have a matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes. The returned nodes are in reverse document order.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectAncestors method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 For an example of selecting ancestor nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectAncestors">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNodeIterator SelectAncestors (string name, string namespaceURI, bool matchSelf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNodeIterator SelectAncestors(string name, string namespaceURI, bool matchSelf) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="matchSelf" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The local name of the ancestor nodes.</param>
        <param name="namespaceURI">The namespace URI of the ancestor nodes.</param>
        <param name="matchSelf">To include the context node in the selection, <see langword="true" />; otherwise, <see langword="false" />.</param>
        <summary>Selects all the ancestor nodes of the current node that have the specified local name and namespace URI.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes. The returned nodes are in reverse document order.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If <xref:System.String.Empty?displayProperty=fullName> is specified as the `name` parameter, all ancestor nodes that belong to the specified namespace URI are selected. If <xref:System.String.Empty?displayProperty=fullName> is specified as the `namespaceURI` parameter, all ancestor nodes with the specified local name that belong to no namespace are selected. If <xref:System.String.Empty?displayProperty=fullName> is specified as both the local name and namespace URI, all ancestor nodes that belong to no namespace are selected.  
  
 The SelectAncestors method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example illustrates selecting ancestor, child, and descendant nodes.  
  
 [!code-cs[XPathNavigatorMethods#42](~/add/codesnippet/csharp/8b0fe185-94cf-4e37-9595-_1.cs)]
 [!code-vb[XPathNavigatorMethods#42](~/add/codesnippet/visualbasic/8b0fe185-94cf-4e37-9595-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#42](~/add/codesnippet/cpp/8b0fe185-94cf-4e37-9595-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see langword="null" /> cannot be passed as a parameter.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectChildren">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNodeIterator SelectChildren (System.Xml.XPath.XPathNodeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNodeIterator SelectChildren(valuetype System.Xml.XPath.XPathNodeType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XPath.XPathNodeType" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the child nodes.</param>
        <summary>Selects all the child nodes of the current node that have the matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectChildren method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 For an example of selecting ancestor, child and descendant nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectChildren">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNodeIterator SelectChildren (string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNodeIterator SelectChildren(string name, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The local name of the child nodes.</param>
        <param name="namespaceURI">The namespace URI of the child nodes.</param>
        <summary>Selects all the child nodes of the current node that have the local name and namespace URI specified.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If <xref:System.String.Empty?displayProperty=fullName> is specified as the `name` parameter, all child nodes that belong to the specified namespace URI are selected. If <xref:System.String.Empty?displayProperty=fullName> is specified as the `namespaceURI` parameter, all child nodes with the specified local name that belong to no namespace are selected. If both the local name and namespace URI parameters are <xref:System.String.Empty?displayProperty=fullName>, all child nodes that belong to no namespace are selected.  
  
 The SelectChildren method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 For an example of selecting ancestor, child and descendant nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see langword="null" /> cannot be passed as a parameter.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectDescendants">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNodeIterator SelectDescendants (System.Xml.XPath.XPathNodeType type, bool matchSelf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNodeIterator SelectDescendants(valuetype System.Xml.XPath.XPathNodeType type, bool matchSelf) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XPath.XPathNodeType" />
        <Parameter Name="matchSelf" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the descendant nodes.</param>
        <param name="matchSelf">
          <see langword="true" /> to include the context node in the selection; otherwise, <see langword="false" />.</param>
        <summary>Selects all the descendant nodes of the current node that have a matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectDescendants method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 For an example of selecting ancestor, child and descendant nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectDescendants">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNodeIterator SelectDescendants (string name, string namespaceURI, bool matchSelf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="matchSelf" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The local name of the descendant nodes.</param>
        <param name="namespaceURI">The namespace URI of the descendant nodes.</param>
        <param name="matchSelf">
          <see langword="true" /> to include the context node in the selection; otherwise, <see langword="false" />.</param>
        <summary>Selects all the descendant nodes of the current node with the local name and namespace URI specified.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If <xref:System.String.Empty?displayProperty=fullName> is specified as the `name` parameter, all descendant nodes that belong to the specified namespace URI are selected. If <xref:System.String.Empty?displayProperty=fullName> is specified as the `namespaceURI` parameter, all descendant nodes with the specified local name that belong to no namespace are selected. If both the local name and namespace URI parameters are <xref:System.String.Empty?displayProperty=fullName>, all descendant nodes that belong to no namespace are selected.  
  
 A descendant is a child or a child of a child and so on; thus the selected nodes will never contain attribute or namespace nodes.  
  
 The SelectDescendants method has no effect on the state of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 For an example of selecting ancestor, child, and descendant nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see langword="null" /> cannot be passed as a parameter.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectSingleNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNavigator SelectSingleNode (string xpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNavigator SelectSingleNode(string xpath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">A &lt;xref:System.String&gt; representing an XPath expression.</param>
        <summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified XPath query.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the first matching node for the XPath query specified; otherwise, <see langword="null" /> if there are no query results.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectSingleNode method selects the first node that matches the XPath query in the <xref:System.Xml.XPath.XPathNavigator> object.  
  
   
  
## Examples  
 The following example selects a single node from the <xref:System.Xml.XPath.XPathNavigator> based on the XPath query specified.  
  
 [!code-cs[XPathNavigatorMethods#43](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_30_1.cs)]
 [!code-vb[XPathNavigatorMethods#43](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_30_1.vb)]
 [!code-cpp[XPathNavigatorMethods#43](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_30_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectSingleNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNavigator SelectSingleNode (System.Xml.XPath.XPathExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNavigator SelectSingleNode(class System.Xml.XPath.XPathExpression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Xml.XPath.XPathExpression" />
      </Parameters>
      <Docs>
        <param name="expression">An <see cref="T:System.Xml.XPath.XPathExpression" /> object containing the compiled XPath query.</param>
        <summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <see cref="T:System.Xml.XPath.XPathExpression" /> object.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the first matching node for the XPath query specified; otherwise <see langword="null" /> if there are no query results.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectSingleNode method selects the first node that matches the compiled XPath query contained in the <xref:System.Xml.XPath.XPathExpression> object in the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example selects a single node from the <xref:System.Xml.XPath.XPathNavigator> based on the XPath query contained in the <xref:System.Xml.XPath.XPathExpression>.  
  
 [!code-cs[XPathNavigatorMethods#44](~/add/codesnippet/csharp/f80aab2d-d66b-4a6d-b36e-_1.cs)]
 [!code-vb[XPathNavigatorMethods#44](~/add/codesnippet/visualbasic/f80aab2d-d66b-4a6d-b36e-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#44](~/add/codesnippet/cpp/f80aab2d-d66b-4a6d-b36e-_1.cpp)]  
  
 The example takes the `books.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>   
<bookstore>  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectSingleNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNavigator SelectSingleNode (string xpath, System.Xml.IXmlNamespaceResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNavigator SelectSingleNode(string xpath, class System.Xml.IXmlNamespaceResolver resolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="xpath">A &lt;xref:System.String&gt; representing an XPath expression.</param>
        <param name="resolver">The &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object used to resolve namespace prefixes in the XPath query.</param>
        <summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator" /> object using the specified XPath query with the &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object specified to resolve namespace prefixes.</summary>
        <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the first matching node for the XPath query specified; otherwise <see langword="null" /> if there are no query results.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectSingleNode method selects the first node that matches the XPath query specified. The SelectSingleNode method uses the <xref:System.Xml.IXmlNamespaceResolver> object to resolve namespace prefixes.  
  
> [!NOTE]
>  In XPath all namespaces must be prefixed in a query. If an XML document uses a default namespace, you must still add a namespace prefix to the <xref:System.Xml.IXmlNamespaceResolver> object.  
  
   
  
## Examples  
 The following example selects a single node from the <xref:System.Xml.XPath.XPathNavigator> object based on the XPath query specified and uses the <xref:System.Xml.XmlNamespaceManager> object specified to resolve namespace prefixes in the XPath query.  
  
 [!code-cs[XPathNavigatorMethods#45](~/add/codesnippet/csharp/b42e187a-8c51-41fe-acd8-_1.cs)]
 [!code-vb[XPathNavigatorMethods#45](~/add/codesnippet/visualbasic/b42e187a-8c51-41fe-acd8-_1.vb)]
 [!code-cpp[XPathNavigatorMethods#45](~/add/codesnippet/cpp/b42e187a-8c51-41fe-acd8-_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetTypedValue">
      <MemberSignature Language="C#" Value="public virtual void SetTypedValue (object typedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTypedValue(object typedValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typedValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typedValue">The new typed value of the node.</param>
        <summary>Sets the typed value of the current node.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When an <xref:System.Xml.XmlDocument> object is created as the result of a schema validating <xref:System.Xml.XmlReader> object, the value specified to the SetTypedValue method is verified against the XML Schema Definition Language (XSD) schema for the XML document. If the value specified is invalid according to the schema for the XML document, an <xref:System.Xml.Schema.XmlSchemaException> is thrown.  
  
 The SetTypedValue method is valid only when the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element or attribute node.  
  
   
  
## Examples  
 In the following example, the SetTypedValue method is used to update all `price` elements in the `contosoBooks.xml` file using the <xref:System.Xml.XmlNamespaceManager> object to resolve namespace prefixes in the XPath expression.  
  
 [!code-cs[XPathNavigatorMethods#46](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_28_1.cs)]
 [!code-vb[XPathNavigatorMethods#46](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_28_1.vb)]
 [!code-cpp[XPathNavigatorMethods#46](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_28_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support the type of the object specified.</exception>
        <exception cref="T:System.ArgumentNullException">The value specified cannot be <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element or attribute node.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The new value of the node.</param>
        <summary>Sets the value of the current node.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   If the <xref:System.Xml.XPath.XPathNavigator> is positioned on an element node with complex content (child elements), calling the SetValue method replaces the child elements with a text node containing the new string value.  
  
-   The SetValue method cannot update the root node or namespace nodes.  
  
   
  
## Examples  
 In the following example, the SetValue method is used to update all `price` elements in the `contosoBooks.xml` file using the <xref:System.Xml.XmlNamespaceManager> object to resolve namespace prefixes in the XPath expression.  
  
 [!code-cs[XPathNavigatorMethods#47](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_35_1.cs)]
 [!code-vb[XPathNavigatorMethods#47](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_35_1.vb)]
 [!code-cpp[XPathNavigatorMethods#47](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_35_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on the root node, a namespace node, or the specified value is invalid.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new copy of the <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</summary>
        <returns>A new copy of the <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XPath.XPathNavigator> instance is cast to an <xref:System.ICloneable> interface.  
  
 For a description of this member, see <xref:System.Xml.XPath.XPathNavigator.Clone%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the text value of the current node.</summary>
        <returns>A <see langword="string" /> that contains the text value of the current node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The content returned by the ToString method depends on the <xref:System.Xml.XPath.XPathNodeType> of the node.  
  
|XPathNodeType|Property Value|  
|-------------------|--------------------|  
|<xref:System.Xml.XPath.XPathNodeType>|The <xref:System.Xml.XmlNode.InnerText%2A> of the root node.|  
|<xref:System.Xml.XPath.XPathNodeType>|The <xref:System.Xml.XmlNode.InnerText%2A> of the element.|  
|<xref:System.Xml.XPath.XPathNodeType>|The value of the attribute.|  
|<xref:System.Xml.XPath.XPathNodeType>|The content of the text node.|  
|<xref:System.Xml.XPath.XPathNodeType>|The entire content excluding the target.|  
|<xref:System.Xml.XPath.XPathNodeType>|The content of the comment.|  
|<xref:System.Xml.XPath.XPathNodeType>|The white space between mark-up.|  
|<xref:System.Xml.XPath.XPathNodeType>|The white space between markup in a mixed content model, or white space within an `xml:space='preserve'` scope.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TypedValue">
      <MemberSignature Language="C#" Value="public override object TypedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TypedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current node as a boxed object of the most appropriate .NET Framework type.</summary>
        <value>The current node as a boxed object of the most appropriate .NET Framework type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For attributes and elements with atomic simple type or simple text content, the TypedValue property returns a boxed <xref:System.Object> of the most appropriate .NET Framework <xref:System.Type>. If the element or attribute's content is a list type, the TypedValue property returns an array of objects of the most appropriate .NET Framework <xref:System.Type>.  
  
 The following table describes the TypedValue returned by each <xref:System.Xml.XPath.XPathNodeType>.  
  
|XPathNodeType|TypedValue Returned|  
|-------------------|-------------------------|  
|<xref:System.Xml.XPath.XPathNodeType>|Returns a <xref:System.String> object containing all <xref:System.Xml.XPath.XPathNodeType> node descendants of the document, concatenated and separated by white space. If the document does not have any <xref:System.Xml.XPath.XPathNodeType> node children, <xref:System.String.Empty?displayProperty=fullName> is returned.|  
|<xref:System.Xml.XPath.XPathNodeType><br /><br /> (typed or simple content)|Returns an <xref:System.Object> that represents the typed value of the <xref:System.Xml.XPath.XPathNodeType>.<br /><br /> If the <xref:System.Xml.XPath.XPathNodeType> is defined as an XML Schema list data type, then the node value is exposed as an array of objects. Each <xref:System.Object> in the array contains the typed value of a child of the element.|  
|<xref:System.Xml.XPath.XPathNodeType><br /><br /> (untyped, mixed, or complex content)|Returns a <xref:System.String> object containing all <xref:System.Xml.XPath.XPathNodeType> node descendants of the <xref:System.Xml.XPath.XPathNodeType> (including string representations of typed values), concatenated and separated by white space. If the <xref:System.Xml.XPath.XPathNodeType> does not have any <xref:System.Xml.XPath.XPathNodeType> node children, <xref:System.String.Empty?displayProperty=fullName> is returned.|  
|<xref:System.Xml.XPath.XPathNodeType><br /><br /> (typed or simple content)|Returns an <xref:System.Object> that represents the typed value of the <xref:System.Xml.XPath.XPathNodeType>. The <xref:System.Object> is boxed as a .NET Framework <xref:System.Type> value.<br /><br /> If the <xref:System.Xml.XPath.XPathNodeType> is defined as an XML Schema list data type, the node value is exposed as an array of objects. Each <xref:System.Object> in the array contains the typed value of a child of the <xref:System.Xml.XPath.XPathNodeType>.|  
|<xref:System.Xml.XPath.XPathNodeType>|A <xref:System.String> object containing the text.|  
|<xref:System.Xml.XPath.XPathNodeType>|A <xref:System.String> object containing the content of the comments, excluding the surrounding `<!--` and `-->`.|  
|<xref:System.Xml.XPath.XPathNodeType>|A <xref:System.String> object containing the content of the processing instruction, excluding the target and surrounding `<?` and `?>`.|  
|<xref:System.Xml.XPath.XPathNodeType>|A <xref:System.String> object containing the namespace name.|  
|<xref:System.Xml.XPath.XPathNodeType>|A <xref:System.String> object containing the text of the node.|  
|<xref:System.Xml.XPath.XPathNodeType>|A <xref:System.String> object containing the text of the node.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingObject">
      <MemberSignature Language="C#" Value="public virtual object UnderlyingObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UnderlyingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used by <see cref="T:System.Xml.XPath.XPathNavigator" /> implementations which provide a "virtualized" XML view over a store, to provide access to underlying objects.</summary>
        <value>The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UnderlyingObject property can be used by <xref:System.Xml.XPath.XPathNavigator> implementations which provide a "virtualized" XML view over a store, to provide access to underlying objects. For example, if an <xref:System.Xml.XPath.XPathNavigator> object is used to provide a virtual XML view over a Common Language Runtime (CLR) object graph, you may wish to perform XPath queries using the <xref:System.Xml.XPath.XPathNavigator.Select%2A> method and then access the CLR objects underlying the selected nodes. The UnderlyingObject property would expose these underlying objects.  
  
 In many cases, this value will be `null`, and the object returned by the UnderlyingObject property will always be implementation specific.  
  
 The UnderlyingObject property should preserve object identity and should only be used to return objects that have a one-to-one correspondence to their respective overlaid items. A user should always get the same object on successive visits to the same node using the same <xref:System.Xml.XPath.XPathNavigator> object or a cloned one.  
  
> [!NOTE]
>  The UnderlyingObject property of an <xref:System.Xml.XPath.XPathNavigator> object created by an <xref:System.Xml.XmlDocument> object returns the corresponding <xref:System.Xml.XmlNode>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValueAs">
      <MemberSignature Language="C#" Value="public override object ValueAs (Type returnType, System.Xml.IXmlNamespaceResolver nsResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ValueAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver nsResolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="nsResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="returnType">The &lt;xref:System.Type&gt; to return the current node's value as.</param>
        <param name="nsResolver">The &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object used to resolve namespace prefixes.</param>
        <summary>Gets the current node's value as the &lt;xref:System.Type&gt; specified, using the &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object specified to resolve namespace prefixes.</summary>
        <returns>The value of the current node as the &lt;xref:System.Type&gt; requested.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathItem.ValueAs%2A> method attempts to convert the value of the current node to the .NET Framework type, specified according to the XPath 2.0 rules for casting the current node's type.  
  
 The <xref:System.Xml.IXmlNamespaceResolver> object is used to resolve namespace prefixes related to type conversions. For example, when converting an `xs:QName` to an `xs:string`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The current node's value is not in the correct format for the target type.</exception>
        <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValueAsBoolean">
      <MemberSignature Language="C#" Value="public override bool ValueAsBoolean { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValueAsBoolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current node's value as a &lt;xref:System.Boolean&gt;.</summary>
        <value>The current node's value as a &lt;xref:System.Boolean&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Xml.XPath.XPathNavigator> has schema or type information (for example, from an <xref:System.Xml.XmlDocument> object initialized with an XML schema validating <xref:System.Xml.XmlReader>), and if the current node is defined as an XML Schema `xs:boolean` type, the ValueAsBoolean property returns the current node's value as an unboxed <xref:System.Boolean> object.  
  
 However, if the <xref:System.Xml.XPath.XPathNavigator> does not have any schema or type information, the ValueAsBoolean property attempts to convert the string value of the current node to a <xref:System.Boolean> value, according to the XPath 2.0 casting rules for `xs:boolean`.  
  
   
  
## Examples  
 In the following example, the value of each element in the `valueas.xml` file is returned using the ValueAsBoolean, <xref:System.Xml.XPath.XPathNavigator.ValueAsDateTime%2A>, <xref:System.Xml.XPath.XPathNavigator.ValueAsDouble%2A>, <xref:System.Xml.XPath.XPathNavigator.ValueAsInt%2A>, and <xref:System.Xml.XPath.XPathNavigator.ValueAsLong%2A> properties.  
  
 [!code-vb[XPathNavigatorProperties#5](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_10_1.vb)]
 [!code-cpp[XPathNavigatorProperties#5](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_10_1.cpp)]
 [!code-cs[XPathNavigatorProperties#5](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_10_1.cs)]  
  
 The example takes the `valueas.xml` file as an input.  
  
```  
<root>  
    <booleanElement>true</booleanElement>  
    <dateTimeElement>2004-04-20T12:00:00</dateTimeElement>  
    <decimalElement>10.00</decimalElement>  
    <numberElement>100000000</numberElement>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The current node's string value cannot be converted to a &lt;xref:System.Boolean&gt;.</exception>
        <exception cref="T:System.InvalidCastException">The attempted cast to &lt;xref:System.Boolean&gt; is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValueAsDateTime">
      <MemberSignature Language="C#" Value="public override DateTime ValueAsDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValueAsDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current node's value as a &lt;xref:System.DateTime&gt;.</summary>
        <value>The current node's value as a &lt;xref:System.DateTime&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Xml.XPath.XPathNavigator> has schema or type information (for example, from an <xref:System.Xml.XmlDocument> object initialized with an XML schema validating <xref:System.Xml.XmlReader>), and if the current node is defined as an XML Schema `xs:datetime` type, the ValueAsDateTime property returns the current node's value as an unboxed <xref:System.DateTime> object.  
  
 However, if the <xref:System.Xml.XPath.XPathNavigator> does not have any schema or type information, the ValueAsDateTime property attempts to convert the string value of the current node to a <xref:System.DateTime> value, according to the XPath 2.0 casting rules for `xs:datetime`.  
  
   
  
## Examples  
 For an example of the ValueAsDateTime property, see the <xref:System.Xml.XPath.XPathNavigator.ValueAsBoolean%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The current node's string value cannot be converted to a &lt;xref:System.DateTime&gt;.</exception>
        <exception cref="T:System.InvalidCastException">The attempted cast to &lt;xref:System.DateTime&gt; is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValueAsDouble">
      <MemberSignature Language="C#" Value="public override double ValueAsDouble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ValueAsDouble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current node's value as a &lt;xref:System.Double&gt;.</summary>
        <value>The current node's value as a &lt;xref:System.Double&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Xml.XPath.XPathNavigator> has schema or type information (for example, from an <xref:System.Xml.XmlDocument> object initialized with an XML schema validating <xref:System.Xml.XmlReader>), and if the current node is defined as an XML Schema `xs:double` type, the ValueAsDouble property returns the current node's value as an unboxed <xref:System.Double> object.  
  
 However, if the <xref:System.Xml.XPath.XPathNavigator> does not have any schema or type information, the ValueAsDouble property attempts to convert the string value of the current node to a <xref:System.Double> value, according to the XPath 2.0 casting rules for `xsd:double`.  
  
   
  
## Examples  
 For an example of the ValueAsDouble property, see the <xref:System.Xml.XPath.XPathNavigator.ValueAsBoolean%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The current node's string value cannot be converted to a &lt;xref:System.Double&gt;.</exception>
        <exception cref="T:System.InvalidCastException">The attempted cast to &lt;xref:System.Double&gt; is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValueAsInt">
      <MemberSignature Language="C#" Value="public override int ValueAsInt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ValueAsInt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current node's value as an &lt;xref:System.Int32&gt;.</summary>
        <value>The current node's value as an &lt;xref:System.Int32&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Xml.XPath.XPathNavigator> has schema or type information (for example, from an <xref:System.Xml.XmlDocument> object initialized with an XML schema validating <xref:System.Xml.XmlReader>), and if the current node is defined as an XML Schema `xs:integer` type, the ValueAsInt property returns the current node's value as an unboxed <xref:System.Int32> object.  
  
 However, if the <xref:System.Xml.XPath.XPathNavigator> does not have any schema or type information, the ValueAsInt property attempts to convert the string value of the current node to a <xref:System.Int32> value, according to the XPath 2.0 casting rules for `xs:integer`.  
  
   
  
## Examples  
 For an example of the ValueAsInt property, see the <xref:System.Xml.XPath.XPathNavigator.ValueAsBoolean%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The current node's string value cannot be converted to a &lt;xref:System.Int32&gt;.</exception>
        <exception cref="T:System.InvalidCastException">The attempted cast to &lt;xref:System.Int32&gt; is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValueAsLong">
      <MemberSignature Language="C#" Value="public override long ValueAsLong { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ValueAsLong" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current node's value as an &lt;xref:System.Int64&gt;.</summary>
        <value>The current node's value as an &lt;xref:System.Int64&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Xml.XPath.XPathNavigator> has schema or type information (for example, from an <xref:System.Xml.XmlDocument> object initialized with an XML schema validating <xref:System.Xml.XmlReader>), and if the current node is defined as an XML Schema `xs:integer` type, the ValueAsLong property returns the current node's value as an unboxed <xref:System.Int64> object.  
  
 However, if the <xref:System.Xml.XPath.XPathNavigator> does not have any schema or type information, the ValueAsLong property attempts to convert the string value of the current node to a <xref:System.Int64> value, according to the XPath 2.0 casting rules for `xs:integer`.  
  
   
  
## Examples  
 For an example of the ValueAsLong property, see the <xref:System.Xml.XPath.XPathNavigator.ValueAsBoolean%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The current node's string value cannot be converted to a &lt;xref:System.Int64&gt;.</exception>
        <exception cref="T:System.InvalidCastException">The attempted cast to &lt;xref:System.Int64&gt; is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValueType">
      <MemberSignature Language="C#" Value="public override Type ValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the .NET Framework &lt;xref:System.Type&gt; of the current node.</summary>
        <value>The .NET Framework &lt;xref:System.Type&gt; of the current node. The default value is &lt;xref:System.String&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Xml.XPath.XPathItem.ValueType%2A> property gets the .NET Framework <xref:System.Type> of the typed value of the current node.  
  
 For example, an element of type `xs:int` would have a <xref:System.Xml.XPath.XPathItem.ValueType%2A> of <xref:System.Int32> by default. However, the <xref:System.Xml.XPath.XPathItem.ValueType%2A> could be any one of the valid types that can be mapped to `xs:int` such as <xref:System.Int16> or <xref:System.Double>.  
  
 If a node has no type, this is equivalent to the type annotation on the node being `xdt:untypedAtomic`. In this case, the ValueType property returns a string for the node. For more information, see [Type Support in the System.Xml Classes](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 In the following example, the `contosoBooks.xml` XML file and `contosoBooks.xsd` XML Schema definition language (XSD) schema are used to create an <xref:System.Xml.XPath.XPathNavigator> object. The typed value of the `price` element is displayed using the ValueType property and then returned as a string using the <xref:System.Xml.XPath.XPathNavigator.ValueAs%2A> method.  
  
 [!code-vb[XPathNavigatorProperties#6](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_1_1.vb)]
 [!code-cpp[XPathNavigatorProperties#6](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_1_1.cpp)]
 [!code-cs[XPathNavigatorProperties#6](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_1_1.cs)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 The example also takes the `contosoBooks.xsd` as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8"?>  
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.contoso.com/books" xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="bookstore">  
        <xs:complexType>  
            <xs:sequence>  
                <xs:element maxOccurs="unbounded" name="book">  
                    <xs:complexType>  
                        <xs:sequence>  
                            <xs:element name="title" type="xs:string" />  
                            <xs:element name="author">  
                                <xs:complexType>  
                                    <xs:sequence>  
                                        <xs:element minOccurs="0" name="name" type="xs:string" />  
                                        <xs:element minOccurs="0" name="first-name" type="xs:string" />  
                                        <xs:element minOccurs="0" name="last-name" type="xs:string" />  
                                    </xs:sequence>  
                                </xs:complexType>  
                            </xs:element>  
                            <xs:element name="price" type="xs:decimal" />  
                        </xs:sequence>  
                        <xs:attribute name="genre" type="xs:string" use="required" />  
                        <xs:attribute name="publicationdate" type="xs:date" use="required" />  
                        <xs:attribute name="ISBN" type="xs:string" use="required" />  
                    </xs:complexType>  
                </xs:element>  
            </xs:sequence>  
        </xs:complexType>  
    </xs:element>  
</xs:schema>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteSubtree">
      <MemberSignature Language="C#" Value="public virtual void WriteSubtree (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteSubtree(class System.Xml.XmlWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The &lt;xref:System.Xml.XmlWriter&gt; object to stream to.</param>
        <summary>Streams the current node and its child nodes to the &lt;xref:System.Xml.XmlWriter&gt; object specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Namespace declarations for the in-scope namespaces of the current node are inserted into the XML streamed to the <xref:System.Xml.XmlWriter> object specified.  
  
 For example, if the WriteSubtree method is called on the first `book` element of the `books.xml` file, the `http://www.contoso.com/books` namespace declaration made at the top of the XML document will appear in the XML streamed to the <xref:System.Xml.XmlWriter> object specified as shown in the following example.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<book genre="autobiography" publicationdate="1981" ISBN="1-861003-11-0" xmlns="http://www.contoso.com/books">  
    <title>The Autobiography of Benjamin Franklin</title>  
    <author>  
        <first-name>Benjamin</first-name>  
        <last-name>Franklin</last-name>  
    </author>  
    <price>8.99</price>  
</book>  
```  
  
> [!NOTE]
>  The WriteSubtree method does not affect the position of the <xref:System.Xml.XPath.XPathNavigator>.  
  
   
  
## Examples  
 The following example illustrates using the WriteSubtree method on the first `book` element of the `contosoBooks.xml` file.  
  
 [!code-cs[XPathNavigatorMethods#48](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_14_1.cs)]
 [!code-vb[XPathNavigatorMethods#48](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_14_1.vb)]
 [!code-cpp[XPathNavigatorMethods#48](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_14_1.cpp)]  
  
 The example takes the `contosoBooks.xml` file as an input.  
  
```xml  
  
<?xml version="1.0" encoding="utf-8" ?>  
<bookstore xmlns="http://www.contoso.com/books">  
    <book genre="autobiography" publicationdate="1981-03-22" ISBN="1-861003-11-0">  
        <title>The Autobiography of Benjamin Franklin</title>  
        <author>  
            <first-name>Benjamin</first-name>  
            <last-name>Franklin</last-name>  
        </author>  
        <price>8.99</price>  
    </book>  
    <book genre="novel" publicationdate="1967-11-17" ISBN="0-201-63361-2">  
        <title>The Confidence Man</title>  
        <author>  
            <first-name>Herman</first-name>  
            <last-name>Melville</last-name>  
        </author>  
        <price>11.99</price>  
    </book>  
    <book genre="philosophy" publicationdate="1991-02-15" ISBN="1-861001-57-6">  
        <title>The Gorgias</title>  
        <author>  
            <name>Plato</name>  
        </author>  
        <price>9.99</price>  
    </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the `xml:lang` scope for the current node.</summary>
        <value>A &lt;xref:System.String&gt; that contains the value of the `xml:lang` scope, or &lt;xref:System.String?displayProperty=fullName&gt; if the current node has no `xml:lang` scope value to return.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In the example XML below, when the <xref:System.Xml.XPath.XPathNavigator> is positioned on the `name` element, the XmlLang property returns a scope of `en-us` indicating that the node is in the scope of a `xml:lang="en-us"` attribute.  
  
```  
<root xml:lang="en-us">  
    <name>Name</name>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="XmlType">
      <MemberSignature Language="C#" Value="public override System.Xml.Schema.XmlSchemaType XmlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaType XmlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaType" /> information for the current node.</summary>
        <value>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object; default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following are important notes to consider when using the XmlType property.  
  
-   The XmlType property is `null`, unless the <xref:System.Xml.Schema.IXmlSchemaInfo.Validity%2A> property of the <xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> property of the <xref:System.Xml.XPath.XPathNavigator> is set to <xref:System.Xml.Schema.XmlSchemaValidity?displayProperty=fullName>.  
  
-   If this node is valid, the XmlType property is the same as the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaType%2A> property of the <xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> property of the <xref:System.Xml.XPath.XPathNavigator>, unless this node is a member of a union.  
  
-   If this node is a member of a union, the XmlType property is the same as the <xref:System.Xml.Schema.IXmlSchemaInfo.MemberType%2A> property of the <xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> property of this <xref:System.Xml.XPath.XPathNavigator>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>