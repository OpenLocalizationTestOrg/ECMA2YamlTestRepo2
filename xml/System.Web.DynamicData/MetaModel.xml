<Type Name="MetaModel" FullName="System.Web.DynamicData.MetaModel">
  <TypeSignature Language="C#" Value="public class MetaModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MetaModel extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents one or multiple databases that are used by ASP.NET Dynamic Data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MetaModel type lets you register one or multiple data contexts for a Dynamic Data Web application.  
  
 A data context is an object that represents a database connection. A data context has access to one data model which represents a database that is available through that connection. A data model is an object that represents a database's data entities as CLR types. Dynamic Data supports data models based on LINQ to SQL and on the ADO.NET Entity Framework.  
  
 In [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)], you can generate data-model types by using the **LINQ to SQL Classes** template or the **ADO.NET Entity Data Model** template. These templates use the Object Relational Designer (O/R Designer) for the LINQ to SQL model, or the ADO.NET Entity Data Model Designer (Entity Designer) for the Entity Framework model.  
  
   
  
## Examples  
 The following example shows how to use MetaModel type to perform the following tasks in order to use automatic scaffolding in an ASP.NET Web site:  
  
-   Get the data model for the default data context.  
  
-   Get the data model for a specified data context.  
  
-   Evaluate the routing path (determine the URL) for a specified table.  
  
 The example consists of a page and its code-behind file.  
  
 [!code-cs[System.Web.DynamicData.MetaModel#1](~/add/codesnippet/csharp/t-system.web.dynamicdata_4_1.cs)]
 [!code-cs[System.Web.DynamicData.MetaModel#1](~/add/codesnippet/csharp/t-system.web.dynamicdata_4_1.aspx)]
 [!code-vb[System.Web.DynamicData.MetaModel#1](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/PathModel.aspx#1)]
 [!code-vb[System.Web.DynamicData.MetaModel#1](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/PlaceHolder.vb#1)]  
  
 [!code-cs[System.Web.DynamicData.MetaModel#2](~/add/codesnippet/csharp/t-system.web.dynamicdata_4_2.cs)]
 [!code-vb[System.Web.DynamicData.MetaModel#2](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/PathModel.aspx.vb#2)]  
  
 To compile the example, you need the following:  
  
-   [!INCLUDE[vs_dev10_long](~/add/includes/vs-dev10-long-md.md)] or [!INCLUDE[vwd_exp_dev10_long](~/add/includes/vwd-exp-dev10-long-md.md)].  
  
-   A Dynamic Data Web site. For more information, see [Walkthrough: Creating a New Dynamic Data Web Site Using Scaffolding](~/add/includes/ajax-current-ext-md.md).  
  
 See a run-time code example of this feature: [Run](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel).  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.InvalidOperationException">Can be thrown by any method if there has been a data context registration error.</exception>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetaModel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Instantiates a new instance of the <see cref="T:System.Web.DynamicData.MetaModel" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically call the MetaModel constructor in the `Application_Start` method of the Global.asax file.  
  
   
  
## Examples  
 The following example shows how to use the MetaModel constructor to perform the following tasks:  
  
-   Instantiate the <xref:System.Web.DynamicData.MetaModel> class.  
  
-   Initialize and register the <xref:System.Web.DynamicData.MetaModel> instance.  
  
 [!code-vb[System.Web.DynamicData.MetaModel#99](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/global.asax.vb#99)]
 [!code-cs[System.Web.DynamicData.MetaModel#99](~/add/codesnippet/csharp/m-system.web.dynamicdata_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetaModel (bool registerGlobally);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool registerGlobally) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="registerGlobally" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="registerGlobally">
          <see langword="true" /> to indicate that the model is registered globally; otherwise <see langword="false" />. The default is <see langword="true" />.</param>
        <summary>Instantiates a new instance of the <see cref="T:System.Web.DynamicData.MetaModel" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor determines whether the data model is registered globally so that it can be retrieved using the <xref:System.Web.DynamicData.MetaModel.GetModel%2A> method. It enables you to create multiple models and use the same entity types while avoiding type conflicts.  
  
 You typically call the MetaModel constructor in the `Application_Start` method of the Global.asax file.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="protected virtual System.Web.DynamicData.MetaTable CreateTable (System.Web.DynamicData.ModelProviders.TableProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.DynamicData.MetaTable CreateTable(class System.Web.DynamicData.ModelProviders.TableProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.DynamicData.ModelProviders.TableProvider" />
      </Parameters>
      <Docs>
        <param name="provider">The provider for the table.</param>
        <summary>Instantiates a <see cref="T:System.Web.DynamicData.MetaTable" /> object.</summary>
        <returns>A new instance of the table.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateTable method can be overridden to instantiate a derived type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.DynamicData.MetaModel Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.DynamicData.MetaModel Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the first instance of a data model that is created by the application.</summary>
        <value>The data-model instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property provides a simple way to reference the default data-model instance. If the application uses multiple models, you must provide your own way to store references to the additional data models. To find a specific data model, call the <xref:System.Web.DynamicData.MetaModel.GetModel%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example shows how to use the Default property in the <xref:System.Web.DynamicData.MetaModel.GetModel%2A> method to get the default data model.  
  
 For a complete example, see the <xref:System.Web.DynamicData.MetaModel> class overview.  
  
 [!code-cs[System.Web.DynamicData.MetaModel#22](~/add/codesnippet/csharp/p-system.web.dynamicdata_5_1.cs)]
 [!code-vb[System.Web.DynamicData.MetaModel#22](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/PathModel.aspx.vb#22)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DynamicDataFolderVirtualPath">
      <MemberSignature Language="C#" Value="public string DynamicDataFolderVirtualPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DynamicDataFolderVirtualPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the virtual path of the DynamicData folder in the Web site.</summary>
        <value>The virtual path of the DynamicData folder.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property enables you to change the virtual path of the DynamicData folder. The default value is "~/DynamicData".  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EntityTemplateFactory">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.EntityTemplateFactory EntityTemplateFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.EntityTemplateFactory EntityTemplateFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.EntityTemplateFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Web.DynamicData.EntityTemplateFactory" /> object that is associated with the model.</summary>
        <value>An instance of the <see cref="T:System.Web.DynamicData.EntityTemplateFactory" /> object that is associated with the model.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FieldTemplateFactory">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.IFieldTemplateFactory FieldTemplateFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldTemplateFactory FieldTemplateFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldTemplateFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a custom <see cref="T:System.Web.DynamicData.IFieldTemplateFactory" /> interface.</summary>
        <value>The <see cref="T:System.Web.DynamicData.IFieldTemplateFactory" /> interface.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.DynamicData.IFieldTemplateFactory> interface lets you specify which field templates are created for the table columns.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FilterFactory">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.FilterFactory FilterFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.FilterFactory FilterFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.FilterFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Web.DynamicData.FilterFactory" /> object that is associated with the model.</summary>
        <value>An instance of the <see cref="T:System.Web.DynamicData.FilterFactory" /> object that is associated with the model.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetActionPath">
      <MemberSignature Language="C#" Value="public string GetActionPath (string tableName, string action, object row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetActionPath(string tableName, string action, object row) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="row" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="tableName">The name of the table that the action applies to.</param>
        <param name="action">The action to apply to the table.</param>
        <param name="row">An object that represents a single row of data in a table. `row` is used to provide values for query-string parameters.</param>
        <summary>Returns the action path that is associated with a specific table.</summary>
        <returns>The URL that is associated with the route.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The route is determined by the combination of the table name and action.  
  
 [Run](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=PathModel.aspx) an online example of this feature.  
  
   
  
## Examples  
 The following example shows how to use the GetActionPath method to evaluate the routing path (determine the URL) for a specified table. For a complete example, see <xref:System.Web.DynamicData.MetaModel>.  
  
 [!code-cs[System.Web.DynamicData.MetaModel#23](~/add/codesnippet/csharp/ccd53684-51b1-498b-9a9e-_1.cs)]
 [!code-vb[System.Web.DynamicData.MetaModel#23](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/PathModel.aspx.vb#23)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public static System.Web.DynamicData.MetaModel GetModel (Type contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.DynamicData.MetaModel GetModel(class System.Type contextType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contextType">The type of the data context as defined in the data model.</param>
        <summary>Returns the data-model instance for the specified context.</summary>
        <returns>The data model that is associated with the specified context type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the GetModel method to perform the following tasks:  
  
-   Getting the default data model.  
  
-   Getting the data model specified by the passed context type.  
  
 For a complete example, see the <xref:System.Web.DynamicData.MetaModel> class overview.  
  
 [!code-cs[System.Web.DynamicData.MetaModel#22](~/add/codesnippet/csharp/m-system.web.dynamicdata_1_1.cs)]
 [!code-vb[System.Web.DynamicData.MetaModel#22](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/PathModel.aspx.vb#22)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaTable GetTable (string uniqueTableName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.DynamicData.MetaTable GetTable(string uniqueTableName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueTableName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueTableName">The name that identifies the table in the data model.</param>
        <summary>Returns the metadata that is associated with the specified table.</summary>
        <returns>The metadata that describes the specified table.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The name uniquely identifies a table in the data model and is used to generate the related URL for routing.  
  
   
  
## Examples  
 The following example shows how to use the GetTable method to obtain the metadata for the specified table. For a complete example, see <xref:System.Web.DynamicData.MetaModel.GetTable%2A>.  
  
 [!code-vb[System.Web.DynamicData.MetaModel#42](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/gettable.aspx.vb#42)]
 [!code-cs[System.Web.DynamicData.MetaModel#42](~/add/codesnippet/csharp/m-system.web.dynamicdata_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The name was not found in the data model.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaTable GetTable (Type entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.DynamicData.MetaTable GetTable(class System.Type entityType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="entityType">The type that identifies the table in the data model.</param>
        <summary>Returns the metadata that describes the specified table.</summary>
        <returns>The metadata that describes the specified table.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the GetTable method to obtain the metadata for the specified table. For a complete example, see <xref:System.Web.DynamicData.MetaModel.GetTable%2A>.  
  
 [!code-vb[System.Web.DynamicData.MetaModel#41](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/gettable.aspx.vb#41)]
 [!code-cs[System.Web.DynamicData.MetaModel#41](~/add/codesnippet/csharp/m-system.web.dynamicdata_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The type was not found in the data model.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaTable GetTable (string tableName, Type contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.DynamicData.MetaTable GetTable(string tableName, class System.Type contextType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="contextType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="tableName">The name of the table.</param>
        <param name="contextType">The data context to search for the table.</param>
        <summary>Returns the metadata that describes the specified table.</summary>
        <returns>The metadata that describes the specified table.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the GetTable method to obtain the metadata for the specified table. For a complete example, see <xref:System.Web.DynamicData.MetaModel.GetTable%2A>.  
  
 [!code-vb[System.Web.DynamicData.MetaModel#43](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/gettable.aspx.vb#43)]
 [!code-cs[System.Web.DynamicData.MetaModel#43](~/add/codesnippet/csharp/m-system.web.dynamicdata_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tablename" /> or <paramref name="contextType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The context is not registered or the table does not exist in the data context.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Func&lt;object&gt; contextFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Func`1&lt;object&gt; contextFactory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextFactory" Type="System.Func&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="contextFactory">The factory for instantiating the data context.</param>
        <summary>Registers the data context that is specified by a context factory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the default context information that is defined by the <xref:System.Web.DynamicData.ContextConfiguration> class. It enables you to instantiate the data context by using your own constructor.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Type contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Type contextType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contextType">The type of the data context as defined in the data model.</param>
        <summary>Registers a data-context instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the default context information as defined by the <xref:System.Web.DynamicData.ContextConfiguration> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataModelProvider" Type="System.Web.DynamicData.ModelProviders.DataModelProvider" />
      </Parameters>
      <Docs>
        <param name="dataModelProvider">A provider for the data model.</param>
        <summary>Registers a data context instance by using a data-model provider</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Func&lt;object&gt; contextFactory, System.Web.DynamicData.ContextConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Func`1&lt;object&gt; contextFactory, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextFactory" Type="System.Func&lt;System.Object&gt;" />
        <Parameter Name="configuration" Type="System.Web.DynamicData.ContextConfiguration" />
      </Parameters>
      <Docs>
        <param name="contextFactory">A delegate that is used to instantiate the data model context.</param>
        <param name="configuration">The context information as defined by the <see cref="T:System.Web.DynamicData.ContextConfiguration" /> class.</param>
        <summary>Registers a data-context instance by using the specified context configuration and by enabling a custom constructor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The context factory in this method enables you to instantiate a data model context by using a custom constructor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contextFactory" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="contextType" /> that is instantiated by <paramref name="contextFactory" /> is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Type contextType, System.Web.DynamicData.ContextConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Type contextType, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextType" Type="System.Type" />
        <Parameter Name="configuration" Type="System.Web.DynamicData.ContextConfiguration" />
      </Parameters>
      <Docs>
        <param name="contextType">The type of the data context as defined in the data model.</param>
        <param name="configuration">The configuration information for the context, as defined by the <see cref="T:System.Web.DynamicData.ContextConfiguration" /> class.</param>
        <summary>Registers a data-context instance by using the specified context configuration.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the RegisterContext method to register a data context with scaffolding enabled, as specified by the `configuration` parameter.  
  
 [!code-vb[System.Web.DynamicData.MetaModel#99](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/global.asax.vb#99)]
 [!code-cs[System.Web.DynamicData.MetaModel#99](~/add/codesnippet/csharp/d01c18e1-b759-4ac9-a729-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contextType" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public virtual void RegisterContext (System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider, System.Web.DynamicData.ContextConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataModelProvider" Type="System.Web.DynamicData.ModelProviders.DataModelProvider" />
        <Parameter Name="configuration" Type="System.Web.DynamicData.ContextConfiguration" />
      </Parameters>
      <Docs>
        <param name="dataModelProvider">A provider for the data model.</param>
        <param name="configuration">The context information as defined by the <see cref="T:System.Web.DynamicData.ContextConfiguration" /> class.</param>
        <summary>Registers a data-context instance by using the specified context configuration and by enabling a data-model provider.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataModelProvider" /> or <paramref name="configuration" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="contextType" /> is already registered.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetRegistrationException">
      <MemberSignature Language="C#" Value="public static void ResetRegistrationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetRegistrationException() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets any previous context registration error that might have occurred.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When an error occurs during data-context registration, the exception is cached and thrown on all subsequent operations. For example, if an error occurs at application start, it is thrown on every request. Call this method to clear the error and to enable a new context registration to be performed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.DynamicData.MetaTable&gt; Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.DynamicData.MetaTable&gt; Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.DynamicData.MetaTable&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of all the tables that are part of the data model.</summary>
        <value>A collection that contains the tables that belong to the data model.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The collection contains all the tables in the data model, which includes the tables that are not visible (are not part of Dynamic Data scaffolding).  
  
 [Run](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=TablesMenu.aspx) an online example of this feature.  
  
   
  
## Examples  
 The following example shows how to use the Tables and <xref:System.Web.DynamicData.MetaModel.VisibleTables%2A> properties to perform the following tasks:  
  
-   Get a collection of all the tables in a data model and show them in a `GridView` control.  
  
-   Get a collection of the visible tables in a data model and show them in a `GridView` control.  
  
 The example consists of a page and its code-behind file.  
  
 [!code-cs[System.Web.DynamicData.MetaModel#5](~/add/codesnippet/csharp/p-system.web.dynamicdata_1_1.aspx)]
 [!code-vb[System.Web.DynamicData.MetaModel#5](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/TablesMenu.aspx#5)]  
  
 [!code-cs[System.Web.DynamicData.MetaModel#6](~/add/codesnippet/csharp/p-system.web.dynamicdata_1_2.cs)]
 [!code-vb[System.Web.DynamicData.MetaModel#6](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/TablesMenu.aspx.vb#6)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetTable">
      <MemberSignature Language="C#" Value="public bool TryGetTable (string uniqueTableName, out System.Web.DynamicData.MetaTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetTable(string uniqueTableName, class System.Web.DynamicData.MetaTable table) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueTableName" Type="System.String" />
        <Parameter Name="table" Type="System.Web.DynamicData.MetaTable&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="uniqueTableName">The name that uniquely identifies the table.</param>
        <param name="table">When this method returns, and if it has found the requested table, contains the metadata for that table. This parameter is passed uninitialized.</param>
        <summary>Attempts to get the metadata that is associated with the specified table.</summary>
        <returns>
          <see langword="true" /> if the table metadata is found; otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method gets the metadata that is associated with the specified table. If the table is not found, this method returns `false`. This differs from the <xref:System.Web.DynamicData.MetaModel.GetTable%2A> method, which throws an exception if the table is not found.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uniqueTableName" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryGetTable">
      <MemberSignature Language="C#" Value="public bool TryGetTable (Type entityType, out System.Web.DynamicData.MetaTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetTable(class System.Type entityType, class System.Web.DynamicData.MetaTable table) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
        <Parameter Name="table" Type="System.Web.DynamicData.MetaTable&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="entityType">The table type.</param>
        <param name="table">When this method returns, and if the requested table has been found, contains the metadata for the specified table. This parameter is passed uninitialized.</param>
        <summary>Attempts to get the metadata that is associated with the specified table.</summary>
        <returns>
          <see langword="true" /> if the table metadata is found; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method gets the metadata that is associated with the specified table. If the table is not found, this method returns `false`. This differs from the <xref:System.Web.DynamicData.MetaModel.GetTable%2A> method, which throws an exception if the table is not found.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entityType" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VisibleTables">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;System.Web.DynamicData.MetaTable&gt; VisibleTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class System.Web.DynamicData.MetaTable&gt; VisibleTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Web.DynamicData.MetaTable&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of the visible tables in the data model.</summary>
        <value>A visible table refers to a table that has scaffolding enabled. This means that it is a table for which a List.aspx page exists.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the VisibleTables property to get a collection of the visible tables in the data model. For a complete example, see the <xref:System.Web.DynamicData.MetaModel> class overview.  
  
 [!code-cs[System.Web.DynamicData.MetaModel#62](~/add/codesnippet/csharp/p-system.web.dynamicdata_0_1.cs)]
 [!code-vb[System.Web.DynamicData.MetaModel#62](~/add/codesnippet/visualbasic/System.Web.DynamicData.MetaModel.ClassLibrary1/TablesMenu.aspx.vb#62)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>