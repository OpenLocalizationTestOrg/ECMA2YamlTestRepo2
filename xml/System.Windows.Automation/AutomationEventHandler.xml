<Type Name="AutomationEventHandler" FullName="System.Windows.Automation.AutomationEventHandler">
  <TypeSignature Language="C#" Value="public delegate void AutomationEventHandler(object sender, AutomationEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed AutomationEventHandler extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationTypes</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Automation.AutomationEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">The object that raised the event.</param>
    <param name="e">Information about the event.</param>
    <summary>Represents the method implemented by the UI Automation client application to handle an event raised by a UI Automation provider.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use an AutomationEventHandler delegate to specify the method that is called by a client to handle [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] events.  
  
 The <xref:System.Windows.Automation.AutomationElement> represented by `sender` might not have any cached properties or patterns, depending on whether the application subscribed to this event while a <xref:System.Windows.Automation.CacheRequest> was active.  
  
   
  
## Examples  
 The following example shows how to subscribe to and handle an event.  
  
 [!code-vb[UIAClient_snip#101](~/add/codesnippet/visualbasic/UIAClient_snip/ClientForm.vb#101)]
 [!code-cs[UIAClient_snip#101](~/add/codesnippet/csharp/CustomElementClient/ClientForm.cs#101)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
</Type>