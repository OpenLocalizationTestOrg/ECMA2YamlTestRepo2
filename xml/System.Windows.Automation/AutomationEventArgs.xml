<Type Name="AutomationEventArgs" FullName="System.Windows.Automation.AutomationEventArgs">
  <TypeSignature Language="C#" Value="public class AutomationEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AutomationEventArgs extends System.EventArgs" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationTypes</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] events that are passed to an <see cref="T:System.Windows.Automation.AutomationEventHandler" /> delegate.</summary>
    <remarks>To be added.</remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutomationEventArgs (System.Windows.Automation.AutomationEvent eventId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Automation.AutomationEvent eventId) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventId" Type="System.Windows.Automation.AutomationEvent" />
      </Parameters>
      <Docs>
        <param name="eventId">The event identifier.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AutomationEventArgs" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code shows how a UI Automation provider might create an<xref:System.Windows.Automation.AutomationEventArgs> and raise the event.  
  
 [!code-cs[UIAFragmentProvider_snip#122](~/add/codesnippet/csharp/UIAFragmentProvider_snip.ElementProvider/ListFragment.cs#122)]
 [!code-vb[UIAFragmentProvider_snip#122](~/add/codesnippet/visualbasic/UIAFragmentProviderVB/ListFragment.vb#122)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EventId">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationEvent EventId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.AutomationEvent EventId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the event identifier.</summary>
        <value>The event identifier.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a client has added event handlers for more than one event using the same <xref:System.Windows.Automation.AutomationEventHandler> instance, EventId can be used to identify the event that the delegate should process.  
  
   
  
## Examples  
 In the following example, the event handler checks the EventId of the event and handles the event accordingly.  
  
 [!code-vb[UIAClient_snip#173](~/add/codesnippet/visualbasic/UIAClient_snip/ClientForm.vb#173)]
 [!code-cs[UIAClient_snip#173](~/add/codesnippet/csharp/CustomElementClient/ClientForm.cs#173)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>