<Type Name="KeyContainerPermissionAccessEntry" FullName="System.Security.Permissions.KeyContainerPermissionAccessEntry">
  <TypeSignature Language="C#" Value="public sealed class KeyContainerPermissionAccessEntry" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit KeyContainerPermissionAccessEntry extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies access rights for specific key containers. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This permission is intended to enable users to easily manage key containers when either a small number of keys is involved, or access is to be granted to only some keys.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyContainerPermissionAccessEntry (System.Security.Cryptography.CspParameters parameters, System.Security.Permissions.KeyContainerPermissionFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.CspParameters parameters, valuetype System.Security.Permissions.KeyContainerPermissionFlags flags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.CspParameters" />
        <Parameter Name="flags" Type="System.Security.Permissions.KeyContainerPermissionFlags" />
      </Parameters>
      <Docs>
        <param name="parameters">A <see cref="T:System.Security.Cryptography.CspParameters" /> object that contains the cryptographic service provider (CSP) parameters.</param>
        <param name="flags">A bitwise combination of the <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> values.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> class, using the specified cryptographic service provider (CSP) parameters and access permissions.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor allows access rights to be assigned for specific key containers identified in a <xref:System.Security.Cryptography.CspParameters> object.  
  
   
  
## Examples  
 The following code example shows the use of the KeyContainerPermissionAccessEntry constructor.  
  
 [!code-cs[System.Security.Permissions.KeyContainerPermission#3](~/add/codesnippet/csharp/c73d5ebe-2b51-40a4-b31f-_1.cs)]
 [!code-cpp[System.Security.Permissions.KeyContainerPermission#3](~/add/codesnippet/cpp/c73d5ebe-2b51-40a4-b31f-_1.cpp)]
 [!code-vb[System.Security.Permissions.KeyContainerPermission#3](~/add/codesnippet/visualbasic/c73d5ebe-2b51-40a4-b31f-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyContainerPermissionAccessEntry (string keyContainerName, System.Security.Permissions.KeyContainerPermissionFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string keyContainerName, valuetype System.Security.Permissions.KeyContainerPermissionFlags flags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyContainerName" Type="System.String" />
        <Parameter Name="flags" Type="System.Security.Permissions.KeyContainerPermissionFlags" />
      </Parameters>
      <Docs>
        <param name="keyContainerName">The name of the key container.</param>
        <param name="flags">A bitwise combination of the <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> values.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> class, using the specified key container name and access permissions.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor allows you to specify access rights for specific key containers identified by name; use an asterisk ("*") to represent all the key containers.  
  
   
  
## Examples  
 The following code example shows the use of the KeyContainerPermissionAccessEntry constructor.  
  
 [!code-cs[System.Security.Permissions.KeyContainerPermission#2](~/add/codesnippet/csharp/cbd63005-8ff3-44be-953b-_1.cs)]
 [!code-cpp[System.Security.Permissions.KeyContainerPermission#2](~/add/codesnippet/cpp/cbd63005-8ff3-44be-953b-_1.cpp)]
 [!code-vb[System.Security.Permissions.KeyContainerPermission#2](~/add/codesnippet/visualbasic/cbd63005-8ff3-44be-953b-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyContainerPermissionAccessEntry (string keyStore, string providerName, int providerType, string keyContainerName, int keySpec, System.Security.Permissions.KeyContainerPermissionFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string keyStore, string providerName, int32 providerType, string keyContainerName, int32 keySpec, valuetype System.Security.Permissions.KeyContainerPermissionFlags flags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyStore" Type="System.String" />
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="providerType" Type="System.Int32" />
        <Parameter Name="keyContainerName" Type="System.String" />
        <Parameter Name="keySpec" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Security.Permissions.KeyContainerPermissionFlags" />
      </Parameters>
      <Docs>
        <param name="keyStore">The name of the key store.</param>
        <param name="providerName">The name of the provider.</param>
        <param name="providerType">The type code for the provider. See the &lt;xref:System.Security.Permissions.KeyContainerPermissionAccessEntry.ProviderType%2A&gt; property for values.</param>
        <param name="keyContainerName">The name of the key container.</param>
        <param name="keySpec">The key specification. See the &lt;xref:System.Security.Permissions.KeyContainerPermissionAccessEntry.KeySpec%2A&gt; property for values.</param>
        <param name="flags">A bitwise combination of the <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> values.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> class with the specified property values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor allows access rights to be assigned for specific key containers. A `keySpec` or `providerType` value of â€“1 represents all key specifications or provider types. A `keyStore`, `providerName`, or `keyContainerName` of "*" represents all key stores, providers, or key containers. A `providerName` or `keyContainerName` that is `null` represents all providers or key containers.  
  
   
  
## Examples  
 The following code example shows the use of the KeyContainerPermissionAccessEntry constructor.  
  
 [!code-cs[System.Security.Permissions.KeyContainerPermission#4](~/add/codesnippet/csharp/323ccea4-2c50-40e8-9276-_1.cs)]
 [!code-cpp[System.Security.Permissions.KeyContainerPermission#4](~/add/codesnippet/cpp/323ccea4-2c50-40e8-9276-_1.cpp)]
 [!code-vb[System.Security.Permissions.KeyContainerPermission#4](~/add/codesnippet/visualbasic/323ccea4-2c50-40e8-9276-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> object to compare with the currentinstance.</param>
        <summary>Determines whether the specified <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> object is equal to the current instance.</summary>
        <returns>
          <see langword="true" /> if the specified <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> is equal to the current <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> object; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Equals method compares the properties of the two <xref:System.Security.Permissions.KeyContainerPermissionAccessEntry> objects to determine if they are equal.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.KeyContainerPermissionFlags Flags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.KeyContainerPermissionFlags Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.KeyContainerPermissionFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key container permissions.</summary>
        <value>A bitwise combination of the <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> values. The default is <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Many of these flags are powerful and permit access to key containers that should only be granted to highly trusted code.  
  
 The most powerful of the flags are <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, and <xref:System.Security.Permissions.KeyContainerPermissionFlags>. For specific threats posed by the use of these flags, see individual flag descriptions.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a hash code for the current instance that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
        <returns>A hash code for the current <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Serves as a hash function for the <xref:System.Security.Permissions.KeyContainerPermissionAccessEntry>, suitable for use in hashing algorithms and data structures such as a hash table.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeyContainerName">
      <MemberSignature Language="C#" Value="public string KeyContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyContainerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key container name.</summary>
        <value>The name of the key container.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use a value of "*" to apply the access entry to all key containers within the specified provider name and provider type.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeySpec">
      <MemberSignature Language="C#" Value="public int KeySpec { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeySpec" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key specification.</summary>
        <value>One of the AT_ values defined in the Wincrypt.h header file.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valid values for this property are AT_KEYEXCHANGE (1) and AT_SIGNATURE (2). The default value is â€“1, representing all possible values.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeyStore">
      <MemberSignature Language="C#" Value="public string KeyStore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyStore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the key store.</summary>
        <value>The name of the key store.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valid values are "User", "Machine", or "*". If `null` is specified, the value is set to "\*".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the provider name.</summary>
        <value>The name of the provider.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An example of a provider name is "Microsoft Enhanced Cryptographic Provider". If `null` is specified, the enhanced cryptographic provider name is used.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProviderType">
      <MemberSignature Language="C#" Value="public int ProviderType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ProviderType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the provider type.</summary>
        <value>One of the PROV_ values defined in the Wincrypt.h header file.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default value is â€“1, representing all possible values.  
  
 The Wincrypt.h header file defines the following values:  
  
-   \#define PROV_RSA_FULL 1  
  
-   \#define PROV_RSA_SIG 2  
  
-   \#define PROV_DSS 3  
  
-   \#define PROV_FORTEZZA 4  
  
-   \#define PROV_MS_EXCHANGE 5  
  
-   \#define PROV_SSL 6  
  
-   \#define PROV_RSA_SCHANNEL 12  
  
-   \#define PROV_DSS_DH 13  
  
-   \#define PROV_EC_ECDSA_SIG 14  
  
-   \#define PROV_EC_ECNRA_SIG 15  
  
-   \#define PROV_EC_ECDSA_FULL 16  
  
-   \#define PROV_EC_ECNRA_FULL 17  
  
-   \#define PROV_DH_SCHANNEL 18  
  
-   \#define PROV_SPYRUS_LYNKS 20  
  
-   \#define PROV_RNG 21  
  
-   \#define PROV_INTEL_SEC 22  
  
-   \#define PROV_REPLACE_OWF 23  
  
-   \#define PROV_RSA_AES 24  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting entry would have unrestricted access.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>