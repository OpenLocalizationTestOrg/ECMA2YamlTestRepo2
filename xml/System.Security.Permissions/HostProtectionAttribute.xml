<Type Name="HostProtectionAttribute" FullName="System.Security.Permissions.HostProtectionAttribute">
  <TypeSignature Language="C#" Value="public sealed class HostProtectionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit HostProtectionAttribute extends System.Security.Permissions.CodeAccessSecurityAttribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Permissions.CodeAccessSecurityAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Delegate, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Allows the use of declarative security actions to determine host protection requirements. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This attribute affects only unmanaged applications that host the common language runtime and implement host protection, such as SQL Server. If the code is run in a client application or on a server that is not host-protected, the attribute "evaporates"; it is not detected and therefore not applied. When applied, the security action results in the creation of a link demand based on the host resources the class or method exposes.  
  
> [!IMPORTANT]
>  The purpose of this attribute is to enforce host-specific programming model guidelines, not security behavior.  Although a link demand is used to check for conformance to programming model requirements, the HostProtectionAttribute is not a security permission.  
  
 If the host does not have programming model requirements, the link demands do not occur.  
  
 This attribute identifies the following:  
  
-   Methods or classes that do not fit the host programming model, but are otherwise benign.  
  
-   Methods or classes that do not fit the host programming model and could lead to destabilizing server-managed user code.  
  
-   Methods or classes that do not fit the host programming model and could lead to a destabilization of the server process itself.  
  
> [!NOTE]
>  If you are creating a class library that is to be called by applications that may execute in a host protected environment, you should apply this attribute to members that expose <xref:System.Security.Permissions.HostProtectionResource> resource categories. The .NET Framework class library members with this attribute cause only the immediate caller to be checked.  Your library member must also cause a check of its immediate caller in the same manner.  
  
> [!NOTE]
>  Do not use the [Ngen.exe (Native Image Generator)](~/add/includes/ajax-current-ext-md.md) to create a native image of assemblies that are protected by the HostProtectionAttribute. In a full-trust environment, the image is always loaded, without regard to the HostProtectionAttribute, and in a partial-trust environment the image is not loaded.  
  
   
  
## Examples  
 The following code example illustrates the use of the HostProtectionAttribute attribute with a variety of <xref:System.Security.Permissions.HostProtectionResource> values.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#1](~/add/codesnippet/csharp/t-system.security.permis_7_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#1](~/add/codesnippet/cpp/t-system.security.permis_7_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#1](~/add/codesnippet/visualbasic/t-system.security.permis_7_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostProtectionAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.HostProtectionAttribute" /> class with default values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a <xref:System.Security.Permissions.HostProtectionAttribute> with all Boolean properties set to `false`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostProtectionAttribute (System.Security.Permissions.SecurityAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.SecurityAction action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
      </Parameters>
      <Docs>
        <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.HostProtectionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor should not be used. It is intended for infrastructure use.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="action" /> is not <see cref="T:System.Security.Permissions.SecurityAction" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreatePermission">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission CreatePermission ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission CreatePermission() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns a new host protection permission.</summary>
        <returns>An <see cref="T:System.Security.IPermission" /> that corresponds to the current attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method should be called only by the security system, never by application code.  
  
 At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission corresponding to the attribute that this method returns.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExternalProcessMgmt">
      <MemberSignature Language="C#" Value="public bool ExternalProcessMgmt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExternalProcessMgmt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether external process management is exposed.</summary>
        <value>
          <see langword="true" /> if external process management is exposed; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Code that exposes external process management might create or destroy other processes.  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the ExternalProcessMgmt property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#5](~/add/codesnippet/csharp/p-system.security.permis_2_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#5](~/add/codesnippet/cpp/p-system.security.permis_2_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#5](~/add/codesnippet/visualbasic/p-system.security.permis_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExternalThreading">
      <MemberSignature Language="C#" Value="public bool ExternalThreading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExternalThreading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether external threading is exposed.</summary>
        <value>
          <see langword="true" /> if external threading is exposed; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Code that exposes external threading creates or manipulates threads other than its own, which might be harmful to the host.  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the ExternalThreading property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/csharp/p-system.security.permis_8_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/cpp/p-system.security.permis_8_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/visualbasic/p-system.security.permis_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MayLeakOnAbort">
      <MemberSignature Language="C#" Value="public bool MayLeakOnAbort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MayLeakOnAbort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether resources might leak memory if the operation is terminated.</summary>
        <value>
          <see langword="true" /> if resources might leak memory on termination; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Code might cause a resource leak on termination, if not protected by a safe handle or some other means of ensuring the release of resources.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.HostProtectionResource Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.HostProtectionResource Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.HostProtectionResource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets flags specifying categories of functionality that are potentially harmful to the host.</summary>
        <value>A bitwise combination of the <see cref="T:System.Security.Permissions.HostProtectionResource" /> values. The default is <see cref="T:System.Security.Permissions.HostProtectionResource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Security.Permissions.HostProtectionResource> flags specify the resources exposed by the method or class that are potentially harmful to the host.  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the Resources property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/csharp/p-system.security.permis_17_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/cpp/p-system.security.permis_17_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/visualbasic/p-system.security.permis_17_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SecurityInfrastructure">
      <MemberSignature Language="C#" Value="public bool SecurityInfrastructure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SecurityInfrastructure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the security infrastructure is exposed.</summary>
        <value>
          <see langword="true" /> if the security infrastructure is exposed; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The use of a <xref:System.Security.Principal.WindowsIdentity> object to impersonate a user is an example of exposing the security infrastructure.  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the SecurityInfrastructure property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#4](~/add/codesnippet/csharp/p-system.security.permis_19_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#4](~/add/codesnippet/cpp/p-system.security.permis_19_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#4](~/add/codesnippet/visualbasic/p-system.security.permis_19_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelfAffectingProcessMgmt">
      <MemberSignature Language="C#" Value="public bool SelfAffectingProcessMgmt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SelfAffectingProcessMgmt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether self-affecting process management is exposed.</summary>
        <value>
          <see langword="true" /> if self-affecting process management is exposed; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Self-affecting process management code might exit the current process, terminating the server.  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the SelfAffectingProcessMgmt property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/csharp/p-system.security.permis_26_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/cpp/p-system.security.permis_26_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/visualbasic/p-system.security.permis_26_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelfAffectingThreading">
      <MemberSignature Language="C#" Value="public bool SelfAffectingThreading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SelfAffectingThreading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether self-affecting threading is exposed.</summary>
        <value>
          <see langword="true" /> if self-affecting threading is exposed; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Self-affecting threading manipulates threads in a way that only affects user code.  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the SelfAffectingThreading property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/csharp/p-system.security.permis_3_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/cpp/p-system.security.permis_3_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/visualbasic/p-system.security.permis_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SharedState">
      <MemberSignature Language="C#" Value="public bool SharedState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SharedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether shared state is exposed.</summary>
        <value>
          <see langword="true" /> if shared state is exposed; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When SharedState is `true`, it indicates that a state is exposed that might be shared between threads.  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the SharedState property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/csharp/p-system.security.permis_15_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/cpp/p-system.security.permis_15_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/visualbasic/p-system.security.permis_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Synchronization">
      <MemberSignature Language="C#" Value="public bool Synchronization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Synchronization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether synchronization is exposed.</summary>
        <value>
          <see langword="true" /> if synchronization is exposed; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the Synchronization property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/csharp/p-system.security.permis_4_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/cpp/p-system.security.permis_4_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/visualbasic/p-system.security.permis_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UI">
      <MemberSignature Language="C#" Value="public bool UI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user interface is exposed.</summary>
        <value>
          <see langword="true" /> if the user interface is exposed; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the UI property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  
  
 [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/csharp/p-system.security.permis_12_1.cs)]
 [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/cpp/p-system.security.permis_12_1.cpp)]
 [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/visualbasic/p-system.security.permis_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>