<Type Name="SecurityPermissionFlag" FullName="System.Security.Permissions.SecurityPermissionFlag">
  <TypeSignature Language="C#" Value="public enum SecurityPermissionFlag" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed SecurityPermissionFlag extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies access flags for the security permission object.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This enumeration has a <xref:System.FlagsAttribute> attribute that allows a bitwise combination of its member values.  
  
 This enumeration is used by <xref:System.Security.Permissions.SecurityPermission>.  
  
> [!CAUTION]
>  Many of these flags are powerful and should only be granted to highly trusted code.  
  
   
  
## Examples  
 The following code example shows the use of the SecurityPermissionFlag enumeration to deny and demand security permissions.  
  
 [!code-cs[System.Security.Permissions.SecurityPermissionAttribute#1](~/add/codesnippet/csharp/t-system.security.permis_24_1.cs)]
 [!code-cpp[System.Security.Permissions.SecurityPermissionAttribute#1](~/add/codesnippet/cpp/t-system.security.permis_24_1.cpp)]
 [!code-vb[System.Security.Permissions.SecurityPermissionAttribute#1](~/add/codesnippet/visualbasic/t-system.security.permis_24_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="AllFlags">
      <MemberSignature Language="C#" Value="AllFlags" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag AllFlags = int32(16383)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The unrestricted state of the permission.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Assertion">
      <MemberSignature Language="C#" Value="Assertion" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag Assertion = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to assert that all this code's callers have the requisite permission for the operation.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BindingRedirects">
      <MemberSignature Language="C#" Value="BindingRedirects" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag BindingRedirects = int32(8192)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Permission to perform explicit binding redirection in the application configuration file. This includes redirection of .NET Framework assemblies that have been unified as well as other assemblies found outside the .NET Framework.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlAppDomain">
      <MemberSignature Language="C#" Value="ControlAppDomain" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlAppDomain = int32(1024)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to create and manipulate an <see cref="T:System.AppDomain" />.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlDomainPolicy">
      <MemberSignature Language="C#" Value="ControlDomainPolicy" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlDomainPolicy = int32(256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to specify domain policy.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlEvidence">
      <MemberSignature Language="C#" Value="ControlEvidence" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlEvidence = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to provide evidence, including the ability to alter the evidence provided by the common language runtime.</summary>
        <threadsafe />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is a powerful permission that should only be granted to highly trusted code.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlPolicy">
      <MemberSignature Language="C#" Value="ControlPolicy" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlPolicy = int32(64)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to view and modify policy.</summary>
        <threadsafe />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is a powerful permission that should only be granted to highly trusted code.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlPrincipal">
      <MemberSignature Language="C#" Value="ControlPrincipal" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlPrincipal = int32(512)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to manipulate the principal object.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlThread">
      <MemberSignature Language="C#" Value="ControlThread" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlThread = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to use certain advanced operations on threads.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Execution">
      <MemberSignature Language="C#" Value="Execution" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag Execution = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Permission for the code to run. Without this permission, managed code will not be executed.</summary>
        <threadsafe />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This flag has no effect when used dynamically with stack modifiers such as <xref:System.Security.CodeAccessPermission.Deny%2A>, <xref:System.Security.CodeAccessPermission.Assert%2A>, and <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Infrastructure">
      <MemberSignature Language="C#" Value="Infrastructure" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag Infrastructure = int32(4096)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Permission to plug code into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NoFlags">
      <MemberSignature Language="C#" Value="NoFlags" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag NoFlags = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>No security access.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemotingConfiguration">
      <MemberSignature Language="C#" Value="RemotingConfiguration" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag RemotingConfiguration = int32(2048)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Permission to configure Remoting types and channels.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SerializationFormatter">
      <MemberSignature Language="C#" Value="SerializationFormatter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag SerializationFormatter = int32(128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to provide serialization services. Used by serialization formatters.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SkipVerification">
      <MemberSignature Language="C#" Value="SkipVerification" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag SkipVerification = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to skip verification of code in this assembly. Code that is unverifiable can be run if this permission is granted.</summary>
        <threadsafe />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is a powerful permission that should be granted only to highly trusted code.  
  
 This flag has no effect when used dynamically with stack modifiers such as <xref:System.Security.CodeAccessPermission.Deny%2A>, <xref:System.Security.CodeAccessPermission.Assert%2A>, and <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnmanagedCode">
      <MemberSignature Language="C#" Value="UnmanagedCode" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.SecurityPermissionFlag UnmanagedCode = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.SecurityPermissionFlag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ability to call unmanaged code.</summary>
        <threadsafe />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Since unmanaged code potentially allows other permissions to be bypassed, this is a dangerous permission that should only be granted to highly trusted code. It is used for such applications as calling native code using PInvoke or using COM interop.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>