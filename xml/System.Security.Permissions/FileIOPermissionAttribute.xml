<Type Name="FileIOPermissionAttribute" FullName="System.Security.Permissions.FileIOPermissionAttribute">
  <TypeSignature Language="C#" Value="public sealed class FileIOPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit FileIOPermissionAttribute extends System.Security.Permissions.CodeAccessSecurityAttribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Permissions.CodeAccessSecurityAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Allows security actions for <see cref="T:System.Security.Permissions.FileIOPermission" /> to be applied to code using declarative security. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Files and directories are specified using absolute paths. When accessing files, a security check is performed when the file is created or opened. The security check is not done again unless the file is closed and reopened. Checking permissions when the file is first accessed minimizes the impact of the security check on application performance because opening a file happens only once, while reading and writing can happen multiple times.  
  
 The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  
  
 The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  
  
> [!CAUTION]
>  `Unrestricted` <xref:System.Security.Permissions.FileIOPermission> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file. To <xref:System.Security.CodeAccessPermission.Deny%2A> access to a file, you must `Deny` all possible paths to the file. For example, if \\\server\share is mapped to the network drive X, to `Deny` access to \\\server\share\file, you must `Deny` \\\server\share\file, X:\file and any other path that you can use to access the file.  
  
   
  
## Examples  
 The following code example demonstrates how to request <xref:System.Security.Permissions.FileIOPermission> by using the FileIOPermissionAttribute class, indicating the only permission that is to be granted to the code.  
  
 [!code-cpp[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_3_1.cpp)]
 [!code-vb[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_3_1.vb)]
 [!code-cs[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_3_1.cs)]  
  
 The following example shows how to demand that the calling code has unrestricted <xref:System.Security.Permissions.FileIOPermission>. You typically make demands in managed libraries (DLLs) to help protect methods or classes from potentially harmful code.  
  
 [!code-cpp[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/cpp/t-system.security.permis_3_2.cpp)]
 [!code-vb[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/visualbasic/t-system.security.permis_3_2.vb)]
 [!code-cs[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/csharp/t-system.security.permis_3_2.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileIOPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.SecurityAction action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
      </Parameters>
      <Docs>
        <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermissionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates several instances of the <xref:System.Security.Permissions.FileIOPermissionAttribute> class to set varying levels of file I/O permissions.  
  
 [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/cpp/b53c5cc8-9649-49f3-9193-_1.cpp)]
 [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/csharp/b53c5cc8-9649-49f3-9193-_1.cs)]
 [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/visualbasic/b53c5cc8-9649-49f3-9193-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="action" /> parameter is not a valid <see cref="T:System.Security.Permissions.SecurityAction" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public string All { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string All" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Please use the ViewAndModify property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets full access for the file or directory that is specified by the string value.</summary>
        <value>The absolute path of the file or directory for full access.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.  
  
   
  
## Examples  
 The following code example sets the All property to grant full access to the specified directory.  
  
 [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/cpp/p-system.security.permis_24_1.cpp)]
 [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/csharp/p-system.security.permis_24_1.cs)]
 [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/visualbasic/p-system.security.permis_24_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The get method is not supported for this property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllFiles">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.FileIOPermissionAccess AllFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the permitted access to all files.</summary>
        <value>A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values that represents the permissions for all files. The default is <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property gets or sets the permitted access to all files on the local computer and network drives.  
  
 An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllLocalFiles">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.FileIOPermissionAccess AllLocalFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the permitted access to all local files.</summary>
        <value>A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values that represents the permissions for all local files. The default is <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Local files are files contained on the local computer. Any files that are not accessed through a network drive are local files.  
  
 An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public string Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets append access for the file or directory that is specified by the string value.</summary>
        <value>The absolute path of the file or directory for append access.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.  
  
   
  
## Examples  
 The following code example sets the Append property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  
  
 [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/cpp/p-system.security.permis_6_1.cpp)]
 [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/csharp/p-system.security.permis_6_1.cs)]
 [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/visualbasic/p-system.security.permis_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangeAccessControl">
      <MemberSignature Language="C#" Value="public string ChangeAccessControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChangeAccessControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the file or directory in which access control information can be changed.</summary>
        <value>The absolute path of the file or directory in which access control information can be changed.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.  
  
> [!IMPORTANT]
>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change an ACL is an important permission and should be granted with caution.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreatePermission">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission CreatePermission ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission CreatePermission() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns a new <see cref="T:System.Security.Permissions.FileIOPermission" />.</summary>
        <returns>A <see cref="T:System.Security.Permissions.FileIOPermission" /> that corresponds to this attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method should be called only by the security system, never by application code.  
  
 At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The path information for a file or directory for which access is to be secured contains invalid characters or wildcard specifiers.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PathDiscovery">
      <MemberSignature Language="C#" Value="public string PathDiscovery { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PathDiscovery" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the file or directory to which to grant path discovery.</summary>
        <value>The absolute path of the file or directory.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Path discovery controls access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.  
  
> [!NOTE]
>  For performance reasons, PathDiscovery should be granted only to directories, not to files. For example, PathDiscovery permission should be granted to paths such as C:\test and C:\test\\, not to files such as C:\test\example.txt.  
  
 This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.  
  
   
  
## Examples  
 The following code example sets the PathDiscovery property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  
  
 [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/cpp/p-system.security.permis_31_1.cpp)]
 [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/csharp/p-system.security.permis_31_1.cs)]
 [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/visualbasic/p-system.security.permis_31_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public string Read { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Read" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets read access for the file or directory specified by the string value.</summary>
        <value>The absolute path of the file or directory for read access.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.  
  
   
  
## Examples  
 The following example sets the Read property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  
  
 [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/cpp/p-system.security.permis_20_1.cpp)]
 [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/csharp/p-system.security.permis_20_1.cs)]
 [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/visualbasic/p-system.security.permis_20_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ViewAccessControl">
      <MemberSignature Language="C#" Value="public string ViewAccessControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ViewAccessControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the file or directory in which access control information can be viewed.</summary>
        <value>The absolute path of the file or directory in which access control information can be viewed.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.  
  
> [!IMPORTANT]
>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to view an ACL is an important permission and should be granted with caution.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ViewAndModify">
      <MemberSignature Language="C#" Value="public string ViewAndModify { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ViewAndModify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the file or directory in which file data can be viewed and modified.</summary>
        <value>The absolute path of the file or directory in which file data can be viewed and modified.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A> properties for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories. The access rights are for file data only; they do not include the access control properties <xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A> and <xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A>.  
  
> [!NOTE]
>  The `get` accessor is provided for C# compiler compatibility. The C# compiler requires attribute properties to be read/write.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <see langword="get" /> accessor is called. The accessor is provided only for C# compiler compatibility.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public string Write { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Write" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets write access for the file or directory specified by the string value.</summary>
        <value>The absolute path of the file or directory for write access.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.  
  
   
  
## Examples  
 The following example sets the Write property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  
  
 [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/cpp/p-system.security.permis_18_1.cpp)]
 [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/csharp/p-system.security.permis_18_1.cs)]
 [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/visualbasic/p-system.security.permis_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>