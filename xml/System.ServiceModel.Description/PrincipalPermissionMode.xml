<Type Name="PrincipalPermissionMode" FullName="System.ServiceModel.Description.PrincipalPermissionMode">
  <TypeSignature Language="C#" Value="public enum PrincipalPermissionMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PrincipalPermissionMode extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Sets the mode for authorization checks when using the <see cref="T:System.Security.Permissions.PrincipalPermissionAttribute" /> to control access to a method.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When applying the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a method, this mode specifies which set of roles to use when authorizing access. By default, the attribute uses Windows groups (such as `Administrator` or `Users`) to specify the role to which the user must belong.  
  
 To set the mode programmatically, create an instance of the `ServiceHost` class, then find the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> in its collection of behaviors, and set the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> to the appropriate enumeration. The following example sets the property to UseAspNetRoles.  
  
 [!code-cs[PrincipalPermissionMode#1](~/add/codesnippet/csharp/t-system.servicemodel.de_16_1.cs)]
 [!code-vb[PrincipalPermissionMode#1](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_1.vb)]  
  
 You can also set the behavior in configuration by adding a [\&lt;serviceAuthorization\&gt;](../Topic/%3CserviceAuthorization%3E%20element.md) to the [\&lt;serviceBehaviors\&gt;](../Topic/%3CserviceBehaviors%3E.md) of a configuration file, as shown in the following code.  
  
 [!code-cs[PrincipalPermissionMode#10](~/add/codesnippet/csharp/t-system.servicemodel.de_16_2.cs)]
 [!code-vb[PrincipalPermissionMode#10](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_2.vb)]  
  
 The enumeration affects how the <xref:System.Security.Permissions.PrincipalPermissionAttribute> attribute authorizes a user when it is applied to a method. The following example applies the attribute to a method and demands that the user belong to the Users group on the computer. This code works only when the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> is set to `UseWindowsGroup` (the default setting).  
  
 [!code-cs[PrincipalPermissionMode#2](~/add/codesnippet/csharp/t-system.servicemodel.de_16_3.cs)]
 [!code-vb[PrincipalPermissionMode#2](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_3.vb)]  
  
## UseAspNetRoles  
 The UseAspNetRoles value is used for all credential types. This mode enables [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] to use the ASP.NET role provider to make authorization decisions.  
  
 When the credential for a service is an X.509 certificate, you can set the `Name` property of the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a string that consists of the concatenated values of the Subject field and the Thumbprint field, as shown in the following example.  
  
 [!code-cs[PrincipalPermissionMode#3](~/add/codesnippet/csharp/t-system.servicemodel.de_16_4.cs)]
 [!code-vb[PrincipalPermissionMode#3](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_4.vb)]  
  
 The concatenated string consists of the subject and thumbprint values separated by a semicolon and a space.  
  
 It is also possible for a certificate to have a Subject field set to a null string. In that case, you can set the `Name` property to a semicolon followed by a space and then the thumbprint, as shown in the following example.  
  
 [!code-cs[PrincipalPermissionMode#4](~/add/codesnippet/csharp/t-system.servicemodel.de_16_5.cs)]
 [!code-vb[PrincipalPermissionMode#4](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_5.vb)]  
  
 If an ASP.NET role provider is present, you can also set the <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> property to a role in the database. By default, the database is represented by the <xref:System.Web.Security.SqlRoleProvider>. You can also set a custom role provider with the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A> property of the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> class. The following code sets the role to `Administrators`. Note that the role provider must map the user account to that role.  
  
 [!code-cs[PrincipalPermissionMode#13](~/add/codesnippet/csharp/t-system.servicemodel.de_16_6.cs)]
 [!code-vb[PrincipalPermissionMode#13](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_6.vb)]  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] the ASP.NET Role provider, see [How To: Use Role Manager in ASP.NET 2.0](http://go.microsoft.com/fwlink/?LinkId=96692).  
  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] using [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] and the role provider, see [How to: Use the ASP.NET Role Provider with a Service](~/add/includes/ajax-current-ext-md.md).  
  
## Custom  
 When the property is set to Custom, you must also provide a custom class that implements the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class. This class is responsible for providing the caller's `IPrincipal` representation inside the <xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A> collection. It must store the `IPrincipal` instance to the properties collection using the "Principal" string key, as shown in the following example.  
  
```  
evaluationContext.Properties["Principal"]=new CustomPrincipal(identity);  
```  
  
## Background  
 The role-based security in [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] enables applications to specify authorizations through code. By specifying the <xref:System.Security.Permissions.PrincipalPermission> demand, the <xref:System.Threading.Thread.CurrentPrincipal%2A> must satisfy the `PrincipalPermission` requirement. For example, that the user must be in a specific role or group. Otherwise, the thread is not authorized to execute the code, which results in an exception. [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] provides a set of PrincipalPermissionMode selections to specify the <xref:System.Threading.Thread.CurrentPrincipal%2A> based on <xref:System.Security.SecurityContext> accordingly.  
  
   
  
## Examples  
 The following example shows how to specify UseAspNetRoles.  
  
 [!code-cs[PrincipalPermissionMode#7](~/add/codesnippet/csharp/t-system.servicemodel.de_16_7.cs)]
 [!code-vb[PrincipalPermissionMode#7](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_7.vb)]  
  
 The following example shows how to specify Custom.  
  
 [!code-cs[PrincipalPermissionMode#8](~/add/codesnippet/csharp/t-system.servicemodel.de_16_8.cs)]
 [!code-vb[PrincipalPermissionMode#8](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_8.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Always">
      <MemberSignature Language="C#" Value="Always" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode Always = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Always enables the user to specify a &lt;xref:System.Security.Principal.IPrincipal&gt; class for &lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Custom">
      <MemberSignature Language="C#" Value="Custom" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode Custom = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables the user to specify a custom &lt;xref:System.Security.Principal.IPrincipal&gt; class for &lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode None = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt; is not set.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UseAspNetRoles">
      <MemberSignature Language="C#" Value="UseAspNetRoles" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode UseAspNetRoles = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt; is set based on the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] role provider (&lt;xref:System.Web.Security.RoleProvider&gt;).</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UseWindowsGroups">
      <MemberSignature Language="C#" Value="UseWindowsGroups" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode UseWindowsGroups = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt; is set based on Windows (<see cref="T:System.Security.Principal.WindowsPrincipal" />). If the user identity is not associated with a Windows account, anonymous Windows is used.</summary>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>