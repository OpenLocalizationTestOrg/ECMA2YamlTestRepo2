<Type Name="IPolicyImportExtension" FullName="System.ServiceModel.Description.IPolicyImportExtension">
  <TypeSignature Language="C#" Value="public interface IPolicyImportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyImportExtension" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Defines a method for objects that import custom policy assertions about bindings.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implement the IPolicyImportExtension interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements. Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.  
  
 Unlike its counterpart, <xref:System.ServiceModel.Description.IPolicyExportExtension>, IPolicyImportExtension does not require implementation by a <xref:System.ServiceModel.Channels.BindingElement> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> constructor.  
  
 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.  
  
 An IPolicyImportExtension implementation performs the following steps:  
  
1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.  
  
2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.  
  
3.  Modify the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.  
  
 Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.  
  
> [!IMPORTANT]
>  A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer. It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.  
  
 Custom <xref:System.ServiceModel.Description.MetadataImporter> implementations must implement their own <xref:System.ServiceModel.Description.PolicyConversionContext> object to extract the policy assertions attached to the custom metadata format.  
  
 If you want to export and import custom WSDL elements that are not policy assertions, see <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName> and <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>.  
  
> [!NOTE]
>  You can use custom policy importers and exporters with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/add/includes/ajax-current-ext-md.md) by using the same configuration elements in a configuration file and the `/svcutilConfig:<configFile>` option.  
  
   
  
## Examples  
 The following code example shows the use of the <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method to locate, return, and remove the assertion in one step.  
  
 [!code-cs[CustomPolicySample#1](~/add/codesnippet/csharp/custompolicysample.client/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/add/codesnippet/visualbasic/custompolicysample.client/policyimporter.vb#1)]  
  
 The following code example shows the client application configuration file to load the custom policy importer when the <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=fullName> is invoked.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> to download and resolve metadata into description objects.  
  
 [!code-vb[CustomPolicySample#10](~/add/codesnippet/visualbasic/custompolicysample.client/client.vb#10)]
 [!code-cs[CustomPolicySample#10](~/add/codesnippet/csharp/custompolicysample.client/client.cs#10)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ImportPolicy">
      <MemberSignature Language="C#" Value="public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportPolicy(class System.ServiceModel.Description.MetadataImporter importer, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.ServiceModel.Description.MetadataImporter" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" />
      </Parameters>
      <Docs>
        <param name="importer">The <see cref="T:System.ServiceModel.Description.MetadataImporter" /> object in use.</param>
        <param name="context">The <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> that contains both the policy assertions that can be imported and the collections of binding elements to which implementing binding elements can be added.</param>
        <summary>Defines a method that can import custom policy assertions and add implementing binding elements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implement the `ImportPolicy` method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion. Typically, a policy importer responds to finding a custom policy assertion by configuring or inserting a binding element into the binding being imported.  
  
 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] passes two objects to the ImportPolicy method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.  
  
 An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:  
  
1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.  
  
2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.  
  
3.  Modifies the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.  
  
 Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.  
  
   
  
## Examples  
 The following code example shows the use of the <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method to locate, return, and remove the assertion in one step.  
  
 [!code-cs[CustomPolicySample#1](~/add/codesnippet/csharp/custompolicysample.client/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/add/codesnippet/visualbasic/custompolicysample.client/policyimporter.vb#1)]  
  
 The following code example shows the client application configuration file to load the custom policy importer when the <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=fullName> is invoked.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> to download and resolve metadata into description objects.  
  
 [!code-vb[CustomPolicySample#10](~/add/codesnippet/visualbasic/custompolicysample.client/client.vb#10)]
 [!code-cs[CustomPolicySample#10](~/add/codesnippet/csharp/custompolicysample.client/client.cs#10)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>