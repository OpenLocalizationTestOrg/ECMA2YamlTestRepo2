<Type Name="ServiceThrottlingBehavior" FullName="System.ServiceModel.Description.ServiceThrottlingBehavior">
  <TypeSignature Language="C#" Value="public class ServiceThrottlingBehavior : System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceThrottlingBehavior extends System.Object implements class System.ServiceModel.Description.IServiceBehavior" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Description.IServiceBehavior</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Configures run-time throughput settings that enable you to tune service performance.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ServiceThrottlingBehavior class to control various throughput settings that help prevent your application from running out of memory.  
  
 The <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentCalls%2A> property limits the number of messages that currently process across a <xref:System.ServiceModel.ServiceHost>.  
  
 The <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentInstances%2A> property limits the number of <xref:System.ServiceModel.InstanceContext> objects that execute at one time across a <xref:System.ServiceModel.ServiceHost>.  
  
 The <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentSessions%2A> property limits the number of sessions a <xref:System.ServiceModel.ServiceHost> object can accept.  
  
 Because run-time load balancing requires experience running the application, using the ServiceThrottlingBehavior through an application configuration file is the most common method of modifying execution to maximize service performance.  
  
> [!NOTE]
>  A trace is written every time the value of these properties is reached. The first trace is written as a warning.  
  
 You can also set the values of this attribute by using the [\&lt;serviceThrottling\&gt;](../Topic/%3CserviceThrottling%3E.md) element in an application configuration file.  
  
   
  
## Examples  
 The following code example shows the use of ServiceThrottlingBehavior from an application configuration file that sets the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentSessions%2A>, <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentCalls%2A>, and <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentInstances%2A> properties to 1 as an example. Real-world experience determines what the optimal settings are for any particular application.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceThrottlingBehavior ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ServiceThrottlingBehavior" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the constructor when adding a configured <xref:System.ServiceModel.Description.ServiceThrottlingBehavior>programmatically.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentCalls">
      <MemberSignature Language="C#" Value="public int MaxConcurrentCalls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentCalls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies the maximum number of messages actively processing across a <see cref="T:System.ServiceModel.ServiceHost" />.</summary>
        <value>The upper limit of active messages in the service. The default is 16 times the processor count.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MaxConcurrentCalls property specifies the maximum number of messages actively processing across a <xref:System.ServiceModel.ServiceHost> object. Each channel can have one pending message that does not count against the value of MaxConcurrentCalls until [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] begins to process it.  
  
 You can also set the values of this attribute by using the [\&lt;serviceThrottling\&gt;](../Topic/%3CserviceThrottling%3E.md) element in an application configuration file.  
  
> [!WARNING]
>  MaxConcurrentCalls should be set to less than the SQL connection pool size in queued scenarios.  
  
   
  
## Examples  
 The following code example shows the use of <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> from an application configuration file that sets the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentSessions%2A>, MaxConcurrentCalls, and <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentInstances%2A> properties to 1 as an example. Real-world experience determines what the optimal settings are for any particular application.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentInstances">
      <MemberSignature Language="C#" Value="public int MaxConcurrentInstances { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentInstances" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies the maximum number of &lt;xref:System.ServiceModel.InstanceContext&gt; objects in the service that can execute at one time.</summary>
        <value>The maximum number of &lt;xref:System.ServiceModel.InstanceContext&gt; objects in the service at one time. The default is the sum of the value of &lt;xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentSessions%2A&gt; and the value of &lt;xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentCalls%2A&gt;..</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MaxConcurrentInstances property specifies the maximum number of <xref:System.ServiceModel.InstanceContext> objects in the service. It is important to keep in mind the relationship between the MaxConcurrentInstances property and the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> property. If <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> is <xref:System.ServiceModel.InstanceContextMode>, the resulting value is the total number of sessions. If <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> is <xref:System.ServiceModel.InstanceContextMode>, the resulting value is the number of concurrent calls. If a message arrives while the maximum number of <xref:System.ServiceModel.InstanceContext> objects already exist, the message is held until an <xref:System.ServiceModel.InstanceContext> object closes.  
  
 You can also set the values of this attribute by using the [\&lt;serviceThrottling\&gt;](../Topic/%3CserviceThrottling%3E.md) element in an application configuration file.  
  
   
  
## Examples  
 The following code example shows the use of <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> from an application configuration file that sets the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentSessions%2A>, <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentCalls%2A> and MaxConcurrentInstances properties to 1 as an example. Real-world experience determines what the optimal settings are for any particular application.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentSessions">
      <MemberSignature Language="C#" Value="public int MaxConcurrentSessions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentSessions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies the maximum number of sessions a <see cref="T:System.ServiceModel.ServiceHost" /> object can accept at one time.</summary>
        <value>The maximum number of sessions a service host accepts. The default is 100 times the processor count.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MaxConcurrentSessions property specifies the maximum number of sessions a <xref:System.ServiceModel.ServiceHost> object can accept. It is important to understand that sessions in this case does not mean only channels that support reliable sessions (for example, <xref:System.ServiceModel.NetNamedPipeBinding?displayProperty=fullName> supports sessions but does not include reliable sessions).  
  
 Each listener object can have one pending channel session that does not count against the value of MaxConcurrentSessions until [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] accepts the channel session and begins processing messages on it. This property is most useful in scenarios that make use of sessions.  
  
 When this property is set to a value less than the number of client threads, the requests from multiple clients may get queued in the same socket connection. The requests from the client that has not created a session with the service will be blocked till the service closes its session with the other clients if number of open sessions on the service has reached `MaxConcurrentSessions`. The client requests that are not served get timed out and the service closes the session abruptly.  
  
 To avoid this situation, run the client threads from different app domains so that the request messages go into different socket connections.  
  
 You can also set the values of this attribute by using the [\&lt;serviceThrottling\&gt;](../Topic/%3CserviceThrottling%3E.md) element in an application configuration file.  
  
   
  
## Examples  
 The following code example shows the use of <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> from an application configuration file that sets the MaxConcurrentSessions, <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentCalls%2A>, and <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentInstances%2A> properties to 1 as an example. Real-world experience determines what the optimal settings are for any particular application.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IServiceBehavior.AddBindingParameters">
      <MemberSignature Language="C#" Value="void IServiceBehavior.AddBindingParameters (System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(class System.ServiceModel.Description.ServiceDescription description, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="parameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="description">The service description.</param>
        <param name="serviceHostBase">The host for the service.</param>
        <param name="endpoints">The endpoints exposed by the service.</param>
        <param name="parameters">The binding parameters to be configured to support the service behavior.</param>
        <summary>Configures the bindings to support the service behavior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implements the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="void IServiceBehavior.ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription description, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="description">The service description to be configured.</param>
        <param name="serviceHostBase">The host for the service.</param>
        <summary>Configures the service to support the service behavior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implements the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IServiceBehavior.Validate">
      <MemberSignature Language="C#" Value="void IServiceBehavior.Validate (System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IServiceBehavior.Validate(class System.ServiceModel.Description.ServiceDescription description, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="description">The service description to be validated by the service behavior.</param>
        <param name="serviceHostBase">The service host to be validated by the service behavior.</param>
        <summary>Validates that the service and host can support the service behavior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implements the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>