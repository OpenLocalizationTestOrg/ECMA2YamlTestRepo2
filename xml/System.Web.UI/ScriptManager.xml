<Type Name="ScriptManager" FullName="System.Web.UI.ScriptManager">
  <TypeSignature Language="C#" Value="public class ScriptManager : System.Web.UI.Control, System.Web.UI.IPostBackDataHandler, System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ScriptManager extends System.Web.UI.Control implements class System.Web.UI.IPostBackDataHandler, class System.Web.UI.IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Scripts")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(EmbeddedResourceFinder), "System.Web.Resources.ScriptManager.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages ASP.NET Ajax script libraries and script files, partial-page rendering, and client proxy class generation for Web and application services.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In this topic:  
  
-   [Introduction](#introduction)  
  
-   [Partial-Page Rendering](#partial_page_rendering)  
  
-   [Using the ScriptManager Control with Master Pages, User Controls, and Other Child Components](#using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components)  
  
-   [Script Management and Registration](#script_management_and_registration)  
  
-   [Web Service References](#web_service_references)  
  
-   [Localization](#localization)  
  
-   [Error Handling](#error_handling)  
  
-   [Declarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 The ScriptManager control is central to Ajax functionality in ASP.NET. The control manages all ASP.NET Ajax resources on a page. This includes downloading [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] scripts to the browser and coordinating partial-page updates that are enabled by using <xref:System.Web.UI.UpdatePanel> controls. In addition, the ScriptManager control enables you to do the following:  
  
-   Register script that is compatible with partial-page updates. In order to manage dependencies between your script and the core library, any script that you register is loaded after the [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] script.  
  
-   Specify whether release or debug scripts are sent to the browser.  
  
-   Provide access to Web service methods from script by registering Web services with the ScriptManager control.  
  
-   Provide access to ASP.NET authentication, role, and profile application services from client script by registering these services with the ScriptManager control.  
  
-   Enable culture-specific display of ECMAScript (JavaScript) , , and  functions in the browser.  
  
-   Access localization resources for embedded script files or for stand-alone script files by using the <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> property of the <xref:System.Web.UI.ScriptReference> control.  
  
-   Register server controls that implement the <xref:System.Web.UI.IExtenderControl> or <xref:System.Web.UI.IScriptControl> interfaces with the ScriptManager control so that script required by client components and behaviors is rendered.  
  
<a name="partial_page_rendering"></a>   
## Partial-Page Rendering  
 The ability of an ASP.NET page to support partial-page rendering is controlled by the following factors:  
  
-   The ScriptManager control's <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> property must be `true` (the default value).  
  
-   There must be at least one <xref:System.Web.UI.UpdatePanel> control on the page.  
  
-   The <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> property must be `true` (the default value). If the <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> property is not set explicitly, its value is based on browser capabilities.  
  
 You can override the value of the <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> property at run time during or before the page's <xref:System.Web.UI.Control.Init> event. If you try to change this property after the page's <xref:System.Web.UI.Control.Init> event has occurred, an <xref:System.InvalidOperationException> exception is thrown.  
  
 When partial-page rendering is supported, the ScriptManager control renders script to enable asynchronous postbacks and partial-page updates. The regions of the page to be updated are designated by using <xref:System.Web.UI.UpdatePanel> controls. The ScriptManager control handles the asynchronous postbacks and refreshes only the regions of the page that have to be updated. For more information about partial-page rendering, see [Partial-Page Rendering Overview](~/add/includes/ajax-current-ext-md.md). For more information about the conditions that cause an update, see [UpdatePanel Control Overview](~/add/includes/ajax-current-ext-md.md).  
  
<a name="using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components"></a>   
## Using the ScriptManager Control with Master Pages, User Controls, and Other Child Components  
 A page can contain only one ScriptManager control in its hierarchy. To register services and scripts for nested pages, user controls, or components when the parent page already has a ScriptManager control, use the <xref:System.Web.UI.ScriptManagerProxy> control. For more information, see [Using the UpdatePanel Control with Master Pages](~/add/includes/ajax-current-ext-md.md)  
  
<a name="script_management_and_registration"></a>   
## Script Management and Registration  
 The ScriptManager control enables you to register script that is then rendered as part of the page. The ScriptManager control registration methods can be broken into the following three categories:  
  
-   Registration methods that guarantee that script dependencies on the [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] are maintained.  
  
-   Registration methods that are not dependent on the [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)], but that are compatible with <xref:System.Web.UI.UpdatePanel> controls.  
  
-   Registration methods that support working with <xref:System.Web.UI.UpdatePanel> controls.  
  
 For more information about how to create and use Ajax script in ASP.NET, see [Creating Custom Client Script by Using the Microsoft Ajax Library](~/add/includes/ajax-current-ext-md.md).  
  
### Registering Script That Is Dependent on the Microsoft Ajax Library  
 You can use the following methods to register script files in a way that guarantees that any dependencies on the [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] are maintained.  
  
|Method|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A>|Registers a server control that implements the <xref:System.Web.UI.IScriptControl> interface that is used to define a  client object. The ScriptManager control renders script that supports the client object.|  
|<xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A>|Registers a server control that implements the <xref:System.Web.UI.IExtenderControl> interface that is used to define a  client object. The ScriptManager control renders script that supports the client object.|  
  
### Registering Partial-Page Update Compatible Scripts  
 You can use the following methods to register script files that are not dependent on the [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] but that are compatible with <xref:System.Web.UI.UpdatePanel> controls. These methods correspond to similar methods of the <xref:System.Web.UI.ClientScriptManager> control. If you are rendering script for use inside an <xref:System.Web.UI.UpdatePanel> control, make sure that you call the methods of the ScriptManager control.  
  
|Method|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A>|Adds a value to a JavaScript array. If the array does not exist, it is created.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A>|Renders a `script` element after the page's opening `<form>` tag. The script is specified as a string parameter.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A>|Renders a `script` element after the page's opening `<form>` tag. The script content is specified by setting the `src` attribute to a URL that points to a script file.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A>|Renders a `script` element after the page's opening `<form>` tag. The script content is specified with a resource name in an assembly. The `src` attribute is automatically populated with a URL by a call to an HTTP handler that retrieves the named script from the assembly.|  
|<xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>|Renders a custom name/value attribute pair (an expando) in the markup for a specified control.|  
|<xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A>|Renders a hidden field.|  
|<xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>|Registers a script that is executed in response to the `form` element's `submit` event. The `onSubmit` attribute references the specified script.|  
|<xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>|Renders a startup script block just before the page's closing `</form>` tag. The script to render is specified as a string parameter.|  
  
 When you register methods, you specify a type/key pair for that script. If a script with the same type/key pair is already registered, a new script is not registered. Similarly, if you register a script with a type/resource name pair that already exists, the `script` element that references the resource is not added again. When you register an expando attribute of a previously registered attribute, an exception is thrown. Duplicate registration of array values is allowed.  
  
 When you call the <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> or the <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> method, avoid registering script that executes inline functions. Instead, register script that contains function definitions like event handlers or custom class definitions for your application.  
  
### Registration Methods for UpdatePanel Controls  
 You can use the following methods to customize partial-page updates when you use <xref:System.Web.UI.UpdatePanel> controls.  
  
|Method|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>|Registers a control as a trigger for asynchronous postbacks.|  
|<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A>|Sends custom data to controls during partial-page rendering.|  
|<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>|Registers a dispose script for a control that is inside an <xref:System.Web.UI.UpdatePanel> control. The script is executed when the <xref:System.Web.UI.UpdatePanel> control is updated or deleted. The dispose method is used for client components that are part of the [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] and that have to free resources when a component is no longer used.|  
|<xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A>|Registers a control as a trigger for a full postback. This method is used for controls inside an <xref:System.Web.UI.UpdatePanel> control that would otherwise perform asynchronous postbacks.|  
  
<a name="web_service_references"></a>   
## Web Service References  
 You can register a Web service to be called from client script by creating a <xref:System.Web.UI.ServiceReference> object and adding it to the <xref:System.Web.UI.ScriptManager.Services%2A> collection of the ScriptManager control. ASP.NET generates a client proxy object for each <xref:System.Web.UI.ServiceReference> object in the <xref:System.Web.UI.ScriptManager.Services%2A> collection. You can programmatically add <xref:System.Web.UI.ServiceReference> objects to the <xref:System.Web.UI.ScriptManager.Services%2A> collection to register Web services at run time.  
  
 For more information about how to access Web services in script, see [Exposing Web Services to Client Script in ASP.NET AJAX](http://msdn.microsoft.com/en-us/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8) and [Calling Web Services from Client Script in ASP.NET AJAX](http://msdn.microsoft.com/en-us/fc06c224-f01a-45be-94af-bd71afbc07b0).  
  
<a name="localization"></a>   
## Localization  
 The ScriptManager control generates references in the rendered page that point to the appropriate localized script files, which are either script files embedded in assemblies or stand-alone script files.  
  
 When the <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> property is set to `true`, the ScriptManager control retrieves localized resources (such as localized strings) for the current culture, if they exist. The ScriptManager control provides the following functionality for using localized resources:  
  
-   **Script files that are embedded in an assembly**. The ScriptManager control determines which culture-specific or fallback-culture script file to send to the browser. It does this by using the culture-specific <xref:System.Resources.NeutralResourcesLanguageAttribute> assembly attribute, the resources packaged with the assembly, and the UI culture of the browser (if any).  
  
-   **Stand-alone script files**. The ScriptManager control defines the list of UI cultures that are supported by using the <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> property of the <xref:System.Web.UI.ScriptReference> object.  
  
-   **In debug mode**. The ScriptManager control tries to render a culture-specific script file that contains debug information. For example, if the page is in debug mode and the current culture is set to en-MX, the control renders a script file that has a name such as `scriptname`.en-MX.debug.js, if the file exists. If the file does not exist, the debug file for the appropriate fallback culture is rendered  
  
 For more information about how to localize resources, see [Localizing Resources for Component Libraries Overview](~/add/includes/ajax-current-ext-md.md).  
  
<a name="error_handling"></a>   
## Error Handling  
 When a page error occurs during asynchronous postbacks, the <xref:System.Web.UI.ScriptManager.AsyncPostBackError> event is raised. The way in which errors on the server are sent to the client depends on the <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> property, the <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> property, and the custom errors section of the Web.config file. For more information, see [Customizing Error Handling for UpdatePanel Controls](~/add/includes/ajax-current-ext-md.md).  
  
<a name="declarative_syntax"></a>   
## Declarative Syntax  
  
```  
<asp:ScriptManager  
    AllowCustomErrorsRedirect="True|False"  
    AsyncPostBackErrorMessage="string"  
    AsyncPostBackTimeout="integer"  
    AuthenticationService-Path="uri"  
    EnablePageMethods="True|False"  
    EnablePartialRendering="True|False"  
    EnableScriptGlobalization="True|False"  
    EnableScriptLocalization="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    LoadScriptsBeforeUI="True|False"  
    OnAsyncPostBackError="AsyncPostBackError event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnResolveScriptReference="ResolveScriptReference event handler"  
    OnUnload="Unload event handler"  
    ProfileService-LoadProperties="string"  
    ProfileService-Path="uri"  
    RoleService-LoadRoles="True|False"  
    RoleService-Path="uri"  
    runat="server"  
    ScriptMode="Auto|Inherit|Debug|Release"  
    ScriptPath="string"  
    SkinID="string"  
    SupportsPartialRendering="True|False"  
    Visible="True|False"  
>  
        <AuthenticationService  
            Path="uri"  
        />  
        <ProfileService  
            LoadProperties="string"  
            Path="uri"  
        />  
        <RoleService  
            LoadRoles="True|False"  
            Path="uri"  
        />  
        <Scripts>  
            <asp:ScriptReference  
                Assembly="string"  
                IgnoreScriptPath="True|False"  
                Name="string"  
                NotifyScriptLoaded="True|False"  
                Path="string"  
                ResourceUICultures="string"  
                ScriptMode="Auto|Debug|Inherit|Release"  
            />  
        </Scripts>  
        <Services>  
            <asp:ServiceReference  
                InlineScript="True|False"  
                Path="string"  
            />  
        </Services>  
</asp:ScriptManager>  
```  
  
   
  
## Examples  
 The following examples show different scenarios for using the ScriptManager control.  
  
 **Enabling Partial-Page Updates**  
  
 The following example shows how to use the ScriptManager control to enable partial-page updates. In this example, a <xref:System.Web.UI.WebControls.Calendar> and a <xref:System.Web.UI.WebControls.DropDownList> control are inside an <xref:System.Web.UI.UpdatePanel> control. By default, the value of the <xref:System.Web.UI.UpdatePanel.UpdateMode%2A> property is <xref:System.Web.UI.UpdatePanelUpdateMode>, and the value of the <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> property is `true`. Therefore, child controls of the panel cause an asynchronous postback.  
  
 [!code-vb[System.Web.UI.UpdatePanel#1](~/add/codesnippet/visualbasic/t-system.web.ui.scriptma_1.aspx)]
 [!code-cs[System.Web.UI.UpdatePanel#1](~/add/codesnippet/csharp/t-system.web.ui.scriptma_1.aspx)]  
  
 **Handling Partial-Page Update Errors and Registering Script**  
  
 The following example shows how to provide custom error handling during partial-page updates. By default, when an error occurs during partial-page updates, a JavaScript message box is displayed. This example demonstrates how to use custom error handling by providing a handler for the <xref:System.Web.UI.ScriptManager.AsyncPostBackError> event, and by setting the <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> property in the event handler. You can also set the <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> property to specify how the custom errors section of the Web.config file is used when an error occurs during partial-page updates. In this example, the default value of the <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> property is used. This means that if the Web.config file contains a  element, that element determines how errors are displayed. For more information, see [customErrors Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/288c32e2-df1f-4548-abda-de6b4cb989a6).  
  
 [!code-vb[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/add/codesnippet/visualbasic/t-system.web.ui.scriptma_2.aspx)]
 [!code-cs[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/add/codesnippet/csharp/t-system.web.ui.scriptma_2.aspx)]  
  
 **Globalizing the Date and Time That Are Displayed in the Browser**  
  
 The following example shows how to set the <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> property so that client script can display a culture-specific date and time in the browser. In the example, the `Culture` attribute of the  directive is set to `auto`. As a result, the first language that is specified in the current browser settings determines the culture and UI culture for the page. For more information, see [How to: Set the Culture and UI Culture for ASP.NET Web Page Globalization](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/add/codesnippet/visualbasic/t-system.web.ui.scriptma_3.aspx)]
 [!code-cs[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/add/codesnippet/csharp/t-system.web.ui.scriptma_3.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.ScriptManager" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor initializes the internal fields that are used by the <xref:System.Web.UI.ScriptManager> control to track page, control, and deployment information.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (System.Collections.Specialized.NameValueCollection state, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(class System.Collections.Specialized.NameValueCollection state, string title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="state">A collection of key/value pairs that contain the data for the state.</param>
        <param name="title">The text that will be added to the browser's history stack as the title for this state.</param>
        <summary>Creates a history point and adds it to the browser's history stack, using the specified state data collection and state title.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create a history point when you want to save more than one key/value pair for the state data. When you create a history point, serialized and encrypted data is appended to the URL of the Web page and an entry is included in the browser's history stack. If the `title` parameter is `null`, the title of the Web page is used as the title of the state entry in the history stack.  
  
 You can use the state data to re-create the page when any subsequent server navigation event is raised. For more information, see [Managing Browser History Using Server Controls](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key part of the key/value pair that identifies the state of the Web page.</param>
        <param name="value">The value part of the key/value pair that identifies the state of the Web page.</param>
        <summary>Creates a history point and adds it to the browser's history stack, using the specified state key and state value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create a history point when you only want to save a value to identify the state. When you create a history point, serialized and encrypted data is appended to the URL of the Web page and an entry is included in the browser's history stack. The title of the Web page is used as the title of the state entry in the history stack.  
  
 You can use the state data to re-create the page when any subsequent server navigation event is raised. For more information, see [Managing Browser History Using Server Controls](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value, string title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key part of the key/value pair that identifies the state of the Web page.</param>
        <param name="value">The value part of the key/value pair that identifies the state of the Web page.</param>
        <param name="title">The text that will be added to the browser's history stack as the title for this state.</param>
        <summary>Creates a history point and adds it to the browser's history stack, using the specified state key, state value, and state title.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create a history point when you want to save a value to identify the state and a title for the state. When you create a history point, serialized and encrypted data is appended to the URL of the Web page and an entry is included in the browser's history stack. If the `title` parameter is `null`, the title of the Web page is used as the title of the state entry in the history stack.  
  
 You can use the state data to re-create the page when any subsequent server navigation event is raised. For more information, see [Managing Browser History Using Server Controls](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly AjaxFrameworkAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly AjaxFrameworkAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Ajax framework assembly that components on the page use.</summary>
        <value>The Ajax framework assembly.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AjaxFrameworkMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies how client scripts of the [!INCLUDE[ajax_current_ext](~/add/includes/ajax-current-ext-md.md)] client library will be included on the client.</summary>
        <value>An <see cref="T:System.Web.UI.AjaxFrameworkMode" /> enumeration value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AjaxFrameworkMode property to enable all [!INCLUDE[ajax_current_ext](~/add/includes/ajax-current-ext-md.md)] script files, to disable all [!INCLUDE[ajax_current_ext](~/add/includes/ajax-current-ext-md.md)] script files, or to explicitly include individual script files.  
  
   
  
## Examples  
 The following example shows how to set the AjaxFrameworkMode property to `Explicit` in order to indicate that scripts can be explicitly specified.  
  
```  
<asp:ScriptManager ID="sm1" AjaxFrameworkMode="Explicit" runat="server">   
<Scripts>   
    <asp:ScriptReference Name="MicrosoftAjaxCore.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxComponentModel.js" />    
    <asp:ScriptReference Name="MicrosoftAjaxSerialization.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxNetwork.js" />       
</Scripts>   
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowCustomErrorsRedirect">
      <MemberSignature Language="C#" Value="public bool AllowCustomErrorsRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCustomErrorsRedirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines whether the custom errors section of the Web.config file is used during an error in an asynchronous postback.</summary>
        <value>
          <see langword="true" /> if the custom errors setting in the Web.config file is used to determine error behavior during asynchronous postbacks; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.ScriptManager.AsyncPostBackError> event is raised when there is a page error during asynchronous postbacks. How errors on the server are sent to the client depends on the AllowCustomErrorsRedirect property, the <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> property, and the custom errors section of the Web.config file.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when there is a page error during an asynchronous postback.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AsyncPostBackError event is raised when there is a page error during asynchronous postbacks. How errors on the server are sent to the client depends on the <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> property, the <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> property, and the custom errors section of the Web.config file.  
  
   
  
## Examples  
 The following example shows how to handle the AsyncPostBackError event to set the <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> property (which is sent to the client) to the server exception error message.  
  
 [!code-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/add/codesnippet/visualbasic/e-system.web.ui.scriptma_1.aspx)]
 [!code-cs[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/add/codesnippet/csharp/e-system.web.ui.scriptma_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackErrorMessage">
      <MemberSignature Language="C#" Value="public string AsyncPostBackErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the error message that is sent to the client when an unhandled server exception occurs during an asynchronous postback.</summary>
        <value>The error message. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.ScriptManager.AsyncPostBackError> event is raised when there is a page error during asynchronous postbacks. How errors on the server are sent to the client depends on the <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> property, the AsyncPostBackErrorMessage property, and the custom errors section of the Web.config file.  
  
   
  
## Examples  
 The following example shows how to handle the <xref:System.Web.UI.ScriptManager.AsyncPostBackError> event to set the AsyncPostBackErrorMessage property (which is sent to the client) to the server exception error message.  
  
 [!code-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/add/codesnippet/visualbasic/p-system.web.ui.scriptma_1.aspx)]
 [!code-cs[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/add/codesnippet/csharp/p-system.web.ui.scriptma_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackSourceElementID">
      <MemberSignature Language="C#" Value="public string AsyncPostBackSourceElementID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackSourceElementID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the unique ID of the control that caused the asynchronous postback.</summary>
        <value>The unique ID of a control, if the control has an ID; otherwise, an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AsyncPostBackSourceElementID property contains the value of the control ID that caused the asynchronous postback, which can be one of the following:  
  
-   A postback from a control that is inside an <xref:System.Web.UI.UpdatePanel> control whose <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> property is set to `true` (the default).  
  
-   A postback from a control that is a trigger for an <xref:System.Web.UI.UpdatePanel> control.  
  
-   A postback from a control that is registered by calling the <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> method of the <xref:System.Web.UI.ScriptManager> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackTimeout">
      <MemberSignature Language="C#" Value="public int AsyncPostBackTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AsyncPostBackTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(90)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates the time, in seconds, before asynchronous postbacks time out if no response is received.</summary>
        <value>An integer that represents the time-out in seconds. The default value is 90 seconds.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationService">
      <MemberSignature Language="C#" Value="public System.Web.UI.AuthenticationServiceManager AuthenticationService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.AuthenticationServiceManager AuthenticationService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AuthenticationServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.UI.AuthenticationServiceManager" /> object that is associated with the current <see cref="T:System.Web.UI.ScriptManager" /> instance.</summary>
        <value>The <see cref="T:System.Web.UI.AuthenticationServiceManager" /> object for the current <see cref="T:System.Web.UI.ScriptManager" /> instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.AuthenticationServiceManager> object that is returned by this property represents the authentication service that is registered with the page. The authentication service can be defined in the <xref:System.Web.UI.ScriptManager> control or in an associated <xref:System.Web.UI.ScriptManagerProxy> control.  
  
 You can use the ASP.NET authentication service or use a custom authentication service. You can add the custom service in markup by including an `AuthenticationService` element inside the `asp:ScriptManager` element on the page, as shown in the following example.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <AuthenticationService Path="MyAuthenticationService.asmx" />  
</asp:ScriptManager>  
```  
  
 You can also programmatically configure the <xref:System.Web.UI.AuthenticationServiceManager> object. Services are registered with the <xref:System.Web.UI.ScriptManager> control during the page's <xref:System.Web.UI.Control.PreRender> life-cycle stage.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientNavigateHandler">
      <MemberSignature Language="C#" Value="public string ClientNavigateHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientNavigateHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method that handles the [Sys.Application.navigate](~/add/includes/ajax-current-ext-md.md) event on the client.</summary>
        <value>The name of the method that handles the [Sys.Application.navigate](../Topic/Sys.Application.navigate%20Event.md) event on the client.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CompositeScript">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompositeScriptReference CompositeScript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CompositeScriptReference CompositeScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompositeScriptReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the composite script that supports the Web page.</summary>
        <value>A reference to the composite script.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information, see [Combining Client Scripts into a Composite Script](http://msdn.microsoft.com/en-us/d0f608d0-b4c8-4795-990b-ede68c1239b3).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EmptyPageUrl">
      <MemberSignature Language="C#" Value="public virtual string EmptyPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyPageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Web.UI.Design.UrlEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a URL to a blank Web page.</summary>
        <value>The URL to use if the target Web page is empty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The EmptyPageUrl property supports Ajax browser history.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableCdn">
      <MemberSignature Language="C#" Value="public bool EnableCdn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether the current page loads client script references from CDN (Content Delivery Network) paths.</summary>
        <value>
          <see langword="true" /> if client script references are loaded from CDN paths, otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not set this property to `true` if you set <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> to `true` already.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableCdnFallback">
      <MemberSignature Language="C#" Value="public bool EnableCdnFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdnFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables local copy of a script to load in the event that the CDN (Content Delivery Network) is unavailable.</summary>
        <value>
          <see langword="true" /> if the fallback CDN value is enabled; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableHistory">
      <MemberSignature Language="C#" Value="public bool EnableHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHistory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the Web page supports history point management.</summary>
        <value>
          <see langword="true" /> if the Web page supports adding history points to the browser's history stack; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EnableHistory property to enable history management in a Web page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnablePageMethods">
      <MemberSignature Language="C#" Value="public bool EnablePageMethods { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePageMethods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether public static page methods in an ASP.NET page can be called from client script.</summary>
        <value>
          <see langword="true" /> if static page methods on an ASP.NET page can be called from client script as Web methods; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can add static page methods to an ASP.NET page and mark them as Web methods. You can then call these methods from script as if they were part of a Web service, but without creating a separate .asmx file. To create Web methods on a page, import the <xref:System.Web.Services> namespace and add a <xref:System.Web.Services.WebMethodAttribute> attribute to each static method that you want to expose. The methods must be marked public.  
  
 For more information, see [Exposing Web Services to Client Script in ASP.NET AJAX](http://msdn.microsoft.com/en-us/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnablePartialRendering">
      <MemberSignature Language="C#" Value="public bool EnablePartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that enables partial rendering of a page, which in turn enables you to update regions of the page individually by using <see cref="T:System.Web.UI.UpdatePanel" /> controls.</summary>
        <value>
          <see langword="true" /> if partial rendering is enabled and full-page updates are suppressed; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Even if the EnablePartialRendering property is `true`, partial-page rendering might not occur. The browser might not support partial-page rendering, or the <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> property is set to `false`.  
  
 You can override the value of the EnablePartialRendering property at run time during or before the page's <xref:System.Web.UI.Control.Init> event. If you try to change this property after the page's <xref:System.Web.UI.Control.Init> event has occurred, an <xref:System.InvalidOperationException> exception is thrown.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The EnablePartialRendering property is set after the page's <see cref="E:System.Web.UI.Control.Init" /> event occurs.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableScriptGlobalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptGlobalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptGlobalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.ScriptManager" /> control renders script that supports parsing and formatting of culture-specific information.</summary>
        <value>
          <see langword="true" /> if culture-specific information can be displayed; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the EnableScriptGlobalization property is set to `true`, globalized ECMAScript (JavaScript) functions such as the  method display culture-specific information. The culture can be set in the browser, in server code, or in the Web site's configuration file.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableScriptLocalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptLocalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptLocalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.ScriptManager" /> control renders localized versions of script files.</summary>
        <value>
          <see langword="true" /> if localized script files will be rendered; otherwise, <see langword="false" />. The default value is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the EnableScriptLocalization property is set to `true`, the <xref:System.Web.UI.ScriptManager> object will retrieve script files for the current culture if they exist. For example, a page might specify a script file that is named CustomScript.js. If the culture is set to fr-CA, the <xref:System.Web.UI.ScriptManager> object will try to retrieve a script file that is named CustomScript.fr-CA.js.  
  
> [!NOTE]
>  To prevent a script file from being rendered two times, the EnableScriptLocalization property must not be modified during an asynchronous postback.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableSecureHistoryState">
      <MemberSignature Language="C#" Value="public bool EnableSecureHistoryState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSecureHistoryState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to encrypt the history state string.</summary>
        <value>
          <see langword="true" /> if the history state string should be encrypted; otherwise, <see langword="false" />. The default value is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  This property should ***never*** be set to `false` on a production web site.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptManager GetCurrent (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ScriptManager GetCurrent(class System.Web.UI.Page page) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">The page instance to retrieve the <see cref="T:System.Web.UI.ScriptManager" /> from.</param>
        <summary>Gets the <see cref="T:System.Web.UI.ScriptManager" /> instance for a given <see cref="T:System.Web.UI.Page" /> object.</summary>
        <returns>The current <see cref="T:System.Web.UI.ScriptManager" /> instance for the selected <see cref="T:System.Web.UI.Page" /> object, or <see langword="null" /> if no instance is defined.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this static method to determine whether a <xref:System.Web.UI.ScriptManager> control is on a page, or to access the properties and methods of a <xref:System.Web.UI.ScriptManager> control when you do not know its ID.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredArrayDeclarations">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a read-only collection of ECMAScript (JavaScript) array declarations that were previously registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
        <returns>A generic collection that contains the array declarations.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredClientScriptBlocks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a read-only collection of client script blocks that were previously registered with the <see cref="T:System.Web.UI.ScriptManager" /> control.</summary>
        <returns>A generic collection that contains client script blocks.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Client script blocks are registered with the <xref:System.Web.UI.ScriptManager> control for use with a control that is inside an <xref:System.Web.UI.UpdatePanel> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredDisposeScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a read-only collection of <see langword="dispose" /> scripts that were previously registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
        <returns>A generic collection that contains <see langword="dispose" /> scripts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `dispose` script executes when the <xref:System.Web.UI.UpdatePanel> control is updated or deleted.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredExpandoAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a read-only collection of custom (expando) attributes that were previously registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
        <returns>A generic collection that contains custom attributes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A custom attribute is a name/value pair that can be read and set by client script.  
  
   
  
## Examples  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.RegisteredExpandoAttribute>  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredHiddenFields">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a read-only collection of hidden fields that were previously registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
        <returns>A generic collection that contains hidden fields.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredOnSubmitStatements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a read-only collection of <see langword="onsubmit" /> statements that were previously registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
        <returns>A generic collection that contains <see langword="onsubmit" /> statements.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An `onsubmit` statement is ECMAScript (JavaScript) that is executed when the form is submitted.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredStartupScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a read-only collection of startup scripts that were previously registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
        <returns>A generic collection that contains startup scripts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A startup script is client script that is associated with a control that executes when the control is started.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>  
  
 GetRegisteredStartupScripts  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStateString">
      <MemberSignature Language="C#" Value="public string GetStateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetStateString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a string that contains key/value pairs that represent the state of the Web page.</summary>
        <returns>A string containing the key/value pairs that represent the state of the Web page.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDebuggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsDebuggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDebuggingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the debug versions of client script libraries will be rendered.</summary>
        <value>
          <see langword="true" /> if the current request is executing in debug mode; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsDebuggingEnabled property returns `false` when any one of the following conditions is true:  
  
-   In the  element of the configuration file, the `retail` attribute is set to `true`. This overrides all other settings.  
  
-   The <xref:System.Web.UI.ScriptManager.ScriptMode%2A> property is set to `Auto` or to `Inherit`, and debugging is not enabled in the `compilation` section of the application-root Web.config file.  
  
-   The <xref:System.Web.UI.ScriptManager.ScriptMode%2A> property is set to `Release`.  
  
    > [!NOTE]
    >  The `debug` attribute of the  directive does not affect Ajax-enabled ASP.NET applications. The <xref:System.Web.UI.ScriptManager> control uses only the settings in the Web.config file and in its IsDebuggingEnabled and <xref:System.Web.UI.ScriptManager.ScriptMode%2A> properties to determine whether to render debug scripts.  
  
 For more information, see [Debugging and Tracing Ajax Applications Overview](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInAsyncPostBack">
      <MemberSignature Language="C#" Value="public bool IsInAsyncPostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInAsyncPostBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the current postback is being executed in partial-rendering mode.</summary>
        <value>
          <see langword="true" /> if the current postback is executing in partial-rendering mode; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the IsInAsyncPostBack property in combination with the <xref:System.Web.UI.Page.IsPostBack%2A> property to distinguish between the initial page load, a partial-page update, and a full-page update in <xref:System.Web.UI.Control.Load>, <xref:System.Web.UI.Page.InitComplete>, or <xref:System.Web.UI.Control.PreRender> events.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNavigating">
      <MemberSignature Language="C#" Value="public bool IsNavigating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNavigating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether a <see cref="E:System.Web.UI.ScriptManager.Navigate" /> event is currently being handled.</summary>
        <value>
          <see langword="true" /> if the <see cref="E:System.Web.UI.ScriptManager.Navigate" /> is being handled; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the IsNavigating property to determine whether the <xref:System.Web.UI.ScriptManager.Navigate> event has been raised.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">The key identifier for the control.</param>
        <param name="postCollection">The collection of all the incoming post data.</param>
        <summary>Reads form data that is posted from the browser to the server, and determines the source of the asynchronous postback.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Web.UI.ScriptManager" /> control's state has changed as a result of a postback; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LoadPostData method is primarily used by control developers to extend the functionality of the <xref:System.Web.UI.ScriptManager> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadScriptsBeforeUI">
      <MemberSignature Language="C#" Value="public bool LoadScriptsBeforeUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoadScriptsBeforeUI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether scripts are loaded before or after markup for the page UI is loaded.</summary>
        <value>
          <see langword="true" /> if scripts are loaded before markup for the UI is loaded; <see langword="false" /> if scripts are loaded after markup for the UI is loaded. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LoadScriptsBeforeUI property determines how scripts in the <xref:System.Web.UI.ScriptManager.Scripts%2A> collection are loaded relative to the markup for the page UI.  
  
 When the LoadScriptsBeforeUI property is `true`, a `script` element is rendered before the page's UI markup is loaded. In this scenario, if UI elements are defined in scripts, the UI will be fully functional when it loads. However, if the script accesses UI elements in the markup for which instances have not yet been created, an error might occur. To make sure that UI elements are loaded before you access them, handle the  event of the  class.  
  
 When the LoadScriptsBeforeUI property is `false`, a `script` element is rendered after the page's UI markup is rendered. In this scenario, the UI loads more quickly, but it might not be fully functional if scripts that define additional UI elements have not finished loading.  
  
 Do not set this property to `true` if you set <xref:System.Web.UI.ScriptManager.EnableCdn%2A> to `true` already.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; Navigate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.HistoryEventArgs&gt; Navigate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks the browser's **Back** or **Forward** button.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a user clicks the browser's **Back** button, the browser navigates through previously-viewed URLs, which can include URLs that contain history-point state data. If client code in the Web page detects that the URL contains history state data, it makes a request to the server page. This acts as a postback event, and the <xref:System.Web.UI.ScriptManagerProxy> server control raises the `Navigate` event. You can handle this event and re-create the page as required in the Web application by using the state data that is passed with the event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAsyncPostBackError">
      <MemberSignature Language="C#" Value="protected virtual void OnAsyncPostBackError (System.Web.UI.AsyncPostBackErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAsyncPostBackError(class System.Web.UI.AsyncPostBackErrorEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.AsyncPostBackErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The error event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.ScriptManager.AsyncPostBackError> event is raised when there is a page error during asynchronous postbacks. How errors on the server are sent to the client depends on the <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> property, the <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> property, and the custom errors section of the Web.config file.  
  
   
  
## Examples  
 The following example shows how to handle the <xref:System.Web.UI.ScriptManager.AsyncPostBackError> event to set the <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> property (which is sent to the client) to the server exception error message.  
  
 [!code-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/add/codesnippet/visualbasic/b3084245-e566-4363-b817-_1.aspx)]
 [!code-cs[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/add/codesnippet/csharp/b3084245-e566-4363-b817-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event and makes sure that only one <see cref="T:System.Web.UI.ScriptManager" /> control exists on the page.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">More than one instance of <see cref="T:System.Web.UI.ScriptManager" /> exists on the page.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event, and registers script files and services for partial-page updates.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For information about the DOM, see the [Document Object Model (DOM) Level 1 Specification](http://go.microsoft.com/fwlink/?LinkId=73305) on the World Wide Web Consortium (W3C) Web site.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The browser that made the partial-page request does not support at least DOM Level 1.0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveCompositeScriptReference (System.Web.UI.CompositeScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveCompositeScriptReference(class System.Web.UI.CompositeScriptReferenceEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.CompositeScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An object that represents the composite script reference.</param>
        <summary>Raises the <see cref="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnResolveScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveScriptReference (System.Web.UI.ScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveScriptReference(class System.Web.UI.ScriptReferenceEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.ScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An object that represents the current script.</param>
        <summary>Raises the <see cref="E:System.Web.UI.ScriptManager.ResolveScriptReference" /> event for each script reference that is managed by the <see cref="T:System.Web.UI.ScriptManager" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the <xref:System.Web.UI.ScriptManager.OnPreRender%2A> event handler, one time for each <xref:System.Web.UI.ScriptReference> in the <xref:System.Web.UI.ScriptManager.Scripts%2A> collection.  
  
 The <xref:System.Web.UI.ScriptManager.ResolveScriptReference> event is raised after duplicate script entries have been resolved.  
  
 Override this method to affect the behaviors of individual script blocks on postback or during partial-page updates.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProfileService">
      <MemberSignature Language="C#" Value="public System.Web.UI.ProfileServiceManager ProfileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ProfileServiceManager ProfileService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ProfileServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.UI.ProfileServiceManager" /> object that is associated with the current <see cref="T:System.Web.UI.ScriptManager" /> instance.</summary>
        <value>The <see cref="T:System.Web.UI.ProfileServiceManager" /> object for the current <see cref="T:System.Web.UI.ScriptManager" /> instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.ProfileServiceManager> object that is returned by this property represents the profile service that is registered with the page. The profile service can be defined in the <xref:System.Web.UI.ScriptManager> control or in an associated <xref:System.Web.UI.ScriptManagerProxy> control.  
  
 You can use the ASP.NET profile service or use a custom profile service. You can add the custom service in markup by including a `ProfileService` element inside the `asp:ScriptManager` element on the page, as shown in the following example.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <ProfileService LoadProperties="propertyA,propertyB"  
    Path="MyProfileService.asmx" />  
</asp:ScriptManager>  
```  
  
 You can also programmatically configure the <xref:System.Web.UI.ProfileServiceManager> object. Services are registered with the <xref:System.Web.UI.ScriptManager> control during the page's <xref:System.Web.UI.Control.PreRender> life-cycle stage.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">A string of key/value pairs that represent the history state of the Web page.</param>
        <summary>Processes a postback event raised by the <see cref="T:System.Web.UI.ScriptManager" /> control and loads the history state of the Web page.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raises events for the <see cref="T:System.Web.UI.ScriptManager" /> control when it posts back to the server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RaisePostDataChangedEvent method is primarily used by control developers to extend the functionality of the <xref:System.Web.UI.ScriptManager> control. For the default implementation of the <xref:System.Web.UI.ScriptManager> control, no events are raised.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The control that is registering the array.</param>
        <param name="arrayName">The name of the array to register.</param>
        <param name="arrayValue">The array value or values to register.</param>
        <summary>Registers an ECMAScript (JavaScript) array declaration with the <see cref="T:System.Web.UI.ScriptManager" /> control for use with a control that is inside an <see cref="T:System.Web.UI.UpdatePanel" /> control, and adds the array to the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the RegisterArrayDeclaration method to register a client script array that is compatible with partial-page rendering and that has no [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] dependencies. This method registers the array when `control` represents a control that is inside an <xref:System.Web.UI.UpdatePanel> control that is being updated. To register an array every time that an asynchronous postback occurs, use the <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> overload of this method.  
  
 If you want to register an array that does not pertain to partial-page updates, and if you want to register the array only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 The RegisterArrayDeclaration method determines whether an array with the name that is specified in the `arrayName` parameter is already registered. If so, the method adds the values specified in `arrayValue`. Because the array to be registered is based on the <xref:System.Collections.ArrayList> class, duplicates are allowed. If a registered array with the name in `arrayName` does not exist, the array is created and the values in `arrayValue` are added to it.  
  
 To include string literals in the array, use single quotation marks (') or escaped double quotation marks (\\") in `arrayValue`.  
  
 Note that JavaScript treats a comma (,) as a delimiter in an array. You can specify multiple array values by passing a comma-delimited string in `arrayValue`. Separating two items with a comma in `arrayValue` is equivalent to calling the RegisterArrayDeclaration method two times, one time for each item.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Page page, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Page page, string arrayName, string arrayValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">The page object that is registering the array.</param>
        <param name="arrayName">The name of the array to register.</param>
        <param name="arrayValue">The array value or values to register.</param>
        <summary>Registers an ECMAScript (JavaScript) array declaration with the <see cref="T:System.Web.UI.ScriptManager" /> control for use with a control that is inside an <see cref="T:System.Web.UI.UpdatePanel" /> control, and adds the array to the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the RegisterArrayDeclaration method to register a client script array that is compatible with partial-page rendering and that has no [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] dependencies. This method registers the array every time that an asynchronous postback occurs. To register an array for a control that is inside an <xref:System.Web.UI.UpdatePanel> control so that the array is registered only when the panel is updated, use the <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> overload of this method.  
  
 If you want to register an array that does not pertain to partial-page updates, and if you want to register the array only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterAsyncPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAsyncPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">The control to register for asynchronous postbacks.</param>
        <summary>Registers a control as a trigger for asynchronous postbacks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RegisterAsyncPostBackControl method enables you to register Web server controls as triggers so that they perform an asynchronous postback instead of a synchronous postback. When the <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> property of an <xref:System.Web.UI.UpdatePanel> control is set to `true` (which is the default), postback controls inside the <xref:System.Web.UI.UpdatePanel> control are automatically registered as asynchronous postback controls.  
  
 Use the RegisterAsyncPostBackControl method to register controls outside an <xref:System.Web.UI.UpdatePanel> control as triggers for asynchronous postbacks, and to potentially update the content of an update panel. To update an <xref:System.Web.UI.UpdatePanel> control programmatically, call the <xref:System.Web.UI.UpdatePanel.Update%2A> method.  
  
 You can add the trigger declaratively by using the `Triggers` element of the <xref:System.Web.UI.UpdatePanel> control. In [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)], use the designer's **UpdatePanelTrigger Collection Editor** dialog box.  
  
   
  
## Examples  
 The following example shows how to call the RegisterAsyncPostBackControl method to register a <xref:System.Web.UI.WebControls.Button> control so that it causes an update of an <xref:System.Web.UI.UpdatePanel> control's content. The <xref:System.Web.UI.WebControls.Button> control is not inside the <xref:System.Web.UI.UpdatePanel> control. Two buttons are shown: `Button1` and `Button2`. `Button1` refreshes the content of the panel, and `Button2` refreshes the whole page.  
  
 [!code-cs[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/add/codesnippet/csharp/52cf52da-aed7-4683-b734-_1.aspx)]
 [!code-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/add/codesnippet/visualbasic/52cf52da-aed7-4683-b734-_1.aspx)]  
  
 The following example shows how to call the RegisterAsyncPostBackControl method to register a user control so that it causes an update of an <xref:System.Web.UI.UpdatePanel> control's content. The first example shows a page using the user control. The second example shows the user control.  
  
 [!code-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/add/codesnippet/visualbasic/52cf52da-aed7-4683-b734-_2.aspx)]
 [!code-cs[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/add/codesnippet/csharp/52cf52da-aed7-4683-b734-_2.aspx)]  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The registered control does not implement the <see cref="T:System.Web.UI.INamingContainer" />, <see cref="T:System.Web.UI.IPostBackDataHandler" />, or <see cref="T:System.Web.UI.IPostBackEventHandler" /> interfaces.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">The control that is registering the client script block.</param>
        <param name="type">The type of the client script block. This parameter is usually specified by using the <see langword="typeof" /> operator (C#) or the <see langword="GetType" /> operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="key">A unique identifier for the script block.</param>
        <param name="script">The script.</param>
        <param name="addScriptTags">
          <see langword="true" /> to enclose the script block in <see langword="&lt;script&gt;" /> and <see langword="&lt;/script&gt;" /> tags; otherwise, <see langword="false" />.</param>
        <summary>Registers a client script block with the <see cref="T:System.Web.UI.ScriptManager" /> control for use with a control that is inside an <see cref="T:System.Web.UI.UpdatePanel" /> control, and then adds the script block to the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the RegisterClientScriptBlock method to register a client script block that is compatible with partial-page rendering and that has no [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] dependencies. Client script blocks that are registered by using this method are sent to the page only when `control` represents a control that is inside an <xref:System.Web.UI.UpdatePanel> control that is being updated. To register a script block every time that an asynchronous postback occurs, use the <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload of this method.  
  
 If you want to register a script block that does not pertain to partial-page updates, and if you want to register the script block only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 If `addScriptTags` is `true`, the RegisterClientScriptBlock method adds `<script>` tags around the script block. Pass `false` if you want to create `<script>` tags yourself, such as when you want to set the attributes of specific `<script>` tags. If `addScriptTags` is `false` and the `script` parameter contains multiple script blocks, an exception is thrown.  
  
 The RegisterClientScriptBlock method adds a script block to the page after the opening `<form>` tag. The script blocks are not guaranteed to be output in the same order in which they are registered. If the order of the script blocks is important, concatenate your script blocks into a single string (for example, by using the <xref:System.Text.StringBuilder> object), and then register them as a single client script block.  
  
   
  
## Examples  
 [!code-cs[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/add/codesnippet/csharp/e9c100e2-0b39-467f-a078-_1.aspx)]
 [!code-vb[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/add/codesnippet/visualbasic/e9c100e2-0b39-467f-a078-_1.aspx)]  
  
 [!code-xml[System.Web.UI.ScriptManager.RegisterClientScriptBlock#2](~/add/codesnippet/xml/e9c100e2-0b39-467f-a078-_2.xml)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client script block <paramref name="type" /> is <see langword="null" />.  
  
 \- or -  
  
 The control that is registering the script block is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The control that is registering the script block is not in the page's control tree.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">The page object that is registering the client script block.</param>
        <param name="type">The type of the client script block. This parameter is usually specified by using the <see langword="typeof" /> operator (C#) or the <see langword="GetType" /> operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="key">A unique identifier for the script block.</param>
        <param name="script">The script to register.</param>
        <param name="addScriptTags">
          <see langword="true" /> to enclose the script block in <see langword="&lt;script&gt;" /> and <see langword="&lt;/script&gt;" /> tags; otherwise, <see langword="false" />.</param>
        <summary>Registers a client script block with the <see cref="T:System.Web.UI.ScriptManager" /> control for use with a control that is inside an <see cref="T:System.Web.UI.UpdatePanel" /> control, and then adds the script block to the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you register a script block by using this method, the script is rendered every time that an asynchronous postback occurs. To register a script block for a control that is inside an <xref:System.Web.UI.UpdatePanel> control so that script is registered only when the <xref:System.Web.UI.UpdatePanel> control is updated, use the <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload of this method.  
  
 If you want to register a script block that does not pertain to partial-page updates, and if you want to register the script block only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The script block <paramref name="type" /> is <see langword="null" />.  
  
 \- or -  
  
 The page that is registering the script block is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The control that is registering the client script file.</param>
        <param name="type">The type of the client script file. This parameter is usually specified by using the typeof operator (C#) or the GetType operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="key">A unique identifier for the script file.</param>
        <param name="url">The URL of the script file.</param>
        <summary>Registers a client script file with the <see cref="T:System.Web.UI.ScriptManager" /> control for use with a control that is inside an <see cref="T:System.Web.UI.UpdatePanel" /> control, and then adds a script file reference to the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the RegisterClientScriptInclude method to register a client script file for a page or part of a page that is participating in partial-page updates. Client script files that are registered by using this method are sent to the page only when the `control` represents a control that is inside an <xref:System.Web.UI.UpdatePanel> control that is being updated. To register a script file every time that an asynchronous postback occurs, use the <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> overload of this method.  
  
 If you want to register a script block that does not pertain to partial-page updates, and if you want to register the script block only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 The RegisterClientScriptInclude method registers a client script file on the page by rendering a `script` element whose opening tag contains a `src` attribute. The `url` parameter is used to set the `src` attribute. To resolve URLs, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method. This method uses the context of the URL it is called for to resolve the path.  
  
 Both the RegisterClientScriptInclude and <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> methods render script files to the browser. If a script with the same type and key (for a script file) or the same type and resource name (for an embedded resource) is already rendered, the script is not rendered again.  
  
   
  
## Examples  
 [!code-cs[System.Web.UI.ScriptManager.RegisterClientScriptInclude#1](~/add/codesnippet/csharp/515cb652-1f4e-4c80-af8e-_1.aspx)]  
  
 [!code-javascript[System.Web.UI.ScriptManager.RegisterClientScriptInclude#2](~/add/codesnippet/javascript/515cb652-1f4e-4c80-af8e-_2.js)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client script file <paramref name="type" /> is <see langword="null" />.  
  
 \- or -  
  
 The control that is registering the script file is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The control that is registering the script file is not in the page's control tree.  
  
 \- or -  
  
 <paramref name="url" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="url" /> is empty.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Page page, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Page page, class System.Type type, string key, string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">The page object that is registering the client script file.</param>
        <param name="type">The type of the client script file. This parameter is usually specified by using the typeof operator (C#) or the GetType operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="key">A unique identifier for the script file.</param>
        <param name="url">The URL of the script file.</param>
        <summary>Registers client script with the <see cref="T:System.Web.UI.ScriptManager" /> control every time that an asynchronous postback occurs, and then adds a script file reference to the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you register a script file with this method, the script is rendered every time that an asynchronous postback occurs. To register a script file for a control that is inside an <xref:System.Web.UI.UpdatePanel> control so that script is registered only when the <xref:System.Web.UI.UpdatePanel> control is updated, use the <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> overload of this method.  
  
 If you want to register a script block that does not pertain to partial-page updates, and if you want to register the script block only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client script file <paramref name="type" /> is <see langword="null" />.  
  
 \- or -  
  
 The page that is registering the script file is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="url" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="url" /> is empty.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The control that is registering the script.</param>
        <param name="type">The type of the client script. This parameter is usually specified by using the typeof operator (C#) or the GetType operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="resourceName">An identifier for the resource.</param>
        <summary>Registers the client script that is embedded in an assembly with the <see cref="T:System.Web.UI.ScriptManager" /> control for use with a control that is participating in partial-page rendering.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the RegisterClientScriptResource method to register a script that is compatible with partial-page rendering and that has no [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] dependencies. Script resources that are registered by using this method are registered only when `control` represents a control that is inside an <xref:System.Web.UI.UpdatePanel> control that is updated. To register a script every time that an asynchronous postback occurs, use the <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload of this method.  
  
 If you want to register a script block that does not pertain to partial-page updates, and if you want to register the script block only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 The RegisterClientScriptResource method is used when resources from assemblies are accessed through an HTTP handler. This method includes the content of the resource URL in a `script` element.  
  
 Both the <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> and the RegisterClientScriptResource method load script files into the browser. If a script with the same type and key (for a script file) or the same type and resource name (for an embedded resource) is already loaded, the script is not reloaded.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client resource <paramref name="type" /> is <see langword="null" />.  
  
 \- or -  
  
 The control that is registering the script is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The control that is registering the script is not in the page's control tree.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Page page, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Page page, class System.Type type, string resourceName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">The page object that is registering the script.</param>
        <param name="type">The type of the client script. This parameter is usually specified by using the typeof operator (C#) or the GetType operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="resourceName">An identifier for the resource.</param>
        <summary>Registers a client script file that is embedded in an assembly with the <see cref="T:System.Web.UI.ScriptManager" /> control every time that a postback occurs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you register a script file with this method, the script is rendered every time that an asynchronous postback occurs. To register a script for a control that is inside an <xref:System.Web.UI.UpdatePanel> control so that the script is registered only when the <xref:System.Web.UI.UpdatePanel> control is updated, use the <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%29> overload of this method.  
  
 If you want to register a script block that does not pertain to partial-page updates, and if you want to register the script block only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client resource <paramref name="type" /> is <see langword="null" />.  
  
 \- or -  
  
 The page that is registering the script is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The control that is receiving the data.</param>
        <param name="dataItem">The data that is sent to the control.</param>
        <summary>Sends custom data to a control during partial-page rendering.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RegisterDataItem method to send data from the server to the client during asynchronous postbacks, regardless of whether the control receiving the data is inside an <xref:System.Web.UI.UpdatePanel> control.  
  
 The RegisterDataItem method can be called only during an asynchronous postback. To determine whether a postback is asynchronous, use the <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> property. This method invokes the overload that takes a parameter named `isJsonSerialized` that is set to `false`. When the `isJsonSerialized` parameter is set to `false`, the string is not serialized as JavaScript Object Notation (JSON). For more information about the JSON format, see the [Introducing JSON](http://go.microsoft.com/fwlink/?LinkId=77297) Web site.  
  
 The data items that are registered with the RegisterDataItem method can be accessed in client script during the , , and  events of the  object. When you handle these events, the custom data is passed in an event argument object. For example, if you provide a handler for the  event, the custom data is passed in the  class, which exposes a  property.  
  
   
  
## Examples  
 The following example shows how to send data to two <xref:System.Web.UI.WebControls.Label> controls on a page during an asynchronous postback. The <xref:System.Web.UI.WebControls.Label> controls are not inside an <xref:System.Web.UI.UpdatePanel> control.  
  
> [!NOTE]
>  The data that is sent in this example is for illustration only. In a real-world application, you would use the RegisterDataItem method to send custom data from the server.  
  
 [!code-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/add/codesnippet/visualbasic/f9a1f6cf-1974-484c-9f62-_1.aspx)]
 [!code-cs[System.Web.UI.ScriptManager.RegisterDataItem#1](~/add/codesnippet/csharp/f9a1f6cf-1974-484c-9f62-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Web.UI.ScriptManager.RegisterDataItem%2A&gt; method is called during a postback.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> is already registered for <paramref name="control" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem, bool isJsonSerialized) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
        <Parameter Name="isJsonSerialized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">The page control that is receiving the data.</param>
        <param name="dataItem">The data that is sent to the control.</param>
        <param name="isJsonSerialized">
          <see langword="true" /> to indicate that `dataItem` is serialized as JSON; otherwise, <see langword="false" />.</param>
        <summary>Sends custom data to a control during partial-page rendering, and indicates whether the data is in JavaScript Object Notation (JSON) format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> method to send data from the server to the client during asynchronous postbacks, regardless of whether the control receiving the data is inside an <xref:System.Web.UI.UpdatePanel> control.  
  
 If the `dataItem` parameter that you register for `control` is not serialized as JSON, set the `isJsonSerialized` parameter to `false`. This avoids the need to use the  function for each string that is sent to the client. For more information about the JSON format, see the [Introducing JSON](http://go.microsoft.com/fwlink/?LinkId=77297) Web site.  
  
 The RegisterDataItem method can be called only during an asynchronous postback. To determine whether a postback is asynchronous, use the <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> property.  
  
 The data items that are registered by using the <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> method can be accessed in client script during the , , and  events of the  object. When you handle these events, the custom data is passed in an event argument object. For example, if you provide a handler for the  event, the custom data is passed in the  class, which exposes a  property.  
  
   
  
## Examples  
 The following example shows how to send data to two <xref:System.Web.UI.WebControls.Label> controls on a page during an asynchronous postback. The <xref:System.Web.UI.WebControls.Label> controls are not inside an <xref:System.Web.UI.UpdatePanel> control. This example shows the overload that does not take the `isJsonSerialized` parameter. Otherwise, the procedure for retrieving the  property of the  object is the same as if you did not use that overload.  
  
> [!NOTE]
>  The data that is sent in this example is for illustration only. In a real-world application, you would use the RegisterDataItem method to send custom data from the server. For example, you could use the data item to send information about whether to hide or show client elements that are not inside an <xref:System.Web.UI.UpdatePanel> control.  
  
 [!code-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/add/codesnippet/visualbasic/f58deeed-5242-449c-b3ca-_1.aspx)]
 [!code-cs[System.Web.UI.ScriptManager.RegisterDataItem#1](~/add/codesnippet/csharp/f58deeed-5242-449c-b3ca-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The RegisterDataItem method is called during a postback.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> is already registered for <paramref name="control" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterDispose">
      <MemberSignature Language="C#" Value="public void RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The control that the <see langword="dispose" /> script is for.</param>
        <param name="disposeScript">The <see langword="dispose" /> script.</param>
        <summary>Registers a <see langword="dispose" /> script for a control that is inside an <see cref="T:System.Web.UI.UpdatePanel" /> control. The script is executed when the <see cref="T:System.Web.UI.UpdatePanel" /> control is updated or deleted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RegisterDispose method to register `dispose` scripts for controls that are inside an <xref:System.Web.UI.UpdatePanel> control. During asynchronous postbacks, <xref:System.Web.UI.UpdatePanel> controls can be updated, deleted, or created. When a panel is updated or deleted, any `dispose` scripts that are registered for controls that are inside the <xref:System.Web.UI.UpdatePanel> are called. In typical page development scenarios, you do not have to call the RegisterDispose method.  
  
 The RegisterDispose method is intended for use by control developers to register script or create controls that inherit from the <xref:System.Web.UI.IScriptControl> interface. For example, you might use a `dispose` script if you develop a client control by using composition. In your control, you implement <xref:System.Web.UI.IScriptControl> and render individual controls. You register the `dispose` method of any item that does not correspond to a defined client component such as `Sys.TextBox`. If your custom control composes elements that correspond to client components in the [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)], you do not have to register a `dispose` script, because `dispose` is called automatically. Therefore, use the RegisterDispose method for client components that are part of the [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] and that have to free resources when a component is no longer used.  
  
 The RegisterDispose method can be called multiple times for a control. Multiple scripts are aggregated. The order of disposing scripts matches the order in which the scripts were registered.  
  
 If you register a `dispose` script for a control that is not in an <xref:System.Web.UI.UpdatePanel> control, an exception is thrown. The `dispose` script is called between the  and  events of the  class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="disposeScript" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> is not found on the page.  
  
 \- or -  
  
 <paramref name="control" /> is not inside an <see cref="T:System.Web.UI.UpdatePanel" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public static void RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">The control that is registering the expando attribute.</param>
        <param name="controlId">The control that contains the custom attribute on the page.</param>
        <param name="attributeName">The name of the custom attribute to register.</param>
        <param name="attributeValue">The value of the custom attribute.</param>
        <param name="encode">
          <see langword="true" /> to encode the custom attribute that is being registered; otherwise, <see langword="false" />.</param>
        <summary>Registers a name/value pair with the <see cref="T:System.Web.UI.ScriptManager" /> control as a custom (expando) attribute of a specified control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the RegisterExpandoAttribute method to register a custom (expando) property for a control that is compatible with partial-page rendering and that has no [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] dependencies.  
  
 The RegisterExpandoAttribute method registers a name/value pair as a custom attribute for the specified control. The property is set dynamically from ECMAScript (JavaScript) to preserve XHTML compatibility for the rendered control's markup. Set `encode` to `true` if you have to escape any characters in the dynamic property's value.  
  
 If the control to which the dynamic property will be added is not found, a script error occurs.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> is not in the page's control tree.  
  
 \- or -  
  
 <paramref name="controlId" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="controlId" /> is empty.  
  
 \- or -  
  
 <paramref name="attributeName" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="attributeName" /> is empty.  
  
 \- or -  
  
 <paramref name="attributeName" /> is already registered.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterExtenderControl&lt;TExtenderControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterExtenderControl&lt;TExtenderControl&gt; (TExtenderControl extenderControl, System.Web.UI.Control targetControl) where TExtenderControl : System.Web.UI.Control, System.Web.UI.IExtenderControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterExtenderControl&lt;(class System.Web.UI.Control, class System.Web.UI.IExtenderControl) TExtenderControl&gt;(!!TExtenderControl extenderControl, class System.Web.UI.Control targetControl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtenderControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IExtenderControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extenderControl" Type="TExtenderControl" />
        <Parameter Name="targetControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <typeparam name="TExtenderControl">To be added.</typeparam>
        <param name="extenderControl">To be added.</param>
        <param name="targetControl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The control that is registering the hidden field.</param>
        <param name="hiddenFieldName">The name of the hidden field to register.</param>
        <param name="hiddenFieldInitialValue">The initial value of the hidden field.</param>
        <summary>Registers a hidden field with the <see cref="T:System.Web.UI.ScriptManager" /> control for a control that is inside an <see cref="T:System.Web.UI.UpdatePanel" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the RegisterHiddenField method to register a hidden field that is compatible with partial-page rendering and that has no [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] dependencies. This method registers the hidden field when the control that is registering the field is inside an <xref:System.Web.UI.UpdatePanel> control that is being updated. To register a hidden field every time that an asynchronous postback occurs, use the <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> overload of this method.  
  
 If you want to register a hidden field that does not pertain to partial-page updates, and if you want to register the hidden field only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 The RegisterHiddenField method creates a hidden `input` element on the rendered HTML page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="hiddenFieldName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> is not in the page's control tree.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">The page object that is registering the hidden field.</param>
        <param name="hiddenFieldName">The name of the hidden field to register.</param>
        <param name="hiddenFieldInitialValue">The initial value of the hidden field.</param>
        <summary>Registers a hidden field with the <see cref="T:System.Web.UI.ScriptManager" /> control during every asynchronous postback.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the RegisterHiddenField method to register a hidden field that is compatible with partial-page rendering and that has no [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] dependencies. This method registers the hidden field every time that an asynchronous postback occurs. To register a hidden field for a control that is inside an <xref:System.Web.UI.UpdatePanel> control so that the field is registered only when the panel is updated, use the <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> overload of this method.  
  
 If you want to register a hidden field that does not pertain to partial-page updates, and if you want to register the hidden field only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="hiddenFieldName" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Control control, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Control control, string resourceName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The control that is registering the script.</param>
        <param name="resourceName">An identifier for the resource.</param>
        <summary>Registers client script by resource name that is embedded in an assembly with the <see cref="T:System.Web.UI.ScriptManager" /> control for use with a control that is participating in partial-page rendering.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Page page, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Page page, string resourceName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">The page object that is registering the script.</param>
        <param name="resourceName">An identifier for the resource.</param>
        <summary>Registers client script by resource name that is embedded in an assembly with the <see cref="T:System.Web.UI.ScriptManager" /> control for use with a control that is participating in partial-page rendering.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The control that is registering the <see langword="onsubmit" /> statement.</param>
        <param name="type">The type of the client script statement. This parameter is usually specified by using the typeof operator (C#) or the GetType operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="key">A unique identifier for the script statement.</param>
        <param name="script">The script to register.</param>
        <summary>Registers ECMAScript (JavaScript) code with the <see cref="T:System.Web.UI.ScriptManager" /> control for a control that is used with an <see cref="T:System.Web.UI.UpdatePanel" /> control that is executed when the form is submitted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RegisterOnSubmitStatement adds script that is executed before the form is submitted, which lets you modify the submission or cancel it.  
  
 You use the RegisterOnSubmitStatement method to render an `onsubmit` statement that is compatible with partial-page rendering and that has no [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] dependencies. JavaScript code that is registered by using this method is sent to the page only when the control that is registering the statement is inside an <xref:System.Web.UI.UpdatePanel> control that is being updated. To register code with every asynchronous postback, use the <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> overload of this method.  
  
 If you want to register JavaScript code that does not pertain to partial-page updates, and if you want to register the code only one time during initial page rendering, use the <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 The *script* parameter of the RegisterOnSubmitStatement method can contain multiple script commands that are delimited by using semicolons (;).  
  
 For more information about HTML forms and the `onsubmit` event, see the [World Wide Web Consortium (W3C) Web site](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> is not in the page's control tree.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Page page, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Page page, class System.Type type, string key, string script) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">The page object that is registering the <see langword="onsubmit" /> statement.</param>
        <param name="type">The type of the client script statement. This parameter is usually specified by using the typeof operator (C#) or the GetType operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="key">A unique identifier for the script statement.</param>
        <param name="script">The script to register.</param>
        <summary>Registers ECMAScript (JavaScript) code with the <see cref="T:System.Web.UI.ScriptManager" /> control for a control that is used with an <see cref="T:System.Web.UI.UpdatePanel" /> control that is executed when the form is submitted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Registering JavaScript code with this method causes the script to be included every time that an asynchronous postback occurs.  
  
> [!NOTE]
>  Code from any earlier asynchronous postbacks is not removed. New asynchronous postbacks append code to any existing code for the `onsubmit` statement.  
  
 To register code for a control that is inside an <xref:System.Web.UI.UpdatePanel> control so that the code is registered only when the <xref:System.Web.UI.UpdatePanel> control is updated, use the <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> overload of this method.  
  
 If you want to register JavaScript code that does not pertain to partial-page updates, and if you want to register the code only one time during initial page rendering, use the <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="type" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">The control to register for postback.</param>
        <summary>Registers a control as a trigger for a postback. This method is used to configure postback controls inside an <see cref="T:System.Web.UI.UpdatePanel" /> control that would otherwise perform asynchronous postbacks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RegisterPostBackControl method to register postback controls inside an <xref:System.Web.UI.UpdatePanel> control as triggers. Controls that are registered by using this method update a whole page instead of updating only the <xref:System.Web.UI.UpdatePanel> control's content. Registering a postback control with this method outside an <xref:System.Web.UI.UpdatePanel> control has no affect because by default these controls do not perform asynchronous postbacks.  
  
 You can add the trigger declaratively by using the `Triggers` element of the <xref:System.Web.UI.UpdatePanel> control. In [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)], use the designer's **UpdatePanelTrigger Collection Editor** dialog box.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptControl&lt;TScriptControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterScriptControl&lt;TScriptControl&gt; (TScriptControl scriptControl) where TScriptControl : System.Web.UI.Control, System.Web.UI.IScriptControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptControl&lt;(class System.Web.UI.Control, class System.Web.UI.IScriptControl) TScriptControl&gt;(!!TScriptControl scriptControl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScriptControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IScriptControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="scriptControl" Type="TScriptControl" />
      </Parameters>
      <Docs>
        <typeparam name="TScriptControl">To be added.</typeparam>
        <param name="scriptControl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IExtenderControl extenderControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IExtenderControl extenderControl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extenderControl" Type="System.Web.UI.IExtenderControl" />
      </Parameters>
      <Docs>
        <param name="extenderControl">The extender control for which script descriptors will be registered.</param>
        <summary>Calls back to an <see cref="T:System.Web.UI.ExtenderControl" /> class to return instance scripts that must be rendered to support the client object that represents a client control, component, or behavior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.ExtenderControl> class calls the RegisterScriptDescriptors method in its <xref:System.Web.UI.Control.Render%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IScriptControl scriptControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IScriptControl scriptControl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptControl" Type="System.Web.UI.IScriptControl" />
      </Parameters>
      <Docs>
        <param name="scriptControl">The script control for which script descriptors will be registered.</param>
        <summary>Calls a <see cref="T:System.Web.UI.ScriptControl" /> class to return instance scripts that must be rendered to support the client object that represents a client control, component, or behavior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.ScriptControl> class calls the RegisterScriptDescriptors method during its <xref:System.Web.UI.Control.Render%2A> event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">The control that is registering the client script block.</param>
        <param name="type">The type of the client script block. This parameter is usually specified by using the typeof operator (C#) or the GetType operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="key">A unique identifier for the script block.</param>
        <param name="script">The script to register.</param>
        <param name="addScriptTags">
          <see langword="true" /> to enclose the script block with <see langword="&lt;script&gt;" /> and <see langword="&lt;/script&gt;" /> tags; otherwise, <see langword="false" />.</param>
        <summary>Registers a startup script block for a control that is inside an <see cref="T:System.Web.UI.UpdatePanel" /> by using the <see cref="T:System.Web.UI.ScriptManager" /> control, and adds the script block to the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the RegisterStartupScript method to register a startup script block for a page that is compatible with partial-page rendering and that has no [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] dependencies. Startup script blocks that are registered by using this method are sent to the page only when the control that is registering the block is inside an <xref:System.Web.UI.UpdatePanel> control that is being updated. To register a startup script block every time that an asynchronous postback occurs, use the <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload of this method.  
  
 If you want to register a startup script that does not pertain to partial-page updates, and if you want to register the script only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 The script block that is rendered by the RegisterStartupScript method executes when the page finishes loading but before the page's client `onload` event is raised. Startup script blocks are located at the bottom of the rendered ASP.NET page just before the `</form>` tag.  
  
 Startup script blocks that are registered by using RegisterStartupScript are not guaranteed to be output in the same order in which they are registered. If the order of the startup script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the script blocks in a single string, and then register them all as a single startup script.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> is not in the page's control tree.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">The page object that is registering the client script block.</param>
        <param name="type">The type of the client script block. This parameter is usually specified by using the typeof operator (C#) or the GetType operator (Visual Basic) to retrieve the type of the control that is registering the script.</param>
        <param name="key">A unique identifier for the script block.</param>
        <param name="script">The script to register.</param>
        <param name="addScriptTags">
          <see langword="true" /> to enclose the script block with <see langword="&lt;script&gt;" /> and <see langword="&lt;/script&gt;" /> tags; otherwise, <see langword="false" />.</param>
        <summary>Registers a startup script block for every asynchronous postback with the <see cref="T:System.Web.UI.ScriptManager" /> control and adds the script block to the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use this method to register a startup script block that is included every time that an asynchronous postback occurs. To register a script block for a control that is inside an <xref:System.Web.UI.UpdatePanel> control so that the script block is registered only when the <xref:System.Web.UI.UpdatePanel> control is updated, use the <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload of this method.  
  
 If you want to register a startup script that does not pertain to partial-page updates, and if you want to register the script only one time during initial page rendering, use the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method of the <xref:System.Web.UI.ClientScriptManager> class. You can get a reference to the <xref:System.Web.UI.ClientScriptManager> object from the <xref:System.Web.UI.Page.ClientScript%2A> property of the page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">An object that receives the content of the control to write to the page.</param>
        <summary>Renders the <see cref="T:System.Web.UI.ScriptManager" /> control's content to the browser by using the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used by control developers to extend the <xref:System.Web.UI.ScriptManager> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a composite script is registered with the <see cref="T:System.Web.UI.ScriptManager" /> control.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResolveScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a member of the &lt;xref:System.Web.UI.ScriptManager.Scripts%2A&gt; collection is registered with the <see cref="T:System.Web.UI.ScriptManager" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised one time for each member of the <xref:System.Web.UI.ScriptManager.Scripts%2A> collection during the page's <xref:System.Web.UI.Control.PreRender> event. Use this event to perform any updates before the script is rendered to the page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RoleService">
      <MemberSignature Language="C#" Value="public System.Web.UI.RoleServiceManager RoleService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.RoleServiceManager RoleService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.RoleServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.UI.RoleServiceManager" /> object that is associated with the current <see cref="T:System.Web.UI.ScriptManager" /> instance.</summary>
        <value>The <see cref="T:System.Web.UI.RoleServiceManager" /> object for the current <see cref="T:System.Web.UI.ScriptManager" /> instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.RoleServiceManager> object that is returned by this property represents the role service that is registered with the page. The role service can be defined in the <xref:System.Web.UI.ScriptManager> control or in an associated <xref:System.Web.UI.ScriptManagerProxy> control. You can use the ASP.NET role service or use a custom role service. You can add the custom service in markup by including a `RoleService` element inside the `asp:ScriptManager` element on the page, as shown in the following example:  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <RoleService Path="MyRoleService.asmx" LoadRoles="True" />  
</asp:ScriptManager>  
```  
  
 You can also programmatically configure the <xref:System.Web.UI.RoleServiceManager> object. Services are registered with the <xref:System.Web.UI.ScriptManager> control during the page's <xref:System.Web.UI.Control.PreRender> life-cycle stage.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScriptMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptMode ScriptMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ScriptMode ScriptMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether debug or release versions of client script libraries are rendered.</summary>
        <value>The enumeration value that indicates the current mode. The default is <see cref="T:System.Web.UI.ScriptMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ScriptMode property specifies whether the <xref:System.Web.UI.ScriptManager> control should render debug or release versions of client script libraries. This value can be superseded by values that are set in the configuration file and in the page directive.  
  
 The following table lists the valid values for this property.  
  
|Value|Definition|  
|-----------|----------------|  
|<xref:System.Web.UI.ScriptMode>|Debug versions of client script libraries are used in the Web page when the `retail` attribute of the  configuration element is set to `false`. Otherwise, the release versions of client script libraries are used.|  
|<xref:System.Web.UI.ScriptMode>|When applied to the ScriptMode property of the <xref:System.Web.UI.ScriptManager> object, this value is the same as <xref:System.Web.UI.ScriptMode>.|  
|<xref:System.Web.UI.ScriptMode>|Debug versions of client script libraries are used in the Web page unless the `retail` attribute of the  configuration element is set to `true`.|  
|<xref:System.Web.UI.ScriptMode>|Release versions of client script libraries are used in the Web page unless the `retail` attribute of the  configuration element is set to `false`.|  
  
> [!NOTE]
>  The `debug` attribute of the  directive does not affect Ajax-enabled ASP.NET applications. The <xref:System.Web.UI.ScriptManager> control uses only the settings in the Web.config file and in its <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> and ScriptMode properties to determine whether to render debug scripts.  
  
 For more information, see [Debugging and Tracing Ajax Applications Overview](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The ScriptMode property is not one of the <see cref="T:System.Web.UI.ScriptMode" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScriptPath">
      <MemberSignature Language="C#" Value="public string ScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Set the Path property on each individual ScriptReference instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the root path of the location that is used to build the paths to ASP.NET Ajax and custom script files.</summary>
        <value>The location where script files are stored. The default value is an empty string (""), which is interpreted as a relative path.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ScriptPath property enables you to specify an absolute, relative, or application-relative URL for all script blocks on the page. This includes custom and third-party script blocks that are registered with the current <xref:System.Web.UI.ScriptManager> instance. The ScriptPath property is typically set declaratively as an attribute of a `ScriptManager` element on the page, but it can be set in code also.  
  
 If the `path` attribute or the <xref:System.Web.UI.ScriptReferenceBase.Path%2A> property is set for a <xref:System.Web.UI.ScriptReference> object in the <xref:System.Web.UI.ScriptManager.Scripts%2A> collection, the path value overrides the ScriptPath value for that <xref:System.Web.UI.ScriptReference> instance.  
  
 If no <xref:System.Web.UI.ScriptReferenceBase.Path%2A> value is specified, the <xref:System.Web.UI.ScriptManager> control searches the directory that is defined by the ScriptPath property and resolves script references by their <xref:System.Web.UI.ScriptReference.Name%2A> or <xref:System.Web.UI.ScriptReference.Assembly%2A> properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceMapping">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptResourceMapping ScriptResourceMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.UI.ScriptResourceMapping ScriptResourceMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptResourceMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Web.UI.ScriptResourceMapping" /> object.</summary>
        <value>A <see cref="T:System.Web.UI.ScriptResourceMapping" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The static ScriptResourceMapping property returns a <xref:System.Web.UI.ScriptResourceMapping> object that can contain a collection of mappings that represent the location of the script resource (script redirection). This collection of mappings can be mapped based on names or name/assembly pairs, and it can point to a <xref:System.Web.UI.ScriptResourceDefinition> object.  
  
   
  
## Examples  
 The following examples shows how to add a <xref:System.Web.UI.ScriptResourceDefinition> object that can be referenced by a <xref:System.Web.UI.ScriptManager> object. Add the following code to the Global.asax file in the `Application_Start` event.  
  
```c#  
ScriptResourceDefinition myScriptResDef = new ScriptResourceDefinition();  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js";  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js";  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js";  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js";  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", null, myScriptResDef);  
```  
  
```vb#  
Dim myScriptResDef As New ScriptResourceDefinition()  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js"  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js"  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js"  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js"  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", Nothing, myScriptResDef)  
```  
  
 In the markup for an ASP.NET Web Forms page (.aspx file), add the following markup inside the `form` element and before any elements or code that uses jQuery script.  
  
```  
<asp:ScriptManager ID="sm1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="jquery"/>  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptReferenceCollection Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ScriptReferenceCollection Scripts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Web.UI.ScriptReferenceCollection" /> object that contains the <see cref="T:System.Web.UI.ScriptReference" /> objects, each of which represents a script file rendered to the client.</summary>
        <value>The <see cref="T:System.Web.UI.ScriptReferenceCollection" /> object of the <see cref="T:System.Web.UI.ScriptManager" /> instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.ScriptReferenceCollection> object that is returned by this property is a collection of <xref:System.Web.UI.ScriptReference> objects, each of which represents a script file. The collection includes references to all the script files that ASP.NET needs for Ajax functionality, and to custom script files. Custom script files to render can be defined in the <xref:System.Web.UI.ScriptManager> control or in an associated <xref:System.Web.UI.ScriptManagerProxy> control.  
  
 You can add script files to the collection in markup by adding `asp:ScriptReference` elements to a `Scripts` node inside the `asp:ScriptManager` element on the page, as shown in the following example.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="Script.js" />  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 You can also add a <xref:System.Web.UI.ScriptReference> object to the Scripts collection programmatically by using the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method of the <xref:System.Web.UI.ScriptReferenceCollection> class.  
  
 The <xref:System.Web.UI.ScriptManager> control registers script files during the control's <xref:System.Web.UI.Control.PreRender> event.  
  
 The Scripts collection does not contain the core [!INCLUDE[atlaslib_current_ext](~/add/includes/atlaslib-current-ext-md.md)] scripts. The scripts in the core library are rendered automatically; they do not have to be registered with the <xref:System.Web.UI.ScriptManager> control. However, if you want to override a core script or any control script and substitute a different version of the script, you can add your version to the Scripts collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public System.Web.UI.ServiceReferenceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ServiceReferenceCollection Services" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ServiceReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Web.UI.ServiceReferenceCollection" /> object that contains a <see cref="T:System.Web.UI.ServiceReference" /> object for each Web service that ASP.NET exposes on the client for Ajax functionality.</summary>
        <value>The <see cref="T:System.Web.UI.ServiceReferenceCollection" /> object for the current <see cref="T:System.Web.UI.ScriptManager" /> instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.ServiceReferenceCollection> object that is returned by this property is a collection of <xref:System.Web.UI.ServiceReference> objects, each of which represents a Web service that is registered with the <xref:System.Web.UI.ScriptManager> control . You can define services in the <xref:System.Web.UI.ScriptManager> control or in an associated <xref:System.Web.UI.ScriptManagerProxy> control.  
  
 You can add services to the collection in markup by adding an `asp:ServiceReference` element to a `Services` element inside the `asp:ScriptManager` instance on the page, as shown in the following example.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Services>  
    <asp:ServiceReference Path="Service.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 You can also programmatically add a <xref:System.Web.UI.ServiceReference> object to the Services collection by using the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method of the <xref:System.Web.UI.ServiceReferenceCollection> class.  
  
 Services are registered with the <xref:System.Web.UI.ScriptManager> during the page's <xref:System.Web.UI.Control.PreRender> life-cycle stage.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(string clientID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">The ID of the control to receive focus.</param>
        <summary>Sets the browser focus to the control specified by ID.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SetFocus method works like the <xref:System.Web.UI.Page.SetFocus%2A> method for the <xref:System.Web.UI.Page> class. Both methods make the control with the specified ID the active control on the Web page. The SetFocus method of the <xref:System.Web.UI.ScriptManager> class is used to set focus during an asynchronous postback. During postbacks and when the page is first rendered, the SetFocus method calls the <xref:System.Web.UI.Page.SetFocus%2A> method of the <xref:System.Web.UI.Page> class.  
  
 If there are multiple calls to the SetFocus method, the control in the last call receives focus.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class System.Web.UI.Control control) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">The control to receive focus.</param>
        <summary>Sets the browser focus to the specified control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SetFocus method works like the <xref:System.Web.UI.Page.SetFocus%2A> method for the <xref:System.Web.UI.Page> class. Both methods make the specified control the active control on the Web page. The SetFocus method of the <xref:System.Web.UI.ScriptManager> class is used to set focus during an asynchronous postback. During postbacks and when the page is first rendered, the SetFocus method calls the <xref:System.Web.UI.Page.SetFocus%2A> method of the <xref:System.Web.UI.Page> class.  
  
 If there are multiple calls to the SetFocus method, the control specified in the last call receives focus.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SupportsPartialRendering">
      <MemberSignature Language="C#" Value="public bool SupportsPartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsPartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the client supports partial-page rendering.</summary>
        <value>
          <see langword="true" /> if the client supports partial-page rendering; otherwise, <see langword="false" />. The default value is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> property is set to `false`, the SupportsPartialRendering property returns `false`.  
  
 The default check to determine whether partial-page rendering is supported returns `true` when the following conditions are true:  
  
-   The <xref:System.Web.Configuration.HttpCapabilitiesBase.W3CDomVersion%2A> property value must be greater than or equal to 1.0.  
  
-   The <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> property value must be greater than or equal to 1.0.  
  
-   The <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property value must be set to `true`.  
  
 When the SupportsPartialRendering property is explicitly set, these checks are not used.  
  
 Control developers should use the SupportsPartialRendering property to determine whether they should support partial-page rendering.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A&gt; property is <see langword="false" /> and the SupportsPartialRendering property was set to <see langword="true" />.  
  
 \- or -  
  
 The SupportsPartialRendering property was set after the <see cref="E:System.Web.UI.Control.Init" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">The key-identifier for the control.</param>
        <param name="postCollection">A collection of all incoming post data.</param>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.IPostBackDataHandler.LoadPostData%2A?displayProperty=fullName&gt;.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Web.UI.ScriptManager" /> control's state has changed as a result of a postback; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.ScriptManager> instance is cast to an <xref:System.Web.UI.IPostBackDataHandler> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.ScriptManager> instance is cast to an <xref:System.Web.UI.IPostBackDataHandler> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">A string of key/value pairs that represent the history state of the Web page.</param>
        <summary>Enables the <see cref="T:System.Web.UI.ScriptManager" /> control to process a postback event and load the history state of the Web page.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.Control.Visible%2A&gt; property that is inherited from the base <see cref="T:System.Web.UI.Control" /> class to prevent setting this value.</summary>
        <value>
          <see langword="true" /> in all cases.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.Control.Visible%2A> property is overridden in the <xref:System.Web.UI.ScriptManager> class to prevent setting this value. A <xref:System.NotImplementedException> error occurs if a value is assigned to this property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">A value is assigned to the Visible property.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>