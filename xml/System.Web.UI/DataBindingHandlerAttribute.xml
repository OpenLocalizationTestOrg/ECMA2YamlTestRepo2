<Type Name="DataBindingHandlerAttribute" FullName="System.Web.UI.DataBindingHandlerAttribute">
  <TypeSignature Language="C#" Value="public sealed class DataBindingHandlerAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataBindingHandlerAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies a design-time class that performs data binding of controls within a designer. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about using attributes, see [Attributes](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example defines a data-binding handler, named `MyDataBindingHandler`, to be used by the designer in editing mode. On exiting the editing mode, the `Text` property value is displayed.  
  
 [!code-cs[SystemWebUI_DataBindingHandlerAttribute#1](~/add/codesnippet/csharp/t-system.web.ui.databind_0_1.cs)]
 [!code-vb[SystemWebUI_DataBindingHandlerAttribute#1](~/add/codesnippet/visualbasic/t-system.web.ui.databind_0_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataBindingHandlerAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.DataBindingHandlerAttribute" /> class using no parameters. This is the default constructor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example uses the DataBindingHandlerAttribute constructor.  
  
 [!code-cs[DataBindingHandlerAttribute_Samp2#1](~/add/codesnippet/csharp/m-system.web.ui.databind_6_1.cs)]
 [!code-vb[DataBindingHandlerAttribute_Samp2#1](~/add/codesnippet/visualbasic/m-system.web.ui.databind_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataBindingHandlerAttribute (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">The fully qualified name of the data-binding handler &lt;xref:System.Type&gt;.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.DataBindingHandlerAttribute" /> class with the specified type name.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The type name for this constructor is the fully qualified name of the type, including its assembly name.  
  
   
  
## Examples  
 The following code example uses the DataBindingHandlerAttribute constructor to designate a custom <xref:System.Web.UI.Design.DataBindingHandler> class for the Web control.  
  
 [!code-vb[DataBindingHandlerAttribute_Samp1#1](~/add/codesnippet/visualbasic/m-system.web.ui.databind_4_1.vb)]
 [!code-cs[DataBindingHandlerAttribute_Samp1#1](~/add/codesnippet/csharp/m-system.web.ui.databind_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataBindingHandlerAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; for the data-binding handler.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.DataBindingHandlerAttribute" /> class of the specified &lt;xref:System.Type&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The syntax for this attribute is:  
  
```  
[DataBindingHandlerAttribute  
  (typeof(dataBindingHandlerType))]  
```  
  
   
  
## Examples  
 The following code example defines a data-binding handler, named `MyDataBindingHandler`, to be used by the designer in editing mode. On exiting the editing mode, the `Text` property value is displayed.  
  
 [!code-cs[SystemWebUI_DataBindingHandlerAttribute#1](~/add/codesnippet/csharp/m-system.web.ui.databind_0_1.cs)]
 [!code-vb[SystemWebUI_DataBindingHandlerAttribute#1](~/add/codesnippet/visualbasic/m-system.web.ui.databind_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.DataBindingHandlerAttribute Default;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.DataBindingHandlerAttribute Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataBindingHandlerAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Defines the default attribute for the <see cref="T:System.Web.UI.DataBindingHandlerAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is the default attribute used when the attribute is not specified. This field is read-only.  
  
   
  
## Examples  
 The following code example creates an instance of the <xref:System.Web.UI.DataBindingHandlerAttribute> class that is set to Default.  
  
 [!code-cs[DataBindingHandlerAttribute_Default#1](~/add/codesnippet/csharp/f-system.web.ui.databind_1.cs)]
 [!code-vb[DataBindingHandlerAttribute_Default#1](~/add/codesnippet/visualbasic/f-system.web.ui.databind_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to the current <see cref="T:System.Web.UI.DataBindingHandlerAttribute" />.</param>
        <summary>Determines whether two object instances are equal.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="obj" /> parameter equals the <see cref="T:System.Web.UI.DataBindingHandlerAttribute" /> object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HandlerTypeName">
      <MemberSignature Language="C#" Value="public string HandlerTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HandlerTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type name of the data-binding handler.</summary>
        <value>The type name of the handler. If the type name is <see langword="null" />, this property returns an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example retrieves the HandlerTypeName property from an instance of the <xref:System.Web.UI.DataBindingHandlerAttribute> class.  
  
 [!code-vb[DataBindingHandlerAttribute_HandlerTypeName#1](~/add/codesnippet/visualbasic/p-system.web.ui.databind_1_1.vb)]
 [!code-cs[DataBindingHandlerAttribute_HandlerTypeName#1](~/add/codesnippet/csharp/p-system.web.ui.databind_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>