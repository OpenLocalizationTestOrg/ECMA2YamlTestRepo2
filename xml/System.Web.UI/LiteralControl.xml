<Type Name="LiteralControl" FullName="System.Web.UI.LiteralControl">
  <TypeSignature Language="C#" Value="public class LiteralControl : System.Web.UI.Control, System.Web.UI.ITextControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LiteralControl extends System.Web.UI.Control implements class System.Web.UI.ITextControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.ITextControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents HTML elements, text, and any other strings in an ASP.NET page that do not require processing on the server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET compiles all HTML elements and readable text that do not require server-side processing into instances of this class. For example, an HTML element that does not contain a `runat="server"` attribute/value pair in its opening tag is compiled into a LiteralControl object. LiteralControl objects do not maintain view state, so the contents of a LiteralControl object must be recreated on each request.  
  
 Literal controls behave as text holders, meaning that you can extract text from the literal control and remove the literal control from the parent server control's <xref:System.Web.UI.ControlCollection> collection through the parent's <xref:System.Web.UI.Control.Controls%2A> property. Therefore, when you develop a custom control derived from the LiteralControl class, make sure your control performs any required preprocessing steps itself, rather than using a call to the <xref:System.Web.UI.LiteralControl.Render%2A?displayProperty=fullName> method to accomplish them. Typically, you would do this to improve the response time of your Web application.  
  
 You can add or remove literal controls from a page or server control programmatically using the <xref:System.Web.UI.ControlCollection.Add%2A?displayProperty=fullName> or the <xref:System.Web.UI.ControlCollection.Remove%2A?displayProperty=fullName> method, respectively.  
  
   
  
## Examples  
 The following code example demonstrates how to use the overloaded <xref:System.Web.UI.LiteralControl.%23ctor%2A> constructor when overriding the <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=fullName> method. The code adds two new LiteralControl objects and a <xref:System.Web.UI.WebControls.TextBox> Web server control to the current server control's <xref:System.Web.UI.Control.Controls%2A?displayProperty=fullName> property.  
  
 [!code-vb[SystemWebUILiteralControl#1](~/add/codesnippet/visualbasic/t-system.web.ui.literalc_1.vb)]
 [!code-cs[SystemWebUILiteralControl#1](~/add/codesnippet/csharp/t-system.web.ui.literalc_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LiteralControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.LiteralControl" /> class that contains a literal string to be rendered on the requested ASP.NET page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates a class, `CustLiteralControlClass`, that extends the <xref:System.Web.UI.LiteralControl> class. It creates an instance of the class named `myLiteralControlClass1` by using the constructor that does not specify the text of the <xref:System.Web.UI.LiteralControl> object. After the object is created, the <xref:System.Web.UI.LiteralControl.Text%2A> property is used to set the text that it contains.  
  
 [!code-cs[LiteralControlSample#4](~/add/codesnippet/csharp/m-system.web.ui.literalc_2_1.aspx)]
 [!code-vb[LiteralControlSample#4](~/add/codesnippet/visualbasic/m-system.web.ui.literalc_2_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LiteralControl (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to be rendered on the requested Web page.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.LiteralControl" /> class with the specified text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates two instances of the <xref:System.Web.UI.LiteralControl> class using the LiteralControl constructor. The two instances render opening and closing tags for an H3 HTML element, and include the text to display within the H3 tags.  
  
 [!code-vb[SystemWebUILiteralControl#1](~/add/codesnippet/visualbasic/m-system.web.ui.literalc_1_1.vb)]
 [!code-cs[SystemWebUILiteralControl#1](~/add/codesnippet/csharp/m-system.web.ui.literalc_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an <see cref="T:System.Web.UI.EmptyControlCollection" /> object for the current instance of the <see cref="T:System.Web.UI.LiteralControl" /> class.</summary>
        <returns>The <see cref="T:System.Web.UI.EmptyControlCollection" /> for the current control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, <xref:System.Web.UI.LiteralControl> objects contain only text and no child server controls. If you want to change this behavior, you must override this method.  
  
   
  
## Examples  
 The following code example overrides the CreateControlCollection method to create an instance of the <xref:System.Web.UI.ControlCollection> class rather than an instance of the <xref:System.Web.UI.EmptyControlCollection> class.  
  
 [!code-cs[LiteralControlSample#2](~/add/codesnippet/csharp/m-system.web.ui.literalc_0_1.cs)]
 [!code-vb[LiteralControlSample#2](~/add/codesnippet/visualbasic/m-system.web.ui.literalc_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that renders the content of the <see cref="T:System.Web.UI.LiteralControl" /> to the requesting client.</param>
        <summary>Writes the content of the <see cref="T:System.Web.UI.LiteralControl" /> object to the ASP.NET page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you create a custom server control and want to render specific HTML or text to a client, you can improve the performance of the control by passing the value of the <xref:System.Web.UI.LiteralControl.Text%2A> property to the <xref:System.Web.UI.Control.Render%2A?displayProperty=fullName> method rather than calling the Render method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text content of the <see cref="T:System.Web.UI.LiteralControl" /> object.</summary>
        <value>A &lt;xref:System.String?displayProperty=fullName&gt; that represents the text content of the literal control. The default is &lt;xref:System.String?displayProperty=fullName&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates a class, `CustLiteralControlClass`, that extends the <xref:System.Web.UI.LiteralControl> class. It creates an instance of the class named `myLiteralControlClass1` by using the constructor that does not specify the text of the <xref:System.Web.UI.LiteralControl> object. After the object is created, the Text property is used to set the text that it contains.  
  
 [!code-cs[LiteralControlSample#4](~/add/codesnippet/csharp/p-system.web.ui.literalc_1.aspx)]
 [!code-vb[LiteralControlSample#4](~/add/codesnippet/visualbasic/p-system.web.ui.literalc_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>