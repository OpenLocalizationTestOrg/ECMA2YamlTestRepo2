<Type Name="IPostBackDataHandler" FullName="System.Web.UI.IPostBackDataHandler">
  <TypeSignature Language="C#" Value="public interface IPostBackDataHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPostBackDataHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Defines methods that ASP.NET server controls must implement to automatically load postback data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You must implement the IPostBackDataHandler interface when creating a server control that needs to examine form data that is posted back to the server by the client. The contract that this interface defines allows a server control to determine whether its state should be altered as a result of the postback, and to raise the appropriate events. For more information, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates a custom text box server control that implements the IPostBackDataHandler interface. The <xref:System.Web.UI.WebControls.TextBox.Text%2A> property is changed as a result of the postback, and the server control raises a <xref:System.Web.UI.WebControls.TextBox.TextChanged> event after postback data has been loaded.  
  
 [!code-cs[Classic IPostBackDataHandler Example#1](~/add/codesnippet/csharp/t-system.web.ui.ipostbac_0_1.cs)]
 [!code-vb[Classic IPostBackDataHandler Example#1](~/add/codesnippet/visualbasic/t-system.web.ui.ipostbac_0_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="public bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">The key identifier for the control.</param>
        <param name="postCollection">The collection of all incoming name values.</param>
        <summary>When implemented by a class, processes postback data for an ASP.NET server control.</summary>
        <returns>
          <see langword="true" /> if the server control's state changes as a result of the postback; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ASP.NET page framework tracks all the server controls that return `true` to this method call, and then invokes the <xref:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent%2A> method on those controls.  
  
   
  
## Examples  
 The following code example demonstrates a server control that implements a version of the LoadPostData method.  
  
 [!code-vb[Classic IPostBackDataHandler.LoadPostData Example#1](~/add/codesnippet/visualbasic/1a6863ac-1148-4133-b212-_1.vb)]
 [!code-cs[Classic IPostBackDataHandler.LoadPostData Example#1](~/add/codesnippet/csharp/1a6863ac-1148-4133-b212-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="public void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When implemented by a class, signals the server control to notify the ASP.NET application that the state of the control has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RaisePostDataChangedEvent method raises any change events for the server control that implements the <xref:System.Web.UI.IPostBackDataHandler> interface.  
  
   
  
## Examples  
 The following code example demonstrates how a server control can implement the RaisePostDataChangedEvent method.  
  
 [!code-vb[Classic IPostBackDataHandler.RaisePostDataChangedEvent Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.ipostbac_1_1.vb)]
 [!code-cs[Classic IPostBackDataHandler.RaisePostDataChangedEvent Example#1](~/add/codesnippet/csharp/m-system.web.ui.ipostbac_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>