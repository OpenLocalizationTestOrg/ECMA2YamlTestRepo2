<Type Name="IPostBackEventHandler" FullName="System.Web.UI.IPostBackEventHandler">
  <TypeSignature Language="C#" Value="public interface IPostBackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Defines the method ASP.NET server controls must implement to handle postback events.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To create a server control that captures form submission information from the browser, you must implement this interface. For more information on how to use this interface, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example defines a custom button server control that causes postback, captures the postback event using the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method, and raises a `Click` event on the server.  
  
 [!code-cs[Classic IPostBackEventHandler Example#1](~/add/codesnippet/csharp/t-system.web.ui.ipostbac_1_1.cs)]
 [!code-vb[Classic IPostBackEventHandler Example#1](~/add/codesnippet/visualbasic/t-system.web.ui.ipostbac_1_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="public void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">A &lt;xref:System.String&gt; that represents an optional event argument to be passed to the event handler.</param>
        <summary>When implemented by a class, enables a server control to process an event raised when a form is posted to the server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The page passes the value of the `eventArgument` parameter to the `RaisePostBackEvent` method of the control that implements the <xref:System.Web.UI.IPostBackEventHandler> interface. This control also renders the HTML element that causes the postback to occur. If the control renders client-side script for postback, the argument from the script is passed in the `eventArgument` parameter. If the postback is caused by a simple submit operation, the `eventArgument` parameter is `null`.  
  
 This method provides the functionality for many events implemented by HTML and Web server controls.  
  
   
  
## Examples  
 The following code example defines a custom button server control that causes postback, captures the postback event using the RaisePostBackEvent method, and raises a `Click` event on the server.  
  
 [!code-cs[Classic IPostBackEventHandler Example#1](~/add/codesnippet/csharp/m-system.web.ui.ipostbac_0_1.cs)]
 [!code-vb[Classic IPostBackEventHandler Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.ipostbac_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>