<Type Name="ServiceReference" FullName="System.Web.UI.ServiceReference">
  <TypeSignature Language="C#" Value="public class ServiceReference" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceReference extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Path")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Registers a Web service for use in a Web page.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To call Web service methods from ECMAScript (JavaScript), you must include a service reference in the ASP.NET page and apply the <xref:System.Web.Script.Services.ScriptServiceAttribute> attribute to the Web service class definition. If you include a service reference to a Web service in the <xref:System.Web.UI.ScriptManager> or <xref:System.Web.UI.ScriptManagerProxy> control inside the ASP.NET page, JavaScript objects will be instantiated in the browser.  
  
 The proxy objects will be used to do the following:  
  
-   Make asynchronous requests in JavaScript to Web service methods,  
  
-   Initialize instances of proxies of server data types, in particular for use as input parameters for invoking Web methods.  
  
> [!NOTE]
>  The ServiceReference control can only be used for services in the same domain.  
  
 You can define the Web service location declaratively by adding an `<asp:ServiceReference>` element to the `<Services>` element inside the `<asp:ScriptManager>` element on the page, and then setting its <xref:System.Web.UI.ServiceReference.Path%2A> attribute, as shown in the following example.  
  
```  
<asp:ScriptManager runat="server" ID="scriptManager">  
  <Services>  
    <asp:ServiceReference Path="~/WebServices/SimpleWebService.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 You might use the <xref:System.Web.UI.ServiceReference.InlineScript%2A> property to indicate whether the proxy generation script is included in the page as an inline script block or is obtained by a separate request.  
  
 You can also programmatically add a ServiceReference object through the <xref:System.Web.UI.ScriptManager.Services%2A?displayProperty=fullName> or <xref:System.Web.UI.ScriptManagerProxy.Services%2A?displayProperty=fullName> collection by using the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method of the <xref:System.Web.UI.ServiceReferenceCollection> class.  
  
   
  
## Examples  
 The following example demonstrates how to add a reference to a Web service in the page markup to call the Web service methods from script.  
  
 [!code-vb[System.Web.Script.Services.ScriptMethodAttribute#5](~/add/codesnippet/visualbasic/t-system.web.ui.servicer_1.aspx)]
 [!code-cs[System.Web.Script.Services.ScriptMethodAttribute#5](~/add/codesnippet/csharp/t-system.web.ui.servicer_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.ServiceReference" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The location of the Web service.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.ServiceReference" /> class with a specified path.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProxyScript">
      <MemberSignature Language="C#" Value="protected virtual string GetProxyScript (System.Web.UI.ScriptManager scriptManager, System.Web.UI.Control containingControl);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetProxyScript(class System.Web.UI.ScriptManager scriptManager, class System.Web.UI.Control containingControl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" />
        <Parameter Name="containingControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="scriptManager">The <see cref="T:System.Web.UI.ScriptManager" /> control on the page.</param>
        <param name="containingControl">A <see cref="T:System.Web.UI.Control" /> object.</param>
        <summary>Provides a proxy script from a derived <see cref="T:System.Web.UI.ServiceReference" /> object that can be overridden as a customization.</summary>
        <returns>The proxy script.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `containingControl` parameter is the <xref:System.Web.UI.ScriptManager> object or <xref:System.Web.UI.ScriptManagerProxy> object on which the <xref:System.Web.UI.ServiceReference> object is defined. It should be used as a basis for relative URL resolution.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProxyUrl">
      <MemberSignature Language="C#" Value="protected virtual string GetProxyUrl (System.Web.UI.ScriptManager scriptManager, System.Web.UI.Control containingControl);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetProxyUrl(class System.Web.UI.ScriptManager scriptManager, class System.Web.UI.Control containingControl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" />
        <Parameter Name="containingControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="scriptManager">The <see cref="T:System.Web.UI.ScriptManager" /> control on the page.</param>
        <param name="containingControl">A <see cref="T:System.Web.UI.Control" /> object.</param>
        <summary>Provides a proxy URL from a derived <see cref="T:System.Web.UI.ServiceReference" /> object can be overridden as a customization.</summary>
        <returns>A proxy URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `containingControl` parameter is the <xref:System.Web.UI.ScriptManager> object or <xref:System.Web.UI.ScriptManagerProxy> object on which the <xref:System.Web.UI.ServiceReference> object is defined and should be used as a basis for relative URL resolution.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InlineScript">
      <MemberSignature Language="C#" Value="public virtual bool InlineScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InlineScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the proxy generation script is included in the page as an inline script block or is obtained by a separate request.</summary>
        <value>
          <see langword="true" /> if the proxy generation script is included as an inline script block in the page; <see langword="false" /> if the proxy generation script is obtained by a separate request. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the InlineScript property is not declared, the default value is `false`.  
  
 When InlineScript is set to `false`, the script for generating the ECMAScript (JavaScript) proxies is downloaded as a separate script file by an additional request to the server. If you use browser caching, this option is helpful when multiple Web pages use the same service reference.  
  
 When InlineScript is set to `true`, the proxy generation script is included as an inline script block in the page. This can improve server performance by reducing the number of network requests, especially if there are many service references in the page and other pages do not reference the same services. In addition, the <xref:System.Web.UI.ServiceReference.Path%2A> property must be set to a relative path when InlineScript is set to `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public virtual string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the path of the referenced Web service.</summary>
        <value>The path of the referenced Web service.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Path property can point only to local Web services. In other words, this property can only point to Web services in the same domain as your AJAX-enabled ASP.NET Web application. Path can be a relative, application-relative, domain-relative, or absolute path.  
  
 If the <xref:System.Web.UI.ServiceReference.InlineScript%2A> property is set to `true`, then you must use a relative path that points to the same Web application as the page that contains the <xref:System.Web.UI.ServiceReference> instance.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the value of the &lt;xref:System.Web.UI.ServiceReference.Path%2A&gt; property or the type name.</summary>
        <returns>The value of the &lt;xref:System.Web.UI.ServiceReference.Path%2A&gt; property, if it is defined; otherwise, the value of the &lt;xref:System.Reflection.MemberInfo.Name%2A&gt; property for the class.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>