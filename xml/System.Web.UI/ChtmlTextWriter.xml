<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Writes a series of cHTML-specific characters and text to the output stream of an ASP.NET server control. The ChtmlTextWriter class provides formatting capabilities that ASP.NET server controls use when rendering cHTML content to clients.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML, or cHTML, is a subset of HTML 2.0, HTML 3.2, and HTML 4.0, and is designed to render on devices with limited memory and CPU power, along with small display screens, limited formatting capabilities, and a limited number of input options (such as a cell phone touch pad). Therefore, cHTML does not support the following:  
  
-   JPEG images.  
  
-   Tables.  
  
-   Image maps.  
  
-   Multiple character fonts and styles.  
  
-   Background colors and images.  
  
-   Frames.  
  
-   Style sheets.  
  
 The ChtmlTextWriter class derives from the <xref:System.Web.UI.Html32TextWriter> class and much of its functionality is provided by the <xref:System.Web.UI.Html32TextWriter> and the base class for all markup text writers, which is the <xref:System.Web.UI.HtmlTextWriter> class.  
  
   
  
## Examples  
 The following code example demonstrates how to create a class named `CustomChtmlTextWriter` that is derived from the ChtmlTextWriter class. It creates two constructors and overrides the <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> method to prevent the `bgcolor` style attribute from being written to the output stream of the ChtmlTextWriter object. It also creates a class named `ChtmlCustomPageAdapter` that defines one method, `CreateCustomChtmlTextWriter`, which creates and returns an instance of the `CustomChtmlTextWriter` class. The `CustomChtmlTextWriter` then renders cHTML content for a page to devices with browsers that use cHTML markup.  
  
 [!code-cs[System.Web.UI.ChtmlTextWriter_Sample4#1](~/add/codesnippet/csharp/t-system.web.ui.chtmltex_1.cs)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/add/codesnippet/visualbasic/t-system.web.ui.chtmltex_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The &lt;xref:System.IO.TextWriter&gt; that renders the markup content.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.ChtmlTextWriter" /> class that uses the <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> constant to indent lines.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.ChtmlTextWriter> class has two constructors, which is standard for all classes that derive directly or indirectly from the <xref:System.Web.UI.HtmlTextWriter> class.  
  
 The ChtmlTextWriter constructor, which takes an instance of the <xref:System.IO.TextWriter> class as a parameter, calls the second constructor and passes it two parameter values:  
  
-   The <xref:System.IO.TextWriter>.  
  
-   The string value that is specified in the <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> field, which defines the tab spacing that is used by the XHTML text writer.  
  
   
  
## Examples  
 The following code example demonstrates how to create a class named `ChtmlCustomPageAdapter` and defines one method, `CreateCustomChtmlTextWriter`, which creates and returns an instance of the `CustomChtmlTextWriter` class. The `CustomChtmlTextWriter` then renders cHTML content for pages to devices with browsers that use cHTML markup.  
  
 This code example is part of a larger example provided for the <xref:System.Web.UI.ChtmlTextWriter> class.  
  
 [!code-cs[System.Web.UI.ChtmlTextWriter_Sample4#3](~/add/codesnippet/csharp/m-system.web.ui.chtmltex_2_1.cs)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/add/codesnippet/visualbasic/m-system.web.ui.chtmltex_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">The &lt;xref:System.IO.TextWriter&gt; that renders the markup content.</param>
        <param name="tabString">The number of spaces defined in the &lt;xref:System.Web.UI.HtmlTextWriter.Indent%2A&gt;.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.ChtmlTextWriter" /> class with the specified line indentation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ChtmlTextWriter constructor, which takes both an instance of the <xref:System.IO.TextWriter> class and a string as parameters, calls the <xref:System.Web.UI.Html32TextWriter> constructor that takes the same parameters when it creates an instance of the <xref:System.Web.UI.ChtmlTextWriter> class.  
  
   
  
## Examples  
 The following code example demonstrates how to create a custom class named `CustomChtmlTextWriter` that is derived from the <xref:System.Web.UI.ChtmlTextWriter> class. It creates two constructors that you can use to create an instance of the custom class with the same pattern as all classes that derive, directly or indirectly, from the <xref:System.Web.UI.HtmlTextWriter> class.  
  
 [!code-cs[System.Web.UI.ChtmlTextWriter_Sample4#1](~/add/codesnippet/csharp/m-system.web.ui.chtmltex_0_1.cs)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/add/codesnippet/visualbasic/m-system.web.ui.chtmltex_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">The cHTML element to add the attribute to.</param>
        <param name="attributeName">The attribute to add to `elementName`.</param>
        <summary>Adds an attribute to a cHTML element of the <see cref="T:System.Web.UI.ChtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AddRecognizedAttribute method adds an attribute to a cHTML element. The recognized attribute is stored in the recognized attributes <xref:System.Collections.Hashtable> collection of the <xref:System.Web.UI.ChtmlTextWriter> object that is referenced by the <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Collections.Hashtable" /> object of globally suppressed attributes that cannot be rendered on cHTML elements.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> of globally suppressed cHTML attributes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following list shows the globally suppressed attributes that are set when a new instance of the <xref:System.Web.UI.ChtmlTextWriter> class is created.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">The cHTML attribute to render.</param>
        <param name="value">The value assigned to `name`.</param>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associated with `name`.</param>
        <summary>Determines whether the specified cHTML attribute and its value are rendered to the requesting page. You can override the OnAttributeRender method in classes that derive from the <see cref="T:System.Web.UI.ChtmlTextWriter" /> class to filter out attributes that you do not want to render on devices that support cHTML.</summary>
        <returns>
          <see langword="true" /> to write the attribute and its value to the <see cref="T:System.Web.UI.ChtmlTextWriter" /> output stream; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the OnAttributeRender method prevents globally suppressed attributes that are listed in the <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> property and element-specific, suppressed attributes that are listed in the <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> property from being written to the output stream. You can override the behavior of the OnAttributeRender method in classes that are derived from the <xref:System.Web.UI.ChtmlTextWriter> class.  
  
   
  
## Examples  
 The following code example demonstrates how to use a custom class that overrides the OnAttributeRender method to prevent the `bgcolor` attribute from being written to the cHTML output stream. It then calls the functionality that is provided by the base OnAttributeRender method from the <xref:System.Web.UI.ChtmlTextWriter> class to ensure that its default behavior is used, too.  
  
 This code example is part of a larger example provided for the <xref:System.Web.UI.ChtmlTextWriter> class.  
  
 [!code-cs[System.Web.UI.ChtmlTextWriter_Sample4#2](~/add/codesnippet/csharp/21e7f799-357a-4596-847b-_1.cs)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/add/codesnippet/visualbasic/21e7f799-357a-4596-847b-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">A string containing the name of the style attribute to render.</param>
        <param name="value">A string containing the value that is assigned to `name`.</param>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associated with `name`.</param>
        <summary>Determines whether the specified cHTML markup style attribute and its value can be rendered to the current markup element.</summary>
        <returns>
          <see langword="true" /> if the style can be rendered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnStyleAttributeRender method returns `false` when `key` is equal to the <xref:System.Web.UI.HtmlTextWriterStyle> field and the value is `"line-through"`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">A string containing the name of the cHTML element to render.</param>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> associated with `name`.</param>
        <summary>Determines whether the specified cHTML markup element is rendered to the requesting page.</summary>
        <returns>
          <see langword="true" /> if the specified cHTML markup element can be rendered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the cHTML element is a `span` element, the OnTagRender method returns `false`. For all other tags, it returns `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Collections.Hashtable" /> object of recognized attributes that could be rendered on cHTML elements.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> of recognized cHTML attributes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> method to add recognized attributes to the recognized attributes collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">The cHTML element to remove an attribute from.</param>
        <param name="attributeName">The attribute to remove from `elementName`.</param>
        <summary>Removes an attribute of a cHTML element of the <see cref="T:System.Web.UI.ChtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RemoveRecognizedAttribute method removes an attribute from a cHTML element. The recognized attribute is removed from the recognized attributes <xref:System.Collections.Hashtable> collection of the <xref:System.Web.UI.ChtmlTextWriter> object that is referenced by the <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Collections.Hashtable" /> object of user-specified suppressed attributes that are not rendered on cHTML elements.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> of suppressed cHTML attributes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> method to add attributes to the suppressed attributes collection.  
  
 The following list shows the default suppressed attributes that are set for a `div` element when a new instance of the <xref:System.Web.UI.ChtmlTextWriter> class is created.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 The following list shows the default suppressed attributes that are set for a `span` element when a new instance of the <xref:System.Web.UI.ChtmlTextWriter> class is created.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes a <see langword="br" /> element to the cHTML output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the WriteBreak method to insert a line break into a stream of cHMTL.  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to create a cHTML class and custom properties. The second code example demonstrates how to use a custom class on a Web page.  
  
 To use the custom `ChtmlSimplelabelAdapter` adapter, add the following code to either the appropriate machine-wide file in the subdirectory for the browser of the .NET Framework configuration directory or to a custom browser file in the App_Browsers directory under the Web application root.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 The following code example demonstrates how to create a cHTML adapter class named `ChtmlSimpleLabelAdapter` for a class named `SimpleLabel`. It creates a custom `Control` property that allows the `ChtmlSimpleLabelAdapter` class to access the members of the `SimpleLabel` class, and then overrides the <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> method. In the override, the following things occur:  
  
-   It creates a reference to a <xref:System.Web.UI.ChtmlTextWriter> object, named `w`, which is derived from the <xref:System.Web.UI.HtmlTextWriter> object that is passed as the `writer` parameter for the <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> method.  
  
-   It creates a string and sets it equal to the `SimpleLabel.Text` value.  
  
-   It calls the <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> method to apply the styles that are defined by the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property of the label to the cHTML output stream.  
  
-   It writes the `Text` property value to the stream and closes the style block by calling the <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> method.  
  
-   It calls the WriteBreak method to render a `br` element to the output stream after the text and styles render.  
  
 [!code-cs[System.Web.UI.ChtmlTextWriter_Sample1#2](~/add/codesnippet/csharp/m-system.web.ui.chtmltex_1_1.cs)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/add/codesnippet/visualbasic/m-system.web.ui.chtmltex_1_1.vb)]  
  
 The following example demonstrates how to use the `SimpleLabel` class in a Web page.  
  
 [!code-cs[System.Web.UI.ChtmlTextWriter_Sample1#3](~/add/codesnippet/csharp/m-system.web.ui.chtmltex_1_2.aspx)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/add/codesnippet/visualbasic/m-system.web.ui.chtmltex_1_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text string to encode and write to the output stream.</param>
        <summary>Encodes the specified text for the requesting device, and then writes it to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the text parameter passed into the WriteEncodedText method is `null` or has a length of zero, then nothing is written.  
  
 Use the WriteEncodedText method when a string contains angle brackets (\< or >) or an ampersand (&) and you want to ensure that they are rendered correctly on the requesting device.  
  
 The WriteEncodedText method uses the base class's <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>