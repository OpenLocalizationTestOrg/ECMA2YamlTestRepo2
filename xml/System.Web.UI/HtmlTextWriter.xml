<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Writes markup characters and text to an ASP.NET server control output stream. This class provides formatting capabilities that ASP.NET server controls use when rendering markup to clients.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The HtmlTextWriter class is used to render HTML 4.0 to desktop browsers. The HtmlTextWriter is also the base class for all markup writers in the <xref:System.Web.UI> namespace, including the <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>, and <xref:System.Web.UI.XhtmlTextWriter> classes. These classes are used to write the elements, attributes, and style and layout information for different types of markup. In addition, these classes are used by the page and control adapter classes that are associated with each markup language.  
  
 In most circumstances, ASP.NET automatically uses the appropriate writer for the requesting device. However, if you create a custom text writer or if you want to specify a particular writer to render a page for a specific device, you must map the writer to the page in the `controlAdapters` section of the application .browser file.  
  
   
  
## Examples  
 The following code example shows how to override the <xref:System.Web.UI.Control.Render%2A> method of a custom control that is derived from the <xref:System.Web.UI.Control> class. The code example illustrates how to use various HtmlTextWriter methods, properties, and fields.  
  
 [!code-cs[MarkupTextWriter_Samples1#1](~/add/codesnippet/csharp/t-system.web.ui.htmltext_1_1.cs)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/add/codesnippet/visualbasic/t-system.web.ui.htmltext_1_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The &lt;xref:System.IO.TextWriter&gt; instance that renders the markup content.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlTextWriter" /> class that uses a default tab string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The HtmlTextWriter overload of the HtmlTextWriter constructor uses the <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> constant when indentation of a line is necessary. It calls the <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> overload to initialize the new instance.  
  
   
  
## Examples  
 The following code example demonstrates how to use the HtmlTextWriter constructor to create a custom <xref:System.Web.UI.HtmlTextWriter> object named `StyledLabelHtmlWriter.` When the `MyPage` custom class, which is derived from the <xref:System.Web.UI.Page> class, is requested by a client browser, it uses the `StyledLabelHtmlWriter` class to render its content to the output stream.  
  
 [!code-vb[HtmlTextWriter_Methods3#10](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_26_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods3#10](~/add/codesnippet/cpp/m-system.web.ui.htmltext_26_1.cpp)]
 [!code-cs[HtmlTextWriter_Methods3#10](~/add/codesnippet/csharp/m-system.web.ui.htmltext_26_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">The &lt;xref:System.IO.TextWriter&gt; that renders the markup content.</param>
        <param name="tabString">The string to use to render a line indentation.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlTextWriter" /> class with a specified tab string character.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The HtmlTextWriter overload of the HtmlTextWriter constructor uses `tabString` when indentation of a line is necessary. It calls the <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=fullName> base constructor to initialize the new instance.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> constructor to create a custom <xref:System.Web.UI.HtmlTextWriter> object named `StyledLabelHtmlWriter.` When the `MyPage` custom class, which is derived from the <xref:System.Web.UI.Page> class, is requested by a client browser, it uses the `StyledLabelHtmlWriter` class to render its content to the output stream.  
  
 [!code-vb[HtmlTextWriter_Methods3#10](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_31_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods3#10](~/add/codesnippet/cpp/m-system.web.ui.htmltext_31_1.cpp)]
 [!code-cs[HtmlTextWriter_Methods3#10](~/add/codesnippet/csharp/m-system.web.ui.htmltext_31_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A string containing the name of the attribute to add.</param>
        <param name="value">A string containing the value to assign to the attribute.</param>
        <summary>Adds the specified markup attribute and value to the opening tag of the element that the <see cref="T:System.Web.UI.HtmlTextWriter" /> object creates with a subsequent call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AddAttribute overload of the AddAttribute method if the attribute is not one of the <xref:System.Web.UI.HtmlTextWriterAttribute> values, or if the attribute is not known until run time.  
  
 For an instance of any given markup element, the <xref:System.Web.UI.HtmlTextWriter> class maintains a list of attributes for that element. When the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method is called, any attributes added by the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method are rendered to the opening tag of the element. The list of attributes is then cleared from the <xref:System.Web.UI.HtmlTextWriter> object.  
  
 The coding pattern for rendering markup elements is as follows:  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method to add any attributes to the element.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method.  
  
-   Use other methods as needed to render the content found between the element's opening and closing tags.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates how to call the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method before calling the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method. The code calls two different overloads of <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> and two different overloads of <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> before it calls the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method to render a `<span>` element to the output stream. The AddAttribute method is used to define the custom attribute named `CustomAttribute` and the custom value named `CustomAttributeValue` for the `<span>` element that this code renders.  
  
 [!code-cs[MarkupTextWriter_Samples1#2](~/add/codesnippet/csharp/m-system.web.ui.htmltext_42_1.cs)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_42_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">An <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> that represents the markup attribute to add to the output stream.</param>
        <param name="value">A string containing the value to assign to the attribute.</param>
        <summary>Adds the markup attribute and the attribute value to the opening tag of the element that the <see cref="T:System.Web.UI.HtmlTextWriter" /> object creates with a subsequent call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AddAttribute overload of the AddAttribute method to render a standard markup attribute.  
  
 For an instance of any given markup element, the <xref:System.Web.UI.HtmlTextWriter> class maintains a list of attributes for that element. When the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method is called, any attributes that are added by the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method are rendered to the opening tag of the element. The list of attributes is then cleared from the <xref:System.Web.UI.HtmlTextWriter>.  
  
 The coding pattern for rendering markup elements is as follows:  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method to add any attributes to the element.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method.  
  
-   Use other methods as needed to render the content found between the element's opening and closing tags.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method.  
  
   
  
## Examples  
 The following code example shows how to use the AddAttribute overload of the AddAttribute method to add an `Onclick` attribute to a markup element, and then set its value to the following ECMAScript code:  
  
```  
alert('Hello');  
```  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/add/codesnippet/visualbasic/f7056fa3-ef89-45d7-9cdd-_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#1](~/add/codesnippet/csharp/f7056fa3-ef89-45d7-9cdd-_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/add/codesnippet/cpp/f7056fa3-ef89-45d7-9cdd-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">A string containing the name of the attribute to add.</param>
        <param name="value">A string containing the value to assign to the attribute.</param>
        <param name="fEndode">
          <see langword="true" /> to encode the attribute and its value; otherwise, <see langword="false" />.</param>
        <summary>Adds the specified markup attribute and value to the opening tag of the element that the <see cref="T:System.Web.UI.HtmlTextWriter" /> object creates with a subsequent call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method, with optional encoding.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AddAttribute overload of the AddAttribute method if the attribute is not one of the <xref:System.Web.UI.HtmlTextWriterAttribute> values, or if the attribute is not known until run time and encoding is needed.  
  
 For an instance of any given markup element, the <xref:System.Web.UI.HtmlTextWriter> class maintains a list of attributes for that element. When the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method is called, any attributes added by the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method are rendered to the opening tag of the element. The list of attributes is then cleared from the <xref:System.Web.UI.HtmlTextWriter> object.  
  
 Use the AddAttribute method with `fEncode` set to `true`, if the attribute can possibly contain a quotation mark ("), a less than sign (<), or an ampersand (&). The method call will encode the attribute to meet the requirements of the requesting device. You can set `fEncode` to `false`, if you know that none of these characters will be generated, or if you know that the attribute is already encoded.  
  
 The coding pattern for rendering markup elements is as follows:  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method to add any attributes to the element.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method.  
  
-   Use other methods as needed to render the content found between the element's opening and closing tags.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method.  
  
   
  
## Examples  
 The following code example shows how to use the AddAttribute overload of the AddAttribute method to ensure that a custom attribute, named `myattribute`, and its value are not encoded for an `<img>` element.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/visualbasic/42cbe4de-f3a3-40dc-8e06-_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/csharp/42cbe4de-f3a3-40dc-8e06-_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/cpp/42cbe4de-f3a3-40dc-8e06-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">A string containing the name of the attribute to add.</param>
        <param name="value">A string containing the value to assign to the attribute.</param>
        <param name="key">An <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> that represents the attribute.</param>
        <summary>Adds the specified markup attribute and value, along with an <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> enumeration value, to the opening tag of the element that the <see cref="T:System.Web.UI.HtmlTextWriter" /> object creates with a subsequent call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AddAttribute overload of the AddAttribute method only when inheriting from the <xref:System.Web.UI.HtmlTextWriter> class. It enables you to create new `name` and `key` pairs for attributes.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">An <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> that represents the markup attribute to add to the output stream.</param>
        <param name="value">A string containing the value to assign to the attribute.</param>
        <param name="fEncode">
          <see langword="true" /> to encode the attribute and its value; otherwise, <see langword="false" />.</param>
        <summary>Adds the markup attribute and the attribute value to the opening tag of the element that the <see cref="T:System.Web.UI.HtmlTextWriter" /> object creates with a subsequent call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method, with optional encoding.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AddAttribute overload of the AddAttribute method to render a standard markup attribute, with optional encoding.  
  
 For an instance of any given markup element, the <xref:System.Web.UI.HtmlTextWriter> class maintains a list of attributes for that element. When the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method is called, any attributes added by the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> are rendered to the opening tag of the element. The list of attributes is then cleared from the <xref:System.Web.UI.HtmlTextWriter> object.  
  
 Use the AddAttribute method with `fEncode` set to `true`, if the attribute can possibly contain a quotation mark ("), a less than sign (<), or an ampersand (&). The method call will encode the attribute to meet the requirements of the requesting device. You can set `fEncode` to `false`, if you know that none of these characters will be generated, or if you know that the attribute is already encoded.  
  
 The coding pattern for rendering markup elements is as follows:  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method to add any attributes to the element.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method.  
  
-   Use other methods as needed to render the content found between the element's opening and closing tags.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates how to use the AddAttribute method to ensure that the string value that is assigned to an `Alt` attribute for an `<img>` element is encoded for the requesting device.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/visualbasic/5fc4f314-c4b1-473d-abfa-_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/csharp/5fc4f314-c4b1-473d-abfa-_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/cpp/5fc4f314-c4b1-473d-abfa-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A string that contains the style attribute to add.</param>
        <param name="value">A string that contains the value to assign to the attribute.</param>
        <summary>Adds the specified markup style attribute and the attribute value to the opening markup tag created by a subsequent call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AddStyleAttribute overload of the AddStyleAttribute method when the style is not a member of the <xref:System.Web.UI.HtmlTextWriterStyle> enumeration or is not known until run time.  
  
 The <xref:System.Web.UI.HtmlTextWriter> class maintains a list of styles for the markup elements it renders. When the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method is called, any styles that are added by the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method are rendered to the opening tag of the element. The list of styles is then cleared.  
  
 The coding pattern for rendering markup elements is as follows:  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method to add any style attributes to the element.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method.  
  
-   Use other methods as needed to render the content found between the element opening and closing tags.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method.  
  
   
  
## Examples  
 The following code example shows how to use the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> overload of the AddStyleAttribute method to render `font-size` and `color` style attributes on a `<p>` element. This code example uses the <xref:System.Web.UI.HtmlTextWriter> class to render the contents of the control.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/add/codesnippet/cpp/m-system.web.ui.htmltext_13_1.cpp)]
 [!code-cs[HtmlTextWriter_AddStyleAttribute#1](~/add/codesnippet/csharp/m-system.web.ui.htmltext_13_1.cs)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">An <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> that represents the style attribute to add to the output stream.</param>
        <param name="value">A string that contains the value to assign to the attribute.</param>
        <summary>Adds the markup style attribute associated with the specified <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> value and the attribute value to the opening markup tag created by a subsequent call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AddStyleAttribute overload of the AddStyleAttribute method when the style is a member of the <xref:System.Web.UI.HtmlTextWriterStyle> enumeration and is known before run time.  
  
 The <xref:System.Web.UI.HtmlTextWriter> class maintains a list of styles for the markup elements it renders. When the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method is called, any styles added by the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method are rendered to the opening tag of the element. The list of styles is then cleared.  
  
 The coding pattern for rendering markup elements is as follows:  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method to add any style attributes to the element.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method.  
  
-   Use other methods as needed to render the content found between the element opening and closing tags.  
  
-   Use the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates how to use part of an override of the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method in a class derived from the <xref:System.Web.UI.HtmlTextWriter> class. The code checks whether a `<Label>` element is being rendered. If so, the <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> method is called to check whether a `Color` style attribute has been defined for the `<Label>` element. If a `Color` attribute has not been defined, the code calls this overload of the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method to add the `Color` attribute to the style attribute, and then set its value to `red`.  
  
 [!code-vb[HtmlTextWriter_Methods3#4](~/add/codesnippet/visualbasic/da7f284f-e06a-4e07-bda6-_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods3#4](~/add/codesnippet/cpp/da7f284f-e06a-4e07-bda6-_1.cpp)]
 [!code-cs[HtmlTextWriter_Methods3#4](~/add/codesnippet/csharp/da7f284f-e06a-4e07-bda6-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">A string that contains the style attribute to be added.</param>
        <param name="value">A string that contains the value to assign to the attribute.</param>
        <param name="key">An <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> that represents the style attribute to add.</param>
        <summary>Adds the specified markup style attribute and the attribute value, along with an <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> enumeration value, to the opening markup tag created by a subsequent call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AddStyleAttribute overload of the AddStyleAttribute method only when inheriting from the <xref:System.Web.UI.HtmlTextWriter> class. It enables you to create new `name` and `value` pairs for <xref:System.Web.UI.HtmlTextWriterStyle> attributes.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies an <see cref="T:System.Web.UI.HtmlTextWriter" /> object, or an object of a derived class, that a control is about to be rendered.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlTextWriter> class implementation of the BeginRender method has no functionality. You must override the BeginRender method in a class derived from <xref:System.Web.UI.HtmlTextWriter> to provide your own rendering functionality. For example, in a markup language that might require `<p>` elements to be rendered immediately ahead of a control, but where the need for the `<p>` element is determined earlier, you could use the BeginRender override.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the <see cref="T:System.Web.UI.HtmlTextWriter" /> object and releases any system resources associated with it.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation of the Close method calls the <xref:System.IO.TextWriter.Close%2A?displayProperty=fullName> base method.  
  
 Following a call to the Close method, any operations on the <xref:System.Web.UI.HtmlTextWriter> object might throw exceptions because all its resources have been released.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents a single tab character.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The single tab is represented by the ASCII 9 character.  
  
   
  
## Examples  
 The following code example demonstrates how to create a constructor that takes a <xref:System.IO.TextWriter> object as a parameter and passes the DefaultTabString field as a parameter argument to a second version of the constructor. When this constructor is called from code, the DefaultTabString field defines the indentation policy for the instance of the markup writer that is used by a page or an adapter.  
  
 [!code-cs[MarkupTextWriter_Methods3#1](~/add/codesnippet/csharp/f-system.web.ui.htmltext_8_1.cs)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the quotation mark (") character.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DoubleQuoteChar field is used by the <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> method to close an attribute.  
  
   
  
## Examples  
 The following code example shows how to render a `border` attribute for a `<table>` element. The code calls the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method to render the attribute and its value and uses the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method to render the <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> and DoubleQuoteChar fields.  
  
 This code example renders the following markup:  
  
 `border="1"`  
  
 [!code-vb[MarkupTextWriter_Constants#6](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_7_1.vb)]
 [!code-cs[MarkupTextWriter_Constants#6](~/add/codesnippet/csharp/f-system.web.ui.htmltext_7_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">A string containing the attribute value to encode.</param>
        <param name="fEncode">
          <see langword="true" /> to encode the attribute value; otherwise, <see langword="false" />.</param>
        <summary>Encodes the value of the specified markup attribute based on the requirements of the <see cref="T:System.Web.HttpRequest" /> object of the current context.</summary>
        <returns>A string containing the encoded attribute value, <see langword="null" /> if <paramref name="value" /> is empty, or the unencoded attribute value if <paramref name="fEncode" /> is <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EncodeAttributeValue overload of the <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> method if the attribute is not an <xref:System.Web.UI.HtmlTextWriterAttribute> enumeration value or is not known until run time.  
  
 The <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> method removes double quotation marks ("), ampersands (&), and less than signs (<) so that invalid tags are not generated, regardless of the input. The actual encoding is performed by the <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> method.  
  
   
  
## Examples  
 The following code example shows how to call the EncodeAttributeValue method as a parameter in an <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method call, and then encodes a `color:blue` style attribute value.  
  
 [!code-cs[HtmlTextWriter_Methods#5](~/add/codesnippet/csharp/ca3d7869-90f7-46e1-a9f1-_1.cs)]
 [!code-vb[HtmlTextWriter_Methods#5](~/add/codesnippet/visualbasic/ca3d7869-90f7-46e1-a9f1-_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods#5](~/add/codesnippet/cpp/ca3d7869-90f7-46e1-a9f1-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">An <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> representing the markup attribute.</param>
        <param name="value">A string containing the attribute value to encode.</param>
        <summary>Encodes the value of the specified markup attribute based on the requirements of the <see cref="T:System.Web.HttpRequest" /> object of the current context.</summary>
        <returns>A string containing the encoded attribute value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The EncodeAttributeValue method removes double quotation marks ("), ampersands (&), and less than signs (<) so that invalid tags are not generated, regardless of the input. The actual encoding is performed by the <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">A string containing the URL to encode.</param>
        <summary>Performs minimal URL encoding by converting spaces in the specified URL to the string "%20".</summary>
        <returns>A string containing the encoded URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL encoding of a character consists of a percent symbol (%), followed by the two-digit hexadecimal representation (case-insensitive) of the ISO-Latin code point for the character. The hexadecimal representation of a space is 20.  
  
   
  
## Examples  
 The following code example demonstrates how to call the EncodeUrl method to convert any spaces in the URL that is passed as a parameter in an <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method call.  
  
 [!code-cs[HtmlTextWriter_Methods#6](~/add/codesnippet/csharp/m-system.web.ui.htmltext_41_1.cs)]
 [!code-vb[HtmlTextWriter_Methods#6](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_41_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods#6](~/add/codesnippet/cpp/m-system.web.ui.htmltext_41_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the encoding that the <see cref="T:System.Web.UI.HtmlTextWriter" /> object uses to write content to the page.</summary>
        <value>The &lt;xref:System.Text.Encoding&gt; in which the markup is written to the page.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Encoding property obtains its value from the base <xref:System.IO.TextWriter> object.  
  
   
  
## Examples  
 The following code example shows how to use the Encoding property to write the type of encoding that a custom control uses to render text to the page that contains it.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/add/codesnippet/cpp/p-system.web.ui.htmltext_3_1.cpp)]
 [!code-cs[HtmlTextWriter_Properties#2](~/add/codesnippet/csharp/p-system.web.ui.htmltext_3_1.cs)]
 [!code-vb[HtmlTextWriter_Properties#2](~/add/codesnippet/visualbasic/p-system.web.ui.htmltext_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies an <see cref="T:System.Web.UI.HtmlTextWriter" /> object, or an object of a derived class, that a control has finished rendering. You can use this method to close any markup elements opened in the &lt;xref:System.Web.UI.HtmlTextWriter.BeginRender%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlTextWriter> class implementation of the EndRender method has no functionality. You must override EndRender in a class derived from the <xref:System.Web.UI.HtmlTextWriter> class to provide your own rendering functionality.  
  
 You can use the EndRender method to close any markup elements opened in the <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the left angle bracket and slash mark (&lt;/) of the closing tag of a markup element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The EndTagLeftChars field is used by the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method to construct markup element end tags.  
  
   
  
## Examples  
 The following code example shows how to render the closing tag of a `<table>` markup element by using the EndTagLeftChars and the <xref:System.Web.UI.HtmlTextWriter.TagRightChar> fields as parameter values in calls to the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method.  
  
 This code example renders the following markup:  
  
 `</table>`  
  
 [!code-vb[MarkupTextWriter_Constants#4](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_10_1.vb)]
 [!code-cs[MarkupTextWriter_Constants#4](~/add/codesnippet/csharp/f-system.web.ui.htmltext_10_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> that specifies the layout and formatting to begin applying to the block of markup.</param>
        <summary>Writes the opening tag of a <see langword="&lt;span&gt;" /> element that contains attributes that implement the layout and character formatting of the specified style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EnterStyle method to apply styles, such as background color or border width, to a block of markup.  
  
 The EnterStyle and <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> methods allow a device adapter or control to create markup that uses the character formatting of the specified style. Use the same value for `style` in the EnterStyle method that you use in the corresponding <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> method.  
  
 The EnterStyle overload of the EnterStyle method renders the opening tag of a `<span>` element. This method then adds the necessary attributes and style attributes to the opening tag of the `<span>` element to display the settings specified by the <xref:System.Web.UI.WebControls.Style> object. If you want to render a different markup element to contain the attributes and style attributes, use the <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> overload.  
  
   
  
## Examples  
 The following code example demonstrates how to use a custom class named `TextSample`, derived from the <xref:System.Web.UI.WebControls.WebControl> class, that uses the EnterStyle method to apply a <xref:System.Web.UI.WebControls.Style.ForeColor%2A> style to a string of text.  
  
 The EnterStyle method renders the HTML `<span style="color:Navy;">`. The <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> method call closes the `<span>` element after the text has been rendered.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_43_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> that specifies the layout and formatting to begin applying to the block of markup.</param>
        <param name="tag">An <see cref="T:System.Web.UI.HtmlTextWriterTag" /> that specifies the opening tag of the markup element that will contain the style object specified in `style`.</param>
        <summary>Writes the opening tag of a markup element that contains attributes that implement the layout and character formatting of the specified style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EnterStyle method to apply styles, such as background color or border width, to a block of markup.  
  
 The EnterStyle and <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> methods allow a device adapter or control to create markup that uses the character formatting of the specified style. Use the same value for `style` in the EnterStyle method that you use in the corresponding <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> method.  
  
 The <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> overload of the EnterStyle method renders the opening tag of the element specified by the `tag` parameter. The EnterStyle method then adds the necessary attributes and style attributes to the opening tag of the element to display the settings that are specified by the <xref:System.Web.UI.WebControls.Style> object. Use the <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> overload to render the opening tag of a `<span>` element.  
  
   
  
## Examples  
 The following code example demonstrates how to use a custom class named `TextSample`, derived from the <xref:System.Web.UI.WebControls.WebControl> class, that uses the <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> method to apply a <xref:System.Web.UI.WebControls.Style.ForeColor%2A> style to a string of text.  
  
 The <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> method renders the HTML`<span style="color:Navy;">`. The <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> method call closes the `<span>` element after the text has been rendered.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/add/codesnippet/visualbasic/92807ec1-50d1-4344-bc65-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the equal sign (<see langword="=" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You might want to use the <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> field instead of the EqualsChar field when constructing the opening delimiter of an attribute value.  
  
   
  
## Examples  
 The following code example shows how to render the `src` attribute and part of its value for an `<img>` element. The code uses the EqualsChar field in a <xref:System.Web.UI.HtmlTextWriter.Write%2A> method call to render the equal sign (=) between the `src` attribute and its value.  
  
 This code example renders the following markup:  
  
 `src="/images/`  
  
 [!code-cs[MarkupTextWriter_Constants#10](~/add/codesnippet/csharp/f-system.web.ui.htmltext_2_1.cs)]
 [!code-vb[MarkupTextWriter_Constants#10](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents an equal sign (=) and a double quotation mark (") together in a string (=").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The EqualsDoubleQuoteString field is used by the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> and <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> methods to construct the opening delimiter of attribute values.  
  
   
  
## Examples  
 The following code example shows how to render a `border` attribute for a `<table>` element. The code calls the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method to render the attribute and its value and uses the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method to render the EqualsDoubleQuoteString and <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> fields.  
  
 This code example renders the following markup:  
  
 `border="1"`  
  
 [!code-vb[MarkupTextWriter_Constants#6](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_5_1.vb)]
 [!code-cs[MarkupTextWriter_Constants#6](~/add/codesnippet/csharp/f-system.web.ui.htmltext_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> that specifies the layout and formatting to close.</param>
        <summary>Writes the closing tag of a <see langword="&lt;span&gt;" /> element to end the specified layout and character formatting.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ExitStyle overload of the ExitStyle method renders the closing tag of a `<span>` element after the closing tag of the control, closing the element opened by the corresponding <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> call.  
  
 The ExitStyle and <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> methods allow a device adapter or control to create markup that begins and ends a block by using the character formatting of the specified style. Use the same value for `style` in the <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> method that you use in the corresponding ExitStyle method.  
  
   
  
## Examples  
 The following code example demonstrates how to use a custom class named `TextSample`, derived from the <xref:System.Web.UI.WebControls.WebControl> class, that uses the <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> method to apply a <xref:System.Web.UI.WebControls.Style.ForeColor%2A> style to a string of text.  
  
 The <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> method renders the HTML `<span style="color:Navy;">`. The ExitStyle method call closes the `<span>` element after the text has been rendered.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_32_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> that specifies the layout and formatting to stop applying to the output text.</param>
        <param name="tag">An <see cref="T:System.Web.UI.HtmlTextWriterTag" /> that specifies the closing tag of the markup element that contained the attributes that applied the specified style. This must match the key passed in the corresponding &lt;xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A&gt; call.</param>
        <summary>Writes the closing tag of the specified markup element to end the specified layout and character formatting.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ExitStyle overload of the ExitStyle method renders the closing tag of the element that is specified by `tag` after the closing tag of the control, closing the element that was opened by the corresponding <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> method call.  
  
 The ExitStyle and <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> methods allow a device adapter or control to create markup that begins and ends a block by using the character formatting of the specified style. Use the same value for `style` in the <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> method that you use in the corresponding ExitStyle method.  
  
   
  
## Examples  
 The following code example demonstrates how to use a custom class named `TextSample`, derived from the <xref:System.Web.UI.WebControls.WebControl> class, that uses the <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> method to apply a <xref:System.Web.UI.WebControls.Style.ForeColor%2A> style to a string of text.  
  
 The <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> method renders the HTML `<span style="color:Navy;">`. The <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> method call closes the `<span>` element after the text has been rendered.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/add/codesnippet/visualbasic/5d790280-f115-4c9e-8ee8-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all the markup and style attributes on all properties of the page or Web server control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before attributes are rendered on a markup element, the FilterAttributes method is called. In turn, the FilterAttributes method calls the <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> and <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> methods for each attribute and style to render.  
  
   
  
## Examples  
 The following code example shows how to use a custom class, derived from the <xref:System.Web.UI.HtmlTextWriter> class, that overrides the FilterAttributes method. When called, the FilterAttributes override checks whether the text writer renders any `<label>` or `<a>` elements:  
  
-   If a `<label>` element is being rendered, the FilterAttributes method checks whether a `style` attribute is rendered on the element and, if not, creates a `style` attribute and sets it to `color: blue`.  
  
-   If an `<a>` element is being rendered, the FilterAttributes method determines whether an `href` attribute is included and, if not, adds an `href` to the URL http://www.cohowinery.com.  
  
 [!code-cs[HtmlTextWriter_Methods#4](~/add/codesnippet/csharp/m-system.web.ui.htmltext_16_1.cs)]
 [!code-vb[HtmlTextWriter_Methods#4](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_16_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods#4](~/add/codesnippet/cpp/m-system.web.ui.htmltext_16_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears all buffers for the current <see cref="T:System.Web.UI.HtmlTextWriter" /> object and causes any buffered data to be written to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlTextWriter> class implementation of the Flush method just calls the <xref:System.IO.TextWriter.Flush%2A> base method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">A string that contains the attribute for which to obtain the <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Obtains the corresponding <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> enumeration value for the specified attribute.</summary>
        <returns>The <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> enumeration value for the specified attribute; otherwise, an invalid <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> value if the attribute is not a member of the enumeration.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `attrName` is `null` or an empty string (""), or cannot be found in the table of attribute names, the value -1, typed to an <xref:System.Web.UI.HtmlTextWriterAttribute> object, is returned.  
  
   
  
## Examples  
 The following code example demonstrates how to use a class, derived from the <xref:System.Web.UI.HtmlTextWriter> class, that overrides the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method. The override checks whether `tagKey` is equal to the <xref:System.Web.UI.HtmlTextWriterTag> field, which indicates that a `<font>` markup element will be rendered. If so, the override calls the <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> method to find out whether the `<font>` element contains a <xref:System.Web.UI.HtmlTextWriterAttribute> attribute. If the <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> returns `false`, the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method calls the GetAttributeKey method, which defines the <xref:System.Web.UI.HtmlTextWriterAttribute> and sets its value to `30pt`.  
  
 [!code-cs[HtmlTextWriter_Methods#3](~/add/codesnippet/csharp/m-system.web.ui.htmltext_9_1.cs)]
 [!code-vb[HtmlTextWriter_Methods#3](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_9_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods#3](~/add/codesnippet/cpp/m-system.web.ui.htmltext_9_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">The <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> to obtain the markup attribute name for.</param>
        <summary>Obtains the name of the markup attribute associated with the specified <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> value.</summary>
        <returns>A string containing the name of the markup attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetAttributeName method returns an empty string (""), if `attrKey` is not a valid <xref:System.Web.UI.HtmlTextWriterAttribute> value.  
  
   
  
## Examples  
 The following code example shows how to use the GetAttributeName method to convert a <xref:System.Web.UI.HtmlTextWriterAttribute> enumeration value to its string name.  
  
 [!code-vb[HtmlTextWriter_Methods3#6](~/add/codesnippet/visualbasic/fd0863d4-1999-4326-849f-_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods3#6](~/add/codesnippet/cpp/fd0863d4-1999-4326-849f-_1.cpp)]
 [!code-cs[HtmlTextWriter_Methods3#6](~/add/codesnippet/csharp/fd0863d4-1999-4326-849f-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">The style attribute for which to obtain the <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Obtains the <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> enumeration value for the specified style.</summary>
        <returns>The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> enumeration value corresponding to <paramref name="styleName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetStyleKey method returns the value -1 typed as a <xref:System.Web.UI.HtmlTextWriterStyle> value, if `styleName` does not correspond to any <xref:System.Web.UI.HtmlTextWriterStyle> enumeration value.  
  
   
  
## Examples  
 The following code example demonstrates how to override the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method in a class derived from the <xref:System.Web.UI.HtmlTextWriter> class. The <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> override determines whether a `<label>` markup will be rendered, and, if so, checks the element for a <xref:System.Web.UI.HtmlTextWriterStyle> attribute. If a <xref:System.Web.UI.HtmlTextWriterStyle> attribute has not been defined, the GetStyleKey method is used as the first parameter in a call to the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method to add a <xref:System.Web.UI.HtmlTextWriterStyle> attribute to a `<label>` markup element and set the <xref:System.Web.UI.HtmlTextWriterStyle> attribute to `red`.  
  
 [!code-cs[HtmlTextWriter_Methods#1](~/add/codesnippet/csharp/m-system.web.ui.htmltext_14_1.cs)]
 [!code-vb[HtmlTextWriter_Methods#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_14_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods#1](~/add/codesnippet/cpp/m-system.web.ui.htmltext_14_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> to obtain the style attribute name for.</param>
        <summary>Obtains the markup style attribute name associated with the specified <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> enumeration value.</summary>
        <returns>The style attribute name associated with the <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> enumeration value specified in <paramref name="styleKey" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `styleKey` is not a valid <xref:System.Web.UI.HtmlTextWriterStyle> object, the GetStyleName method returns an empty string ("").  
  
   
  
## Examples  
 The following code example shows how to check whether a `<label>` element is being rendered. If so, it checks whether a <xref:System.Web.UI.HtmlTextWriterStyle> style attribute has been defined on the element. If the attribute has not been defined, the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method is called and the GetStyleName method converts the <xref:System.Web.UI.HtmlTextWriterStyle> enumeration member into its string representation to pass to the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method.  
  
 [!code-vb[HtmlTextWriter_Methods3#4](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_29_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods3#4](~/add/codesnippet/cpp/m-system.web.ui.htmltext_29_1.cpp)]
 [!code-cs[HtmlTextWriter_Methods3#4](~/add/codesnippet/csharp/m-system.web.ui.htmltext_29_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">The markup element for which to obtain the <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</param>
        <summary>Obtains the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value associated with the specified markup element.</summary>
        <returns>The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value; otherwise, if <paramref name="tagName" /> is not associated with a specific <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value, <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `tagName` is `null`, an empty string (""), or cannot be found in the table of markup tag names, the GetTagKey method returns the <xref:System.Web.UI.HtmlTextWriterTag> field.  
  
   
  
## Examples  
 The following code example shows how to override the overload of the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method that takes a string as its parameter. The string is passed to the GetTagKey method, which converts it to the corresponding <xref:System.Web.UI.HtmlTextWriterTag> enumeration member, and then passes that to the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> overload that takes a <xref:System.Web.UI.HtmlTextWriterTag> enumeration value as a parameter.  
  
 [!code-vb[HtmlTextWriter_Methods3#8](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_17_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods3#8](~/add/codesnippet/cpp/m-system.web.ui.htmltext_17_1.cpp)]
 [!code-cs[HtmlTextWriter_Methods3#8](~/add/codesnippet/csharp/m-system.web.ui.htmltext_17_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> to obtain the markup element for.</param>
        <summary>Obtains the markup element associated with the specified <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value.</summary>
        <returns>A string representing the markup element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `tagKey` is not a valid <xref:System.Web.UI.HtmlTextWriterTag> value, the GetTagName method returns an empty string ("").  
  
   
  
## Examples  
 The following code example demonstrates how to close a `<font>` element by using the <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> method. The <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> method calls the GetTagName method to convert the <xref:System.Web.UI.HtmlTextWriterTag> value to a string.  
  
 [!code-vb[HtmlTextWriter_Methods3#7](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_40_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods3#7](~/add/codesnippet/cpp/m-system.web.ui.htmltext_40_1.cpp)]
 [!code-cs[HtmlTextWriter_Methods3#7](~/add/codesnippet/csharp/m-system.web.ui.htmltext_40_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of tab positions to indent the beginning of each line of markup.</summary>
        <value>The number of tab positions to indent each line.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Indentation is performed by writing the string that is specified by the `tabString` parameter of the <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> constructor the number of times that are specified by the Indent property.  
  
 If the Indent property is set to a negative value, it is changed to 0 before being saved.  
  
   
  
## Examples  
 The following code example demonstrates how to increment the value that is assigned to the Indent property when attributes have been added to the opening tag of a `<span>` element and the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method has been called. This increases the indentation for any markup that is rendered inside the `<span>` element.  
  
 [!code-cs[MarkupTextWriter_Samples1#2](~/add/codesnippet/csharp/p-system.web.ui.htmltext_1_1.cs)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/add/codesnippet/visualbasic/p-system.web.ui.htmltext_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text writer that writes the inner content of the markup element.</summary>
        <value>A &lt;xref:System.IO.TextWriter&gt; that writes the inner markup content.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inner markup content is the text found between the opening and closing tags of a markup language element.  
  
 If the InnerWriter property is set to a <xref:System.IO.TextWriter> object that is an instance of the <xref:System.Web.HttpWriter> class, this fact is noted and a separate reference is saved.  
  
   
  
## Examples  
 The following code example shows how to use a custom Web server control, derived from the <xref:System.Web.UI.WebControls.WebControl> class, that overrides the <xref:System.Web.UI.Control.Render%2A> method. It uses the <xref:System.Web.UI.HtmlTextWriter> class to write a `<font>` element. After it writes the opening tag of the element, it uses the InnerWriter property to write the string `"<br> The time on the server:"` and concatenates this string with the value of the <xref:System.DateTime.Now%2A?displayProperty=fullName> property.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/add/codesnippet/cpp/p-system.web.ui.htmltext_0_1.cpp)]
 [!code-cs[HtmlTextWriter_Properties#3](~/add/codesnippet/csharp/p-system.web.ui.htmltext_0_1.cs)]
 [!code-vb[HtmlTextWriter_Properties#3](~/add/codesnippet/visualbasic/p-system.web.ui.htmltext_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associated with the markup attribute.</param>
        <summary>Determines whether the specified markup attribute and its value are rendered during the next call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <returns>
          <see langword="true" /> if the attribute is rendered during the next call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To obtain the value to be assigned to the <xref:System.Web.UI.HtmlTextWriterAttribute> object, use the <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> overload instead of this one.  
  
   
  
## Examples  
 The following code example shows how to use an override of the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method in a class that inherits from the <xref:System.Web.UI.HtmlTextWriter> class. The <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> override checks whether a `<font>` markup element will be rendered. If so, the override calls the IsAttributeDefined method to check whether the `<font>` element contains a <xref:System.Web.UI.HtmlTextWriterAttribute> attribute. If not, the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method calls the <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> method, which defines the <xref:System.Web.UI.HtmlTextWriterAttribute> attribute and sets its value to `30pt`.  
  
 [!code-cs[HtmlTextWriter_Methods#3](~/add/codesnippet/csharp/cbdca703-4aa0-4111-9334-_1.cs)]
 [!code-vb[HtmlTextWriter_Methods#3](~/add/codesnippet/visualbasic/cbdca703-4aa0-4111-9334-_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods#3](~/add/codesnippet/cpp/cbdca703-4aa0-4111-9334-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associated with the markup attribute.</param>
        <param name="value">The value assigned to the attribute.</param>
        <summary>Determines whether the specified markup attribute and its value are rendered during the next call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <returns>
          <see langword="true" /> if the attribute is rendered during the next call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the IsAttributeDefined method returns `true`, the value to be assigned to the <xref:System.Web.UI.HtmlTextWriterAttribute> object is returned in the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associated with the attribute.</param>
        <summary>Determines whether the specified markup style attribute is rendered during the next call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <returns>
          <see langword="true" /> if the attribute will be rendered during the next call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To get the value that will be rendered with the specified style attribute, use the <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> overload of the IsStyleAttributeDefined method.  
  
   
  
## Examples  
 The following code example shows how to check whether a `<label>` element is being rendered. If so, the IsStyleAttributeDefined method checks whether a <xref:System.Web.UI.HtmlTextWriterStyle> style attribute has been defined on the element. If the <xref:System.Web.UI.HtmlTextWriterStyle> attribute has not been defined, the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method defines the <xref:System.Web.UI.HtmlTextWriterStyle> attribute and sets its value to `red`.  
  
 [!code-vb[HtmlTextWriter_Methods3#4](~/add/codesnippet/visualbasic/47188de5-abf6-4bc4-9c12-_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods3#4](~/add/codesnippet/cpp/47188de5-abf6-4bc4-9c12-_1.cpp)]
 [!code-cs[HtmlTextWriter_Methods3#4](~/add/codesnippet/csharp/47188de5-abf6-4bc4-9c12-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associated with the attribute.</param>
        <param name="value">The value assigned to the style attribute.</param>
        <summary>Determines whether the specified markup style attribute and its value are rendered during the next call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method.</summary>
        <returns>
          <see langword="true" /> if the attribute and its value will be rendered during the next call to the &lt;xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A&gt; method; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the IsStyleAttributeDefined method returns `true`, the value to be assigned to the <xref:System.Web.UI.HtmlTextWriterStyle> attribute is returned in the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribute">A string that contains the name of the attribute to check.</param>
        <summary>Checks an attribute to ensure that it can be rendered in the opening tag of a <see langword="&lt;form&gt;" /> markup element.</summary>
        <returns>Always <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlTextWriter> class implementation of the IsValidFormAttribute method returns `true` for all attributes. Override the IsValidFormAttribute to limit the attributes that can be rendered in the opening tag of a `<form>` element.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the line terminator string used by the <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
        <value>The line terminator string used by the current <see cref="T:System.Web.UI.HtmlTextWriter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return, followed by a line feed ("\r\n").  
  
 The line terminator string is written to the output stream whenever one of the <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> methods is called. If the NewLine property is set to `null`, the default new line character is used.  
  
   
  
## Examples  
 The following code example shows how to use a custom class, derived from the <xref:System.Web.UI.HtmlTextWriter> class, that overrides the <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> method. When called, the <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> override checks whether the text writer renders any `<label>` or `<a>` elements. If so, the <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> method determines whether a style attribute is defined for the label. If no style is defined, the <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> method sets the default value for the `style:color` attribute to blue. The <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> method then uses the NewLine property to insert a line break in the markup tag and writes any other defined attributes.  
  
 [!code-cs[HtmlTextWriter_Methods#4](~/add/codesnippet/csharp/p-system.web.ui.htmltext_2_1.cs)]
 [!code-vb[HtmlTextWriter_Methods#4](~/add/codesnippet/visualbasic/p-system.web.ui.htmltext_2_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods#4](~/add/codesnippet/cpp/p-system.web.ui.htmltext_2_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">A string containing the name of the attribute to render.</param>
        <param name="value">A string containing the value that is assigned to the attribute.</param>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associated with the markup attribute.</param>
        <summary>Determines whether the specified markup attribute and its value can be rendered to the current markup element.</summary>
        <returns>Always <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlTextWriter> class implementation of the OnAttributeRender method always returns `true`. The OnAttributeRender overrides can determine whether an attribute will be rendered to the page.  
  
   
  
## Examples  
 The following code example shows how to override the OnAttributeRender method. If a <xref:System.Web.UI.HtmlTextWriterAttribute> attribute is rendered, but the <xref:System.Web.UI.HtmlTextWriterAttribute> value is not `30pt`, the OnAttributeRender override calls the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method to add a <xref:System.Web.UI.HtmlTextWriterAttribute> attribute and set its value to `30pt`.  
  
 [!code-cs[MarkupTextWriter_Methods3#5](~/add/codesnippet/csharp/d0e562f6-9a39-4246-a984-_1.cs)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/add/codesnippet/visualbasic/d0e562f6-9a39-4246-a984-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">A string containing the name of the style attribute to render.</param>
        <param name="value">A string containing the value that is assigned to the style attribute.</param>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associated with the style attribute.</param>
        <summary>Determines whether the specified markup style attribute and its value can be rendered to the current markup element.</summary>
        <returns>Always <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlTextWriter> class implementation of the OnStyleAttributeRender method always returns `true`. The OnStyleAttributeRender overrides can determine whether a style attribute will be rendered to the page.  
  
   
  
## Examples  
 The following code example shows how to override the OnStyleAttributeRender method. If a <xref:System.Web.UI.HtmlTextWriterStyle> style attribute is rendered, but the <xref:System.Web.UI.HtmlTextWriterStyle> value is not `purple`, the OnStyleAttributeRender override uses the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> method to set the <xref:System.Web.UI.HtmlTextWriterStyle> attribute to `purple`.  
  
 [!code-cs[MarkupTextWriter_Methods3#6](~/add/codesnippet/csharp/d9590f65-fa57-44a8-99c7-_1.cs)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/add/codesnippet/visualbasic/d9590f65-fa57-44a8-99c7-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">A string containing the name of the element to render.</param>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> associated with the element.</param>
        <summary>Determines whether the specified markup element will be rendered to the requesting page.</summary>
        <returns>Always <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlTextWriter> class implementation of the OnTagRender method always returns `true`. The OnTagRender overrides can determine whether an element will be rendered to the page.  
  
   
  
## Examples  
 The following code example shows how to override the OnTagRender method. If a <xref:System.Web.UI.HtmlTextWriterTag> element is being rendered, the OnTagRender override uses the <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> method to determine whether a <xref:System.Web.UI.HtmlTextWriterAttribute> attribute is being rendered. If not, it uses the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method to create a <xref:System.Web.UI.HtmlTextWriterAttribute> attribute and set its value to `20pt`.  
  
 [!code-cs[MarkupTextWriter_Methods3#4](~/add/codesnippet/csharp/e717512e-2198-4ad0-a7c8-_1.cs)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/add/codesnippet/visualbasic/e717512e-2198-4ad0-a7c8-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes a series of tab strings that represent the indentation level for a line of markup characters.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OutputTabs method uses the <xref:System.Web.UI.HtmlTextWriter.Indent%2A> property to determine how many tab strings to write to obtain the desired indentation.  
  
 The tab string is specified with the <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> constructor. If no tab string is specified, the <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> constant (`\t`) is used.  
  
   
  
## Examples  
 The following code example shows how to override the OutputTabs method in a class that is derived from the <xref:System.Web.UI.HtmlTextWriter> class. The OutputTabs override always uses the <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> constant to perform the indentation.  
  
 [!code-cs[HtmlTextWriter_Methods#7](~/add/codesnippet/csharp/m-system.web.ui.htmltext_34_1.cs)]
 [!code-vb[HtmlTextWriter_Methods#7](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_34_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods#7](~/add/codesnippet/cpp/m-system.web.ui.htmltext_34_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes the most recently saved markup element from the list of rendered elements.</summary>
        <returns>A &lt;xref:System.String&gt; containing the most recently rendered markup element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elements are added to the list of rendered markup elements by the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method. The <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method removes markup elements from the list by calling the PopEndTag method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The list of rendered elements is empty.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">The closing tag of the markup element.</param>
        <summary>Saves the specified markup element for later use when generating the end tag for a markup element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elements are added to the list of rendered markup elements when the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method calls the PushEndTag method. The <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method removes markup elements from the list after it renders the end tag for the element.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">A string containing the name of the markup attribute to register.</param>
        <param name="key">An <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> that corresponds with the attribute name.</param>
        <summary>Registers markup attributes, whether literals or dynamically generated, from the source file so that they can be properly rendered to the requesting client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The predefined attributes of the HTML markup language are registered by calls to the RegisterAttribute method when the first <xref:System.Web.UI.HtmlTextWriter> object is created. Dynamic attributes can be registered by using the RegisterAttribute method at other times.  
  
 The registration table used by the RegisterAttribute method is `static`, so registration of attributes applies to all <xref:System.Web.UI.HtmlTextWriter> objects on the host computer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">The string passed from the source file specifying the style name.</param>
        <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> that corresponds with the specified style.</param>
        <summary>Registers markup style properties, whether literals or dynamically generated, from the source file so that they can be properly rendered to the requesting client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The predefined cascading style sheet (CSS) attributes of the HTML markup language are registered by calls to the RegisterStyle method when the first <xref:System.Web.UI.HtmlTextWriter> object is created. Dynamic style attributes can be registered by using the RegisterStyle method at other times.  
  
 The registration table used by the RegisterStyle method is `static`, so registration of attributes applies to all <xref:System.Web.UI.HtmlTextWriter> objects on the host computer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">A string that contains the HTML tag.</param>
        <param name="key">An <see cref="T:System.Web.UI.HtmlTextWriterTag" /> that specifies which element to render.</param>
        <summary>Registers markup tags, whether literals or dynamically generated, from the source file so that they can be properly rendered to the requesting client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The predefined markup tags of the HTML language are registered by calls to the RegisterTag method when the first <xref:System.Web.UI.HtmlTextWriter> object is created. Dynamic markup tags can be registered by using the RegisterTag method at other times.  
  
 The registration table used by the RegisterTag method is `static`, so registration of tags applies to all <xref:System.Web.UI.HtmlTextWriter> objects on the host computer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes any text or spacing that occurs after the content and before the closing tag of the markup element to the markup output stream.</summary>
        <returns>A string that contains the spacing or text to write after the content of the element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RenderAfterContent method can be useful if you want to insert child elements into the current markup element.  
  
   
  
## Examples  
 The following code example shows how to override the RenderAfterContent method in a class derived from the <xref:System.Web.UI.HtmlTextWriter> class to determine whether a `<label>` element is being rendered. If so, the RenderAfterContent override inserts the closing tag of a `<font>` element immediately before the closing tag of the `<label>` element. If an element other than `<label>` is being rendered, the RenderAfterContent base method is used.  
  
 [!code-vb[HtmlTextWriter_Methods1#3](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_6_1.vb)]
 [!code-cs[HtmlTextWriter_Methods1#3](~/add/codesnippet/csharp/m-system.web.ui.htmltext_6_1.cs)]
 [!code-cpp[HtmlTextWriter_Methods1#3](~/add/codesnippet/cpp/m-system.web.ui.htmltext_6_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes any spacing or text that occurs after the closing tag for a markup element.</summary>
        <returns>The spacing or text to write after the closing tag of the element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RenderAfterTag method can be useful if you want to render additional closing tags after the element tag.  
  
   
  
## Examples  
 The following code example shows how to override the RenderAfterTag method to determine whether a class derived from the <xref:System.Web.UI.HtmlTextWriter> class is rendering a `<label>` element. If so, the RenderAfterTag override inserts the closing tag of a `<font>` element immediately after the `<label>` element. If it is not a `<label>` element, the RenderAfterTag base method is used.  
  
 [!code-cs[HtmlTextWriter_Methods4#2](~/add/codesnippet/csharp/m-system.web.ui.htmltext_7_1.cs)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_7_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods4#2](~/add/codesnippet/cpp/m-system.web.ui.htmltext_7_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes any text or spacing before the content and after the opening tag of a markup element.</summary>
        <returns>The text or spacing to write prior to the content of the element. If not overridden, RenderBeforeContent returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RenderBeforeContent method can be useful if you want to insert child elements into the current markup element before the inner markup.  
  
   
  
## Examples  
 The following code example shows how to override the RenderBeforeContent method to determine whether a class derived from the <xref:System.Web.UI.HtmlTextWriter> class is about to render a `<label>` element. If so, the RenderBeforeContent override inserts the opening tag of a `<font>` element immediately after the opening tag of the `<label>` element. If it is not a `<label>` element, the RenderBeforeContent base method is used.  
  
 [!code-vb[HtmlTextWriter_Methods1#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_0_1.vb)]
 [!code-cs[HtmlTextWriter_Methods1#2](~/add/codesnippet/csharp/m-system.web.ui.htmltext_0_1.cs)]
 [!code-cpp[HtmlTextWriter_Methods1#2](~/add/codesnippet/cpp/m-system.web.ui.htmltext_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes any text or spacing that occurs before the opening tag of a markup element.</summary>
        <returns>The text or spacing to write before the markup element opening tag. If not overridden, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RenderBeforeTag method can be useful if you want to render additional opening tags before the opening tag of the intended element.  
  
   
  
## Examples  
 The following code example shows how to override the RenderBeforeTag method to determine whether a class that is derived from the <xref:System.Web.UI.HtmlTextWriter> class is about to render a `<label>` element. If so, the RenderBeforeTag override inserts the opening tag of a `<font>` element immediately before the `<label>` element. If it is not rendering a `<label>` element, the RenderBeforeTag base method is used.  
  
 [!code-cs[HtmlTextWriter_Methods4#1](~/add/codesnippet/csharp/m-system.web.ui.htmltext_20_1.cs)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_20_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods4#1](~/add/codesnippet/cpp/m-system.web.ui.htmltext_20_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">A string containing the name of the markup element for which to render the opening tag.</param>
        <summary>Writes the opening tag of the specified markup element to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RenderBeginTag override of the RenderBeginTag method, if the markup element is not one of the <xref:System.Web.UI.HtmlTextWriterTag> enumeration values.  
  
 To generate a markup element by using the RenderBeginTag method, first call the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> and the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> methods, as necessary, to specify any element attributes or style attributes that are to appear in the opening tag of the element. After generating the inner markup, call the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method to generate the closing tag.  
  
   
  
## Examples  
 The following code example shows how to call the RenderBeginTag method in a custom control to render the opening tag of a non-standard `MyTag` element. The code example then calls the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method to render inner markup, and then calls the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method to close the element.  
  
 This code example generates the following markup:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_35_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#4](~/add/codesnippet/csharp/m-system.web.ui.htmltext_35_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/add/codesnippet/cpp/m-system.web.ui.htmltext_35_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">One of the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> values that defines the opening tag of the markup element to render.</param>
        <summary>Writes the opening tag of the markup element associated with the specified <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RenderBeginTag overload of the RenderBeginTag method if the markup element is of a known type that is one of the <xref:System.Web.UI.HtmlTextWriterTag> enumeration values.  
  
 To generate a markup element by using the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method, first call the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> and the <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> methods, as necessary, to specify any element attributes or style attributes that are to appear in the opening tag of the element. After generating the inner markup, call the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method to generate the closing tag.  
  
   
  
## Examples  
 The following code example shows how to use the RenderBeginTag method to output the opening tag of an `<img>` element. The attributes that are added to the element by the <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> method will be in the opening `<img>` tag. The <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method is used to generate the closing tag.  
  
 This code example generates the following markup:  
  
 `<img alt="Encoding "Required"" myattribute="No "encoding" required">`  
  
 `</img>`  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_36_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/csharp/m-system.web.ui.htmltext_36_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/cpp/m-system.web.ui.htmltext_36_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes the end tag of a markup element to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call the RenderEndTag method after the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> overload is called and after all content between the opening and closing tags (inner markup) of the element has been rendered.  
  
   
  
## Examples  
 The following code example demonstrates how to call the RenderEndTag method after both the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method that generates the opening tag and the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method that renders the inner markup between the opening and closing tags of the custom `MyTag` element have been called.  
  
 This code example generates the following markup:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_1_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#4](~/add/codesnippet/csharp/m-system.web.ui.htmltext_1_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/add/codesnippet/cpp/m-system.web.ui.htmltext_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents a space and the self-closing slash mark (/) of a markup tag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelfClosingChars field is used in markup elements that are self-closed. For example:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the closing slash mark and right angle bracket (/&gt;) of a self-closing markup element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelfClosingTagEnd field is used by the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method when constructing self-closing markup elements.  
  
   
  
## Examples  
 The following code example shows how to render the value of a custom `FileName` property followed by a quotation mark and the characters represented by the SelfClosingTagEnd field. The code example calls the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method and passes the SelfClosingTagEnd field as the parameter argument to close the element.  
  
 This code example renders the `FileName` property value, and then the following markup:  
  
 `" />`  
  
 [!code-cs[MarkupTextWriter_Constants#11](~/add/codesnippet/csharp/f-system.web.ui.htmltext_3_1.cs)]
 [!code-vb[MarkupTextWriter_Constants#11](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the semicolon (;).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pass the SemicolonChar field as the parameter argument in a <xref:System.Web.UI.HtmlTextWriter.Write%2A> method call when you want to render a semicolon from a custom control or adapter.  
  
   
  
## Examples  
 The following code example demonstrates how to manually render a series of styles on a markup element. The code example uses the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method to render `font-size` and `border-style` style attributes. The SemicolonChar field is used as a parameter of the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method to separate the value of the `font-size` attribute from the beginning of the `border-style` attribute.  
  
 This code example renders the following markup:  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-cs[MarkupTextWriter_Constants#7](~/add/codesnippet/csharp/f-system.web.ui.htmltext_4_1.cs)]
 [!code-vb[MarkupTextWriter_Constants#7](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents an apostrophe (').</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SingleQuoteChar field when it is necessary to render an apostrophe.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the slash mark (/).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SlashChar field to render the slash marks when you write a URL. The <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> method uses the SlashChar field when writing the closing tag of a markup element.  
  
   
  
## Examples  
 The following code example demonstrates how to manually render the `src` attribute of an `<img>` element. The code example uses the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method with the SlashChar field as its parameter to render slash marks in the path that is applied to the `src` attribute.  
  
 This code example renders the following markup:  
  
 `src="/images/`  
  
 [!code-cs[MarkupTextWriter_Constants#10](~/add/codesnippet/csharp/f-system.web.ui.htmltext_11_1.cs)]
 [!code-vb[MarkupTextWriter_Constants#10](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents a space ( ) character.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SpaceChar field is used by the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> and <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> methods when writing separators between elements and attributes.  
  
   
  
## Examples  
 This section provides two code examples. The first one demonstrates how to create a character array. The second one demonstrates how to use the array.  
  
 These code examples generate the following markup:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 The following code example shows how to create a <xref:System.Char> array that contains the SpaceChar field.  
  
 [!code-cs[MarkupTextWriter_Methods2#13](~/add/codesnippet/csharp/f-system.web.ui.htmltext_0_1.cs)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_0_1.vb)]  
  
 The following code example shows how to use the array that was created in the preceding code example as a parameter when calling the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method.  
  
 [!code-cs[MarkupTextWriter_Methods2#12](~/add/codesnippet/csharp/f-system.web.ui.htmltext_0_2.cs)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_0_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the style equals (<see langword=":" />) character used to set style attributes equal to values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The StyleEqualsChar field is used by the <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> method to delimit style names and values.  
  
   
  
## Examples  
 The following code example demonstrates how to render a `FontWeight` attribute and value of `bold` to the opening tag of an element. The code example uses the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method with the StyleEqualsChar field as the parameter to render the character that sets the value of each style attribute.  
  
 This code example renders the following markup:  
  
 `FontWeight:"bold"`  
  
 [!code-vb[MarkupTextWriter_Constants#5](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_1_1.vb)]
 [!code-cs[MarkupTextWriter_Constants#5](~/add/codesnippet/csharp/f-system.web.ui.htmltext_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value for the specified markup element.</summary>
        <value>The markup element that is having its opening tag rendered.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TagKey property is of use only to classes that inherit from the <xref:System.Web.UI.HtmlTextWriter> class. You should read or set the TagKey property only in a call to the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method; this is the only time it is set to a consistent value.  
  
   
  
## Examples  
 The following code example demonstrates an overridden version of the <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> method in a class that derives from the <xref:System.Web.UI.HtmlTextWriter> class. It uses the value of the TagKey property to determine whether a server control using the custom <xref:System.Web.UI.HtmlTextWriter> object is rendering a `<label>` markup element. If it is, a `<font>` element with a `color` attribute set to `red` is returned to modify the formatting of the `<label>` element's text.  
  
 [!code-vb[HtmlTextWriter_Methods1#2](~/add/codesnippet/visualbasic/p-system.web.ui.htmltext_4_1.vb)]
 [!code-cs[HtmlTextWriter_Methods1#2](~/add/codesnippet/csharp/p-system.web.ui.htmltext_4_1.cs)]
 [!code-cpp[HtmlTextWriter_Methods1#2](~/add/codesnippet/cpp/p-system.web.ui.htmltext_4_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The property value cannot be set.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the opening angle bracket (&lt;) of a markup tag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TagLeftChar field is used by the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, and <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> methods when writing markup tags.  
  
   
  
## Examples  
 The following code example renders the first character of the opening tag of a `<table>` element with the element name. The code example uses the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method with the TagLeftChar field as a parameter.  
  
 This code example renders the following markup:  
  
 `<table`  
  
 [!code-vb[MarkupTextWriter_Constants#9](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_9_1.vb)]
 [!code-cs[MarkupTextWriter_Constants#9](~/add/codesnippet/csharp/f-system.web.ui.htmltext_9_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tag name of the markup element being rendered.</summary>
        <value>The tag name of the markup element being rendered.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TagName property is of use only to classes that inherit from the <xref:System.Web.UI.HtmlTextWriter> class. You should read or set the TagName property only in <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> method calls; this is the only time it is set to a consistent value.  
  
   
  
## Examples  
 The following code example demonstrates an overridden version of the <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> method in a class that derives from the <xref:System.Web.UI.HtmlTextWriter> class. The code example checks whether the element to render is a `<label>` element by calling the <xref:System.String.Compare%2A?displayProperty=fullName> method, and then passing the TagName property value and a string, `"label"`, as the parameter arguments. If a `<label>` element is about to be rendered, the opening tag of a `<font>` element, with a `color` attribute set to `red`, is rendered before the `<label>` element's opening tag. If the element to render is not a `<label>` element, the base class's version of the <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> method is called.  
  
 [!code-cs[HtmlTextWriter_Methods4#1](~/add/codesnippet/csharp/p-system.web.ui.htmltext_5_1.cs)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmltext_5_1.vb)]
 [!code-cpp[HtmlTextWriter_Methods4#1](~/add/codesnippet/cpp/p-system.web.ui.htmltext_5_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the closing angle bracket (&gt;) of a markup tag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TagRightChar field is used by the <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, and <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> methods when writing markup tags.  
  
   
  
## Examples  
 The following code example shows how to render the closing tag of a `<table>` element by making calls to overloads of the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method. To render the final character of the tag, the code example uses the <xref:System.Web.UI.HtmlTextWriter.Write%2A> method with the TagRightChar field as a parameter.  
  
 This code example renders the following markup:  
  
 `</table>`  
  
 [!code-vb[MarkupTextWriter_Constants#4](~/add/codesnippet/visualbasic/f-system.web.ui.htmltext_6_1.vb)]
 [!code-cs[MarkupTextWriter_Constants#4](~/add/codesnippet/csharp/f-system.web.ui.htmltext_6_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Boolean&gt; to write to the output stream.</param>
        <summary>Writes the text representation of a Boolean value to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to write to the output stream.</param>
        <summary>Writes the text representation of a Unicode character to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 The following code example demonstrates using the Write method to end the opening tag of an `<img>` element by using the <xref:System.Web.UI.HtmlTextWriter.TagRightChar> constant.  
  
 This code example renders the following markup:  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-cs[MarkupTextWriter_Samples1#5](~/add/codesnippet/csharp/m-system.web.ui.htmltext_21_1.cs)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_21_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">The array of Unicode characters to write to the output stream.</param>
        <summary>Writes the text representation of an array of Unicode characters to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 This section provides two code examples. The first one demonstrates how to create an array of characters. The second one demonstrates how to use the array.  
  
 These code examples generate the following markup:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 The following code example demonstrates how to create an array of characters that spell out `hello world`. Included in the array is the <xref:System.Web.UI.HtmlTextWriter.SpaceChar> field, which creates a space between the two words.  
  
 [!code-cs[MarkupTextWriter_Methods2#13](~/add/codesnippet/csharp/m-system.web.ui.htmltext_22_1.cs)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_22_1.vb)]  
  
 The following code example demonstrates how to use the Write method to render the `hello world` character array created in the preceding code example to a page, when the control that contains this example code is included in a page.  
  
 [!code-cs[MarkupTextWriter_Methods2#12](~/add/codesnippet/csharp/m-system.web.ui.htmltext_22_2.cs)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_22_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to write to the output stream.</param>
        <summary>Writes the text representation of a double-precision floating-point number to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 The following code example shows how to use the Write method to render the value of the <xref:System.Double.MaxValue?displayProperty=fullName> field.  
  
 This code example generates the following markup:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-cs[MarkupTextWriter_Methods1#7](~/add/codesnippet/csharp/m-system.web.ui.htmltext_10_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-byte signed integer to write to the output stream.</param>
        <summary>Writes the text representation of a 32-byte signed integer to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-byte signed integer to write to the output stream.</param>
        <summary>Writes the text representation of a 64-byte signed integer to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to write to the output stream.</param>
        <summary>Writes the text representation of an object to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 The following code example shows how to use the Write method to render the value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property.  
  
 This code example generates the following markup:  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 The value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property:  
  
 `</bold>`  
  
 [!code-cs[MarkupTextWriter_Methods1#8](~/add/codesnippet/csharp/m-system.web.ui.htmltext_19_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_19_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to write to the output stream.</param>
        <summary>Writes the text representation of a single-precision floating-point number to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Write method to render the value of the <xref:System.Single.Epsilon?displayProperty=fullName> field, which is the smallest possible value of the <xref:System.Single> structure.  
  
 This code example generates the following markup:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-cs[MarkupTextWriter_Methods1#10](~/add/codesnippet/csharp/m-system.web.ui.htmltext_28_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_28_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The string to write to the output stream.</param>
        <summary>Writes the specified string to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Write method to render a string between the opening and closing tags of a custom markup element.  
  
 This code example generates the following markup:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_25_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#4](~/add/codesnippet/csharp/m-system.web.ui.htmltext_25_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/add/codesnippet/cpp/m-system.web.ui.htmltext_25_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A string that contains zero or more format items.</param>
        <param name="arg0">An object to format.</param>
        <summary>Writes a tab string and a formatted string to the output stream, using the same semantics as the &lt;xref:System.String.Format%2A?displayProperty=fullName&gt; method, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 The following code example shows how to use the Write method to render a formatted string with the value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property.  
  
 [!code-cs[MarkupTextWriter_Methods1#5](~/add/codesnippet/csharp/m-system.web.ui.htmltext_18_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A string that contains zero or more format items.</param>
        <param name="arg">An object array to format.</param>
        <summary>Writes a formatted string that contains the text representation of an object array to the output stream, along with any pending tab spacing. This method uses the same semantics as the &lt;xref:System.String.Format%2A?displayProperty=fullName&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 This section contains two code examples. The first one demonstrates how to render a formatted string and the contents of an array. The second one demonstrates how to declare the array.  
  
 The following code example shows how to use the Write method to render a formatted string and the contents of an object array, named `curPriceTime`. The method call renders the second member of the array before it renders the first member.  
  
 [!code-cs[MarkupTextWriter_Methods2#9](~/add/codesnippet/csharp/m-system.web.ui.htmltext_12_1.cs)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_12_1.vb)]  
  
 The following code example demonstrates declaring the `curPriceTime` object array.  
  
 [!code-cs[MarkupTextWriter_Methods2#14](~/add/codesnippet/csharp/m-system.web.ui.htmltext_12_2.cs)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_12_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The array of characters from which to write text to the output stream.</param>
        <param name="index">The index location in the array where writing begins.</param>
        <param name="count">The number of characters to write to the output stream.</param>
        <summary>Writes the text representation of a subarray of Unicode characters to the output stream, along with any pending tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 This section provides two code examples. The first one demonstrates how to create a character array. The second one demonstrates how to use the array.  
  
 These code examples generate the following markup:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 The following code example shows how to create an array of characters that spell out `hello world`. Included in the array is the <xref:System.Web.UI.HtmlTextWriter.SpaceChar> field, which creates a space between the two words.  
  
 [!code-cs[MarkupTextWriter_Methods2#13](~/add/codesnippet/csharp/m-system.web.ui.htmltext_5_1.cs)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_5_1.vb)]  
  
 The following portion of the code example uses the `index` and `count` parameters of the Write method to render the first five characters of the array created in the preceding example.  
  
 [!code-cs[MarkupTextWriter_Methods2#11](~/add/codesnippet/csharp/m-system.web.ui.htmltext_5_2.cs)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_5_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A string that contains zero or more format items.</param>
        <param name="arg0">An object to format.</param>
        <param name="arg1">An object to format.</param>
        <summary>Writes a formatted string that contains the text representation of two objects to the output stream, along with any pending tab spacing. This method uses the same semantics as the &lt;xref:System.String.Format%2A?displayProperty=fullName&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Write method generates any tabs that are pending, and then calls the <xref:System.IO.TextWriter.Write%2A> base method.  
  
   
  
## Examples  
 The following code example shows how to use the Write method to render a formatted string and the values of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> and <xref:System.DateTime.Today%2A> properties.  
  
 [!code-cs[MarkupTextWriter_Methods1#6](~/add/codesnippet/csharp/m-system.web.ui.htmltext_39_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_39_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The attribute to write to the output stream.</param>
        <param name="value">The value assigned to the attribute.</param>
        <summary>Writes the specified markup attribute and value to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the WriteAttribute method to write markup attributes and their values with no encoding. The WriteAttribute method writes the attribute value enclosed in double quotation marks ("). If `value` is `null`, the WriteAttribute method writes only the attribute name.  
  
   
  
## Examples  
 The following code example demonstrates rendering an `<img>` element in which both overloads of the <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> method are called. The code example uses the following process:  
  
-   Calls the <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> method, which renders the opening characters of the element.  
  
-   Calls the WriteAttribute overload, which writes an `alt` attribute and its value to the `<img>` element.  
  
-   Calls the <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> overload to render a custom `myattribute` attribute, with a value of `No "encoding" required`, and then sets `fEncode` to `false`.  
  
-   Closes the opening tag of the element, and then calls the <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> method to close the `<img>` element.  
  
 This code example generates the following markup:  
  
 `<img alt="AtlValue" myattribute="No "encoding" required">`  
  
 `</img>`  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_8_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/csharp/m-system.web.ui.htmltext_8_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/cpp/m-system.web.ui.htmltext_8_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The markup attribute to write to the output stream.</param>
        <param name="value">The value assigned to the attribute.</param>
        <param name="fEncode">
          <see langword="true" /> to encode the attribute and its assigned value; otherwise, <see langword="false" />.</param>
        <summary>Writes the specified markup attribute and value to the output stream, and, if specified, writes the value encoded.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the WriteAttribute method to write markup attributes and their values with or without encoding. The WriteAttribute method uses the <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> method to do the encoding.  
  
 The WriteAttribute method writes the attribute value enclosed in double quotation marks ("). If `value` is `null`, the WriteAttribute method writes only the attribute name.  
  
   
  
## Examples  
 The following code example demonstrates rendering an `<img>` element in which both overloads of the <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> method are called. The code example uses the following process:  
  
-   Calls the <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> method, which renders the opening characters of the element.  
  
-   Calls the <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> overload, which writes an `alt` attribute and its value to the `<img>` element.  
  
-   Calls the WriteAttribute overload to render a custom `myattribute` attribute, with a value of `No "encoding" required`, and then sets `fEncode` to `false`.  
  
-   Closes the opening tag of the element, and then calls the <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> method to close the `<img>` element.  
  
 This code example generates the following markup:  
  
 `<img alt="AtlValue" myattribute="No "encoding" required">`  
  
 `</img>`  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/visualbasic/be7115c4-7933-43ab-93e3-_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/csharp/be7115c4-7933-43ab-93e3-_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/cpp/be7115c4-7933-43ab-93e3-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">The markup element of which to write the opening tag.</param>
        <summary>Writes any tab spacing and the opening tag of the specified markup element to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WriteBeginTag method does not write the closing angle bracket (>) of the markup element's opening tag. This allows the writing of markup attributes to the opening tag of the element. Use the <xref:System.Web.UI.HtmlTextWriter.TagRightChar> constant to close the opening tag when calling the WriteBeginTag method. Use the WriteBeginTag method with the <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> constant when you write markup elements that are self-closing.  
  
 The WriteBeginTag method is used by custom server controls that do not allow tag or attribute mapping and render markup elements in the same way for each request.  
  
   
  
## Examples  
 The following code example demonstrates rendering an `<img>` element in which both overloads of the <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> method are called. The code example uses the following process:  
  
-   Calls the WriteBeginTag method, which renders the opening characters of the element.  
  
-   Calls the <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> overload, which writes an `alt` attribute and its value to the `<img>` element.  
  
-   Calls the <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> overload to render a custom `myattribute` attribute, with a value of `No "encoding" required`, and then sets `fEncode` to `false`.  
  
-   Closes the opening tag of the element, and then calls the <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> method to close the `<img>` element.  
  
 This code example generates the following markup:  
  
 `<img alt="AtlValue" myattribute="No "encoding" required">`  
  
 `</img>`  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_15_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/csharp/m-system.web.ui.htmltext_15_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/cpp/m-system.web.ui.htmltext_15_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes a <see langword="&lt;br /&gt;" /> markup element to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the WriteBreak method to render line breaks in custom control or adapter markup. The WriteBreak method writes a space between the `br` and `/` for improved HTML compatibility.  
  
   
  
## Examples  
 The following code example shows how to call the WriteBreak method to write a `<br />` element to the requesting browser after the <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> method writes the encoded `<custID> & <invoice#>` markup.  
  
 [!code-cs[System.Web.UI.MarkupTextWriter_Samples1#2](~/add/codesnippet/csharp/m-system.web.ui.htmltext_38_1.cs)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_38_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text string to encode and write to the output stream.</param>
        <summary>Encodes the specified text for the requesting device, and then writes it to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the WriteEncodedText method when a string contains angle brackets (\< or >) or an ampersand (&).  
  
 The WriteEncodedText method uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to perform the encoding and also converts Unicode character `00A0` to ` `.  
  
   
  
## Examples  
 The following code example shows how to use the WriteEncodedText method to write the encoded markup `<custID> & \<invoice#>` to the output stream. The <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> method writes `<br />`.  
  
 [!code-cs[System.Web.UI.MarkupTextWriter_Samples1#2](~/add/codesnippet/csharp/m-system.web.ui.htmltext_44_1.cs)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_44_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">The URL string to encode and write to the output stream.</param>
        <summary>Encodes the specified URL, and then writes it to the output stream. The URL might include parameters.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WriteEncodedUrl method encodes the string in the `url` parameter in accordance with the specification for URL encoding. The parameters that follow the question mark (?) delimiter are not encoded.  
  
   
  
## Examples  
 The following code example shows how to use the WriteEncodedUrl method, which generates the following output:  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-cs[System.Web.UI.MarkupTextWriter_Samples1#3](~/add/codesnippet/csharp/m-system.web.ui.htmltext_30_1.cs)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_30_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlText">The URL parameter string to encode and write to the output stream.</param>
        <summary>Encodes the specified URL parameter for the requesting device, and then writes it to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spaces in the parameter part of a URL are encoded as plus signs (+), and equal signs (=) are encoded as `%3d`.  
  
   
  
## Examples  
 The following code example shows how to use the WriteEncodedUrlParameter method, which generates the following output:  
  
 `ID%3dCity+State`  
  
 [!code-cs[System.Web.UI.MarkupTextWriter_Samples1#4](~/add/codesnippet/csharp/m-system.web.ui.htmltext_2_1.cs)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">The element to write the closing tag for.</param>
        <summary>Writes any tab spacing and the closing tag of the specified markup element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unlike the <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> method, the WriteEndTag method has no logic to make the element end tag match the corresponding opening tag.  
  
   
  
## Examples  
 The following code example demonstrates rendering an `<img>` element. The code example uses the following process:  
  
-   Calls the <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> method to render the opening characters of the element.  
  
-   Calls the two overloads of the <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> method to write attributes to the `<img>` element.  
  
-   Calls the WriteEndTag method to close the `<img>` element.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_4_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/csharp/m-system.web.ui.htmltext_4_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/add/codesnippet/cpp/m-system.web.ui.htmltext_4_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">The element to write to the output stream.</param>
        <summary>Writes any tab spacing and the opening tag of the specified markup element to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WriteFullBeginTag method automatically writes the closing angle bracket (>) of the opening tag of the element, unlike the <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> method, which does not write the closing angle bracket. Use WriteFullBeginTag for markup elements that have no attributes.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes a line terminator string to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). For more information, see <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 The following code example demonstrates how to use the WriteLine method to insert a line after an `<img>` element is rendered.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_27_1.vb)]
 [!code-cs[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/csharp/m-system.web.ui.htmltext_27_1.cs)]
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/add/codesnippet/cpp/m-system.web.ui.htmltext_27_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean to write to the output stream.</param>
        <summary>Writes any pending tab spacing and the text representation of a Boolean value, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The character to write to the output stream.</param>
        <summary>Writes any pending tab spacing and a Unicode character, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array to write to the output stream.</param>
        <summary>Writes any pending tab spacing and an array of Unicode characters, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
   
  
## Examples  
 This section provides two code examples. The first one demonstrates how to create an array. The second one demonstrates how to use that array.  
  
 These code examples generate the following markup:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 The following code example shows how to create an array of characters that spell out `hello world`. Included in the array is the <xref:System.Web.UI.HtmlTextWriter.SpaceChar> field, which creates a space between the two words.  
  
 [!code-cs[MarkupTextWriter_Methods2#6](~/add/codesnippet/csharp/m-system.web.ui.htmltext_37_1.cs)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_37_1.vb)]  
  
 The following code example renders the `hello world` character array that was created in the preceding example by using the WriteLine method.  
  
 [!code-cs[MarkupTextWriter_Methods2#5](~/add/codesnippet/csharp/m-system.web.ui.htmltext_37_2.cs)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_37_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to write to the output stream.</param>
        <summary>Writes any pending tab spacing and the text representation of a double-precision floating-point number, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
   
  
## Examples  
 The following code example shows how to use the WriteLine method to render the value of the <xref:System.Double.MaxValue?displayProperty=fullName> field.  
  
 This code example generates the following markup:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-cs[MarkupTextWriter_Methods1#3](~/add/codesnippet/csharp/m-system.web.ui.htmltext_33_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_33_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-byte signed integer to write to the output stream.</param>
        <summary>Writes any pending tab spacing and the text representation of a 32-byte signed integer, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-byte signed integer to write to the output stream.</param>
        <summary>Writes any pending tab spacing and the text representation of a 64-byte signed integer, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to write to the output stream.</param>
        <summary>Writes any pending tab spacing and the text representation of an object, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
   
  
## Examples  
 The following code example shows how to use the WriteLine method to render the value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property to a control.  
  
 [!code-cs[MarkupTextWriter_Methods1#4](~/add/codesnippet/csharp/m-system.web.ui.htmltext_3_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating point number to write to the output stream.</param>
        <summary>Writes any pending tab spacing and the text representation of a single-precision floating-point number, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
   
  
## Examples  
 The following code example shows how to use the WriteLine method to render the value of the <xref:System.Single.Epsilon?displayProperty=fullName> field, which is the smallest possible value of the <xref:System.Single> structure.  
  
 This code example generates the following markup:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-cs[MarkupTextWriter_Methods1#9](~/add/codesnippet/csharp/m-system.web.ui.htmltext_11_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The string to write to the output stream.</param>
        <summary>Writes any pending tab spacing and a text string, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte unsigned integer to write to the output stream.</param>
        <summary>Writes any pending tab spacing and the text representation of a 4-byte unsigned integer, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A string containing zero or more format items.</param>
        <param name="arg0">An object to format.</param>
        <summary>Writes any pending tab spacing and a formatted string containing the text representation of an object, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The WriteLine method uses the same semantics as the <xref:System.String.Format%28System.String%2CSystem.Object%29> method. The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
   
  
## Examples  
 The following code example shows how to use the WriteLine method to render a formatted string with the value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property.  
  
 [!code-cs[MarkupTextWriter_Methods1#1](~/add/codesnippet/csharp/m-system.web.ui.htmltext_23_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_23_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A string containing zero or more format items.</param>
        <param name="arg">An object array to format.</param>
        <summary>Writes any pending tab spacing and a formatted string that contains the text representation of an object array, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The WriteLine method uses the same semantics as the [Format(String, Object\[\])](assetId:///M:System.String.Format(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method. The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` method.  
  
   
  
## Examples  
 This section contains two code examples. The first one demonstrates how to render a string and an array to the output stream. The second one shows how to declare the array.  
  
 The following code example demonstrates how to use the WriteLine method to render a formatted string and the contents of an object array to the output stream.  
  
 [!code-cs[MarkupTextWriter_Methods2#2](~/add/codesnippet/csharp/m-system.web.ui.htmltext_24_1.cs)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_24_1.vb)]  
  
 The following code example shows how to declare the object array that was rendered in the preceding code example.  
  
 [!code-cs[MarkupTextWriter_Methods2#7](~/add/codesnippet/csharp/m-system.web.ui.htmltext_24_2.cs)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/add/codesnippet/visualbasic/m-system.web.ui.htmltext_24_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array from which to write text to the output stream.</param>
        <param name="index">The location in the character array where writing begins.</param>
        <param name="count">The number of characters in the array to write to the output stream.</param>
        <summary>Writes any pending tab spacing and a subarray of Unicode characters, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
   
  
## Examples  
 This section contains two code examples. The first one demonstrates how to create a character array. The second one demonstrates how to use the array.  
  
 These code examples generate the following markup:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 The following code example demonstrates how to create an array of characters that spell out `hello world`. Included in the array is the <xref:System.Web.UI.HtmlTextWriter.SpaceChar> field, which creates a space between the two words.  
  
 [!code-cs[MarkupTextWriter_Methods2#6](~/add/codesnippet/csharp/6b13e0ca-ed56-413e-b392-_1.cs)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/add/codesnippet/visualbasic/6b13e0ca-ed56-413e-b392-_1.vb)]  
  
 The following code example uses the `index` and `count` parameters of the WriteLine method to render the first five characters of the array created in the preceding code example.  
  
 [!code-cs[MarkupTextWriter_Methods2#4](~/add/codesnippet/csharp/6b13e0ca-ed56-413e-b392-_2.cs)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/add/codesnippet/visualbasic/6b13e0ca-ed56-413e-b392-_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A string containing zero or more format items.</param>
        <param name="arg0">An object to format.</param>
        <param name="arg1">An object to format.</param>
        <summary>Writes any pending tab spacing and a formatted string that contains the text representation of two objects, followed by a line terminator string, to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The WriteLine method uses the same semantics as the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> method. The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
   
  
## Examples  
 The following code example demonstrates how to use the WriteLine method to render a formatted string and the values of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property and the <xref:System.DateTime.Today%2A> property.  
  
 [!code-cs[MarkupTextWriter_Methods1#2](~/add/codesnippet/csharp/efeeb384-c97a-43fc-baf0-_1.cs)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/add/codesnippet/visualbasic/efeeb384-c97a-43fc-baf0-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The string to write to the output stream.</param>
        <summary>Writes a string, followed by a line terminator string, to the output stream. This method ignores any specified tab spacing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the WriteLineNoTabs method rather than the <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> method when you do not want to render any tab spacing ahead of the rendered string `s`.  
  
 The default line terminator string is a carriage return followed by a line feed ("\r\n"). The <xref:System.IO.TextWriter.WriteLine%2A> base method is used to write the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The style attribute to write to the output stream.</param>
        <param name="value">The value assigned to the style attribute.</param>
        <summary>Writes the specified style attribute to the output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WriteStyleAttribute method writes the style attribute in the following form:  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The style attribute to write to the output stream.</param>
        <param name="value">The value assigned to the style attribute.</param>
        <param name="fEncode">
          <see langword="true" /> to encode the style attribute and its assigned value; otherwise, <see langword="false" />.</param>
        <summary>Writes the specified style attribute and value to the output stream, and encodes the value, if specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WriteStyleAttribute method writes the style attribute in the following form:  
  
 `name` `=` `value` `;`  
  
 The <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> method is used to encode the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="argument" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The string to encode and write to the output stream.</param>
        <param name="argument">
          <see langword="true" /> to encode the string as a part of the parameter section of the URL; <see langword="false" /> to encode the string as part of the path section of the URL.</param>
        <summary>Writes the specified string, encoding it according to URL requirements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WriteUrlEncodedString method encodes characters that could be considered URL delimiters (dependent on the setting of `argument`) into strings of the form `%``xx`, if the ASCII code is less than 128; otherwise, `%u``xxxx`, where `x` is a hexadecimal digit.  
  
 The <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> and <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> methods use the WriteUrlEncodedString method as a utility method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>