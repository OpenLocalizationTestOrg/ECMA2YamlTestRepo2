<Type Name="ControlBuilder" FullName="System.Web.UI.ControlBuilder">
  <TypeSignature Language="C#" Value="public class ControlBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlBuilder extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supports the page parser in building a control and the child controls it contains.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, every control on a page is associated with a default ControlBuilder class. During parsing, the ASP.NET page framework builds a tree of ControlBuilder objects corresponding to the tree of controls for the page. The ControlBuilder tree is then used to generate page code to create the control tree. In addition to child controls, the ControlBuilder defines the behavior of how the content within control tags is parsed. You can override this default behavior by defining your own custom control builder class. This is done by applying a <xref:System.Web.UI.ControlBuilderAttribute> attribute to your control builder class as follows:  
  
 `[ControlBuilderAttribute(typeof(ControlBuilderType))]`  
  
   
  
## Examples  
 The following code example creates a <xref:System.Web.UI.WebControls.Table> control whose attributes and content are defined at the time the table is built. The following is the command line to use to build the executable.  
  
 [Visual Basic]  
  
```  
vbc /r:System.dll /r:System.Web.dll /r:System.Drawing.dll /t:library /out:myWebAppPath/Bin/vb_mycontrolbuilder.dll myControlBuilder.vb  
```  
  
 [C#]  
  
```  
csc /t:library /out:myWebAppPath/Bin/cs_mycontrolbuilder.dll myControlBuilder.cs  
```  
  
 [!code-cs[SystemWebUI_ControlBuilder_2#1](~/add/codesnippet/csharp/t-system.web.ui.controlb_1_1.cs)]
 [!code-vb[SystemWebUI_ControlBuilder_2#1](~/add/codesnippet/visualbasic/t-system.web.ui.controlb_1_1.vb)]  
  
 The following code example uses the previous custom control. In particular, it builds a table whose attributes and content are defined at run time. Notice that the values shown in the  directive reflect the previous command line.  
  
 [!code-cs[SystemWebUI_ControlBuilder_2#2](~/add/codesnippet/csharp/t-system.web.ui.controlb_1_2.aspx)]
 [!code-vb[SystemWebUI_ControlBuilder_2#2](~/add/codesnippet/visualbasic/t-system.web.ui.controlb_1_2.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.ControlBuilder" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create a new instance the <xref:System.Web.UI.ControlBuilder> class.  
  
> [!NOTE]
>  This constructor is generally used by ASP.NET when parsing the page and creating the control hierarchy. It is not intended for use in your code.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowWhitespaceLiterals">
      <MemberSignature Language="C#" Value="public virtual bool AllowWhitespaceLiterals ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AllowWhitespaceLiterals() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines whether white space literals are permitted in the content between a control's opening and closing tags. This method is called by the ASP.NET page framework.</summary>
        <returns>Always returns <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AllowWhitespaceLiterals method is used to determine whether white space literals are permitted in the content between the opening and closing tags of a control. When this method returns `false`, the white space literals are trimmed from the content before the content is processed by the page parser. When this method returns `true`, the white space literals not removed.  
  
 This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code.  
  
   
  
## Examples  
 [!code-cs[ControlBuilderSamples_1#4](~/add/codesnippet/csharp/m-system.web.ui.controlb_4_1.cs)]
 [!code-vb[ControlBuilderSamples_1#4](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendLiteralString">
      <MemberSignature Language="C#" Value="public virtual void AppendLiteralString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendLiteralString(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The content to add to the control.</param>
        <summary>Adds the specified literal content to a control. This method is called by the ASP.NET page framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override the AppendLiteralString method to control how literal content between the control's opening and closing tags is processed. Literal content can be any text that is passed by the browser to the server control. For example, any HTML elements and text, between their opening and closing tags, are literal content.  
  
   
  
## Examples  
 [!code-cs[ControlBuilderSamples_1#3](~/add/codesnippet/csharp/m-system.web.ui.controlb_3_1.cs)]
 [!code-vb[ControlBuilderSamples_1#3](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The string literal is not well formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendSubBuilder">
      <MemberSignature Language="C#" Value="public virtual void AppendSubBuilder (System.Web.UI.ControlBuilder subBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSubBuilder(class System.Web.UI.ControlBuilder subBuilder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subBuilder" Type="System.Web.UI.ControlBuilder" />
      </Parameters>
      <Docs>
        <param name="subBuilder">The <see cref="T:System.Web.UI.ControlBuilder" /> object assigned to the child control.</param>
        <summary>Adds builders to the <see cref="T:System.Web.UI.ControlBuilder" /> object for any child controls that belong to the container control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example overrides the AppendSubBuilder method to throw an <xref:System.Exception> if the control this control builder is applied to tries to include controls in its instance of <xref:System.Web.UI.ControlCollection> class.  
  
 [!code-vb[ControlBuilderSamples_2#1](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_5_1.vb)]
 [!code-cs[ControlBuilderSamples_2#1](~/add/codesnippet/csharp/m-system.web.ui.controlb_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BindingContainerBuilder">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ControlBuilder BindingContainerBuilder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlBuilder BindingContainerBuilder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the control builder that corresponds to the binding container for the control that this builder creates.</summary>
        <value>The control builder that corresponds to the binding container for the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BindingContainerType">
      <MemberSignature Language="C#" Value="public virtual Type BindingContainerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BindingContainerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the binding container for the control that this builder creates.</summary>
        <value>A &lt;xref:System.Type&gt; that represent the type of the binding container for the control that this builder creates.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BuildObject">
      <MemberSignature Language="C#" Value="public virtual object BuildObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BuildObject() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Builds a design-time instance of the control that is referred to by this <see cref="T:System.Web.UI.ControlBuilder" /> object.</summary>
        <returns>The resulting built control.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloseControl">
      <MemberSignature Language="C#" Value="public virtual void CloseControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseControl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the parser to inform the builder that the parsing of the control's opening and closing tags is complete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CloseControl method is used by the parser to indicate to the builder that it has finished parsing the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ComplexPropertyEntries">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection ComplexPropertyEntries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection ComplexPropertyEntries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of complex property entries.</summary>
        <value>A collection of complex property entries.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If there are no entries, a static empty collection is returned.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public Type ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;xref:System.Type&gt; for the control to be created.</summary>
        <value>The &lt;xref:System.Type&gt; for the control to be created.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example overrides the <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> method to check the ControlType property to determine what type of control this builder is applied to. If it is a `CustomTextBox`, the builder checks whether the value of the <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> property is included in the control. If so, an exception is thrown, if not the <xref:System.Web.UI.ControlBuilder.HasBody%2A> method is called.  
  
 [!code-vb[ControlBuilderSamples_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.controlb_1_1.vb)]
 [!code-cs[ControlBuilderSamples_4#1](~/add/codesnippet/csharp/p-system.web.ui.controlb_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateBuilderFromType">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ControlBuilder CreateBuilderFromType (System.Web.UI.TemplateParser parser, System.Web.UI.ControlBuilder parentBuilder, Type type, string tagName, string id, System.Collections.IDictionary attribs, int line, string sourceFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ControlBuilder CreateBuilderFromType(class System.Web.UI.TemplateParser parser, class System.Web.UI.ControlBuilder parentBuilder, class System.Type type, string tagName, string id, class System.Collections.IDictionary attribs, int32 line, string sourceFileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parser" Type="System.Web.UI.TemplateParser" />
        <Parameter Name="parentBuilder" Type="System.Web.UI.ControlBuilder" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="attribs" Type="System.Collections.IDictionary" />
        <Parameter Name="line" Type="System.Int32" />
        <Parameter Name="sourceFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parser">The <see cref="T:System.Web.UI.TemplateParser" /> object responsible for parsing the control.</param>
        <param name="parentBuilder">The <see cref="T:System.Web.UI.ControlBuilder" /> object responsible for building the parent control.</param>
        <param name="type">The &lt;xref:System.Type&gt; of the object that the builder will create.</param>
        <param name="tagName">The name of the tag to be built. This allows the builder to support multiple tag types.</param>
        <param name="id">The &lt;xref:System.Web.UI.ControlBuilder.ID%2A&gt; attribute assigned to the control.</param>
        <param name="attribs">The &lt;xref:System.Collections.IDictionary&gt; object that holds all the specified tag attributes.</param>
        <param name="line">The source file line number for the specified control.</param>
        <param name="sourceFileName">The name of the source file from which the control is to be created.</param>
        <summary>Creates a <see cref="T:System.Web.UI.ControlBuilder" /> object from the specified tag name and object type, as well as other parameters defining the builder.</summary>
        <returns>The builder that is responsible for creating the control.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentFilterResolutionService">
      <MemberSignature Language="C#" Value="public System.Web.UI.IFilterResolutionService CurrentFilterResolutionService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IFilterResolutionService CurrentFilterResolutionService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IFilterResolutionService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an <see cref="T:System.Web.UI.IFilterResolutionService" /> object that is used to manage device-filter related services when parsing and persisting controls in the designer.</summary>
        <value>An <see cref="T:System.Web.UI.IFilterResolutionService" /> object that is used to manage device filter related services when parsing and persisting controls in the designer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.IFilterResolutionService> interface is an interface that is specific to how a control uses device filters in a designer. When controls are parsed or persisted in the designer outside the context of a browser request, the <xref:System.Web.UI.IFilterResolutionService> provides a way to determine whether the current control is affected by a named filter and whether a named filter is part of a specific device-filter hierarchy.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeclareType">
      <MemberSignature Language="C#" Value="public virtual Type DeclareType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclareType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type that will be used by code generation to declare the control.</summary>
        <value>The &lt;xref:System.Type&gt; of the control used by code generation to declare the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DesignerFilter">
      <MemberSignature Language="C#" Value="public static readonly string DesignerFilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DesignerFilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the `"__designer"` literal string.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FChildrenAsProperties">
      <MemberSignature Language="C#" Value="protected bool FChildrenAsProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FChildrenAsProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that determines whether the control has a <see cref="T:System.Web.UI.ParseChildrenAttribute" /> with &lt;xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A&gt; set to <see langword="true" />.</summary>
        <value>
          <see langword="true" /> if the control has a <see cref="T:System.Web.UI.ParseChildrenAttribute" /> with &lt;xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A&gt; set to <see langword="true" />, otherwise <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FIsNonParserAccessor">
      <MemberSignature Language="C#" Value="protected bool FIsNonParserAccessor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FIsNonParserAccessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that determines whether the control implements the <see cref="T:System.Web.UI.IParserAccessor" /> interface.</summary>
        <value>
          <see langword="false" /> if the control implements the <see cref="T:System.Web.UI.IParserAccessor" /> interface, otherwise <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildControlType">
      <MemberSignature Language="C#" Value="public virtual Type GetChildControlType (string tagName, System.Collections.IDictionary attribs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetChildControlType(string tagName, class System.Collections.IDictionary attribs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="attribs" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="tagName">The tag name of the child.</param>
        <param name="attribs">An array of attributes contained in the child control.</param>
        <summary>Obtains the &lt;xref:System.Type&gt; of the control type corresponding to a child tag. This method is called by the ASP.NET page framework.</summary>
        <returns>The &lt;xref:System.Type&gt; of the specified control's child.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code.  
  
   
  
## Examples  
 [!code-cs[ControlBuilderSamples_1#2](~/add/codesnippet/csharp/1e17c7c0-caef-4f64-90f8-_1.cs)]
 [!code-vb[ControlBuilderSamples_1#2](~/add/codesnippet/visualbasic/1e17c7c0-caef-4f64-90f8-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetObjectPersistData">
      <MemberSignature Language="C#" Value="public System.Web.UI.ObjectPersistData GetObjectPersistData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.ObjectPersistData GetObjectPersistData() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ObjectPersistData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the <see cref="T:System.Web.UI.ObjectPersistData" /> object for this <see cref="T:System.Web.UI.ControlBuilder" /> object.</summary>
        <returns>The <see cref="T:System.Web.UI.ObjectPersistData" /> for this <see cref="T:System.Web.UI.ControlBuilder" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetResourceKey">
      <MemberSignature Language="C#" Value="public string GetResourceKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetResourceKey() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the resource key for this <see cref="T:System.Web.UI.ControlBuilder" /> object.</summary>
        <returns>The resource key for this <see cref="T:System.Web.UI.ControlBuilder" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasAspCode">
      <MemberSignature Language="C#" Value="public virtual bool HasAspCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAspCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control contains any code blocks.</summary>
        <value>
          <see langword="true" /> if the control contains at least one code block; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example overrides the <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> method to check the <xref:System.Web.UI.ControlBuilder.ControlType%2A> property to determine what type of control this builder is applied to. If it is a `CustomTextBox`, the builder checks whether the value of the HasAspCode property is included in the control. If so, an exception is thrown, if not the <xref:System.Web.UI.ControlBuilder.HasBody%2A> method is called.  
  
 [!code-vb[ControlBuilderSamples_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.controlb_3_1.vb)]
 [!code-cs[ControlBuilderSamples_4#1](~/add/codesnippet/csharp/p-system.web.ui.controlb_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasBody">
      <MemberSignature Language="C#" Value="public virtual bool HasBody ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasBody() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines if a control has both an opening and closing tag. This method is called by the ASP.NET page framework.</summary>
        <returns>
          <see langword="true" /> if the control has an opening and closing tag; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code.  
  
   
  
## Examples  
 This example overrides the <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> method to check the <xref:System.Web.UI.ControlBuilder.ControlType%2A> property to determine what type of control this builder is applied to. If it is a `CustomTextBox`, the builder checks whether the value of the <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> property is included in the control. If so, an exception is thrown, if not the HasBody method is called.  
  
 [!code-vb[ControlBuilderSamples_4#1](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_1_1.vb)]
 [!code-cs[ControlBuilderSamples_4#1](~/add/codesnippet/csharp/m-system.web.ui.controlb_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HtmlDecodeLiterals">
      <MemberSignature Language="C#" Value="public virtual bool HtmlDecodeLiterals ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HtmlDecodeLiterals() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines whether the literal string of an HTML control must be HTML decoded. This method is called by the ASP.NET page framework.</summary>
        <returns>
          <see langword="true" /> if the HTML control literal string is to be decoded; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A literal string refers to the text between the opening and closing tag of an HTML control. HTML encoding is when text is converted into a string representation that the browser will display rather than interpret as HTML. Characters such as the question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers, so those characters must be encoded when they appear in `a` tags or in query strings.  
  
 The HtmlDecodeLiterals method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code.  
  
   
  
## Examples  
 The following example overrides the HtmlDecodeLiterals method to allow HTML decoding of literal strings in any control this builder is applied to.  
  
 [!code-vb[ControlBuilderSamples_2#2](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_6_1.vb)]
 [!code-cs[ControlBuilderSamples_2#2](~/add/codesnippet/csharp/m-system.web.ui.controlb_6_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the identifier property for the control to be built.</summary>
        <value>The identifier property for the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InDesigner">
      <MemberSignature Language="C#" Value="protected bool InDesigner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InDesigner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the <see cref="T:System.Web.UI.ControlBuilder" /> is running in the designer.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Web.UI.ControlBuilder" /> is running in the designer; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the InDesigner property when the <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> method is called. When a control has this builder attached to it, the <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> method determines whether the control is being accessed at design-time through a designer. The <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> returns the value of the InDesigner property, and then the <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> method is called. If the InDesigner property is set to `false`, an <xref:System.Exception> is thrown. Otherwise, the inner text of the control is returned on the <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> call.  
  
 [!code-vb[ControlBuilderSamples_3#1](~/add/codesnippet/visualbasic/p-system.web.ui.controlb_0_1.vb)]
 [!code-cs[ControlBuilderSamples_3#1](~/add/codesnippet/csharp/p-system.web.ui.controlb_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public virtual void Init (System.Web.UI.TemplateParser parser, System.Web.UI.ControlBuilder parentBuilder, Type type, string tagName, string id, System.Collections.IDictionary attribs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Init(class System.Web.UI.TemplateParser parser, class System.Web.UI.ControlBuilder parentBuilder, class System.Type type, string tagName, string id, class System.Collections.IDictionary attribs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parser" Type="System.Web.UI.TemplateParser" />
        <Parameter Name="parentBuilder" Type="System.Web.UI.ControlBuilder" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="attribs" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="parser">The <see cref="T:System.Web.UI.TemplateParser" /> object responsible for parsing the control.</param>
        <param name="parentBuilder">The <see cref="T:System.Web.UI.ControlBuilder" /> object responsible for building the parent control.</param>
        <param name="type">The &lt;xref:System.Type&gt; assigned to the control that the builder will create.</param>
        <param name="tagName">The name of the tag to be built. This allows the builder to support multiple tag types.</param>
        <param name="id">The &lt;xref:System.Web.UI.ControlBuilder.ID%2A&gt; attribute assigned to the control.</param>
        <param name="attribs">The &lt;xref:System.Collections.IDictionary&gt; object that holds all the specified tag attributes.</param>
        <summary>Initializes the <see cref="T:System.Web.UI.ControlBuilder" /> for use after it is instantiated. This method is called by the ASP.NET page framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InPageTheme">
      <MemberSignature Language="C#" Value="protected bool InPageTheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPageTheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value indicating whether this <see cref="T:System.Web.UI.ControlBuilder" /> object is used to generate page themes.</summary>
        <value>
          <see langword="true" /> to use this <see cref="T:System.Web.UI.ControlBuilder" /> to generate page themes; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemType">
      <MemberSignature Language="C#" Value="public virtual string ItemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ItemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type set on the binding container.</summary>
        <value>The type set on the binding container.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Localize">
      <MemberSignature Language="C#" Value="public bool Localize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Localize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value indicating whether the control that is created by this <see cref="T:System.Web.UI.ControlBuilder" /> object is localized.</summary>
        <value>
          <see langword="true" /> to indicate that the control created by this <see cref="T:System.Web.UI.ControlBuilder" /> object is localized; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NamingContainerType">
      <MemberSignature Language="C#" Value="public Type NamingContainerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type NamingContainerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the naming container for the control that this builder creates.</summary>
        <value>A &lt;xref:System.Type&gt; that represent the type of the naming container for the control that this builder creates.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NeedsTagInnerText">
      <MemberSignature Language="C#" Value="public virtual bool NeedsTagInnerText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NeedsTagInnerText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines if the control builder needs to get its inner text. If so, the &lt;xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A&gt; method must be called. This method is called by the ASP.NET page framework.</summary>
        <returns>
          <see langword="true" /> if the control builder needs to get its inner text. The default is <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The inner text is the text between the opening and closing tags of the control.  
  
 This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code.  
  
   
  
## Examples  
 The following example uses the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property when the NeedsTagInnerText method is called. When a control has this builder attached to it, the NeedsTagInnerText determines whether the control is being accessed at design-time through a designer. The NeedsTagInnerText returns the value of the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property, and then the <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> method is called. If the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property is set to `false`, an <xref:System.Exception> is thrown. Otherwise, the inner text of the control is returned on the <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> call.  
  
 [!code-vb[ControlBuilderSamples_3#1](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_0_1.vb)]
 [!code-cs[ControlBuilderSamples_3#1](~/add/codesnippet/csharp/m-system.web.ui.controlb_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAppendToParentBuilder">
      <MemberSignature Language="C#" Value="public virtual void OnAppendToParentBuilder (System.Web.UI.ControlBuilder parentBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnAppendToParentBuilder(class System.Web.UI.ControlBuilder parentBuilder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentBuilder" Type="System.Web.UI.ControlBuilder" />
      </Parameters>
      <Docs>
        <param name="parentBuilder">The <see cref="T:System.Web.UI.ControlBuilder" /> object to which the current builder is added.</param>
        <summary>Notifies the <see cref="T:System.Web.UI.ControlBuilder" /> that it is being added to a parent control builder.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example overrides the OnAppendToParentBuilder method to check the <xref:System.Web.UI.ControlBuilder.ControlType%2A> property to determine what type of control this builder is applied to. If it is a `CustomTextBox`, the builder checks whether the value of the <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> property is included in the control. If so, an exception is thrown, if not the <xref:System.Web.UI.ControlBuilder.HasBody%2A> method is called.  
  
 [!code-vb[ControlBuilderSamples_4#1](~/add/codesnippet/visualbasic/6102f4e2-d19f-4c63-97f4-_1.vb)]
 [!code-cs[ControlBuilderSamples_4#1](~/add/codesnippet/csharp/6102f4e2-d19f-4c63-97f4-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageVirtualPath">
      <MemberSignature Language="C#" Value="public string PageVirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PageVirtualPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the virtual path of a page to be built by this <see cref="T:System.Web.UI.ControlBuilder" /> instance.</summary>
        <value>The virtual path of the page to be built.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parser">
      <MemberSignature Language="C#" Value="protected System.Web.UI.TemplateParser Parser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.TemplateParser Parser" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.TemplateParser</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.UI.TemplateParser" /> responsible for parsing the control.</summary>
        <value>The <see cref="T:System.Web.UI.TemplateParser" /> used to parse the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property retrieves the <xref:System.Web.UI.TemplateParser> responsible for parsing the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessGeneratedCode">
      <MemberSignature Language="C#" Value="public virtual void ProcessGeneratedCode (System.CodeDom.CodeCompileUnit codeCompileUnit, System.CodeDom.CodeTypeDeclaration baseType, System.CodeDom.CodeTypeDeclaration derivedType, System.CodeDom.CodeMemberMethod buildMethod, System.CodeDom.CodeMemberMethod dataBindingMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessGeneratedCode(class System.CodeDom.CodeCompileUnit codeCompileUnit, class System.CodeDom.CodeTypeDeclaration baseType, class System.CodeDom.CodeTypeDeclaration derivedType, class System.CodeDom.CodeMemberMethod buildMethod, class System.CodeDom.CodeMemberMethod dataBindingMethod) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="baseType" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="derivedType" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="buildMethod" Type="System.CodeDom.CodeMemberMethod" />
        <Parameter Name="dataBindingMethod" Type="System.CodeDom.CodeMemberMethod" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">The root container of a CodeDOM graph of the control that is being built.</param>
        <param name="baseType">The base type of the page or user control that contains the control that is being built.</param>
        <param name="derivedType">The derived type of the page or user control that contains the control that is being built.</param>
        <param name="buildMethod">The code that is used to build the control.</param>
        <param name="dataBindingMethod">The code that is used to build the data-binding method of the control.</param>
        <summary>Enables custom control builders to access the generated Code Document Object Model (CodeDom) and insert and modify code during the process of parsing and building controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In the single-file page model, the `baseType` and `derivedType` parameters are the same <xref:System.CodeDom.CodeTypeDeclaration> type, which typically derives from the <xref:System.Web.UI.Page> class.  
  
 In the code-behind page model, `baseType` is the <xref:System.CodeDom.CodeTypeDeclaration> type that represents the partial code-behind class, which is typically derived from the <xref:System.Web.UI.Page> class. The `derivedType` parameter is the class that derives from the partial class that contains the markup.  
  
 For more information about ASP.NET Web page models, see [ASP.NET Web Forms Page Syntax Overview](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about how to use the CodeDOM to represent and generate source code, see [Dynamic Source Code Generation and Compilation](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the service object for this <see cref="T:System.Web.UI.ControlBuilder" /> object.</summary>
        <value>An &lt;xref:System.IServiceProvider&gt; that represents the service object for this <see cref="T:System.Web.UI.ControlBuilder" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetResourceKey">
      <MemberSignature Language="C#" Value="public void SetResourceKey (string resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceKey(string resourceKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceKey">The resource key for this <see cref="T:System.Web.UI.ControlBuilder" />.</param>
        <summary>Sets the resource key for this <see cref="T:System.Web.UI.ControlBuilder" /> object.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetServiceProvider">
      <MemberSignature Language="C#" Value="public void SetServiceProvider (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetServiceProvider(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">An &lt;xref:System.IServiceProvider&gt; that represents the service object for the <see cref="T:System.Web.UI.ControlBuilder" />.</param>
        <summary>Sets the service object for this <see cref="T:System.Web.UI.ControlBuilder" /> object.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetTagInnerText">
      <MemberSignature Language="C#" Value="public virtual void SetTagInnerText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTagInnerText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to be provided.</param>
        <summary>Provides the <see cref="T:System.Web.UI.ControlBuilder" /> with the inner text of the control tag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called only if <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> previously returned `true`.  
  
   
  
## Examples  
 The following example uses the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property when the <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> method is called. When a control has this builder attached to it, the <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> determines whether the control is being accessed at design-time through a designer. The <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> returns the value of the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property, and then the SetTagInnerText method is called. If the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property is set to `false`, an <xref:System.Exception> is thrown. Otherwise, the inner text of the control is returned on the SetTagInnerText call.  
  
 [!code-vb[ControlBuilderSamples_3#1](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_2_1.vb)]
 [!code-cs[ControlBuilderSamples_3#1](~/add/codesnippet/csharp/m-system.web.ui.controlb_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SubBuilders">
      <MemberSignature Language="C#" Value="public System.Collections.ArrayList SubBuilders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList SubBuilders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a list of child <see cref="T:System.Web.UI.ControlBuilder" /> objects for this <see cref="T:System.Web.UI.ControlBuilder" /> object.</summary>
        <value>A list of child <see cref="T:System.Web.UI.ControlBuilder" /> objects.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="public string TagName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the tag name for the control to be built.</summary>
        <value>The tag name for the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TemplatePropertyEntries">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection TemplatePropertyEntries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection TemplatePropertyEntries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of template property entries.</summary>
        <value>A collection of template property entries.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If there are no entries, a static empty collection is returned.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ThemeResolutionService">
      <MemberSignature Language="C#" Value="public System.Web.UI.IThemeResolutionService ThemeResolutionService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IThemeResolutionService ThemeResolutionService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IThemeResolutionService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an <see cref="T:System.Web.UI.IThemeResolutionService" /> object that is used in design time to manage control themes and skins.</summary>
        <value>An <see cref="T:System.Web.UI.IThemeResolutionService" /> object that is used in design time to manage control themes and skins.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.IThemeResolutionService> interface is a container for one or more <xref:System.Web.UI.ThemeProvider> objects, which in turn supply the <xref:System.Web.UI.SkinBuilder> objects that apply themes and control skins to controls when they are created in a designer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>