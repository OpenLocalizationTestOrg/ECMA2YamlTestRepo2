<Type Name="StreamGeometryContext" FullName="System.Windows.Media.StreamGeometryContext">
  <TypeSignature Language="C#" Value="public abstract class StreamGeometryContext : System.Windows.Threading.DispatcherObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit StreamGeometryContext extends System.Windows.Threading.DispatcherObject implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Describes a geometry using drawing commands. This class is used with the <see cref="T:System.Windows.Media.StreamGeometry" /> class to create a lightweight geometry that does not support data binding, animation, or modification.</summary>
    <remarks>To be added.</remarks>
    <exception cref="T:System.InvalidOperationException">An attempt was made to add a segment without starting a figure by calling the &lt;xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A&gt; method.</exception>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ArcTo">
      <MemberSignature Language="C#" Value="public abstract void ArcTo (System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ArcTo(valuetype System.Windows.Point point, valuetype System.Windows.Size size, float64 rotationAngle, bool isLargeArc, valuetype System.Windows.Media.SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="size" Type="System.Windows.Size" />
        <Parameter Name="rotationAngle" Type="System.Double" />
        <Parameter Name="isLargeArc" Type="System.Boolean" />
        <Parameter Name="sweepDirection" Type="System.Windows.Media.SweepDirection" />
        <Parameter Name="isStroked" Type="System.Boolean" />
        <Parameter Name="isSmoothJoin" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">The destination point for the end of the arc.</param>
        <param name="size">The radii (half the width and half the height) of an oval whose perimeter is used to draw the angle. If the oval is very rounded in all directions, the arc will be rounded, if it is nearly flat, so will the arc. For example, a very large width and height would represent a very large oval, which would give a slight curvature for the angle.</param>
        <param name="rotationAngle">The rotation angle of the oval that specifies the curve. The curvature of the arc can be rotated with this parameter.</param>
        <param name="isLargeArc">
          <see langword="true" /> to draw the arc greater than 180 degrees; otherwise, <see langword="false" />.</param>
        <param name="sweepDirection">A value that indicates whether the arc is drawn in the <see cref="T:System.Windows.Media.SweepDirection" /> or <see cref="T:System.Windows.Media.SweepDirection" /> direction.</param>
        <param name="isStroked">
          <see langword="true" /> to make the segment stroked when a <see cref="T:System.Windows.Media.Pen" /> is used to render the segment; otherwise, <see langword="false" />.</param>
        <param name="isSmoothJoin">
          <see langword="true" /> to treat the join between this segment and the previous segment as a corner when stroked with a <see cref="T:System.Windows.Media.Pen" />; otherwise, <see langword="false" />.</param>
        <summary>Draws an arc to the specified point.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A> method as its start point.  
  
 A <xref:System.Windows.Media.StreamGeometry> cannot be serialized if it contains a <xref:System.Windows.Media.Transform> or any non-stroked or unfilled segments.  
  
   
  
## Examples  
 The following example shows how to draw an arc using the ArcTo method.  
  
 [!code-vb[GeometriesMiscSnippets_procedural_snip#StreamGeometryArcToExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets_procedural/streamgeometryarctoexample.vb#streamgeometryarctoexamplewholepage)]
 [!code-cs[GeometriesMiscSnippets_procedural_snip#StreamGeometryArcToExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_procedural/StreamGeometryArcToExample.cs#streamgeometryarctoexamplewholepage)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginFigure">
      <MemberSignature Language="C#" Value="public abstract void BeginFigure (System.Windows.Point startPoint, bool isFilled, bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginFigure(valuetype System.Windows.Point startPoint, bool isFilled, bool isClosed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPoint" Type="System.Windows.Point" />
        <Parameter Name="isFilled" Type="System.Boolean" />
        <Parameter Name="isClosed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startPoint">The <see cref="T:System.Windows.Point" /> where the figure begins.</param>
        <param name="isFilled">
          <see langword="true" /> to use the area contained by this figure for hit-testing, rendering, and clipping; otherwise, <see langword="false" />.</param>
        <param name="isClosed">
          <see langword="true" /> to close the figure; otherwise, <see langword="false" />. For example, if two connecting lines are drawn, and `isClosed` is set to <see langword="false" />, the drawing will just be of two lines but if `isClosed` is set to <see langword="true" />, the two lines will be closed to create a triangle.</param>
        <summary>Specifies the starting point for a new figure.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By calling this method multiple times, you can create multiple figures (self-contained geometric shapes) within this <xref:System.Windows.Media.StreamGeometryContext>.  
  
 A <xref:System.Windows.Media.StreamGeometry> cannot be serialized if it contains a <xref:System.Windows.Media.Transform> or any non-stroked or unfilled segments.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BezierTo">
      <MemberSignature Language="C#" Value="public abstract void BezierTo (System.Windows.Point point1, System.Windows.Point point2, System.Windows.Point point3, bool isStroked, bool isSmoothJoin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BezierTo(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2, valuetype System.Windows.Point point3, bool isStroked, bool isSmoothJoin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
        <Parameter Name="point3" Type="System.Windows.Point" />
        <Parameter Name="isStroked" Type="System.Boolean" />
        <Parameter Name="isSmoothJoin" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point1">The first control point used to specify the shape of the curve.</param>
        <param name="point2">The second control point used to specify the shape of the curve.</param>
        <param name="point3">The destination point for the end of the curve.</param>
        <param name="isStroked">
          <see langword="true" /> to make the segment stroked when a <see cref="T:System.Windows.Media.Pen" /> is used to render the segment; otherwise, <see langword="false" />.</param>
        <param name="isSmoothJoin">
          <see langword="true" /> to treat the join between this segment and the previous segment as a corner when stroked with a <see cref="T:System.Windows.Media.Pen" />; otherwise, <see langword="false" />.</param>
        <summary>Draws a Bezier curve to the specified point.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cubic Bezier curve is defined by a start point, end point, and two control points. The first control point determines the curvature of the first half of the segment, and the second control point determines the curvature of the second half of the segment.  
  
 This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A> method as its start point.  
  
 A <xref:System.Windows.Media.StreamGeometry> cannot be serialized if it contains a <xref:System.Windows.Media.Transform> or any non-stroked or unfilled segments.  
  
   
  
## Examples  
 The following example shows how to draw a Bezier curve using the BezierTo method.  
  
 [!code-vb[GeometriesMiscSnippets_procedural_snip#StreamGeometryBezierToExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets_procedural/streamgeometrybeziertoexample.vb#streamgeometrybeziertoexamplewholepage)]
 [!code-cs[GeometriesMiscSnippets_procedural_snip#StreamGeometryBezierToExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_procedural/StreamGeometryBezierToExample.cs#streamgeometrybeziertoexamplewholepage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An attempt was made to add a segment without starting a figure by calling the &lt;xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A&gt; method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes this context and flushes its content so that it can be rendered.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Once closed, the context cannot be modified. The context must be closed before its content can be rendered.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This context has already been closed or disposed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineTo">
      <MemberSignature Language="C#" Value="public abstract void LineTo (System.Windows.Point point, bool isStroked, bool isSmoothJoin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LineTo(valuetype System.Windows.Point point, bool isStroked, bool isSmoothJoin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="isStroked" Type="System.Boolean" />
        <Parameter Name="isSmoothJoin" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">The destination point for the end of the line.</param>
        <param name="isStroked">
          <see langword="true" /> to make the segment stroked when a <see cref="T:System.Windows.Media.Pen" /> is used to render the segment; otherwise, <see langword="false" />.</param>
        <param name="isSmoothJoin">
          <see langword="true" /> to treat the join between this segment and the previous segment as a corner when stroked with a <see cref="T:System.Windows.Media.Pen" />; otherwise, <see langword="false" />.</param>
        <summary>Draws a straight line to the specified <see cref="T:System.Windows.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A> method as its start point.  
  
 A <xref:System.Windows.Media.StreamGeometry> cannot be serialized if it contains a <xref:System.Windows.Media.Transform> or any non-stroked or unfilled segments.  
  
   
  
## Examples  
 The following example shows how to draw a triangle using the LineTo method.  
  
 [!code-vb[GeometriesMiscSnippets_procedural_snip#StreamGeometryTriangleExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets_procedural/streamgeometrytriangleexample.vb#streamgeometrytriangleexamplewholepage)]
 [!code-cs[GeometriesMiscSnippets_procedural_snip#StreamGeometryTriangleExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_procedural/StreamGeometryTriangleExample.cs#streamgeometrytriangleexamplewholepage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An attempt was made to add a segment without starting a figure by calling the &lt;xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A&gt; method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PolyBezierTo">
      <MemberSignature Language="C#" Value="public abstract void PolyBezierTo (System.Collections.Generic.IList&lt;System.Windows.Point&gt; points, bool isStroked, bool isSmoothJoin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PolyBezierTo(class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Point&gt; points, bool isStroked, bool isSmoothJoin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Windows.Point&gt;" />
        <Parameter Name="isStroked" Type="System.Boolean" />
        <Parameter Name="isSmoothJoin" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="points">The list of points that specify control points and destination points for one or more Bezier curves. The number of points in this list should be a multiple of three.</param>
        <param name="isStroked">
          <see langword="true" /> to make the segment stroked when a <see cref="T:System.Windows.Media.Pen" /> is used to render the segment; otherwise, <see langword="false" />.</param>
        <param name="isSmoothJoin">
          <see langword="true" /> to treat the join between this segment and the previous segment as a corner when stroked with a <see cref="T:System.Windows.Media.Pen" />; otherwise, <see langword="false" />.</param>
        <summary>Draws one or more connected Bezier curves.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The first point in `points` specifies the first control point, the next specifies the second control point, the third point specifies the end point, the next point specifies the first control point of the next curve, and so on.  
  
 This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A> method as its start point.  
  
 A <xref:System.Windows.Media.StreamGeometry> cannot be serialized if it contains a <xref:System.Windows.Media.Transform> or any non-stroked or unfilled segments.  
  
   
  
## Examples  
 The following example shows how to draw multiple connected Bezier curves using the PolyBezierTo method.  
  
 [!code-vb[GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyBezierToExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets_procedural/streamgeometrypolybeziertoexample.vb#streamgeometrypolybeziertoexamplewholepage)]
 [!code-cs[GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyBezierToExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_procedural/StreamGeometryPolyBezierToExample.cs#streamgeometrypolybeziertoexamplewholepage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An attempt was made to add a segment without starting a figure by calling the &lt;xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A&gt; method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PolyLineTo">
      <MemberSignature Language="C#" Value="public abstract void PolyLineTo (System.Collections.Generic.IList&lt;System.Windows.Point&gt; points, bool isStroked, bool isSmoothJoin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PolyLineTo(class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Point&gt; points, bool isStroked, bool isSmoothJoin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Windows.Point&gt;" />
        <Parameter Name="isStroked" Type="System.Boolean" />
        <Parameter Name="isSmoothJoin" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="points">The collection of points that specify destination points for one or more connected straight lines.</param>
        <param name="isStroked">
          <see langword="true" /> to make the segment stroked when a <see cref="T:System.Windows.Media.Pen" /> is used to render the segment; otherwise, <see langword="false" />.</param>
        <param name="isSmoothJoin">
          <see langword="true" /> to treat the join between this segment and the previous segment as a corner when stroked with a <see cref="T:System.Windows.Media.Pen" />; otherwise, <see langword="false" />.</param>
        <summary>Draws one or more connected straight lines.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A> method as its start point.  
  
 A <xref:System.Windows.Media.StreamGeometry> cannot be serialized if it contains a <xref:System.Windows.Media.Transform> or any non-stroked or unfilled segments.  
  
   
  
## Examples  
 The following example shows how to draw a triangle using the PolyLineTo method.  
  
 [!code-cs[GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyLineToExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_procedural/StreamGeometryPolyLineToExample.cs#streamgeometrypolylinetoexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyLineToExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets_procedural/streamgeometrypolylinetoexample.vb#streamgeometrypolylinetoexamplewholepage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An attempt was made to add a segment without starting a figure by calling the &lt;xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A&gt; method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PolyQuadraticBezierTo">
      <MemberSignature Language="C#" Value="public abstract void PolyQuadraticBezierTo (System.Collections.Generic.IList&lt;System.Windows.Point&gt; points, bool isStroked, bool isSmoothJoin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PolyQuadraticBezierTo(class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Point&gt; points, bool isStroked, bool isSmoothJoin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IList&lt;System.Windows.Point&gt;" />
        <Parameter Name="isStroked" Type="System.Boolean" />
        <Parameter Name="isSmoothJoin" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="points">The collection of points that specify control points and destination points for one or more quadratic Bezier curves. The first point in the list specifies the curve's control point, the next point specifies the destination point, the next point specifies the control point of the next curve, and so on. The list must contain an even number of points.</param>
        <param name="isStroked">
          <see langword="true" /> to make the segment stroked when a <see cref="T:System.Windows.Media.Pen" /> is used to render the segment; otherwise, <see langword="false" />.</param>
        <param name="isSmoothJoin">
          <see langword="true" /> to treat the join between this segment and the previous segment as a corner when stroked with a <see cref="T:System.Windows.Media.Pen" />; otherwise, <see langword="false" />.</param>
        <summary>Draws one or more connected quadratic Bezier curves.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A> method as its start point.  
  
 A <xref:System.Windows.Media.StreamGeometry> cannot be serialized if it contains a <xref:System.Windows.Media.Transform> or any non-stroked or unfilled segments.  
  
   
  
## Examples  
 The following example shows how to draw multiple connected quadratic Bezier curves using the PolyQuadraticBezierTo method.  
  
 [!code-vb[GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyQuadraticBezierToExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets_procedural/streamgeometrypolyquadraticbeziertoexample.vb#streamgeometrypolyquadraticbeziertoexamplewholepage)]
 [!code-cs[GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyQuadraticBezierToExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_procedural/StreamGeometryPolyQuadraticBezierToExample.cs#streamgeometrypolyquadraticbeziertoexamplewholepage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An attempt was made to add a segment without starting a figure by calling the &lt;xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A&gt; method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="QuadraticBezierTo">
      <MemberSignature Language="C#" Value="public abstract void QuadraticBezierTo (System.Windows.Point point1, System.Windows.Point point2, bool isStroked, bool isSmoothJoin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void QuadraticBezierTo(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2, bool isStroked, bool isSmoothJoin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
        <Parameter Name="isStroked" Type="System.Boolean" />
        <Parameter Name="isSmoothJoin" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point1">The control point used to specify the shape of the curve.</param>
        <param name="point2">The destination point for the end of the curve.</param>
        <param name="isStroked">
          <see langword="true" /> to make the segment stroked when a <see cref="T:System.Windows.Media.Pen" /> is used to render the segment; otherwise, <see langword="false" />.</param>
        <param name="isSmoothJoin">
          <see langword="true" /> to treat the join between this segment and the previous segment as a corner when stroked with a <see cref="T:System.Windows.Media.Pen" />; otherwise, <see langword="false" />.</param>
        <summary>Draws a quadratic Bezier curve.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unlike a cubic Bezier curve, which uses two control points, a quadratic cubic Bezier curve uses a single control point.  
  
 This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A> method as its start point.  
  
 A <xref:System.Windows.Media.StreamGeometry> cannot be serialized if it contains a <xref:System.Windows.Media.Transform> or any non-stroked or unfilled segments.  
  
   
  
## Examples  
 The following example shows how to draw a quadratic Bezier curve using the QuadraticBezierTo method.  
  
 [!code-cs[GeometriesMiscSnippets_procedural_snip#StreamGeometryQuadraticBezierToExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_procedural/StreamGeometryQuadraticBezierToExample.cs#streamgeometryquadraticbeziertoexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_procedural_snip#StreamGeometryQuadraticBezierToExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets_procedural/streamgeometryquadraticbeziertoexample.vb#streamgeometryquadraticbeziertoexamplewholepage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An attempt was made to add a segment without starting a figure by calling the &lt;xref:System.Windows.Media.StreamGeometryContext.BeginFigure%2A&gt; method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This member supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>