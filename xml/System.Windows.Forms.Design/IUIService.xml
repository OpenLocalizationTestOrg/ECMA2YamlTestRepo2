<Type Name="IUIService" FullName="System.Windows.Forms.Design.IUIService">
  <TypeSignature Language="C#" Value="public interface IUIService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUIService" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("06A9C74B-5E32-4561-BE73-381B37869F4F")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enables interaction with the user interface of the development environment object that is hosting the designer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 IUIService can display error messages, show dialog boxes, and get ambient properties of the host, such as the font for dialog boxes and color schemes, through the <xref:System.Windows.Forms.Design.IUIService.Styles%2A> dictionary property.  
  
   
  
## Examples  
 The following code example creates a designer that provides designer verb menu commands that call methods of the IUIService. To use the example, compile the sample code to an assembly, and add a reference to the assembly in a Windows Forms application. If you are using [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)], the `IUIServiceExampleControl` is automatically added to the **Toolbox**. Add an instance of the `IUIServiceExampleControl` to a <xref:System.Windows.Forms.Form>. To access the designer verb commands that invoke IUIService methods, either right-click on the control's surface or click on the control's smart tag glyph and select an item from the smart tag panel.  
  
 [!code-vb[IUIServiceExample#1](~/add/codesnippet/visualbasic/t-system.windows.forms.d_61_1.vb)]
 [!code-cpp[IUIServiceExample#1](~/add/codesnippet/cpp/t-system.windows.forms.d_61_1.cpp)]
 [!code-cs[IUIServiceExample#1](~/add/codesnippet/csharp/t-system.windows.forms.d_61_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CanShowComponentEditor">
      <MemberSignature Language="C#" Value="public bool CanShowComponentEditor (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanShowComponentEditor(object component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">The component to check for support for displaying a <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" />.</param>
        <summary>Indicates whether the component can display a <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" />.</summary>
        <returns>
          <see langword="true" /> if the specified component can display a component editor form; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Component editors can display a component editor form that is similar to a property page from the Component Object Model (COM).  
  
 This method checks to determine whether the specified component has a <xref:System.ComponentModel.ComponentEditor> that can display a <xref:System.Windows.Forms.Design.ComponentEditorForm>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDialogOwnerWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IWin32Window GetDialogOwnerWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.IWin32Window GetDialogOwnerWindow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IWin32Window</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the window that should be used as the owner when showing dialog boxes.</summary>
        <returns>An <see cref="T:System.Windows.Forms.IWin32Window" /> that indicates the window to own any child dialog boxes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Some dialog boxes are parented to an owner application and are not visible in the task list. This method returns an <xref:System.Windows.Forms.IWin32Window> that indicates the window that should be the owner for dialog boxes of this sort that are spawned from an integrated development environment.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetUIDirty">
      <MemberSignature Language="C#" Value="public void SetUIDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUIDirty() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets a flag indicating the UI has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method indicates that the UI has been changed and should be refreshed. It is important to indicate the need for a refresh whenever a toolbar or menu item's status changes. Most development environments cache the status of these elements for speed, and need to know when they need to be updated. This method is called, for example, after objects have been selected within designer view to enable the cut and copy menu items.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowComponentEditor">
      <MemberSignature Language="C#" Value="public bool ShowComponentEditor (object component, System.Windows.Forms.IWin32Window parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowComponentEditor(object component, class System.Windows.Forms.IWin32Window parent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="parent" Type="System.Windows.Forms.IWin32Window" />
      </Parameters>
      <Docs>
        <param name="component">The component for which to display a <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" />.</param>
        <param name="parent">The <see cref="T:System.Windows.Forms.IWin32Window" /> to parent any dialog boxes to.</param>
        <summary>Attempts to display a <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" /> for a component.</summary>
        <returns>
          <see langword="true" /> if the attempt is successful; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.Design.ComponentEditorForm> is similar to a property page from the Component Object Model (COM).  
  
 If the component does not support component editors, an <xref:System.ArgumentException> is thrown. To avoid this, be sure to call <xref:System.Windows.Forms.Design.IUIService.CanShowComponentEditor%2A> first.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The component does not support component editors.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowDialog (System.Windows.Forms.Form form);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Forms.DialogResult ShowDialog(class System.Windows.Forms.Form form) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="form" Type="System.Windows.Forms.Form" />
      </Parameters>
      <Docs>
        <param name="form">The <see cref="T:System.Windows.Forms.Form" /> to display.</param>
        <summary>Attempts to display the specified form in a dialog box.</summary>
        <returns>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values indicating the result code returned by the dialog box.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example attempts to obtain an instance of the <xref:System.Windows.Forms.Design.IUIService> class and invoke the service's ShowDialog method.  
  
 [!code-vb[IUIServiceExample#4](~/add/codesnippet/visualbasic/m-system.windows.forms.d_54_1.vb)]
 [!code-cpp[IUIServiceExample#4](~/add/codesnippet/cpp/m-system.windows.forms.d_54_1.cpp)]
 [!code-cs[IUIServiceExample#4](~/add/codesnippet/csharp/m-system.windows.forms.d_54_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public void ShowError (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowError(class System.Exception ex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">The &lt;xref:System.Exception&gt; to display.</param>
        <summary>Displays the specified exception and information about the exception in a message box.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using this method enables the message box display to be properly integrated with the development environment.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public void ShowError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowError(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The error message to display.</param>
        <summary>Displays the specified error message in a message box.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using this method enables the message box display to be properly integrated with the development environment.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public void ShowError (Exception ex, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowError(class System.Exception ex, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">The &lt;xref:System.Exception&gt; to display.</param>
        <param name="message">A message to display that provides information about the exception.</param>
        <summary>Displays the specified exception and information about the exception in a message box.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using this method enables the message box display to be properly integrated with the development environment.  
  
   
  
## Examples  
 The following code example attempts to obtain an instance of the <xref:System.Windows.Forms.Design.IUIService> and invoke the service's <xref:System.Windows.Forms.Design.IUIService.ShowError%2A> method.  
  
 [!code-vb[IUIServiceExample#3](~/add/codesnippet/visualbasic/937ae189-f758-4c39-b504-_1.vb)]
 [!code-cpp[IUIServiceExample#3](~/add/codesnippet/cpp/937ae189-f758-4c39-b504-_1.cpp)]
 [!code-cs[IUIServiceExample#3](~/add/codesnippet/csharp/937ae189-f758-4c39-b504-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowMessage">
      <MemberSignature Language="C#" Value="public void ShowMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowMessage(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to display</param>
        <summary>Displays the specified message in a message box.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method ensures that the display of the message box is properly integrated with the development environment.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ShowMessage method to display a message box.  
  
 [!code-vb[IUIServiceExample#2](~/add/codesnippet/visualbasic/m-system.windows.forms.d_51_1.vb)]
 [!code-cpp[IUIServiceExample#2](~/add/codesnippet/cpp/m-system.windows.forms.d_51_1.cpp)]
 [!code-cs[IUIServiceExample#2](~/add/codesnippet/csharp/m-system.windows.forms.d_51_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowMessage">
      <MemberSignature Language="C#" Value="public void ShowMessage (string message, string caption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowMessage(string message, string caption) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="caption" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to display.</param>
        <param name="caption">The caption for the message box.</param>
        <summary>Displays the specified message in a message box with the specified caption.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method ensures that the display of the message box is properly integrated with the development environment.  
  
   
  
## Examples  
 The following code example attempts to obtain an instance of the <xref:System.Windows.Forms.Design.IUIService> and invoke the service's <xref:System.Windows.Forms.Design.IUIService.ShowMessage%2A> method.  
  
 [!code-vb[IUIServiceExample#2](~/add/codesnippet/visualbasic/eb97abf6-0561-4f8c-bc11-_1.vb)]
 [!code-cpp[IUIServiceExample#2](~/add/codesnippet/cpp/eb97abf6-0561-4f8c-bc11-_1.cpp)]
 [!code-cs[IUIServiceExample#2](~/add/codesnippet/csharp/eb97abf6-0561-4f8c-bc11-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowMessage">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowMessage (string message, string caption, System.Windows.Forms.MessageBoxButtons buttons);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Forms.DialogResult ShowMessage(string message, string caption, valuetype System.Windows.Forms.MessageBoxButtons buttons) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="buttons" Type="System.Windows.Forms.MessageBoxButtons" />
      </Parameters>
      <Docs>
        <param name="message">The message to display.</param>
        <param name="caption">The caption for the dialog box.</param>
        <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons" /> values: <see cref="T:System.Windows.Forms.MessageBoxButtons" />, <see cref="T:System.Windows.Forms.MessageBoxButtons" />, <see cref="T:System.Windows.Forms.MessageBoxButtons" />, or <see cref="T:System.Windows.Forms.MessageBoxButtons" />.</param>
        <summary>Displays the specified message in a message box with the specified caption and buttons to place on the dialog box.</summary>
        <returns>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values indicating the result code returned by the dialog box.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method ensures that the display of the message box is properly integrated with the development environment.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ShowMessage method to display a message box.  
  
 [!code-vb[IUIServiceExample#2](~/add/codesnippet/visualbasic/aac328dd-e547-4029-bf00-_1.vb)]
 [!code-cpp[IUIServiceExample#2](~/add/codesnippet/cpp/aac328dd-e547-4029-bf00-_1.cpp)]
 [!code-cs[IUIServiceExample#2](~/add/codesnippet/csharp/aac328dd-e547-4029-bf00-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowToolWindow">
      <MemberSignature Language="C#" Value="public bool ShowToolWindow (Guid toolWindow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowToolWindow(valuetype System.Guid toolWindow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toolWindow" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="toolWindow">A &lt;xref:System.Guid&gt; identifier for the tool window. This can be a custom &lt;xref:System.Guid&gt; or one of the predefined values from <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</param>
        <summary>Displays the specified tool window.</summary>
        <returns>
          <see langword="true" /> if the tool window was successfully shown; <see langword="false" /> if it could not be shown or found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example attempts to obtain an instance of the <xref:System.Windows.Forms.Design.IUIService> and invoke the service's ShowToolWindow method.  
  
 [!code-vb[IUIServiceExample#5](~/add/codesnippet/visualbasic/m-system.windows.forms.d_108_1.vb)]
 [!code-cpp[IUIServiceExample#5](~/add/codesnippet/cpp/m-system.windows.forms.d_108_1.cpp)]
 [!code-cs[IUIServiceExample#5](~/add/codesnippet/csharp/m-system.windows.forms.d_108_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Styles">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Styles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Styles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of styles that are specific to the host's environment.</summary>
        <value>An &lt;xref:System.Collections.IDictionary&gt; containing style settings.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The dictionary can provide information from the host environment. At a minimum, this consists of the font that should be used for standard UI text, and the color to use for highlighting. These required styles are "DialogFont" and "HighlightColor".  
  
 The values for these styles may be retrieved by using the style as a key for the dictionary, accessing the dictionary using the key as an indexer. For example: (object implementing <xref:System.Windows.Forms.Design.IUIService>).Styles[(style name string in quotes)].  
  
   
  
## Examples  
 The following code example gets the dialog box font from the host environment.  
  
 [!code-cpp[Classic IUIService.Styles Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_99_1.cpp)]
 [!code-vb[Classic IUIService.Styles Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_99_1.vb)]
 [!code-cs[Classic IUIService.Styles Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_99_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>