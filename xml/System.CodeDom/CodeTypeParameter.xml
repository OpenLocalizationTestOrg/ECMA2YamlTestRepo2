<Type Name="CodeTypeParameter" FullName="System.CodeDom.CodeTypeParameter">
  <TypeSignature Language="C#" Value="public class CodeTypeParameter : System.CodeDom.CodeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeParameter extends System.CodeDom.CodeObject" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a type parameter of a generic type or method.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CodeTypeParameter class represents a type parameter in the declaration of a generic type or method.  
  
 A generic type or method declaration contains one or more unspecified types known as type parameters. A type parameter name stands for the type within the body of the generic declaration. For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.  
  
 For more information on generics, see [Generics in the .NET Framework Class Library](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows the use of the CodeTypeParameter class to create a CodeDOM graph to generate an application containing generics code.  
  
 [!code-vb[System.CodeDom.Generics.1#1](~/add/codesnippet/visualbasic/t-system.codedom.codetyp_8_1.vb)]
 [!code-cs[System.CodeDom.Generics.1#1](~/add/codesnippet/csharp/t-system.codedom.codetyp_8_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeParameter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you use this constructor, you should set the <xref:System.CodeDom.CodeTypeParameter.Name%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeParameter (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the type parameter.</param>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeParameter" /> class with the specified type parameter name.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the use of CodeTypeParameter constructor to add a type parameter.  This example is part of a larger example provided for the <xref:System.CodeDom.CodeTypeParameter> class.  
  
 [!code-vb[System.CodeDom.Generics.1#10](~/add/codesnippet/visualbasic/m-system.codedom.codetyp_4_1.vb)]
 [!code-cs[System.CodeDom.Generics.1#10](~/add/codesnippet/csharp/m-system.codedom.codetyp_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Constraints">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection Constraints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection Constraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the constraints for the type parameter.</summary>
        <value>A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> object that contains the constraints for the type parameter.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A constraint specifies the type that the type parameter must derive from or implement.  
  
   
  
## Examples  
 The following code example shows the use of the Constraints property to add a new constraint.  This example is part of a larger example provided for the <xref:System.CodeDom.CodeTypeParameter> class.  
  
 [!code-vb[System.CodeDom.Generics.1#4](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_1_1.vb)]
 [!code-cs[System.CodeDom.Generics.1#4](~/add/codesnippet/csharp/p-system.codedom.codetyp_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CustomAttributes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeAttributeDeclarationCollection CustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeAttributeDeclarationCollection CustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeAttributeDeclarationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the custom attributes of the type parameter.</summary>
        <value>A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the custom attributes of the type parameter. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property can be used to add metadata attributes to the declaration of the type parameter.  
  
> [!CAUTION]
>  This property is `null` by default and should be checked before referencing.  
  
   
  
## Examples  
 The following code example shows the use of the CustomAttributes property to add a new custom attribute.  This example is part of a larger example provided for the <xref:System.CodeDom.CodeTypeParameter> class.  
  
 [!code-vb[System.CodeDom.Generics.1#5](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_3_1.vb)]
 [!code-cs[System.CodeDom.Generics.1#5](~/add/codesnippet/csharp/p-system.codedom.codetyp_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasConstructorConstraint">
      <MemberSignature Language="C#" Value="public bool HasConstructorConstraint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasConstructorConstraint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the type parameter has a constructor constraint.</summary>
        <value>
          <see langword="true" /> if the type parameter has a constructor constraint; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A constructor constraint indicates to the compiler that the type parameter exposes a default public constructor (a public constructor with no parameters).  
  
   
  
## Examples  
 The following code example shows the use of the HasConstructorConstraint property in determining if the type parameter has a constructor constraint.  This example is part of a larger example provided for the <xref:System.CodeDom.CodeTypeParameter> class.  
  
 [!code-vb[System.CodeDom.Generics.1#3](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_0_1.vb)]
 [!code-cs[System.CodeDom.Generics.1#3](~/add/codesnippet/csharp/p-system.codedom.codetyp_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the type parameter.</summary>
        <value>The name of the type parameter. The default is an empty string ("").</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>