<Type Name="CodeExpressionStatement" FullName="System.CodeDom.CodeExpressionStatement">
  <TypeSignature Language="C#" Value="public class CodeExpressionStatement : System.CodeDom.CodeStatement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeExpressionStatement extends System.CodeDom.CodeStatement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeStatement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a statement that consists of a single expression.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A CodeExpressionStatement contains a <xref:System.CodeDom.CodeExpression> object, and it can be added to a <xref:System.CodeDom.CodeStatementCollection> object, allowing some expressions to stand alone. For example, a <xref:System.CodeDom.CodeMethodInvokeExpression> contained by a CodeExpressionStatement can represent a method call without a return value.  
  
   
  
## Examples  
 The following example demonstrates how to create an instance of the CodeExpressionStatement class by using a <xref:System.CodeDom.CodeExpression> object.  
  
 [!code-cpp[CodeDomSampleBatch#1](~/add/codesnippet/cpp/t-system.codedom.codeexp_0_1.cpp)]
 [!code-vb[CodeDomSampleBatch#1](~/add/codesnippet/visualbasic/t-system.codedom.codeexp_0_1.vb)]
 [!code-cs[CodeDomSampleBatch#1](~/add/codesnippet/csharp/t-system.codedom.codeexp_0_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeExpressionStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionStatement" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeExpressionStatement (System.CodeDom.CodeExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="expression">A <see cref="T:System.CodeDom.CodeExpression" /> for the statement.</param>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionStatement" /> class by using the specified expression.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a <xref:System.CodeDom.CodeExpression> object and uses it as a parameter to initialize an instance of the <xref:System.CodeDom.CodeExpressionStatement> class.  
  
 [!code-cpp[CodeDomSampleBatch#1](~/add/codesnippet/cpp/7916e372-82f9-4248-8406-_1.cpp)]
 [!code-vb[CodeDomSampleBatch#1](~/add/codesnippet/visualbasic/7916e372-82f9-4248-8406-_1.vb)]
 [!code-cs[CodeDomSampleBatch#1](~/add/codesnippet/csharp/7916e372-82f9-4248-8406-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the expression for the statement.</summary>
        <value>A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the expression for the statement.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>