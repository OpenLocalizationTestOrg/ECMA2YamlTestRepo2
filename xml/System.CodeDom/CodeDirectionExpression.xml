<Type Name="CodeDirectionExpression" FullName="System.CodeDom.CodeDirectionExpression">
  <TypeSignature Language="C#" Value="public class CodeDirectionExpression : System.CodeDom.CodeExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeDirectionExpression extends System.CodeDom.CodeExpression" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an expression used as a method invoke parameter along with a reference direction indicator.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CodeDirectionExpression can represent a parameter passed to a method and the reference direction of the parameter.  
  
 The <xref:System.CodeDom.CodeDirectionExpression.Expression%2A> property indicates the expression to qualify with a direction. The <xref:System.CodeDom.CodeDirectionExpression.Direction%2A> property indicates the direction of the parameter using one of the <xref:System.CodeDom.FieldDirection> enumeration values.  
  
> [!NOTE]
>  CodeDirectionExpression is intended to be used as a method invoke parameter, and should not be used when declaring methods.  
  
   
  
## Examples  
 The following example demonstrates use of a CodeDirectionExpression to specify a field direction modifier for an expression to pass as a method parameter.  
  
 [!code-vb[CodeMultiExample#4](~/add/codesnippet/visualbasic/t-system.codedom.codedir_1_1.vb)]
 [!code-cpp[CodeMultiExample#4](~/add/codesnippet/cpp/t-system.codedom.codedir_1_1.cpp)]
 [!code-cs[CodeMultiExample#4](~/add/codesnippet/csharp/t-system.codedom.codedir_1_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeDirectionExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirectionExpression" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeDirectionExpression (System.CodeDom.FieldDirection direction, System.CodeDom.CodeExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.CodeDom.FieldDirection direction, class System.CodeDom.CodeExpression expression) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="direction" Type="System.CodeDom.FieldDirection" />
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="direction">A <see cref="T:System.CodeDom.FieldDirection" /> that indicates the field direction of the expression.</param>
        <param name="expression">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the code expression to represent.</param>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirectionExpression" /> class using the specified field direction and expression.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public System.CodeDom.FieldDirection Direction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.FieldDirection Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.FieldDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the field direction for this direction expression.</summary>
        <value>A <see cref="T:System.CodeDom.FieldDirection" /> that indicates the field direction for this direction expression.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the code expression to represent.</summary>
        <value>A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the expression to represent.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>