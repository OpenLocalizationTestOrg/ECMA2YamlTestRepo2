<Type Name="CodeDelegateCreateExpression" FullName="System.CodeDom.CodeDelegateCreateExpression">
  <TypeSignature Language="C#" Value="public class CodeDelegateCreateExpression : System.CodeDom.CodeExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeDelegateCreateExpression extends System.CodeDom.CodeExpression" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an expression that creates a delegate.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CodeDelegateCreateExpression represents code that creates a delegate. CodeDelegateCreateExpression is often used with <xref:System.CodeDom.CodeAttachEventStatement> or <xref:System.CodeDom.CodeRemoveEventStatement> to represent an event handler to attach or remove from an event.  
  
 The <xref:System.CodeDom.CodeDelegateCreateExpression.DelegateType%2A> property specifies the type of delegate to create. The <xref:System.CodeDom.CodeDelegateCreateExpression.TargetObject%2A> property indicates the object that contains the event-handler method. The <xref:System.CodeDom.CodeDelegateCreateExpression.MethodName%2A> property indicates the name of the event-handler method whose method signature matches the method signature of the delegate.  
  
 In C#, a delegate creation expression is typically of the following form: `new EventHandler(this.HandleEventMethod)`. In Visual Basic, a delegate creation expression is typically of the following form: `AddressOf Me.HandleEventMethod`.  
  
   
  
## Examples  
 The following example code uses a CodeDelegateCreateExpression to create a delegate.  
  
 [!code-cs[CodeAttachEventStatementExample#3](~/add/codesnippet/csharp/t-system.codedom.codedel_0_1.cs)]
 [!code-vb[CodeAttachEventStatementExample#3](~/add/codesnippet/visualbasic/t-system.codedom.codedel_0_1.vb)]
 [!code-cpp[CodeAttachEventStatementExample#3](~/add/codesnippet/cpp/t-system.codedom.codedel_0_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeDelegateCreateExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeDelegateCreateExpression (System.CodeDom.CodeTypeReference delegateType, System.CodeDom.CodeExpression targetObject, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeTypeReference delegateType, class System.CodeDom.CodeExpression targetObject, string methodName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="delegateType" Type="System.CodeDom.CodeTypeReference" />
        <Parameter Name="targetObject" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="delegateType">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the data type of the delegate.</param>
        <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the object containing the event-handler method.</param>
        <param name="methodName">The name of the event-handler method.</param>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DelegateType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference DelegateType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReference DelegateType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data type of the delegate.</summary>
        <value>A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the data type of the delegate.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MethodName">
      <MemberSignature Language="C#" Value="public string MethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MethodName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the event handler method.</summary>
        <value>The name of the event handler method.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TargetObject">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression TargetObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression TargetObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object that contains the event-handler method.</summary>
        <value>A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the object containing the event-handler method.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>