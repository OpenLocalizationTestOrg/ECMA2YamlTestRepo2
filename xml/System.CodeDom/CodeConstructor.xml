<Type Name="CodeConstructor" FullName="System.CodeDom.CodeConstructor">
  <TypeSignature Language="C#" Value="public class CodeConstructor : System.CodeDom.CodeMemberMethod" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeConstructor extends System.CodeDom.CodeMemberMethod" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeMemberMethod</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a declaration for an instance constructor of a type.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CodeConstructor can be used to represent a declaration of an instance constructor for a type. Use <xref:System.CodeDom.CodeTypeConstructor> to declare a static constructor for a type.  
  
 If the constructor calls a base class constructor, set the constructor arguments for the base class constructor in the <xref:System.CodeDom.CodeConstructor.BaseConstructorArgs%2A> property. If the constructor overloads another constuctor for the type, set the constructor arguments to pass to the overloaded type constructor in the <xref:System.CodeDom.CodeConstructor.ChainedConstructorArgs%2A> property.  
  
   
  
## Examples  
 This example demonstrates using a CodeConstructor to declare several types of constructors.  
  
 [!code-cs[CodeConstructorExample#2](~/add/codesnippet/csharp/t-system.codedom.codecon_0_1.cs)]
 [!code-cpp[CodeConstructorExample#2](~/add/codesnippet/cpp/t-system.codedom.codecon_0_1.cpp)]
 [!code-vb[CodeConstructorExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codecon_0_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeConstructor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeConstructor" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BaseConstructorArgs">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpressionCollection BaseConstructorArgs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpressionCollection BaseConstructorArgs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpressionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of base constructor arguments.</summary>
        <value>A <see cref="T:System.CodeDom.CodeExpressionCollection" /> that contains the base constructor arguments.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.CodeDom.CodeConstructor> overloads a base class constructor, this collection contains any arguments to pass to a base class constructor. To call a base class constructor with no arguments, set a <xref:System.CodeDom.CodeSnippetExpression> containing an empty string ("") to this collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChainedConstructorArgs">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpressionCollection ChainedConstructorArgs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpressionCollection ChainedConstructorArgs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpressionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of chained constructor arguments.</summary>
        <value>A <see cref="T:System.CodeDom.CodeExpressionCollection" /> that contains the chained constructor arguments.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.CodeDom.CodeConstructor> overloads another constructor of the same type, this collection contains any arguments to pass to the overloaded type constructor. To call a constructor for the current type with no arguments, set a <xref:System.CodeDom.CodeSnippetExpression> containing an empty string ("") to this collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>