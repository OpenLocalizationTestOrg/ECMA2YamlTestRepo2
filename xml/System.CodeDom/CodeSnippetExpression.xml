<Type Name="CodeSnippetExpression" FullName="System.CodeDom.CodeSnippetExpression">
  <TypeSignature Language="C#" Value="public class CodeSnippetExpression : System.CodeDom.CodeExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeSnippetExpression extends System.CodeDom.CodeExpression" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a literal expression.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A literal expression stores the code of an expression as a literal code fragment. The CodeDOM does not translate literal code fragments. Literal code fragments are stored and output just as they are. CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.  
  
 The <xref:System.CodeDom.CodeSnippetExpression.Value%2A> property contains the literal code for this snippet expression.  
  
   
  
## Examples  
 The following code example demonstrates how to create an instance of the CodeSnippetExpression class using a literal code fragment.  
  
 [!code-cpp[CodeDomSampleBatch#9](~/add/codesnippet/cpp/t-system.codedom.codesni_1_1.cpp)]
 [!code-vb[CodeDomSampleBatch#9](~/add/codesnippet/visualbasic/t-system.codedom.codesni_1_1.vb)]
 [!code-cs[CodeDomSampleBatch#9](~/add/codesnippet/csharp/t-system.codedom.codesni_1_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetExpression (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The literal expression to represent.</param>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class using the specified literal expression.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates in the use of the CodeSnippetExpression constructor to create an instance of the <xref:System.CodeDom.CodeSnippetExpression> class.  
  
 [!code-cpp[CodeDomSampleBatch#9](~/add/codesnippet/cpp/m-system.codedom.codesni_0_1.cpp)]
 [!code-vb[CodeDomSampleBatch#9](~/add/codesnippet/visualbasic/m-system.codedom.codesni_0_1.vb)]
 [!code-cs[CodeDomSampleBatch#9](~/add/codesnippet/csharp/m-system.codedom.codesni_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the literal string of code.</summary>
        <value>The literal string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This can contain code or comments.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>