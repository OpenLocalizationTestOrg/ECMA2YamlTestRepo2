<Type Name="CodeLabeledStatement" FullName="System.CodeDom.CodeLabeledStatement">
  <TypeSignature Language="C#" Value="public class CodeLabeledStatement : System.CodeDom.CodeStatement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeLabeledStatement extends System.CodeDom.CodeStatement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeStatement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a labeled statement or a stand-alone label.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CodeLabeledStatement represents a label and optionally, an associated statement. A label can be used to indicate the target of a <xref:System.CodeDom.CodeGotoStatement>.  
  
 The <xref:System.CodeDom.CodeLabeledStatement.Statement%2A> property is optional. To create only a label, leave the <xref:System.CodeDom.CodeLabeledStatement.Statement%2A> property uninitialized.  
  
> [!NOTE]
>  Not all languages support `goto` statements and labels, so you should test wheter a code generator supports `goto` statements and labels by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the <xref:System.CodeDom.Compiler.GeneratorSupport> flag.  
  
   
  
## Examples  
 The following example code demonstrates use of a <xref:System.CodeDom.CodeGotoStatement> and a CodeLabeledStatement to redirect program flow.  
  
 [!code-cpp[CodeGotoStatementExample#2](~/add/codesnippet/cpp/t-system.codedom.codelab_1.cpp)]
 [!code-cs[CodeGotoStatementExample#2](~/add/codesnippet/csharp/t-system.codedom.codelab_1.cs)]
 [!code-vb[CodeGotoStatementExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codelab_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeLabeledStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLabeledStatement" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeLabeledStatement (string label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string label) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="label">The name of the label.</param>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLabeledStatement" /> class using the specified label name.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeLabeledStatement (string label, System.CodeDom.CodeStatement statement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string label, class System.CodeDom.CodeStatement statement) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" />
      </Parameters>
      <Docs>
        <param name="label">The name of the label.</param>
        <param name="statement">The <see cref="T:System.CodeDom.CodeStatement" /> to associate with the label.</param>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLabeledStatement" /> class using the specified label name and statement.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the label.</summary>
        <value>The name of the label.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Statement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement Statement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement Statement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the optional associated statement.</summary>
        <value>A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the statement associated with the label.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If this property is not set, the <xref:System.CodeDom.CodeLabeledStatement> represents only a label, rather than a labeled statement.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>