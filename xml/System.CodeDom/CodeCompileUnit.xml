<Type Name="CodeCompileUnit" FullName="System.CodeDom.CodeCompileUnit">
  <TypeSignature Language="C#" Value="public class CodeCompileUnit : System.CodeDom.CodeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeCompileUnit extends System.CodeDom.CodeObject" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a container for a CodeDOM program graph.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CodeCompileUnit provides a container for a CodeDOM program graph.  
  
 CodeCompileUnit contains a collection that can store <xref:System.CodeDom.CodeNamespace> objects containing CodeDOM source code graphs, along with a collection of assemblies referenced by the project, and a collection of attributes for the project assembly.  
  
 A CodeCompileUnit can be passed to the <xref:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit%2A> method of an <xref:System.CodeDom.Compiler.ICodeGenerator> implementation along with other parameters to generate code based on the program graph contained by the compile unit.  
  
> [!NOTE]
>  Some languages support only a single namespace that contains a single class in a compile unit.  
  
   
  
## Examples  
 The following code example constructs a CodeCompileUnit that models the program structure of a simple "Hello World" program. This code example is part of a larger example that also produces code from this model, and is provided for the <xref:System.CodeDom.Compiler.CodeDomProvider> class.  
  
 [!code-cpp[CodeDomExample#2](~/add/codesnippet/cpp/t-system.codedom.codecom_1_1.cpp)]
 [!code-cs[CodeDomExample#2](~/add/codesnippet/csharp/t-system.codedom.codecom_1_1.cs)]
 [!code-vb[CodeDomExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codecom_1_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeCompileUnit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCompileUnit" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AssemblyCustomAttributes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeAttributeDeclarationCollection AssemblyCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeAttributeDeclarationCollection AssemblyCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeAttributeDeclarationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of custom attributes for the generated assembly.</summary>
        <value>A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the custom attributes for the generated assembly.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can add and remove <xref:System.CodeDom.CodeAttributeDeclaration> objects representing attributes for the generated assembly from this collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndDirectives">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeDirectiveCollection EndDirectives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeDirectiveCollection EndDirectives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeDirectiveCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.CodeDom.CodeDirectiveCollection" /> object containing end directives.</summary>
        <value>A <see cref="T:System.CodeDom.CodeDirectiveCollection" /> object containing end directives.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the use of the EndDirectives property.  This example is part of a larger example provided for the <xref:System.CodeDom.CodeRegionDirective> class.  
  
 [!code-vb[System.CodeDom.CodeDirectives#3](~/add/codesnippet/visualbasic/p-system.codedom.codecom_1_1.vb)]
 [!code-cs[System.CodeDom.CodeDirectives#3](~/add/codesnippet/csharp/p-system.codedom.codecom_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeNamespaceCollection Namespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeNamespaceCollection Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeNamespaceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of namespaces.</summary>
        <value>A <see cref="T:System.CodeDom.CodeNamespaceCollection" /> that indicates the namespaces that the compile unit uses.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can add and remove <xref:System.CodeDom.CodeNamespace> objects from this collection. Each object represents a namespace.  
  
> [!NOTE]
>  Some languages support only a single namespace that contains a single class in a compile unit.  
  
   
  
## Examples  
 The following code example constructs a <xref:System.CodeDom.CodeCompileUnit> that models the program structure of a simple "Hello World" program. This example is part of a larger example that also produces code from this model, and is provided for the <xref:System.CodeDom.Compiler.CodeDomProvider> class.  
  
 [!code-cpp[CodeDomExample#2](~/add/codesnippet/cpp/p-system.codedom.codecom_0_1.cpp)]
 [!code-cs[CodeDomExample#2](~/add/codesnippet/csharp/p-system.codedom.codecom_0_1.cs)]
 [!code-vb[CodeDomExample#2](~/add/codesnippet/visualbasic/p-system.codedom.codecom_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the referenced assemblies.</summary>
        <value>A <see cref="T:System.Collections.Specialized.StringCollection" /> that contains the file names of the referenced assemblies.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can add and remove file names from this collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StartDirectives">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeDirectiveCollection StartDirectives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeDirectiveCollection StartDirectives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeDirectiveCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.CodeDom.CodeDirectiveCollection" /> object containing start directives.</summary>
        <value>A <see cref="T:System.CodeDom.CodeDirectiveCollection" /> object containing start directives.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the use of the StartDirectives property.  This example is part of a larger example provided for the <xref:System.CodeDom.CodeRegionDirective> class.  
  
 [!code-vb[System.CodeDom.CodeDirectives#2](~/add/codesnippet/visualbasic/p-system.codedom.codecom_2_1.vb)]
 [!code-cs[System.CodeDom.CodeDirectives#2](~/add/codesnippet/csharp/p-system.codedom.codecom_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>