<Type Name="CodePrimitiveExpression" FullName="System.CodeDom.CodePrimitiveExpression">
  <TypeSignature Language="C#" Value="public class CodePrimitiveExpression : System.CodeDom.CodeExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodePrimitiveExpression extends System.CodeDom.CodeExpression" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a primitive data type value.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CodePrimitiveExpression can be used to represent an expression that indicates a primitive data type value.  
  
 The <xref:System.CodeDom.CodePrimitiveExpression.Value%2A> property specifies the primitive data type value to represent.  
  
 Primitive data types that can be represented using CodePrimitiveExpression include `null`; string; 16-, 32-, and 64-bit signed integers; and single-precision and double-precision floating-point numbers.  
  
   
  
## Examples  
 The following example demonstrates use of CodePrimitiveExpression to represent values of several primitive types.  
  
 [!code-cpp[CodePrimitiveExpressionExample#2](~/add/codesnippet/cpp/t-system.codedom.codepri_1.cpp)]
 [!code-cs[CodePrimitiveExpressionExample#2](~/add/codesnippet/csharp/t-system.codedom.codepri_1.cs)]
 [!code-vb[CodePrimitiveExpressionExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codepri_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodePrimitiveExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodePrimitiveExpression" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodePrimitiveExpression (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to represent.</param>
        <summary>Initializes a new instance of the <see cref="T:System.CodeDom.CodePrimitiveExpression" /> class using the specified object.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the primitive data type to represent.</summary>
        <value>The primitive data type instance to represent the value of.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Any .NET Framework primitive type can be used here.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>