<Type Name="BinaryKeyIdentifierClause" FullName="System.IdentityModel.Tokens.BinaryKeyIdentifierClause">
  <TypeSignature Language="C#" Value="public abstract class BinaryKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BinaryKeyIdentifierClause extends System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a base class for key identifier clauses that are based upon binary data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, the BinaryKeyIdentifierClause does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references are security tokens that are not included within the security header of the SOAP message. These references typically affirm the authenticity of the issued security token.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BinaryKeyIdentifierClause (string clauseType, byte[] identificationData, bool cloneBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string clauseType, unsigned int8[] identificationData, bool cloneBuffer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="clauseType" Type="System.String" />
        <Parameter Name="identificationData" Type="System.Byte[]" />
        <Parameter Name="cloneBuffer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clauseType">The key identifier clause type. Sets the value of the &lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType%2A&gt; property.</param>
        <param name="identificationData">An array of &lt;xref:System.Byte&gt; that contains the binary data that represents the key identifier.</param>
        <param name="cloneBuffer">
          <see langword="true" /> to clone the array passed into the `identificationData` parameter; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> class using the specified key identifier clause type, binary data and a value that indicates whether the binary data must be cloned.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identificationData" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="identificationData" /> is zero length.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BinaryKeyIdentifierClause (string clauseType, byte[] identificationData, bool cloneBuffer, byte[] derivationNonce, int derivationLength);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string clauseType, unsigned int8[] identificationData, bool cloneBuffer, unsigned int8[] derivationNonce, int32 derivationLength) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="clauseType" Type="System.String" />
        <Parameter Name="identificationData" Type="System.Byte[]" />
        <Parameter Name="cloneBuffer" Type="System.Boolean" />
        <Parameter Name="derivationNonce" Type="System.Byte[]" />
        <Parameter Name="derivationLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="clauseType">The key identifier clause type. Sets the value of the &lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType%2A&gt; property.</param>
        <param name="identificationData">An array of &lt;xref:System.Byte&gt; that contains the binary data that represents the key identifier. Sets the binary data that is returned by the &lt;xref:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer%2A&gt; method.</param>
        <param name="cloneBuffer">
          <see langword="true" /> to clone the array passed into the `identificationData` parameter; otherwise, <see langword="false" />.</param>
        <param name="derivationNonce">An array of &lt;xref:System.Byte&gt; that contains the nonce that was used to create a derived key. Sets the value that is returned by the &lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce%2A&gt; method.</param>
        <param name="derivationLength">The size of the derived key. Sets the value of the &lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength%2A&gt; property.</param>
        <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> class using the specified key identifier clause type, binary data, a value that indicates whether the binary data must be cloned, a nonce and the key length.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the `derivationNonce` and `derivationLength` parameters are specified, the implied derived key is used instead of the direct security key of the token.  
  
 Regardless of the value passed into the `cloneBuffer` parameter, the <xref:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer%2A> method always returns a clone of the array passed into the `identificationData` parameter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identificationData" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="identificationData" /> is zero length.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetBuffer">
      <MemberSignature Language="C#" Value="public byte[] GetBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the binary data that represents the key identifier.</summary>
        <returns>An array of &lt;xref:System.Byte&gt; that contains the binary data that represents the key identifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Regardless of the value passed into the constructor's `cloneBuffer` parameter, the GetBuffer method always returns a clone of the array passed into the constructor's `identificationData` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRawBuffer">
      <MemberSignature Language="C#" Value="protected byte[] GetRawBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance unsigned int8[] GetRawBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the binary data that represents the key identifier.</summary>
        <returns>An array of &lt;xref:System.Byte&gt; that contains the binary data that represents the key identifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The array returned by the GetRawBuffer method is a clone of the constructor's `identificationData` parameter when the value passed into the `cloneBuffer` is `true`; otherwise it is same array.  
  
 The <xref:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer%2A> method always returns a clone of the array passed into the constructor's `identificationData` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public bool Matches (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Matches(unsigned int8[] data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">An array of &lt;xref:System.Byte&gt; to compare to.</param>
        <summary>Returns a value that indicates whether the binary data for the current instance matches the specified binary data.</summary>
        <returns>
          <see langword="true" /> if <paramref name="data " />is equivalent to the binary data returned by the &lt;xref:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer%2A&gt; method; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to compare to.</param>
        <summary>Returns a value that indicates whether the key identifier for this instance is equivalent to the specified key identifier clause.</summary>
        <returns>
          <see langword="true" /> if <paramref name="keyIdentifierClause" /> is of type <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> and the binary data returned by the &lt;xref:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer%2A&gt; method is identical for the <paramref name="keyIdentifierClause" /> parameter and the current instance; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public bool Matches (byte[] data, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Matches(unsigned int8[] data, int32 offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">An array of &lt;xref:System.Byte&gt; to compare to.</param>
        <param name="offset">The index in the array at which the comparison starts.</param>
        <summary>Returns a value that indicates whether the binary data for the current instance is equivalent to the specified binary data at the specified offset.</summary>
        <returns>
          <see langword="true" /> if the binary data in the <paramref name="data " />parameter starting at the index specified in the <paramref name="offset" /> parameter is equivalent to the binary data returned by the &lt;xref:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer%2A&gt; method (starting at index zero); otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>