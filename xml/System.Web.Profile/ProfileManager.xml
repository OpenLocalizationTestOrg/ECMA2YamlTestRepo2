<Type Name="ProfileManager" FullName="System.Web.Profile.ProfileManager">
  <TypeSignature Language="C#" Value="public static class ProfileManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileManager extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Manages user profile data and settings.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ASP.NET profile is used to store and retrieve user settings in a data source such as a database. The user profile is accessed using the <xref:System.Web.HttpContext.Profile%2A> property of the current <xref:System.Web.HttpContext>. Profile information and property values are managed using a profile provider.  
  
 The ProfileManager class is used to manage profile settings, search for user profiles, and delete user profiles that are no longer in use. The ProfileManager class provides static methods and properties that can be accessed by referencing the ProfileManager class in your application code. For an example, see the Example section in this topic and additional examples in the topics for members of the ProfileManager class.  
  
 By default, the user profile is disabled for all ASP.NET applications. To enable the user profile, set the `enabled` attribute of the  configuration element to true, as shown in the following example.  
  
```  
<configuration>  
  <system.web>  
    <profile enabled="true" />  
  </system.web>  
</configuration>  
```  
  
 For more information about the user profile, see [ASP.NET Profile Properties Overview](~/add/includes/ajax-current-ext-md.md).  
  
 A profile provider is used to store and retrieve properties in the user profile. The .NET Framework includes a <xref:System.Web.Profile.SqlProfileProvider> class that stores user profile properties in a SQL Server database. A <xref:System.Web.Profile.SqlProfileProvider> instance named `AspNetSqlProvider` is specified in the machine configuration as the default profile provider. The `AspNetSqlProvider` instance connects to the SQL Server database on the local Web server. You can specify a <xref:System.Web.Profile.SqlProfileProvider> that connects to another SQL Server as the default profile provider by using the  configuration element and the `defaultProvider` attribute of the  configuration element, as shown in the following example.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString=  
      "Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <profile defaultProvider="SqlProvider">  
      <providers>  
        <clear />  
        <add name="SqlProvider"  
          type="System.Web.Profile.SqlProfileProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
      </providers>  
    </profile>  
  </system.web>  
</configuration>  
```  
  
   
  
## Examples  
 The following code example shows an ASP.NET page that uses the ProfileManager class to manage inactive profiles.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.ProfileManager#4](~/add/codesnippet/csharp/t-system.web.profile.pro_1_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#4](~/add/codesnippet/visualbasic/t-system.web.profile.pro_1_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="AddDynamicProfileProperty">
      <MemberSignature Language="C#" Value="public static void AddDynamicProfileProperty (System.Web.Configuration.ProfilePropertySettings property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddDynamicProfileProperty(class System.Web.Configuration.ProfilePropertySettings property) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Web.Configuration.ProfilePropertySettings" />
      </Parameters>
      <Docs>
        <param name="property">The property settings to be added.</param>
        <summary>Adds a profile property programmatically.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is functionally equivalent to adding the property to the `profile` section of the configuration file. To call this method to add the profile property, you must make the call in a method that is marked with the <xref:System.Web.PreApplicationStartMethodAttribute> attribute.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the application for which to store and retrieve profile information.</summary>
        <value>The name of the application for which to store and retrieve profile information.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.Profile.ProfileManager> uses the ApplicationName property to associate profile information with different applications. This enables multiple applications to use the same database to store user information without running into conflicts between duplicate users. Multiple ASP.NET applications can use the same user database by specifying the same value in the ApplicationName property. The ApplicationName property can be set programmatically, or it can be set declaratively in the configuration file for the Web application by using the `applicationName` attribute.  
  
 If a value is not specified for the `applicationName` attribute in the configuration file for the Web application, then the profile providers included with the .NET Framework use the <xref:System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath%2A> property value for ASP.NET applications. For non-ASP.NET applications, the default value is the <xref:System.Diagnostics.ProcessModule.ModuleName%2A> property value, without the file extension.  
  
 The ApplicationName property exposes the <xref:System.Configuration.SettingsProvider.ApplicationName%2A?displayProperty=fullName> property of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, they may be configured with a different application name. To access the application name of a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and access the <xref:System.Configuration.SettingsProvider.ApplicationName%2A> property of the provider directly.  
  
> [!CAUTION]
>  Because a single default profile provider instance is used for all of the requests served by an <xref:System.Web.HttpApplication> object, you can have multiple requests executing concurrently and attempting to set the ApplicationName property value. The ApplicationName property is not thread safe for multiple writes, and changing the ApplicationName property value can result in unexpected behavior for multiple users of an application. It is recommended that you avoid writing code that allows users to set the ApplicationName property unless you require it. An example of an application where setting the ApplicationName property may be required is an administrative application that manages profile data for multiple applications. Such an application should be a single-user application and not a Web application.  
  
   
  
## Examples  
 The following configuration file excerpt shows the  element in the  section of the Web.config file for an ASP.NET application. It sets the application's default profile provider to a <xref:System.Web.Profile.SqlProfileProvider> instance and sets the ApplicationName to `MyApplication`.  
  
```  
<profile enabled="true" defaultProvider="SqlProvider">  
  <providers>  
  <add name="SqlProvider"  
    type="System.Web.Profile.SqlProfileProvider"  
    connectionStringName="SqlServices"  
    applicationName="MyApplication" />  
  </providers>  
</profile>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutomaticSaveEnabled">
      <MemberSignature Language="C#" Value="public static bool AutomaticSaveEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutomaticSaveEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the user profile will be automatically saved at the end of the execution of an ASP.NET page.</summary>
        <value>
          <see langword="true" /> if the user profile will be automatically saved at the end of the execution of an ASP.NET page; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AutomaticSaveEnabled property indicates whether automatic saving of the user profile is enabled for the application. If automatic saving is enabled, the <xref:System.Web.Profile.ProfileModule> object raises the <xref:System.Web.Profile.ProfileModule.ProfileAutoSaving> event and calls the <xref:System.Web.Profile.ProfileBase.Save%2A> method during the <xref:System.Web.HttpApplication.EndRequest> event at the end of the execution of an ASP.NET page.  
  
 The AutomaticSaveEnabled property is set using the `automaticSaveEnabled` attribute of the  element in the Web.config file for an ASP.NET application.  
  
   
  
## Examples  
 The following configuration file excerpt shows the  element in the  section of the Web.config file for an ASP.NET application. It specifies the application's default profile provider to a <xref:System.Web.Profile.SqlProfileProvider> instance and sets the `automaticSaveEnabled` attribute to `true`.  
  
```  
<profile enabled="true"  
  automaticSaveEnabled="true"  
  defaultProvider="SqlProvider">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Profile.SqlProfileProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</profile>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">An attempt was made to get the AutomaticSaveEnabled property value without at least <see cref="T:System.Web.AspNetHostingPermissionLevel" /> permission.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteInactiveProfiles">
      <MemberSignature Language="C#" Value="public static int DeleteInactiveProfiles (System.Web.Profile.ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DeleteInactiveProfiles(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption, valuetype System.DateTime userInactiveSinceDate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
        <Parameter Name="userInactiveSinceDate" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are deleted.</param>
        <param name="userInactiveSinceDate">A &lt;xref:System.DateTime&gt; that identifies which user profiles are considered inactive. If the &lt;xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A&gt; of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        <summary>Deletes user profile data for which the last activity date and time occurred before the specified date and time.</summary>
        <returns>The number of profiles deleted from the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DeleteInactiveProfiles method is used to remove unused profile data from the data source for the application specified by the `applicationName` attribute in the configuration file. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched. Of the searched profiles, any profile with a <xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A> that occurs on or before the specified `userInactiveSinceDate` parameter value is deleted.  
  
 The DeleteInactiveProfiles method calls the <xref:System.Web.Profile.ProfileProvider.DeleteInactiveProfiles%2A> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, the profile information in the other data source is not deleted. To delete inactive profiles that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.DeleteInactiveProfiles%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example shows an ASP.NET page that manages inactive profiles. A button is provided to delete all profiles that have been unused for the specified number of days and are therefore considered inactive.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.ProfileManager#4](~/add/codesnippet/csharp/32807c48-d028-41c4-938b-_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#4](~/add/codesnippet/visualbasic/32807c48-d028-41c4-938b-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteProfile">
      <MemberSignature Language="C#" Value="public static bool DeleteProfile (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteProfile(string username) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The user name for the profile to be deleted.</param>
        <summary>Deletes the profile for the specified user name from the data source.</summary>
        <returns>
          <see langword="true" /> if the user profile was found and deleted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DeleteProfile method deletes all profile information and properties for the user profile for the specified `username` from the data source for the specified <xref:System.Web.Profile.ProfileManager.ApplicationName%2A>.  
  
 The DeleteProfile method calls the <xref:System.Web.Profile.ProfileProvider.DeleteProfiles%2A> method of the default profile provider to perform the delete operation. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, they are not deleted. To delete profile properties that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.DeleteProfiles%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example shows an ASP.NET page that manages inactive profiles. The DeleteProfile method is called when a single profile is selected to be deleted. Whether a profile is considered inactive is based on the date specified for the `userInactiveSinceDate` parameter value passed to the <xref:System.Web.Profile.ProfileManager.GetAllInactiveProfiles%2A> method.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.ProfileManager#10](~/add/codesnippet/csharp/m-system.web.profile.pro_0_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#10](~/add/codesnippet/visualbasic/m-system.web.profile.pro_0_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> is an empty string ("") or contains a comma.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteProfiles">
      <MemberSignature Language="C#" Value="public static int DeleteProfiles (string[] usernames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DeleteProfiles(string[] usernames) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">A string array of user names for profiles to be deleted.</param>
        <summary>Deletes profile properties and information for the supplied list of user names.</summary>
        <returns>The number of profiles deleted from the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DeleteProfiles method deletes all profile information and properties for the specified profiles from the data source for the application specified by the <xref:System.Web.Profile.ProfileManager.ApplicationName%2A> property. The list of profiles to delete is specified as a string array of user names. If profile properties and information exist in the data source for a user name in the `usernames` parameter, they are deleted.  
  
 The return value may differ from the length of the specified array of `usernames`. This indicates that some of the profiles in the specified array of `usernames` were already deleted from the data store.  
  
 The DeleteProfiles method calls the <xref:System.Web.Profile.ProfileProvider.DeleteProfiles%2A> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, they are not deleted. To delete profile properties that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.DeleteProfiles%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example shows an ASP.NET page that manages inactive profiles. A <xref:System.Web.UI.WebControls.GridView> control displays the inactive profiles returned. Each row of the <xref:System.Web.UI.WebControls.GridView> control includes a button that deletes the profile for that row from the data source with a call to the DeleteProfiles method.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.ProfileManager#4](~/add/codesnippet/csharp/m-system.web.profile.pro_4_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#4](~/add/codesnippet/visualbasic/m-system.web.profile.pro_4_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The length of <paramref name="usernames" /> is zero.  
  
 \- or -  
  
 One of the items in <paramref name="usernames" /> is an empty string ("") or contains a comma.  
  
 \- or -  
  
 Two or more items in <paramref name="usernames" /> have the same value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernames" /> is <see langword="null" />.  
  
 \- or -  
  
 One of the items in <paramref name="usernames" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteProfiles">
      <MemberSignature Language="C#" Value="public static int DeleteProfiles (System.Web.Profile.ProfileInfoCollection profiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DeleteProfiles(class System.Web.Profile.ProfileInfoCollection profiles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profiles" Type="System.Web.Profile.ProfileInfoCollection" />
      </Parameters>
      <Docs>
        <param name="profiles">A <see cref="T:System.Web.Profile.ProfileInfoCollection" /> that contains profile information for profiles to be deleted.</param>
        <summary>Deletes profile properties and information from the data source for the supplied list of profiles.</summary>
        <returns>The number of profiles deleted from the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DeleteProfiles method deletes all profile information and properties for the specified profiles from the data source for the application specified by the <xref:System.Web.Profile.ProfileManager.ApplicationName%2A> property. The list of profiles to delete is specified using a <xref:System.Web.Profile.ProfileInfoCollection> that is passed as the `profiles` parameter. A <xref:System.Web.Profile.ProfileInfoCollection> can be returned from the <xref:System.Web.Profile.ProfileManager.GetAllProfiles%2A>, <xref:System.Web.Profile.ProfileManager.GetAllInactiveProfiles%2A>, <xref:System.Web.Profile.ProfileManager.FindProfilesByUserName%2A>, and <xref:System.Web.Profile.ProfileManager.FindInactiveProfilesByUserName%2A> methods.  
  
 Note that the return value may differ from the <xref:System.Web.Profile.ProfileInfoCollection.Count%2A> value for the supplied <xref:System.Web.Profile.ProfileInfoCollection>. This indicates that some of the profiles in the specified <xref:System.Web.Profile.ProfileInfoCollection> were already deleted from the data store.  
  
 The DeleteProfiles method calls the <xref:System.Web.Profile.ProfileProvider.DeleteProfiles%2A?displayProperty=fullName> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, they are not deleted. To delete profile properties that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.DeleteProfiles%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example allows a user to search for profiles using the <xref:System.Web.Profile.ProfileManager.FindProfilesByUserName%2A> and <xref:System.Web.Profile.ProfileManager.FindInactiveProfilesByUserName%2A> methods. The user can then delete the returned profiles with a call to the DeleteProfiles method.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.Profile.ProfileManager#5](~/add/codesnippet/visualbasic/dbbefae3-6297-4bf8-9680-_1.aspx)]
 [!code-cs[System.Web.Profile.ProfileManager#5](~/add/codesnippet/csharp/dbbefae3-6297-4bf8-9680-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="profiles" /> has a &lt;xref:System.Web.Profile.ProfileInfoCollection.Count%2A&gt; value of zero.  
  
 \- or -  
  
 One of the <see cref="T:System.Web.Profile.ProfileInfo" /> objects in <paramref name="profiles" /> has a &lt;xref:System.Web.Profile.ProfileInfo.UserName%2A&gt; that is an empty string ("") or contains a comma.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="profiles" /> is <see langword="null" />.  
  
 \- or -  
  
 One of the <see cref="T:System.Web.Profile.ProfileInfo" /> objects in <paramref name="profiles" /> has a &lt;xref:System.Web.Profile.ProfileInfo.UserName%2A&gt; that is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the user profile is enabled for the application.</summary>
        <value>
          <see langword="true" /> if the user profile is enabled; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The user profile is enabled for an application using the `enabled` attribute of the  configuration element.  
  
   
  
## Examples  
 The following code example shows the  element in the  section of the Web.config file for an ASP.NET application where the user profile has been enabled.  
  
```  
<profile enabled="true" defaultProvider="SqlProvider">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Profile.SqlProfileProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</profile>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FindInactiveProfilesByUserName">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileInfoCollection FindInactiveProfilesByUserName (System.Web.Profile.ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileInfoCollection FindInactiveProfilesByUserName(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption, string usernameToMatch, valuetype System.DateTime userInactiveSinceDate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
        <Parameter Name="usernameToMatch" Type="System.String" />
        <Parameter Name="userInactiveSinceDate" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <param name="usernameToMatch">The user name for which to search.</param>
        <param name="userInactiveSinceDate">A &lt;xref:System.DateTime&gt; that identifies which user profiles are considered inactive. If the &lt;xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A&gt; of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        <summary>Retrieves profile information for all profiles in which the last activity date occurred on or before the specified date and time and the user name for the profile matches the specified name.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileInfoCollection" /> containing user profile information for inactive profiles in which the user name matches the supplied <paramref name="usernameToMatch" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FindInactiveProfilesByUserName method is used to retrieve profile information for all unused user profiles for the application specified by the `applicationName` attribute in the configuration file. This method will only retrieve profiles for which the profile user name matches the supplied `usernameToMatch` parameter value. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched. Of the searched profiles, any profile with a <xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A> that occurs on or before the specified `userInactiveSinceDate` parameter value is returned.  
  
 You can retrieve this information in pages of data using the overload for the <xref:System.Web.Profile.ProfileManager.FindInactiveProfilesByUserName%28System.Web.Profile.ProfileAuthenticationOption%2CSystem.String%2CSystem.DateTime%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%40%29> method that takes additional `pageIndex` and `pageSize` parameters.  
  
> [!NOTE]
>  Your profile provider may support wildcard characters in the `usernameToMatch` parameter. For example, the <xref:System.Web.Profile.SqlProfileProvider.FindInactiveProfilesByUserName%2A> method of the <xref:System.Web.Profile.SqlProfileProvider> class supports wildcard characters in the `usernameToMatch` parameter.  
  
 The FindInactiveProfilesByUserName method calls the <xref:System.Web.Profile.ProfileProvider.FindInactiveProfilesByUserName%2A?displayProperty=fullName> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, the data source for the other profile provider is not searched. To find inactive profiles that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.FindInactiveProfilesByUserName%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example allows a user to supply a `usernameToMatch` value and a <xref:System.Web.Profile.ProfileAuthenticationOption> enumeration value and retrieves profile information for any matching profiles. The sample allows the user to specify whether to return only inactive profiles. If the user specifies only inactive profiles, the FindInactiveProfilesByUserName method is called; otherwise, the <xref:System.Web.Profile.ProfileManager.FindProfilesByUserName%2A> method is called.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.ProfileManager#8](~/add/codesnippet/csharp/02c1131d-855c-4e58-af67-_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#8](~/add/codesnippet/visualbasic/02c1131d-855c-4e58-af67-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> is an empty string ("").</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FindInactiveProfilesByUserName">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileInfoCollection FindInactiveProfilesByUserName (System.Web.Profile.ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileInfoCollection FindInactiveProfilesByUserName(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption, string usernameToMatch, valuetype System.DateTime userInactiveSinceDate, int32 pageIndex, int32 pageSize, int32 totalRecords) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
        <Parameter Name="usernameToMatch" Type="System.String" />
        <Parameter Name="userInactiveSinceDate" Type="System.DateTime" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <param name="usernameToMatch">The user name for which to search.</param>
        <param name="userInactiveSinceDate">A &lt;xref:System.DateTime&gt; that identifies which user profiles are considered inactive. If the &lt;xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A&gt; of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        <param name="pageIndex">The index of the page of results to return. `pageIndex` is zero-based.</param>
        <param name="pageSize">The size of the page of results to return.</param>
        <param name="totalRecords">When this method returns, contains an integer that identifies the total number of profiles. This parameter is passed uninitialized.</param>
        <summary>Retrieves profile information in pages of data for profiles in which the last activity date occurred on or before the specified date and time and the user name for the profile matches the specified name.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileInfoCollection" /> containing user profile information for inactive profiles where the user name matches the supplied <paramref name="usernameToMatch" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FindInactiveProfilesByUserName method is used to retrieve profile information for unused user profiles for the application specified by the `applicationName` attribute in the configuration file. This method will only retrieve profiles for which the user name matches the supplied `usernameToMatch` parameter value. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched. Of the searched profiles, any profile is returned that has a <xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A> that occurs on or before the specified `userInactiveSinceDate` parameter value.  
  
 The results returned by FindInactiveProfilesByUserName are constrained by the `pageIndex` and `pageSize` parameters. The `pageSize` parameter identifies the maximum number of <xref:System.Web.Profile.ProfileInfo> objects to return in the <xref:System.Web.Profile.ProfileInfoCollection> collection. The `pageIndex` parameter identifies which page of results to return; 0 identifies the first page. The `totalRecords` parameter is an `out` parameter that is set to the total number of inactive user profiles for the configured `applicationName`, based on the `authenticationOption` and `userInactiveSinceDate` parameters. For example, if there are 13 users for the configured `applicationName`, and the `pageIndex` value is 1 with a `pageSize` of 5, the <xref:System.Web.Profile.ProfileInfoCollection> returned will contain the sixth through the tenth inactive profiles. The `totalRecords` parameter will be set to 13.  
  
 Note that your profile provider may support wildcard characters in the `usernameToMatch` parameter. For example, the <xref:System.Web.Profile.SqlProfileProvider.FindInactiveProfilesByUserName%2A> method of the <xref:System.Web.Profile.SqlProfileProvider> class supports wildcard characters in the `usernameToMatch` parameter.  
  
 The FindInactiveProfilesByUserName method calls the <xref:System.Web.Profile.ProfileProvider.FindInactiveProfilesByUserName%2A> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, the data source for the other profile provider is not searched. To find inactive profiles that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.FindInactiveProfilesByUserName%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example allows a user to supply a `usernameToMatch` value and a <xref:System.Web.Profile.ProfileAuthenticationOption> value and retrieves profile information for any matching profiles. The example allows the user to specify whether to return inactive profiles exclusively. If the user specifies only inactive profiles, the FindInactiveProfilesByUserName method is called; otherwise, the <xref:System.Web.Profile.ProfileManager.FindProfilesByUserName%2A> method is called.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.Profile.ProfileManager#5](~/add/codesnippet/visualbasic/8901892e-7654-4efd-b373-_1.aspx)]
 [!code-cs[System.Web.Profile.ProfileManager#5](~/add/codesnippet/csharp/8901892e-7654-4efd-b373-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> is an empty string ("").  
  
 \- or -  
  
 <paramref name="pageIndex" /> is less than zero.  
  
 \- or -  
  
 <paramref name="pageSize" /> is less than 1.  
  
 \- or -  
  
 <paramref name="pageIndex" /> multiplied by <paramref name="pageSize" /> is larger than &lt;xref:System.Int32.MaxValue&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FindProfilesByUserName">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileInfoCollection FindProfilesByUserName (System.Web.Profile.ProfileAuthenticationOption authenticationOption, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileInfoCollection FindProfilesByUserName(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption, string usernameToMatch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <param name="usernameToMatch">The user name for which to search.</param>
        <summary>Retrieves all profile information for profiles in which the user name matches the specified name.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileInfoCollection" /> containing user profile information for profiles where the user name matches the supplied <paramref name="usernameToMatch" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FindProfilesByUserName method returns a list of all profile information for which the user name matches the supplied `usernameToMatch` parameter value for the configured <xref:System.Web.Profile.ProfileManager.ApplicationName%2A> property value. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched.  
  
 You can retrieve profile information for user profiles in pages of data using the overload for the <xref:System.Web.Profile.ProfileManager.FindProfilesByUserName%2A> method that takes additional `pageIndex` and `pageSize` parameters.  
  
 Note that your profile provider may support wildcard characters in the `usernameToMatch` parameter. For example, the <xref:System.Web.Profile.SqlProfileProvider.FindProfilesByUserName%2A> method of the <xref:System.Web.Profile.SqlProfileProvider> class supports wildcard characters in the `usernameToMatch` parameter.  
  
 The FindProfilesByUserName method calls the <xref:System.Web.Profile.ProfileProvider.FindProfilesByUserName%2A> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, the data source for the other profile provider is not searched. To find profiles that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.FindProfilesByUserName%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example allows a user to supply a `usernameToMatch` value and a <xref:System.Web.Profile.ProfileAuthenticationOption> enumeration value and retrieves profile information for any matching profiles. The example allows the user to specify whether to return inactive profiles exclusively. If the user specifies only inactive profiles, the <xref:System.Web.Profile.ProfileManager.FindInactiveProfilesByUserName%2A> method is called; otherwise, the FindProfilesByUserName method is called.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.ProfileManager#8](~/add/codesnippet/csharp/31ac7eb6-b35d-45af-a76d-_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#8](~/add/codesnippet/visualbasic/31ac7eb6-b35d-45af-a76d-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> is an empty string ("").</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FindProfilesByUserName">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileInfoCollection FindProfilesByUserName (System.Web.Profile.ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileInfoCollection FindProfilesByUserName(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption, string usernameToMatch, int32 pageIndex, int32 pageSize, int32 totalRecords) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
        <Parameter Name="usernameToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <param name="usernameToMatch">The user name for which to search.</param>
        <param name="pageIndex">The index of the page of results to return. `pageIndex` is zero-based.</param>
        <param name="pageSize">The size of the page of results to return.</param>
        <param name="totalRecords">When this method returns, contains an integer that identifies the total number of profiles. This parameter is passed uninitialized.</param>
        <summary>Retrieves profile information in pages of data for profiles in which the user name matches the specified name.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileInfoCollection" /> containing user profile information for profiles where the user name matches the supplied <paramref name="usernameToMatch" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.Profile.ProfileManager.FindInactiveProfilesByUserName%2A> method returns a list of profile information for which the profile user name matches the supplied `usernameToMatch` parameter value of the configured <xref:System.Web.Profile.ProfileManager.ApplicationName%2A>. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched.  
  
 Note that your profile provider may support wildcard characters in the `usernameToMatch` parameter. For example, the <xref:System.Web.Profile.SqlProfileProvider.FindProfilesByUserName%2A> method of the <xref:System.Web.Profile.SqlProfileProvider> class supports wildcard characters in the `usernameToMatch` parameter.  
  
 The results returned by FindProfilesByUserName are constrained by the `pageIndex` and `pageSize` parameters. The `pageSize` parameter identifies the maximum number of <xref:System.Web.Profile.ProfileInfo> objects to return in the <xref:System.Web.Profile.ProfileInfoCollection>. The `pageIndex` parameter identifies which page of results to return; zero identifies the first page. The `totalRecords` parameter is an `out` parameter that is set to the total number of inactive user profiles for the application specified by the `applicationName` attribute in the configuration file, based on the supplied `authenticationOption`. For example, if there are 13 users for the configured `applicationName`, and the `pageIndex` value is 1 with a `pageSize` of 5, the <xref:System.Web.Profile.ProfileInfoCollection> returned will contain the sixth through the tenth profiles. The `totalRecords` parameter will be set to 13.  
  
 The <xref:System.Web.Profile.ProfileManager.FindInactiveProfilesByUserName%2A> method calls the <xref:System.Web.Profile.ProfileProvider.FindInactiveProfilesByUserName%2A> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, the data source for the other profile provider is not searched. To find profiles that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.FindInactiveProfilesByUserName%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example allows a user to supply a `usernameToMatch` value and a <xref:System.Web.Profile.ProfileAuthenticationOption> and retrieves profile information for any matching profiles. The example allows the user to specify whether to return inactive profiles exclusively. If the user specifies only inactive profiles, the <xref:System.Web.Profile.ProfileManager.FindInactiveProfilesByUserName%2A> method is called; otherwise, the FindProfilesByUserName method is called.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.Profile.ProfileManager#5](~/add/codesnippet/visualbasic/3375ceaa-fae5-498d-b74c-_1.aspx)]
 [!code-cs[System.Web.Profile.ProfileManager#5](~/add/codesnippet/csharp/3375ceaa-fae5-498d-b74c-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> is an empty string ("").  
  
 \- or -  
  
 <paramref name="pageIndex" /> is less than zero.  
  
 \- or -  
  
 <paramref name="pageSize" /> is less than 1.  
  
 \- or -  
  
 <paramref name="pageIndex" /> multiplied by <paramref name="pageSize" /> is larger than &lt;xref:System.Int32.MaxValue&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllInactiveProfiles">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileInfoCollection GetAllInactiveProfiles (System.Web.Profile.ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileInfoCollection GetAllInactiveProfiles(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption, valuetype System.DateTime userInactiveSinceDate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
        <Parameter Name="userInactiveSinceDate" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <param name="userInactiveSinceDate">A &lt;xref:System.DateTime&gt; that identifies which user profiles are considered inactive. If the &lt;xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A&gt; of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        <summary>Retrieves all user profile data for profiles in which the last activity date occurred on or before the specified date and time.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileInfoCollection" /> containing user profile information about the inactive profiles.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetAllInactiveProfiles method is used to retrieve profile information from the data source for all unused user profiles for the application specified by the `applicationName` attribute in the configuration file. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched. Of the searched profiles, any profile is returned that has a <xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A> that occurs on or before the specified `userInactiveSinceDate` parameter value.  
  
 You can retrieve profile information for inactive user profiles in pages of data using the overload for the <xref:System.Web.Profile.ProfileManager.GetAllInactiveProfiles%2A> method that takes additional `pageIndex` and `pageSize` parameters.  
  
 The GetAllInactiveProfiles method calls the <xref:System.Web.Profile.ProfileProvider.GetAllInactiveProfiles%2A> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, the data source for the other profile provider is not searched. To find unused profiles that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.GetAllInactiveProfiles%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example shows an ASP.NET page that manages inactive profiles. A button is provided to delete all inactive profiles. Whether a profile is considered inactive is based on the date specified for the `userInactiveSinceDate` parameter.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.ProfileManager#7](~/add/codesnippet/csharp/12596197-85de-46bb-89a0-_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#7](~/add/codesnippet/visualbasic/12596197-85de-46bb-89a0-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllInactiveProfiles">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileInfoCollection GetAllInactiveProfiles (System.Web.Profile.ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileInfoCollection GetAllInactiveProfiles(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption, valuetype System.DateTime userInactiveSinceDate, int32 pageIndex, int32 pageSize, int32 totalRecords) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
        <Parameter Name="userInactiveSinceDate" Type="System.DateTime" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <param name="userInactiveSinceDate">A &lt;xref:System.DateTime&gt; that identifies which user profiles are considered inactive. If the &lt;xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A&gt; of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        <param name="pageIndex">The index of the page of results to return. `pageIndex` is zero-based.</param>
        <param name="pageSize">The size of the page of results to return.</param>
        <param name="totalRecords">When this method returns, contains an integer that identifies the total number of profiles. This parameter is passed uninitialized.</param>
        <summary>Retrieves a page of <see cref="T:System.Web.Profile.ProfileInfo" /> objects for user profiles in which the last activity date occurred on or before the specified date and time.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileInfoCollection" /> containing user profile information about the inactive profiles.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetAllInactiveProfiles method is used to retrieve profile information from the data source for unused user profiles for the application specified by the `applicationName` attribute in the configuration file. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched. Of the searched profiles, any profile is returned that has a <xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A> that occurs before the specified `userInactiveSinceDate` parameter value.  
  
 The results returned by GetAllInactiveProfiles are constrained by the `pageIndex` and `pageSize` parameters. The `pageSize` parameter identifies the maximum number of <xref:System.Web.Profile.ProfileInfo> objects to return in the <xref:System.Web.Profile.ProfileInfoCollection>. The `pageIndex` parameter identifies which page of results to return; zero identifies the first page. The `totalRecords` parameter is an `out` parameter that is set to the total number of inactive user profiles for the configured `applicationName`, based on the `authenticationOption` and `userInactiveSinceDate` parameters. For example, if there are 13 users for the configured `applicationName`, and the `pageIndex` value is one with a `pageSize` of 5, the <xref:System.Web.Profile.ProfileInfoCollection> returned will contain the sixth through the tenth inactive profiles. The `totalRecords` parameter will be set to 13.  
  
 The GetAllInactiveProfiles method calls the <xref:System.Web.Profile.ProfileProvider.GetAllInactiveProfiles%2A> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, the data source for the other profile provider is not searched. To find profiles that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.GetAllInactiveProfiles%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example shows an ASP.NET Web page that manages inactive profiles. A button is provided to delete all inactive profiles. Whether a profile is considered inactive is based on the date specified for the `userInactiveSinceDate` parameter.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.ProfileManager#4](~/add/codesnippet/csharp/40315987-b58d-4459-883e-_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#4](~/add/codesnippet/visualbasic/40315987-b58d-4459-883e-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllProfiles">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileInfoCollection GetAllProfiles (System.Web.Profile.ProfileAuthenticationOption authenticationOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileInfoCollection GetAllProfiles(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <summary>Retrieves user profile data for profiles in the data source.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileInfoCollection" /> containing user profile information for all of the profiles in the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetAllProfiles method is used to retrieve profile information from the data source for the application specified by the `applicationName` attribute in the configuration file. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched.  
  
 You can retrieve pages of <xref:System.Web.Profile.ProfileInfo> objects for user profiles using the overload for the <xref:System.Web.Profile.ProfileManager.GetAllProfiles%2A> method that takes additional `pageIndex` and `pageSize` parameters.  
  
 The GetAllProfiles method calls the <xref:System.Web.Profile.ProfileProvider.GetAllProfiles%2A> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, the data source for the other profile provider is not searched. To find profiles that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.GetAllProfiles%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example displays profile information for all of the profiles for the configured `applicationName`.  
  
 [!code-cs[System.Web.Profile.ProfileManager#6](~/add/codesnippet/csharp/14cc8f0b-52b7-434e-bc19-_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#6](~/add/codesnippet/visualbasic/14cc8f0b-52b7-434e-bc19-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllProfiles">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileInfoCollection GetAllProfiles (System.Web.Profile.ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileInfoCollection GetAllProfiles(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption, int32 pageIndex, int32 pageSize, int32 totalRecords) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <param name="pageIndex">The index of the page of results to return. `pageIndex` is zero-based.</param>
        <param name="pageSize">The size of the page of results to return.</param>
        <param name="totalRecords">When this method returns, contains an integer that identifies the total number of profiles. This parameter is passed uninitialized.</param>
        <summary>Retrieves pages of user profile data.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileInfoCollection" /> containing user profile information for all of the profiles in the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetAllProfiles method is used to retrieve profile information from the data source for the application specified by the `applicationName` attribute in the configuration file. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched.  
  
 The results returned by <xref:System.Web.Profile.ProfileManager.GetAllInactiveProfiles%2A> are constrained by the `pageIndex` and `pageSize` parameters. The `pageSize` parameter identifies the maximum number of <xref:System.Web.Profile.ProfileInfo> objects to return in the <xref:System.Web.Profile.ProfileInfoCollection>. The `pageIndex` parameter identifies which page of results to return; zero identifies the first page. The `totalRecords` parameter is an `out` parameter that is set to the total number of inactive user profiles for the configured `applicationName`, based on the supplied `authenticationOption`. For example, if there are 13 users for the configured `applicationName`, and the `pageIndex` value is one with a `pageSize` of 5, the <xref:System.Web.Profile.ProfileInfoCollection> returned will contain the sixth through the tenth profiles. The `totalRecords` parameter will be set to 13.  
  
 The GetAllProfiles method calls the <xref:System.Web.Profile.ProfileProvider.GetAllProfiles%2A> method of the default profile provider. The default profile provider is specified using the `defaultProvider` attribute of the  configuration element. If the user profile contains properties that are managed by a profile provider other than the default provider, the data source for the other profile provider is not searched. To find profiles that are managed by a profile provider other than the default provider, obtain a reference to the profile provider using the <xref:System.Web.Profile.ProfileManager.Providers%2A> property and call the <xref:System.Web.Profile.ProfileProvider.GetAllProfiles%2A> method of the provider directly.  
  
   
  
## Examples  
 The following code example displays profile information for all of the profiles for the configured `applicationName` in pages of data.  
  
 [!code-cs[System.Web.Profile.ProfileManager#3](~/add/codesnippet/csharp/3142f281-fd51-44c5-967b-_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#3](~/add/codesnippet/visualbasic/3142f281-fd51-44c5-967b-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNumberOfInactiveProfiles">
      <MemberSignature Language="C#" Value="public static int GetNumberOfInactiveProfiles (System.Web.Profile.ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetNumberOfInactiveProfiles(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption, valuetype System.DateTime userInactiveSinceDate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
        <Parameter Name="userInactiveSinceDate" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <param name="userInactiveSinceDate">A &lt;xref:System.DateTime&gt; object that identifies which user profiles are considered inactive. If the &lt;xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A&gt; of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        <summary>Gets the number of profiles in which the last activity date occurred on or before the specified date.</summary>
        <returns>The number of profiles in the data source for which the last activity date occurred before the specified date and time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetNumberOfInactiveProfiles method is used to retrieve a count of all of the unused user profiles from the data source for the application specified by the `applicationName` attribute in the configuration file. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched. Of the searched profiles, all profiles are counted that have a <xref:System.Web.Profile.ProfileInfo.LastActivityDate%2A> that occurs on or before the specified `userInactiveSinceDate` parameter value.  
  
   
  
## Examples  
 The following code example allows a user to view and delete information for active and inactive profiles based on search criteria. A count of inactive profiles is displayed using the results of the GetNumberOfInactiveProfiles method.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.Profile.ProfileManager#5](~/add/codesnippet/visualbasic/456bb4d7-dc47-48d9-b96d-_1.aspx)]
 [!code-cs[System.Web.Profile.ProfileManager#5](~/add/codesnippet/csharp/456bb4d7-dc47-48d9-b96d-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNumberOfProfiles">
      <MemberSignature Language="C#" Value="public static int GetNumberOfProfiles (System.Web.Profile.ProfileAuthenticationOption authenticationOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetNumberOfProfiles(valuetype System.Web.Profile.ProfileAuthenticationOption authenticationOption) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationOption" Type="System.Web.Profile.ProfileAuthenticationOption" />
      </Parameters>
      <Docs>
        <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption" /> enumeration values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param>
        <summary>Gets the number of profiles in the data source.</summary>
        <returns>The number of profiles in the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetNumberOfProfiles method is used to retrieve a count of all of the user profiles from the data source for the application specified by the `applicationName` attribute in the configuration file. Use the `authenticationOption` parameter to specify whether you want only anonymous profiles, only authenticated profiles, or all profiles to be searched.  
  
   
  
## Examples  
 The following code example displays profile information for all of the profiles for the configured `applicationName` and also returns the number of profiles.  
  
 [!code-cs[System.Web.Profile.ProfileManager#6](~/add/codesnippet/csharp/754e4c9f-e8cb-4da5-b2cc-_1.aspx)]
 [!code-vb[System.Web.Profile.ProfileManager#6](~/add/codesnippet/visualbasic/754e4c9f-e8cb-4da5-b2cc-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Profile.ProfileProvider Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the default profile provider for the application.</summary>
        <value>The default profile provider for the application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Provider property enables you to reference the default profile provider for an application directly. This is commonly used to access custom members of the profile provider that are not part of the <xref:System.Web.Profile.ProfileProvider> abstract base class.  
  
   
  
## Examples  
 The following code example lists properties of the default profile provider.  
  
 [!code-vb[System.Web.Profile.ProfileManager#2](~/add/codesnippet/visualbasic/p-system.web.profile.pro_6_1.aspx)]
 [!code-cs[System.Web.Profile.ProfileManager#2](~/add/codesnippet/csharp/p-system.web.profile.pro_6_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">An attempt was made to get the Provider property value without at least <see cref="T:System.Web.AspNetHostingPermissionLevel" /> permission.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Profile.ProfileProviderCollection Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of the profile providers for the ASP.NET application.</summary>
        <value>A <see cref="T:System.Web.Profile.ProfileProviderCollection" /> of the profile providers configured for the ASP.NET application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Providers property references all of the profile providers enabled for an application, including providers added in the machine configuration and providers added in all Web.config files. You can control which profile providers are available for an application using the  element of the  section in the configuration file. For example, the following Web.config file removes the profile providers specified in parent configuration files and adds a <xref:System.Web.Profile.SqlProfileProvider> instance as the profile provider for the application.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString=  
      "Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <profile enabled="true" defaultProvider="SqlProvider">  
      <providers>  
        <clear />  
        <add name="SqlProvider"  
          type="System.Web.Profile.SqlProfileProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
      </providers>  
    </profile>  
  </system.web>  
</configuration>  
```  
  
 When specifying the  section, you must specify a default provider by setting the `defaultProvider` attribute. If you do not specify a  section in your Web.config file, the values from the machine configuration are used and the <xref:System.Web.Profile.SqlProfileProvider> instance named AspNetSqlProvider is established as the default provider.  
  
 You can obtain a strongly typed reference to a provider from the Providers collection by indexing the profile provider by name and casting it as the desired type.  
  
   
  
## Examples  
 The following code example lists the providers enabled for an application and their respective types.  
  
 [!code-vb[System.Web.Profile.ProfileManager#9](~/add/codesnippet/visualbasic/p-system.web.profile.pro_5_1.aspx)]
 [!code-cs[System.Web.Profile.ProfileManager#9](~/add/codesnippet/csharp/p-system.web.profile.pro_5_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">An attempt was made to get the Providers property value without at least <see cref="T:System.Web.AspNetHostingPermissionLevel" /> permission.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>