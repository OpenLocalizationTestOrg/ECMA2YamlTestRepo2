<Type Name="ProfileBase" FullName="System.Web.Profile.ProfileBase">
  <TypeSignature Language="C#" Value="public class ProfileBase : System.Configuration.SettingsBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProfileBase extends System.Configuration.SettingsBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.SettingsBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides untyped access to profile property values and information.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET uses the ProfileBase class to create the class used for the user profile. When an application that has the user profile enabled is started, ASP.NET creates a new class of type `ProfileCommon`, which inherits from the ProfileBase class. Strongly typed accessors are added to the `ProfileCommon` class for each property defined in the  configuration section. The strongly typed accessors of the `ProfileCommon` class call the <xref:System.Web.Profile.ProfileBase.GetPropertyValue%2A> and <xref:System.Web.Profile.ProfileBase.SetPropertyValue%2A> methods of the ProfileBase base class to retrieve and set profile property values, respectively. An instance of the `ProfileCommon` class is set as the value of the <xref:System.Web.HttpContext.Profile%2A> property for the ASP.NET application.  
  
 To create an instance of a user profile in an ASP.NET application, it is recommended that you use the <xref:System.Web.Profile.ProfileBase.Create%2A> method.  
  
   
  
## Examples  
 The following code example shows a Web.config file that specifies a user profile that contains a `ZipCode` property of type `string` and a `RecentSearchList` property of type <xref:System.Collections.Specialized.StringCollection>. The generated <xref:System.Web.HttpContext.Profile%2A> property of the current <xref:System.Web.HttpContext> will have strongly typed accessors for each of the specified properties.  
  
```  
<configuration>  
  <system.web>  
    <anonymousIdentification enabled="true" />  
  
    <profile enabled="true" defaultProvider="SqlProvider" >  
      <properties>  
        <add name="ZipCode" allowAnonymous="true" />  
        <add name="RecentSearchList"  
          type="System.Collections.Specialized.StringCollection"  
          serializeAs="Xml"  
          allowAnonymous="true" />  
      </properties>  
    </profile>  
  </system.web>  
</configuration>  
```  
  
 The following code example shows an ASP.NET page that reads and sets the `ZipCode` property specified for the user profile. Before attempting to run this code, set the provider to the default `AspNetSqlProvider` in the ASP.NET configuration settings for the Web site.  
  
 [!code-vb[System.Web.Profile.HttpProfileBase#1](~/add/codesnippet/visualbasic/t-system.web.profile.pro_9_1.aspx)]
 [!code-cs[System.Web.Profile.HttpProfileBase#1](~/add/codesnippet/csharp/t-system.web.profile.pro_9_1.aspx)]  
  
 The following code example defines a class that inherits from the ProfileBase class to create a custom profile. The type of the custom profile is specified in the `inherits` attribute of the  configuration element in the Web.config file for an application.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.ProfileBase#1](~/add/codesnippet/csharp/t-system.web.profile.pro_9_2.cs)]
 [!code-vb[System.Web.Profile.ProfileBase#1](~/add/codesnippet/visualbasic/t-system.web.profile.pro_9_2.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProfileBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates an instance of the <see cref="T:System.Web.Profile.ProfileBase" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET uses the <xref:System.Web.Profile.ProfileBase> class to create the class used for the user profile. When an application that has the user profile enabled is started, ASP.NET creates a new class of type `ProfileCommon`, which inherits from the <xref:System.Web.Profile.ProfileBase> class. Strongly typed accessors are added to the `ProfileCommon` class for each property defined in the  configuration section. The strongly typed accessors of the `ProfileCommon` class call the <xref:System.Web.Profile.ProfileBase.GetPropertyValue%2A> and <xref:System.Web.Profile.ProfileBase.SetPropertyValue%2A> methods of the <xref:System.Web.Profile.ProfileBase> base class to retrieve and set profile property values, respectively. An instance of the `ProfileCommon` class is set as the value of the <xref:System.Web.HttpContext.Profile%2A> property for the ASP.NET application.  
  
> [!NOTE]
>  The base class used to generate the class stored in the <xref:System.Web.HttpContext.Profile%2A> property can be overridden using the `inherits` attribute of the  section of the configuration file. In this case you would specify a custom class that inherits from the <xref:System.Web.Profile.ProfileBase> base class.  
  
 This constructor is not intended to be used from application code. To create an instance of a user profile, use the <xref:System.Web.Profile.ProfileBase.Create%2A> method.  
  
   
  
## Examples  
 The following Web.config file specifies a user profile that contains a `ZipCode` property of type `string` and a `RecentSearchList` property of type <xref:System.Collections.Specialized.StringCollection>. The generated <xref:System.Web.HttpContext.Profile%2A> property of the current <xref:System.Web.HttpContext> will have strongly typed accessors for each of the specified properties.  
  
```  
<configuration>  
   <connectionStrings>  
       <add name="SqlServices" connectionString="Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
   </connectionStrings>  
  
  <system.web>  
   <anonymousIdentification enabled="true" />  
  
   <profile defaultProvider="SqlProvider" >  
     <providers>  
       <add  
         name="SqlProvider"  
         connectionStringName="SqlServices"  
         applicationName="ProfileBaseApplication"  
         type="System.Web.Profile.SqlProfileProvider" />  
     </providers>  
  
     <properties>  
       <add name="ZipCode" allowAnonymous="true" />  
       <add name="RecentSearchList"  
            type="System.Collections.Specialized.StringCollection"  
            serializeAs="Xml"  
            allowAnonymous="true" />  
      </properties>  
    </profile>  
   </system.web>  
</configuration>  
```  
  
 The following ASP.NET page reads and sets the `ZipCode` property specified for the user profile.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.Profile.HttpProfileBase#1](~/add/codesnippet/visualbasic/m-system.web.profile.pro_1_1.aspx)]
 [!code-cs[System.Web.Profile.HttpProfileBase#1](~/add/codesnippet/csharp/m-system.web.profile.pro_1_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">The <see langword="enabled" /> attribute of the  section of the Web.config file is <see langword="false" />.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">A property type specified in the  section of the Web.config file could not be created.  
  
 -or-  
  
 The <see langword="allowAnonymous" /> attribute for a property in the  section of the Web.config file is set to <see langword="true" /> and the <see langword="enabled" /> attribute of the  element is set to <see langword="false" />.  
  
 -or-  
  
 The <see langword="serializeAs" /> attribute for a property in the  section of the Web.config file is set to <see cref="T:System.Configuration.SettingsSerializeAs" /> and the &lt;xref:System.Type.IsSerializable%2A&gt; property of the specified <see langword="type" /> returns <see langword="false" />.  
  
 -or-  
  
 The name of a provider specified using the <see langword="provider" /> attribute of a profile property could not be found in the &lt;xref:System.Web.Profile.ProfileManager.Providers%2A&gt; collection.  
  
 -or-  
  
 The <see langword="type" /> specified for a profile property could not be found.  
  
 -or-  
  
 A profile property was specified with a name that matches a property name on the base class specified in the <see langword="inherits" /> attribute of the  section.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileBase Create (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileBase Create(string username) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to create a profile for.</param>
        <summary>Used by ASP.NET to create an instance of a profile for the specified user name.</summary>
        <returns>An <see cref="T:System.Web.Profile.ProfileBase" /> that represents the profile for the specified user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Create method creates and initializes a new profile instance and is useful for applications that use a custom profile object or manage user profiles in a non-ASP.NET environment.  
  
 This overload of the Create method assumes that the specified user name is an authenticated user.  
  
   
  
## Examples  
 The following code example creates an instance of a custom profile object, sets a property, and saves the profile to the data source.  
  
 [!code-vb[System.Web.Profile.ProfileBase.Create#1](~/add/codesnippet/visualbasic/m-system.web.profile.pro_2_1.vb)]
 [!code-cs[System.Web.Profile.ProfileBase.Create#1](~/add/codesnippet/csharp/m-system.web.profile.pro_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">The <see langword="enabled" /> attribute of the  section of the Web.config file is <see langword="false" />.</exception>
        <exception cref="T:System.Web.HttpException">The current hosting permission level is less than <see cref="T:System.Web.AspNetHostingPermissionLevel" />.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">A property type specified in the  section of the Web.config file could not be created.  
  
 -or-  
  
 The <see langword="allowAnonymous" /> attribute for a property in the  section of the Web.config file is set to <see langword="true" /> and the <see langword="enabled" /> attribute of the  element is set to <see langword="false" />.  
  
 -or-  
  
 The <see langword="serializeAs" /> attribute for a property in the  section of the Web.config file is set to <see cref="T:System.Configuration.SettingsSerializeAs" /> and the &lt;xref:System.Type.IsSerializable%2A&gt; property of the specified <see langword="type" /> returns <see langword="false" />.  
  
 -or-  
  
 The name of a provider specified using the <see langword="provider" /> attribute of a profile property could not be found in the &lt;xref:System.Web.Profile.ProfileManager.Providers%2A&gt; collection.  
  
 -or-  
  
 The <see langword="type" /> specified for a profile property could not be found.  
  
 -or-  
  
 A profile property was specified with a name that matches a property name on the base class specified in the <see langword="inherits" /> attribute of the  section.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Web.Profile.ProfileBase Create (string username, bool isAuthenticated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Profile.ProfileBase Create(string username, bool isAuthenticated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="isAuthenticated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to create a profile for.</param>
        <param name="isAuthenticated">
          <see langword="true" /> to indicate the user is authenticated; <see langword="false" /> to indicate the user is anonymous.</param>
        <summary>Used by ASP.NET to create an instance of a profile for the specified user name. Takes a parameter indicating whether the user is authenticated or anonymous.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileBase" /> object that represents the profile for the specified user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Create method creates and initializes a new profile instance and is useful for applications that use a custom profile object or manage user profiles in a non-ASP.NET environment.  
  
 This overload of the Create method can be used to create a profile for an authenticated user or an anonymous user.  
  
   
  
## Examples  
 The following code example creates an instance of a custom profile object, sets a property, and saves the profile to the data source.  
  
 [!code-vb[System.Web.Profile.ProfileBase.Create#2](~/add/codesnippet/visualbasic/m-system.web.profile.pro_9_1.vb)]
 [!code-cs[System.Web.Profile.ProfileBase.Create#2](~/add/codesnippet/csharp/m-system.web.profile.pro_9_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">The <see langword="enabled" /> attribute of the  section of the Web.config file is <see langword="false" />.</exception>
        <exception cref="T:System.Web.HttpException">The current hosting permission level is less than <see cref="T:System.Web.AspNetHostingPermissionLevel" />.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">A property type specified in the  section of the Web.config file could not be created.  
  
 -or-  
  
 The <see langword="allowAnonymous" /> attribute for a property in the  section of the Web.config file is set to <see langword="true" /> and the <see langword="enabled" /> attribute of the  element is set to <see langword="false" />.  
  
 -or-  
  
 The <see langword="serializeAs" /> attribute for a property in the  section of the Web.config file is set to <see cref="T:System.Configuration.SettingsSerializeAs" /> and the &lt;xref:System.Type.IsSerializable%2A&gt; property of the specified <see langword="type" /> returns <see langword="false" />.  
  
 -or-  
  
 The name of a provider specified using the <see langword="provider" /> attribute of a profile property could not be found in the &lt;xref:System.Web.Profile.ProfileManager.Providers%2A&gt; collection.  
  
 -or-  
  
 The <see langword="type" /> specified for a profile property could not be found.  
  
 -or-  
  
 A profile property was specified with a name that matches a property name on the base class specified in the <see langword="inherits" /> attribute of the  section.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProfileGroup">
      <MemberSignature Language="C#" Value="public System.Web.Profile.ProfileGroupBase GetProfileGroup (string groupName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Profile.ProfileGroupBase GetProfileGroup(string groupName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileGroupBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupName">The name of the group of properties.</param>
        <summary>Gets a group of properties identified by a group name.</summary>
        <returns>A <see cref="T:System.Web.Profile.ProfileGroupBase" /> object for a group of properties configured with the specified group name.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Profile properties can be separated into groups for better organization. The GetProfileGroup property can be used to retrieve a group of properties by the group name. You can also access a profile property in a group by specifying the group name as a member of the `Profile` property available on each page. For example, the `ZipCode` profile property that is a member of the `Address` profile group could be accessed using `Profile.Address.ZipCode`.  
  
   
  
## Examples  
 The following Web.config file specifies a user profile that contains group of properties with a group name of `Address`. The grouped properties generated for the <xref:System.Web.HttpContext.Profile%2A> property of the current <xref:System.Web.HttpContext> will be preceded by the group name. For example, `Profile.Address.Street`.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString=  
      "Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
        name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
    </authorization>  
  
    <membership defaultProvider="SqlProvider"   
      userIsOnlineTimeWindow="15">  
      <providers>  
        <clear />  
        <add   
          name="SqlProvider"   
          type="System.Web.Security.SqlMembershipProvider"   
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"   
          requiresUniqueEmail="false"  
          passwordFormat="Hashed"  
          applicationName="MyApplication" />  
      </providers>  
    </membership>  
  
    <profile defaultProvider="SqlProvider">  
      <providers>  
        <add  
          name="SqlProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication"  
          type="System.Web.Profile.SqlProfileProvider" />  
  
      </providers>  
  
      <properties>  
        <add name="ZipCode" />  
        <group name="Address">  
          <add name="Street" />  
          <add name="City" />  
          <add name="State" />  
          <add name="CountryOrRegion" />  
        </group>  
      </properties>  
    </profile>  
  </system.web>  
</configuration>  
```  
  
 The following ASP.NET page reads and sets the grouped properties specified for the user profile.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.Profile.HttpProfileGroupBase#1](~/add/codesnippet/csharp/m-system.web.profile.pro_5_1.aspx)]
 [!code-vb[System.Web.Profile.HttpProfileGroupBase#1](~/add/codesnippet/visualbasic/m-system.web.profile.pro_5_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">The specified profile property group name was not found in the  configuration section.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValue">
      <MemberSignature Language="C#" Value="public object GetPropertyValue (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyValue(string propertyName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the profile property.</param>
        <summary>Gets the value of a profile property.</summary>
        <returns>The value of the specified profile property, typed as <see langword="object" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET uses the <xref:System.Web.Profile.ProfileBase> class to create the class used for the user profile. When an application that has the user profile enabled is started, ASP.NET creates a new class of type `ProfileCommon`, which inherits from the <xref:System.Web.Profile.ProfileBase> class. Strongly typed accessors are added to the `ProfileCommon` class for each property defined in the  configuration section. The strongly typed accessors of the `ProfileCommon` class call the GetPropertyValue method to retrieve untyped values from the <xref:System.Web.Profile.ProfileProvider> that the generated accessor then casts as the specified type and returns as the property value.  
  
 You can use the GetPropertyValue method to retrieve property values of the user profile for your application by name. Returned values are untyped and must be cast as the specific object type when retrieved. For strongly typed access to profile property values, you can access the property by name as a member of the Profile property available on each page, for example, `Profile.CustomerAddress`.  
  
   
  
## Examples  
 The following code example shows an ASP.NET page that reads and sets the `ZipCode` property specified for the user profile. For an example of a Web.config file that specifies properties for the user profile, see the example provided for the <xref:System.Web.Profile.ProfileBase> class.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.Profile.HttpProfileBase#1](~/add/codesnippet/visualbasic/m-system.web.profile.pro_10_1.aspx)]
 [!code-cs[System.Web.Profile.HttpProfileBase#1](~/add/codesnippet/csharp/m-system.web.profile.pro_10_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">An attempt was made to set a property value on an anonymous profile where the property's <see langword="allowAnonymous" /> attribute is <see langword="false" />.</exception>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">There are no properties defined for the current profile.  
  
 -or-  
  
 The specified profile property name does not exist in the current profile.  
  
 -or-  
  
 The provider for the specified profile property did not recognize the specified property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (string username, bool isAuthenticated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize(string username, bool isAuthenticated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="isAuthenticated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to initialize the profile for.</param>
        <param name="isAuthenticated">
          <see langword="true" /> to indicate the user is authenticated; <see langword="false" /> to indicate the user is anonymous.</param>
        <summary>Initializes the profile property values and information for the current user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not intended to be used from your code. Use one of the <xref:System.Web.Profile.ProfileBase.Create%2A> overloads to create an instance of the user profile.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAnonymous">
      <MemberSignature Language="C#" Value="public bool IsAnonymous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnonymous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the user profile is for an anonymous user.</summary>
        <value>
          <see langword="true" /> if the user profile is for an anonymous user; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anonymous access to the user profile is enabled using the  configuration section and the `allowAnonymous` attribute of the  configuration element used to specify profile properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether any of the profile properties have been modified.</summary>
        <value>
          <see langword="true" /> if any of the profile properties have been modified; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsDirty property can be used by a profile provider during the <xref:System.Configuration.SettingsBase.Save%2A> method to determine whether properties that are made up of primitive types, strings, or <xref:System.DateTime> objects have been changed. Changed properties are then updated by the profile provider in the <xref:System.Configuration.SettingsBase.Save%2A> method. The <xref:System.Configuration.SettingsBase.Save%2A> method is automatically called at the end of page execution if the <xref:System.Web.Profile.ProfileManager.AutomaticSaveEnabled%2A> property is `true`  
  
 A profile provider called in the <xref:System.Configuration.SettingsBase.Save%2A> method cannot explicitly determine whether a profile property with a custom class type or a complex type, such as a collection, has changed. You can use the <xref:System.Web.Profile.ProfileModule.ProfileAutoSaving> event to determine whether a custom object has been modified and to continue with the automatic save for modified objects or cancel the automatic save if no objects have been modified. The default behavior of the <xref:System.Web.Profile.ProfileBase> class is to set the IsDirty property to `true` for properties that are of a custom or complex type the first time the property is accessed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override object this[string propertyName] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the profile property.</param>
        <summary>Gets or sets a profile property value indexed by the property name.</summary>
        <value>The value of the specified profile property, typed as <see langword="object" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this property to retrieve or set the property values of the user profile for your application by name. Returned values are typed as `object` and must be cast as the specific object type when retrieved. For strongly typed access to profile property values, you can access the property by name as a member of the `Profile` property available on each page, for example, `Profile.CustomerAddress`.  
  
   
  
## Examples  
 The following code example lists the names of the properties in the user profile by binding the <xref:System.Configuration.SettingsProperty.Name%2A> property from the static <xref:System.Web.Profile.ProfileBase.Properties%2A> collection of <xref:System.Configuration.SettingsProperty> objects to a <xref:System.Web.UI.WebControls.GridView> control. The selected property value is retrieved by name using the Item collection. For an example of a Web.config file that specifies properties for the user profile, see the example provided for the <xref:System.Web.Profile.ProfileBase> class.  
  
 [!code-cs[System.Web.Profile.HttpProfileBase#2](~/add/codesnippet/csharp/p-system.web.profile.pro_3_1.aspx)]
 [!code-vb[System.Web.Profile.HttpProfileBase#2](~/add/codesnippet/visualbasic/p-system.web.profile.pro_3_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">An attempt was made to set a property value on an anonymous profile where the property's <see langword="allowAnonymous" /> attribute is <see langword="false" />.</exception>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">There are no properties defined for the current profile.  
  
 -or-  
  
 The specified profile property name does not exist in the current profile.  
  
 -or-  
  
 The provider for the specified profile property did not recognize the specified property.</exception>
        <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">An attempt was made to set a property value that was marked as read-only.</exception>
        <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">An attempt was made to assign a value to a property using an incompatible type.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LastActivityDate">
      <MemberSignature Language="C#" Value="public DateTime LastActivityDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LastActivityDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the most recent date and time that the profile was read or modified.</summary>
        <value>The most recent date and time that the profile was read or modified by the default provider.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property value is only modified by the default profile provider. Changes made to profile properties by a provider other than the default profile provider do not affect the value of the LastActivityDate property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LastUpdatedDate">
      <MemberSignature Language="C#" Value="public DateTime LastUpdatedDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LastUpdatedDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the most recent date and time that the profile was modified.</summary>
        <value>The most recent date and time that the profile was modified by the default provider.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property value is only modified by the default profile provider. Changes made to profile properties by a provider other than the default profile provider do not affect the value of the LastUpdatedDate property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public static System.Configuration.SettingsPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Configuration.SettingsPropertyCollection Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Configuration.SettingsProperty" /> objects for each property in the profile.</summary>
        <value>A <see cref="T:System.Configuration.SettingsPropertyCollection" /> of <see cref="T:System.Configuration.SettingsProperty" /> objects for each property in the profile for the application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this property to get information about the profile properties configured for an application, including property names and types. You can also reference the <xref:System.Web.Profile.ProfileProvider> of each property. A <xref:System.Web.Profile.ProfileProvider> manages storage and retrieval of property values to and from the data source.  
  
   
  
## Examples  
 The following code example lists the names of the properties in the user profile by binding the <xref:System.Configuration.SettingsProperty.Name%2A> property from the static Properties collection of <xref:System.Configuration.SettingsProperty> objects to a <xref:System.Web.UI.WebControls.GridView> control. The selected property value is retrieved by name using the <xref:System.Web.Profile.ProfileBase.Item%2A> collection. For an example of a Web.config file that specifies properties for the user profile, see the example provided for the <xref:System.Web.Profile.ProfileBase> class.  
  
 [!code-cs[System.Web.Profile.HttpProfileBase#2](~/add/codesnippet/csharp/p-system.web.profile.pro_2_1.aspx)]
 [!code-vb[System.Web.Profile.HttpProfileBase#2](~/add/codesnippet/visualbasic/p-system.web.profile.pro_2_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">A property type specified in the  section of the Web.config file could not be created.  
  
 -or-  
  
 The <see langword="allowAnonymous" /> attribute for a property in the  section of the Web.config file is set to <see langword="true" /> and the <see langword="enabled" /> attribute of the  element is set to <see langword="false" />.  
  
 -or-  
  
 The <see langword="serializeAs" /> attribute for a property in the  section of the Web.config file is set to <see cref="T:System.Configuration.SettingsSerializeAs" /> and the &lt;xref:System.Type.IsSerializable%2A&gt; property of the specified <see langword="type" /> returns <see langword="false" />.  
  
 -or-  
  
 The name of a provider specified using the <see langword="provider" /> attribute of a profile property could not be found in the &lt;xref:System.Web.Profile.ProfileManager.Providers%2A&gt; collection.  
  
 -or-  
  
 The <see langword="type" /> specified for a profile property could not be found.  
  
 -or-  
  
 A profile property was specified with a name that matches a property name on the base class specified in the <see langword="inherits" /> attribute of the  section.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public override void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Save() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the profile data source with changed profile property values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Save method writes modified profile property values to the data source. The profile provider can reduce the amount of activity at the data source by performing updates only when the <xref:System.Web.Profile.ProfileBase.IsDirty%2A> property is set to `true`. This is the case for the default <xref:System.Web.Profile.SqlProfileProvider>. After the Save method has saved the property values to the data source, <xref:System.Web.Profile.ProfileBase.IsDirty%2A> is set to `false`.  
  
 You can use the <xref:System.Web.Profile.ProfileModule.ProfileAutoSaving> event to implement custom logic that determines whether a profile property with a custom type or a complex type has been modified and continue with the automatic save for modified objects or cancel the automatic save if no objects have been modified.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValue">
      <MemberSignature Language="C#" Value="public void SetPropertyValue (string propertyName, object propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPropertyValue(string propertyName, object propertyValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to set.</param>
        <param name="propertyValue">The value to assign to the property.</param>
        <summary>Sets the value of a profile property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET uses the <xref:System.Web.Profile.ProfileBase> class to create the class used for the user profile. When an application that has the user profile enabled is started, ASP.NET creates a new class of type `ProfileCommon`, which inherits from the <xref:System.Web.Profile.ProfileBase> class. Strongly typed accessors are added to the `ProfileCommon` class for each property defined in the  configuration section. The strongly typed accessors of the `ProfileCommon` class call the SetPropertyValue method to pass property values to the <xref:System.Web.Profile.ProfileProvider> to be stored at the data source.  
  
 You can use the SetPropertyValue method to assign property values in the user profile for your application by name. Values are untyped, and type checking will be done at run time, not compile time. For strongly typed access to profile property values, you can access the property by name as a member of the `Profile` property that is available on each page, for example, `Profile.CustomerAddress`.  
  
   
  
## Examples  
 The following code example shows an ASP.NET page that reads and sets the `ZipCode` property specified for the user profile. For an example of a Web.config file that specifies properties for the user profile, see the example provided for the <xref:System.Web.Profile.ProfileBase> class.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.Profile.HttpProfileBase#1](~/add/codesnippet/visualbasic/m-system.web.profile.pro_3_1.aspx)]
 [!code-cs[System.Web.Profile.HttpProfileBase#1](~/add/codesnippet/csharp/m-system.web.profile.pro_3_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">An attempt was made to set a property value on an anonymous profile where the property's <see langword="allowAnonymous" /> attribute is <see langword="false" />.</exception>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">There are no properties defined for the current profile.  
  
 -or-  
  
 The specified profile property name does not exist in the current profile.  
  
 -or-  
  
 The provider for the specified profile property did not recognize the specified property.</exception>
        <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">An attempt was made to set a value value on a property that was marked as read-only.</exception>
        <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">An attempt was made to assign a value to a property using an incompatible type.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public string UserName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the user name for the profile.</summary>
        <value>The user name for the profile or the anonymous-user identifier assigned to the profile.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UserName property returns either the name of the authenticated user that the profile is associated with or the anonymous user identifier assigned to the profile if the <xref:System.Web.Profile.ProfileBase.IsAnonymous%2A> property is `true`.  
  
 Anonymous access to the user profile is enabled using the  configuration section and the `allowAnonymous` attribute of the  configuration element used to specify profile properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>