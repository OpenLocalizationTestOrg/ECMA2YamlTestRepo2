<Type Name="WebAuthenticationFailureAuditEvent" FullName="System.Web.Management.WebAuthenticationFailureAuditEvent">
  <TypeSignature Language="C#" Value="public class WebAuthenticationFailureAuditEvent : System.Web.Management.WebFailureAuditEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebAuthenticationFailureAuditEvent extends System.Web.Management.WebFailureAuditEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebFailureAuditEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides information about ASP.NET authentication failures.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following list describes the features for which WebAuthenticationFailureAuditEvent events are raised by default by ASP.NET.  
  
> [!NOTE]
>  By default ASP.NET is configured to log audit failure conditions only, as logging success conditions can severely strain system resources. You can always configure the system to log the success conditions.  
  
-   Forms Authentication. While success audits include the user name that was authenticated; failure audits do not include the user name, since they typically result from a ticket that failed decryption or validation. Both contain the client IP address. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationFailure>.  
  
-   Membership. Both success and failure audits contain the username that was attempted. Neither form of audit will contain the password that was attempted, because that would risk persisting a valid password in the log. The related event audit code is <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationFailure>.  
  
 When a WebAuthenticationFailureAuditEvent is raised, by default it updates the Audit Authentication Failure Events Raised performance counter. To view this performance counter in System Monitor (PerfMon), in the **Add Counters** window select `ASP.NET` in the **Performance** object drop-down list, select the **Authentication Failure Events Raised** performance counter, and click the **Add** button. For more information, see [Using the System Monitor (PerfMon) with ASP.NET Applications](http://go.microsoft.com/fwlink/?linkid=36882&clcid=0x409) on MSDN.  
  
> [!NOTE]
>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebAuthenticationFailureAuditEvent class, see the example provided in this topic.  
  
   
  
## Examples  
 The following code example shows how to use the WebAuthenticationFailureAuditEvent class.  
  
 [!code-cs[System.Web.Management.WebAuthenticationFailureAuditEvent#1](~/add/codesnippet/csharp/t-system.web.management._6_1.cs)]
 [!code-vb[System.Web.Management.WebAuthenticationFailureAuditEvent#1](~/add/codesnippet/visualbasic/t-system.web.management._6_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebAuthenticationFailureAuditEvent (string message, object eventSource, int eventCode, string nameToAuthenticate);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, string nameToAuthenticate) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="nameToAuthenticate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The event description.</param>
        <param name="eventSource">The object that is the source of the event.</param>
        <param name="eventCode">The <see cref="T:System.Web.Management.WebEventCodes" /> value associated with the event.</param>
        <param name="nameToAuthenticate">The name of the user to authenticate.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Management.WebAuthenticationFailureAuditEvent" /> class with the specified event parameters.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WebAuthenticationFailureAuditEvent constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the WebAuthenticationFailureAuditEvent constructor when deriving from the <xref:System.Web.Management.WebAuthenticationFailureAuditEvent> class.  
  
   
  
## Examples  
 The following code example shows how to customize this constructor.  
  
 [!code-cs[System.Web.Management.WebAuthenticationFailureAuditEvent#2](~/add/codesnippet/csharp/ad94f9ba-4e75-4b44-88d9-_1.cs)]
 [!code-vb[System.Web.Management.WebAuthenticationFailureAuditEvent#2](~/add/codesnippet/visualbasic/ad94f9ba-4e75-4b44-88d9-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebAuthenticationFailureAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode, string nameToAuthenticate);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode, string nameToAuthenticate) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
        <Parameter Name="nameToAuthenticate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The event description.</param>
        <param name="eventSource">The object that is the source of the event.</param>
        <param name="eventCode">The code associated with the event. When you implement a custom event, the event code must be greater than <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="eventDetailCode">The <see cref="T:System.Web.Management.WebEventCodes" /> value that specifies the detailed identifier for the event.</param>
        <param name="nameToAuthenticate">The name of the user to authenticate.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Management.WebAuthenticationFailureAuditEvent" /> class with the specified event parameters.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WebAuthenticationFailureAuditEvent constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the WebAuthenticationFailureAuditEvent constructor when deriving from the <xref:System.Web.Management.WebAuthenticationFailureAuditEvent> class.  
  
   
  
## Examples  
 The following code example shows how to customize this constructor.  
  
 [!code-cs[System.Web.Management.WebAuthenticationFailureAuditEvent#3](~/add/codesnippet/csharp/d0ed240e-77e1-4ad8-be99-_1.cs)]
 [!code-vb[System.Web.Management.WebAuthenticationFailureAuditEvent#3](~/add/codesnippet/visualbasic/d0ed240e-77e1-4ad8-be99-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NameToAuthenticate">
      <MemberSignature Language="C#" Value="public string NameToAuthenticate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NameToAuthenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the user to authenticate.</summary>
        <value>The name of the user to authenticate.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Only the success audits should include the name of the authenticated user. The failure audits should not include the user name, since they typically result from failed decryption or validation.  
  
   
  
## Examples  
 The following code example shows how to use NameToAuthenticate property.  
  
 [!code-cs[System.Web.Management.WebAuthenticationFailureAuditEvent#3](~/add/codesnippet/csharp/p-system.web.management._26_1.cs)]
 [!code-vb[System.Web.Management.WebAuthenticationFailureAuditEvent#3](~/add/codesnippet/visualbasic/p-system.web.management._26_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>