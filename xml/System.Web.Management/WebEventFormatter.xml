<Type Name="WebEventFormatter" FullName="System.Web.Management.WebEventFormatter">
  <TypeSignature Language="C#" Value="public class WebEventFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebEventFormatter extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Formats ASP.NET health monitoring event information.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  
  
 The WebEventFormatter is a supporting type used to uniformly format event-related information, which is useful if the event data must be logged and later presented to the user..  
  
 Instances of the WebEventFormatter class are passed as arguments to the formatting methods defined by the health-event types.  
  
   
  
## Examples  
 The following code example shows how to use the WebEventFormatter to format event information. It is mainly intended to show the correct syntax to use. This code example is part of a larger example provided for the <xref:System.Web.Management.WebBaseEvent> class.  
  
 [!code-cs[System.Web.Management.WebBaseEvent#17](~/add/codesnippet/csharp/t-system.web.management._7_1.cs)]
 [!code-vb[System.Web.Management.WebBaseEvent#17](~/add/codesnippet/visualbasic/t-system.web.management._7_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="AppendLine">
      <MemberSignature Language="C#" Value="public void AppendLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendLine(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The string to add to the event information.</param>
        <summary>Appends the specified string and a carriage return to the event information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AppendLine method allows you to customize the event information by adding your own event-specific data.  
  
   
  
## Examples  
 The following code example shows how to use the AppendLine method.  
  
 [!code-cs[System.Web.Management.WebBaseEvent#20](~/add/codesnippet/csharp/m-system.web.management._5_1.cs)]
 [!code-vb[System.Web.Management.WebBaseEvent#20](~/add/codesnippet/visualbasic/m-system.web.management._5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndentationLevel">
      <MemberSignature Language="C#" Value="public int IndentationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IndentationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the indentation level.</summary>
        <value>The number of tabs used for the indentation level.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IndentationLevel property allows you to control how the event information is indented. The base unit of indentation is defined by the <xref:System.Web.Management.WebEventFormatter.TabSize%2A> property. For each indentation level, you increase the indentation one tab.  
  
   
  
## Examples  
 The following code example shows how to use the IndentationLevel property.  
  
 [!code-cs[System.Web.Management.WebBaseEvent#18](~/add/codesnippet/csharp/p-system.web.management._24_1.cs)]
 [!code-vb[System.Web.Management.WebBaseEvent#18](~/add/codesnippet/visualbasic/p-system.web.management._24_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TabSize">
      <MemberSignature Language="C#" Value="public int TabSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tab size.</summary>
        <value>The number of spaces in a tab.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TabSize property allows you to control the tab size used when writing event information. The TabSize determines the number of spaces per unit of indentation, controlled by <xref:System.Web.Management.WebEventFormatter.IndentationLevel%2A> property.  
  
   
  
## Examples  
 The following code example shows how to use the TabSize property.  
  
 [!code-cs[System.Web.Management.WebBaseEvent#19](~/add/codesnippet/csharp/p-system.web.management._40_1.cs)]
 [!code-vb[System.Web.Management.WebBaseEvent#19](~/add/codesnippet/visualbasic/p-system.web.management._40_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the event information in string format.</summary>
        <returns>The event information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.Management.WebEventFormatter> uses an internal <xref:System.Text.StringBuilder> variable to store the event information. This ToString method allows you to get all the information in a string format.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>