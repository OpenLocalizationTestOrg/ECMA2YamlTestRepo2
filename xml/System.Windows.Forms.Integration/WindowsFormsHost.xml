<Type Name="WindowsFormsHost" FullName="System.Windows.Forms.Integration.WindowsFormsHost">
  <TypeSignature Language="C#" Value="public class WindowsFormsHost : System.Windows.Interop.HwndHost, System.Windows.Interop.IKeyboardInputSink" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsHost extends System.Windows.Interop.HwndHost implements class System.Windows.Interop.IKeyboardInputSink" />
  <AssemblyInfo>
    <AssemblyName>WindowsFormsIntegration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Interop.HwndHost</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Interop.IKeyboardInputSink</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ChildChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignerCategory("code")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Child")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An element that allows you to host a [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control on a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] page.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the WindowsFormsHost element to place a [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control within your [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] element or page.  
  
 To host a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] element in a [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control or form, use the <xref:System.Windows.Forms.Integration.ElementHost> control.  
  
> [!NOTE]
>  WindowsFormsIntegration.dll is installed with the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] assemblies. The default location for the assembly is %programfiles%\Reference Assemblies\Microsoft\Framework\v3.0\WindowsFormsIntegration.dll.  
  
 To host a [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control in a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] element, you must assign the [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control to the <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> property.  
  
 Use the <xref:System.Windows.Forms.Integration.WindowsFormsHost.PropertyMap%2A> property to assign custom mappings between a WindowsFormsHost element and its hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control. For more information, see [Windows Forms and WPF Property Mapping](~/add/includes/ajax-current-ext-md.md).  
  
<a name="xamlObjectElementUsage_WindowsFormsHost"></a>   
## XAML Object Element Usage  
  
```  
<WindowsFormsHost.../>  
```  
  
   
  
## Examples  
 The following code example demonstrates how to use a WindowsFormsHost element to host a <xref:System.Windows.Forms.MaskedTextBox?displayProperty=fullName> control. For more information, see [Walkthrough: Hosting a Windows Forms Control in WPF by Using XAML](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-xml[HostingWfInWpfWithXaml#1](~/add/codesnippet/xaml/HostingWfInWpf/Window1.xaml#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsHost ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> class.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">for full trust for all callers higher in the call stack. This member cannot be used by partially trusted code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
        <summary>When implemented in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" />-derived class.</summary>
        <returns>The actual size used.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Background">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Background { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Background" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the hosted control's background as an ambient property.</summary>
        <value>A <see cref="T:System.Windows.Media.Brush" /> set to the background color.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This dependency property is identified by the <xref:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty> field. By default, this property is mapped to update the <xref:System.Windows.Forms.Control.BackColor%2A?displayProperty=fullName> and <xref:System.Windows.Forms.Control.BackgroundImage%2A?displayProperty=fullName> properties of the hosted control.  
  
 For more information on mapping the Background property, see [Windows Forms and WPF Property Mapping](~/add/includes/ajax-current-ext-md.md).  
  
<a name="xamlAttributeUsage_Background"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ Background="Brush"/>  
```  
  
<a name="xamlValues_Background"></a>   
## XAML Values  
 *Brush*  
 See <xref:System.Windows.Media.Brush> for XAML Attribute syntax.  
  
<a name="dependencyPropertyInfo_Background"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BackgroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BackgroundProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.Background%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BuildWindowCore">
      <MemberSignature Language="C#" Value="protected override System.Runtime.InteropServices.HandleRef BuildWindowCore (System.Runtime.InteropServices.HandleRef hwndParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Runtime.InteropServices.HandleRef BuildWindowCore(valuetype System.Runtime.InteropServices.HandleRef hwndParent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.HandleRef</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwndParent" Type="System.Runtime.InteropServices.HandleRef" />
      </Parameters>
      <Docs>
        <param name="hwndParent">The parent window's handle (HWND).</param>
        <summary>Overrides the base class implementation of &lt;xref:System.Windows.Interop.HwndHost.BuildWindowCore%2A&gt; to build the hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control.</summary>
        <returns>The window handle for this object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Child">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Child { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Child" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the child control hosted by the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element.</summary>
        <value>The hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Only one child control can be hosted, but Child can have any number of children.  
  
 The child control cannot be a top-level form.  
  
 If Child is a <xref:System.Windows.Forms.Form>, the form's <xref:System.Windows.Forms.Form.ControlBox%2A> property is set to `false`.  
  
<a name="xamlTextUsage_Child"></a>   
## XAML Text Usage  
 `<` *object* `>`  
  
 `<` *hostedControl*  `.../>`  
  
 `</` *object* `>`  
  
<a name="xamlValues_Child"></a>   
## XAML Values  
 *object*  
 A <xref:System.Windows.Forms.Integration.WindowsFormsHost> element (or a possible subclass).  
  
 *hostedControl*  
 An element that specifies the hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control. Specifying the custom control in markup usually requires an xmlns mapping, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the Child property to add the hosted control to the <xref:System.Windows.Forms.Integration.WindowsFormsHost> element. For more information, see [Walkthrough: Hosting an ActiveX Control in WPF](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[HostingAxInWpf#11](~/add/codesnippet/csharp/hostingaxinwpf/window1.xaml.cs#11)]
 [!code-vb[HostingAxInWpf#11](~/add/codesnippet/visualbasic/hostingaxinwpf/window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">An attempt was made to assign a top-level form as the hosted control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChildChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Forms.Integration.ChildChangedEventArgs&gt; ChildChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Forms.Integration.ChildChangedEventArgs&gt; ChildChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Forms.Integration.ChildChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A&gt; property is set.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_ChildChanged"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ ChildChanged="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DestroyWindowCore">
      <MemberSignature Language="C#" Value="protected override void DestroyWindowCore (System.Runtime.InteropServices.HandleRef hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void DestroyWindowCore(valuetype System.Runtime.InteropServices.HandleRef hwnd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.Runtime.InteropServices.HandleRef" />
      </Parameters>
      <Docs>
        <param name="hwnd">A window handle. This parameter is not used.</param>
        <summary>Overrides &lt;xref:System.Windows.Interop.HwndHost.DestroyWindowCore%2A&gt; to delete the window containing this object.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />, and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the Dispose method disposes the base <xref:System.Windows.Interop.HwndHost> and the <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableWindowsFormsInterop">
      <MemberSignature Language="C#" Value="public static void EnableWindowsFormsInterop ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableWindowsFormsInterop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enables a <see cref="T:System.Windows.Forms.Form" /> to function correctly when it is opened modelessly from [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call the EnableWindowsFormsInterop method to forward all keyboard messages when a <xref:System.Windows.Forms.Form?displayProperty=fullName> is opened modelessly. The EnableWindowsFormsInterop method installs a message filter that is required for modeless forms to function correctly when opened by [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]. You need to call this method only once for a particular <xref:System.Windows.Forms.Integration.WindowsFormsHost> instance.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">for full trust for all callers higher in the call stack. This member cannot be used by partially trusted code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontFamily">
      <MemberSignature Language="C#" Value="public System.Windows.Media.FontFamily FontFamily { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.FontFamily FontFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.FontFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the hosted control's font family.</summary>
        <value>The font family used in the hosted control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property setting affects only those controls whose template uses the property as a parameter. It has no effect on other controls.  
  
 This dependency property is identified by the <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty> field. By default, this property is mapped to update the <xref:System.Windows.Forms.Control.Font%2A?displayProperty=fullName> property of the hosted control. For more information, see [Windows Forms and WPF Property Mapping](~/add/includes/ajax-current-ext-md.md).  
  
<a name="xamlAttributeUsage_FontFamily"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ FontFamily="fontFamily"/>  
```  
  
<a name="xamlValues_FontFamily"></a>   
## XAML Values  
 *fontFamily*  
 See <xref:System.Windows.Media.FontFamily> for XAML Attribute syntax.  
  
<a name="dependencyPropertyInfo_FontFamily"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontFamilyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontFamilyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontFamilyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontSize">
      <MemberSignature Language="C#" Value="public double FontSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 FontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the hosted control's font size.</summary>
        <value>The font size used in the hosted control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This dependency property is identified by the <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty> field. By default, this property is mapped to update the <xref:System.Windows.Forms.Control.Font%2A?displayProperty=fullName> property of the hosted control. For more information, see [Windows Forms and WPF Property Mapping](~/add/includes/ajax-current-ext-md.md).  
  
<a name="xamlAttributeUsage_FontSize"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ FontSize="double"/>  
```  
  
<a name="xamlValues_FontSize"></a>   
## XAML Values  
 *double*  
 String representation of a <xref:System.Double> value equal to or greater than 0.0, but smaller than <xref:System.Double.PositiveInfinity>. This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)] measurement. Strings need not explicitly include decimal points. For instance a value of 1 is acceptable.  
  
<a name="dependencyPropertyInfo_FontSize"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontSizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontSizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontSizeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.FontSize%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontStyle">
      <MemberSignature Language="C#" Value="public System.Windows.FontStyle FontStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontStyle FontStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the hosted control's font style.</summary>
        <value>The font style used in the hosted control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This dependency property is identified by the <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty> field. By default, this property is mapped to update the <xref:System.Windows.Forms.Control.Font%2A?displayProperty=fullName> property of the hosted control. For more information, see [Windows Forms and WPF Property Mapping](~/add/includes/ajax-current-ext-md.md).  
  
<a name="xamlAttributeUsage_FontStyle"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ FontStyle="fontStyle"/>  
```  
  
<a name="xamlValues_FontStyle"></a>   
## XAML Values  
 *fontStyle*  
 See <xref:System.Windows.FontStyle> for XAML Attribute syntax.  
  
<a name="dependencyPropertyInfo_FontStyle"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontWeight">
      <MemberSignature Language="C#" Value="public System.Windows.FontWeight FontWeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontWeight FontWeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontWeight</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the hosted control's font weight.</summary>
        <value>The font weight used in the hosted control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This dependency property is identified by the <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty> field. By default, this property is mapped to update the <xref:System.Windows.Forms.Control.Font%2A?displayProperty=fullName> property of the hosted control. For more information, see [Windows Forms and WPF Property Mapping](~/add/includes/ajax-current-ext-md.md).  
  
<a name="xamlAttributeUsage_FontWeight"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ FontWeight="fontWeight"/>  
```  
  
<a name="xamlValues_FontWeight"></a>   
## XAML Values  
 *fontWeight*  
 See <xref:System.Windows.FontWeight> for XAML Attribute syntax.  
  
<a name="dependencyPropertyInfo_FontWeight"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontWeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontWeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontWeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Foreground">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Foreground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Foreground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the hosted control's foreground color.</summary>
        <value>A <see cref="T:System.Windows.Media.Brush" /> used to set the foreground color for the hosted control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This dependency property is identified by the <xref:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty> field. By default, this property is mapped to update the <xref:System.Windows.Forms.Control.ForeColor%2A?displayProperty=fullName> property of the hosted control. For more information on mapping the Foreground property, see [Windows Forms and WPF Property Mapping](~/add/includes/ajax-current-ext-md.md).  
  
<a name="xamlAttributeUsage_Foreground"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ Foreground="Brush"/>  
```  
  
<a name="xamlValues_Foreground"></a>   
## XAML Values  
 *Brush*  
 See <xref:System.Windows.Media.Brush> for XAML Attribute syntax.  
  
<a name="dependencyPropertyInfo_Foreground"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>,<br /><br /> <xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>,<br /><br /> <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForegroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForegroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForegroundProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.Foreground%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LayoutError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Forms.Integration.LayoutExceptionEventArgs&gt; LayoutError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Forms.Integration.LayoutExceptionEventArgs&gt; LayoutError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Forms.Integration.LayoutExceptionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a layout error, such as a skew or rotation that <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> does not support, is encountered.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_LayoutError"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ LayoutError="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size constraint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size constraint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraint" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="constraint">The available size for the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> object.</param>
        <summary>Overrides the base class implementation of &lt;xref:System.Windows.Interop.HwndHost.MeasureOverride%2A&gt; to measure the size of a <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> object and return proper sizes to the layout engine.</summary>
        <returns>The desired size of the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Size constraints in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] layout are hard constraints. If the constraints are exceeded, the host must clip the content within the hosted region. The implementation of this method enforces this behavior.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> for the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element.</summary>
        <returns>A <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> for the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Arguments that identify the property that changed as well as providing that property's old and new values.</param>
        <summary>Forces the translation of a mapped property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the OnPropertyChanged method may be necessary when a property of an ancestor element has changed, but the local value of the <xref:System.Windows.Forms.Integration.WindowsFormsHost> element has not changed. For more information, see [Windows Forms and WPF Property Mapping](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the size of the desired padding within the hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control.</summary>
        <value>A <see cref="T:System.Windows.Thickness" /> structure representing the padding pf the hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_Padding"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ Padding="Thickness"/>  
```  
  
<a name="xamlValues_Padding"></a>   
## XAML Values  
 *Thickness*  
 See <xref:System.Windows.Thickness> for XAML Attribute syntax.  
  
<a name="dependencyPropertyInfo_Padding"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Forms.Integration.WindowsFormsHost.PaddingProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaddingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PaddingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PaddingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.Padding%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PropertyMap">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Integration.PropertyMap PropertyMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Integration.PropertyMap PropertyMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Integration.PropertyMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the property map that determines how setting properties on the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element affects the hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control.</summary>
        <value>A <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> that maps <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> properties to properties on the hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] and [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] technologies have two similar but different property models. *Property mapping* supports interoperation between the two architectures. For more information, see [Windows Forms and WPF Property Mapping](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to add a mapping for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property to a <xref:System.Windows.Forms.Integration.WindowsFormsHost> control.  
  
 [!code-cs[PropertyMappingWithWfh#12](~/add/codesnippet/csharp/p-system.windows.forms.i_14_1.cs)]
 [!code-vb[PropertyMappingWithWfh#12](~/add/codesnippet/visualbasic/p-system.windows.forms.i_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScaleChild">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Vector ScaleChild (System.Windows.Vector newScale);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Vector ScaleChild(valuetype System.Windows.Vector newScale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newScale" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="newScale">The new scale factor.</param>
        <summary>Scales the hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control, and tracks the scale factor.</summary>
        <returns>A <see cref="T:System.Windows.Vector" /> which represents the scale factor applied to the hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winforms](~/add/includes/tla2sharptla-winforms-md.md)] controls do not support scaling in the same way as [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] elements. For example, scaling a [!INCLUDE[TLA2#tla_winforms](~/add/includes/tla2sharptla-winforms-md.md)] control from a factor of 1 to a factor of 0.5 and back to a factor of 1 does not, in general, recover the original size of the control. For more information, see [Layout Considerations for the WindowsFormsHost Element](~/add/includes/ajax-current-ext-md.md).  
  
 Override the ScaleChild method to provide custom scaling behavior for the hosted [!INCLUDE[TLA2#tla_winforms](~/add/includes/tla2sharptla-winforms-md.md)] control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the hosted control's tab index.</summary>
        <value>The tab index for tab navigation and focus.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This dependency property is identified by the <xref:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty> field.  
  
 Use this property to change the order of tab navigation among the controls on a form. A control with a lower tab index will get focus before a control with a higher index.  
  
<a name="xamlAttributeUsage_TabIndex"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ TabIndex="int"/>  
```  
  
<a name="dependencyPropertyInfo_TabIndex"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TabIndexProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TabIndexProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TabIndexProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TabInto">
      <MemberSignature Language="C#" Value="public virtual bool TabInto (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TabInto(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">A <see cref="T:System.Windows.Input.TraversalRequest" /> that specifies the focus behavior.</param>
        <summary>Forwards focus from [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] to the hosted [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] control.</summary>
        <returns>
          <see langword="true" /> if a control was activated; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a <xref:System.Windows.Forms.Integration.WindowsFormsHost> element receives a TAB command from the <xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A> method, the first eligible control in <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> receives focus.  
  
 The first control is specified by the `request` parameter. When `request` is <xref:System.Windows.Input.FocusNavigationDirection>, the behavior is similar to pressing the TAB key. When `request` is <xref:System.Windows.Input.FocusNavigationDirection>, the behavior is similar to pressing SHIFT+TAB.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override IntPtr WndProc (IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int WndProc(native int hwnd, int32 msg, native int wParam, native int lParam, bool handled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wParam" Type="System.IntPtr" />
        <Parameter Name="lParam" Type="System.IntPtr" />
        <Parameter Name="handled" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="hwnd">Window handle of the hosted window.</param>
        <param name="msg">Message to act upon.</param>
        <param name="wParam">Information that may be relevant to handling the message. This is typically used to store small pieces of information, such as flags.</param>
        <param name="lParam">Information that may be relevant to handling the message. This is typically used to reference an object.</param>
        <param name="handled">Whether events resulting should be marked handled.</param>
        <summary>When implemented in a derived class, accesses the window process of the hosted child window.</summary>
        <returns>The window handle of the child window.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>