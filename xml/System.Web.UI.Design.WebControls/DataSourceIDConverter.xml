<Type Name="DataSourceIDConverter" FullName="System.Web.UI.Design.WebControls.DataSourceIDConverter">
  <TypeSignature Language="C#" Value="public class DataSourceIDConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataSourceIDConverter extends System.ComponentModel.TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Creates a user-selectable list of data source names.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataSourceIDConverter class is a <xref:System.ComponentModel.TypeConverter> object that is typically referenced by the <xref:System.ComponentModel.TypeConverterAttribute> attribute.  
  
 The data source names that are returned by the <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter.GetStandardValues%2A> method are of components from the container of the specified context that are valid data sources.  
  
 The <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter.GetStandardValuesExclusive%2A> method gets a value indicating whether the returned data source names are an exclusive list of possible values. The <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter.GetStandardValuesSupported%2A> method gets a value indicating whether the data source names are a standard set of values that can be picked from a list.  
  
 The <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter.ConvertFrom%2A> method converts the specified object to the native type of the converter. The <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter.CanConvertFrom%2A> method gets a value indicating whether this DataSourceIDConverter can convert an object in the specified source type to the native type.  
  
 The <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter.IsValidDataSource%2A> method indicates whether the specified component implements the <xref:System.Web.UI.IDataSource> interface.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSourceIDConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.DataSourceIDConverter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The .NET Framework internally constructs a new instance of the <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter> class when the class is referenced by a <xref:System.ComponentModel.TypeConverterAttribute> attribute.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An object implementing the <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about a context to a type converter so that the type converter can perform a conversion.</param>
        <param name="sourceType">The &lt;xref:System.Type&gt; of the object for which conversion is being requested.</param>
        <summary>Gets a value indicating whether this converter can convert an object in the specified source type to the native type of the converter.</summary>
        <returns>
          <see langword="true" /> if <paramref name="sourceType" /> is a string; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter.ConvertFrom%2A> method can only convert from a string, so the CanConvertFrom only returns `true` when `sourcetype` is a string.  
  
 The CanConvertFrom does not use the `context` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">An object implementing the <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about a context to a type converter so that the type converter can perform a conversion.</param>
        <param name="culture">A &lt;xref:System.Globalization.CultureInfo&gt; object that specifies the culture of the `value` parameter.</param>
        <param name="value">The object to convert.</param>
        <summary>Converts the specified object to the native type of the converter.</summary>
        <returns>The <paramref name="value" /> parameter is returned as a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `value` parameter has a type of string, it is returned as a string. If `value` is `null`, an empty string ("") is returned. Otherwise, a <xref:System.NotSupportedException> is thrown.  
  
 The ConvertFrom method does not use the `context` or `culture` parameter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="value" /> is other than a string or <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStandardValues">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.TypeConverter/StandardValuesCollection GetStandardValues(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter+StandardValuesCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">An object implementing the <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about a context to a type converter so that the type converter can perform a conversion.</param>
        <summary>Returns a list of the available data source names.</summary>
        <returns>A &lt;xref:System.ComponentModel.TypeConverter.StandardValuesCollection&gt; containing the names of the controls that implement the <see cref="T:System.Web.UI.IDataSource" /> interface and are available for use in the given context.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetStandardValues method creates a list of the names of the components that are valid data sources in the container of the object that is specified by the `context` parameter. It then converts that list to a <xref:System.ComponentModel.TypeConverter.StandardValuesCollection> object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesExclusive">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesExclusive (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesExclusive(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">An object implementing the <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about a context to a type converter so that the type converter can perform a conversion.</param>
        <summary>Gets a value indicating whether the returned data source names are an exclusive list of possible values.</summary>
        <returns>Always <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you derive a class from the <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter> class and override the <xref:System.Web.UI.Design.WebControls.DataSourceIDConverter.GetStandardValues%2A> method to return an exclusive list of data source names, also override the GetStandardValuesExclusive method to return `true` when the data source name list is exclusive.  
  
 The `context` parameter is not used by the GetStandardValuesExclusive.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesSupported">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesSupported (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesSupported(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">An object implementing the <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about a context to a type converter so that the type converter can perform a conversion.</param>
        <summary>Gets a value indicating whether this object returns a standard set of data source names that can be picked from a list.</summary>
        <returns>Always <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `context` parameter is not used by the GetStandardValuesSupported method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsValidDataSource">
      <MemberSignature Language="C#" Value="protected virtual bool IsValidDataSource (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValidDataSource(class System.ComponentModel.IComponent component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">An object that implements the <see cref="T:System.ComponentModel.IComponent" /> interface.</param>
        <summary>Gets a value that indicates whether the specified component is a valid data source.</summary>
        <returns>
          <see langword="true" /> if <paramref name="component" /> is a valid data source; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsValidDataSource method considers the `component` parameter to be a valid data source if it implements the <xref:System.Web.UI.IDataSource> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>