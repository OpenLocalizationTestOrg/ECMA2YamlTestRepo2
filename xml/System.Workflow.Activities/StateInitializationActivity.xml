<Type Name="StateInitializationActivity" FullName="System.Workflow.Activities.StateInitializationActivity">
  <TypeSignature Language="C#" Value="public sealed class StateInitializationActivity : System.Workflow.Activities.SequenceActivity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StateInitializationActivity extends System.Workflow.Activities.SequenceActivity" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Activities.SequenceActivity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer(typeof(System.Workflow.Activities.StateInitializationDesigner), typeof(System.ComponentModel.Design.IDesigner))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.StateInitializationActivity), "Resources.StateInitializationActivity.png")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.StateInitializationValidator))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Acts as a container to a group of activities that is executed when the <see cref="T:System.Workflow.Activities.StateActivity" /> starts running. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  
  
 The StateInitializationActivity acts as a <xref:System.Workflow.Activities.SequenceActivity> to all activities it contains.  
  
 <xref:System.Workflow.Activities.SetStateActivity> classes may be included in the StateInitializationActivity.  
  
 If a StateInitializationActivity exists in a <xref:System.Workflow.Activities.StateActivity>, the StateInitializationActivity is the first activity that gets executed when the <xref:System.Workflow.Activities.StateActivity> starts executing. In some ways the StateInitializationActivity is like an `OnEnterState` handler.  
  
 The StateInitializationActivity is not a mandatory activity in the <xref:System.Workflow.Activities.StateActivity>.  
  
 The StateInitializationActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, which means the StateInitializationActivity can contain other activities. The StateInitializationActivity cannot contain any activity that implements the <xref:System.Workflow.Activities.IEventActivity> interface, which includes all <xref:System.Workflow.Activities.HandleExternalEventActivity> activities and the <xref:System.Workflow.Activities.DelayActivity> activity.  
  
 A StateInitializationActivity is executed in the <xref:System.Workflow.Activities.StateActivity>, a non-blocking manner that makes the <xref:System.Workflow.Activities.StateActivity> ready to receive events. The StateInitializationActivity can contain a <xref:System.Workflow.Activities.SetStateActivity> activity, so that it can model a state machine where transitions occur from state to state without receiving any event. In that sense the state machine behaves like a sequential workflow.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StateInitializationActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateInitializationActivity" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to create a new instance of a <xref:System.Workflow.Activities.StateInitializationActivity> object. This example is from the State Initialization SDK sample. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][State Initialization Sample](http://msdn.microsoft.com/en-us/9053202f-2567-4428-a4a2-85423963646b).  
  
 [!code-cs[wf_samples#197](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#197)]
 [!code-vb[wf_samples#197](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#197)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StateInitializationActivity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The user-defined name of the activity.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateInitializationActivity" /> class using the name of the activity.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>