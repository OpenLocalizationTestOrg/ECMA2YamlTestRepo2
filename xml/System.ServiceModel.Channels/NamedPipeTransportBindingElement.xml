<Type Name="NamedPipeTransportBindingElement" FullName="System.ServiceModel.Channels.NamedPipeTransportBindingElement">
  <TypeSignature Language="C#" Value="public class NamedPipeTransportBindingElement : System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NamedPipeTransportBindingElement extends System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the binding element for the named pipe transport.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This transport uses URIs of the form "`net.pipe`://`hostname`/`path`". Other URI components are optional.  
  
 The NamedPipeTransportBindingElement class is the starting point for creating a custom binding that implements the named pipes transport protocol. This transport is used for on-machine [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]-to-[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] communication.  
  
 The [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service model uses this class to create factory objects that implement the <xref:System.ServiceModel.Channels.IChannelFactory> and <xref:System.ServiceModel.Channels.IChannelListener> interfaces. These factory objects then create and accept the channels that transmit SOAP messages using the named pipes protocol.  
  
 You configure the factories that this class creates by setting its properties, such as: <xref:System.ServiceModel.Channels.NamedPipeTransportBindingElement.ConnectionPoolSettings%2A>.  
  
 You can also set properties on the base class, <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement>, such as: <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxBufferSize%2A>, <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.TransferMode%2A>, and <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.ConnectionBufferSize%2A>. For a complete list of properties, see <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement>.  
  
 Finally, you can set properties on the base class of <xref:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement>, which is <xref:System.ServiceModel.Channels.TransportBindingElement>, such as <xref:System.ServiceModel.Channels.TransportBindingElement.MaxBufferPoolSize%2A>. For a complete list of properties, see <xref:System.ServiceModel.Channels.TransportBindingElement>.  
  
   
  
## Examples  
 This example shows how to use this class:  
  
 [!code-vb[S_UENamedPipeTransportBindingElement#0](~/add/codesnippet/visualbasic/s_uenamedpipetransportbindingelement.cs/module1.vb#0)]
 [!code-cs[S_UENamedPipeTransportBindingElement#0](~/add/codesnippet/csharp/s_uenamedpipetransportbindingelement.cs/program.cs#0)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedPipeTransportBindingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.NamedPipeTransportBindingElement" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example shows how to use the default constructor:  
  
 [!code-vb[S_UENamedPipeTransportBindingElement#1](~/add/codesnippet/visualbasic/s_uenamedpipetransportbindingelement.cs/module1.vb#1)]
 [!code-cs[S_UENamedPipeTransportBindingElement#1](~/add/codesnippet/csharp/s_uenamedpipetransportbindingelement.cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NamedPipeTransportBindingElement (System.ServiceModel.Channels.NamedPipeTransportBindingElement elementToBeCloned);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.Channels.NamedPipeTransportBindingElement elementToBeCloned) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementToBeCloned" Type="System.ServiceModel.Channels.NamedPipeTransportBindingElement" />
      </Parameters>
      <Docs>
        <param name="elementToBeCloned">An instance of the <see cref="T:System.ServiceModel.Channels.NamedPipeTransportBindingElement" /> class.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.NamedPipeTransportBindingElement" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is a copy constructor used to clone the binding element, and is exposed so that derived classes can implement <xref:System.ServiceModel.Channels.NamedPipeTransportBindingElement.Clone%2A>.  
  
   
  
## Examples  
 This example shows how to initialize a new instance of the class:  
  
 [!code-vb[S_UENamedPipeTransportBindingElement#2](~/add/codesnippet/visualbasic/s_uenamedpipetransportbindingelement.cs/module1.vb#2)]
 [!code-cs[S_UENamedPipeTransportBindingElement#2](~/add/codesnippet/csharp/s_uenamedpipetransportbindingelement.cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BuildChannelFactory&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt; BuildChannelFactory&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelFactory`1&lt;!!TChannel&gt; BuildChannelFactory&lt;TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel">To be added.</typeparam>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelListener&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelListener&lt;TChannel&gt; BuildChannelListener&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelListener`1&lt;!!TChannel&gt; BuildChannelListener&lt;class (class System.ServiceModel.Channels.IChannel) TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelListener&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel">To be added.</typeparam>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElement Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElement Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a copy of the current binding element.</summary>
        <returns>Returns a copy of the current binding element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example shows how to create a copy of the current binding element:  
  
 [!code-vb[S_UENamedPipeTransportBindingElement#5](~/add/codesnippet/visualbasic/s_uenamedpipetransportbindingelement.cs/module1.vb#5)]
 [!code-cs[S_UENamedPipeTransportBindingElement#5](~/add/codesnippet/csharp/s_uenamedpipetransportbindingelement.cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConnectionPoolSettings">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.NamedPipeConnectionPoolSettings ConnectionPoolSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.NamedPipeConnectionPoolSettings ConnectionPoolSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.NamedPipeConnectionPoolSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of connection pool settings.</summary>
        <value>A <see cref="T:System.ServiceModel.Channels.NamedPipeConnectionPoolSettings" /> object that contains various properties related to connection pooling.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example shows how to get a collection of connection pool settings:  
  
 [!code-vb[S_UENamedPipeTransportBindingElement#3](~/add/codesnippet/visualbasic/s_uenamedpipetransportbindingelement.cs/module1.vb#3)]
 [!code-cs[S_UENamedPipeTransportBindingElement#3](~/add/codesnippet/csharp/s_uenamedpipetransportbindingelement.cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T GetProperty&lt;T&gt; (System.ServiceModel.Channels.BindingContext context) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T GetProperty&lt;class T&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PipeSettings">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.NamedPipeSettings PipeSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.NamedPipeSettings PipeSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.NamedPipeSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the pipe settings for the named pipe transport binding element.</summary>
        <value>The pipe settings for the named pipe transport binding element.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public override string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the URI scheme for the transport.</summary>
        <value>Returns the URI scheme for the transport, which is "net.pipe".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is provided to enable binding validation against base addresses.  
  
   
  
## Examples  
 This example shows how to get the URI scheme for the transport:  
  
 [!code-vb[S_UENamedPipeTransportBindingElement#4](~/add/codesnippet/visualbasic/s_uenamedpipetransportbindingelement.cs/module1.vb#4)]
 [!code-cs[S_UENamedPipeTransportBindingElement#4](~/add/codesnippet/csharp/s_uenamedpipetransportbindingelement.cs/program.cs#4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>