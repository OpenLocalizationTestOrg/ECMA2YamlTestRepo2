<Type Name="StreamUpgradeInitiator" FullName="System.ServiceModel.Channels.StreamUpgradeInitiator">
  <TypeSignature Language="C#" Value="public abstract class StreamUpgradeInitiator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit StreamUpgradeInitiator extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To implement a custom upgrade initiator, inherit from this <see langword="abstract" /> base class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An example of a stream upgrade is to build a compression stream directly on top of the transport stream. This class is used with <xref:System.ServiceModel.Channels.StreamUpgradeAcceptor> and <xref:System.ServiceModel.Channels.StreamUpgradeProvider> to implement a custom stream upgrade.  
  
 For a detailed description of the upgrade process, see <xref:System.ServiceModel.Channels.StreamUpgradeProvider>.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StreamUpgradeInitiator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.StreamUpgradeInitiator" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginInitiateUpgrade">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginInitiateUpgrade (System.IO.Stream stream, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInitiateUpgrade(class System.IO.Stream stream, class System.AsyncCallback callback, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">The stream to be upgraded.</param>
        <param name="callback">The method to call when the &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A&gt; has completed.</param>
        <param name="state">State information about the status of the asynchronous call.</param>
        <summary>This <see langword="abstract" /> method can be implemented to do asynchronous processing that initiates an upgrade.</summary>
        <returns>Returns an &lt;xref:System.IAsyncResult&gt; to be passed into the &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade%2A&gt; method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method calls <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A> and returns.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndInitiateUpgrade">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream EndInitiateUpgrade (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream EndInitiateUpgrade(class System.IAsyncResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The <see langword="IAsyncResult" /> returned from the &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade%2A&gt; method.</param>
        <summary>This method is the asynchronous callback method that is called after &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade%2A&gt; has completed.</summary>
        <returns>Returns the upgraded stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about using this method, see the remarks in <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNextUpgrade">
      <MemberSignature Language="C#" Value="public abstract string GetNextUpgrade ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetNextUpgrade() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the content type of the next upgrade to be performed.</summary>
        <returns>Returns the content type of the next upgrade.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns a set of upgrade content types supported by the upgrade provider in the order in which they are expected. Upgrade providers that support a single upgrade return only a single value. Upgrade providers that support multiple upgrades return the values in order (for example, compression content type followed by the security content type).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InitiateUpgrade">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream InitiateUpgrade (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream InitiateUpgrade(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">The stream to be upgraded.</param>
        <summary>Initiates the upgrade of the stream by requesting the other end of its connection to upgrade the channel transport layer.</summary>
        <returns>Returns the upgraded stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be called multiple times for each upgrade supported by the upgrade provider. For example, an upgrade provider that supports compression and security would call this method twice: first to upgrade the default transport streaming for compression, and second to upgrade the security. Subsequent calls to this method should pass in the upgrade stream from the previous call.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>