<Type Name="MemberChangeConflict" FullName="System.Data.Linq.MemberChangeConflict">
  <TypeSignature Language="C#" Value="public sealed class MemberChangeConflict" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemberChangeConflict extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a situation in which an attempted update fails because member values have been updated since the client last read them.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following example shows how to retrieve information about members in conflict.  
  
   
  
## Examples  
 [!code-cs[System.Data.Linq.MemberChangeConflict#1](~/add/codesnippet/csharp/memconflict/program.cs#1)]
 [!code-vb[System.Data.Linq.MemberChangeConflict#1](~/add/codesnippet/visualbasic/memconflict/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CurrentValue">
      <MemberSignature Language="C#" Value="public object CurrentValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current value of the member in conflict.</summary>
        <value>The object in conflict.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DatabaseValue">
      <MemberSignature Language="C#" Value="public object DatabaseValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DatabaseValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the database value of the member in conflict.</summary>
        <value>The value of the object in conflict.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsModified">
      <MemberSignature Language="C#" Value="public bool IsModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the member data has been changed since the last database read or refresh.</summary>
        <value>
          <see langword="True" /> if the member data has been changed.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the property to merge new values without overwriting pending updates.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsResolved">
      <MemberSignature Language="C#" Value="public bool IsResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the conflict has been resolved.</summary>
        <value>
          <see langword="True" /> if the conflict has been resolved.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is read-only and is automatically updated as conflicts are resolved.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets metadata information about the member in conflict.</summary>
        <value>Information about the member in conflict.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OriginalValue">
      <MemberSignature Language="C#" Value="public object OriginalValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the original value of the member in conflict.</summary>
        <value>The original value of the member in conflict.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public void Resolve (System.Data.Linq.RefreshMode refreshMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resolve(valuetype System.Data.Linq.RefreshMode refreshMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Linq.RefreshMode" />
      </Parameters>
      <Docs>
        <param name="refreshMode">See <see cref="T:System.Data.Linq.RefreshMode" />.</param>
        <summary>Uses a <see cref="T:System.Data.Linq.RefreshMode" /> parameter to automatically specify the value to set as the current value for the member in conflict.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following examples show what results are produced by using the various values for <xref:System.Data.Linq.RefreshMode>.  
  
   
  
## Examples  
 The following example overwrites current values with values from the database.  
  
 [!code-cs[System.Data.Linq.RefreshMode#1](~/add/codesnippet/csharp/refreshmode/program.cs#1)]
 [!code-vb[System.Data.Linq.RefreshMode#1](~/add/codesnippet/visualbasic/refreshmode/module1.vb#1)]  
  
 The following example shows how to swap the original value with the values retrieved from the database. No current value is modified.  
  
 [!code-cs[System.Data.Linq.RefreshMode#2](~/add/codesnippet/csharp/refreshmode/program.cs#2)]
 [!code-vb[System.Data.Linq.RefreshMode#2](~/add/codesnippet/visualbasic/refreshmode/module1.vb#2)]  
  
 The following example keeps the current values that have been changed, but updates the other values with database values.  
  
 [!code-cs[System.Data.Linq.RefreshMode#3](~/add/codesnippet/csharp/refreshmode/program.cs#3)]
 [!code-vb[System.Data.Linq.RefreshMode#3](~/add/codesnippet/visualbasic/refreshmode/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public void Resolve (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resolve(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The value to set as the current value.</param>
        <summary>Specifies the value to set as the current value for the member in conflict.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value set here is the value to be used in a subsequent <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>