<Type Name="SerializationInfoEnumerator" FullName="System.Runtime.Serialization.SerializationInfoEnumerator">
  <TypeSignature Language="C#" Value="public sealed class SerializationInfoEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SerializationInfoEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a formatter-friendly mechanism for parsing the data in <see cref="T:System.Runtime.Serialization.SerializationInfo" />. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The current class is a standard enumerator that parses over the values stored in <xref:System.Runtime.Serialization.SerializationInfo>. Instead of recording the values, the SerializationInfoEnumerator keeps pointers to the member variables of the <xref:System.Runtime.Serialization.SerializationInfo> that created it.  
  
 This class follows the <xref:System.Collections.IEnumerator> mechanism.  
  
   
  
## Examples  
 The following code example shows how to use the <xref:System.Runtime.Serialization.FormatterServices> class in order to properly serialize or deserialize an object where the base class does not implement <xref:System.Runtime.Serialization.ISerializable> but the derived class does.  
  
 [!code-cs[FormatterServices#1](~/add/codesnippet/csharp/t-system.runtime.seriali_8_1.cs)]
 [!code-cpp[FormatterServices#1](~/add/codesnippet/cpp/t-system.runtime.seriali_8_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.SerializationEntry Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Serialization.SerializationEntry Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.SerializationEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the item currently being examined.</summary>
        <value>The item currently being examined.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The enumerator has not started enumerating items or has reached the end of the enumeration.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the enumerator to the next item.</summary>
        <returns>
          <see langword="true" /> if a new element is found; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To initialize the enumerator, call MoveNext and go through each item until you reach the last element.  
  
   
  
## Examples  
 The following code example demonstrates calling the MoveNext method. This code example is part of a larger example provided for the <xref:System.Runtime.Serialization.SerializationInfo> class.  
  
 [!code-cs[FormatterServices#3](~/add/codesnippet/csharp/m-system.runtime.seriali_0_1.cs)]
 [!code-cpp[FormatterServices#3](~/add/codesnippet/cpp/m-system.runtime.seriali_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name for the item currently being examined.</summary>
        <value>The item name.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the Name property. This code example is part of a larger example provided for the <xref:System.Runtime.Serialization.SerializationInfo> class.  
  
 [!code-cs[FormatterServices#3](~/add/codesnippet/csharp/p-system.runtime.seriali_3_1.cs)]
 [!code-cpp[FormatterServices#3](~/add/codesnippet/cpp/p-system.runtime.seriali_3_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The enumerator has not started enumerating items or has reached the end of the enumeration.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ObjectType">
      <MemberSignature Language="C#" Value="public Type ObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the item currently being examined.</summary>
        <value>The type of the item currently being examined.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the ObjectType property. This code example is part of a larger example provided for the <xref:System.Runtime.Serialization.SerializationInfo> class.  
  
 [!code-cs[FormatterServices#3](~/add/codesnippet/csharp/p-system.runtime.seriali_5_1.cs)]
 [!code-cpp[FormatterServices#3](~/add/codesnippet/cpp/p-system.runtime.seriali_5_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The enumerator has not started enumerating items or has reached the end of the enumeration.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the enumerator to the first item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After calling this method, the <xref:System.Runtime.Serialization.SerializationInfoEnumerator.Current%2A> property will contain the first item in the current set of elements.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current item in the collection.</summary>
        <value>A <see cref="T:System.Runtime.Serialization.SerializationEntry" /> that contains the current serialization data.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The enumeration has not started or has already ended.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the item currently being examined.</summary>
        <value>The value of the item currently being examined.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the Value property. This code example is part of a larger example provided for the <xref:System.Runtime.Serialization.SerializationInfo> class.  
  
 [!code-cs[FormatterServices#3](~/add/codesnippet/csharp/p-system.runtime.seriali_4_1.cs)]
 [!code-cpp[FormatterServices#3](~/add/codesnippet/cpp/p-system.runtime.seriali_4_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The enumerator has not started enumerating items or has reached the end of the enumeration.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>