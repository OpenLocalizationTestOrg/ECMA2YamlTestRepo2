<Type Name="SpatialEdmFunctions" FullName="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
  <TypeSignature Language="C#" Value="public static class SpatialEdmFunctions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SpatialEdmFunctions extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides an API to construct <see cref="T:System.Data.Common.CommandTrees.DbExpression" />s that invoke spatial realted canonical EDM functions, and, where appropriate, allows that API to be accessed as extension methods on the expression type itself.</summary>
    <remarks>To be added.</remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Area">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Area (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Area(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial surface value for which the area should be calculated.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Area' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.</summary>
        <returns>A new DbFunctionExpression that returns either the area of <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a surface.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AsBinary (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AsBinary(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial value from which the well known binary representation should be produced.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsBinary' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Binary.</summary>
        <returns>A new DbFunctionExpression that returns the well known binary representation of <paramref name="spatialValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsGml">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AsGml (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AsGml(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial value from which the Geography Markup Language (GML) representation should be produced.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsGml' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.</summary>
        <returns>A new DbFunctionExpression that returns the Geography Markup Language (GML) representation of <paramref name="spatialValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AsText (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AsText(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial value from which the well known text representation should be produced.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsText' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.</summary>
        <returns>A new DbFunctionExpression that returns the well known text representation of <paramref name="spatialValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Centroid">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Centroid (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Centroid(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">An expression that specifies the geometry surface value from which the centroid should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Centroid' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns either the centroid point of <paramref name="geometryValue" /> (which may not be on the surface itself) or <see langword="null" /> if <paramref name="geometryValue" /> is not a surface.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CoordinateSystemId">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression CoordinateSystemId (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression CoordinateSystemId(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the value from which the coordinate system id (SRID) should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CoordinateSystemId' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.</summary>
        <returns>A new DbFunctionExpression that returns the integer SRID value from <paramref name="spatialValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Distance">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Distance (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Distance(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue1">An expression that specifies the first spatial value.</param>
        <param name="spatialValue2">An expression that specifies the spatial value from which the distance from `spatialValue1` should be measured.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Distance' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type.  The result type of <paramref name="spatialValue1" /> must match the result type of <paramref name="spatialValue2" />. The result type of the expression is Edm.Double.</summary>
        <returns>A new DbFunctionExpression that returns the distance between the closest points in <paramref name="spatialValue1" /> and <paramref name="spatialValue1" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Elevation">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Elevation (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Elevation(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial point value from which the elevation (Z co-ordinate) value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Elevation' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.</summary>
        <returns>A new DbFunctionExpression that returns either the elevation value of <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a point.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndPoint">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression EndPoint (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression EndPoint(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial curve value from which the end point should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'EndPoint' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is the same as that of <paramref name="spatialValue" />.</summary>
        <returns>A new DbFunctionExpression that returns either the end point of <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a curve.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExteriorRing">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression ExteriorRing (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression ExteriorRing(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">The geometry value.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ExteriorRing' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns either the exterior ring of the polygon <paramref name="geometryValue" /> or <see langword="null" /> if <paramref name="geometryValue" /> is not a polygon.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyCollectionFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyCollectionFromBinary (System.Data.Common.CommandTrees.DbExpression geographyCollectionWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyCollectionFromBinary(class System.Data.Common.CommandTrees.DbExpression geographyCollectionWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geographyCollectionWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geographyCollectionWellKnownBinaryValue">An expression that provides the well known binary representation of the geography collection value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography collection value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyCollectionFromBinary' function with the specified arguments.  <paramref name="geographyCollectionWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography collection value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geographyCollectionWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geographyCollectionWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyCollectionFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyCollectionFromText (System.Data.Common.CommandTrees.DbExpression geographyCollectionWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyCollectionFromText(class System.Data.Common.CommandTrees.DbExpression geographyCollectionWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geographyCollectionWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geographyCollectionWellKnownText">An expression that provides the well known text representation of the geography collection value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography collection value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyCollectionFromText' function with the specified arguments.  <paramref name="geographyCollectionWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography collection value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geographyCollectionWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geographyCollectionWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromBinary (System.Data.Common.CommandTrees.DbExpression wellKnownBinaryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromBinary(class System.Data.Common.CommandTrees.DbExpression wellKnownBinaryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geography value.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromBinary' function with the specified argument, which must have a binary result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography value based on the specified binary value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wellKnownBinaryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wellKnownBinaryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromBinary (System.Data.Common.CommandTrees.DbExpression wellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromBinary(class System.Data.Common.CommandTrees.DbExpression wellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geography value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromBinary' function with the specified arguments.  <paramref name="wellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyFromGml">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromGml (System.Data.Common.CommandTrees.DbExpression geographyMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromGml(class System.Data.Common.CommandTrees.DbExpression geographyMarkup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geographyMarkup" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geographyMarkup">An expression that provides the Geography Markup Language (GML) representation of the geography value.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromGml' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography value based on the specified value with the default coordinate system id (SRID) of the underlying provider.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geographyMarkup" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geographyMarkup" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyFromGml">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromGml (System.Data.Common.CommandTrees.DbExpression geographyMarkup, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromGml(class System.Data.Common.CommandTrees.DbExpression geographyMarkup, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geographyMarkup" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geographyMarkup">An expression that provides the Geography Markup Language (GML) representation of the geography value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromGml' function with the specified arguments.  <paramref name="geographyMarkup" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geographyMarkup" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geographyMarkup" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromText (System.Data.Common.CommandTrees.DbExpression wellKnownText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromText(class System.Data.Common.CommandTrees.DbExpression wellKnownText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="wellKnownText">An expression that provides the well known text representation of the geography value.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromText' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geography. Its value has the default coordinate system id (SRID) of the underlying provider.</summary>
        <returns>A new DbFunctionExpression that returns a new geography value based on the specified value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wellKnownText" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wellKnownText" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromText (System.Data.Common.CommandTrees.DbExpression wellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyFromText(class System.Data.Common.CommandTrees.DbExpression wellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="wellKnownText">An expression that provides the well known text representation of the geography value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromText' function with the specified arguments.  <paramref name="wellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyLineFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyLineFromBinary (System.Data.Common.CommandTrees.DbExpression lineWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyLineFromBinary(class System.Data.Common.CommandTrees.DbExpression lineWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="lineWellKnownBinaryValue">An expression that provides the well known binary representation of the geography line value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography line value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyLineFromBinary' function with the specified arguments.  <paramref name="lineWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography line value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lineWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="lineWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyLineFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyLineFromText (System.Data.Common.CommandTrees.DbExpression lineWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyLineFromText(class System.Data.Common.CommandTrees.DbExpression lineWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="lineWellKnownText">An expression that provides the well known text representation of the geography line value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography line value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyLineFromText' function with the specified arguments.  <paramref name="lineWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography line value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lineWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="lineWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyMultiLineFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiLineFromBinary (System.Data.Common.CommandTrees.DbExpression multiLineWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiLineFromBinary(class System.Data.Common.CommandTrees.DbExpression multiLineWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiLineWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiLineWellKnownBinaryValue">An expression that provides the well known binary representation of the geography multi-line value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-line value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiLineFromBinary' function with the specified arguments.  <paramref name="multiLineWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography multi-line value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiLineWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiLineWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyMultiLineFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiLineFromText (System.Data.Common.CommandTrees.DbExpression multiLineWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiLineFromText(class System.Data.Common.CommandTrees.DbExpression multiLineWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiLineWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiLineWellKnownText">An expression that provides the well known text representation of the geography multi-line value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-line value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiLineFromText' function with the specified arguments.  <paramref name="multiLineWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography multi-line value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiLineWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiLineWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyMultiPointFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiPointFromBinary (System.Data.Common.CommandTrees.DbExpression multiPointWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiPointFromBinary(class System.Data.Common.CommandTrees.DbExpression multiPointWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiPointWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiPointWellKnownBinaryValue">An expression that provides the well known binary representation of the geography multi-point value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-point value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPointFromBinary' function with the specified arguments.  <paramref name="multiPointWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography multi-point value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiPointWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiPointWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyMultiPointFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiPointFromText (System.Data.Common.CommandTrees.DbExpression multiPointWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiPointFromText(class System.Data.Common.CommandTrees.DbExpression multiPointWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiPointWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiPointWellKnownText">An expression that provides the well known text representation of the geography multi-point value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-point value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPointFromText' function with the specified arguments.  <paramref name="multiPointWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography multi-point value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiPointWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiPointWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyMultiPolygonFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiPolygonFromBinary (System.Data.Common.CommandTrees.DbExpression multiPolygonWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiPolygonFromBinary(class System.Data.Common.CommandTrees.DbExpression multiPolygonWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiPolygonWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiPolygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geography multi-polygon value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-polygon value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPolygonFromBinary' function with the specified arguments.  <paramref name="multiPolygonWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography multi-polygon value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiPolygonWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiPolygonWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyMultiPolygonFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiPolygonFromText (System.Data.Common.CommandTrees.DbExpression multiPolygonWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyMultiPolygonFromText(class System.Data.Common.CommandTrees.DbExpression multiPolygonWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiPolygonWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiPolygonWellKnownText">An expression that provides the well known text representation of the geography multi-polygon value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-polygon value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPolygonFromText' function with the specified arguments.  <paramref name="multiPolygonWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography multi-polygon value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiPolygonWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiPolygonWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyPointFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyPointFromBinary (System.Data.Common.CommandTrees.DbExpression pointWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyPointFromBinary(class System.Data.Common.CommandTrees.DbExpression pointWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="pointWellKnownBinaryValue">An expression that provides the well known binary representation of the geography point value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography point value's coordinate systempointWellKnownBinaryValue.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPointFromBinary' function with the specified arguments.  <paramref name="pointWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography point value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pointWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="pointWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyPointFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyPointFromText (System.Data.Common.CommandTrees.DbExpression pointWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyPointFromText(class System.Data.Common.CommandTrees.DbExpression pointWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="pointWellKnownText">An expression that provides the well-known text representation of the geography point value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography point value's coordinate systempointWellKnownTextValue.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPointFromText' function with the specified arguments.</summary>
        <returns>The canonical 'GeographyPointFromText' function.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyPolygonFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyPolygonFromBinary (System.Data.Common.CommandTrees.DbExpression polygonWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyPolygonFromBinary(class System.Data.Common.CommandTrees.DbExpression polygonWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="polygonWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="polygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geography polygon value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography polygon value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPolygonFromBinary' function with the specified arguments.  <paramref name="polygonWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography polygon value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="polygonWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="polygonWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeographyPolygonFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeographyPolygonFromText (System.Data.Common.CommandTrees.DbExpression polygonWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeographyPolygonFromText(class System.Data.Common.CommandTrees.DbExpression polygonWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="polygonWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="polygonWellKnownText">An expression that provides the well known text representation of the geography polygon value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography polygon value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPolygonFromText' function with the specified arguments.  <paramref name="polygonWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geography.</summary>
        <returns>A new DbFunctionExpression that returns a new geography polygon value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="polygonWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="polygonWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryCollectionFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryCollectionFromBinary (System.Data.Common.CommandTrees.DbExpression geometryCollectionWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryCollectionFromBinary(class System.Data.Common.CommandTrees.DbExpression geometryCollectionWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryCollectionWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryCollectionWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry collection value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry collection value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryCollectionFromBinary' function with the specified arguments.  <paramref name="geometryCollectionWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry collection value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryCollectionWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryCollectionWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryCollectionFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryCollectionFromText (System.Data.Common.CommandTrees.DbExpression geometryCollectionWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryCollectionFromText(class System.Data.Common.CommandTrees.DbExpression geometryCollectionWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryCollectionWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryCollectionWellKnownText">An expression that provides the well known text representation of the geometry collection value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry collection value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryCollectionFromText' function with the specified arguments.  <paramref name="geometryCollectionWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry collection value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryCollectionWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryCollectionWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromBinary (System.Data.Common.CommandTrees.DbExpression wellKnownBinaryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromBinary(class System.Data.Common.CommandTrees.DbExpression wellKnownBinaryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geometry value.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromBinary' function with the specified argument, which must have a binary result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry value based on the specified binary value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wellKnownBinaryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wellKnownBinaryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromBinary (System.Data.Common.CommandTrees.DbExpression wellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromBinary(class System.Data.Common.CommandTrees.DbExpression wellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geometry value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromBinary' function with the specified arguments.  <paramref name="wellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryFromGml">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromGml (System.Data.Common.CommandTrees.DbExpression geometryMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromGml(class System.Data.Common.CommandTrees.DbExpression geometryMarkup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryMarkup" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryMarkup">An expression that provides the Geography Markup Language (GML) representation of the geometry value.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromGml' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry value based on the specified value with the default coordinate system id (SRID) of the underlying provider.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryMarkup" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryMarkup" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryFromGml">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromGml (System.Data.Common.CommandTrees.DbExpression geometryMarkup, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromGml(class System.Data.Common.CommandTrees.DbExpression geometryMarkup, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryMarkup" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryMarkup">An expression that provides the Geography Markup Language (GML) representation of the geometry value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromGml' function with the specified arguments.  <paramref name="geometryMarkup" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryMarkup" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryMarkup" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromText (System.Data.Common.CommandTrees.DbExpression wellKnownText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromText(class System.Data.Common.CommandTrees.DbExpression wellKnownText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="wellKnownText">An expression that provides the well known text representation of the geometry value.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromText' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geometry. Its value has the default coordinate system id (SRID) of the underlying provider.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry value based on the specified value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wellKnownText" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wellKnownText" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromText (System.Data.Common.CommandTrees.DbExpression wellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryFromText(class System.Data.Common.CommandTrees.DbExpression wellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="wellKnownText">An expression that provides the well known text representation of the geometry value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromText' function with the specified arguments.  <paramref name="wellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryLineFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryLineFromBinary (System.Data.Common.CommandTrees.DbExpression lineWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryLineFromBinary(class System.Data.Common.CommandTrees.DbExpression lineWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="lineWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry line value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry line value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryLineFromBinary' function with the specified arguments.  <paramref name="lineWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry line value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lineWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="lineWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryLineFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryLineFromText (System.Data.Common.CommandTrees.DbExpression lineWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryLineFromText(class System.Data.Common.CommandTrees.DbExpression lineWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="lineWellKnownText">An expression that provides the well known text representation of the geometry line value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry line value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryLineFromText' function with the specified arguments.  <paramref name="lineWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry line value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lineWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="lineWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryMultiLineFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiLineFromBinary (System.Data.Common.CommandTrees.DbExpression multiLineWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiLineFromBinary(class System.Data.Common.CommandTrees.DbExpression multiLineWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiLineWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiLineWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry multi-line value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-line value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiLineFromBinary' function with the specified arguments.  <paramref name="multiLineWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry multi-line value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiLineWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiLineWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryMultiLineFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiLineFromText (System.Data.Common.CommandTrees.DbExpression multiLineWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiLineFromText(class System.Data.Common.CommandTrees.DbExpression multiLineWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiLineWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiLineWellKnownText">An expression that provides the well known text representation of the geometry multi-line value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-line value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiLineFromText' function with the specified arguments.  <paramref name="multiLineWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry multi-line value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiLineWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiLineWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryMultiPointFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiPointFromBinary (System.Data.Common.CommandTrees.DbExpression multiPointWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiPointFromBinary(class System.Data.Common.CommandTrees.DbExpression multiPointWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiPointWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiPointWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry multi-point value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-point value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPointFromBinary' function with the specified arguments.  <paramref name="multiPointWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry multi-point value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiPointWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiPointWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryMultiPointFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiPointFromText (System.Data.Common.CommandTrees.DbExpression multiPointWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiPointFromText(class System.Data.Common.CommandTrees.DbExpression multiPointWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiPointWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiPointWellKnownText">An expression that provides the well known text representation of the geometry multi-point value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-point value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPointFromText' function with the specified arguments.  <paramref name="multiPointWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry multi-point value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiPointWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiPointWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryMultiPolygonFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiPolygonFromBinary (System.Data.Common.CommandTrees.DbExpression multiPolygonWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiPolygonFromBinary(class System.Data.Common.CommandTrees.DbExpression multiPolygonWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiPolygonWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiPolygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry multi-polygon value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-polygon value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPolygonFromBinary' function with the specified arguments.  <paramref name="multiPolygonWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry multi-polygon value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiPolygonWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiPolygonWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryMultiPolygonFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiPolygonFromText (System.Data.Common.CommandTrees.DbExpression multiPolygonWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryMultiPolygonFromText(class System.Data.Common.CommandTrees.DbExpression multiPolygonWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiPolygonWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="multiPolygonWellKnownText">An expression that provides the well known text representation of the geometry multi-polygon value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-polygon value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPolygonFromText' function with the specified arguments.  <paramref name="multiPolygonWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry multi-polygon value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multiPolygonWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="multiPolygonWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryPointFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryPointFromBinary (System.Data.Common.CommandTrees.DbExpression pointWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryPointFromBinary(class System.Data.Common.CommandTrees.DbExpression pointWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="pointWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry point value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry point value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPointFromBinary' function with the specified arguments.  <paramref name="pointWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry point value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pointWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="pointWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryPointFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryPointFromText (System.Data.Common.CommandTrees.DbExpression pointWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryPointFromText(class System.Data.Common.CommandTrees.DbExpression pointWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="pointWellKnownText">An expression that provides the well known text representation of the geometry point value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry point value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPointFromText' function with the specified arguments.  <paramref name="pointWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry point value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pointWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="pointWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryPolygonFromBinary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryPolygonFromBinary (System.Data.Common.CommandTrees.DbExpression polygonWellKnownBinaryValue, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryPolygonFromBinary(class System.Data.Common.CommandTrees.DbExpression polygonWellKnownBinaryValue, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="polygonWellKnownBinaryValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="polygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry polygon value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry polygon value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPolygonFromBinary' function with the specified arguments.  <paramref name="polygonWellKnownBinaryValue" /> must have a binary result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry polygon value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="polygonWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="polygonWellKnownBinaryValue" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GeometryPolygonFromText">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GeometryPolygonFromText (System.Data.Common.CommandTrees.DbExpression polygonWellKnownText, System.Data.Common.CommandTrees.DbExpression coordinateSystemId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GeometryPolygonFromText(class System.Data.Common.CommandTrees.DbExpression polygonWellKnownText, class System.Data.Common.CommandTrees.DbExpression coordinateSystemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="polygonWellKnownText" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="coordinateSystemId" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="polygonWellKnownText">An expression that provides the well known text representation of the geometry polygon value.</param>
        <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry polygon value's coordinate system.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPolygonFromText' function with the specified arguments.  <paramref name="polygonWellKnownText" /> must have a string result type, while <paramref name="coordinateSystemId" /> must have an integer numeric result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a new geometry polygon value based on the specified values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="polygonWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="polygonWellKnownText" /> <paramref name="coordinateSystemId" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InteriorRingAt">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression InteriorRingAt (this System.Data.Common.CommandTrees.DbExpression geometryValue, System.Data.Common.CommandTrees.DbExpression indexValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression InteriorRingAt(class System.Data.Common.CommandTrees.DbExpression geometryValue, class System.Data.Common.CommandTrees.DbExpression indexValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="indexValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryValue">The geometry value.</param>
        <param name="indexValue">An expression that specifies the position of the interior ring to be retrieved from within the polygon.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'InteriorRingAt' function with the specified arguments. The first argument must have an Edm.Geometry result type. The second argument must have an integer numeric result types. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns either the interior ring at position <paramref name="indexValue" /> in <paramref name="geometryValue" /> or <see langword="null" /> if <paramref name="geometryValue" /> is not a polygon.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="indexValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" /> <paramref name="indexValue" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InteriorRingCount">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression InteriorRingCount (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression InteriorRingCount(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">The geometry value.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'InteriorRingCount' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Int32.</summary>
        <returns>A new DbFunctionExpression that returns either the number of interior rings in the polygon <paramref name="geometryValue" /> or <see langword="null" /> if <paramref name="geometryValue" /> is not a polygon.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsClosedSpatial">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsClosedSpatial (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsClosedSpatial(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial curve value from which the IsClosedSpatial value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsClosedSpatial' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns either a Boolean value indicating whether <paramref name="spatialValue" /> is closed, or <see langword="null" /> if <paramref name="spatialValue" /> is not a curve.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEmptySpatial">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsEmptySpatial (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsEmptySpatial(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial value from which the IsEmptySptiaal value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsEmptySpatial' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="spatialValue" /> is empty.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsRing">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsRing (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsRing(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">An expression that specifies the geometry curve value from which the IsRing value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsRing' function with the specified argument, which must have an Edm.Geometry result type. The result type is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns either a Boolean value indicating whether <paramref name="geometryValue" /> is a ring (both closed and simple), or <see langword="null" /> if <paramref name="geometryValue" /> is not a curve.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSimpleGeometry">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsSimpleGeometry (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsSimpleGeometry(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">The geometry value.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsSimpleGeometry' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="geometryValue" /> is a simple geometry.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsValidGeometry">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsValidGeometry (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsValidGeometry(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">An expression that specifies the geometry value which should be tested for spatial validity.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsValidGeometry' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="geometryValue" /> is valid.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Latitude">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Latitude (this System.Data.Common.CommandTrees.DbExpression geographyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Latitude(class System.Data.Common.CommandTrees.DbExpression geographyValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geographyValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geographyValue">An expression that specifies the geography point value from which the Latitude value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Latitude' function with the specified argument, which must have an Edm.Geography result type. The result type of the expression is Edm.Double.</summary>
        <returns>A new DbFunctionExpression that returns either the Latitude value of <paramref name="geographyValue" /> or <see langword="null" /> if <paramref name="geographyValue" /> is not a point.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geographyValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geographyValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Longitude">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Longitude (this System.Data.Common.CommandTrees.DbExpression geographyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Longitude(class System.Data.Common.CommandTrees.DbExpression geographyValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geographyValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geographyValue">An expression that specifies the geography point value from which the Longitude value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Longitude' function with the specified argument, which must have an Edm.Geography result type. The result type of the expression is Edm.Double.</summary>
        <returns>A new DbFunctionExpression that returns either the Longitude value of <paramref name="geographyValue" /> or <see langword="null" /> if <paramref name="geographyValue" /> is not a point.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geographyValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geographyValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Measure (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Measure(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial point value from which the Measure (M) co-ordinate value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Measure' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.</summary>
        <returns>A new DbFunctionExpression that returns either the Measure of <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a point.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PointAt">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression PointAt (this System.Data.Common.CommandTrees.DbExpression spatialValue, System.Data.Common.CommandTrees.DbExpression indexValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression PointAt(class System.Data.Common.CommandTrees.DbExpression spatialValue, class System.Data.Common.CommandTrees.DbExpression indexValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="indexValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial line string value.</param>
        <param name="indexValue">An expression that specifies the position of the point to be retrieved from within the line string.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointAt' function with the specified arguments. The first argument must have an Edm.Geography or Edm.Geometry result type. The second argument must have an integer numeric result type. The result type of the expression is the same as that of <paramref name="spatialValue" />.</summary>
        <returns>A new DbFunctionExpression that returns either the point at position <paramref name="indexValue" /> in <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a line string.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="indexValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" /> <paramref name="indexValue" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PointCount">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression PointCount (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression PointCount(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial line string value from which the number of points should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointCount' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.</summary>
        <returns>A new DbFunctionExpression that returns either the number of points in <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a line string.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PointOnSurface">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression PointOnSurface (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression PointOnSurface(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">An expression that specifies the geometry surface value from which the point should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointOnSurface' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns either a point guaranteed to be on the surface <paramref name="geometryValue" /> or <see langword="null" /> if <paramref name="geometryValue" /> is not a surface.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialBoundary">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialBoundary (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialBoundary(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">An expression that specifies the geometry value from which the SpatialBoundary value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialBoundary' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns the the boundary for <paramref name="geometryValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialBuffer">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialBuffer (this System.Data.Common.CommandTrees.DbExpression spatialValue, System.Data.Common.CommandTrees.DbExpression distance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialBuffer(class System.Data.Common.CommandTrees.DbExpression spatialValue, class System.Data.Common.CommandTrees.DbExpression distance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="distance" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial value.</param>
        <param name="distance">An expression that specifies the buffer distance.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialBuffer' function with the specified arguments, which must have a Edm.Geography or Edm.Geometry and Edm.Double result types. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns a geometry value representing all points less than or equal to <paramref name="distance" /> from <paramref name="spatialValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" /> <paramref name="distance" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" /> <paramref name="distance" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialContains">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialContains (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialContains(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryValue1">An expression that specifies the first geometry value.</param>
        <param name="geometryValue2">An expression that specifies the geometry value that should be compared with `geometryValue1`.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialContains' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="geometryValue1" /> spatially contains <paramref name="geometryValue2" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialConvexHull">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialConvexHull (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialConvexHull(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">An expression that specifies the geometry value from which the convex hull value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialConvexHull' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns the the convex hull for <paramref name="geometryValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialCrosses">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialCrosses (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialCrosses(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryValue1">An expression that specifies the first geometry value.</param>
        <param name="geometryValue2">An expression that specifies the geometry value that should be compared with `geometryValue1`.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialCrosses' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="geometryValue1" /> crosses <paramref name="geometryValue2" /> intersect.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialDifference">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialDifference (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialDifference(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue1">An expression that specifies the first spatial value.</param>
        <param name="spatialValue2">An expression that specifies the spatial value for which the difference with `spatialValue1` should be computed.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDifference' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of <paramref name="spatialValue1" /> must match the result type of <paramref name="spatialValue2" />. The result type of the expression is the same as the type of <paramref name="spatialValue1" /> and <paramref name="spatialValue2" />.</summary>
        <returns>A new DbFunctionExpression that returns the geometry value representing the difference of <paramref name="spatialValue2" /> with <paramref name="spatialValue1" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialDimension">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialDimension (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialDimension(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the value from which the Dimension value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDimension' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.</summary>
        <returns>A new DbFunctionExpression that returns the Dimension value from <paramref name="spatialValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialDisjoint">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialDisjoint (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialDisjoint(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue1">An expression that specifies the first spatial value.</param>
        <param name="spatialValue2">An expression that specifies the spatial value that should be compared with `spatialValue1` for disjointness.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDisjoint' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of <paramref name="spatialValue1" /> must match the result type of <paramref name="spatialValue2" />. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="spatialValue1" /> and <paramref name="spatialValue2" /> are spatially disjoint.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialElementAt">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialElementAt (this System.Data.Common.CommandTrees.DbExpression spatialValue, System.Data.Common.CommandTrees.DbExpression indexValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialElementAt(class System.Data.Common.CommandTrees.DbExpression spatialValue, class System.Data.Common.CommandTrees.DbExpression indexValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="indexValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the geography or geometry collection value.</param>
        <param name="indexValue">An expression that specifies the position of the element to be retrieved from within the geometry or geography collection.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialElementAt' function with the specified arguments. The first argument must have an Edm.Geography or Edm.Geometry result type. The second argument must have an integer numeric result type. The result type of the expression is the same as that of <paramref name="spatialValue" />.</summary>
        <returns>A new DbFunctionExpression that returns either the collection element at position <paramref name="indexValue" /> in <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a collection.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="indexValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" /> <paramref name="indexValue" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialElementCount">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialElementCount (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialElementCount(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the geography or geometry collection value from which the number of elements should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialElementCount' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.</summary>
        <returns>A new DbFunctionExpression that returns either the number of elements in <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a collection.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialEnvelope">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialEnvelope (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialEnvelope(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">An expression that specifies the value from which the Envelope value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialEnvelope' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.</summary>
        <returns>A new DbFunctionExpression that returns the the minimum bounding box for <paramref name="geometryValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialEquals">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialEquals (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialEquals(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue1">An expression that specifies the first spatial value.</param>
        <param name="spatialValue2">An expression that specifies the spatial value that should be compared with `spatialValue1` for equality.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialEquals' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of <paramref name="spatialValue1" /> must match the result type of <paramref name="spatialValue2" />. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="spatialValue1" /> and <paramref name="spatialValue2" /> are equal.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialIntersection">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialIntersection (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialIntersection(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue1">An expression that specifies the first spatial value.</param>
        <param name="spatialValue2">An expression that specifies the spatial value for which the intersection with `spatialValue1` should be computed.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialIntersection' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of <paramref name="spatialValue1" /> must match the result type of <paramref name="spatialValue2" />. The result type of the expression is the same as the type of <paramref name="spatialValue1" /> and <paramref name="spatialValue2" />.</summary>
        <returns>A new DbFunctionExpression that returns the spatial value representing the intersection of <paramref name="spatialValue1" /> and <paramref name="spatialValue2" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialIntersects">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialIntersects (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialIntersects(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue1">An expression that specifies the first spatial value.</param>
        <param name="spatialValue2">An expression that specifies the spatial value that should be compared with `spatialValue1` for intersection.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialIntersects' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of <paramref name="spatialValue1" /> must match the result type of <paramref name="spatialValue2" />. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="spatialValue1" /> and <paramref name="spatialValue2" /> intersect.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialLength">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialLength (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialLength(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial curve value from which the length should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialLength' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.</summary>
        <returns>A new DbFunctionExpression that returns either the length of <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a curve.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialOverlaps">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialOverlaps (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialOverlaps(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryValue1">An expression that specifies the first geometry value.</param>
        <param name="geometryValue2">An expression that specifies the geometry value that should be compared with `geometryValue1`.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialOverlaps' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="geometryValue1" /> spatially overlaps <paramref name="geometryValue2" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialRelate">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialRelate (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2, System.Data.Common.CommandTrees.DbExpression intersectionPatternMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialRelate(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2, class System.Data.Common.CommandTrees.DbExpression intersectionPatternMatrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="intersectionPatternMatrix" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryValue1">An expression that specifies the first geometry value.</param>
        <param name="geometryValue2">An expression that specifies the geometry value that should be compared with `geometryValue1`.</param>
        <param name="intersectionPatternMatrix">An expression that specifies the text representation of the Dimensionally Extended Nine-Intersection Model (DE-9IM) intersection pattern used to compare `geometryValue1` and `geometryValue2`.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialRelate' function with the specified arguments, which must have Edm.Geometry and string result types. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="geometryValue1" /> is spatially related to <paramref name="geometryValue2" /> according to the spatial relationship designated by <paramref name="intersectionPatternMatrix" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /> <paramref name="intersectionPatternMatrix" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /> <paramref name="intersectionPatternMatrix" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialSymmetricDifference">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialSymmetricDifference (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialSymmetricDifference(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue1">An expression that specifies the first spatial value.</param>
        <param name="spatialValue2">An expression that specifies the spatial value for which the symmetric difference with `spatialValue1` should be computed.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialSymmetricDifference' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of <paramref name="spatialValue1" /> must match the result type of <paramref name="spatialValue2" />. The result type of the expression is the same as the type of <paramref name="spatialValue1" /> and <paramref name="spatialValue2" />.</summary>
        <returns>A new DbFunctionExpression that returns the geometry value representing the symmetric difference of <paramref name="spatialValue2" /> with <paramref name="spatialValue1" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialTouches">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialTouches (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialTouches(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryValue1">An expression that specifies the first geometry value.</param>
        <param name="geometryValue2">An expression that specifies the geometry value that should be compared with `geometryValue1`.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialTouches' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="geometryValue1" /> touches <paramref name="geometryValue2" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialTypeName">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialTypeName (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialTypeName(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the value from which the Geometry Type name should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialTypeName' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.</summary>
        <returns>A new DbFunctionExpression that returns the string Geometry Type name from <paramref name="spatialValue" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialUnion">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialUnion (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialUnion(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="spatialValue1">An expression that specifies the first spatial value.</param>
        <param name="spatialValue2">An expression that specifies the spatial value for which the union with `spatialValue1` should be computed.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialUnion' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of <paramref name="spatialValue1" /> must match the result type of <paramref name="spatialValue2" />. The result type of the expression is the same as the type of <paramref name="spatialValue1" /> and <paramref name="spatialValue2" />.</summary>
        <returns>A new DbFunctionExpression that returns the spatial value representing the union of <paramref name="spatialValue1" /> and <paramref name="spatialValue2" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue1" /> <paramref name="spatialValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpatialWithin">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialWithin (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialWithin(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="geometryValue1">An expression that specifies the first geometry value.</param>
        <param name="geometryValue2">An expression that specifies the geometry value that should be compared with `geometryValue1`.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialWithin' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.</summary>
        <returns>A new DbFunctionExpression that returns a Boolean value indicating whether <paramref name="geometryValue1" /> is spatially within <paramref name="geometryValue2" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue1" /> <paramref name="geometryValue2" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StartPoint">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression StartPoint (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression StartPoint(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="spatialValue">An expression that specifies the spatial curve value from which the start point should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StartPoint' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is the same as that of <paramref name="spatialValue" />.</summary>
        <returns>A new DbFunctionExpression that returns either the start point of <paramref name="spatialValue" /> or <see langword="null" /> if <paramref name="spatialValue" /> is not a curve.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="spatialValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="spatialValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="XCoordinate">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression XCoordinate (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression XCoordinate(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">An expression that specifies the geometry point value from which the X co-ordinate value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'XCoordinate' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Double.</summary>
        <returns>A new DbFunctionExpression that returns either the X co-ordinate value of <paramref name="geometryValue" /> or <see langword="null" /> if <paramref name="geometryValue" /> is not a point.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="YCoordinate">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression YCoordinate (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression YCoordinate(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="geometryValue">An expression that specifies the geometry point value from which the Y co-ordinate value should be retrieved.</param>
        <summary>Creates a <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'YCoordinate' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Double.</summary>
        <returns>A new DbFunctionExpression that returns either the Y co-ordinate value of <paramref name="geometryValue" /> or <see langword="null" /> if <paramref name="geometryValue" /> is not a point.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="geometryValue" />
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="geometryValue" />
        </exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>