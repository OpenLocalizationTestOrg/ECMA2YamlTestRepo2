<Type Name="ModuleResolveEventHandler" FullName="System.Reflection.ModuleResolveEventHandler">
  <TypeSignature Language="C#" Value="public delegate System.Reflection.Module ModuleResolveEventHandler(object sender, ResolveEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed ModuleResolveEventHandler extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.ResolveEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Reflection.Module</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">The assembly that was the source of the event.</param>
    <param name="e">The arguments supplied by the object describing the event.</param>
    <summary>Represents the method that will handle the &lt;xref:System.Reflection.Assembly.ModuleResolve&gt; event of an &lt;xref:System.Reflection.Assembly&gt;.</summary>
    <returns>The module that satisfies the request.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means, this event is raised. The event handler for this delegate must locate and return a module that satisfies the request.  
  
   
  
## Examples  
 The following example demonstrates the sequence of execution in which an event handler is called. In this example, Server1 is an external module of the MySample class.  
  
### To compile and run the example  
  
1.  Open a Command Prompt window and navigate to the directory that contains MySample.cs.  
  
2.  Compile Server1 using the following command:  
  
    ```  
    csc /out:subfolder\Server1.netmodule /t:module Server1.cs  
    ```  
  
3.  Compile MySample using the following command:  
  
    ```  
    csc /out:MySample.exe /t:exe /addmodule:subfolder\Server1.netmodule MySample.cs  
    ```  
  
4.  Run MySample.exe.  
  
> [!NOTE]
>  The module file Server1.netmodule must be in a subdirectory named "subfolder" for this example to work properly.  
  
 [!code-cs[System.Reflection.ModuleResolveEventHandler#1](~/add/codesnippet/csharp/t-system.reflection.modu_1.cs)]  
[!code-cs[System.Reflection.ModuleResolveEventHandler#2](~/add/codesnippet/csharp/t-system.reflection.modu_2.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
</Type>