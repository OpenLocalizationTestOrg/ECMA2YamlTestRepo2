<Type Name="ExceptionHandlingClause" FullName="System.Reflection.ExceptionHandlingClause">
  <TypeSignature Language="C#" Value="public class ExceptionHandlingClause" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExceptionHandlingClause extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a clause in a structured exception-handling block.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ExceptionHandlingClause class provides information about the clauses in a `try`…`catch`…`finally` block (`Try`…`Catch`…`Finally` in Visual Basic). To get a list of exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> that represents the method. Use the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain a <xref:System.Reflection.MethodBody> object, and then use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to get the list of clauses.  
  
> [!NOTE]
>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  
  
   
  
## Examples  
 The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of ExceptionHandlingClause objects and display their properties.  
  
 You can use Ildasm.exe to examine the MSIL for the compiled code example, to see how the offsets and lengths are calculated.  
  
> [!NOTE]
>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  
  
 This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  
  
 [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/t-system.reflection.exce_0_1.cpp)]
 [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/t-system.reflection.exce_0_1.vb)]
 [!code-cs[MethodBody#2](~/add/codesnippet/csharp/t-system.reflection.exce_0_1.cs)]  
[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/t-system.reflection.exce_0_2.cpp)]
[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/t-system.reflection.exce_0_2.vb)]
[!code-cs[MethodBody#4](~/add/codesnippet/csharp/t-system.reflection.exce_0_2.cs)]  
[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/t-system.reflection.exce_0_3.cpp)]
[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/t-system.reflection.exce_0_3.vb)]
[!code-cs[MethodBody#5](~/add/codesnippet/csharp/t-system.reflection.exce_0_3.cs)]  
[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/t-system.reflection.exce_0_4.cpp)]
[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/t-system.reflection.exce_0_4.vb)]
[!code-cs[MethodBody#7](~/add/codesnippet/csharp/t-system.reflection.exce_0_4.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandlingClause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Reflection.ExceptionHandlingClause" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is invoked by derived classes during the construction of <xref:System.Reflection.ExceptionHandlingClause> objects.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CatchType">
      <MemberSignature Language="C#" Value="public virtual Type CatchType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CatchType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of exception handled by this clause.</summary>
        <value>A &lt;xref:System.Type&gt; object that represents that type of exception handled by this clause, or <see langword="null" /> if the &lt;xref:System.Reflection.ExceptionHandlingClause.Flags%2A&gt; property is <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> or <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  
  
   
  
## Examples  
 The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  
  
> [!NOTE]
>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  
  
 This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  
  
 [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.exce_1_1.cpp)]
 [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.exce_1_1.vb)]
 [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.exce_1_1.cs)]  
[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.exce_1_2.cpp)]
[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.exce_1_2.vb)]
[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.exce_1_2.cs)]  
[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.exce_1_3.cpp)]
[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.exce_1_3.vb)]
[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.exce_1_3.cs)]  
[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.exce_1_4.cpp)]
[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.exce_1_4.vb)]
[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.exce_1_4.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Invalid use of property for the object's current state.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FilterOffset">
      <MemberSignature Language="C#" Value="public virtual int FilterOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the offset within the method body, in bytes, of the user-supplied filter code.</summary>
        <value>The offset within the method body, in bytes, of the user-supplied filter code. The value of this property has no meaning if the &lt;xref:System.Reflection.ExceptionHandlingClause.Flags%2A&gt; property has any value other than <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A filter clause contains user-suppliedMicrosoft intermediate language (MSIL) that determines whether an exception is handled by this clause. For example, any clause containing the Visual Basic `When` keyword is a <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clause.  
  
> [!NOTE]
>  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Cannot get the offset because the exception handling clause is not a filter.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ExceptionHandlingClauseOptions Flags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.ExceptionHandlingClauseOptions Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.</summary>
        <value>An <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> value that indicates what kind of action this clause performs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  
  
   
  
## Examples  
 The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  
  
> [!NOTE]
>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  
  
 This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  
  
 [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.exce_3_1.cpp)]
 [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.exce_3_1.vb)]
 [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.exce_3_1.cs)]  
[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.exce_3_2.cpp)]
[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.exce_3_2.vb)]
[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.exce_3_2.cs)]  
[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.exce_3_3.cpp)]
[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.exce_3_3.vb)]
[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.exce_3_3.cs)]  
[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.exce_3_4.cpp)]
[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.exce_3_4.vb)]
[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.exce_3_4.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HandlerLength">
      <MemberSignature Language="C#" Value="public virtual int HandlerLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the length, in bytes, of the body of this exception-handling clause.</summary>
        <value>An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  
  
   
  
## Examples  
 The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  
  
> [!NOTE]
>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  
  
 This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  
  
 [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.exce_4_1.cpp)]
 [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.exce_4_1.vb)]
 [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.exce_4_1.cs)]  
[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.exce_4_2.cpp)]
[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.exce_4_2.vb)]
[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.exce_4_2.cs)]  
[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.exce_4_3.cpp)]
[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.exce_4_3.vb)]
[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.exce_4_3.cs)]  
[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.exce_4_4.cpp)]
[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.exce_4_4.vb)]
[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.exce_4_4.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HandlerOffset">
      <MemberSignature Language="C#" Value="public virtual int HandlerOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the offset within the method body, in bytes, of this exception-handling clause.</summary>
        <value>An integer that represents the offset within the method body, in bytes, of this exception-handling clause.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  
  
   
  
## Examples  
 The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  
  
> [!NOTE]
>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  
  
 This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  
  
 [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.exce_0_1.cpp)]
 [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.exce_0_1.vb)]
 [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.exce_0_1.cs)]  
[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.exce_0_2.cpp)]
[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.exce_0_2.vb)]
[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.exce_0_2.cs)]  
[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.exce_0_3.cpp)]
[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.exce_0_3.vb)]
[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.exce_0_3.cs)]  
[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.exce_0_4.cpp)]
[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.exce_0_4.vb)]
[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.exce_0_4.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>A string representation of the exception-handling clause.</summary>
        <returns>A string that lists appropriate property values for the filter clause type.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryLength">
      <MemberSignature Language="C#" Value="public virtual int TryLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The total length, in bytes, of the try block that includes this exception-handling clause.</summary>
        <value>The total length, in bytes, of the try block that includes this exception-handling clause.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An integer that represents the total length, in bytes, of the try block that includes this exception-handling clause.  
  
> [!NOTE]
>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  
  
   
  
## Examples  
 The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  
  
> [!NOTE]
>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  
  
 This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  
  
 [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.exce_2_1.cpp)]
 [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.exce_2_1.vb)]
 [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.exce_2_1.cs)]  
[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.exce_2_2.cpp)]
[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.exce_2_2.vb)]
[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.exce_2_2.cs)]  
[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.exce_2_3.cpp)]
[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.exce_2_3.vb)]
[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.exce_2_3.cs)]  
[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.exce_2_4.cpp)]
[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.exce_2_4.vb)]
[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.exce_2_4.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryOffset">
      <MemberSignature Language="C#" Value="public virtual int TryOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The offset within the method, in bytes, of the try block that includes this exception-handling clause.</summary>
        <value>An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  
  
   
  
## Examples  
 The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  
  
> [!NOTE]
>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  
  
 This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  
  
 [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.exce_5_1.cpp)]
 [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.exce_5_1.vb)]
 [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.exce_5_1.cs)]  
[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.exce_5_2.cpp)]
[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.exce_5_2.vb)]
[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.exce_5_2.cs)]  
[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.exce_5_3.cpp)]
[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.exce_5_3.vb)]
[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.exce_5_3.cs)]  
[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.exce_5_4.cpp)]
[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.exce_5_4.vb)]
[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.exce_5_4.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>