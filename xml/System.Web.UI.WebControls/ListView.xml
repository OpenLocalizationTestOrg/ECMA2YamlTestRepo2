<Type Name="ListView" FullName="System.Web.UI.WebControls.ListView">
  <TypeSignature Language="C#" Value="public class ListView : System.Web.UI.WebControls.DataBoundControl, System.Web.UI.IDataKeysControl, System.Web.UI.INamingContainer, System.Web.UI.WebControls.IDataBoundListControl, System.Web.UI.WebControls.IPageableItemContainer, System.Web.UI.WebControls.IPersistedSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends System.Web.UI.WebControls.DataBoundControl implements class System.Web.UI.IDataKeysControl, class System.Web.UI.INamingContainer, class System.Web.UI.WebControls.IDataBoundControl, class System.Web.UI.WebControls.IDataBoundListControl, class System.Web.UI.WebControls.IPageableItemContainer, class System.Web.UI.WebControls.IPersistedSelector" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.DataBoundControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IDataKeysControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IDataBoundListControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IPageableItemContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IPersistedSelector</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ListViewDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ListView), "ListView.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataKeyProperty("SelectedPersistedDataKey")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Displays the values of a data source by using user-defined templates. The ListView control enables users to select, sort, delete, edit, and insert records.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In this topic:  
  
-   [Introduction](#introduction)  
  
-   [Templates](#templates)  
  
-   [Binding to a Data Source](#binding_to_a_data_source)  
  
-   [Data Operations](#data_operations)  
  
-   [Events](#Events)  
  
-   [Declarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 The ListView control is used to display the values from a data source. It resembles the <xref:System.Web.UI.WebControls.GridView> control, except that it displays data by using user-defined templates instead of row fields. Creating your own templates gives you more flexibility in controlling how the data is displayed.  
  
 A Visual Studio project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=199759).  
  
 The ListView control supports the following features:  
  
-   Support for binding to data source controls such as <xref:System.Web.UI.WebControls.SqlDataSource>, <xref:System.Web.UI.WebControls.LinqDataSource>, and <xref:System.Web.UI.WebControls.ObjectDataSource>.  
  
-   Customizable appearance through user-defined templates and styles.  
  
-   Built-in sorting capabilities.  
  
-   Built-in update and delete capabilities.  
  
-   Built-in insert capabilities.  
  
-   Support for paging capabilities by using a <xref:System.Web.UI.WebControls.DataPager> control.  
  
-   Built-in item selection capabilities.  
  
-   Programmatic access to the ListView object model to dynamically set properties, handle events, and so on.  
  
-   Multiple key fields.  
  
 To learn about other data-bound controls that are available in ASP.NET, see [Data-Bound Web Server Controls](~/add/includes/ajax-current-ext-md.md).  
  
<a name="templates"></a>   
## Templates  
 In order for the ListView control to display content, you must create templates for different parts of the control. The <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> is required. All other templates are optional. The <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> property is not required.  
  
 However, you must create a template for the mode in which the control is configured. For example, a ListView control that supports inserting records must have an <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template defined. The following table lists the templates that you can create for the ListView control.  
  
|Template type|Description|  
|-------------------|-----------------|  
|<xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A>|The root template that defines a container object, such as a `table`, `div`, or `span` element, that will contain the content defined in the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> or <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> template. It might also contain a <xref:System.Web.UI.WebControls.DataPager> object.|  
|<xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A>|Defines the data-bound content to display for individual items.|  
|<xref:System.Web.UI.WebControls.ListView.ItemSeparatorTemplate%2A>|Defines the content to render between individual items.|  
|<xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A>|Defines a container object, such as a table row (`tr`), `div`, or `span` element, that will contain the content defined in the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> and <xref:System.Web.UI.WebControls.ListView.EmptyItemTemplate%2A> templates. The number of items that are displayed in a group is specified by the <xref:System.Web.UI.WebControls.ListView.GroupItemCount%2A> property.|  
|<xref:System.Web.UI.WebControls.ListView.GroupSeparatorTemplate%2A>|Defines the content to render between groups of items.|  
|<xref:System.Web.UI.WebControls.ListView.EmptyItemTemplate%2A>|Defines the content to render for an empty item when a <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> template is used. For example, if the <xref:System.Web.UI.WebControls.ListView.GroupItemCount%2A> property is set to 5, and the total number of items returned from the data source is 8, the last group of data displayed by the ListView control will contain three items as specified by the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> template, and two items as specified by the <xref:System.Web.UI.WebControls.ListView.EmptyItemTemplate%2A> template.|  
|<xref:System.Web.UI.WebControls.ListView.EmptyDataTemplate%2A>|Defines the content to render if the data source returns no data.|  
|<xref:System.Web.UI.WebControls.ListView.SelectedItemTemplate%2A>|Defines the content to render for the selected data item to differentiate the selected item from other items.|  
|<xref:System.Web.UI.WebControls.ListView.AlternatingItemTemplate%2A>|Defines the content to render for alternating items to make it easier to distinguish between consecutive items.|  
|<xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A>|Defines the content to render when an item is being edited. The <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template is rendered in place of the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> template for the data item that is being edited.|  
|<xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A>|Defines the content to render to insert an item. The <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template is rendered in place of an <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> template at either the start or at the end of the items that are displayed by the ListView control. You can specify where the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template is rendered by using the <xref:System.Web.UI.WebControls.ListView.InsertItemPosition%2A> property of the ListView control.|  
  
 To display the value of a field in a template such as <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A>, you use a data-binding expression. For more information about data-binding expressions, see [Data-Binding Expressions Overview](~/add/includes/ajax-current-ext-md.md).  
  
 To bind input controls in the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> and <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> templates to fields of a data source, you can use two-way binding expressions. This enables the ListView control to automatically extract the values of the input control for an update or insert operation. Two-way binding expressions also enable input controls in an <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> to automatically display the original field values. For more information about two-way binding expressions, see [Binding to Databases](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742).  
  
<a name="binding_to_a_data_source"></a>   
## Binding to a Data Source  
 You can bind the ListView control to a data source control (such as the <xref:System.Web.UI.WebControls.SqlDataSource> control or <xref:System.Web.UI.WebControls.ObjectDataSource> control) or to any data source collection that implements the <xref:System.Collections.IEnumerable?displayProperty=fullName> interface, such as <xref:System.Data.DataView?displayProperty=fullName>, <xref:System.Collections.ArrayList?displayProperty=fullName>, <xref:System.Collections.Generic.List%601?displayProperty=fullName>, or other collection types. Use one of the following methods to bind the ListView control to the appropriate data source type:  
  
-   To bind to a data source control, set the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property of the ListView control to the <xref:System.Web.UI.Control.ID%2A> value of the data source control. The ListView control automatically binds to the specified data source control and can take advantage of the data source control's capabilities to perform sorting, inserting, updating, deleting, and paging functionality. This is the preferred method to bind to data.  
  
-   To bind to a data source that implements the <xref:System.Collections.IEnumerable?displayProperty=fullName> interface, programmatically set the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> property of the ListView control to the data source, and then call the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method. When you use this technique, the ListView control does not provide built-in sorting, updating, deleting, and paging functionality. You must provide this functionality by using the appropriate event.  
  
 For more information about data binding, see [ASP.NET Data Access Content Map](http://msdn.microsoft.com/en-us/f9219396-a0fa-481f-894d-e3d9c67d64f2).  
  
> [!NOTE]
>  The ListView control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before you display it in the application. We strongly recommend that values be HTML-encoded whenever possible before they are displayed in this control. ASP.NET provides an input request validation feature to help block script and HTML in user input. You can also use validation server controls to check user input. For more information, see [Introduction to the Validation Controls](http://msdn.microsoft.com/en-us/3c0e7514-cff2-4bed-936d-ee3f7b740190).  
  
<a name="data_operations"></a>   
## Data Operations  
 When the ListView control is bound to a data source control, the ListView control can take advantage of the data source control's capabilities and provide automatic sort, insert, update, and delete functionality.  
  
> [!NOTE]
>  The ListView control can provide support for sorting, inserting, updating, and deleting with other types of data sources. However, in order to implement these operations, you must create code in an appropriate event handler.  
  
 Because the ListView control uses templates, it does not provide a way to automatically generate buttons to perform update, delete, insert, sort, or select operations. You must manually include these buttons in the appropriate template. The ListView control recognizes certain buttons whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to a specific value. The following table lists the buttons that the ListView control recognizes and their functions.  
  
|Button|CommandName value|Description|  
|------------|-----------------------|-----------------|  
|Cancel|"Cancel"|Cancels an edit or insert operation. Raises the <xref:System.Web.UI.WebControls.ListView.ItemCanceling> event.|  
|Delete|"Delete"|Deletes the current record from the data source. Raises the <xref:System.Web.UI.WebControls.ListView.ItemDeleted> and <xref:System.Web.UI.WebControls.ListView.ItemDeleting> events.|  
|Select|"Select"|Sets the <xref:System.Web.UI.WebControls.ListView.SelectedIndex%2A> property to the <xref:System.Web.UI.WebControls.ListViewDataItem.DisplayIndex%2A> property value for the item. Renders the <xref:System.Web.UI.WebControls.ListView.SelectedItemTemplate%2A> template for the item. Raises the <xref:System.Web.UI.WebControls.ListView.SelectedIndexChanging> and <xref:System.Web.UI.WebControls.ListView.SelectedIndexChanged> events.|  
|Edit|"Edit"|Puts the item in edit mode. Renders the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template for the item. Raises the <xref:System.Web.UI.WebControls.ListView.ItemEditing> event.|  
|Insert|"Insert"|Inserts the bound values from the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template into the data source. Raises the <xref:System.Web.UI.WebControls.ListView.ItemInserting> and <xref:System.Web.UI.WebControls.ListView.ItemInserted> events.|  
|Update|"Update"|Updates the current record in the data source with the bound values from the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template. Raises the <xref:System.Web.UI.WebControls.ListView.ItemUpdating> and <xref:System.Web.UI.WebControls.ListView.ItemUpdated> events.|  
|Sort|"Sort"|Sorts the columns listed in the `CommandArgument` property of the button. Raises the <xref:System.Web.UI.WebControls.ListView.Sorting> and <xref:System.Web.UI.WebControls.ListView.Sorted> events.|  
  
 Unlike the Delete button (which deletes the current data item immediately), when the Edit button is clicked, the ListView control displays the current item in edit mode. In edit mode, the content that is contained in the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> property is displayed for the current data item. Typically, in the edit item template, the Edit button is replaced with an Update and a Cancel button. Input controls that are appropriate for the field's data type (such as a <xref:System.Web.UI.WebControls.TextBox> or <xref:System.Web.UI.WebControls.CheckBox> control) also usually display a field's value for a user to modify. Clicking the Update button updates the record in the data source, and clicking the Cancel button cancels the edit operation.  
  
 The insert functionality is enabled when the <xref:System.Web.UI.WebControls.ListView.InsertItemPosition%2A> property is set to <xref:System.Web.UI.WebControls.InsertItemPosition> or <xref:System.Web.UI.WebControls.InsertItemPosition>. This property defines where the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template is rendered for the insert item. The insert item template typically includes an Insert and a Cancel button, and empty input controls are displayed for users to enter the values for the new record. Clicking the Insert button inserts the record in the data source, and clicking the Cancel button clears all the fields.  
  
### Sorting  
 The ListView control enables users to sort the items by clicking the Sort button. Sort functionality is defined in the `CommandArgument` property of the button that contains the columns to be sorted.  
  
### Paging  
 Instead of displaying all the records from the data source at the same time, the ListView control can break the records into pages. To enable paging, associate a <xref:System.Web.UI.WebControls.DataPager> control with the ListView control. Then insert a <xref:System.Web.UI.WebControls.DataPager> control inside the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> template. Alternatively, if the <xref:System.Web.UI.WebControls.DataPager> control is outside the ListView control, set the <xref:System.Web.UI.WebControls.DataPager.PagedControlID%2A> property to the <xref:System.Web.UI.Control.ID%2A> of the ListView control.  
  
<a name="Events"></a>   
## Events  
 The following table lists the events that are supported by the ListView control.  
  
|Event|Description|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.ListView.ItemCanceling>|Occurs when the Cancel button (a button with its `CommandName` property set to "Cancel") is clicked, but before the ListView control cancels the insert or edit operation. This event is often used to stop the cancel operation.|  
|<xref:System.Web.UI.WebControls.ListView.ItemCommand>|Occurs when a button is clicked in the ListView control. This event is often used to perform a custom task when a button is clicked in the control.|  
|<xref:System.Web.UI.WebControls.ListView.ItemCreated>|Occurs when a new item is created in the ListView control. This event is often used to modify the content of an item when the item is created.|  
|<xref:System.Web.UI.WebControls.ListView.ItemDataBound>|Occurs when a data item is bound to data in the ListView control. This event is often used to modify the content of an item when the item is bound to data.|  
|<xref:System.Web.UI.WebControls.ListView.ItemDeleted>|Occurs when a Delete button (a button with its `CommandName` property set to "Delete") is clicked or the <xref:System.Web.UI.WebControls.ListView.DeleteItem%2A> method is called, after the ListView control deletes the record from the data source. This event is often used to check the results of the delete operation.|  
|<xref:System.Web.UI.WebControls.ListView.ItemDeleting>|Occurs when a Delete button (a button with its `CommandName` property set to "Delete") is clicked or the <xref:System.Web.UI.WebControls.ListView.DeleteItem%2A> method is called, but before the ListView control deletes the record from the data source. This event is often used to confirm or cancel the delete operation.|  
|<xref:System.Web.UI.WebControls.ListView.ItemEditing>|Occurs when an Edit button (a button with its `CommandName` property set to "Edit") is clicked, but before the ListView control enters edit mode. This event is often used to cancel the editing operation.|  
|<xref:System.Web.UI.WebControls.ListView.ItemInserted>|Occurs when an Insert button (a button with its `CommandName` property set to "Insert") is clicked or the <xref:System.Web.UI.WebControls.ListView.InsertNewItem%2A> method is called, after the ListView control inserts the new record from the data source. This event is often used to check the results of the insert operation.|  
|<xref:System.Web.UI.WebControls.ListView.ItemInserting>|Occurs when an Insert button (a button with its `CommandName` property set to "Insert") is clicked or the <xref:System.Web.UI.WebControls.ListView.InsertNewItem%2A> method is called, but before the ListView control inserts the record. This event is often used to cancel the insert operation or change or validate the values of the new item.|  
|<xref:System.Web.UI.WebControls.ListView.ItemUpdated>|Occurs when an Update button (a button with its `CommandName` property set to "Update") is clicked or the <xref:System.Web.UI.WebControls.ListView.UpdateItem%2A> method is called, after the ListView control updates the record. This event is often used to check the results of the update operation.|  
|<xref:System.Web.UI.WebControls.ListView.ItemUpdating>|Occurs when an Update button (a button with its `CommandName` property set to "Update") is clicked or the <xref:System.Web.UI.WebControls.ListView.UpdateItem%2A> method is called, but before the ListView control updates the record. This event is often used to cancel the updating operation or change or validate the values of the edited item.|  
|<xref:System.Web.UI.WebControls.ListView.LayoutCreated>|Occurs when the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> template is created in a ListView control. This event is often used to perform a task after the template is created.|  
|<xref:System.Web.UI.WebControls.ListView.PagePropertiesChanged>|Occurs when the page properties change, after the ListView control sets the new values.|  
|<xref:System.Web.UI.WebControls.ListView.PagePropertiesChanging>|Occurs when the data-page properties change, but before the ListView control sets the new values.|  
|<xref:System.Web.UI.WebControls.ListView.SelectedIndexChanged>|Occurs when a Select button (a button with its `CommandName` property set to "Select") is clicked, after the ListView control handles the select operation. This event is often used to perform a custom task after an item is selected in the control.|  
|<xref:System.Web.UI.WebControls.ListView.SelectedIndexChanging>|Occurs when a Select button (a button with its `CommandName` property set to "Select") is clicked, but before the ListView control handles the select operation. This event is often used to cancel the select operation.|  
|<xref:System.Web.UI.WebControls.ListView.Sorted>|Occurs when a Sort button (a button with its `CommandName` property set to "Sort") is clicked or the <xref:System.Web.UI.WebControls.ListView.Sort%2A> method is called, after the ListView control handles the sort operation. This event is typically used to perform a custom task after a user clicks a Sort button and the data has been sorted.|  
|<xref:System.Web.UI.WebControls.ListView.Sorting>|Occurs when a Sort button (a button with its `CommandName` property set to "Sort") is clicked or the <xref:System.Web.UI.WebControls.ListView.Sort%2A> method is called, but before the ListView control handles the sort operation. This event is often used to cancel the sorting operation or to perform a custom sorting routine.|  
  
<a name="declarative_syntax"></a>   
## Declarative Syntax  
  
<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  
   
  
## Examples  
 The following example shows how to use the ListView control to display records from a database by using an HTML table. The values are retrieved by using a <xref:System.Web.UI.WebControls.LinqDataSource> control.  
  
 [!code-vb[System.Web.UI.WebControls.ListView_Simple#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_310_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView_Simple#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_310_1.aspx)]  
  
 The following example shows how to use the ListView control to display values in a flow layout by using the `div` element. The values are retrieved by using a <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 [!code-vb[System.Web.UI.WebControls.ListView_FlowLayout#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_310_2.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView_FlowLayout#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_310_2.aspx)]  
  
 The following example shows how to use the ListView control to insert, delete, and update records.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView_Edit#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_310_3.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView_Edit#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_310_3.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ListView" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.ListView> class. To dynamically add a <xref:System.Web.UI.WebControls.ListView> control to a page, create a new <xref:System.Web.UI.WebControls.ListView> object. Set its properties, and then add it to the <xref:System.Web.UI.Control.Controls%2A?displayProperty=fullName> collection of a container control, such as a <xref:System.Web.UI.WebControls.PlaceHolder> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessKey">
      <MemberSignature Language="C#" Value="public override string AccessKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.AccessKey%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>&lt;xref:System.String?displayProperty=fullName&gt;, which indicates that the property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the AccessKey property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the AccessKey property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddControlToContainer">
      <MemberSignature Language="C#" Value="protected virtual void AddControlToContainer (System.Web.UI.Control control, System.Web.UI.Control container, int addLocation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddControlToContainer(class System.Web.UI.Control control, class System.Web.UI.Control container, int32 addLocation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="container" Type="System.Web.UI.Control" />
        <Parameter Name="addLocation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="control">An object that contains the controls to be added to the container.</param>
        <param name="container">The container that is used to store the child controls.</param>
        <param name="addLocation">The location in the controls collection at which to add the child control.</param>
        <summary>Adds the specified control to the specified container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AddControlToContainer method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control to add a control to the specified container.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternatingItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate AlternatingItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate AlternatingItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListViewDataItem), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom content for the alternating data item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that contains the custom content for the alternating data item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AlternatingItemTemplate property to define a custom user interface (UI) for the alternating data item. The AlternatingItemTemplate template usually contains the same controls and content as the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> template, but with a different appearance to distinguish items.  
  
 To specify the custom template declaratively, add an `AlternatingItemTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. Then add controls and content between the opening and closing `<AlternatingItemTemplate>` tags. To display the field values from the data source, use a data-binding expression. For more information, see [Data-Binding Expressions Overview](~/add/includes/ajax-current-ext-md.md).  
  
 To create buttons that automatically select, delete, and edit operations, add a button control to the template. Set its <xref:System.Web.UI.WebControls.Button.CommandName%2A> property to one of the values listed in the following table.  
  
|Button type|CommandName value|  
|-----------------|-----------------------|  
|Delete|"Delete"|  
|Edit|"Edit"|  
|Select|"Select"|  
  
   
  
## Examples  
 The following example shows how to use the AlternatingItemTemplate template to define the style for alternating data items in a <xref:System.Web.UI.WebControls.ListView> control.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.AlternatingItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1021_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.AlternatingItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1021_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.BackColor%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>
          <see cref="T:System.Drawing.Color" />, which indicates that the property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the BackColor property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the BackColor property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.BorderColor%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>
          <see cref="T:System.Drawing.Color" />, which indicates that the property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the BorderColor property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the BorderColor property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.BorderStyle BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.BorderStyle" />, which indicates that the property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the BorderStyle property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the BorderStyle property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderWidth">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.Unit BorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit BorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.Unit" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the BorderWidth property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the BorderWidth property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientIDRowSuffix">
      <MemberSignature Language="C#" Value="public virtual string[] ClientIDRowSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ClientIDRowSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.StringArrayConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.WebCategory("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the data field whose value is used to uniquely identify each data row of a <see cref="T:System.Web.UI.WebControls.ListView" /> control when the &lt;xref:System.Web.UI.Control.ClientIDMode%2A&gt; property is set to <see cref="T:System.Web.UI.ClientIDMode" />.</summary>
        <value>The name of the data field whose value is used to uniquely identify each instance of a <see cref="T:System.Web.UI.WebControls.ListView" /> control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To prevent naming conflicts when multiple instances of a control are rendered in multiple rows of a <xref:System.Web.UI.WebControls.ListView> control, ASP.NET generates a unique <xref:System.Web.UI.Control.ClientID%2A> value for each instance of the control. You specify how the <xref:System.Web.UI.Control.ClientID%2A> value is generated by setting the <xref:System.Web.UI.Control.ClientIDMode%2A> property. If you set the <xref:System.Web.UI.Control.ClientIDMode%2A> property to <xref:System.Web.UI.ClientIDMode>, ASP.NET generates the <xref:System.Web.UI.Control.ClientID%2A> by appending a suffix that is derived from the data field specified in <xref:System.Web.UI.WebControls.GridView.ClientIDRowSuffix%2A>. If <xref:System.Web.UI.WebControls.GridView.ClientIDRowSuffix%2A> is not set, the suffix is a sequential number.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientIDRowSuffixDataKeys">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.DataKeyArray ClientIDRowSuffixDataKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKeyArray ClientIDRowSuffixDataKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKeyArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data values that are used to uniquely identify each instance of a data-bound control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</summary>
        <value>The data values that are used to uniquely identify each instance of a data-bound control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Web.UI.ControlCollection" /> object that represents the child controls of the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The collection of child controls for the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Controls property overrides the base implementation. This guarantees that all child controls have been created before the property returns the <xref:System.Web.UI.ControlCollection> object.  
  
 The <xref:System.Web.UI.Control.Controls%2A> property enables you to programmatically access the instance of the <xref:System.Web.UI.ControlCollection> class for the <xref:System.Web.UI.WebControls.ListView> control. You can add controls to the collection, remove controls from the collection, or iterate through the server controls in the collection.  
  
 To access a specific child control of the <xref:System.Web.UI.WebControls.ListView> control, you can use the <xref:System.Web.UI.Control.FindControl%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public virtual bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether empty string values ("") are automatically converted to null values when the data field is updated in the data source.</summary>
        <value>
          <see langword="true" /> if empty string values are automatically converted to null values; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.Parameter> object of the data source control that the <xref:System.Web.UI.WebControls.ListView> control is bound to also has a property named <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=fullName>. This property performs the same function. Make sure that both properties are set appropriately.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the control hierarchy that is used to render the <see cref="T:System.Web.UI.WebControls.ListView" /> control, based on the values that are stored in view state.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateChildControls method is a helper method that is used by the <xref:System.Web.UI.WebControls.ListView> class to create the control hierarchy. This overload of the method creates the control hierarchy based on values from view state, instead of directly from the data source.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected virtual int CreateChildControls (System.Collections.IEnumerable dataSource, bool dataBinding);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 CreateChildControls(class System.Collections.IEnumerable dataSource, bool dataBinding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Collections.IEnumerable" />
        <Parameter Name="dataBinding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSource">An object that contains the data source for the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</param>
        <param name="dataBinding">
          <see langword="true" /> to indicate that the child controls are bound to data; <see langword="false" /> to indicate that the control will re-create itself from view state during a postback.</param>
        <summary>Creates the control hierarchy that is used to render the <see cref="T:System.Web.UI.WebControls.ListView" /> control by using the specified data source.</summary>
        <returns>The number of items that are created.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateChildControls method is used to create the control hierarchy of the <xref:System.Web.UI.WebControls.ListView> control.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="dataSource" /> returns <see langword="null" /> for <see cref="T:System.Web.UI.DataSourceView" />.  
  
 -or-  
  
 <paramref name="dataSource" /> does not implement the &lt;xref:System.Collections.ICollection&gt; interface and cannot return a &lt;xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A&gt; value.  
  
 -or-  
  
 <paramref name="dataSource" /> does not implement the &lt;xref:System.Collections.ICollection&gt; interface and <paramref name="dataBinding" /> is set to <see langword="false" />.  
  
 -or-  
  
 The <see cref="T:System.Web.UI.WebControls.ListView" /> control does not have a group placeholder specified.  
  
 -or-  
  
 The <see cref="T:System.Web.UI.WebControls.ListView" /> control does not have an item placeholder specified.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the default style for the control.</summary>
        <returns>The style for the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to call the CreateControlStyle method, a <xref:System.NotSupportedException> exception is thrown.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to invoke the CreateControlStyle method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateDataItem">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.ListViewDataItem CreateDataItem (int dataItemIndex, int displayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.ListViewDataItem CreateDataItem(int32 dataItemIndex, int32 displayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ListViewDataItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataItemIndex" Type="System.Int32" />
        <Parameter Name="displayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dataItemIndex">The index of the data item in the underlying data source object.</param>
        <param name="displayIndex">The display index of the data item in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</param>
        <summary>Creates a data item in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <returns>A data item that is created by using the specified parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceSelectArguments">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceSelectArguments</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the <see cref="T:System.Web.UI.DataSourceSelectArguments" /> object that contains the arguments that are passed to the data source.</summary>
        <returns>The arguments that are passed to the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateDataSourceSelectArguments method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control. In this implementation, the <xref:System.Web.UI.DataSourceSelectArguments> object contains the arguments for paging operations.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateEmptyDataItem">
      <MemberSignature Language="C#" Value="protected virtual void CreateEmptyDataItem ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CreateEmptyDataItem() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the &lt;xref:System.Web.UI.WebControls.ListView.EmptyDataTemplate%2A&gt; template in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateEmptyDataItem method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control to create the <xref:System.Web.UI.WebControls.ListView.EmptyDataTemplate%2A> template. The empty data template is displayed when the data source returns no records.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateEmptyItem">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.ListViewItem CreateEmptyItem ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.ListViewItem CreateEmptyItem() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an empty item in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <returns>The empty item that was created.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateEmptyItem method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control to create an empty item. The empty item is displayed when the last group of a page of data in the <xref:System.Web.UI.WebControls.ListView> control does not have any more records to display.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateInsertItem">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.ListViewItem CreateInsertItem ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.ListViewItem CreateInsertItem() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an insert item in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <returns>The insert item that was created.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateInsertItem method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control to create an insert item. An insert item is a <xref:System.Web.UI.WebControls.ListViewItem> object whose <xref:System.Web.UI.WebControls.ListViewItem.ItemType%2A> is equal to <xref:System.Web.UI.WebControls.ListViewItemType?displayProperty=fullName>.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control does not have an &lt;xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A&gt; template specified.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateItem">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.ListViewItem CreateItem (System.Web.UI.WebControls.ListViewItemType itemType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.ListViewItem CreateItem(valuetype System.Web.UI.WebControls.ListViewItemType itemType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListViewItemType" />
      </Parameters>
      <Docs>
        <param name="itemType">One of the <see cref="T:System.Web.UI.WebControls.ListViewItemType" /> values.</param>
        <summary>Creates a <see cref="T:System.Web.UI.WebControls.ListViewItem" /> object with the specified type.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.ListViewItem" /> object with the specified type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateItem method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control to create a <xref:System.Web.UI.WebControls.ListViewItem> object.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateItemsInGroups">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Web.UI.WebControls.ListViewDataItem&gt; CreateItemsInGroups (System.Web.UI.WebControls.ListViewPagedDataSource dataSource, bool dataBinding, System.Web.UI.WebControls.InsertItemPosition insertPosition, System.Collections.ArrayList keyArray);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Web.UI.WebControls.ListViewDataItem&gt; CreateItemsInGroups(class System.Web.UI.WebControls.ListViewPagedDataSource dataSource, bool dataBinding, valuetype System.Web.UI.WebControls.InsertItemPosition insertPosition, class System.Collections.ArrayList keyArray) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.UI.WebControls.ListViewDataItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.ListViewPagedDataSource" />
        <Parameter Name="dataBinding" Type="System.Boolean" />
        <Parameter Name="insertPosition" Type="System.Web.UI.WebControls.InsertItemPosition" />
        <Parameter Name="keyArray" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="dataSource">The data source.</param>
        <param name="dataBinding">
          <see langword="true" /> to indicate that the <see cref="T:System.Web.UI.WebControls.ListView" /> control is bound to data; otherwise, <see langword="false" />.</param>
        <param name="insertPosition">One of the <see cref="T:System.Web.UI.WebControls.InsertItemPosition" /> values.</param>
        <param name="keyArray">An array that represents the data-key value of each item in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</param>
        <summary>Creates the <see cref="T:System.Web.UI.WebControls.ListView" /> control hierarchy in groups.</summary>
        <returns>An object that contains all the data items of the current page of data in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateItemsInGroups method is used to create the control hierarchy of the <xref:System.Web.UI.WebControls.ListView> control in groups. This method is used by the <xref:System.Web.UI.WebControls.ListView> control only when the <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> and <xref:System.Web.UI.WebControls.ListView.GroupItemCount%2A> properties are defined.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control does not have an item placeholder specified.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateItemsWithoutGroups">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Web.UI.WebControls.ListViewDataItem&gt; CreateItemsWithoutGroups (System.Web.UI.WebControls.ListViewPagedDataSource dataSource, bool dataBinding, System.Web.UI.WebControls.InsertItemPosition insertPosition, System.Collections.ArrayList keyArray);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Web.UI.WebControls.ListViewDataItem&gt; CreateItemsWithoutGroups(class System.Web.UI.WebControls.ListViewPagedDataSource dataSource, bool dataBinding, valuetype System.Web.UI.WebControls.InsertItemPosition insertPosition, class System.Collections.ArrayList keyArray) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.UI.WebControls.ListViewDataItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.ListViewPagedDataSource" />
        <Parameter Name="dataBinding" Type="System.Boolean" />
        <Parameter Name="insertPosition" Type="System.Web.UI.WebControls.InsertItemPosition" />
        <Parameter Name="keyArray" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="dataSource">The data source.</param>
        <param name="dataBinding">
          <see langword="true" /> to indicate that the <see cref="T:System.Web.UI.WebControls.ListView" /> control is bound to data; otherwise, <see langword="false" />.</param>
        <param name="insertPosition">One of the <see cref="T:System.Web.UI.WebControls.InsertItemPosition" /> values.</param>
        <param name="keyArray">An array that represents the data-key value of each item in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</param>
        <summary>Creates the <see cref="T:System.Web.UI.WebControls.ListView" /> control hierarchy without groups.</summary>
        <returns>An object that contains all the data items of the current page of data in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateItemsWithoutGroups method is used to create the control hierarchy of the <xref:System.Web.UI.WebControls.ListView> control. This method is used by the <xref:System.Web.UI.WebControls.ListView> control only when the <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> property is not defined.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateLayoutTemplate">
      <MemberSignature Language="C#" Value="protected virtual void CreateLayoutTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CreateLayoutTemplate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the root container in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateLayoutTemplate method is a helper method that is used to create the root container in the <xref:System.Web.UI.WebControls.ListView> control. The contents of the container are defined by the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> property.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSuffixArrayList">
      <MemberSignature Language="C#" Value="protected virtual void CreateSuffixArrayList (System.Web.UI.WebControls.ListViewPagedDataSource dataSource, System.Collections.ArrayList suffixArray);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CreateSuffixArrayList(class System.Web.UI.WebControls.ListViewPagedDataSource dataSource, class System.Collections.ArrayList suffixArray) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.ListViewPagedDataSource" />
        <Parameter Name="suffixArray" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="dataSource">The data source that will supply values for the suffix.</param>
        <param name="suffixArray">The suffix array.</param>
        <summary>Creates an array of suffixes for ASP.NET to use when it generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CssClass">
      <MemberSignature Language="C#" Value="public override string CssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CssClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.CssClassProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.CssClass%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>&lt;xref:System.String?displayProperty=fullName&gt;, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the CssClass property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the CssClass property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataKeyNames">
      <MemberSignature Language="C#" Value="public virtual string[] DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DataKeyNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.StringArrayConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an array that contains the names of the primary key fields for the items displayed in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An array that contains the names of the primary key fields for the items displayed in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DataKeyNames property to specify the field or fields that represent the primary key of the data source. To set this property declaratively, use a comma-separated list of field names.  
  
 When the DataKeyNames property is set, the <xref:System.Web.UI.WebControls.ListView> control automatically populates its <xref:System.Web.UI.WebControls.ListView.DataKeys%2A> collection with the values from the specified field or fields. This provides a convenient way to access the primary keys of each item.  
  
> [!IMPORTANT]
>  The <xref:System.Web.UI.WebControls.ListView> control stores key field values in the control-state field. If these values contain sensitive information, we recommend that you enable view-state encryption by setting the <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> property to `ViewStateEncryptionMode.Always`.  
  
 You must set the DataKeyNames property for the automatic updating and deleting features of the <xref:System.Web.UI.WebControls.ListView> control to work. The values of these key fields are passed to the data source control in order to match the item to update or delete.  
  
 Fields that are specified as data keys by using the DataKeyNames property are passed to the data source control during update and delete operations by using the `Keys` collection. Data key fields are passed to the data source control even if they are not bound to controls in a template.  
  
   
  
## Examples  
 The following example shows how to use the DataKeyNames property to specify the key field of the data source.  
  
 [!code-cs[System.Web.UI.WebControls.ListViewItemCommand#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1222_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListViewItemCommand#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1222_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataKeys">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKeyArray DataKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKeyArray DataKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKeyArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.DataKey" /> objects that represent the data-key value for each item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that contains the data key for each item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Web.UI.WebControls.ListView.DataKeyNames%2A> property is set, the <xref:System.Web.UI.WebControls.ListView> control automatically creates a <xref:System.Web.UI.WebControls.DataKey> object for each item in the control. The <xref:System.Web.UI.WebControls.DataKey> object contains the values of the field or fields that are specified in the <xref:System.Web.UI.WebControls.ListView.DataKeyNames%2A> property. The <xref:System.Web.UI.WebControls.DataKey> objects are then added to the control's DataKeys collection.  
  
 Use the DataKeys property to retrieve the <xref:System.Web.UI.WebControls.DataKey> object for a specific data item in the <xref:System.Web.UI.WebControls.ListView> control.  
  
 You can use the <xref:System.Web.UI.WebControls.ListView.SelectedDataKey%2A> property to retrieve the <xref:System.Web.UI.WebControls.DataKey> object for the currently selected item. You can also use the <xref:System.Web.UI.WebControls.ListView.SelectedValue%2A> property to retrieve the data-key value for the currently selected item directly.  
  
 You can use the <xref:System.Web.UI.WebControls.ListViewDataItem.DisplayIndex%2A?displayProperty=fullName> property to retrieve the <xref:System.Web.UI.WebControls.DataKey> object for the item for which a command button was clicked.  
  
   
  
## Examples  
 The following example shows how to use the DataKeys property to determine the data-key values for the items in a <xref:System.Web.UI.WebControls.ListView> control. It also shows how to preserve the user selection based on a data item instead of the default behavior that uses the index.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.SelectedIndexChanged#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_68_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.SelectedIndexChanged#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_68_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public virtual void DeleteItem (int itemIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteItem(int32 itemIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="itemIndex">The index of the item to delete.</param>
        <summary>Deletes the record at the specified index from the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DeleteItem method to programmatically delete the record at the specified index from the data source. This method is typically used to delete a record from outside the <xref:System.Web.UI.WebControls.ListView> control, such as from a different control on the page. This method raises the <xref:System.Web.UI.WebControls.ListView.ItemDeleted> and <xref:System.Web.UI.WebControls.ListView.ItemDeleting> events.  
  
   
  
## Examples  
 The following example shows how to use the DeleteItem method to programmatically delete the selected item in a <xref:System.Web.UI.WebControls.ListView> control from the data source.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.DeleteItem#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_186_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.DeleteItem#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_186_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="itemIndex" /> is less than 0.  
  
 -or-  
  
 The <see cref="T:System.Web.UI.DataSourceView" /> object that is associated with the <see cref="T:System.Web.UI.WebControls.ListView" /> control is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public virtual string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.WebCategory("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.WebSysDescription("DataBoundControl_DeleteMethod")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method to call in order to delete data.</summary>
        <value>The name of the method.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property causes model binding to be used as the data-binding method.  
  
 For a tutorial series on using model binding with Web Forms, see [Model Binding and Web Forms](http://go.microsoft.com/fwlink/?LinkId=286117).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditIndex">
      <MemberSignature Language="C#" Value="public virtual int EditIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Default")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the item being edited.</summary>
        <value>The zero-based index of the item being edited. The default is -1, which indicates that no item is being edited.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the EditIndex property to programmatically specify or determine which item in a <xref:System.Web.UI.WebControls.ListView> control to edit. When this property is set to the index of an item in the control, that item is displayed in edit mode. In edit mode, the item is rendered by using the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template instead of the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> template. You can populate the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> with data-bound controls to enable users to modify values for the item. To switch from edit mode to display mode, set this property to -1.  
  
 The EditIndex property is typically used when you have to programmatically determine which item is being edited, or when you are adding custom editing functionality to the <xref:System.Web.UI.WebControls.ListView> control. The <xref:System.Web.UI.WebControls.ListView> control has a built-in editing feature that automatically puts an item in edit mode if you add a button to the item template whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to `Edit`.  
  
   
  
## Examples  
 The following example shows how to use the EditIndex property to determine whether an item is in edit mode in the <xref:System.Web.UI.WebControls.ListView> control. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ListViewDataItem> class.  
  
 [!code-vb[System.Web.UI.WebControls.ListViewDataItem#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1015_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListViewDataItem#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1015_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The EditIndex property is set to a value less than -1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditItem">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.ListViewItem EditItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ListViewItem EditItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the item that is in edit mode in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The item that is in edit mode in a <see cref="T:System.Web.UI.WebControls.ListView" /> control, or <see langword="null" /> if no item is in edit mode.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EditItem property to access the item that is in edit mode in a <xref:System.Web.UI.WebControls.ListView> control. The content of an edit item is defined by the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> property.  
  
   
  
## Examples  
 The following example shows how to retrieve the item that is in edit mode by using the EditItem property to access controls that are contained in the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemEditing#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_807_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemEditing#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_807_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EditItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListViewDataItem), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom content for the item in edit mode.</summary>
        <value>An object that contains the custom content for the item in edit mode. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EditItemTemplate property to define a custom user interface (UI) for the item in edit mode. The EditItemTemplate template usually contains the input controls for the user to update the values of an existing record. It also usually contains buttons to update the record and to cancel the update operation.  
  
 To specify the custom template declaratively, add an `EditItemTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. Then add the contents and controls for template to the `EditItemTemplate` element. You can associate a field with an input control by using a two-way binding expression. This enables the <xref:System.Web.UI.WebControls.ListView> control to automatically display the original field value in the associated input control for the item in edit mode. When a record is updated, the <xref:System.Web.UI.WebControls.ListView> control can automatically extract the updated field value from the associated input control. For more information, see [Data-Binding Expressions Overview](~/add/includes/ajax-current-ext-md.md).  
  
 To create buttons that perform the built-in cancel and update operations, add a button control to the template. Set its <xref:System.Web.UI.WebControls.Button.CommandName%2A> property to one of the values listed in the following table.  
  
|Button type|CommandName value|  
|-----------------|-----------------------|  
|Cancel|"Cancel"|  
|Update|"Update"|  
  
   
  
## Examples  
 The following example shows how to define a custom template for the item in edit mode.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.EditItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1181_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.EditItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1181_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EmptyDataTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EmptyDataTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the user-defined content for the empty template that is rendered when a <see cref="T:System.Web.UI.WebControls.ListView" /> control is bound to a data source that does not contain any records.</summary>
        <value>An object that contains the custom content for the empty template. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The empty template is displayed in a <xref:System.Web.UI.WebControls.ListView> control when the data source that is bound to the control does not contain any records and the <xref:System.Web.UI.WebControls.ListView.InsertItemPosition%2A> property is set to <xref:System.Web.UI.WebControls.InsertItemPosition?displayProperty=fullName>. The template is rendered instead of the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> template. If the <xref:System.Web.UI.WebControls.ListView.InsertItemPosition%2A> property is set to a value other than <xref:System.Web.UI.WebControls.InsertItemPosition?displayProperty=fullName>, the EmptyDataTemplate template is not rendered.  
  
 You can define a custom user interface (UI) for the empty template by using the EmptyDataTemplate property. To specify a custom template declaratively for the empty template, add and `EmptyDataTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. You can then add the contents of the template to the `EmptyDataTemplate` element.  
  
   
  
## Examples  
 The following example shows how to define a custom template for the empty template.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.EmptyDataTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_652_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.EmptyDataTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_652_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EmptyItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EmptyItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EmptyItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListViewItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the user-defined content for the empty item that is rendered in a <see cref="T:System.Web.UI.WebControls.ListView" /> control when there are no more data items to display in the last row of the current data page.</summary>
        <value>An object that contains the custom content for the empty item. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The empty item is displayed in a <xref:System.Web.UI.WebControls.ListView> control when there are no more data items to display in the last group of the current page. This can occur only if <xref:System.Web.UI.WebControls.ListView.GroupItemCount%2A> is set to a value greater than 1. For example, in a <xref:System.Web.UI.WebControls.ListView> control, the <xref:System.Web.UI.WebControls.ListView.GroupItemCount%2A> property might be set to 5 and the total number of items returned from the data source is 8. In that case, the last row of data will contain three items defined by the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> template and two items defined by the EmptyItemTemplate template.  
  
 You can define a custom user interface (UI) for the empty item by using the EmptyItemTemplate property. To specify a custom template declaratively for the empty item, add an `EmptyItemTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. You can then add the contents of the template to the `EmptyItemTemplate` element.  
  
   
  
## Examples  
 The following example shows how to define a custom template for the empty item.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.EmptyItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1306_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.EmptyItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1306_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableModelValidation">
      <MemberSignature Language="C#" Value="public virtual bool EnableModelValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableModelValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.WebCategory("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether a validator control will handle exceptions that occur during insert or update operations.</summary>
        <value>
          <see langword="true" /> if a validator control will handle exceptions that occur during insert or update operations; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnablePersistedSelection">
      <MemberSignature Language="C#" Value="public virtual bool EnablePersistedSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePersistedSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.WebCategory("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether row selection persists when a user pages through data in a data-bound control.</summary>
        <value>
          <see langword="true" /> if row selection persists; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can specify how selected rows are persisted when the <xref:System.Web.UI.WebControls.ListView> control is in paging mode. By default, row selection is based on row index. The same row (for example, the third row) is selected on each page. Alternatively, you can enable persistence based on the data key of the selected row. In that case, if you select row 3 on page 1 and you move to page 2, no row is selected on page 2. If you move back to page 1, row 3 is still selected. To enable this functionality, set this property to `true`.  
  
> [!NOTE]
>  In versions 2.0, 3.0, and 3.5 of ASP.NET, row selection was based only on row index. By default, row selection in ASP.NET 4 is based on index for backward compatibility.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnsureLayoutTemplate">
      <MemberSignature Language="C#" Value="protected virtual void EnsureLayoutTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void EnsureLayoutTemplate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ensures that the &lt;xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A&gt; content is correctly created in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The EnsureLayoutTemplate method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control to make sure that the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> content is added to the control only one time.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExtractItemValues">
      <MemberSignature Language="C#" Value="public virtual void ExtractItemValues (System.Collections.Specialized.IOrderedDictionary itemValues, System.Web.UI.WebControls.ListViewItem item, bool includePrimaryKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExtractItemValues(class System.Collections.Specialized.IOrderedDictionary itemValues, class System.Web.UI.WebControls.ListViewItem item, bool includePrimaryKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemValues" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="item" Type="System.Web.UI.WebControls.ListViewItem" />
        <Parameter Name="includePrimaryKey" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="itemValues">A dictionary object that is used to store the field values.</param>
        <param name="item">The <see cref="T:System.Web.UI.WebControls.ListViewItem" /> object from which to retrieve the field values.</param>
        <param name="includePrimaryKey">
          <see langword="true" /> to include the primary key field or fields; otherwise, <see langword="false" />.</param>
        <summary>Retrieves the values of each field that is declared in the specified item, and stores them in the specified <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ExtractItemValues method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control to retrieve the values of each field that is declared in `item`. You can specify whether the extracted values include key fields by using the `includePrimaryKey` parameter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="itemValues" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="item" /> is not a <see cref="T:System.Web.UI.WebControls.ListViewDataItem" /> object.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FindPlaceholder">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.Control FindPlaceholder (string containerID, System.Web.UI.Control container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.Control FindPlaceholder(string containerID, class System.Web.UI.Control container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerID" Type="System.String" />
        <Parameter Name="container" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="containerID">The identifier for the control to be found.</param>
        <param name="container">The container to be searched.</param>
        <summary>Searches the specified container for a control that has the specified identifier.</summary>
        <returns>The specified control, or <see langword="null" /> if the specified control cannot be found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.FontInfo Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FontInfo Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FontInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.Font%2A?displayProperty=fullName&gt; property. This property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>This property is not supported, and throws a &lt;xref:System.NotSupportedException&gt; error.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to access the Font property, a <xref:System.NotSupportedException> exception is thrown.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to access the Font property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.ForeColor%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>
          <see cref="T:System.Drawing.Color" />, which indicates that the property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the ForeColor property, a <xref:System.NotSupportedException> exception is thrown.  If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the ForeColor property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GroupItemCount">
      <MemberSignature Language="C#" Value="public virtual int GroupItemCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GroupItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Default")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of items to display per group in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The number of items to display per group in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is 1, which indicates that the <see cref="T:System.Web.UI.WebControls.ListView" /> control will display one item per group.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the GroupItemCount property to specify the number of items to be grouped together in the <xref:System.Web.UI.WebControls.ListView> control. (In other words, this specifies the number of items to display for each group of the control.) For each group, the <xref:System.Web.UI.WebControls.ListView> control renders the contents of the <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> template and replaces the item placeholder with the actual item content. It does this as many times as the number of items defined by the GroupItemCount property.  
  
 You can use GroupItemCount with the <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> template to create a tiled layout in the <xref:System.Web.UI.WebControls.ListView> control. In a tiled table layout, the items are repeated horizontally in a row. The numbers of times that an item is repeated is specified by the GroupItemCount property.  
  
   
  
## Examples  
 The following example shows how to create a tiled layout in the <xref:System.Web.UI.WebControls.ListView> control by using the GroupItemCount property. It also shows how to change this property programmatically.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.GroupItemCount#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_469_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.GroupItemCount#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_469_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The GroupItemCount property is set to a value less than 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GroupPlaceholderID">
      <MemberSignature Language="C#" Value="public virtual string GroupPlaceholderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupPlaceholderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("groupPlaceholder")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ID for the group placeholder in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The ID for the group placeholder in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is "groupPlaceholder".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the GroupPlaceholderID property to specify an ID for the group placeholder. The group placeholder is the control that you add to the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> template when you are using groups to represent where the group will be rendered.  
  
   
  
## Examples  
 The following example shows how to use the GroupPlaceholderID property to specify a different ID for the group placeholder of the <xref:System.Web.UI.WebControls.ListView> control.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.ItemContainerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1332_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemContainerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1332_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified ID is <see langword="null" /> or an empty string.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GroupSeparatorTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate GroupSeparatorTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate GroupSeparatorTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListViewItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the user-defined content for the separator between groups in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that contains the custom content for the group separator. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The separator enables you to put an element that has custom content between each group. The <xref:System.Web.UI.WebControls.ListView> control then alternately renders the <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> content and the GroupSeparatorTemplate content. The <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> content is always rendered last.  
  
 Make sure that you define the content for the whole row in the GroupSeparatorTemplate template, because the <xref:System.Web.UI.WebControls.ListView> control renders the GroupSeparatorTemplate content inside the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> template. For example, the groups in the <xref:System.Web.UI.WebControls.ListView> control might be created by using a table row (`tr`) element. If the <xref:System.Web.UI.WebControls.ListView.GroupItemCount%2A> property is set to 3, the `colspan` attribute must be set to 3 in the GroupSeparatorTemplate template.  
  
 To specify a template declaratively for the separator, add a `GroupSeparatorTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. You can then add the contents of the template to the `GroupSeparatorTemplate` element.  
  
   
  
## Examples  
 The following example shows how to create a group separator in the <xref:System.Web.UI.WebControls.ListView> control by using the GroupSeparatorTemplate property.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.GroupTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_110_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.GroupTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_110_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GroupTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate GroupTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate GroupTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListViewItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the user-defined content for the group container in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that contains the custom content for the group container in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the GroupTemplate property to create a tiled layout in the <xref:System.Web.UI.WebControls.ListView> control. In a tiled table layout, the items are repeated horizontally in a row. The numbers of times that an item is repeated is specified by the <xref:System.Web.UI.WebControls.ListView.GroupItemCount%2A> property.  
  
 To specify a template declaratively for the group container, add a `GroupTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. You can then add the contents of the template to the `GroupTemplate` element.  
  
 The GroupTemplate property must include a placeholder for the data item, such as a table cell (`td`), `div`, or `span` element. This placeholder must have the `runat` attribute set to "server" and the `ID` attribute set to the value of the <xref:System.Web.UI.WebControls.ListView.ItemPlaceholderID%2A> property. At run time, the <xref:System.Web.UI.WebControls.ListView> control replaces the placeholder with the content that is defined for each item in the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> and <xref:System.Web.UI.WebControls.ListView.AlternatingItemTemplate%2A> templates.  
  
   
  
## Examples  
 The following example shows how to create a tiled layout in the <xref:System.Web.UI.WebControls.ListView> control by using the GroupTemplate property.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.GroupTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_876_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.GroupTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_876_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.Unit Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.Height%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.Unit" />, which indicates that the property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the Height property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the Height property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.ListViewItem InsertItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ListViewItem InsertItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the insert item of a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that represents the insert item of a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the InsertItem property to access the insert item of a <xref:System.Web.UI.WebControls.ListView> control. An insert item is a <xref:System.Web.UI.WebControls.ListViewItem> object whose <xref:System.Web.UI.WebControls.ListViewItem.ItemType%2A> is equal to <xref:System.Web.UI.WebControls.ListViewItemType?displayProperty=fullName>. The content of an insert item is defined by the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> property.  
  
   
  
## Examples  
 The following example shows how to get the insert item by using the InsertItem property to access controls that are contained in the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template.  
  
> [!IMPORTANT]
>  This example contains text boxes that accept user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.UI.WebControls.ListView.InsertItem#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1146_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.InsertItem#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1146_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertItemPosition">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.InsertItemPosition InsertItemPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.InsertItemPosition InsertItemPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Default")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.InsertItemPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the location of the &lt;xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A&gt; template when it is rendered as part of the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.InsertItemPosition" /> values. The default is <see cref="T:System.Web.UI.WebControls.InsertItemPosition" />, which indicates that the &lt;xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A&gt; content will not be rendered by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the available item position values.  
  
|Row type|Description|  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.InsertItemPosition?displayProperty=fullName>|Renders the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template as the first item in the <xref:System.Web.UI.WebControls.ListView> control.|  
|<xref:System.Web.UI.WebControls.InsertItemPosition?displayProperty=fullName>|Renders the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template as the last item in the <xref:System.Web.UI.WebControls.ListView> control.|  
|<xref:System.Web.UI.WebControls.InsertItemPosition?displayProperty=fullName>|Does not render the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template.|  
  
   
  
## Examples  
 The following example shows how to configure a <xref:System.Web.UI.WebControls.ListView> control to display the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ListView.ItemInserted> event.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemInserted#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_974_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemInserted#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_974_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate InsertItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate InsertItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListViewItem), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom content for an insert item in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object  that contains the custom content for the insert item in the <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the InsertItemTemplate property to define a custom user interface (UI) for the insert item in the <xref:System.Web.UI.WebControls.ListView> control. This UI is rendered either at the start or at the end of the displayed items. You specify where the UI is rendered by using the <xref:System.Web.UI.WebControls.ListView.InsertItemPosition%2A> property.  
  
 The InsertItemTemplate template usually contains the input controls for the user to enter the values for a new record. It also usually contains buttons or hyperlinks to insert the record and to cancel the insert operation.  
  
 To specify the custom template declaratively, add an `InsertItemTemplate` element inside the `ListView` element. You can then add the contents of the template to the `InsertItemTemplate` element. You can associate a field with an input control by using a two-way binding expression. When a record is inserted, the <xref:System.Web.UI.WebControls.ListView> control automatically extracts the field value from the associated input control. For more information, see [Data-Binding Expressions Overview](~/add/includes/ajax-current-ext-md.md).  
  
 To create buttons that perform the built-in cancel and insert operations, add a button control to the template. Set its <xref:System.Web.UI.WebControls.Button.CommandName%2A> property to one of the values listed in the following table.  
  
|Button type|CommandName value|  
|-----------------|-----------------------|  
|Cancel|"Cancel"|  
|Insert|"Insert"|  
  
 You can control the position of the insert item in the <xref:System.Web.UI.WebControls.ListView> control by using the <xref:System.Web.UI.WebControls.ListView.InsertItemPosition%2A> property.  
  
   
  
## Examples  
 The following example shows how to define a custom template for the insert item of a <xref:System.Web.UI.WebControls.ListView> control. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ListView.ItemInserted> event.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemInserted#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_711_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemInserted#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_711_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public virtual string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.WebCategory("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.WebSysDescription("DataBoundControl_InsertMethod")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method to call in order to insert data.</summary>
        <value>The name of the method.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property causes model binding to be used as the data-binding method.  
  
 For a tutorial series on using model binding with Web Forms, see [Model Binding and Web Forms](http://go.microsoft.com/fwlink/?LinkId=286117).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertNewItem">
      <MemberSignature Language="C#" Value="public virtual void InsertNewItem (bool causesValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertNewItem(bool causesValidation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="causesValidation">
          <see langword="true" /> to perform page validation when this method is called; otherwise, <see langword="false" />.</param>
        <summary>Inserts the current record in the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the InsertNewItem method to programmatically insert an item in the data source. This method is typically used to insert an item from outside the <xref:System.Web.UI.WebControls.ListView> control, such as from a different control on the page.  
  
 To use the InsertNewItem method, you must define an <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template in the <xref:System.Web.UI.WebControls.ListView> control. You must also set the <xref:System.Web.UI.WebControls.ListView.InsertItemPosition%2A> property to a value different from <xref:System.Web.UI.WebControls.InsertItemPosition?displayProperty=fullName>. To specify whether page validation is performed before the insert operation, use the `causesValidation` parameter.  
  
 This method raises the <xref:System.Web.UI.WebControls.ListView.ItemInserted> and <xref:System.Web.UI.WebControls.ListView.ItemInserting> events.  
  
   
  
## Examples  
 The following example shows how to use the InsertNewItem method to programmatically insert the contents of the insert item of a <xref:System.Web.UI.WebControls.ListView> control into the data source.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.InsertNewItem#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_140_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.InsertNewItem#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_140_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control does not have an insert item.  
  
 -or-  
  
 The <see cref="T:System.Web.UI.DataSourceView" /> object associated with the <see cref="T:System.Web.UI.WebControls.ListView" /> control is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstantiateEmptyDataTemplate">
      <MemberSignature Language="C#" Value="protected virtual void InstantiateEmptyDataTemplate (System.Web.UI.Control container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InstantiateEmptyDataTemplate(class System.Web.UI.Control container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="container">The container that is used to store the child controls in the &lt;xref:System.Web.UI.WebControls.ListView.EmptyDataTemplate%2A&gt; template.</param>
        <summary>Populates the specified <see cref="T:System.Web.UI.Control" /> object by using the child controls that are contained in the &lt;xref:System.Web.UI.WebControls.ListView.EmptyDataTemplate%2A&gt; template.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to populate the specified <xref:System.Web.UI.Control> object by using the child controls that are contained in the <xref:System.Web.UI.WebControls.ListView.EmptyDataTemplate%2A> template.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstantiateEmptyItemTemplate">
      <MemberSignature Language="C#" Value="protected virtual void InstantiateEmptyItemTemplate (System.Web.UI.Control container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InstantiateEmptyItemTemplate(class System.Web.UI.Control container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="container">The container that is used to store the child controls in the &lt;xref:System.Web.UI.WebControls.ListView.EmptyItemTemplate%2A&gt; template.</param>
        <summary>Populates the specified <see cref="T:System.Web.UI.Control" /> object by using the child controls that are contained in the &lt;xref:System.Web.UI.WebControls.ListView.EmptyItemTemplate%2A&gt; template.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to populate the <xref:System.Web.UI.Control> object by using the child controls that are contained in the <xref:System.Web.UI.WebControls.ListView.EmptyItemTemplate%2A> template.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstantiateGroupSeparatorTemplate">
      <MemberSignature Language="C#" Value="protected virtual void InstantiateGroupSeparatorTemplate (System.Web.UI.Control container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InstantiateGroupSeparatorTemplate(class System.Web.UI.Control container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="container">The container that is used to store the child controls in the &lt;xref:System.Web.UI.WebControls.ListView.GroupSeparatorTemplate%2A&gt; template.</param>
        <summary>Populates the specified <see cref="T:System.Web.UI.Control" /> object by using the child controls that are contained in the &lt;xref:System.Web.UI.WebControls.ListView.GroupSeparatorTemplate%2A&gt; template.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstantiateGroupTemplate">
      <MemberSignature Language="C#" Value="protected virtual void InstantiateGroupTemplate (System.Web.UI.Control container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InstantiateGroupTemplate(class System.Web.UI.Control container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="container">A container that is used to store the child controls in the &lt;xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A&gt; template.</param>
        <summary>Populates the specified <see cref="T:System.Web.UI.Control" /> object by using the child controls that are contained in the &lt;xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A&gt; template.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstantiateInsertItemTemplate">
      <MemberSignature Language="C#" Value="protected virtual void InstantiateInsertItemTemplate (System.Web.UI.Control container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InstantiateInsertItemTemplate(class System.Web.UI.Control container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="container">The container that is used to store the child controls in the &lt;xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A&gt; template.</param>
        <summary>Populates the specified <see cref="T:System.Web.UI.Control" /> object by using the child controls that are contained in the &lt;xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A&gt; template.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstantiateItemSeparatorTemplate">
      <MemberSignature Language="C#" Value="protected virtual void InstantiateItemSeparatorTemplate (System.Web.UI.Control container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InstantiateItemSeparatorTemplate(class System.Web.UI.Control container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="container">The container that is used to store the child controls in the &lt;xref:System.Web.UI.WebControls.ListView.ItemSeparatorTemplate%2A&gt; template.</param>
        <summary>Populates the specified <see cref="T:System.Web.UI.Control" /> object by using the child controls that are contained in the &lt;xref:System.Web.UI.WebControls.ListView.ItemSeparatorTemplate%2A&gt; template.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstantiateItemTemplate">
      <MemberSignature Language="C#" Value="protected virtual void InstantiateItemTemplate (System.Web.UI.Control container, int displayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InstantiateItemTemplate(class System.Web.UI.Control container, int32 displayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Web.UI.Control" />
        <Parameter Name="displayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="container">The container that is used to store the child controls.</param>
        <param name="displayIndex">The display index of the item that is being instantiated.</param>
        <summary>Populates the specified <see cref="T:System.Web.UI.Control" /> object by using child controls from one of the <see cref="T:System.Web.UI.WebControls.ListView" /> control templates.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses a different template depending on the mode of the item being instantiated and the settings of the <xref:System.Web.UI.WebControls.ListView> control. The InstantiateItemTemplate method uses one of the following templates to populate the container:  
  
-   <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A>  
  
-   <xref:System.Web.UI.WebControls.ListView.AlternatingItemTemplate%2A>  
  
-   <xref:System.Web.UI.WebControls.ListView.SelectedItemTemplate%2A>  
  
-   <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A>  
  
    > [!NOTE]
    >  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control does not have an &lt;xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A&gt; template specified.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsUsingModelBinders">
      <MemberSignature Language="C#" Value="protected override bool IsUsingModelBinders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUsingModelBinders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether model binding is in use.</summary>
        <value>
          <see langword="true" /> if model binding is in use, otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemCanceling">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewCancelEventArgs&gt; ItemCanceling;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewCancelEventArgs&gt; ItemCanceling" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewCancelEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cancel operation is requested, but before the <see cref="T:System.Web.UI.WebControls.ListView" /> control cancels the insert or edit operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView> control raises the ItemCanceling event when a Cancel button in the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> or <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template is clicked, but before the <xref:System.Web.UI.WebControls.ListView> control cancels the insert or edit operation. (A Cancel button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Cancel".) This enables you to perform a custom routine whenever this event occurs, such as stopping the cancel operation if it would put the item in an unwanted state.  
  
 A <xref:System.Web.UI.WebControls.ListViewCancelEventArgs> object is passed to the event handler, which enables you to determine the index of the item. It also lets you indicate that the cancel operation should be stopped. To stop the operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ListViewCancelEventArgs> object to `true`.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to create an ItemCanceling event handler.  
  
> [!IMPORTANT]
>  This example contains text boxes that accept user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemCanceling#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_58_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemCanceling#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_58_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemCommand">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewCommandEventArgs&gt; ItemCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewCommandEventArgs&gt; ItemCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewCommandEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a button in a <see cref="T:System.Web.UI.WebControls.ListView" /> control is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ItemCommand event is raised when a button in the <xref:System.Web.UI.WebControls.ListView> control is clicked. This enables you to perform a custom routine whenever this event occurs.  
  
 Buttons in a <xref:System.Web.UI.WebControls.ListView> control can also invoke built-in functionality of the control. The following table lists values that you can use with the <xref:System.Web.UI.WebControls.Button.CommandName%2A> property of a button in order to invoke built-in functionality.  
  
|CommandName value|Description|  
|-----------------------|-----------------|  
|"Cancel"|Cancels an edit or insert operation. Raises the <xref:System.Web.UI.WebControls.ListView.ItemCanceling> event.|  
|"Delete"|Deletes the current record from the data source. Raises the <xref:System.Web.UI.WebControls.ListView.ItemDeleted> and <xref:System.Web.UI.WebControls.ListView.ItemDeleting> events.|  
|"Select"|Sets the <xref:System.Web.UI.WebControls.ListView.SelectedIndex%2A> property to the <xref:System.Web.UI.WebControls.ListViewDataItem.DisplayIndex%2A> property value for the item. Renders the <xref:System.Web.UI.WebControls.ListView.SelectedItemTemplate%2A> template for the item. Raises the <xref:System.Web.UI.WebControls.ListView.SelectedIndexChanging> and <xref:System.Web.UI.WebControls.ListView.SelectedIndexChanged> events.|  
|"Edit"|Puts the item in edit mode. Renders the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template for the item. Raises the <xref:System.Web.UI.WebControls.ListView.ItemEditing> event.|  
|"Insert"|Inserts the bound values from the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template into the data source. Raises the <xref:System.Web.UI.WebControls.ListView.ItemInserting> and <xref:System.Web.UI.WebControls.ListView.ItemInserted> events.|  
|"Update"|Updates the current record in the data source with the bound values from the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template. Raises the <xref:System.Web.UI.WebControls.ListView.ItemUpdating> and <xref:System.Web.UI.WebControls.ListView.ItemUpdated> events.|  
|"Sort"|Sorts the columns listed in the `CommandArgument` property of the button. Raises the <xref:System.Web.UI.WebControls.ListView.Sorting> and <xref:System.Web.UI.WebControls.ListView.Sorted> events.|  
  
 The ItemCommand event is also raised when a button that is listed in the previous table is clicked. However, it is recommended that you use the events listed in the table. The ItemCommand event is usually used to handle custom operations.  
  
 A <xref:System.Web.UI.WebControls.ListViewCommandEventArgs> object is passed to the event handler, which enables you to determine the command name and command argument of the button that was clicked. To determine the command name, use the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A?displayProperty=fullName> property. To determine the command argument, use the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A?displayProperty=fullName> property. To access the control that raised the event, use the <xref:System.Web.UI.WebControls.ListViewCommandEventArgs.CommandSource%2A?displayProperty=fullName> property.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to create an ItemCommand event handler.  
  
 [!code-cs[System.Web.UI.WebControls.ListViewItemCommand#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_27_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListViewItemCommand#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_27_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewItemEventArgs&gt; ItemCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewItemEventArgs&gt; ItemCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewItemEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an item is created in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.ListView> control can be rendered, a <xref:System.Web.UI.WebControls.ListViewItem> object must be created for each item in the control. The ItemCreated event is raised when each item in the <xref:System.Web.UI.WebControls.ListView> control is created. This enables you to perform a custom routine whenever this event occurs, such as adding custom content to an item.  
  
 A <xref:System.Web.UI.WebControls.ListViewItemEventArgs> object is passed to the event handler, which enables you to access the properties of the item that is being created. To access a specific control in the item, use the <xref:System.Web.UI.Control.FindControl%2A> method of the <xref:System.Web.UI.WebControls.ListViewItem> object that is contained in the <xref:System.Web.UI.WebControls.ListViewItemEventArgs.Item%2A> property of the <xref:System.Web.UI.WebControls.ListViewItemEventArgs> object. You can determine which item type (data item, insert item, empty item) is being created by using the <xref:System.Web.UI.WebControls.ListViewItem.ItemType%2A> property.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemDataBound">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewItemEventArgs&gt; ItemDataBound;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewItemEventArgs&gt; ItemDataBound" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewItemEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a data item is bound to data in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.ListView> control can be rendered, each item in the control must be bound to a record in the data source. The ItemDataBound event is raised when a data item is bound to data in the <xref:System.Web.UI.WebControls.ListView> control. (Data items are represented by <xref:System.Web.UI.WebControls.ListViewDataItem> objects.) This enables you to perform a custom routine whenever this event occurs, such as modifying the values of the data that is bound to the item.  
  
 A <xref:System.Web.UI.WebControls.ListViewItemEventArgs> object is passed to the event handler, which enables you to access the properties of the item that is being bound. To access a specific control in the item, use the <xref:System.Web.UI.Control.FindControl%2A> method of the <xref:System.Web.UI.WebControls.ListViewItem> object that is contained in the <xref:System.Web.UI.WebControls.ListViewItemEventArgs.Item%2A> property of the <xref:System.Web.UI.WebControls.ListViewItemEventArgs> object. You can determine which item type (data item, insert item, empty item) is being bound by using the <xref:System.Web.UI.WebControls.ListViewItem.ItemType%2A> property.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to use the ItemDataBound event.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemDataBound#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_30_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemDataBound#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_30_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemDeleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewDeletedEventArgs&gt; ItemDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewDeletedEventArgs&gt; ItemDeleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewDeletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a delete operation is requested, after the <see cref="T:System.Web.UI.WebControls.ListView" /> control deletes the item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ItemDeleted event is raised when an item's Delete button is clicked or the <xref:System.Web.UI.WebControls.ListView.DeleteItem%2A> method is called, after the <xref:System.Web.UI.WebControls.ListView> control deletes the item. (A Delete button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Delete".) This enables you to perform a custom routine whenever this event occurs, such as checking the results of the delete operation.  
  
 A <xref:System.Web.UI.WebControls.ListViewDeletedEventArgs> object is passed to the event handler, which enables you to determine the number of rows that were affected in the data source. It also lets you determine what exceptions might have occurred. You can indicate whether the exception was handled in the event handler by setting the <xref:System.Web.UI.WebControls.ListViewDeletedEventArgs.ExceptionHandled%2A> property of the <xref:System.Web.UI.WebControls.ListViewDeletedEventArgs> object to `true`.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to add an event handler for the ItemDeleted event.  
  
 [!code-cs[System.Web.UI.WebControls.ListViewDeletedEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_131_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListViewDeletedEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_131_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemDeleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewDeleteEventArgs&gt; ItemDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewDeleteEventArgs&gt; ItemDeleting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a delete operation is requested, but before the <see cref="T:System.Web.UI.WebControls.ListView" /> control deletes the item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ItemDeleting event is raised when an item's Delete button is clicked or the <xref:System.Web.UI.WebControls.ListView.DeleteItem%2A> method is called, but before the <xref:System.Web.UI.WebControls.ListView> control deletes the item. (A Delete button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Delete".) This enables you to perform a custom routine whenever this event occurs, such as canceling the delete operation.  
  
 A <xref:System.Web.UI.WebControls.ListViewDeleteEventArgs> object is passed to the event handler, which enables you to determine the index of the current item. It also lets you indicate that the delete operation should be canceled. To cancel the delete operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ListViewDeleteEventArgs> object to `true`. You can also work with the <xref:System.Web.UI.WebControls.ListViewDeleteEventArgs.Keys%2A> and <xref:System.Web.UI.WebControls.ListViewDeleteEventArgs.Values%2A> collections before the values are passed to the data source.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to declaratively add an event handler for the ItemDeleting event.  
  
 [!code-vb[System.Web.UI.WebControls.ListViewItemDeleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_57_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListViewItemDeleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_57_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemEditing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewEditEventArgs&gt; ItemEditing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewEditEventArgs&gt; ItemEditing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewEditEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an edit operation is requested, but before the <see cref="T:System.Web.UI.WebControls.ListView" /> item is put in edit mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ItemEditing event is raised when an item's Edit button is clicked, but before the <xref:System.Web.UI.WebControls.ListView> item is put in edit mode. (An Edit button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Edit".) This enables you to perform a custom routine whenever this event occurs, such as canceling the edit operation.  
  
 A <xref:System.Web.UI.WebControls.ListViewEditEventArgs> object is passed to the event handler, which enables you to determine the index of the current item. It also lets you indicate that the edit operation should be canceled. To cancel the edit operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ListViewEditEventArgs> object to `true`.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to add an event handler for the ItemEditing event.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemEditing#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_78_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemEditing#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_78_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemInserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewInsertedEventArgs&gt; ItemInserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewInsertedEventArgs&gt; ItemInserted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewInsertedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an insert operation is requested, after the <see cref="T:System.Web.UI.WebControls.ListView" /> control has inserted the item in the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView> control raises the ItemInserted event when an Insert button in the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template is clicked or the <xref:System.Web.UI.WebControls.ListView.InsertNewItem%2A> method is called, after the <xref:System.Web.UI.WebControls.ListView> control inserts the item in the data source. (An Insert button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Insert".) This enables you to perform a custom routine whenever this event occurs, such as checking the results of an insert operation.  
  
 A <xref:System.Web.UI.WebControls.ListViewInsertedEventArgs> object is passed to the event handler, which enables you to determine the number of records affected. It also lets you determine what exceptions might have occurred. To determine the number of records that were affected by the insert operation, use the <xref:System.Web.UI.WebControls.ListViewInsertedEventArgs.AffectedRows%2A> property. To determine whether any exceptions occurred, use the <xref:System.Web.UI.WebControls.ListViewInsertedEventArgs.Exception%2A> property. You can also indicate whether the exception was handled in the event handler by setting the <xref:System.Web.UI.WebControls.ListViewInsertedEventArgs.ExceptionHandled%2A> property. If you want to access the values of the inserted record, use the <xref:System.Web.UI.WebControls.ListViewInsertedEventArgs.Values%2A> property.  
  
 If the <xref:System.Web.UI.WebControls.ListViewInsertedEventArgs.AffectedRows%2A> property reports that no items were inserted, you can rebind the insert values to the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template by setting the <xref:System.Web.UI.WebControls.ListViewInsertedEventArgs.KeepInInsertMode%2A> property to `true`.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to add an event handler for the ItemInserted event.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemInserted#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_92_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemInserted#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_92_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemInserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewInsertEventArgs&gt; ItemInserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewInsertEventArgs&gt; ItemInserting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an insert operation is requested, but before the <see cref="T:System.Web.UI.WebControls.ListView" /> control performs the insert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView> control raises the ItemInserting event when an Insert button in the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template is clicked or the <xref:System.Web.UI.WebControls.ListView.InsertNewItem%2A> method is called, but before the <xref:System.Web.UI.WebControls.ListView> control inserts the record. (An Insert button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Insert".) This enables you to perform a custom routine whenever this event occurs, such as HTML-encoding the values of a record before it is inserted in the data source.  
  
 A <xref:System.Web.UI.WebControls.ListViewInsertEventArgs> object is passed to the event handler, which enables you to determine the value of an optional command argument sent to the <xref:System.Web.UI.WebControls.ListView> control. It also lets you indicate that the insert operation should be canceled. To cancel the insert operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`. You can read or modify the field values for the new record by using the <xref:System.Web.UI.WebControls.ListViewInsertEventArgs.Values%2A> property.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to add an event handler for the ItemInserting event.  
  
> [!IMPORTANT]
>  This example contains controls that accept user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemInserting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_99_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemInserting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_99_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemPlaceholderID">
      <MemberSignature Language="C#" Value="public virtual string ItemPlaceholderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ItemPlaceholderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("itemPlaceholder")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ID for the item placeholder in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The ID for the item placeholder in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is "itemPlaceholder".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ItemPlaceholderID property to specify an ID for the item placeholder. The item placeholder is the control that you add to the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> template (if you are not using groups) or to the <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> template (if you are using groups) to represent where the item will be rendered.  
  
   
  
## Examples  
 The following example shows how to use the ItemPlaceholderID property to specify an ID for the item placeholder of the <xref:System.Web.UI.WebControls.ListView> control.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.ItemContainerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_432_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemContainerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_432_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified ID is <see langword="null" /> or an empty string.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Web.UI.WebControls.ListViewDataItem&gt; Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Web.UI.WebControls.ListViewDataItem&gt; Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.UI.WebControls.ListViewDataItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.ListViewDataItem" /> objects that represent the data items of the current page of data in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that contains all the data items of the current page of data in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Items property is used to store the data items in a <xref:System.Web.UI.WebControls.ListView> control. The <xref:System.Web.UI.WebControls.ListView> control automatically populates the Items collection by creating one <xref:System.Web.UI.WebControls.ListViewDataItem> object for each record in the current page of data in the data source. It then adds each object to the collection. This property is usually used to access a specific item in the control or to iterate though the complete collection of items.  
  
   
  
## Examples  
 The following example shows how to use the Items collection to access the item that is being edited in a <xref:System.Web.UI.WebControls.ListView> control. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ListView.ItemEditing> event.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemEditing#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_862_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemEditing#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_862_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemSeparatorTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ItemSeparatorTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ItemSeparatorTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListViewItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom content for the separator between the items in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that contains the custom content for the separator between the items of the <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ItemSeparatorTemplate property to define the contents of the separator between single items of the <xref:System.Web.UI.WebControls.ListView> control. The ItemSeparatorTemplate is displayed after every item except the last one.  
  
 To specify the custom template declaratively, add an `ItemSeparatorTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. You can then add the contents of the template to the `ItemSeparatorTemplate` element.  
  
   
  
## Examples  
 The following example shows how to create an item separator in the <xref:System.Web.UI.WebControls.ListView> control by using the ItemSeparatorTemplate property.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.GroupTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_126_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.GroupTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_126_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListViewDataItem), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom content for the data item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that contains the custom content for the data item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ItemTemplate property to define a custom user interface (UI) to display the data items. The ItemTemplate template is required by the <xref:System.Web.UI.WebControls.ListView> control. It usually contains controls to display the field values of a record. If you want to let users modify the data, you also usually add buttons to the ItemTemplate template that let the user select a record, switch to edit mode, or delete a record.  
  
 To specify the custom template declaratively, add an `ItemTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. You can then add the contents of the template to the `ItemTemplate` element. To display the field values of the data source that is bound to the control, use a data-binding expression. For more information, see [Data-Binding Expressions Overview](~/add/includes/ajax-current-ext-md.md).  
  
 To create buttons that perform the built-in select, delete, and edit operations, add a button control to the template. Set its <xref:System.Web.UI.WebControls.Button.CommandName%2A> property to one of the values listed in the following table.  
  
|Button type|CommandName value|  
|-----------------|-----------------------|  
|Delete|"Delete"|  
|Edit|"Edit"|  
|Select|"Select"|  
  
   
  
## Examples  
 The following example shows how to define a custom template for a data item in the <xref:System.Web.UI.WebControls.ListView> control.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.EditItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_937_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.EditItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_937_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewUpdatedEventArgs&gt; ItemUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewUpdatedEventArgs&gt; ItemUpdated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an update operation is requested, after the <see cref="T:System.Web.UI.WebControls.ListView" /> control updates the item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ItemUpdated event is raised when an item's Update button is clicked or the <xref:System.Web.UI.WebControls.ListView.UpdateItem%2A> method is called, after the <xref:System.Web.UI.WebControls.ListView> control updates the item. (An Update button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Update".) This enables you to perform a custom routine whenever this event occurs, such as checking the results of the update operation.  
  
 A <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> object is passed to the event handler, which enables you to determine the number of rows affected. It also lets you determine what exceptions might have occurred. You can indicate whether the exception was handled in the event handler by setting the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A> property of the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> object.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to add an event handler for the ItemUpdated event.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_108_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemUpdated#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_108_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemUpdating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewUpdateEventArgs&gt; ItemUpdating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewUpdateEventArgs&gt; ItemUpdating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an update operation is requested, but before the <see cref="T:System.Web.UI.WebControls.ListView" /> control updates the item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ItemUpdating event is raised when an item's Update button is clicked or the <xref:System.Web.UI.WebControls.ListView.UpdateItem%2A> method is called, but before the <xref:System.Web.UI.WebControls.ListView> control updates the item. (An Update button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Update".) This enables you to perform a custom routine whenever this event occurs, such as canceling the update operation.  
  
 A <xref:System.Web.UI.WebControls.ListViewUpdateEventArgs> object is passed to the event handler, which enables you to determine the index of the current item. It also lets you indicate that the update operation should be canceled. To cancel the update operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ListViewUpdateEventArgs> object to `true`.  
  
 You can work with the <xref:System.Web.UI.WebControls.ListViewDeleteEventArgs.Keys%2A>, <xref:System.Web.UI.WebControls.ListViewUpdateEventArgs.OldValues%2A>, and <xref:System.Web.UI.WebControls.ListViewUpdateEventArgs.NewValues%2A> collections before the values are passed to the data source. A typical way to use these collections is to HTML-encode the values supplied by the user before they are stored in the data source. This helps prevent script injection attacks.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how to add an event handler for the ItemUpdating event.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_10_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemUpdating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_10_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LayoutCreated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A&gt; template is created in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.ListView> control can be rendered, the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> template must be created to serve as the root container for the control. The LayoutCreated event is raised when the layout template in the <xref:System.Web.UI.WebControls.ListView> control is created. This enables you to perform a custom routine whenever this event occurs.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LayoutTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate LayoutTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate LayoutTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom content for the root container in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that contains the custom content for the root container in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the LayoutTemplate property to define a custom user interface (UI) for the root container of the <xref:System.Web.UI.WebControls.ListView> control.  
  
 To specify the layout template, add a `LayoutTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. You can then add the contents of the template to the `LayoutTemplate` element.  
  
 The LayoutTemplate content must include a placeholder control such as a table row (`tr`) element for the items that are defined by the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> template or for groups that are defined by the <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> template. The placeholder control must have the `runat` attribute set to "server" and the `ID` attribute set to the value of the <xref:System.Web.UI.WebControls.ListView.ItemPlaceholderID%2A> or the <xref:System.Web.UI.WebControls.ListView.GroupPlaceholderID%2A> property, depending on whether the <xref:System.Web.UI.WebControls.ListView> control is using groups.  
  
 The LayoutTemplate template is not required by the <xref:System.Web.UI.WebControls.ListView> control. You can use the <xref:System.Web.UI.WebControls.ListView> control without a LayoutTemplate and also without a placeholder server control with a known ID.  
  
   
  
## Examples  
 The following example shows how to define a custom template for the root container in the <xref:System.Web.UI.WebControls.ListView> control.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.EditItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1277_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.EditItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1277_1.aspx)]  
  
 The following example shows how to use the <xref:System.Web.UI.WebControls.ListView> control without defining a LayoutTemplate template in the control. A server control with a known ID is also not specified.  
  
```  
<asp:ListView ID="ListView1" runat="server">  
  <ItemTemplate>  
    <% Eval("LastName")%>  
  </ItemTemplate>  
</asp:ListView>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An object that contains the saved control state values for the control.</param>
        <summary>Loads the state of the properties in the <see cref="T:System.Web.UI.WebControls.ListView" /> control that must be persisted, even when the &lt;xref:System.Web.UI.Control.EnableViewState%2A&gt; property is set to <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An object that contains the saved view state values for the control.</param>
        <summary>Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is primarily used by the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] infrastructure and is not intended to be used directly from your code. However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaximumRows">
      <MemberSignature Language="C#" Value="protected virtual int MaximumRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the maximum number of items to display on a single page of the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The maximum number of items to display on a single page of the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a <xref:System.Web.UI.WebControls.DataPager> object is associated with the <xref:System.Web.UI.WebControls.ListView> control, the MaximumRows property value is controlled by the <xref:System.Web.UI.WebControls.DataPager> object, and it is same as the <xref:System.Web.UI.WebControls.DataPager.PageSize%2A> property value. Otherwise, the value is -1.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">The source of the event.</param>
        <param name="e">The event data.</param>
        <summary>Determines whether an event for the <see cref="T:System.Web.UI.WebControls.ListView" /> control should be handled.</summary>
        <returns>
          <see langword="true" /> if the event should be handled; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnBubbleEvent method is used by the <xref:System.Web.UI.WebControls.ListView> control to optionally handle events that are passed up through the control hierarchy. It determines whether to handle an event by examining the properties of the <xref:System.EventArgs> object that are contained in the `e` parameter. When an event must be handled, the method performs the appropriate action. Other events are ignored and passed up the control hierarchy. The return value of this method indicates whether to handle the event or to pass the event up the control hierarchy.  
  
 The <xref:System.Web.UI.WebControls.ListView> control overrides the base implementation of this method to perform the appropriate action when one of the buttons that is recognized by the control is clicked. The following table lists the buttons that the <xref:System.Web.UI.WebControls.ListView> control recognizes.  
  
|CommandName value|Description|  
|-----------------------|-----------------|  
|"Cancel"|Cancels an edit or insert operation. Raises the <xref:System.Web.UI.WebControls.ListView.ItemCanceling> event.|  
|"Delete"|Deletes the current record from the data source. Raises the <xref:System.Web.UI.WebControls.ListView.ItemDeleted> and <xref:System.Web.UI.WebControls.ListView.ItemDeleting> events.|  
|"Select"|Sets the <xref:System.Web.UI.WebControls.ListView.SelectedIndex%2A> property to the <xref:System.Web.UI.WebControls.ListViewDataItem.DisplayIndex%2A> property value for the item. Renders the <xref:System.Web.UI.WebControls.ListView.SelectedItemTemplate%2A> template for the item. Raises the <xref:System.Web.UI.WebControls.ListView.SelectedIndexChanging> and <xref:System.Web.UI.WebControls.ListView.SelectedIndexChanged> events.|  
|"Edit"|Puts the item in edit mode. Renders the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template for the item. Raises the <xref:System.Web.UI.WebControls.ListView.ItemEditing> event.|  
|"Insert"|Inserts the bound values from the <xref:System.Web.UI.WebControls.ListView.InsertItemTemplate%2A> template into the data source. Raises the <xref:System.Web.UI.WebControls.ListView.ItemInserting> and <xref:System.Web.UI.WebControls.ListView.ItemInserted> events.|  
|"Update"|Updates the current record in the data source with the bound values from the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> template. Raises the <xref:System.Web.UI.WebControls.ListView.ItemUpdating> and <xref:System.Web.UI.WebControls.ListView.ItemUpdated> events.|  
|"Sort"|Sorts the columns listed in the `CommandArgument` property of the button. Raises the <xref:System.Web.UI.WebControls.ListView.Sorting> and <xref:System.Web.UI.WebControls.ListView.Sorted> events.|  
  
 This version of the method returns `true` if one of these buttons raises an event that is handled by the control. For more information about event bubbling, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When notified by this method, Web server controls must perform any initialization steps that are required to create and set up an instance. In this stage of the server control's life cycle, the control's view state has not yet been populated. Additionally, you cannot access other server controls when this method is called, regardless of whether it is a child or parent of this control. Other server controls are not guaranteed to be created and ready for access.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnInit method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemCanceling">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCanceling (System.Web.UI.WebControls.ListViewCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCanceling(class System.Web.UI.WebControls.ListViewCancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemCanceling" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView> control raises the <xref:System.Web.UI.WebControls.ListView.ItemCanceling> event when a Cancel button in the control is clicked, but before exiting insert or edit mode. (A Cancel button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Cancel".) This enables you to perform a custom routine whenever this event occurs, such as stopping the cancel operation if it would put the item in an unwanted state.  
  
 The OnItemCanceling method is called by the <xref:System.Web.UI.WebControls.ListView> control to raise the <xref:System.Web.UI.WebControls.ListView.ItemCanceling> event. It is typically used by control developers when extending the <xref:System.Web.UI.WebControls.ListView> class.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemCanceling method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">There is no handler for the <see cref="E:System.Web.UI.WebControls.ListView.ItemCanceling" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCommand (System.Web.UI.WebControls.ListViewCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCommand(class System.Web.UI.WebControls.ListViewCommandEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemCommand" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.ItemCommand> event is raised when a button in an item template is clicked, but before the command is executed. This enables you to perform a custom routine in response to the supplied <xref:System.Web.UI.WebControls.Button.CommandName%2A> or <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> value whenever this event occurs.  
  
 The OnItemCommand method is called by the <xref:System.Web.UI.WebControls.ListView> control to raise the <xref:System.Web.UI.WebControls.ListView.ItemCommand> event. It is typically used by control developers when extending the <xref:System.Web.UI.WebControls.ListView> class.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemCommand method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCreated (System.Web.UI.WebControls.ListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCreated(class System.Web.UI.WebControls.ListViewItemEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemCreated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.ListView> control can be rendered, a <xref:System.Web.UI.WebControls.ListViewItem> object must be created for each item in the control. The <xref:System.Web.UI.WebControls.ListView.ItemCreated> event is raised when each item in the <xref:System.Web.UI.WebControls.ListView> control is created. This enables you to perform a custom routine whenever this event occurs, such as adding content to an item.  
  
 The OnItemCreated method is called by the <xref:System.Web.UI.WebControls.ListView> control to raise the <xref:System.Web.UI.WebControls.ListView.ItemCreated> event. It is typically used by control developers when extending the <xref:System.Web.UI.WebControls.ListView> class.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemCreated method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemDataBound">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDataBound (System.Web.UI.WebControls.ListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDataBound(class System.Web.UI.WebControls.ListViewItemEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemDataBound" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.ListView> control can be rendered, each item in the control must be bound to a record in the data source. The <xref:System.Web.UI.WebControls.ListView.ItemDataBound> event is raised when a <xref:System.Web.UI.WebControls.ListViewItem> object is bound to a data item. This enables you to perform a custom routine whenever this event occurs, such as modifying the values of the data item during the binding process.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemDataBound method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleted (System.Web.UI.WebControls.ListViewDeletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDeleted(class System.Web.UI.WebControls.ListViewDeletedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewDeletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemDeleted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.ItemDeleted> event is raised when an item's Delete button is clicked or the <xref:System.Web.UI.WebControls.ListView.DeleteItem%2A> method is called, after the <xref:System.Web.UI.WebControls.ListView> control deletes the item. (A Delete button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Delete".) This enables you to perform a custom routine whenever this event occurs, such as checking the results of the delete operation.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemDeleted method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleting (System.Web.UI.WebControls.ListViewDeleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDeleting(class System.Web.UI.WebControls.ListViewDeleteEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewDeleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemDeleting" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.ItemDeleting> event is raised when an item's Delete button is clicked or the <xref:System.Web.UI.WebControls.ListView.DeleteItem%2A> method is called, but before the <xref:System.Web.UI.WebControls.ListView> control deletes the item. (A Delete button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Delete".) This enables you to perform a custom routine whenever this event occurs, such as canceling the delete operation.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemDeleting method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control is not bound to a data source control by using the &lt;xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A&gt; property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemEditing">
      <MemberSignature Language="C#" Value="protected virtual void OnItemEditing (System.Web.UI.WebControls.ListViewEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemEditing(class System.Web.UI.WebControls.ListViewEditEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemEditing" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.ItemEditing> event is raised when an item's Edit button is clicked, but before the <xref:System.Web.UI.WebControls.ListView> control enters edit mode. (An Edit button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Edit".) This enables you to perform a custom routine whenever this event occurs, such as canceling the edit operation.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemEditing method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control is not bound to a data source control by using the &lt;xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A&gt; property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserted (System.Web.UI.WebControls.ListViewInsertedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemInserted(class System.Web.UI.WebControls.ListViewInsertedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewInsertedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemInserted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.ItemInserted> event is raised when an item's Insert button is clicked or the <xref:System.Web.UI.WebControls.ListView.InsertNewItem%2A> method is called, after the <xref:System.Web.UI.WebControls.ListView> control inserts the item. (An Insert button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Insert".) This enables you to perform a custom routine whenever this event occurs, such as retrieving auto-generated values from the database for the inserted item.  
  
 The OnItemInserted method is called by the <xref:System.Web.UI.WebControls.ListView> control to raise the <xref:System.Web.UI.WebControls.ListView.ItemInserted> event. It is typically used by control developers when extending the <xref:System.Web.UI.WebControls.ListView> class.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemInserted method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserting (System.Web.UI.WebControls.ListViewInsertEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemInserting(class System.Web.UI.WebControls.ListViewInsertEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewInsertEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemInserting" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView> control raises the <xref:System.Web.UI.WebControls.ListView.ItemInserting> event when an Insert button in the control is clicked or the <xref:System.Web.UI.WebControls.ListView.InsertNewItem%2A> method is called, but before the <xref:System.Web.UI.WebControls.ListView> control inserts the record. (An Insert button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Insert".) This enables you to perform a custom routine whenever this event occurs, such as HTML-encoding or validating the values of a record before it is inserted in the data source.  
  
 The OnItemInserting method is called by the <xref:System.Web.UI.WebControls.ListView> control to raise the <xref:System.Web.UI.WebControls.ListView.ItemInserting> event. It is typically used by control developers when extending the <xref:System.Web.UI.WebControls.ListView> class.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemInserting method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control is not bound to a data source control by using the &lt;xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A&gt; property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdated (System.Web.UI.WebControls.ListViewUpdatedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemUpdated(class System.Web.UI.WebControls.ListViewUpdatedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.ItemUpdated> event is raised when an item's Update button is clicked or the <xref:System.Web.UI.WebControls.ListView.UpdateItem%2A> method is called, after the <xref:System.Web.UI.WebControls.ListView> control updates the item. (An Update button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Update".) This enables you to perform a custom routine whenever this event occurs, such as checking the results of the update operation.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemUpdated method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdating (System.Web.UI.WebControls.ListViewUpdateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemUpdating(class System.Web.UI.WebControls.ListViewUpdateEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewUpdateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.ItemUpdating" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.ItemUpdating> event is raised when an item's Update button is clicked or the <xref:System.Web.UI.WebControls.ListView.UpdateItem%2A> method is called, but before the <xref:System.Web.UI.WebControls.ListView> control updates the item. (An Update button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Update".) This enables you to perform a custom routine whenever this event occurs, such as canceling the update operation.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnItemUpdating method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control is not bound to a data source control by using the &lt;xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A&gt; property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLayoutCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnLayoutCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayoutCreated(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.LayoutCreated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.ListView> control can be rendered, a <xref:System.Web.UI.WebControls.ListViewItem> object must be created to act as the container for the control. The <xref:System.Web.UI.WebControls.ListView.LayoutCreated> event is raised when the layout template is created in the <xref:System.Web.UI.WebControls.ListView> control. This enables you to perform a custom routine whenever this event occurs, such as changing the visibility of a control that is inside the <xref:System.Web.UI.WebControls.ListView.LayoutTemplate%2A> template.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnLayoutCreated method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPagePropertiesChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPagePropertiesChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPagePropertiesChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.PagePropertiesChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.PagePropertiesChanged> event is raised when the page properties change, after the <xref:System.Web.UI.WebControls.ListView> control sets the new values by using the <xref:System.Web.UI.WebControls.ListView.SetPageProperties%2A> method. This enables you to perform a custom routine, such as a custom paging operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnPagePropertiesChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPagePropertiesChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPagePropertiesChanging (System.Web.UI.WebControls.PagePropertiesChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPagePropertiesChanging(class System.Web.UI.WebControls.PagePropertiesChangingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.PagePropertiesChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.PagePropertiesChanging" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.PagePropertiesChanging> event is raised when the page properties change, but before the <xref:System.Web.UI.WebControls.ListView> control sets the new values by using the <xref:System.Web.UI.WebControls.ListView.SetPageProperties%2A> method. This enables you to perform a custom routine whenever this event occurs, such as clearing the <xref:System.Web.UI.WebControls.ListView.SelectedIndex%2A> or <xref:System.Web.UI.WebControls.ListView.EditIndex%2A> properties.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnPagePropertiesChanging method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.SelectedIndexChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.SelectedIndexChanged> event is raised when an item's Select button is clicked, after the <xref:System.Web.UI.WebControls.ListView> control handles the select operation. (A Select button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Select".) This enables you to perform a custom routine whenever this event occurs, such as updating a status label with the currently selected item.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSelectedIndexChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanging (System.Web.UI.WebControls.ListViewSelectEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanging(class System.Web.UI.WebControls.ListViewSelectEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewSelectEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.SelectedIndexChanging" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.SelectedIndexChanging> event is raised when an item's Select button is clicked, but before the <xref:System.Web.UI.WebControls.ListView> control handles the select operation. (A Select button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Select".) This enables you to perform a custom routine whenever this event occurs, such as canceling the selection operation.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSelectedIndexChanging method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">There is no handler for the <see cref="E:System.Web.UI.WebControls.ListView.SelectedIndexChanging" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSorted">
      <MemberSignature Language="C#" Value="protected virtual void OnSorted (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSorted(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.Sorted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.Sorted> event is raised when a Sort button is clicked or the <xref:System.Web.UI.WebControls.ListView.Sort%2A> method is called, after the <xref:System.Web.UI.WebControls.ListView> control handles the sort operation. (A Sort button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Sort".) This enables you to perform a custom routine whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSorted method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSorting">
      <MemberSignature Language="C#" Value="protected virtual void OnSorting (System.Web.UI.WebControls.ListViewSortEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSorting(class System.Web.UI.WebControls.ListViewSortEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ListViewSortEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ListView.Sorting" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.Sorting> event is raised when a Sort button is clicked or the <xref:System.Web.UI.WebControls.ListView.Sort%2A> method is called, but before the <xref:System.Web.UI.WebControls.ListView> control handles the sort operation. (A Sort button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Sort".) This enables you to perform a custom routine whenever this event occurs, such as canceling the sorting operation.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSorting method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control is not bound to a data source control by using the &lt;xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A&gt; property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnTotalRowCountAvailable">
      <MemberSignature Language="C#" Value="protected virtual void OnTotalRowCountAvailable (System.Web.UI.WebControls.PageEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTotalRowCountAvailable(class System.Web.UI.WebControls.PageEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.PageEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Raises the &lt;xref:System.Web.UI.WebControls.ListView.System%23Web%23UI%23WebControls%23IPageableItemContainer%23TotalRowCountAvailable&gt; event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.System%23Web%23UI%23WebControls%23IPageableItemContainer%23TotalRowCountAvailable> event is raised when data is available for the <xref:System.Web.UI.WebControls.DataPager> control.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnTotalRowCountAvailable method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PagePropertiesChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PagePropertiesChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PagePropertiesChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the page properties change, after the <see cref="T:System.Web.UI.WebControls.ListView" /> control sets the new values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PagePropertiesChanged event is raised when the page properties change, after the <xref:System.Web.UI.WebControls.ListView> control sets the new values by using the <xref:System.Web.UI.WebControls.ListView.SetPageProperties%2A> method. This enables you to perform a custom routine whenever this event occurs, such as clearing the selected item or performing a custom paging operation.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PagePropertiesChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.PagePropertiesChangingEventArgs&gt; PagePropertiesChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.PagePropertiesChangingEventArgs&gt; PagePropertiesChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.PagePropertiesChangingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the page properties change, but before the <see cref="T:System.Web.UI.WebControls.ListView" /> control sets the new values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PagePropertiesChanging event is raised when the page properties change, but before the <xref:System.Web.UI.WebControls.ListView> control sets the new values by using the <xref:System.Web.UI.WebControls.ListView.SetPageProperties%2A> method. This enables you to perform a custom routine whenever this event occurs, such as clearing the <xref:System.Web.UI.WebControls.ListView.SelectedIndex%2A> or <xref:System.Web.UI.WebControls.ListView.EditIndex%2A> properties.  
  
 A <xref:System.Web.UI.WebControls.PagePropertiesChangingEventArgs> object is passed to the event handler, which enables you to determine the index of the first record displayed on the page. It also lets you determine the maximum number of items to display on a single page.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how create an event handler for the PagePropertiesChanging event.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.DeleteItem#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_154_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.DeleteItem#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_154_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PerformDataBinding">
      <MemberSignature Language="C#" Value="protected override void PerformDataBinding (System.Collections.IEnumerable data);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void PerformDataBinding(class System.Collections.IEnumerable data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="data">An object that implements the &lt;xref:System.Collections.IEnumerable?displayProperty=fullName&gt; interface and that contains the data.</param>
        <summary>Binds the <see cref="T:System.Web.UI.WebControls.ListView" /> control to the specified data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PerformDataBinding method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control to bind the control to the specified data source.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PerformSelect">
      <MemberSignature Language="C#" Value="protected override void PerformSelect ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void PerformSelect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves data from the associated data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.PerformDataBinding%2A> method is called after data is retrieved in order to bind the data-bound control to data. For more information, see <xref:System.Web.UI.WebControls.DataBoundControl.PerformSelect%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveItems">
      <MemberSignature Language="C#" Value="protected virtual void RemoveItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RemoveItems() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deletes all child controls in an item or group container of the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to delete all child controls in an item or group container of the <xref:System.Web.UI.WebControls.ListView> control. If you have a <xref:System.Web.UI.WebControls.ListView.GroupTemplate%2A> template defined in the <xref:System.Web.UI.WebControls.ListView> control, the RemoveItems method will remove all the child controls in the group container. Otherwise, it will remove all the child controls in the item container.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The object that is used to render the server control content on the client's browser.</param>
        <summary>Renders the Web server control content to the client's browser by using the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Render method is used to render the server control content to the client's browser by using the specified <xref:System.Web.UI.HtmlTextWriter> object.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the state of the properties in the <see cref="T:System.Web.UI.WebControls.ListView" /> control that must be persisted, even when the &lt;xref:System.Web.UI.Control.EnableViewState%2A&gt; property is set to <see langword="false" />.</summary>
        <returns>Returns the server control's current view state. If there is no view state associated with the control, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to save the state of the properties in the <xref:System.Web.UI.WebControls.ListView> control that must be persisted, even when the <xref:System.Web.UI.Control.EnableViewState%2A> property is set to `false`.  
  
> [!NOTE]
>  This method is primarily used by control developers to extend the <xref:System.Web.UI.WebControls.ListView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the current view state of the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <returns>An object that contains the saved view state values for the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SaveViewState method is a helper method that is called by the <xref:System.Web.UI.WebControls.ListView> control to save the state of the control. For more information, see <xref:System.Web.UI.WebControls.WebControl.SaveViewState%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedDataKey">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKey SelectedDataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey SelectedDataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data-key value for the selected item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The data key for the selected item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is <see langword="null" />, which indicates that no item is currently selected.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Web.UI.WebControls.ListView.DataKeyNames%2A> property is set, the <xref:System.Web.UI.WebControls.ListView> control creates a <xref:System.Web.UI.WebControls.DataKey> object for each item in the control by using the value or values of the specified field or fields. The <xref:System.Web.UI.WebControls.DataKey> objects are then added to the control's <xref:System.Web.UI.WebControls.ListView.DataKeys%2A> collection. Normally, the <xref:System.Web.UI.WebControls.ListView.DataKeys%2A> property is used to retrieve the <xref:System.Web.UI.WebControls.DataKey> object for a specific data item in the <xref:System.Web.UI.WebControls.ListView> control. However, if you want to retrieve only the <xref:System.Web.UI.WebControls.DataKey> object of the currently selected item, you can use the SelectedDataKey property as a shortcut.  
  
 Using the SelectedDataKey property is the same as retrieving the <xref:System.Web.UI.WebControls.DataKey> object from the <xref:System.Web.UI.WebControls.ListView.DataKeys%2A> collection at the index that is specified by the <xref:System.Web.UI.WebControls.ListView.SelectedIndex%2A> property. You can also use the <xref:System.Web.UI.WebControls.ListView.SelectedValue%2A> property to retrieve the data-key value for the currently selected item directly.  
  
 If you are creating a <xref:System.Web.UI.WebControls.ControlParameter> object and you want to access a key field other than the first field, use the indexed SelectedDataKey property in the <xref:System.Web.UI.WebControls.ControlParameter.PropertyName%2A> property of the <xref:System.Web.UI.WebControls.ControlParameter> object.  
  
   
  
## Examples  
 The following example shows how to use the second key field as a parameter in a master/detail scenario. A <xref:System.Web.UI.WebControls.ListView> control is used to display records from the Product Inventory table of the AdventureWorks database. When an item is selected in the <xref:System.Web.UI.WebControls.ListView> control, the details of the product are displayed in another <xref:System.Web.UI.WebControls.ListView> control. ProductID is the second key name in the first <xref:System.Web.UI.WebControls.ListView> control. To access the second key, the code uses the value of `ProductInventoryListView.SelectedDataKey[1]` (`ProductInventoryListView.SelectedDataKey(1)` in Visual Basic) as the <xref:System.Web.UI.WebControls.ControlParameter.PropertyName%2A> for the <xref:System.Web.UI.WebControls.ControlParameter> object. This parameter object is in turn used by the <xref:System.Web.UI.WebControls.SqlDataSource> control that the second <xref:System.Web.UI.WebControls.ListView> control is bound to.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.SelectedDataKey#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_279_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.SelectedDataKey#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_279_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No data keys are specified in the &lt;xref:System.Web.UI.WebControls.ListView.DataKeyNames%2A&gt; property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public virtual int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Default")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the selected item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The zero-based index of the selected item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is -1, which indicates that no item is currently selected.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SelectedIndex property to determine the index of the currently selected item in a <xref:System.Web.UI.WebControls.ListView> control. You can also use this property to programmatically select an item in the control. (However, if you manually data-bind the <xref:System.Web.UI.WebControls.ListView> control, you might have to handle reading or setting this property manually as well.)  
  
   
  
## Examples  
 The following example shows how to use the SelectedIndex property to determine whether an item is selected in a <xref:System.Web.UI.WebControls.ListView> control. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ListView.DeleteItem%2A> method.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.DeleteItem#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_162_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.DeleteItem#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_162_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The SelectedIndex property is set to a value less than -1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an item's Select button is clicked, after the <see cref="T:System.Web.UI.WebControls.ListView" /> control handles the select operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectedIndexChanged event is raised when an item's Select button is clicked, after the <xref:System.Web.UI.WebControls.ListView> control handles the select operation. (A Select button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Select".) This enables you to perform a custom routine whenever this event occurs, such as updating a status label with information about the currently selected item.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how create an event handler for the SelectedIndexChanged event.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.SelectedIndexChanged#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_67_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.SelectedIndexChanged#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_67_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewSelectEventArgs&gt; SelectedIndexChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewSelectEventArgs&gt; SelectedIndexChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an item's Select button is clicked, but before the <see cref="T:System.Web.UI.WebControls.ListView" /> control handles the select operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectedIndexChanging event is raised when an item's Select button is clicked, but before the <xref:System.Web.UI.WebControls.ListView> control handles the select operation. (A Select button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Select".) This enables you to perform a custom routine whenever this event occurs, such as canceling the select operation.  
  
> [!NOTE]
>  This event is not raised when you programmatically set the <xref:System.Web.UI.WebControls.ListView.SelectedIndex%2A> property.  
  
 A <xref:System.Web.UI.WebControls.ListViewSelectEventArgs> object is passed to the event handler, which enables you to determine the index of the item that was selected by the user. It also lets you indicate that the selection operation should be canceled. To cancel the selection operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ListViewSelectEventArgs> object to `true`.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how create an event handler for the SelectedIndexChanging event.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.SelectedIndexChanging#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_118_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.SelectedIndexChanging#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_118_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate SelectedItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate SelectedItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ListViewDataItem), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom content for the selected item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>An object that contains the custom content for the selected item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control. The default is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SelectedItemTemplate property to define a custom user interface (UI) for the selected item in a <xref:System.Web.UI.WebControls.ListView> control. The SelectedItemTemplate is usually used to differentiate the selected item from the other displayed items. SelectedItemTemplate is rendered instead of the <xref:System.Web.UI.WebControls.ListView.ItemTemplate%2A> template for the selected item.  
  
 To specify the custom template declaratively, add a `SelectedItemTemplate` element inside the <xref:System.Web.UI.WebControls.ListView> control. You can then add the contents of the template to the `SelectedItemTemplate` element. To display the field values of the data source that is bound to the control, use a data-binding expression. For more information, see [Data-Binding Expressions Overview](~/add/includes/ajax-current-ext-md.md).  
  
 You can also add buttons to the SelectedItemTemplate. To create buttons that perform the built-in delete or edit operations, add a button control to the template and set its <xref:System.Web.UI.WebControls.Button.CommandName%2A> property to one of the values listed in the following table.  
  
|Button type|CommandName value|  
|-----------------|-----------------------|  
|Delete|"Delete"|  
|Edit|"Edit"|  
  
   
  
## Examples  
 The following example shows how to use the SelectedItemTemplate property to define the contents of the selected item in the <xref:System.Web.UI.WebControls.ListView> control.  
  
 [!code-vb[System.Web.UI.WebControls.ListViewItemDeleting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1264_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListViewItemDeleting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1264_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedPersistedDataKey">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKey SelectedPersistedDataKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey SelectedPersistedDataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data-key value for the persisted selected item in a data-bound control.</summary>
        <value>The data key for the persisted selected item in a data-bound control. The default is <see langword="null" />, which indicates that no item is currently selected.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedValue">
      <MemberSignature Language="C#" Value="public object SelectedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data-key value of the selected item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The data-key value of the selected item in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView.DataKeyNames%2A> property can be set to a comma-separated list of field names that represent the primary key of the data source. If it is set, the <xref:System.Web.UI.WebControls.ListView> control automatically creates a <xref:System.Web.UI.WebControls.DataKey> object for each item in the control by using the value or values of the specified field or fields. The <xref:System.Web.UI.WebControls.DataKey> objects are then added to the control's <xref:System.Web.UI.WebControls.ListView.DataKeys%2A> collection.  
  
 Normally, the <xref:System.Web.UI.WebControls.ListView.DataKeys%2A> property is used to get the <xref:System.Web.UI.WebControls.DataKey> object for a specific data item in the <xref:System.Web.UI.WebControls.ListView> control. However, if you want to get only the <xref:System.Web.UI.WebControls.DataKey> object of the currently selected item, you can use the <xref:System.Web.UI.WebControls.ListView.SelectedDataKey%2A> property as a shortcut. You can also directly determine the data-key value of the first key field of the selected item by using the SelectedValue property.  
  
 If you are creating a <xref:System.Web.UI.WebControls.ControlParameter> object and want to access a key field other than the first field, use the <xref:System.Web.UI.WebControls.ListView.SelectedDataKey%2A> property. For an example, see the <xref:System.Web.UI.WebControls.ListView.SelectedDataKey%2A> property.  
  
   
  
## Examples  
 The following example shows how to use the first key field as a parameter in a master/detail scenario. When an item is selected in the <xref:System.Web.UI.WebControls.ListView> control, the SelectedValue property is used as the <xref:System.Web.UI.WebControls.ControlParameter.PropertyName%2A> for the <xref:System.Web.UI.WebControls.ControlParameter> object. This parameter object is in turn used by the <xref:System.Web.UI.WebControls.SqlDataSource> control that the second <xref:System.Web.UI.WebControls.ListView> control is bound to.  
  
 [!code-vb[System.Web.UI.WebControls.ListViewItemDeleting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1238_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListViewItemDeleting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1238_1.aspx)]  
  
 The following example shows how to use the SelectedValue property to determine the value of the key field.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.SelectedValue#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1238_2.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.SelectedValue#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1238_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectItem">
      <MemberSignature Language="C#" Value="public void SelectItem (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectItem(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the item that is in edit mode.</param>
        <summary>Selects the item that is in edit mode in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method raises the <xref:System.Web.UI.WebControls.ListView.SelectedIndexChanged> event.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The item index is negative.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetEditItem">
      <MemberSignature Language="C#" Value="public void SetEditItem (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEditItem(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the item to set into edit mode.</param>
        <summary>Sets the specified item into edit mode in a <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Web.UI.WebControls.ListView.EditItem%2A> property to access the item that is put in edit mode in a <xref:System.Web.UI.WebControls.ListView> control. The content of an edit item is defined by the <xref:System.Web.UI.WebControls.ListView.EditItemTemplate%2A> property.  
  
 This method raises the <xref:System.Web.UI.WebControls.ListView.ItemEditing> event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetPageProperties">
      <MemberSignature Language="C#" Value="protected virtual void SetPageProperties (int startRowIndex, int maximumRows, bool databind);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetPageProperties(int32 startRowIndex, int32 maximumRows, bool databind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRowIndex" Type="System.Int32" />
        <Parameter Name="maximumRows" Type="System.Int32" />
        <Parameter Name="databind" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startRowIndex">The index of the first record on the page.</param>
        <param name="maximumRows">The maximum number of items on a single page.</param>
        <param name="databind">
          <see langword="true" /> to rebind the control after the properties are set; otherwise, <see langword="false" />.</param>
        <summary>Sets the properties of a page of data in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumRows" /> is less than 1.  
  
 -or-  
  
 <paramref name="startRowIndex" /> is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (string sortExpression, System.Web.UI.WebControls.SortDirection sortDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(string sortExpression, valuetype System.Web.UI.WebControls.SortDirection sortDirection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortExpression" Type="System.String" />
        <Parameter Name="sortDirection" Type="System.Web.UI.WebControls.SortDirection" />
      </Parameters>
      <Docs>
        <param name="sortExpression">The sort expression to sort the <see cref="T:System.Web.UI.WebControls.ListView" /> control with.</param>
        <param name="sortDirection">One of the <see cref="T:System.Web.UI.WebControls.SortDirection" /> values.</param>
        <summary>Sorts the <see cref="T:System.Web.UI.WebControls.ListView" /> control, depending on the specified sort expression and direction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Sort method to programmatically sort the data that is displayed in the <xref:System.Web.UI.WebControls.ListView> control by using the specified sort expression and direction. The sort expression specifies the column or columns to sort with. To sort multiple columns, create a sort expression that contains a comma-separated list of field names. The sort direction indicates whether sorting is performed in ascending or descending order.  
  
 You typically use this method when you want to sort the contents of the <xref:System.Web.UI.WebControls.ListView> control from outside the control, such as from a different control on the page. This method is also used to programmatically set a default sort order for the <xref:System.Web.UI.WebControls.ListView> control when it is first rendered.  
  
 This method raises the <xref:System.Web.UI.WebControls.ListView.Sorted> and <xref:System.Web.UI.WebControls.ListView.Sorting> events.  
  
   
  
## Examples  
 The following example shows how to use the Sort method to programmatically sort the <xref:System.Web.UI.WebControls.ListView> control by multiple data fields.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.Sort#1](~/add/codesnippet/visualbasic/aed9ce68-a81f-425e-b0c0-_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.Sort#1](~/add/codesnippet/csharp/aed9ce68-a81f-425e-b0c0-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.ListView" /> control is bound to a data source control, but the <see cref="T:System.Web.UI.DataSourceView" /> object that is associated with the data source is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortDirection">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.SortDirection SortDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SortDirection SortDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SortDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the sort direction of the field or fields that are being sorted.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.SortDirection" /> values. The default is <see langword="SortDirection.Ascending" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SortDirection property to determine whether the field or fields being sorted are sorted in ascending or descending order.  
  
   
  
## Examples  
 The following example shows how to use the SortDirection property to programmatically determine the sort direction of a <xref:System.Web.UI.WebControls.ListView> control.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.SortDirection#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_264_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.SortDirection#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_264_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public event EventHandler Sorted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Sorted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a sort operation is requested, after the <see cref="T:System.Web.UI.WebControls.ListView" /> control handles the sort operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Sorted event is raised when a Sort button is clicked or the <xref:System.Web.UI.WebControls.ListView.Sort%2A> method is called, after the <xref:System.Web.UI.WebControls.ListView> control handles the sort operation. (A Sort button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Sort".) This enables you to perform a custom routine whenever this event occurs.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortExpression">
      <MemberSignature Language="C#" Value="public virtual string SortExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the sort expression that is associated with the field or fields that are being sorted.</summary>
        <value>The sort expression that is associated with the field or fields that are being sorted.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When multiple columns are sorted, this property contains a comma-separated list of the fields to sort by.  
  
   
  
## Examples  
 The following example shows how to use the SortExpression property to programmatically determine the column that is being sorted in a <xref:System.Web.UI.WebControls.ListView> control.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.SortDirection#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1156_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.SortDirection#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1156_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.ListViewSortEventArgs&gt; Sorting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.ListViewSortEventArgs&gt; Sorting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.ListViewSortEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a sort operation is requested, but before the <see cref="T:System.Web.UI.WebControls.ListView" /> control handles the sort operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Sorting event is raised when a Sort button is clicked or the <xref:System.Web.UI.WebControls.ListView.Sort%2A> method is called, but before the <xref:System.Web.UI.WebControls.ListView> control handles the sort operation. (A Sort button is a button control whose <xref:System.Web.UI.WebControls.Button.CommandName%2A> property is set to "Sort".) This enables you to perform a custom routine whenever this event occurs, such as customizing the sort expression.  
  
 A <xref:System.Web.UI.WebControls.ListViewSortEventArgs> object is passed to the event handler, which enables you to determine the sort expression for the column. It also lets you indicate that the sort operation should be canceled. To cancel the sort operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ListViewSortEventArgs> object to `true`.  
  
 For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example shows how create an event handler for the Sorting event.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.Sorting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_1_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.Sorting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_1_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StartRowIndex">
      <MemberSignature Language="C#" Value="protected virtual int StartRowIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index of the first record that is displayed on a page of data in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>The index of the first record that is displayed on a page of data in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataKeysControl.ClientIDRowSuffixDataKeys">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKeyArray System.Web.UI.IDataKeysControl.ClientIDRowSuffixDataKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKeyArray System.Web.UI.IDataKeysControl.ClientIDRowSuffixDataKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKeyArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of the data values that are used to uniquely identify each instance of a data-bound control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</summary>
        <value>A collection of data-field values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.IDataKeysControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataKeyNames">
      <MemberSignature Language="C#" Value="string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an array that contains the names of the primary-key fields of the items that are displayed in a data-bound control.</summary>
        <value>An array that contains the names of the primary-key fields of the items that are displayed in a data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataMember">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the list of data that the data-bound control binds to when the data source contains more than one distinct list of data items.</summary>
        <value>The name of the list of data that a data-bound control binds to.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSource">
      <MemberSignature Language="C#" Value="object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Web.UI.WebControls.IDataBoundControl.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object from which a data-bound control retrieves its list of data items.</summary>
        <value>The object that contains the list of data that a data-bound control retrieves.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceID">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataSourceID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ID of the data source control from which a data-bound control retrieves its list of data items.</summary>
        <value>The ID of a control that represents the data source from which a data-bound control retrieves its data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceObject">
      <MemberSignature Language="C#" Value="System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IDataSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that implements the <see cref="T:System.Web.UI.IDataSource" /> interface, which provides access to the object's data content.</summary>
        <value>The data source object that contains the list of data items that a data-bound control retrieves.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix">
      <MemberSignature Language="C#" Value="string[] System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the data field whose value is used to uniquely identify each data row of a <see cref="T:System.Web.UI.WebControls.ListView" /> control when the &lt;xref:System.Web.UI.Control.ClientIDMode%2A&gt; property is set to <see cref="T:System.Web.UI.ClientIDMode" />.</summary>
        <value>The name of the data field whose value is used to uniquely identify each instance of a <see cref="T:System.Web.UI.WebControls.ListView" /> control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.IDataKeysControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.DataKeys">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKeyArray System.Web.UI.WebControls.IDataBoundListControl.DataKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKeyArray System.Web.UI.WebControls.IDataBoundListControl.DataKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKeyArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of data-key values that represent each row in a data-bound control.</summary>
        <value>An array that contains the data-key values of each row in a data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundListControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.EnablePersistedSelection">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IDataBoundListControl.EnablePersistedSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IDataBoundListControl.EnablePersistedSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value that specifies whether a selected row persists when a user pages through data in a data-bound control.</summary>
        <value>
          <see langword="true" /> if the selection is based on data keys; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundListControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.SelectedDataKey">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundListControl.SelectedDataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundListControl.SelectedDataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data-key object that contains the data-key value for the selected row in a data-bound control.</summary>
        <value>An object that contains the data-key value for the selected row in a data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundListControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.SelectedIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.WebControls.IDataBoundListControl.SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.WebControls.IDataBoundListControl.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the selected row in a data-bound control.</summary>
        <value>The index of the selected row in a data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundListControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPageableItemContainer.MaximumRows">
      <MemberSignature Language="C#" Value="int System.Web.UI.WebControls.IPageableItemContainer.MaximumRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.WebControls.IPageableItemContainer.MaximumRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IPageableItemContainer.MaximumRows%2A?displayProperty=fullName&gt;.</summary>
        <value>The maximum number of items to display on a single page of the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IPageableItemContainer.MaximumRows property uses the value of the <xref:System.Web.UI.WebControls.ListView.MaximumRows%2A> property to get the maximum number of items to display on a single page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPageableItemContainer.SetPageProperties">
      <MemberSignature Language="C#" Value="void IPageableItemContainer.SetPageProperties (int startRowIndex, int maximumRows, bool databind);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.IPageableItemContainer.SetPageProperties(int32 startRowIndex, int32 maximumRows, bool databind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRowIndex" Type="System.Int32" />
        <Parameter Name="maximumRows" Type="System.Int32" />
        <Parameter Name="databind" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startRowIndex">The index of the first record on the page.</param>
        <param name="maximumRows">The maximum number of items on a single page.</param>
        <param name="databind">
          <see langword="true" /> to rebind the control after the properties are set; otherwise, <see langword="false" />.</param>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IPageableItemContainer.SetPageProperties%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IPageableItemContainer.SetPageProperties method invokes the <xref:System.Web.UI.WebControls.ListView.SetPageProperties%2A> method of the <xref:System.Web.UI.WebControls.ListView> control to set the page properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPageableItemContainer.StartRowIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.WebControls.IPageableItemContainer.StartRowIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.WebControls.IPageableItemContainer.StartRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IPageableItemContainer.StartRowIndex%2A?displayProperty=fullName&gt;.</summary>
        <value>The index of the first record that is displayed on a page of data in the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IPageableItemContainer.StartRowIndex property uses the value of the <xref:System.Web.UI.WebControls.ListView.StartRowIndex%2A> property to get the index of the first record that is displayed on the page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPersistedSelector.DataKey">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IPersistedSelector.DataKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IPersistedSelector.DataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data-key value for the selected record in a data-bound control.</summary>
        <value>The data-key value for the selected record in a data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ListView> instance is cast to an <xref:System.Web.UI.WebControls.IPersistedSelector> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public override short TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.TabIndex%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>
          <see langword="0" />, which indicates that the property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the TabIndex property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the TabIndex property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public override string ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.ToolTip%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>&lt;xref:System.String?displayProperty=fullName&gt;, which indicates that the property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the ToolTip property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the ToolTip property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateItem">
      <MemberSignature Language="C#" Value="public virtual void UpdateItem (int itemIndex, bool causesValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateItem(int32 itemIndex, bool causesValidation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndex" Type="System.Int32" />
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="itemIndex">The index of the item to update.</param>
        <param name="causesValidation">
          <see langword="true" /> to perform page validation when this method is called; otherwise, <see langword="false" />.</param>
        <summary>Updates the record at the specified index in the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the UpdateItem method to programmatically update the record at the specified index in the data source. You typically use this method when you want to update a record from outside the <xref:System.Web.UI.WebControls.ListView> control, such as from a different control on the page.  
  
> [!NOTE]
>  This method can be called only for an item that contains a two-way data-bound input control. For more information about two-way binding expressions, see [Binding to Databases](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742).  
  
 To specify whether page validation is performed before the update operation, use the `causesValidation` parameter.  
  
 This method raises the <xref:System.Web.UI.WebControls.ListView.ItemUpdated> and <xref:System.Web.UI.WebControls.ListView.ItemUpdating> events.  
  
   
  
## Examples  
 The following example shows how to use the UpdateItem method to programmatically update a <xref:System.Web.UI.WebControls.ListView> item in the data source.  
  
 [!code-cs[System.Web.UI.WebControls.ListView.UpdateItem#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_110_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ListView.UpdateItem#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_110_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="itemIndex" /> is less than 0.  
  
 -or-  
  
 The <see cref="T:System.Web.UI.DataSourceView" /> object that is associated with the <see cref="T:System.Web.UI.WebControls.ListView" /> control is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public virtual string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.WebCategory("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.WebSysDescription("DataBoundControl_UpdateMethod")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method to call in order to update data.</summary>
        <value>The name of the method.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property causes model binding to be used as the data-binding method.  
  
 For a tutorial series on using model binding with Web Forms, see [Model Binding and Web Forms](http://go.microsoft.com/fwlink/?LinkId=286117).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.Unit Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Overrides the &lt;xref:System.Web.UI.WebControls.WebControl.Width%2A?displayProperty=fullName&gt; property. Setting this property is not supported by the <see cref="T:System.Web.UI.WebControls.ListView" /> control.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.Unit" />, which indicates that the property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Style properties are not supported by the <xref:System.Web.UI.WebControls.ListView> control. If you try to set the Width property, a <xref:System.NotSupportedException> exception is thrown. If you get the property, it returns the default value of the corresponding property of the base class.  
  
 To style the <xref:System.Web.UI.WebControls.ListView> control, you must style the controls inside the <xref:System.Web.UI.WebControls.ListView> templates by using cascading style sheets (CSS) classes or inline style elements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the Width property.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>