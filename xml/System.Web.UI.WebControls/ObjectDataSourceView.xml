<Type Name="ObjectDataSourceView" FullName="System.Web.UI.WebControls.ObjectDataSourceView">
  <TypeSignature Language="C#" Value="public class ObjectDataSourceView : System.Web.UI.DataSourceView, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSourceView extends System.Web.UI.DataSourceView implements class System.Web.UI.IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Supports the <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control and provides an interface for data-bound controls to perform data operations with business and data objects.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ObjectDataSourceView class is intended primarily to be used by data-bound controls, and not as a programmable object in page code.  
  
 The ObjectDataSourceView class implements the data functionality for the <xref:System.Web.UI.WebControls.ObjectDataSource> control, including the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>, <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operations, sorting, filtering, and management of settings kept in view state.  
  
 A ObjectDataSourceView object is created for each instance of the <xref:System.Web.UI.WebControls.ObjectDataSource> class at run time. Calls to data operations of the instance of the <xref:System.Web.UI.WebControls.ObjectDataSource> class are handled by the instance of the ObjectDataSourceView object. Page developers do not access the  instance of the ObjectDataSourceView class directly. Control developers can create custom data controls by extending the <xref:System.Web.UI.WebControls.ObjectDataSource> and ObjectDataSourceView classes.  
  
 The ObjectDataSourceView class performs data operations by calling methods on business or data objects using reflection. At run time, the <xref:System.Web.UI.WebControls.ObjectDataSource> control creates an instance of the type that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.TypeName%2A> property, and then calls the appropriate method for the data operation. The instantiated object is not cached in memory by the ObjectDataSourceView. The object is created and destroyed for every data method call. If the method is `static` (`Shared` in Visual Basic), an instance is not created but the data operation method is still called.  
  
 The ObjectDataSourceView is not directly exposed to page developers by the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Instead, the properties and methods of the ObjectDataSourceView are accessed through the <xref:System.Web.UI.WebControls.ObjectDataSource>. For example, the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> of ObjectDataSourceView property is set by setting the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource>.  
  
## Retrieving Data  
 The most basic operation that a data source view performs is data retrieval from the underlying data storage using the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method, which retrieves an <xref:System.Collections.IEnumerable> collection of data items. The following data retrieval methods, properties, and events are implemented by the ObjectDataSourceView object and exposed directly by its <xref:System.Web.UI.WebControls.ObjectDataSource> control to page developers and other callers:  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> property  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event  
  
## Updating Data  
 The ObjectDataSourceView object supports data updates by calling a business or data object method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> property. Data-bound controls that automatically perform updates, such as the <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls, pass their parameters in an <xref:System.Collections.Specialized.IOrderedDictionary> interface to the ObjectDataSourceView and the view object merges these parameters with any parameters that are found in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> collection.  
  
 The following update methods, properties, and events are implemented by the ObjectDataSourceView and exposed directly by its <xref:System.Web.UI.WebControls.ObjectDataSource> control to page developers and other callers:  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> property  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> event  
  
## Inserting Data  
 The ObjectDataSourceView object supports inserting new rows of data by calling a business or data object method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property. Data-bound controls that automatically perform inserts, such as the <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, pass their parameters in an <xref:System.Collections.Specialized.IOrderedDictionary> interface to the ObjectDataSourceView and the view object merges these parameters with any parameters that are found in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> collection.  
  
 The following insert methods, properties, and events are implemented by the ObjectDataSourceView and exposed directly by its <xref:System.Web.UI.WebControls.ObjectDataSource> control to page developers and other callers:  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> property  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event  
  
## Deleting Data  
 The ObjectDataSourceView object supports deleting data by calling a business or data object method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property. Data-bound controls that automatically perform deletes, such as the <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, pass their parameters in an <xref:System.Collections.Specialized.IOrderedDictionary> interface to the ObjectDataSourceView and the view object merges these parameters with any parameters that are found in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> collection. The following delete methods, properties, and events are implemented by the ObjectDataSourceView and exposed directly by its <xref:System.Web.UI.WebControls.ObjectDataSource> control to page developers and other callers:  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> property  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event  
  
-   The <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event  
  
## Filtering and Sorting Data  
 Data retrieval is more powerful when you can filter the data dynamically. Filtering is supported only by the <xref:System.Web.UI.WebControls.ObjectDataSource> control if the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method returns a <xref:System.Data.DataTable> or <xref:System.Data.DataSet> object. You can use the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> and <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> properties to apply dynamic filtering to data retrieval. These properties are implemented by the ObjectDataSourceView object and exposed directly by its <xref:System.Web.UI.WebControls.ObjectDataSource> control to data-bound controls and other callers.  
  
 You can sort the data that you retrieve with the <xref:System.Web.UI.WebControls.ObjectDataSource> by ordering the data in memory after it is retrieved. Sorting is supported only by the <xref:System.Web.UI.WebControls.ObjectDataSource> control if the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method returns a <xref:System.Data.DataTable> or <xref:System.Data.DataSet>. The <xref:System.Web.UI.WebControls.ObjectDataSourceView.CanSort%2A> property always returns `true`, because the ObjectDataSourceView cannot determine what type is returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method without calling the method. The <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> property syntax is the same as for a <xref:System.Data.DataView.Sort%2A?displayProperty=fullName> property.  
  
## Tracking View State  
 The ObjectDataSourceView implements the <xref:System.Web.UI.IStateManager> interface and uses view state to track its state across page requests. Implementation of the <xref:System.Web.UI.WebControls.ObjectDataSourceView.LoadViewState%2A>, <xref:System.Web.UI.WebControls.ObjectDataSourceView.SaveViewState%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSourceView.TrackViewState%2A> methods are provided to enable view state tracking for the control. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSourceView (System.Web.UI.WebControls.ObjectDataSource owner, string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.ObjectDataSource owner, string name, class System.Web.HttpContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.ObjectDataSource" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="owner">The <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> is associated with.</param>
        <param name="name">A unique name for the data source view, within the scope of the data source control that owns it.</param>
        <param name="context">The current <see cref="T:System.Web.HttpContext" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSourceView> constructor is called by the <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> method to return a new instance of a data source view with the specified `viewName` parameter. The <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with only one <xref:System.Web.UI.WebControls.ObjectDataSourceView> at any time, and always names the view `DefaultView`, although this naming restriction is imposed by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, not the <xref:System.Web.UI.WebControls.ObjectDataSourceView>. You can override the <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> method to support views with a different naming convention.  
  
 The <xref:System.Web.HttpContext> object that is passed by `context` is used by the data source view to access parameter objects, such as <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> and <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanDelete">
      <MemberSignature Language="C#" Value="public override bool CanDelete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDelete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object that is associated with the current <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control supports the delete operation.</summary>
        <value>
          <see langword="true" />, if the operation is supported; otherwise, <see langword="false" />. Deletion is not supported, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A&gt; property is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CanDelete property returns `true`, if the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property is set. A delete operation could still fail, if all the data properties are not set or are not set correctly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanInsert">
      <MemberSignature Language="C#" Value="public override bool CanInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object that is associated with the current <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control supports the insert operation.</summary>
        <value>
          <see langword="true" />, if the operation is supported; otherwise, <see langword="false" />. Insertion is not supported, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A&gt; property is an empty string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CanInsert property returns `true`, if the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property is set. A insert operation could still fail, if all the data properties are not set or are not set correctly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanPage">
      <MemberSignature Language="C#" Value="public override bool CanPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object that is associated with the current <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control supports paging through the retrieved data.</summary>
        <value>
          <see langword="true" />, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A&gt; value is set to <see langword="true" />; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CanPage property indicates whether the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object supports paging. For information on how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSourceView>, see <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanRetrieveTotalRowCount">
      <MemberSignature Language="C#" Value="public override bool CanRetrieveTotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRetrieveTotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object that is associated with the current <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control supports retrieving the total number of data rows, in addition to the set of data.</summary>
        <value>
          <see langword="true" />, if the operation is supported; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CanRetrieveTotalRowCount property returns `true`, if the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> property is set. The method that returns the count should return the total number of rows that can be paged, not the number of rows in a page. Data-bound controls use the total number of rows that can be paged to determine how to render paging controls. For example, how many numeric pager buttons to render in a <xref:System.Web.UI.WebControls.GridView> control pager. For more information on paging support, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.  
  
 The CanRetrieveTotalRowCount property is checked during a call to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ExecuteSelect%2A> method to ensure that the data source control supports all capabilities requested by setting the various <xref:System.Web.UI.DataSourceSelectArguments> properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanSort">
      <MemberSignature Language="C#" Value="public override bool CanSort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object that is associated with the current <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control supports a sorted view on the underlying data source.</summary>
        <value>
          <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the <xref:System.Web.UI.WebControls.ObjectDataSource> control only supports sorting data when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method returns a <xref:System.Data.DataSet>, <xref:System.Data.DataView>, or <xref:System.Data.DataTable> object, the view object cannot determine whether sorting is supported until the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method is called and returns. For this reason, the CanSort property always returns `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanUpdate">
      <MemberSignature Language="C#" Value="public override bool CanUpdate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUpdate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object that is associated with the current <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control supports the update operation.</summary>
        <value>
          <see langword="true" />, if the operation is supported; otherwise, <see langword="false" />. Updating is not supported if the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; property is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CanUpdate property returns `true`, if the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> property is set. A update operation could still fail, if all the data properties are not set or are not set correctly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines how the <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control performs updates and deletes when data in a row in the underlying data storage changes during the time of the operation.</summary>
        <value>One of the <see cref="T:System.Web.UI.ConflictOptions" /> values. The default is the <see cref="T:System.Web.UI.ConflictOptions" /> value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ConflictDetection property determines whether parameters for old and new values are applied to the `Update` method. For example, if the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property returns a <xref:System.Data.DataTable> object with the columns `Name` and `Number`, and the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters are created for `Name` and `Number` for the `Update` method. If the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters are created with the names `Name`, `Number`, `original_Name`, and `original_Name`. (The exact name of the parameters for the original values depends on the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>.) The <xref:System.Web.UI.WebControls.ObjectDataSourceView> then determines if the method that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> property has parameters that match.  
  
 Concurrency control is a technique data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data. For example, one client reads data and presents it to a user, while another client reads the same data, and presents it to a different user. If both users update the data and submit it to the data storage, some unexpected result might occur, because both clients might update different values for the same data. This is considered a conflict. By setting the ConflictDetection property to the <xref:System.Web.UI.ConflictOptions> value, the `Update` method can then compare the old and new values to the original data source to detect conflicts and handle them, as necessary.  
  
 The value of the ConflictDetection property is stored in view state.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The selected value is not one of the <see cref="T:System.Web.UI.ConflictOptions" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertNullToDBNull">
      <MemberSignature Language="C#" Value="public bool ConvertNullToDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertNullToDBNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether <see cref="T:System.Web.UI.WebControls.Parameter" /> values that are passed to an update, insert, or delete operation are automatically converted from <see langword="null" /> to the <see cref="F:System.DBNull.Value" /> value.</summary>
        <value>
          <see langword="true" />, if <see langword="null" /> in <see cref="T:System.Web.UI.WebControls.Parameter" /> objects passed to the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> is automatically converted to the <see cref="F:System.DBNull.Value" /> value; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Not converting `null` to the <xref:System.DBNull.Value?displayProperty=fullName> value can result in errors at run time. Use the ConvertNullToDBNull property to indicate whether the <xref:System.Web.UI.WebControls.Parameter> values that are passed to an update, insert, or a delete operation are automatically converted from `null` to the <xref:System.DBNull.Value?displayProperty=fullName> value. For more information, see <xref:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataObjectTypeName">
      <MemberSignature Language="C#" Value="public string DataObjectTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataObjectTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of a class that the <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control uses for a parameter in a data operation. The <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control uses the specified class instead of the <see cref="T:System.Web.UI.WebControls.Parameter" /> objects that are in the various parameters collections.</summary>
        <value>A partially or fully qualified class name that identifies the type of the object that the <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> can use as a parameter for a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A&gt;, or &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A&gt; operation. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Instead of specifying several parameters that are passed to the `Select`, `Update`, `Insert`, and `Delete` methods, you can create one object that aggregates several items. This one object is passed to the methods, instead of several parameters. For more information see <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">A &lt;xref:System.Collections.IDictionary&gt; of the key values used to identify the item to delete. These parameters are used with the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A&gt; property to perform the delete operation. If there are no parameters associated with the method, pass <see langword="null" />.</param>
        <param name="oldValues">A &lt;xref:System.Collections.IDictionary&gt; that contains the additional non-key values used to match the item in the data source. Row values are passed to the method only if the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A&gt; property is set to the <see cref="T:System.Web.UI.ConflictOptions" /> field.</param>
        <summary>Performs a delete operation by calling the business object method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A&gt; property using the specified <paramref name="keys" /> and <paramref name="oldValues" /> collections.</summary>
        <returns>The number of rows deleted; otherwise, -1, if the number is not known.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default value is -1, which means that an unknown number of rows were deleted. To return a different value, set the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object of the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event handler. The number of affected rows is typically returned by the `Delete` method for the business object, and that value is available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> parameter of the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event handler.  
  
 The Delete method calls the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ExecuteDelete%2A> method, passing the `keys` and `oldValues` collections.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A&gt; operation has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Deleted event to examine the values of a return value and output parameters or to determine whether an exception was thrown after a <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The <xref:System.Web.UI.WebControls.GridView> initially displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  
  
 If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Deleting> event before the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the Deleted event after the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation has completed, to perform an exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by this delegate.  
  
 To examine the implementation of the `EmployeeLogic` middle-tier business object that this code example uses, see <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_129_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_129_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object invokes to delete data.</summary>
        <value>A string that represents the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> uses to delete data. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The method that is identified by the DeleteMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method specified by the DeleteMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectCreated> event to work with the business object before the method specified by the DeleteMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectDisposing> event that is raised after the method specified by the DeleteMethod property is called. If the method is a `static` (`Shared` in Visual Basic) method, the business object is never created and you cannot handle these events.  
  
 If the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> control works with implements more than one method or function with the same name (method overloads), the data source control attempts to invoke the correct one according to a set of conditions, including the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> collection. If the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> collection do not match those of the DeleteMethod method signature, the data source throws an exception.  
  
 The value of the DeleteMethod property is stored in view state.  
  
 For more information, see <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.  
  
   
  
## Examples  
 The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The <xref:System.Web.UI.WebControls.GridView> initially displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  
  
 If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation is performed using the method that is specified by the DeleteMethod property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> operation has completed, to perform an exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by this delegate.  
  
 To examine the implementation of the `EmployeeLogic` middle-tier business object that this code example uses, see <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1099_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1099_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters collection that contains the parameters that are used by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A&gt; method.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains the parameters used by the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The names and types of the parameters that are contained in the DeleteParameters collection must match the names and types of the parameters that are in the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property signature. The parameter names are affected by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property and are case sensitive. When working with data-bound controls that supply parameters, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically merges any parameters that are explicitly specified in the collection with those parameters that are provided by the data-bound control.  
  
 For more information, see <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A&gt; operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Deleting event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The <xref:System.Web.UI.WebControls.GridView> initially displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  
  
 If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the Deleting event before the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Deleted> event after the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation has completed, to perform an exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by this delegate.  
  
 To examine the implementation of the `EmployeeLogic` middle-tier business object that this code example uses, see <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_88_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_88_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnablePaging">
      <MemberSignature Language="C#" Value="public bool EnablePaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the data source control supports paging through the set of data that it retrieves.</summary>
        <value>
          <see langword="true" />, if the data source control supports paging through the data it retrieves; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paging by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> control is handled by setting the EnablePaging, <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> properties of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> and defining a `Select` method in the business object with the proper parameters. When the EnablePaging property is set to `true`, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> collection includes two additional parameters for the first row requested and the number of rows requested. These two parameters are named as defined by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> and <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> properties. The `Select` method should return the requested number of rows starting at the specified index. Because the data might not divide evenly by the page size, the last page might contain fewer rows. Thus, the number of rows requested is actually the maximum number of rows that are returned.  
  
 The <xref:System.Web.UI.WebControls.ObjectDataSourceView.CanRetrieveTotalRowCount%2A> property is checked during a call to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ExecuteSelect%2A> method to ensure that the data source control supports all capabilities requested by setting the various <xref:System.Web.UI.DataSourceSelectArguments> properties.  
  
 When paging is enabled on the associated data-bound control, the data-bound control calls the `Select` method with the start index and number of rows that are required. Additionally, if the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> property is set, the data-bound control calls the method before rendering the pager controls. For example, if a <xref:System.Web.UI.WebControls.GridView> control has paging enabled with a page size of 5, and the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> method returns 20, only 4 pages are displayed in the pager.  
  
 The value of the EnablePaging property is stored in view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteDelete">
      <MemberSignature Language="C#" Value="protected override int ExecuteDelete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteDelete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">A &lt;xref:System.Collections.IDictionary&gt; of parameters used with the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A&gt; property to perform the delete operation. If there are no parameters associated with the method, pass <see langword="null" />.</param>
        <param name="oldValues">A &lt;xref:System.Collections.IDictionary&gt; that contains row values that are evaluated, only if the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A&gt; property is set to the  <see cref="T:System.Web.UI.ConflictOptions" /> field.</param>
        <summary>Performs a delete operation using the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A&gt; method and the specified <paramref name="keys" /> and <paramref name="oldValues" /> collection.</summary>
        <returns>The number of rows deleted; otherwise, -1, if the number is not known. For more information, see &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSourceView> class implements the inherited ExecuteDelete method to delete data from an underlying data store using a business object. Page developers and data-bound control authors do not call the ExecuteDelete method directly; instead, use the publicly exposed <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method.  
  
 Before the delete operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Deleting> event. You can handle this event to examine the values of the parameters and perform any preprocessing before the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> method is called.  
  
 To perform a delete operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> uses reflection to call the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property and any associated parameters in the `keys` and `oldValues` collections, and then executes it. After the operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Deleted> event. You can handle this event to examine any return values and error codes, and to perform any post-processing.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.CanDelete%2A&gt; property returns <see langword="false" />.</exception>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A&gt; property is set to the <see cref="T:System.Web.UI.ConflictOptions" /> value, and no values are passed in the <paramref name="oldValues" /> collection.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteInsert">
      <MemberSignature Language="C#" Value="protected override int ExecuteInsert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteInsert(class System.Collections.IDictionary values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">A &lt;xref:System.Collections.IDictionary&gt; of parameters used with the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A&gt; property to perform the insert operation. If there are no parameters associated with the method, pass <see langword="null" />.</param>
        <summary>Performs an insert operation by calling the business object method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A&gt; property using the specified <paramref name="values" /> collection.</summary>
        <returns>The number of rows inserted; otherwise, -1, if the number is not known. For more information, see &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSourceView> class implements the inherited ExecuteInsert method to insert data into an underlying data store using a business object. Page developers and data-bound control authors do not call the ExecuteInsert method directly; instead, use the publicly exposed <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> method.  
  
 Before the insert is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Inserting> event. You can handle this event to examine the values of the parameters and perform any preprocessing before the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> method is called.  
  
 To perform an insert operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> control uses reflection to call the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property and any associated parameters that are in the `values` collection, and then executes it. After the operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Inserted> event. You can handle this event to examine any return values, error codes, and perform any post-processing.  
  
 For more information on returning the number of rows inserted, see <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.CanInsert%2A&gt; property returns <see langword="false" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="values" /> is <see langword="null" /> or empty.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteSelect">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerable ExecuteSelect (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Collections.IEnumerable ExecuteSelect(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">A <see cref="T:System.Web.UI.DataSourceSelectArguments" /> used to request operations on the data beyond basic data retrieval.</param>
        <summary>Retrieves data from the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.TypeName%2A&gt; property by calling the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A&gt; property and passing any values in the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A&gt; collection.</summary>
        <returns>A &lt;xref:System.Collections.IEnumerable&gt; list of data rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSourceView> class implements the inherited ExecuteSelect method to retrieve data using a business object. Page developers and data-bound control authors do not call the ExecuteSelect method directly; instead, use the publicly exposed <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method.  
  
 The specified method can have any method signature, but must return one of the types for the <xref:System.Web.UI.WebControls.ObjectDataSource> control that are listed in the following table to call it successfully.  
  
|Return type|Action|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|The <xref:System.Collections.IEnumerable> is returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method.|  
|<xref:System.Data.DataTable>|A <xref:System.Data.DataView> is created using the <xref:System.Data.DataTable> and returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method.|  
|<xref:System.Data.DataSet>|The first <xref:System.Data.DataTable> of the <xref:System.Data.DataSet> is extracted and a <xref:System.Data.DataView> is created and returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method.|  
|<xref:System.Object>|The object is wrapped in a one-element <xref:System.Collections.IEnumerable> and returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method.|  
  
 Before the data retrieval is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Selecting> event. You can handle this event to examine the values of the parameters and to perform any preprocessing before an operation.  
  
 To perform a select operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> control uses reflection to call the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property and any associated parameters that are in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> collection, and then executes it. After the operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Selected> event. You can handle this event to examine any return values and error codes, and to perform any post-processing.  
  
 If the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method returns a <xref:System.Data.DataSet> object and caching is enabled, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> retrieves data from and saves data to the cache during the operation. The cache is created, discarded, or refreshed based on the caching behavior that is specified by the combination of the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties.  
  
 If the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method returns a <xref:System.Data.DataSet> object and a <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> property has been specified, it is evaluated along with any supplied <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> properties and the resulting filter is applied to the list of data during the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> operation.  
  
 For information on returning the number of rows selected, see <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <paramref name="arguments" /> passed to the ExecuteSelect method specify that the data source should perform some additional work while retrieving data to enable paging or sorting through the retrieved data, but the data source control does not support the requested capability.  
  
 \- or -  
  
 The object returned by the ExecuteSelect method is not a <see cref="T:System.Data.DataSet" /> or <see cref="T:System.Data.DataTable" />, and caching is enabled. Only <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> objects can be cached for the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> control.  
  
 \- or -  
  
 Both caching and client impersonation are enabled. The <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> does not support caching when client impersonation is enabled.</exception>
        <exception cref="T:System.InvalidOperationException">The object returned by the ExecuteSelect method is a <see cref="T:System.Data.DataSet" />, but has no tables in its &lt;xref:System.Data.DataSet.Tables%2A&gt; collection.  
  
 \- or -  
  
 The &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A&gt; property is set to <see langword="true" />, but the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A&gt; properties are not set.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteUpdate">
      <MemberSignature Language="C#" Value="protected override int ExecuteUpdate (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteUpdate(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">A &lt;xref:System.Collections.IDictionary&gt; of primary keys to use with the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; property to perform the update database operation. If there are no keys associated with the method, pass <see langword="null" />.</param>
        <param name="values">A &lt;xref:System.Collections.IDictionary&gt; of values to be used with the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; to perform the update database operation. If there are no parameters associated with the method, pass <see langword="null" />.</param>
        <param name="oldValues">A &lt;xref:System.Collections.IDictionary&gt; that represents the original values in the underlying data store. If there are no parameters associated with the query, pass <see langword="null" />.</param>
        <summary>Performs an update operation by calling the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; property and using any parameters that are supplied in the <paramref name="keys" />, <paramref name="values" />, or <paramref name="oldValues" /> collections.</summary>
        <returns>The number of rows updated; or -1, if the number is not known. For more information, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSourceView> class implements the inherited ExecuteUpdate method to update data using a business object. Page developers and data-bound control authors do not call the ExecuteUpdate method directly; instead, use the publicly exposed <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method.  
  
 The values that are contained in the `keys` and `values` collections are evaluated and merged with any values that are contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> collection. If the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the values that are contained in the `oldValues` collection are formatted with the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property and are also merged.  
  
 Before the update operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Updating> event. You can handle this event to examine the values of the parameters and to perform any preprocessing before an update. To perform an update operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> uses reflection to call the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> property and any associated parameters in the `keys` collection, and then executes it. After the operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Updated> event. You can handle this event to examine any return values, error codes, and perform any post-processing.  
  
 For more information on returning the number of rows updated, see <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.CanInsert%2A&gt; property returns <see langword="false" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="oldValues" /> is <see langword="null" /> or empty and &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A&gt; is set to <see cref="T:System.Web.UI.ConflictOptions" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a filtering expression that is applied when the business object method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A&gt; property is called.</summary>
        <value>A string that represents a filtering expression applied when data is retrieved using the business object method identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering data only when the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method returns a <xref:System.Data.DataSet>, <xref:System.Data.DataView>, or <xref:System.Data.DataTable> object.  
  
 The syntax that is used for the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property is a format string-style expression. The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataView.RowFilter%2A> property because the filter expression is applied to the <xref:System.Data.DataView.RowFilter%2A> property of the <xref:System.Data.DataView> object that is returned from executing the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. (For more information, see <xref:System.Data.DataColumn.Expression%2A>.) If you add parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection, you can also include format string placeholders, for example `"{0}"`, in the expression to substitute for parameter values. The placeholders are replaced according to the index of the parameter in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection.  
  
 You can include parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>. If the type of the parameter is a string or character type, enclose the parameter in single quotation marks. Quotation marks are not needed if the parameter is a numeric type.The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection contains the parameters that are evaluated for the placeholders found in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>.  
  
 The value of the FilterExpression property is stored in view state.  
  
> [!IMPORTANT]
>  It is recommended that you validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataView> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The second code example provides an example of the middle-tier business object that is used in the first code example.  
  
 The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  
  
 The code example consists of a <xref:System.Web.UI.WebControls.TextBox>, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, in the <xref:System.Web.UI.WebControls.TextBox>, enter the full name of the employee, and then click the **Submit** button.  
  
 The FilterExpression property specifies an expression that is used to filter the data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1284_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1284_1.aspx)]  
  
 The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  
  
-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  
  
-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  
  
 For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering.  
  
 For a complete working example, you must compile and use these classes with the Web Forms page code examples that are provided.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1284_2.cs)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1284_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The FilterExpression property was set and the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A&gt; method does not return a <see cref="T:System.Data.DataSet" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a filter operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering> event to perform validation operations on filter parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs a filter operation. You can cancel the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> object to `true`. The event is raised, only if the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property is set.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
> [!IMPORTANT]
>  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataView> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of parameters that are associated with any parameter placeholders that are in the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A&gt; string.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains a set of parameters associated with any parameter placeholders found in the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering data only when the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method returns a <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, or <xref:System.Data.DataView> object.  
  
 The parameters in the FilterParameters collection are associated with any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> property. The parameter placeholders that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> property are matched to parameter objects in the FilterParameters collection when the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property is called.  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The second code example provides an example of the middle-tier business object that is used in the first code example.  
  
 The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  
  
 The code example consists of a <xref:System.Web.UI.WebControls.TextBox>, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, in the <xref:System.Web.UI.WebControls.TextBox>, enter the full name of the employee, and then click the **Submit** button.  
  
 The <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> property specifies an expression that is used to filter the data that is retrieved by the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the FilterParameters collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required. The FilterParameters collection contains one parameter, a <xref:System.Web.UI.WebControls.FormParameter> that is bound to the <xref:System.Web.UI.WebControls.TextBox> control.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1120_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1120_1.aspx)]  
  
 The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  
  
-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  
  
-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  
  
 For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering.  
  
 For a complete working example, you must compile and use these classes with the Web Forms page code examples that are provided.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1120_2.cs)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1120_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A&gt; property was set and the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A&gt; method does not return a <see cref="T:System.Data.DataSet" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">A &lt;xref:System.Collections.IDictionary&gt; collection of parameters used with the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A&gt; property to perform the insert operation. If there are no parameters associated with the method, pass <see langword="null" />.</param>
        <summary>Performs an insert operation by calling the business object method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A&gt; property using the specified <paramref name="values" /> collection.</summary>
        <returns>The number of rows inserted; otherwise, -1, if the number is not known.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default return value is -1, which means that an unknown number of rows were inserted. To return a different value, set the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object of the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event. The number of affected rows is typically returned by the `Insert` method for the business object, and that value is available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object of the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event.  
  
 The Insert method calls the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ExecuteInsert%2A> method, passing the `values` collection.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.CanInsert%2A&gt; property returns <see langword="false" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A&gt; operation has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Inserted event to examine the values of a return value and output parameters or to determine whether an exception was thrown after an <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before an &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A&gt; operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Inserting event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  
  
 The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The <xref:System.Web.UI.WebControls.DetailsView> initially displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property identifies which method performs the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation.  
  
 In this code example, the `UpdateEmployeeInfo` method is used to perform an insert; however it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the Inserting event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings, and then added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  
  
 When the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> method to complete successfully.  
  
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_22_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_22_1.aspx)]  
  
 The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  
  
-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  
  
-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  
  
 An additional `NorthwindDataException` class is provided as a convenience.  
  
 For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  
  
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_22_2.vb)]
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_22_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object invokes to insert data.</summary>
        <value>A string that represents the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> uses to insert data. The default value is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The method that is identified by the InsertMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method specified by the InsertMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectCreated> event to work with the business object before the method specified by the InsertMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectDisposing> event that is raised after the method specified by the InsertMethod property is called. (`Dispose` is called, only if the business object implements the <xref:System.IDisposable> interface.) If the method is a `static` (`Shared` in Visual Basic) method, the business object is never created and you cannot handle these events.  
  
 If the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> object implements more than one method or function with the same name (method overloads), the data source control attempts to invoke the correct one according to a set of conditions, including the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> collection. If the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> collection do not match those of the method specified by the InsertMethod property signature, the data source throws an exception.  
  
 The value of the InsertMethod property is stored in view state.  
  
 For more information, see <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  
  
 The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The <xref:System.Web.UI.WebControls.DetailsView> initially displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The InsertMethod property identifies which method performs the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation.  
  
 In this code example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Inserting> event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  
  
 When the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation is performed, the method that is identified by the InsertMethod property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> method to complete successfully.  
  
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1176_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1176_1.aspx)]  
  
 The following code example provides an example of a middle-tier business object that the previous code example uses. The code example consists of two basic classes and an additional class:  
  
-   The `EmployeeLogic` class is a stateless class, which encapsulates business logic.  
  
-   The `NorthwindEmployee` class is a model class, which contains only the basic functionality that is required to load and persist data from the data tier.  
  
-   An additional `NorthwindDataException` class is provided as a convenience.  
  
 For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this code example.  
  
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1176_2.vb)]
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1176_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters collection that contains the parameters that are used by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A&gt; method.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains the parameters used by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The names and types of the parameters that are contained in the InsertParameters collection must match the names and types of the parameters that are in the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property signature. When working with data-bound controls that supply parameters, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically merges any parameters that are explicitly specified in the collection with those parameters that are provided by the data-bound control. For more information, see <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example implementation of the `Insert` method that is used in the first code example.  
  
 The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The <xref:System.Web.UI.WebControls.DetailsView> initially displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property identifies which method performs the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation.  
  
 If you click the **Insert** button, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property and any parameters that are specified in the InsertParameters collection. In this code example, one parameter is specified in the InsertParameters collection that corresponds to the supervisor's ID. This is because even though the ID is displayed in the <xref:System.Web.UI.WebControls.DetailsView.Fields%2A> collection for the <xref:System.Web.UI.WebControls.DetailsView> control as a <xref:System.Web.UI.WebControls.BoundField> object, it will be passed as a string to the <xref:System.Web.UI.WebControls.ObjectDataSource> control. By adding it explicitly to the InsertParameters collection with a <xref:System.Web.UI.WebControls.Parameter.Type%2A> property that is set to the <xref:System.TypeCode> value, it will be passed correctly by the <xref:System.Web.UI.WebControls.ObjectDataSource> to the method as an `int`, not as `string`.  
  
 When the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property is called. If the `Insert` method of the object has a method signature that includes parameters, the InsertParameters collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> to complete successfully.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_138_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_138_1.aspx)]  
  
 The following code example provides an example implementation of the `Insert` method that the preceding code example uses. The `InsertNewEmployeeWrapper` method is added to the `EmployeeLogic` middle-tier object to enable the object to work more easily with the <xref:System.Web.UI.WebControls.ObjectDataSource> control in Web scenarios, without a substantial rewrite to the actual business logic.  
  
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_138_2.vb)]
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_138_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsTrackingViewState">
      <MemberSignature Language="C#" Value="protected bool IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object is saving changes to its view state.</summary>
        <value>
          <see langword="true" />, if the data source view is marked to save its state; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An object that represents the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> state to restore.</param>
        <summary>Restores previously saved view state for the data source view.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code.  However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 The LoadViewState method restores view-state information for the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object from a previous page request that was saved by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SaveViewState%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaximumRowsParameterName">
      <MemberSignature Language="C#" Value="public string MaximumRowsParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaximumRowsParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the data retrieval method parameter that is used to indicate the number of records to retrieve for data source paging support.</summary>
        <value>The name of the method parameter used to indicate the number of records to retrieve. The default is `"maximumRows"`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MaximumRowsParameterName property is used to support data source paging. For more information, see <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>.  
  
 The value of the MaximumRowsParameterName property is stored in view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object creates an instance of the type that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.TypeName%2A&gt; property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the ObjectCreated event to call other methods on the business object, set properties, or to perform other initialization that is specific to the business object before the <xref:System.Web.UI.WebControls.ObjectDataSource> control calls the `Data` methods for the business object. A reference to the object is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object.  
  
 If the method that is identified to perform the data operation is `static` (`Shared` in Visual Basic), the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectCreating> and ObjectCreated events are never raised.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object creates an instance of the type that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.TypeName%2A&gt; property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically calls the default constructor of a business object to create and instance of it using reflection. Handle the ObjectCreating event to explicitly call another constructor and to set the instance of the object that results to the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property of the associated <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 If the method that is identified to perform the data operation is `static` (`Shared` in Visual Basic), the ObjectCreating and <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectCreated> events are never raised.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ObjectDisposing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object discards an instance of an object that it has created.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ObjectDisposing event is raised before the instance of the  business object is discarded. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called after The ObjectDisposing event is raised.  
  
 Handle the ObjectDisposing event to call other methods on the object and set properties or to perform clean-up that is specific to the object before the object is destroyed. A reference to the object is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object.  
  
 If the method that is identified to perform the data operation is `static` (`Shared` in Visual Basic), the ObjectDisposing event is never raised.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a format string to apply to the names of the parameters for original values that are passed to the <see langword="Delete" /> or <see langword="Update" /> methods.</summary>
        <value>A string that represents a format string applied to the names of any <paramref name="oldValues" /> passed to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A&gt; or &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A&gt; method. The default is "{0}", which means the parameter name is simply the field name.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OldValuesParameterFormatString format string is applied to primary keys only, such as those that are identified with the `DataKeyNames` property of a data-bound control or in delete and update scenarios, where the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value and the set of original values that are passed to the corresponding data method.  
  
 Two common scenarios where you might change the OldValuesParameterFormatString property are as follows:  
  
-   To differentiate between old and new values in updates. When the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters for both the original and new values are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. Without the formatting string, two parameters with the same name would be created for each data field. By changing the name of the original value parameter, you can compare the data to the original data source to detect conflicts and compare key values.  
  
-   Some visual designers implement a particular naming scheme for original values and keys.  
  
 The value of the OldValuesParameterFormatString is stored in view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleted (System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleted(class System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An  <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.Deleted" /> event after the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object has completed a delete operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnDeleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The <xref:System.Web.UI.WebControls.GridView> initially displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  
  
 If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Deleting> event before the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Deleted> event after the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation has completed, to perform an exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by this delegate.  
  
 To examine the implementation of the `EmployeeLogic` middle-tier business object that this code example uses, see <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/bc34632f-3713-4841-acd5-_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/bc34632f-3713-4841-acd5-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleting (System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleting(class System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.Deleting" /> event before the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object attempts a delete operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnDeleting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The <xref:System.Web.UI.WebControls.GridView> initially displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  
  
 If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Deleting> event before the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Deleted> event after the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> operation has completed, to perform an exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by this delegate.  
  
 To examine the implementation of the `EmployeeLogic` middle-tier business object that this code example uses, see <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/6b2992c6-c81b-455e-8607-_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/6b2992c6-c81b-455e-8607-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnFiltering">
      <MemberSignature Language="C#" Value="protected virtual void OnFiltering (System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFiltering(class System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.Filtering" /> event before the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object attempts a filtering operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnFiltering method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnInserted (System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserted(class System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An  <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.Inserted" /> event after the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object has completed an insert operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnInserted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnInserting (System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserting(class System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.Inserting" /> event before the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object attempts an insert operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnObjectCreating%2A> method is called, only if the method that is identified to perform the data operation is not `static` (`Shared` in Visual Basic).  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnInserting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnObjectCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnObjectCreated (System.Web.UI.WebControls.ObjectDataSourceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnObjectCreated(class System.Web.UI.WebControls.ObjectDataSourceEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An  <see cref="T:System.Web.UI.WebControls.ObjectDataSourceEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.ObjectCreated" /> event after the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> creates an instance of the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.TypeName%2A&gt; property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnObjectCreated method is called, only if the method that is identified to perform the data operation is not `static` (`Shared` in Visual Basic).  
  
 Raising an event invokes the event handler through a delegate. For more information, see <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectCreating>.  
  
 The OnObjectCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnObjectCreating">
      <MemberSignature Language="C#" Value="protected virtual void OnObjectCreating (System.Web.UI.WebControls.ObjectDataSourceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnObjectCreating(class System.Web.UI.WebControls.ObjectDataSourceEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Web.UI.WebControls.ObjectDataSourceEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.ObjectCreating" /> event before the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object creates an instance of a business object to perform a data operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnObjectCreating method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnObjectDisposing">
      <MemberSignature Language="C#" Value="protected virtual void OnObjectDisposing (System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnObjectDisposing(class System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An  <see cref="T:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.ObjectDisposing" /> event before the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object discards an instantiated type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnObjectDisposing is called when the instance of an object that was created to perform a data operation is discarded. The `Dispose` method is called, only if the type that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.TypeName%2A> property implements the <xref:System.IDisposable> interface.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnObjectDisposing method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSelected">
      <MemberSignature Language="C#" Value="protected virtual void OnSelected (System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelected(class System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An  <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.Selected" /> event after the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object has completed a data retrieval operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnSelected method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSelecting">
      <MemberSignature Language="C#" Value="protected virtual void OnSelecting (System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelecting(class System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.Selecting" /> event before the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object attempts a data retrieval operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnSelecting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdated (System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdated(class System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An  <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.Updated" /> event after the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object has completed an update operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnUpdated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdating (System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdating(class System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ObjectDataSourceView.Updating" /> event before the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object attempts an update operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 The OnUpdating method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a `NorthwindEmployee`, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that triggers the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> operation is enabled only after an employee is selected.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_13#1](~/add/codesnippet/csharp/5e0e1dac-16d8-4af3-b004-_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_13#1](~/add/codesnippet/visualbasic/5e0e1dac-16d8-4af3-b004-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParsingCulture">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ParsingCulture ParsingCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParsingCulture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a or sets a value that indicates what culture information is used when converting string values to actual property types in order to construct an object of the type indicated by &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A&gt;.</summary>
        <value>The culture information. The default value is <see cref="T:System.Web.UI.WebControls.ParsingCulture" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the changes to the view state for the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object since the time when the page was posted back to the server.</summary>
        <returns>The object that contains the changes to the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> view state; otherwise <see langword="null" />, if there is no view state associated with the object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SaveViewState method is primarily used by control developers.  
  
 View state is the accumulation of the values of a server control's properties. These values are automatically placed in the <xref:System.Web.UI.Control.ViewState%2A> property for the server control, which is an instance of the <xref:System.Web.UI.StateBag> class. The <xref:System.Web.UI.Control.ViewState%2A> value is then persisted to a string object after the save-state stage of the server control life cycle.  
  
 When view state is saved, view state contents are returned to the client as a variable that is stored in an HTML `Hidden` element. When you author custom server controls, you can improve efficiency by overriding the SaveViewState method and modifying the `ViewState` property for your server control. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">A <see cref="T:System.Web.UI.DataSourceSelectArguments" /> used to request operations on the data beyond basic data retrieval.</param>
        <summary>Retrieves data from the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.TypeName%2A&gt; property by calling the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A&gt; property and passing any values in the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A&gt; collection.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerable&gt; list of data rows. For more information, see &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Select method calls the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ExecuteSelect%2A> passing the `arguments` parameter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <paramref name="arguments" /> passed to the Select method specify that the data source should perform some additional work while retrieving data to enable paging or sorting through the retrieved data, but the data source control does not support the requested capability.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectCountMethod">
      <MemberSignature Language="C#" Value="public string SelectCountMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCountMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> control invokes to retrieve a row count.</summary>
        <value>A string that represents the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> uses to retrieve a row count. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectCountMethod identifies a business object method that is used to retrieve a total row count to support data source paging. The SelectCountMethod property is evaluated, only if the <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A> property is set to `true`. For information on how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSourceView>, see <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>.  
  
 The value of the SelectCountMethod property is stored in view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a data retrieval operation has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Selected event to examine the values of a return value and output parameters or to determine whether an exception was thrown after a data retrieval operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a data retrieval operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Selecting event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the data retrieval operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public string SelectMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> control invokes to retrieve data.</summary>
        <value>A string that represents the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> uses to retrieve data. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified method can have any method signature but must return one of the types listed in the following table in order for the <xref:System.Web.UI.WebControls.ObjectDataSource> control to call it successfully  
  
|Return type|Action|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|The <xref:System.Collections.IEnumerable> is returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method.|  
|<xref:System.Data.DataTable>|A <xref:System.Data.DataView> is created using the <xref:System.Data.DataTable> and returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method.|  
|<xref:System.Data.DataSet>|The first <xref:System.Data.DataTable> of the <xref:System.Data.DataSet> is extracted and a <xref:System.Data.DataView> is created and returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method.|  
|<xref:System.Object>|The object is wrapped in a one-element <xref:System.Collections.IEnumerable> and returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method.|  
  
 The method that is identified by the SelectMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the SelectMethod method is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectCreated> event to work with the business object before the method specified by the SelectMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectDisposing> event that is raised after the method specified by the SelectMethod property is called. (`Dispose` is called only if the business object implements the <xref:System.IDisposable> interface.) If the method is a `static` (`Shared` in Visual Basic) method, the business object is never created and you cannot handle these events.  
  
 If the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> control works with implements more than one method or function with the same name (method overloads), the data source control attempts to invoke the correct one according to a set of conditions, including the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> collection. If the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> collection do not match those of the signature of the method specified by the SelectMethod property, the data source throws an exception.  
  
 For more information, see <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property and a method that is called to retrieve data with its SelectMethod property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the SelectMethod, and then displays the data.  
  
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_584_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_584_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters collection containing the parameters that are used by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A&gt; method.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains the parameters used by the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The names and types of the parameters that are contained in the SelectParameters collection must match the names and types of the parameters that are in the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property signature. When working with data-bound controls that supply parameters, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically merges any parameters that are explicitly specified in the collection with those parameters that are provided by the data-bound control. For more information, see <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve a single data record using an <xref:System.Web.UI.WebControls.ObjectDataSource> control, and then display the data record in a <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.ObjectDataSource> retrieves a specific employee record by calling the `GetEmployee` method of the `EmployeeLogic` class. The `GetEmployee` method requires an employee ID parameter. The <xref:System.Web.UI.WebControls.ObjectDataSource> control uses a <xref:System.Web.UI.WebControls.QueryStringParameter> object in its SelectParameters collection to pass an ID to the `GetEmployee` method.  
  
 To view the example implementation of the `EmployeeLogic` class and the `GetEmployee` method, see <xref:System.Web.UI.WebControls.ObjectDataSource>.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_297_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_297_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the data retrieval method parameter that is used to specify a sort expression for data source sorting support.</summary>
        <value>The name of the method parameter used to indicate the parameter that accepts this sort expression value. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SortParameterName property is used to support data source sorting. When a <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> property is set on the <xref:System.Web.UI.DataSourceSelectArguments> object and passed to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method, the SortParameterName property identifies the parameter name of the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> business object property that accepts the sort expression value.  
  
 The value of the SortParameterName property is stored in view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StartRowIndexParameterName">
      <MemberSignature Language="C#" Value="public string StartRowIndexParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartRowIndexParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the data retrieval method parameter that is used to indicate the integer index of the first record to retrieve from the results set for data source paging support.</summary>
        <value>The name of the business object method parameter used to indicate the first record to retrieve. The default is "startRowIndex".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The StartRowIndexParameterName property must be set to enable paging. For information on how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object, see <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>.  
  
 The value of the StartRowIndexParameterName property is stored in view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.IStateManager.IsTrackingViewState%2A&gt;.</summary>
        <value>
          <see langword="true" />, if the data source view is marked to save its state; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ObjectDataSourceView> instance is cast to the <xref:System.Web.UI.IStateManager> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An object that represents the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> state to restore.</param>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.IStateManager.LoadViewState%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ObjectDataSourceView> instance is cast to an <xref:System.Web.UI.IStateManager> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.IStateManager.SaveViewState%2A?displayProperty=fullName&gt;.</summary>
        <returns>The object that contains the changes to the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> view state; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ObjectDataSourceView> instance is cast to an <xref:System.Web.UI.IStateManager> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.IStateManager.TrackViewState%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ObjectDataSourceView> instance is cast to an <xref:System.Web.UI.IStateManager> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected virtual void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TrackViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object to track changes to its view state so that the changes can be stored in the &lt;xref:System.Web.UI.Control.ViewState%2A&gt; object for the control and persisted across requests for the same page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TrackViewState method is primarily used by control developers.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the class that the <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control represents.</summary>
        <value>A partially or fully qualified class name that identifies the type of the object that the <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> represents. The default is an empty string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To create an instance of the object that the <xref:System.Web.UI.WebControls.ObjectDataSource> control binds to, the control uses reflection to load the type that is identified by the type name at run time. Therefore, the value of the TypeName property can be a partially qualified type for code that is located in the Bin or App_Code directory or a fully qualified type name for code that is registered in the global assembly cache. If you use the global assembly cache, you must add the appropriate reference to the `assemblies` section of the Machine.config or Web.config configuration file.  
  
   
  
## Examples  
 The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its TypeName property and a method that is called to retrieve data with its <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> and displays the data.  
  
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_218_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_218_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">A &lt;xref:System.Collections.IDictionary&gt; of the key values used to identify the item to update. These parameters are used with the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; property to perform the update operation. If there are no parameters associated with the method, pass <see langword="null" />.</param>
        <param name="values">A &lt;xref:System.Collections.IDictionary&gt; of new values to apply to the data source. These parameters are used with the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; property to perform the update database operation. If there are no parameters associated with the method, pass <see langword="null" />.</param>
        <param name="oldValues">A &lt;xref:System.Collections.IDictionary&gt; that contains the additional non-key values used to match the item in the data source. Row values are passed to the delete method, only if the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A&gt; property is set to the <see cref="T:System.Web.UI.ConflictOptions" /> field.</param>
        <summary>Performs an update operation by calling the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; property and using any parameters that are supplied in the <paramref name="keys" />, <paramref name="values" />, or <paramref name="oldValues" /> collections.</summary>
        <returns>The number of rows updated; otherwise, -1, if the number is not known.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default return value is -1, which means that an unknown number of rows were updated. To return a different value, set the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object of the <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> event. The number of affected rows is typically returned by the `Update` method for the business object, and that value is available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> parameter of the <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> event.  
  
 The Update method calls the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ExecuteUpdate%2A> method, passing the `keys`, `values`, and `oldValues` parameters.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A&gt; operation has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Updated event to examine the values of a return value and output parameters or to determine whether an exception was thrown after an <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> object invokes to update data.</summary>
        <value>A string that represents the name of the method or function that the <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> uses to update data. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ObjectDataSourceView> object assumes that the method that is identified by the UpdateMethod property performs updates one at a time, rather than in a batch.  
  
 The method can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method specified by the UpdateMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectCreated> event to work with the business object before the method specified by the UpdateMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ObjectDisposing> event that is raised after the UpdateMethod method is called. (`Dispose` is called, only if the business object implements the <xref:System.IDisposable> interface.) If the method is a `static` (`Shared` in Visual Basic) method, the business object is never created and you cannot handle these events.  
  
 If the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> object works with implements more than one method or function with the same name (method overloads), the data source control attempts to invoke the correct one according to a set of conditions, including the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> collection. If the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> collection do not match those of the signature of the method specified by the UpdateMethod property, the data source throws an exception.  
  
 For more information, see <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod?displayProperty=fullName>.  
  
 The value of the UpdateMethod property is stored in view state.  
  
   
  
## Examples  
 The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a `NorthwindEmployee`, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that triggers the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> operation is enabled only after an employee is selected.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_413_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_413_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters collection containing the parameters that are used by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; method.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains the parameters used by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The names and types of the parameters that are contained in the UpdateParameters collection must match the names and types of the parameters that are in the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> property signature. The parameter names are affected by the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property and are case sensitive. When working with data-bound controls that supply parameters, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically merges any parameters that are explicitly specified in the collection with those parameters that are provided by the data-bound control. For more information, see <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a `NorthwindEmployee`, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the UpdateParameters collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that triggers the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> operation is enabled only after an employee is selected.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_182_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_182_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before an &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A&gt; operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Updating event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> operation. The parameters are available as an <xref:System.Collections.IDictionary> collection, accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a `NorthwindEmployee`, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that triggers the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> operation is enabled only after an employee is selected.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_13#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_93_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_13#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_93_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>