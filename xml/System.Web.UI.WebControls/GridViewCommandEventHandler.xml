<Type Name="GridViewCommandEventHandler" FullName="System.Web.UI.WebControls.GridViewCommandEventHandler">
  <TypeSignature Language="C#" Value="public delegate void GridViewCommandEventHandler(object sender, GridViewCommandEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed GridViewCommandEventHandler extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewCommandEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">The source of the event.</param>
    <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewCommandEventArgs" /> object that contains the event data.</param>
    <summary>Represents the method that handles the <see cref="E:System.Web.UI.WebControls.GridView.RowCommand" /> event of a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.RowCommand> event is raised when a button within the <xref:System.Web.UI.WebControls.GridView> control is clicked. This allows you to provide an event-handling method that performs a custom routine whenever this event occurs.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.GridView> control also raises other specialized events when certain buttons are clicked (buttons with the `CommandName` property set to "Delete", "Update", and "Page" for example). When using one of these buttons, you should consider handling one of the specialized events provided by the control (such as <xref:System.Web.UI.WebControls.GridView.RowDeleted> or <xref:System.Web.UI.WebControls.GridView.RowDeleting>).  
  
 When you create a GridViewCommandEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).  
  
   
  
## Examples  
 The following example demonstrates how to programmatically add a GridViewCommandEventHandler delegate to the <xref:System.Web.UI.WebControls.GridView.RowCommand> event of a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewCommandEventHandler#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_364_1.aspx)]
 [!code-vb[GridViewCommandEventHandler#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_364_1.aspx)]  
  
 The following example demonstrates how to declaratively add a GridViewCommandEventHandler delegate to the <xref:System.Web.UI.WebControls.GridView.RowCommand> event of a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewRowCommmand#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_364_2.aspx)]
 [!code-vb[GridViewRowCommmand#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_364_2.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
</Type>