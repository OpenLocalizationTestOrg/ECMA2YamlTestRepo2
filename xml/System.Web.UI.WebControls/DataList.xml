<Type Name="DataList" FullName="System.Web.UI.WebControls.DataList">
  <TypeSignature Language="C#" Value="public class DataList : System.Web.UI.WebControls.BaseDataList, System.Web.UI.INamingContainer, System.Web.UI.WebControls.IRepeatInfoUser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataList extends System.Web.UI.WebControls.BaseDataList implements class System.Web.UI.INamingContainer, class System.Web.UI.WebControls.IRepeatInfoUser" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseDataList</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IRepeatInfoUser</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.DataListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataListComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("SelectedValue")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A data bound list control that displays items using templates.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In this topic:  
  
-   [Introduction](#introduction)  
  
-   [Templates](#templates)  
  
-   [Customizing the Appearance of the DataList Control](#customizing_the_appearance_of_the_datalist_control)  
  
-   [Display Direction and Layout](#display_direction_and_layout)  
  
-   [Security](#security)  
  
-   [Declarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 Use the DataList control to display a template-defined data bound list. The DataList control supports selecting and editing.  
  
<a name="templates"></a>   
## Templates  
 The contents of the DataList control can be manipulated by using templates. The following table lists the supported templates.  
  
|Template Name|Description|  
|-------------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A>|If defined, provides the content and layout for alternating items in the DataList. If not defined, `ItemTemplate` is used.|  
|<xref:System.Web.UI.WebControls.DataList.EditItemTemplate%2A>|If defined, provides the content and layout for the item currently being edited in the DataList. If not defined, `ItemTemplate` is used.|  
|<xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A>|If defined, provides the content and layout for the footer section of the DataList. If not defined, a footer section will not be displayed.|  
|<xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A>|If defined, provides the content and layout for the header section of the DataList. If not defined, a header section will not be displayed.|  
|<xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A>|Required template that provides the content and layout for items in the DataList.|  
|<xref:System.Web.UI.WebControls.DataList.SelectedItemTemplate%2A>|If defined, provides the content and layout for the currently selected item in the DataList. If not defined, <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> is used.|  
|<xref:System.Web.UI.WebControls.DataList.SeparatorTemplate%2A>|If defined, provides the content and layout for the separator between items in the DataList. If not defined, a separator will not be displayed.|  
  
 At the very minimum, the <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> needs to be defined to display the items in the DataList control. Additional templates can be used to provide a custom look to the DataList control.  
  
<a name="customizing_the_appearance_of_the_datalist_control"></a>   
## Customizing the Appearance of the DataList Control  
 The appearance of the DataList control may be customized by setting the style properties for the different parts of the control. The following table lists the different style properties.  
  
|Style Property|Description|  
|--------------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|Specifies the style for alternating items in the DataList control.|  
|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|Specifies the style for the item being edited in the DataList control.|  
|<xref:System.Web.UI.WebControls.DataList.FooterStyle%2A>|Specifies the style for the footer in the DataList control.|  
|<xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A>|Specifies the style for the header in the DataList control.|  
|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|Specifies the style for the items in the DataList control.|  
|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|Specifies the style for the selected item in the DataList control.|  
|<xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A>|Specifies the style for the separator between the items in the DataList control.|  
  
 You can also show or hide different parts of the control. The following table lists the properties that control which parts are shown or hidden.  
  
|Property|Description|  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataList.ShowFooter%2A>|Shows or hides the footer section of the DataList control.|  
|<xref:System.Web.UI.WebControls.DataList.ShowHeader%2A>|Shows or hides the header section of the DataList control.|  
  
<a name="display_direction_and_layout"></a>   
## Display Direction and Layout  
 The display direction of a DataList control can be vertical or horizontal. Set the <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> property to specify the display direction.  
  
 The layout of the DataList control is controlled with the <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> property. Setting this property to `RepeatLayout.Table` will display the DataList in a table format, while `RepeatLayout.Flow` displays the DataList without a table structure.  
  
<a name="security"></a>   
## Security  
 The `DataList` control can contain controls that enable users to enter information.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input.  
  
 For more information about security, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
<a name="declarative_syntax"></a>   
## Declarative Syntax  
  
```  
<asp:DataList  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    Caption="string"  
    CaptionAlign="NotSet|Top|Bottom|Left|Right"  
    CellPadding="integer"  
    CellSpacing="integer"  
    CssClass="string"  
    DataKeyField="string"  
    DataMember="string"  
    DataSource="string"  
    DataSourceID="string"  
    EditItemIndex="integer"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ExtractTemplateRows="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    GridLines="None|Horizontal|Vertical|Both"  
    Height="size"  
    HorizontalAlign="NotSet|Left|Center|Right|Justify"  
    ID="string"  
    OnCancelCommand="CancelCommand event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleteCommand="DeleteCommand event handler"  
    OnDisposed="Disposed event handler"  
    OnEditCommand="EditCommand event handler"  
    OnInit="Init event handler"  
    OnItemCommand="ItemCommand event handler"  
    OnItemCreated="ItemCreated event handler"  
    OnItemDataBound="ItemDataBound event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelectedIndexChanged="SelectedIndexChanged event handler"  
    OnUnload="Unload event handler"  
    OnUpdateCommand="UpdateCommand event handler"  
    RepeatColumns="integer"  
    RepeatDirection="Horizontal|Vertical"  
    RepeatLayout="Table|Flow"  
    runat="server"  
    SelectedIndex="integer"  
    ShowFooter="True|False"  
    ShowHeader="True|False"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    UseAccessibleHeader="True|False"  
    Visible="True|False"  
    Width="size"  
>  
        <AlternatingItemStyle />  
        <AlternatingItemTemplate>  
            <!-- child controls -->  
        </AlternatingItemTemplate>  
        <EditItemStyle />  
        <EditItemTemplate>  
            <!-- child controls -->  
        </EditItemTemplate>  
        <FooterStyle />  
        <FooterTemplate>  
            <!-- child controls -->  
        </FooterTemplate>  
        <HeaderStyle />  
        <HeaderTemplate>  
            <!-- child controls -->  
        </HeaderTemplate>  
        <ItemStyle />  
        <ItemTemplate>  
            <!-- child controls -->  
        </ItemTemplate>  
        <SelectedItemStyle />  
        <SelectedItemTemplate>  
            <!-- child controls -->  
        </SelectedItemTemplate>  
        <SeparatorStyle />  
        <SeparatorTemplate>  
            <!-- child controls -->  
        </SeparatorTemplate>  
</asp:DataList>  
```  
  
   
  
## Examples  
 The following code example demonstrates how to use a DataList control to display a list of items from a data source.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataList#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_141_1.aspx)]
 [!code-vb[DataList#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_141_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataList" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.WebControls.DataList> class.  
  
   
  
## Examples  
 The following code example demonstrates how to create and initialize a new instance of the <xref:System.Web.UI.WebControls.DataList> class.  
  
 [!code-cs[Classic DataList.DataList Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_27_1.cs)]
 [!code-vb[Classic DataList.DataList Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_27_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternatingItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle AlternatingItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle AlternatingItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the style properties for alternating items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that represents the style properties for alternating items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is an empty <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AlternatingItemStyle property to provide a custom style for the alternating items in the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.  
  
 Item style properties in the <xref:System.Web.UI.WebControls.DataList> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property, all other item style properties in the <xref:System.Web.UI.WebControls.DataList> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the AlternatingItemStyle property, overriding the red font specified in the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property. The following table lists the hierarchy order from highest to lowest.  
  
|Precedence|Style property|  
|----------------|--------------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|AlternatingItemStyle|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 To specify a custom style for the alternating items, place the `<AlternatingItemStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<AlternatingItemStyle>` tag.  
  
   
  
## Examples  
 The following code example demonstrates how to use the AlternatingItemStyle property to specify a different background color for alternating items in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListItemStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_512_1.aspx)]
 [!code-cs[DataListItemStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_512_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternatingItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate AlternatingItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate AlternatingItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template for alternating items in the <see cref="T:System.Web.UI.WebControls.DataList" />.</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> object that contains the template for alternating items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AlternatingItemTemplate property to control the contents of alternating items in the <xref:System.Web.UI.WebControls.DataList> control. The appearance of alternating items is controlled by the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property.  
  
 To specify a template for the alternating items, place the `<AlternatingItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<AlternatingItemTemplate>` tags.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the AlternatingItemTemplate property to control the contents of alternating items in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListAlternatingItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1361_1.aspx)]
 [!code-cs[DataListAlternatingItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1361_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler CancelCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler CancelCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see langword="Cancel" /> button is clicked for an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CancelCommand event is raised when the `Cancel` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 A typical handler for the CancelCommand event sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to `-1` (to deselect the item) and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!CAUTION]
>  Text is not HTML encoded before it is displayed in the <xref:System.Web.UI.WebControls.DataList> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.  
  
 For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the CancelCommand event. It cancels any edits made to an item in the <xref:System.Web.UI.WebControls.DataList> control when the `Cancel` button is clicked.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_29_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_29_1.aspx)]  
  
 [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_29_2.aspx)]
 [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_29_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelCommandName">
      <MemberSignature Language="C#" Value="public const string CancelCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string CancelCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the <see langword="Cancel" /> command name. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CancelCommandName field to represent the `Cancel` command name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControlHierarchy">
      <MemberSignature Language="C#" Value="protected override void CreateControlHierarchy (bool useDataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateControlHierarchy(bool useDataSource) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useDataSource" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useDataSource">
          <see langword="true" /> to use the control's data source; <see langword="false" /> to indicate that the control is being recreated from view state and should not be data-bound.</param>
        <summary>Creates the control hierarchy that is used to render the data list control, with or without the specified data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateControlHierarchy method is used primarily by control developers when deriving a custom implementation from the <xref:System.Web.UI.WebControls.DataList> control.  
  
 The CreateControlHierarchy method uses the <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> and <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> methods to create <xref:System.Web.UI.WebControls.DataListItem> controls that represent the header, footer, separator, and data-bound items contained in the data list. You can access the data-bound items for the data list through the <xref:System.Web.UI.WebControls.DataList.Items%2A> collection. You can access all item types, including the header, footer, and separator items, through the <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> collection.  
  
 Override the CreateControlHierarchy method to customize how <xref:System.Web.UI.WebControls.DataListItem> controls are created or added to the <xref:System.Web.UI.WebControls.DataList> control. Override the <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> method to customize templates for a <xref:System.Web.UI.WebControls.DataListItem> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the default style object that is used internally by the <see cref="T:System.Web.UI.WebControls.DataList" /> control to implement all style related properties.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.TableStyle" /> that contains the default style properties for the control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateControlStyle method is used primarily by control developers in deriving a custom implementation from the <xref:System.Web.UI.WebControls.DataList> control.  
  
   
  
## Examples  
 The following code example demonstrates how to override the CreateControlStyle method in a custom server control so that it always displays horizontal grid lines with no cell spacing in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 [!code-vb[CustomDataListCreateControlStyle#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_243_1.aspx)]
 [!code-cs[CustomDataListCreateControlStyle#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_243_1.aspx)]  
[!code-vb[CustomDataListCreateControlStyle#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_243_2.vb)]
[!code-cs[CustomDataListCreateControlStyle#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_243_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateItem">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.DataListItem CreateItem (int itemIndex, System.Web.UI.WebControls.ListItemType itemType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.DataListItem CreateItem(int32 itemIndex, valuetype System.Web.UI.WebControls.ListItemType itemType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndex" Type="System.Int32" />
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListItemType" />
      </Parameters>
      <Docs>
        <param name="itemIndex">The specified location within the <see cref="T:System.Web.UI.WebControls.DataList" /> to place the created item.</param>
        <param name="itemType">A <see cref="T:System.Web.UI.WebControls.ListItemType" /> that represents the specified type of the item to create.</param>
        <summary>Creates a <see cref="T:System.Web.UI.WebControls.DataListItem" /> object.</summary>
        <returns>A new <see cref="T:System.Web.UI.WebControls.DataListItem" /> created with the specified list-item type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateItem method is used primarily by control developers in creating a custom implementation of the <xref:System.Web.UI.WebControls.DataList> control. The CreateItem method is functionally equivalent to calling the <xref:System.Web.UI.WebControls.DataListItem.%23ctor%2A> constructor for a <xref:System.Web.UI.WebControls.DataListItem>. The <xref:System.Web.UI.WebControls.DataListItem.ItemIndex%2A> and <xref:System.Web.UI.WebControls.DataListItem.ItemType%2A> properties are initialized for the new <xref:System.Web.UI.WebControls.DataListItem> using the specified values, but the item is not inserted into the <xref:System.Web.UI.WebControls.DataList>.  
  
 The <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> method uses the CreateItem and <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> methods to create <xref:System.Web.UI.WebControls.DataListItem> controls that represent the header, footer, separator, and data-bound items contained in the data list. You can access the data-bound items for the data list through the <xref:System.Web.UI.WebControls.DataList.Items%2A> collection. You can access all item types, including the header, footer, and separator items, through the <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler DeleteCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler DeleteCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see langword="Delete" /> button is clicked for an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DeleteCommand event is raised when the `Delete` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 A typical handler for the DeleteCommand event removes the selected item from the data source and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.  
  
 For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the DeleteCommand event. It deletes the selected item in the <xref:System.Web.UI.WebControls.DataList> control when the `Delete` button is clicked.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_109_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_109_1.aspx)]  
  
 [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_109_2.aspx)]
 [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_109_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandName">
      <MemberSignature Language="C#" Value="public const string DeleteCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DeleteCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the <see langword="Delete" /> command name. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DeleteCommandName field to represent the `Delete` command name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler EditCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler EditCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see langword="Edit" /> button is clicked for an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The EditCommand event is raised when the `Edit` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 A typical handler for the EditCommand event sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to the selected row and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!CAUTION]
>  Text is not HTML encoded before it is displayed in the <xref:System.Web.UI.WebControls.DataList> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.  
  
 For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the EditCommand event. It allows you to edit the selected item in the <xref:System.Web.UI.WebControls.DataList> control when the `Edit` button is clicked.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_64_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_64_1.aspx)]  
  
 [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_64_2.aspx)]
 [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_64_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditCommandName">
      <MemberSignature Language="C#" Value="public const string EditCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EditCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the <see langword="Edit" /> command name. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EditCommandName field to represent the `Edit` command name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditItemIndex">
      <MemberSignature Language="C#" Value="public virtual int EditItemIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditItemIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index number of the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control to edit.</summary>
        <value>The index number of the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control to edit.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EditItemIndex property to programmatically specify the item to edit. You can also use this property to determine the index of the item selected for editing.  
  
> [!NOTE]
>  The EditItemIndex property is zero based.  
  
 To unselect an item, set the EditItemIndex property to `-1`.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
 The EditItemIndex property is stored in control state.  
  
   
  
## Examples  
 The following code example demonstrates how to use the EditItemIndex property to specify the item selected by the user for editing.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_620_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_620_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see langword="0" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle EditItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EditItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the style properties for the item selected for editing in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the style properties for the item selected for editing in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is an empty <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EditItemStyle property to provide a custom style for the item selected for editing in the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.  
  
 Item style properties in the <xref:System.Web.UI.WebControls.DataList> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property, all other item style properties in the <xref:System.Web.UI.WebControls.DataList> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property, overriding the red font specified in the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property. The following table lists the hierarchy order from highest to lowest.  
  
|Precedence|Style Property|  
|----------------|--------------------|  
|1|EditItemStyle|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 To specify a custom style for the item selected for editing, place the `<EditItemStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<EditItemStyle>` tag.  
  
   
  
## Examples  
 The following code example demonstrates how to use the EditItemStyle property to specify a different appearance for the item selected by the user for editing.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_214_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_214_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EditItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template for the item selected for editing in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> object that contains the template for the item selected for editing in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EditItemTemplate property to control the contents of the item selected for editing in the <xref:System.Web.UI.WebControls.DataList> control. The appearance of the item selected for editing is controlled by the <xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A> property.  
  
 To specify a template for the item selected for editing, place the `<EditItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<EditItemTemplate>` tags.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the EditItemTemplate property to control the contents of the item selected by the user for editing.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_316_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_316_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExtractTemplateRows">
      <MemberSignature Language="C#" Value="public virtual bool ExtractTemplateRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExtractTemplateRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the rows of a <see cref="T:System.Web.UI.WebControls.Table" /> control, defined in each template of a <see cref="T:System.Web.UI.WebControls.DataList" /> control, are extracted and displayed.</summary>
        <value>
          <see langword="true" /> if the rows of a <see cref="T:System.Web.UI.WebControls.Table" /> control, defined in each template of a <see cref="T:System.Web.UI.WebControls.DataList" /> control, are extracted and displayed; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The contents of the <xref:System.Web.UI.WebControls.DataList> control are specified by using templates. Normally, you list controls that you want to display in the templates. You can also place a <xref:System.Web.UI.WebControls.Table> control in a template and display the rows of the table.  
  
 Use the ExtractTemplateRows property to specify whether the rows of a <xref:System.Web.UI.WebControls.Table> control defined in each template of a <xref:System.Web.UI.WebControls.DataList> control are extracted and displayed. All rows extracted from the templates of the <xref:System.Web.UI.WebControls.DataList> control are displayed in a single table. This allows you to create a single table from other smaller tables and still maintain the features of the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  When this property is set to `true`, you must provide a well-formed <xref:System.Web.UI.WebControls.Table> control for each template you want to include in the <xref:System.Web.UI.WebControls.DataList> control. Only the rows of the tables will be displayed. All other content in the template will be ignored. You must use a <xref:System.Web.UI.WebControls.Table> control for this feature to work properly. The <xref:System.Web.UI.HtmlControls.HtmlTable?displayProperty=fullName> control is not compatible with this property.  
  
 When you create a cell for a <xref:System.Web.UI.WebControls.Table> control in a template, you can use the <xref:System.Web.UI.WebControls.TableCell.ColumnSpan%2A> property of the <xref:System.Web.UI.WebControls.TableCell> object to control the number of columns the cell spans. You can also use the <xref:System.Web.UI.WebControls.TableCell.RowSpan%2A> property to control the number of rows the cell spans.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A>, <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A>, and <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> properties do not affect the appearance of the <xref:System.Web.UI.WebControls.DataList> control when this property is set to `true`.  
  
   
  
## Examples  
 The following code example demonstrate how to use the ExtractTemplateRows property to extract and display the rows of <xref:System.Web.UI.WebControls.Table> controls defined in the templates of the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[Classic DataList.ExtractTemplateRows Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1162_1.aspx)]
 [!code-cs[Classic DataList.ExtractTemplateRows Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1162_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FooterStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle FooterStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the style properties for the footer section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the style properties for the footer section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is an empty <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to provide a custom style for the footer section of the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.  
  
 The FooterStyle property of the <xref:System.Web.UI.WebControls.DataList> control inherits the style settings of the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property, the FooterStyle property will also have a red font. This allows you to provide a common appearance for the control by setting a single style property. You can override the inherited style settings by setting the FooterStyle property. For example, you can specify a blue font for the FooterStyle property, overriding the red font specified in the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property.  
  
 To specify a custom style for the footer section, place the `<FooterStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<FooterStyle>` tag.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> property must be set to `true` for this property to be visible.  
  
   
  
## Examples  
 The following code example demonstrates how to use the FooterStyle property to specify a custom background color for the footer section of the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListHeaderStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_335_1.aspx)]
 [!code-vb[DataListHeaderStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_335_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FooterTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate FooterTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate FooterTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template for the footer section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> object that contains the template for the footer section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the FooterTemplate property to control the contents of the footer section. The appearance of the footer section is controlled by the <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> property.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> property must be set to `true` for this property to be visible.  
  
 The <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property of the <xref:System.Web.UI.WebControls.DataList> control inherits the style settings of the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property, the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property will also have a red font. This allows you to provide a common appearance for the control by setting a single style property. You can override the inherited style settings by setting the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property. For example, you can specify a blue font for the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property, overriding the red font specified in the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property.  
  
 To specify a template for the footer section, place the `<FooterTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<FooterTemplate>` tags.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the FooterTemplate property to control the contents of the footer section of the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListHeaderStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1036_1.aspx)]
 [!code-vb[DataListHeaderStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1036_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.GridLines GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.GridLines GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridLines</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the grid line style for the <see cref="T:System.Web.UI.WebControls.DataList" /> control when the &lt;xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A&gt; property is set to <see langword="RepeatLayout.Table" />.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.GridLines" /> enumeration values. The default value is <see langword="None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the GridLines property to specify the grid line style for the <xref:System.Web.UI.WebControls.DataList> control. The following table lists the possible styles.  
  
|Style|Description|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.GridLines>|No grid lines.|  
|<xref:System.Web.UI.WebControls.GridLines>|Displays the horizontal grid lines.|  
|<xref:System.Web.UI.WebControls.GridLines>|Displays the vertical grid line.|  
|<xref:System.Web.UI.WebControls.GridLines>|Displays both the horizontal and vertical grid lines.|  
  
> [!NOTE]
>  This property only applies if the <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> property is set to `RepeatLayout.Table`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the GridLines property to display the vertical and horizontal grid lines of the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1324_1.aspx)]
 [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1324_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the style properties for the heading section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the style properties for the heading section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is an empty <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to provide a custom style for the heading of the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.  
  
 To specify a custom style for the heading section, place the `<HeaderStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<HeaderStyle>` tag.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> property must be set to `true` for this property to be visible.  
  
   
  
## Examples  
 The following code example demonstrates how to use the HeaderStyle property to specify a custom background color for the heading section of the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListHeaderStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1175_1.aspx)]
 [!code-vb[DataListHeaderStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1175_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template for the heading section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> that contains the template for the heading section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the HeaderTemplate property to control the contents of the heading section. The appearance of the header section is controlled by the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> property must be set to `true` for this property to be visible.  
  
 To specify a template for the heading section, place the `<HeaderTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<HeaderTemplate>` tags.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the HeaderTemplate property to control the contents of the heading section of the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_905_1.aspx)]
 [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_905_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InitializeItem">
      <MemberSignature Language="C#" Value="protected virtual void InitializeItem (System.Web.UI.WebControls.DataListItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeItem(class System.Web.UI.WebControls.DataListItem item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Web.UI.WebControls.DataListItem" />
      </Parameters>
      <Docs>
        <param name="item">The <see cref="T:System.Web.UI.WebControls.DataListItem" /> to initialize.</param>
        <summary>Initializes a <see cref="T:System.Web.UI.WebControls.DataListItem" /> object based on the specified templates and styles for the list-item type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InitializeItem method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.DataList> control.  
  
 The <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> method uses the <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> and InitializeItem methods to create <xref:System.Web.UI.WebControls.DataListItem> controls that represent the header, footer, separator, and data-bound items contained in the data list. You can access the data-bound items for the data list through the <xref:System.Web.UI.WebControls.DataList.Items%2A> collection. You can access all item types, including the header, footer, and separator items, through the <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> collection.  
  
 Override the <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> method to customize how <xref:System.Web.UI.WebControls.DataListItem> controls are created or added to the <xref:System.Web.UI.WebControls.DataList> control. Override the InitializeItem method to customize templates for a <xref:System.Web.UI.WebControls.DataListItem> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler ItemCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler ItemCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any button is clicked in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ItemCommand event is raised when any button is clicked in the <xref:System.Web.UI.WebControls.DataList> control and is commonly used when you have a button control with a custom `CommandName` value.  
  
 For more information about handling events, see[How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the ItemCommand event to select an item from the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_0_1.aspx)]
 [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_0_1.aspx)]  
  
 [!code-vb[DataListItemCommand2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_0_2.aspx)]
 [!code-cs[DataListItemCommand2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_0_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListItemEventHandler ItemCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListItemEventHandler ItemCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs on the server when an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control is created.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ItemCreated event is raised when an item in the <xref:System.Web.UI.WebControls.DataList> control is created, both during round-trips and at the time data is bound to the control.  
  
 The ItemCreated event is commonly used to control the content and appearance of a row in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the ItemCreated event to display the order in which items in the <xref:System.Web.UI.WebControls.DataList> control are created.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListItemCreated#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_106_1.aspx)]
 [!code-cs[DataListItemCreated#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_106_1.aspx)]  
  
 [!code-cs[DataListItemCreated2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_106_2.aspx)]
 [!code-vb[DataListItemCreated2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_106_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemDataBound">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListItemEventHandler ItemDataBound;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListItemEventHandler ItemDataBound" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an item is data bound to the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ItemDataBound event is raised after an item is data bound to the <xref:System.Web.UI.WebControls.DataList> control. This event provides you with the last opportunity to access the data item before it is displayed on the client. After this event is raised, the data item is no longer available.  
  
 For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the ItemDataBound event to display the order in which items in the <xref:System.Web.UI.WebControls.DataList> control are bound to the control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListItemDataBound#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_143_1.aspx)]
 [!code-vb[DataListItemDataBound#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_143_1.aspx)]  
  
 [!code-vb[DataListItemDataBound2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_143_2.aspx)]
 [!code-cs[DataListItemDataBound2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_143_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataListItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataListItemCollection Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.DataListItem" /> objects representing the individual items within the control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.DataListItemCollection" /> that contains a collection of <see cref="T:System.Web.UI.WebControls.DataListItem" /> objects representing the individual items within the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Items collection to programmatically control the items in the <xref:System.Web.UI.WebControls.DataList> control. The Items collection does not provide any methods to add or remove items to the collection. However, you can control the contents of an item by providing a handler for the <xref:System.Web.UI.WebControls.DataList.ItemCreated> event.  
  
> [!NOTE]
>  Only items bound to the data source are contained in the Items collection. The header, footer, and separator are not included in the collection.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Items collection to display the items in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[Classic DataList.Items Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_231_1.aspx)]
 [!code-cs[Classic DataList.Items Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_231_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle ItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle ItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the style properties for the items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the style properties for the items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is an empty <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to provide a custom style for the items of the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.  
  
 Item style properties in the <xref:System.Web.UI.WebControls.DataList> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the ItemStyle property, all other item style properties in the <xref:System.Web.UI.WebControls.DataList> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property, overriding the red font specified in the ItemStyle property. The following table lists the hierarchy order from highest to lowest.  
  
|Precedence|Style Property|  
|----------------|--------------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|ItemStyle|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 To specify a custom style for the items of the <xref:System.Web.UI.WebControls.DataList> control, place the `<ItemStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<ItemStyle>` tag.  
  
 You can also use the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property to provide a different appearance for the alternating items in the <xref:System.Web.UI.WebControls.DataList> control.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ItemStyle property to specify a different background color for the items in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListItemStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_649_1.aspx)]
 [!code-cs[DataListItemStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_649_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template for the items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> that contains the template for the items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ItemTemplate property to control the contents of the items in the <xref:System.Web.UI.WebControls.DataList> control. The appearance of the items in the <xref:System.Web.UI.WebControls.DataList> control is controlled by the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property.  
  
 To specify a template for the items of the <xref:System.Web.UI.WebControls.DataList> control, place the `<ItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<ItemTemplate>` tags.  
  
 You can optionally use the <xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A> property to provide a different appearance for the alternating items in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the ItemTemplate property to control the contents of the items in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_848_1.aspx)]
 [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_848_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An object that represents the state of the <see cref="T:System.Web.UI.WebControls.DataList" />.</param>
        <summary>Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code.  However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 The LoadViewState method restores view-state information for the <xref:System.Web.UI.WebControls.DataList> control from a previous page request that was saved by the <xref:System.Web.UI.WebControls.DataList.SaveViewState%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">The source of the event.</param>
        <param name="e">The event data.</param>
        <summary>Determines whether the event for the server control is passed up the page's UI server control hierarchy.</summary>
        <returns>
          <see langword="true" /> if the event has been canceled; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCancelCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCancelCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCancelCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.DataList.CancelCommand" /> event. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OnCancelCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.CancelCommand> event.  
  
 The <xref:System.Web.UI.WebControls.DataList.CancelCommand> event is raised when the `Cancel` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 A typical handler for the <xref:System.Web.UI.WebControls.DataList.CancelCommand> event sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to `-1` (to deselect the item) and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
 Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
 The OnCancelCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.CancelCommand> event. It cancels any edits made to an item in the <xref:System.Web.UI.WebControls.DataList> control when the `Cancel` button is clicked.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/f712037e-c950-4136-8daf-_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/f712037e-c950-4136-8daf-_1.aspx)]  
  
 [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/f712037e-c950-4136-8daf-_2.aspx)]
 [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/f712037e-c950-4136-8daf-_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDeleteCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleteCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleteCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" /> event. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OnDeleteCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.DeleteCommand> event.  
  
 The <xref:System.Web.UI.WebControls.DataList.DeleteCommand> event is raised when the `Delete` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 A typical handler for the <xref:System.Web.UI.WebControls.DataList.DeleteCommand> event removes the selected item from the data source and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
 The OnDeleteCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.DeleteCommand> event. It deletes the selected item in the <xref:System.Web.UI.WebControls.DataList> control when the `Delete` button is clicked.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/b69fcef1-7d66-4606-9238-_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/b69fcef1-7d66-4606-9238-_1.aspx)]  
  
 [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/b69fcef1-7d66-4606-9238-_2.aspx)]
 [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/b69fcef1-7d66-4606-9238-_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnEditCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnEditCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEditCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.DataList.EditCommand" /> event. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OnEditCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.EditCommand> event.  
  
 The <xref:System.Web.UI.WebControls.DataList.EditCommand> event is raised when the `Edit` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 A typical handler for the <xref:System.Web.UI.WebControls.DataList.EditCommand> event sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to the selected row and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
 Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
 The OnEditCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.EditCommand> event. It allows you to edit the selected item in the <xref:System.Web.UI.WebControls.DataList> control when the `Edit` button is clicked.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/99a47a87-5972-4aac-87aa-_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/99a47a87-5972-4aac-87aa-_1.aspx)]  
  
 [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/99a47a87-5972-4aac-87aa-_2.aspx)]
 [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/99a47a87-5972-4aac-87aa-_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event for the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnInit method notifies the <xref:System.Web.UI.WebControls.DataList> control to perform any initialization steps that are required to create and set up an instance.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.DataList.ItemCommand" /> event. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OnItemCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.ItemCommand> event.  
  
 The <xref:System.Web.UI.WebControls.DataList.ItemCommand> event is raised when any button is clicked in the <xref:System.Web.UI.WebControls.DataList> control and is commonly used when you have a button control with a custom `CommandName` value, such as `Add`, in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
 The OnItemCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.ItemCommand> event to select an item from the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/346e0b5a-81b1-46ba-abc9-_1.aspx)]
 [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/346e0b5a-81b1-46ba-abc9-_1.aspx)]  
  
 [!code-vb[DataListItemCommand2#1](~/add/codesnippet/visualbasic/346e0b5a-81b1-46ba-abc9-_2.aspx)]
 [!code-cs[DataListItemCommand2#1](~/add/codesnippet/csharp/346e0b5a-81b1-46ba-abc9-_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCreated (System.Web.UI.WebControls.DataListItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCreated(class System.Web.UI.WebControls.DataListItemEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.DataList.ItemCreated" /> event. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OnItemCreated method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.ItemCreated> event.  
  
 The <xref:System.Web.UI.WebControls.DataList.ItemCreated> event is raised when an item in the <xref:System.Web.UI.WebControls.DataList> control is created, both during round-trips and at the time data is bound to the control.  
  
 The <xref:System.Web.UI.WebControls.DataList.ItemCreated> event is commonly used to control the content and appearance of a row in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
 The OnItemCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.ItemCreated> event to display the order in which items in the <xref:System.Web.UI.WebControls.DataList> control are created.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListItemCreated#1](~/add/codesnippet/visualbasic/daa572be-0a5b-4a9b-a0e3-_1.aspx)]
 [!code-cs[DataListItemCreated#1](~/add/codesnippet/csharp/daa572be-0a5b-4a9b-a0e3-_1.aspx)]  
  
 [!code-cs[DataListItemCreated2#1](~/add/codesnippet/csharp/daa572be-0a5b-4a9b-a0e3-_2.aspx)]
 [!code-vb[DataListItemCreated2#1](~/add/codesnippet/visualbasic/daa572be-0a5b-4a9b-a0e3-_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemDataBound">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDataBound (System.Web.UI.WebControls.DataListItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDataBound(class System.Web.UI.WebControls.DataListItemEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.DataList.ItemDataBound" /> event. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OnItemDataBound method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.ItemDataBound> event.  
  
 The <xref:System.Web.UI.WebControls.DataList.ItemDataBound> event is raised after an item is data bound to the <xref:System.Web.UI.WebControls.DataList> control. This event provides you with the last opportunity to access the data item before it is displayed on the client. After this event is raised, the data item is no longer available.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
 The OnItemDataBound method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.ItemDataBound> event to display the order in which items in the <xref:System.Web.UI.WebControls.DataList> control are bound to the control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListItemDataBound#1](~/add/codesnippet/csharp/d0f378ec-24e7-443f-8ae5-_1.aspx)]
 [!code-vb[DataListItemDataBound#1](~/add/codesnippet/visualbasic/d0f378ec-24e7-443f-8ae5-_1.aspx)]  
  
 [!code-vb[DataListItemDataBound2#1](~/add/codesnippet/visualbasic/d0f378ec-24e7-443f-8ae5-_2.aspx)]
 [!code-cs[DataListItemDataBound2#1](~/add/codesnippet/csharp/d0f378ec-24e7-443f-8ae5-_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnUpdateCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdateCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdateCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" /> event. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OnUpdateCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.UpdateCommand> event.  
  
 The <xref:System.Web.UI.WebControls.DataList.UpdateCommand> event is raised when the `Update` button for an item is clicked.  
  
 A typical handler for the <xref:System.Web.UI.WebControls.DataList.UpdateCommand> event updates the data, sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to `-1` (to deselect the item), and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
 Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
 The OnUpdateCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.UpdateCommand> event. It allows you to update the selected item in the <xref:System.Web.UI.WebControls.DataList> control with the new values entered by the user when the `Update` button is clicked.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/0d1a8fde-7046-4f78-b346-_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/0d1a8fde-7046-4f78-b346-_1.aspx)]  
  
 [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/0d1a8fde-7046-4f78-b346-_2.aspx)]
 [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/0d1a8fde-7046-4f78-b346-_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrepareControlHierarchy">
      <MemberSignature Language="C#" Value="protected override void PrepareControlHierarchy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void PrepareControlHierarchy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepares the control hierarchy for rendering in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PrepareControlHierarchy method is used primarily by control developers when deriving a custom control from the <xref:System.Web.UI.WebControls.DataList> control.  
  
 The PrepareControlHierarchy prepares the control hierarchy and sets styles for contained <xref:System.Web.UI.WebControls.DataListItem> controls before the child controls are rendered.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        <summary>Renders the list items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RenderContents method is used primarily by control developers, when deriving a custom control from the <xref:System.Web.UI.WebControls.DataList> control.  
  
 The RenderContents method renders the inner content of the <xref:System.Web.UI.WebControls.DataList> control, including the contained <xref:System.Web.UI.WebControls.DataListItem> controls.  
  
   
  
## Examples  
 The following code example demonstrates how to override the RenderContents method in a custom server control so that some text precedes the <xref:System.Web.UI.WebControls.DataList> object.  
  
 [!code-cs[CustomDataListRenderContents#1](~/add/codesnippet/csharp/723e0bf7-1579-4578-bf9d-_1.aspx)]
 [!code-vb[CustomDataListRenderContents#1](~/add/codesnippet/visualbasic/723e0bf7-1579-4578-bf9d-_1.aspx)]  
[!code-cs[CustomDataListRenderContents#2](~/add/codesnippet/csharp/723e0bf7-1579-4578-bf9d-_2.cs)]
[!code-vb[CustomDataListRenderContents#2](~/add/codesnippet/visualbasic/723e0bf7-1579-4578-bf9d-_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RepeatColumns">
      <MemberSignature Language="C#" Value="public virtual int RepeatColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RepeatColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of columns to display in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>The number of columns to display in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is <see langword="0" />, which indicates that the items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control are displayed in a single row or column, based on the value of the &lt;xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to specify the number of columns that display items in the <xref:System.Web.UI.WebControls.DataList> control. For example, if you set this property to `5`, the <xref:System.Web.UI.WebControls.DataList> control displays its items in five columns.  
  
> [!NOTE]
>  If this property is set to `0`, the <xref:System.Web.UI.WebControls.DataList> control displays its items in a single row or column, based on the value of the <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> property. If the <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> property is set to `RepeatDirection.Horizontal`, the items are displayed in a single row. If the <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> property is set to `RepeatDirection.Vertical`, the items are displayed in a single column.  
  
   
  
## Examples  
 The following code example demonstrates how to use the RepeatColumns property to specify the number of columns to display in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_722_1.aspx)]
 [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_722_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified number of columns is a negative value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RepeatDirection">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.RepeatDirection RepeatDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.RepeatDirection RepeatDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.RepeatDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the <see cref="T:System.Web.UI.WebControls.DataList" /> control displays vertically or horizontally.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.RepeatDirection" /> values. The default is <see langword="Vertical" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RepeatDirection property to specify the display direction of the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The number of columns displayed is always determined by the <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> property.  
  
 If this property is set to `RepeatDirection.Vertical`, the items in the list are displayed in columns loaded from top to bottom, then left to right, until all items are rendered. For example, if the <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> property is set to `3`, the items in the <xref:System.Web.UI.WebControls.DataList> control are displayed in three columns, as in the following table.  
  
||||  
|-|-|-|  
|1|4|7|  
|2|5|8|  
|3|6|9|  
  
 If this property is set to `RepeatDirection.Horizontal`, the items in the list are displayed in rows loaded from left to right, then top to bottom, until all items are rendered. For example, if the <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> property is set to `3`, the items of the <xref:System.Web.UI.WebControls.DataList> control are displayed in rows of three items each, as in the following table.  
  
||||  
|-|-|-|  
|1|2|3|  
|4|5|6|  
|7|8|9|  
  
   
  
## Examples  
 The following code example demonstrates how to use the RepeatDirection property to specify the direction in which the <xref:System.Web.UI.WebControls.DataList> control is displayed.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_42_1.aspx)]
 [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_42_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value is not one of the <see cref="T:System.Web.UI.WebControls.RepeatDirection" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RepeatLayout">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.RepeatLayout RepeatLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.RepeatLayout RepeatLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.RepeatLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the control is displayed in a table or flow layout.</summary>
        <value>A value that specifies whether the control is displayed in a table or in flow layout.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RepeatLayout property to specify whether the items in the <xref:System.Web.UI.WebControls.DataList> control are displayed in a table. The only <xref:System.Web.UI.WebControls.RepeatLayout> values that are supported by the <xref:System.Web.UI.WebControls.DataList> control are <xref:System.Web.UI.WebControls.RepeatLayout> and <xref:System.Web.UI.WebControls.RepeatLayout>.  
  
 If this property is set to `RepeatLayout.Table`, the items in the list are displayed in a table. If this property is set to `RepeatLayout.Flow`, the items in the list are displayed without a table structure.  
  
 When the <xref:System.Web.UI.WebControls.DataList> control is displayed in a table, you can use the <xref:System.Web.UI.WebControls.DataList.GridLines%2A> property to specify a grid line style.  
  
   
  
## Examples  
 The following code example demonstrates how to use the RepeatLayout property to specify the layout style of the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_586_1.aspx)]
 [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_586_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value is not one of the supported <see cref="T:System.Web.UI.WebControls.RepeatLayout" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the changes to the control view state since the time the page was posted back to the server.</summary>
        <returns>The object that contains the changes to the <see cref="T:System.Web.UI.WebControls.DataList" /> view state.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SaveViewState method is used primarily by control developers.  
  
 View state is the accumulation of the values of a server control's properties. These values are automatically placed in the server control's <xref:System.Web.UI.Control.ViewState%2A> property, which is an instance of the <xref:System.Web.UI.StateBag> class. The <xref:System.Web.UI.Control.ViewState%2A> property's value is then persisted to a string object after the save-state stage of the server control's life cycle. For more information, see [ASP.NET Page Life Cycle Overview](~/add/includes/ajax-current-ext-md.md).  
  
 When view state is saved, this string object is returned to the client as a variable that is stored in a hidden HTML input element. When you author custom server controls, you can improve efficiency by overriding the SaveViewState method and modifying the <xref:System.Web.UI.Control.ViewState%2A> property for your server control. For more information, see [Developing Custom ASP.NET Server Controls](~/add/includes/ajax-current-ext-md.md) and [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandName">
      <MemberSignature Language="C#" Value="public const string SelectCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelectCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the <see langword="Select" /> command name. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SelectCommandName field to represent the `Select` command name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public virtual int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>The index of the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SelectedIndex property to programmatically specify the selected item in the <xref:System.Web.UI.WebControls.DataList> control. You can also use this property to determine the index of the selected item.  
  
> [!NOTE]
>  The SelectedIndex property is zero based.  
  
 To deselect an item, set the SelectedIndex property to `-1`.  
  
 The SelectedIndex property is stored in control state.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SelectedIndex property to specify the selected item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1039_1.aspx)]
 [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1039_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value is less than <see langword="-1" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataListItem SelectedItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataListItem SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.DataListItem" /> that represents the item selected in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SelectedItem property to get a <xref:System.Web.UI.WebControls.DataListItem> object that represents the selected item in the <xref:System.Web.UI.WebControls.DataList> control. This object can then be used to access the properties of the selected item.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SelectedItem property to display the contents of the selected item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[Classic DataList.SelectedItem Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_681_1.aspx)]
 [!code-vb[Classic DataList.SelectedItem Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_681_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle SelectedItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SelectedItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the style properties for the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the style properties for the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is an empty <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to provide a custom style for the selected item in the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.  
  
 Item style properties in the <xref:System.Web.UI.WebControls.DataList> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property, all other item style properties in the <xref:System.Web.UI.WebControls.DataList> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property, overriding the red font specified in the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property. The following table lists the hierarchy order from highest to lowest.  
  
|Precedence|Style Property|  
|----------------|--------------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|SelectedItemStyle|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 To specify a custom style for the selected item, place the `<SelectedItemStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<SelectedItemStyle>` tag.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SelectedItemStyle property to specify a custom background color for the selected item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_571_1.aspx)]
 [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_571_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate SelectedItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate SelectedItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template for the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> that contains the template for the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SelectedItemTemplate property to control the contents of the selected item. The appearance of the selected item is controlled by the <xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A> property.  
  
 To specify a template for the selected item, place the `<SelectedItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<SelectedItemTemplate>` tags.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the SelectedItemTemplate property to control the contents of the selected item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_845_1.aspx)]
 [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_845_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedValue">
      <MemberSignature Language="C#" Value="public object SelectedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the key field for the selected data list item.</summary>
        <value>The key field value for the selected data list item. The default is <see langword="null" />, which indicates that no data list item is currently selected.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Web.UI.WebControls.BaseDataList.DataKeyField%2A&gt; property has not been set.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SeparatorStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle SeparatorStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SeparatorStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the style properties of the separator between each item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the style properties of the separator between each item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is an empty <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SeparatorStyle property to provide a custom style for the separator between each item in the <xref:System.Web.UI.WebControls.DataList> control. The separator allows you to place an element with custom content between each item in the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.  
  
 To specify a custom style for the separator, place the `<SeparatorStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<SeparatorStyle>` tag.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SeparatorStyle property to specify a custom background color for the separator between each item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListSeparatorStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1134_1.aspx)]
 [!code-vb[DataListSeparatorStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1134_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SeparatorTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate SeparatorTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate SeparatorTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template for the separator between the items of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> that contains the template for the separator between items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SeparatorTemplate property to control the contents of the separator between the items of the <xref:System.Web.UI.WebControls.DataList> control. The separator allows you to place an element with custom content between each item in the <xref:System.Web.UI.WebControls.DataList> control. The appearance of the separator between the items of the <xref:System.Web.UI.WebControls.DataList> control is controlled by the <xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A> property.  
  
 To specify a template for the separator, place the `<SeparatorTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<SeparatorTemplate>` tags.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the SeparatorTemplate property to control the contents of the separator between each item in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListSeparatorStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1118_1.aspx)]
 [!code-vb[DataListSeparatorStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1118_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowFooter">
      <MemberSignature Language="C#" Value="public virtual bool ShowFooter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFooter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the footer section is displayed in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>
          <see langword="true" /> if the footer section is displayed; otherwise, <see langword="false" />. The default value is <see langword="true" />, however this property is only examined when the &lt;xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A&gt; property is not <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ShowFooter property to specify whether the footer section is displayed in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 You can control the appearance of the footer section by setting the <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> property. The contents of the footer section are controlled by the <xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ShowFooter property to display the footer section in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListShowHeader#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_885_1.aspx)]
 [!code-vb[DataListShowHeader#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_885_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowHeader">
      <MemberSignature Language="C#" Value="public virtual bool ShowHeader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the header section is displayed in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>
          <see langword="true" /> if the header is displayed; otherwise, <see langword="false" />. The default value is <see langword="true" />, however this property is only examined when the &lt;xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A&gt; property is not <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ShowHeader property to specify whether the header section is displayed in the <xref:System.Web.UI.WebControls.DataList> control.  
  
 You can control appearance of the header section by setting the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property. The contents of the header section are controlled by the <xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ShowHeader property to display the header section in the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListShowHeader#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_933_1.aspx)]
 [!code-vb[DataListShowHeader#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_933_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.Style IRepeatInfoUser.GetItemStyle (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.WebControls.Style System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(valuetype System.Web.UI.WebControls.ListItemType itemType, int32 repeatIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListItemType" />
        <Parameter Name="repeatIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="itemType">One of the <see cref="T:System.Web.UI.WebControls.ListItemType" /> enumeration values.</param>
        <param name="repeatIndex">The index of the item in the list control.</param>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle%2A?displayProperty=fullName&gt;.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style of the specified item type at the specified index in the list control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.HasFooter">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.HasFooter%2A?displayProperty=fullName&gt;.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.HasHeader">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.HasHeader%2A?displayProperty=fullName&gt;.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators%2A?displayProperty=fullName&gt;.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.RenderItem">
      <MemberSignature Language="C#" Value="void IRepeatInfoUser.RenderItem (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex, System.Web.UI.WebControls.RepeatInfo repeatInfo, System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(valuetype System.Web.UI.WebControls.ListItemType itemType, int32 repeatIndex, class System.Web.UI.WebControls.RepeatInfo repeatInfo, class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListItemType" />
        <Parameter Name="repeatIndex" Type="System.Int32" />
        <Parameter Name="repeatInfo" Type="System.Web.UI.WebControls.RepeatInfo" />
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="itemType">The type of the item.</param>
        <param name="repeatIndex">The index of the item.</param>
        <param name="repeatInfo">Information that is used to render the item.</param>
        <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object to use to render the item.</param>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.RenderItem%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount">
      <MemberSignature Language="C#" Value="int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount%2A?displayProperty=fullName&gt;.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the HTML tag that is used to render the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <value>Returns the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> tag if the &lt;xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A&gt; is set to <see cref="T:System.Web.UI.WebControls.RepeatLayout" />; otherwise, returns the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> tag. The default is <see cref="T:System.Web.UI.WebControls.RepeatLayout" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the TagKey property to determine the <xref:System.Web.UI.HtmlTextWriterTag> value that is associated with a <xref:System.Web.UI.WebControls.DataList> control. The TagKey property is used primarily by control developers.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tracks view-state changes to the <see cref="T:System.Web.UI.WebControls.DataList" /> control so they can be stored in the control's &lt;xref:System.Web.UI.Control.ViewState%2A&gt; property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TrackViewState method is overridden to mark the starting point at which to begin tracking and saving changes to the control as part of the control's view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler UpdateCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler UpdateCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see langword="Update" /> button is clicked for an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UpdateCommand event is raised when the `Update` button for an item is clicked.  
  
 A typical handler for the UpdateCommand event updates the data, sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to `-1` (to deselect the item), and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code a handler for the UpdateCommand event. It allows you to update the selected item in the <xref:System.Web.UI.WebControls.DataList> control with the new values entered by the user when the `Update` button is clicked.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_128_1.aspx)]
 [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_128_1.aspx)]  
  
 [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_128_2.aspx)]
 [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_128_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandName">
      <MemberSignature Language="C#" Value="public const string UpdateCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string UpdateCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the <see langword="Update" /> command name. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the UpdateCommandName field to represent the `Update` command name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>