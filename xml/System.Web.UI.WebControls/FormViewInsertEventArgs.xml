<Type Name="FormViewInsertEventArgs" FullName="System.Web.UI.WebControls.FormViewInsertEventArgs">
  <TypeSignature Language="C#" Value="public class FormViewInsertEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormViewInsertEventArgs extends System.ComponentModel.CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> event.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemInserting> event when an Insert button (a button with its `CommandName` property set to "Insert") within the control is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control inserts the record. This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding or validating the values of a record before inserting it in the data source, whenever this event occurs.  
  
 A FormViewInsertEventArgs object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the <xref:System.Web.UI.WebControls.FormView> control and to indicate that the insert operation should be canceled. To determine the value of the command argument, use the <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A> property. To cancel the insert operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`. You can also read or modify the field values for the new record by using the <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.Values%2A> property.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 For a list of initial property values for an instance of the FormViewInsertEventArgs class, see the <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.%23ctor%2A> constructor.  
  
   
  
## Examples  
 The following example demonstrates how to use the FormViewInsertEventArgs object passed to the event-handling method for the <xref:System.Web.UI.WebControls.FormView.ItemInserting> event to cancel an insert operation when the user leaves a field empty.  
  
> [!IMPORTANT]
>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[FormViewInsertEventArgs#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_44_1.aspx)]
 [!code-cs[FormViewInsertEventArgs#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_44_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormViewInsertEventArgs (object commandArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object commandArgument) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandArgument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="commandArgument">An optional command argument passed to the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewInsertEventArgs> class.  
  
 The following table shows the initial property value for an instance of the <xref:System.Web.UI.WebControls.FormViewInsertEventArgs> class.  
  
|Property|Initial Value|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A>|The value of the `commandArgument` parameter.|  
  
> [!NOTE]
>  This constructor is used primarily by control developers when raising events.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public object CommandArgument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the command argument for the insert operation passed to the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</summary>
        <value>The command argument for the insert operation passed to the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you create an Insert button for one of the templates in a <xref:System.Web.UI.WebControls.FormView> control, you can optionally specify a command argument for the button by using the <xref:System.Web.UI.WebControls.IButtonControl.CommandArgument%2A> property. The command argument usually contains any extra information you want to accompany the insert command, such the value for the key field. The CommandArgument property is provided as a convenient way to determine the value of the Insert button's command argument.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a dictionary that contains the field name/value pairs for the record to insert.</summary>
        <value>An <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> that contains a dictionary of key field name/value pairs for the record to insert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Values property to access the values of the fields for the record to insert. For example, you can HTML encode or validate the values of the record before inserting it in the data source.  
  
 The Values property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  
  
> [!NOTE]
>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. The advantage in using the indexer is that it returns field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.  
  
   
  
## Examples  
 The following example demonstrates how to iterate through the Values collection.  
  
 [!code-vb[FormViewInsertEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1305_1.aspx)]
 [!code-cs[FormViewInsertEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1305_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>