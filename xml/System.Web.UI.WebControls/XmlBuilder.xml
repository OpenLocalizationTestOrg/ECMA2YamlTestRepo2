<Type Name="XmlBuilder" FullName="System.Web.UI.WebControls.XmlBuilder">
  <TypeSignature Language="C#" Value="public class XmlBuilder : System.Web.UI.ControlBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlBuilder extends System.Web.UI.ControlBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.ControlBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Interacts with the parser to build the <see cref="T:System.Web.UI.WebControls.Xml" /> control.</summary>
    <remarks>To be added.</remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.XmlBuilder" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendLiteralString">
      <MemberSignature Language="C#" Value="public override void AppendLiteralString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AppendLiteralString(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The literal content to add to the control.</param>
        <summary>Adds literal content to the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AppendLiteralString method of the <xref:System.Web.UI.WebControls.XmlBuilder> class overrides the <xref:System.Web.UI.ControlBuilder.AppendLiteralString%2A> method of the <xref:System.Web.UI.ControlBuilder> class so that the method of the base class has no effect.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildControlType">
      <MemberSignature Language="C#" Value="public override Type GetChildControlType (string tagName, System.Collections.IDictionary attribs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetChildControlType(string tagName, class System.Collections.IDictionary attribs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="attribs" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="tagName">The tag name of the child control.</param>
        <param name="attribs">An array of attributes contained in the child control.</param>
        <summary>Obtains the &lt;xref:System.Type&gt; for the <see cref="T:System.Web.UI.WebControls.Xml" /> control's specified child control.</summary>
        <returns>The &lt;xref:System.Web.UI.ControlBuilder.GetChildControlType%2A&gt; method is overridden to always return <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetChildControlType method of the <xref:System.Web.UI.WebControls.XmlBuilder> class overrides the <xref:System.Web.UI.ControlBuilder.GetChildControlType%2A> method of the <xref:System.Web.UI.ControlBuilder> class. This implementation of the GetChildControlType method always returns `null`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NeedsTagInnerText">
      <MemberSignature Language="C#" Value="public override bool NeedsTagInnerText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool NeedsTagInnerText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines whether the <see cref="T:System.Web.UI.WebControls.Xml" /> control needs to get its inner text.</summary>
        <returns>The &lt;xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A&gt; method is overridden to always return <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The NeedsTagInnerText method of the <xref:System.Web.UI.WebControls.XmlBuilder> class overrides the <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> method of the <xref:System.Web.UI.ControlBuilder> class to always return `true`.  
  
 The inner text is the text between the opening and closing tags of the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetTagInnerText">
      <MemberSignature Language="C#" Value="public override void SetTagInnerText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetTagInnerText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The value to insert as the inner text.</param>
        <summary>Sets the <see cref="T:System.Web.UI.WebControls.Xml" /> control's inner text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method loads the <xref:System.String> passed in to an XML document to determine whether it is well-formed. If it is, the code calls the <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> method of the <xref:System.Web.UI.ControlBuilder> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">The &lt;xref:System.String&gt; object passed in is not well-formed XML.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>