<Type Name="FontUnitConverter" FullName="System.Web.UI.WebControls.FontUnitConverter">
  <TypeSignature Language="C#" Value="public class FontUnitConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FontUnitConverter extends System.ComponentModel.TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Converts a <see cref="T:System.Web.UI.WebControls.FontUnit" /> to a string. It also converts a string to a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FontUnitConverter class is used to convert data to and from <xref:System.Web.UI.WebControls.FontUnit> and string types.  
  
> [!CAUTION]
>  You should never access a type converter directly. Instead, call the appropriate converter by using <xref:System.ComponentModel.TypeDescriptor?displayProperty=fullName>. For more information, see the examples in the <xref:System.ComponentModel.TypeConverter?displayProperty=fullName> base class.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FontUnitConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.FontUnitConverter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  You should never access a type converter directly. Instead, call the appropriate converter by using a <xref:System.ComponentModel.TypeDescriptor> object. For more information, see the examples in <xref:System.ComponentModel.TypeConverter>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> implemented object that provides information about the context of a type converter.</param>
        <param name="sourceType">A &lt;xref:System.Type?displayProperty=fullName&gt; that represents the data type to check.</param>
        <summary>Determines whether a data type can be converted to a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</summary>
        <returns>
          <see langword="true" /> if the data type specified by the <paramref name="sourceType" /> parameter can be converted to a <see cref="T:System.Web.UI.WebControls.FontUnit" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CanConvertFrom method to determine whether the data type specified by the `sourceType` parameter can be converted to a <xref:System.Web.UI.WebControls.FontUnit>.  
  
> [!NOTE]
>  This method will return true only if the `sourceType` is <xref:System.String>. The only type this converter can convert into <xref:System.Web.UI.WebControls.FontUnit> is <xref:System.String>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that indicates the context of the object to convert.</param>
        <param name="destinationType">A &lt;xref:System.Type?displayProperty=fullName&gt; that represents the data type to convert to.</param>
        <summary>Returns a value indicating whether the converter can convert a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object to the specified type.</summary>
        <returns>
          <see langword="true" /> if the converter supports converting a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object to the destination type; otherwise, <see langword="false" />.  
  
 <block subset="none" type="note">  
 This method will return true only if the <paramref name="destinationType" /> is &lt;xref:System.String&gt;. The only type this converter can convert <see cref="T:System.Web.UI.WebControls.FontUnit" /> into is &lt;xref:System.String&gt;.  
  
</block></returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> implemented object that provides information about the context of a type converter.</param>
        <param name="culture">A &lt;xref:System.Globalization.CultureInfo?displayProperty=fullName&gt; that specifies the culture to represent the <see cref="T:System.Web.UI.WebControls.FontUnit" />, when it is expressed in points.</param>
        <param name="value">The object to convert to a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</param>
        <summary>Converts an object to a <see cref="T:System.Web.UI.WebControls.FontUnit" /> in a specific culture.</summary>
        <returns>A &lt;xref:System.Object?displayProperty=fullName&gt; that represents the converted value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ConvertFrom method to convert the object specified by the `value` parameter to a <xref:System.Web.UI.WebControls.FontUnit> in the culture specified by the `culture` parameter.  
  
> [!NOTE]
>  If the specified object is `null`, the returned value is also `null`. Similarly, if the specified object is <xref:System.String.Empty?displayProperty=fullName>, <xref:System.Web.UI.WebControls.FontUnit.Empty> is returned.  
  
> [!NOTE]
>  This method can only convert a string to a  <xref:System.Web.UI.WebControls.FontUnit>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> implemented object that provides information about the context of a type converter.</param>
        <param name="culture">A &lt;xref:System.Globalization.CultureInfo?displayProperty=fullName&gt; that specifies the culture to represent the <see cref="T:System.Web.UI.WebControls.FontUnit" />, when it is expressed in points.</param>
        <param name="value">A &lt;xref:System.Object?displayProperty=fullName&gt; that represents the <see cref="T:System.Web.UI.WebControls.FontUnit" /> to convert.</param>
        <param name="destinationType">A &lt;xref:System.Type?displayProperty=fullName&gt; that represents the data type to convert to.</param>
        <summary>Converts a <see cref="T:System.Web.UI.WebControls.FontUnit" /> to an object with a different data type.</summary>
        <returns>A &lt;xref:System.Object?displayProperty=fullName&gt; that represents the converted value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ConvertTo method to convert the <xref:System.Web.UI.WebControls.FontUnit> specified by the `value` parameter to an object with the data type specified by the `destinationType` parameter.  
  
> [!NOTE]
>  <xref:System.String.Empty?displayProperty=fullName> is returned from this method if the `value` parameter contains `null`. <xref:System.String.Empty?displayProperty=fullName> is also returned if the <xref:System.Web.UI.WebControls.FontUnit.Type%2A> property of the <xref:System.Web.UI.WebControls.FontUnit> specified by the `value` parameter contains the value `FontSize.NotSet`.  
  
> [!NOTE]
>  This method can only convert a <xref:System.Web.UI.WebControls.FontUnit> to a string.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStandardValues">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.TypeConverter/StandardValuesCollection GetStandardValues(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter+StandardValuesCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about the context of a type converter.</param>
        <summary>Returns a &lt;xref:System.ComponentModel.TypeConverter.StandardValuesCollection?displayProperty=fullName&gt; containing the standard values for a <see cref="T:System.Web.UI.WebControls.FontUnit" />, using the specified format context.</summary>
        <returns>A &lt;xref:System.ComponentModel.TypeConverter.StandardValuesCollection?displayProperty=fullName&gt; containing the standard values for a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the GetStandardValues method to retrieve a <xref:System.ComponentModel.TypeConverter.StandardValuesCollection?displayProperty=fullName> containing the standard values for a <xref:System.Web.UI.WebControls.FontUnit>. This collection contains all the fields in the <xref:System.Web.UI.WebControls.FontUnit> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesExclusive">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesExclusive (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesExclusive(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about the context of a type converter.</param>
        <summary>Returns whether the &lt;xref:System.ComponentModel.TypeConverter.StandardValuesCollection?displayProperty=fullName&gt; returned by the &lt;xref:System.Web.UI.WebControls.FontUnitConverter.GetStandardValues%2A&gt; method is an exclusive list of values, using the specified format context.</summary>
        <returns>
          <see langword="false" /> for all cases.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the GetStandardValuesExclusive method to determine whether the <xref:System.ComponentModel.TypeConverter.StandardValuesCollection?displayProperty=fullName> returned by the <xref:System.Web.UI.WebControls.FontUnitConverter.GetStandardValues%2A> method is an exclusive list of values. This method is overridden to always return `false` to indicate that the list of values is not an exclusive list.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesSupported">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesSupported (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesSupported(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides information about the context of a type converter.</param>
        <summary>Returns whether the instance of the <see cref="T:System.Web.UI.WebControls.FontUnitConverter" /> class that this method is called from supports a standard set of values that can be picked from a list, using the specified format context.</summary>
        <returns>
          <see langword="true" /> for all cases.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the GetStandardValuesSupported method to determine whether the instance of the <xref:System.Web.UI.WebControls.FontUnitConverter> class that this method is called from supports a standard set of values that can be picked from a list, using the specified format context. This method is overridden to always return `true` to indicate that this class supports a standard set of values that can be picked from a list.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>