<Type Name="GridView" FullName="System.Web.UI.WebControls.GridView">
  <TypeSignature Language="C#" Value="public class GridView : System.Web.UI.WebControls.CompositeDataBoundControl, System.Web.UI.ICallbackEventHandler, System.Web.UI.IDataKeysControl, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.ICallbackContainer, System.Web.UI.WebControls.IDataBoundListControl, System.Web.UI.WebControls.IFieldControl, System.Web.UI.WebControls.IPersistedSelector, System.Web.UI.WebControls.IPostBackContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GridView extends System.Web.UI.WebControls.CompositeDataBoundControl implements class System.Web.UI.ICallbackEventHandler, class System.Web.UI.IDataKeysControl, class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.ICallbackContainer, class System.Web.UI.WebControls.IDataBoundControl, class System.Web.UI.WebControls.IDataBoundListControl, class System.Web.UI.WebControls.IFieldControl, class System.Web.UI.WebControls.IPersistedSelector, class System.Web.UI.WebControls.IPostBackContainer" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.CompositeDataBoundControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.ICallbackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataKeysControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.ICallbackContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IDataBoundListControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IFieldControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IPersistedSelector</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IPostBackContainer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.GridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataKeyProperty("SelectedPersistedDataKey")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Displays the values of a data source in a table where each column represents a field and each row represents a record. The GridView control enables you to select, sort, and edit these items.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In this topic:  
  
-   [Introduction](#introduction)  
  
-   [Column Fields](#column_fields)  
  
-   [Binding to Data](#binding_to_data)  
  
-   [Data Operations](#data_operations)  
  
-   [Customizing the User Interface](#customizing_the_user_interface)  
  
-   [Events](#events)  
  
-   [Accessibility](#accessibility)  
  
-   [Declarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 The GridView control is used to display the values of a data source in a table. Each column represents a field, while each row represents a record. The GridView control supports the following features:  
  
-   Binding to data source controls, such as <xref:System.Web.UI.WebControls.SqlDataSource>.  
  
-   Built-in sort capabilities.  
  
-   Built-in update and delete capabilities.  
  
-   Built-in paging capabilities.  
  
-   Built-in row selection capabilities.  
  
-   Programmatic access to the GridView object model to dynamically set properties, handle events, and so on.  
  
-   Multiple key fields.  
  
-   Multiple data fields for the hyperlink columns.  
  
-   Customizable appearance through themes and styles.  
  
-   To learn about the other data-bound controls that are available in ASP.NET, see [Data-Bound Web Server Controls](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  If you are familiar with the <xref:System.Web.UI.WebControls.DataGrid> control from the .NET Framework version 1.0, the GridView control is the successor to the <xref:System.Web.UI.WebControls.DataGrid> control.  
  
<a name="column_fields"></a>   
## Column Fields  
 Each column in the GridView control is represented by a <xref:System.Web.UI.WebControls.DataControlField> object. By default, the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property is set to `true`, which creates an <xref:System.Web.UI.WebControls.AutoGeneratedField> object for each field in the data source. Each field is then rendered as a column in the GridView control in the order that each field appears in the data source.  
  
 You can also manually control which column fields appear in the GridView control by setting the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property to `false` and then defining your own column field collection. Different column field types determine the behavior of the columns in the control. The following table lists the different column field types that can be used.  
  
|Column field type|Description|  
|-----------------------|-----------------|  
|<xref:System.Web.UI.WebControls.BoundField>|Displays the value of a field in a data source. This is the default column type of the GridView control.|  
|<xref:System.Web.UI.WebControls.ButtonField>|Displays a command button for each item in the GridView control. This enables you to create a column of custom button controls, such as the Add or the Remove button.|  
|<xref:System.Web.UI.WebControls.CheckBoxField>|Displays a check box for each item in the GridView control. This column field type is commonly used to display fields with a Boolean value.|  
|<xref:System.Web.UI.WebControls.CommandField>|Displays predefined command buttons to perform select, edit, or delete operations.|  
|<xref:System.Web.UI.WebControls.HyperLinkField>|Displays the value of a field in a data source as a hyperlink. This column field type enables you to bind a second field to the hyperlink's URL.|  
|<xref:System.Web.UI.WebControls.ImageField>|Displays an image for each item in the GridView control.|  
|<xref:System.Web.UI.WebControls.TemplateField>|Displays user-defined content for each item in the GridView control according to a specified template. This column field type enables you to create a custom column field.|  
  
 To define a column field collection declaratively, first add opening and closing `<Columns>` tags between the opening and closing tags of the GridView control. Next, list the column fields that you want to include between the opening and closing `<Columns>` tags. The columns specified are added to the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection in the order listed. The <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection stores all the column fields in the control and enables you to programmatically manage the column fields in the GridView control.  
  
 Explicitly declared column fields can be displayed in combination with automatically generated column fields. When both are used, explicitly declared column fields are rendered first, followed by the automatically generated column fields.  
  
> [!NOTE]
>  Automatically generated column fields are not added to the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection.  
  
<a name="binding_to_data"></a>   
## Binding to Data  
 The GridView control can be bound to a data source control (such as the <xref:System.Web.UI.WebControls.SqlDataSource> control or <xref:System.Web.UI.WebControls.ObjectDataSource> control) or to any data source collection that implements the <xref:System.Collections.IEnumerable?displayProperty=fullName> interface, such as <xref:System.Data.DataView?displayProperty=fullName>, <xref:System.Collections.ArrayList?displayProperty=fullName>, <xref:System.Collections.Generic.List%601?displayProperty=fullName>, or other collection types. Use one of the following methods to bind the GridView control to the appropriate data source type:  
  
-   To bind to a data source control, set the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property of the GridView control to the <xref:System.Web.UI.Control.ID%2A> value of the data source control. The GridView control automatically binds to the specified data source control and can take advantage of the data source control's capabilities to perform sorting, updating, deleting, and paging. This is the preferred method to bind to data.  
  
-   To bind to a data source that implements the <xref:System.Collections.IEnumerable?displayProperty=fullName> interface, programmatically set the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> property of the GridView control to the data source and then call the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method. When using this method, the GridView control does not provide built-in sort, update, delete, and paging functionality. You need to provide this functionality by using the appropriate event.  
  
 For more information about data binding, see [ASP.NET Data Access Content Map](http://msdn.microsoft.com/en-us/f9219396-a0fa-481f-894d-e3d9c67d64f2).  
  
> [!NOTE]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. Whenever possible, it is strongly recommended that values are HTML-encoded before they are displayed in this control (the <xref:System.Web.UI.WebControls.BoundField> class HTML-encodes values by default). ASP.NET provides an input request validation feature to block script and HTML in user input. Validation server controls are also provided to assess user input. For more information, see [Introduction to the Validation Controls](http://msdn.microsoft.com/en-us/3c0e7514-cff2-4bed-936d-ee3f7b740190).  
  
<a name="data_operations"></a>   
## Data Operations  
 The GridView control provides many built-in capabilities that allow the user to sort, update, delete, select, and page through items in the control. When the GridView control is bound to a data source control, the GridView control can take advantage of the data source control's capabilities and provide automatic sort, update, and delete functionality.  
  
> [!NOTE]
>  The GridView control can provide support for sorting, updating, and deleting with other types of data sources. However, you will need to provide an appropriate event handler with the implementation for these operations.  
  
 Sorting allows the user to sort the items in the GridView control with respect to a specific column by clicking on the column's header. To enable sorting, set the <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property to `true`.  
  
 The automatic updating, deleting, and selection functionalities are enabled when a button in a <xref:System.Web.UI.WebControls.ButtonField> or <xref:System.Web.UI.WebControls.TemplateField> column field, with a command name of "Edit", "Delete", and "Select", respectively, is clicked. The GridView control can automatically add a <xref:System.Web.UI.WebControls.CommandField> column field with an Edit, Delete, or Select button if the <xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A>, <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>, or <xref:System.Web.UI.WebControls.GridView.AutoGenerateSelectButton%2A> property is set to `true`, respectively.  
  
> [!NOTE]
>  Inserting records into the data source is not directly supported by the GridView control. However, it is possible to insert records by using the GridView control in conjunction with the `DetailsView` or `FormView` control. For more information, see <xref:System.Web.UI.WebControls.DetailsView> or <xref:System.Web.UI.WebControls.FormView>, respectively.  
  
 Instead of displaying all the records in the data source at the same time, the GridView control can automatically break the records up into pages. To enable paging, set the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property to `true`.  
  
> [!NOTE]
>  The GridView control is re-created on postback based on the information that is stored in <xref:System.Web.UI.PageStatePersister.ViewState%2A>. If the GridView control includes a <xref:System.Web.UI.WebControls.TemplateField> or a <xref:System.Web.UI.WebControls.CommandField> with the <xref:System.Web.UI.WebControls.CommandField.CausesValidation%2A> property set to `true`, then the <xref:System.Web.UI.Page.EnableViewState%2A> property must also be set to `true` to ensure that concurrent data operations, such as updates and deletes, apply to the appropriate row.  
  
<a name="customizing_the_user_interface"></a>   
## Customizing the User Interface  
 You can customize the appearance of the GridView control by setting the style properties for the different parts of the control. The following table lists the different style properties.  
  
|Style property|Description|  
|--------------------|-----------------|  
|<xref:System.Web.UI.WebControls.GridView.AlternatingRowStyle%2A>|The style settings for the alternating data rows in the GridView control. When this property is set, the data rows are displayed alternating between the <xref:System.Web.UI.WebControls.GridView.RowStyle%2A> settings and the <xref:System.Web.UI.WebControls.GridView.AlternatingRowStyle%2A> settings.|  
|<xref:System.Web.UI.WebControls.GridView.EditRowStyle%2A>|The style settings for the row being edited in the GridView control.|  
|<xref:System.Web.UI.WebControls.GridView.EmptyDataRowStyle%2A>|The style settings for the empty data row displayed in the GridView control when the data source does not contain any records.|  
|<xref:System.Web.UI.WebControls.GridView.FooterStyle%2A>|The style settings for the footer row of the GridView control.|  
|<xref:System.Web.UI.WebControls.GridView.HeaderStyle%2A>|The style settings for the header row of the GridView control.|  
|<xref:System.Web.UI.WebControls.GridView.PagerStyle%2A>|The style settings for the pager row of the GridView control.|  
|<xref:System.Web.UI.WebControls.GridView.RowStyle%2A>|The style settings for the data rows in the GridView control. When the <xref:System.Web.UI.WebControls.GridView.AlternatingRowStyle%2A> property is also set, the data rows are displayed alternating between the <xref:System.Web.UI.WebControls.GridView.RowStyle%2A> settings and the <xref:System.Web.UI.WebControls.GridView.AlternatingRowStyle%2A> settings.|  
|<xref:System.Web.UI.WebControls.GridView.SelectedRowStyle%2A>|The style settings for the selected row in the GridView control.|  
|<xref:System.Web.UI.WebControls.GridView.SortedAscendingCellStyle%2A>|The style setting for the data column the data is sorted by in the GridView control. When this style is set, the style (for example, highlighted column) is applied to cells when the data is sorted in ascending order.|  
|<xref:System.Web.UI.WebControls.GridView.SortedAscendingHeaderStyle%2A>|The style setting for the data column the data is sorted by in the GridView control. When this style is set, an arrow indicating the data is sorted ascending is placed on the header of the GridView control when the data is sorted in ascending order.|  
|<xref:System.Web.UI.WebControls.GridView.SortedDescendingCellStyle%2A>|The style setting for the data column the data is sorted by in the GridView control. When this style is set, the style (for example, highlighted column) is applied to cells when the data is sorted in descending order.|  
|<xref:System.Web.UI.WebControls.GridView.SortedDescendingHeaderStyle%2A>|The style setting for the data column the data is sorted by in the GridView control. When this style is set, an arrow pointing down is placed on the header of the GridView when the data is sorted in descending order.|  
  
 You can also show or hide different parts of the control. The following table lists the properties that control which parts are shown or hidden.  
  
|Property|Description|  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.GridView.ShowFooter%2A>|Shows or hides the footer section of the GridView control.|  
|<xref:System.Web.UI.WebControls.GridView.ShowHeader%2A>|Shows or hides the header section of the GridView control.|  
  
<a name="events"></a>   
## Events  
 The GridView control provides several events that you can program against. This enables you to run a custom routine whenever an event occurs. The following table lists the events that are supported by the GridView control.  
  
|Event|Description|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.GridView.PageIndexChanged>|Occurs when one of the pager buttons is clicked, but after the GridView control handles the paging operation. This event is commonly used when you need to perform a task after the user navigates to a different page in the control.|  
|<xref:System.Web.UI.WebControls.GridView.PageIndexChanging>|Occurs when one of the pager buttons is clicked, but before the GridView control handles the paging operation. This event is often used to cancel the paging operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowCancelingEdit>|Occurs when a row's Cancel button is clicked, but before the GridView control exits edit mode. This event is often used to stop the canceling operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowCommand>|Occurs when a button is clicked in the GridView control. This event is often used to perform a task when a button is clicked in the control.|  
|<xref:System.Web.UI.WebControls.GridView.RowCreated>|Occurs when a new row is created in the GridView control. This event is often used to modify the contents of a row when the row is created.|  
|<xref:System.Web.UI.WebControls.GridView.RowDataBound>|Occurs when a data row is bound to data in the GridView control. This event is often used to modify the contents of a row when the row is bound to data.|  
|<xref:System.Web.UI.WebControls.GridView.RowDeleted>|Occurs when a row's Delete button is clicked, but after the GridView control deletes the record from the data source. This event is often used to check the results of the delete operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowDeleting>|Occurs when a row's Delete button is clicked, but before the GridView control deletes the record from the data source. This event is often used to cancel the deleting operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowEditing>|Occurs when a row's Edit button is clicked, but before the GridView control enters edit mode. This event is often used to cancel the editing operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowUpdated>|Occurs when a row's Update button is clicked, but after the GridView control updates the row. This event is often used to check the results of the update operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowUpdating>|Occurs when a row's Update button is clicked, but before the GridView control updates the row. This event is often used to cancel the updating operation.|  
|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|Occurs when a row's Select button is clicked, but after the GridView control handles the select operation. This event is often used to perform a task after a row is selected in the control.|  
|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanging>|Occurs when a row's Select button is clicked, but before the GridView control handles the select operation. This event is often used to cancel the selection operation.|  
|<xref:System.Web.UI.WebControls.GridView.Sorted>|Occurs when the hyperlink to sort a column is clicked, but after the GridView control handles the sort operation. This event is commonly used to perform a task after the user clicks a hyperlink to sort a column.|  
|<xref:System.Web.UI.WebControls.GridView.Sorting>|Occurs when the hyperlink to sort a column is clicked, but before the GridView control handles the sort operation. This event is often used to cancel the sorting operation or to perform a custom sorting routine.|  
  
<a name="accessibility"></a>   
## Accessibility  
 For information about how to configure this control so that it generates markup that conforms to accessibility standards, see [Accessibility in Visual Studio and ASP.NET](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Controls and Accessibility](~/add/includes/ajax-current-ext-md.md).  
  
<a name="declarative_syntax"></a>   
## Declarative Syntax  
  
```  
<asp:GridView  
    AccessKey="string"  
    AllowPaging="True|False"  
    AllowSorting="True|False"  
    AutoGenerateColumns="True|False"  
    AutoGenerateDeleteButton="True|False"  
    AutoGenerateEditButton="True|False"  
    AutoGenerateSelectButton="True|False"  
    BackColor="color name|#dddddd"  
    BackImageUrl="uri"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    Caption="string"  
    CaptionAlign="NotSet|Top|Bottom|Left|Right"  
    CellPadding="integer"  
    CellSpacing="integer"  
    CssClass="string"  
    DataKeyNames="string"  
    DataMember="string"  
    DataSource="string"  
    DataSourceID="string"  
    EditIndex="integer"  
    EmptyDataText="string"  
    Enabled="True|False"  
    EnableSortingAndPagingCallbacks="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    GridLines="None|Horizontal|Vertical|Both"  
    Height="size"  
    HorizontalAlign="NotSet|Left|Center|Right|Justify"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDataBound="DataBound event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPageIndexChanged="PageIndexChanged event handler"  
    OnPageIndexChanging="PageIndexChanging event handler"  
    OnPreRender="PreRender event handler"  
    OnRowCancelingEdit="RowCancelingEdit event handler"  
    OnRowCommand="RowCommand event handler"  
    OnRowCreated="RowCreated event handler"  
    OnRowDataBound="RowDataBound event handler"  
    OnRowDeleted="RowDeleted event handler"  
    OnRowDeleting="RowDeleting event handler"  
    OnRowEditing="RowEditing event handler"  
    OnRowUpdated="RowUpdated event handler"  
    OnRowUpdating="RowUpdating event handler"  
    OnSelectedIndexChanged="SelectedIndexChanged event handler"  
    OnSelectedIndexChanging="SelectedIndexChanging event handler"  
    OnSorted="Sorted event handler"  
    OnSorting="Sorting event handler"  
    OnUnload="Unload event handler"  
    PageIndex="integer"  
    PagerSettings-FirstPageImageUrl="uri"  
    PagerSettings-FirstPageText="string"  
    PagerSettings-LastPageImageUrl="uri"  
    PagerSettings-LastPageText="string"  
    PagerSettings-Mode="NextPrevious|Numeric|NextPreviousFirstLast|  
        NumericFirstLast"  
    PagerSettings-NextPageImageUrl="uri"  
    PagerSettings-NextPageText="string"  
    PagerSettings-PageButtonCount="integer"  
    PagerSettings-Position="Bottom|Top|TopAndBottom"  
    PagerSettings-PreviousPageImageUrl="uri"  
    PagerSettings-PreviousPageText="string"  
    PagerSettings-Visible="True|False"  
    PageSize="integer"  
    RowHeaderColumn="string"  
    runat="server"  
    SelectedIndex="integer"  
    ShowFooter="True|False"  
    ShowHeader="True|False"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    UseAccessibleHeader="True|False"  
    Visible="True|False"  
    Width="size"  
>  
        <AlternatingRowStyle />  
        <Columns>  
                <asp:BoundField  
                    AccessibleHeaderText="string"  
                    ApplyFormatInEditMode="True|False"  
                    ConvertEmptyStringToNull="True|False"  
                    DataField="string"  
                    DataFormatString="string"  
                    FooterText="string"  
                    HeaderImageUrl="uri"  
                    HeaderText="string"  
                    HtmlEncode="True|False"  
                    InsertVisible="True|False"  
                    NullDisplayText="string"  
                    ReadOnly="True|False"  
                    ShowHeader="True|False"  
                    SortExpression="string"  
                    Visible="True|False"  
>  
                        <ControlStyle />  
                        <FooterStyle />  
                        <HeaderStyle />  
                        <ItemStyle />  
                </asp:BoundField>  
                <asp:ButtonField  
                    AccessibleHeaderText="string"  
                    ButtonType="Button|Image|Link"  
                    CausesValidation="True|False"  
                    CommandName="string"  
                    DataTextField="string"  
                    DataTextFormatString="string"  
                    FooterText="string"  
                    HeaderImageUrl="uri"  
                    HeaderText="string"  
                    ImageUrl="uri"  
                    InsertVisible="True|False"  
                    ShowHeader="True|False"  
                    SortExpression="string"  
                    Text="string"  
                    ValidationGroup="string"  
                    Visible="True|False"  
>  
                        <ControlStyle />  
                        <FooterStyle />  
                        <HeaderStyle />  
                        <ItemStyle />  
                </asp:ButtonField>  
                <asp:CheckBoxField  
                    AccessibleHeaderText="string"  
                    DataField="string"  
                    FooterText="string"  
                    HeaderImageUrl="uri"  
                    HeaderText="string"  
                    InsertVisible="True|False"  
                    ReadOnly="True|False"  
                    ShowHeader="True|False"  
                    SortExpression="string"  
                    Text="string"  
                    Visible="True|False"  
>  
                        <ControlStyle />  
                        <FooterStyle />  
                        <HeaderStyle />  
                        <ItemStyle />  
                </asp:CheckBoxField>  
                <asp:CommandField  
                    AccessibleHeaderText="string"  
                    ButtonType="Button|Image|Link"  
                    CancelImageUrl="uri"  
                    CancelText="string"  
                    CausesValidation="True|False"  
                    DeleteImageUrl="uri"  
                    DeleteText="string"  
                    EditImageUrl="uri"  
                    EditText="string"  
                    FooterText="string"  
                    HeaderImageUrl="uri"  
                    HeaderText="string"  
                    InsertImageUrl="uri"  
                    InsertText="string"  
                    InsertVisible="True|False"  
                    NewImageUrl="uri"  
                    NewText="string"  
                    SelectImageUrl="uri"  
                    SelectText="string"  
                    ShowCancelButton="True|False"  
                    ShowDeleteButton="True|False"  
                    ShowEditButton="True|False"  
                    ShowHeader="True|False"  
                    ShowInsertButton="True|False"  
                    ShowSelectButton="True|False"  
                    SortExpression="string"  
                    UpdateImageUrl="uri"  
                    UpdateText="string"  
                    ValidationGroup="string"  
                    Visible="True|False"  
>  
                        <ControlStyle />  
                        <FooterStyle />  
                        <HeaderStyle />  
                        <ItemStyle />  
                </asp:CommandField>  
                <asp:DynamicField  
                    AccessibleHeaderText="string"  
                    ApplyFormatInEditMode="True|False"  
                    ConvertEmptyStringToNull="True|False"  
                    DataField="string"  
                    DataFormatString="string"  
                    FooterText="string"  
                    HeaderImageUrl="uri"  
                    HeaderText="string"  
                    HtmlEncode="True|False"  
                    InsertVisible="True|False"  
                    NullDisplayText="string"  
                    ShowHeader="True|False"  
                    UIHint="string"  
                    Visible="True|False"  
>  
                        <ControlStyle />  
                        <FooterStyle />  
                        <HeaderStyle />  
                        <ItemStyle />  
                </asp:DynamicField>  
                <asp:HyperLinkField  
                    AccessibleHeaderText="string"  
                    DataNavigateUrlFields="string"  
                    DataNavigateUrlFormatString="string"  
                    DataTextField="string"  
                    DataTextFormatString="string"  
                    FooterText="string"  
                    HeaderImageUrl="uri"  
                    HeaderText="string"  
                    InsertVisible="True|False"  
                    NavigateUrl="uri"  
                    ShowHeader="True|False"  
                    SortExpression="string"  
                    Target="string|_blank|_parent|_search|_self|_top"  
                    Text="string"  
                    Visible="True|False"  
>  
                        <ControlStyle />  
                        <FooterStyle />  
                        <HeaderStyle />  
                        <ItemStyle />  
                </asp:HyperLinkField>  
                <asp:ImageField  
                    AccessibleHeaderText="string"  
                    AlternateText="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DataAlternateTextField="string"  
                    DataAlternateTextFormatString="string"  
                    DataImageUrlField="string"  
                    DataImageUrlFormatString="string"  
                    FooterText="string"  
                    HeaderImageUrl="uri"  
                    HeaderText="string"  
                    InsertVisible="True|False"  
                    NullDisplayText="string"  
                    NullImageUrl="uri"  
                    ReadOnly="True|False"  
                    ShowHeader="True|False"  
                    SortExpression="string"  
                    Visible="True|False"  
>  
                        <ControlStyle />  
                        <FooterStyle />  
                        <HeaderStyle />  
                        <ItemStyle />  
                </asp:ImageField>  
                <asp:TemplateField  
                    AccessibleHeaderText="string"  
                    ConvertEmptyStringToNull="True|False"  
                    FooterText="string"  
                    HeaderImageUrl="uri"  
                    HeaderText="string"  
                    InsertVisible="True|False"  
                    ShowHeader="True|False"  
                    SortExpression="string"  
                    Visible="True|False"  
>  
                            <ControlStyle />  
                            <FooterStyle />  
                            <HeaderStyle />  
                            <ItemStyle />  
                        <AlternatingItemTemplate>  
                            <!-- child controls -->  
                        </AlternatingItemTemplate>  
                        <EditItemTemplate>  
                            <!-- child controls -->  
                        </EditItemTemplate>  
                        <FooterTemplate>  
                            <!-- child controls -->  
                        </FooterTemplate>  
                        <HeaderTemplate>  
                            <!-- child controls -->  
                        </HeaderTemplate>  
                        <InsertItemTemplate>  
                            <!-- child controls -->  
                        </InsertItemTemplate>  
                        <ItemTemplate>  
                            <!-- child controls -->  
                        </ItemTemplate>  
                </asp:TemplateField>  
        </Columns>  
        <EditRowStyle />  
        <EmptyDataRowStyle />  
        <EmptyDataTemplate>  
            <!-- child controls -->  
        </EmptyDataTemplate>  
        <FooterStyle />  
        <HeaderStyle />  
        <PagerSettings  
            FirstPageImageUrl="uri"  
            FirstPageText="string"  
            LastPageImageUrl="uri"  
            LastPageText="string"  
            Mode="NextPrevious|Numeric|NextPreviousFirstLast|  
                NumericFirstLast"  
            NextPageImageUrl="uri"  
            NextPageText="string"  
            OnPropertyChanged="PropertyChanged event handler"  
            PageButtonCount="integer"  
            Position="Bottom|Top|TopAndBottom"  
            PreviousPageImageUrl="uri"  
            PreviousPageText="string"  
            Visible="True|False"  
        />  
        <PagerStyle />  
        <PagerTemplate>  
            <!-- child controls -->  
        </PagerTemplate>  
        <RowStyle />  
        <SelectedRowStyle />  
</asp:GridView>  
```  
  
   
  
## Examples  
 A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=191882).  
  
 The following example demonstrates how use the GridView control to display the values from the Customers table of the AdventureWorksLT sample database in Microsoft SQL Server. The values are retrieved using a <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 [!code-vb[GridViewSimple#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_194_1.aspx)]
 [!code-cs[GridViewSimple#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_194_1.aspx)]  
  
 The following example demonstrates how to use the GridView control and a <xref:System.Web.UI.WebControls.LinqDataSource> control so that you can edit records.  
  
 [!code-vb[GridViewEdit#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_194_2.aspx)]
 [!code-cs[GridViewEdit#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_194_2.aspx)]  
  
 For an example demonstrating how to access values in cells, see <xref:System.Web.UI.WebControls.GridViewRow>.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GridView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.GridView" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.GridView> class. To dynamically add a <xref:System.Web.UI.WebControls.GridView> control to a page, create a new <xref:System.Web.UI.WebControls.GridView> object, set its properties, and then add it to the <xref:System.Web.UI.Control.Controls%2A?displayProperty=fullName> collection of a container control, such as <xref:System.Web.UI.WebControls.PlaceHolder>.  
  
   
  
## Examples  
 The following example demonstrates how to use the constructor to dynamically add a <xref:System.Web.UI.WebControls.GridView> control to a page.  
  
 [!code-cs[GridViewCtor#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_33_1.aspx)]
 [!code-vb[GridViewCtor#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_33_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowCustomPaging">
      <MemberSignature Language="C#" Value="public virtual bool AllowCustomPaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCustomPaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether custom paging is enabled.</summary>
        <value>
          <see langword="true" /> if custom paging is enabled; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paging enables you to display the contents of the <xref:System.Web.UI.WebControls.GridView> control in chunks. The number of items on a page is determined by the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property. Normally, every row in the data source is read every time the <xref:System.Web.UI.WebControls.GridView> control moves to a different page. This can consume a lot of resources when the total number of items in the data source is very large. Custom paging allows you to read just the items you need for a single page from the data source.  
  
 To enable custom paging, set both the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> and AllowCustomPaging properties to `true`. In a handler for the <xref:System.Web.UI.WebControls.GridView.PageIndexChanging> event, set the <xref:System.Web.UI.WebControls.GridView.PageIndex%2A> property to the new page index value, set the <xref:System.Web.UI.WebControls.GridView.VirtualItemCount%2A> property to the total number of items in the data source, set the data source to return only the rows needed for the current page, and call the <xref:System.Web.UI.WebControls.GridView.DataBind%2A> method. The <xref:System.Web.UI.WebControls.GridView.VirtualItemCount%2A> property enables the control to determine the total number of pages; this value is normally determined automatically by reading all of the items.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowPaging">
      <MemberSignature Language="C#" Value="public virtual bool AllowPaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the paging feature is enabled.</summary>
        <value>
          <see langword="true" /> if the paging feature is enabled; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Instead of displaying all the records in the data source at the same time, the <xref:System.Web.UI.WebControls.GridView> control can automatically break the records up into pages. If the data source supports the paging capability, the <xref:System.Web.UI.WebControls.GridView> control can take advantage of that and provide built-in paging functionality. The paging feature can be used with any data source object that supports the <xref:System.Collections.ICollection?displayProperty=fullName> interface or a data source that supports paging capability.  
  
 To enable the paging feature, set the AllowPaging property to `true`. By default, the <xref:System.Web.UI.WebControls.GridView> control displays 10 records on a page at a time. You can change the number of records displayed on a page by setting the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property. To determine the total number of pages required to display the data source contents, use the <xref:System.Web.UI.WebControls.GridView.PageCount%2A> property. You can determine the index of the currently displayed page by using the <xref:System.Web.UI.WebControls.GridView.PageIndex%2A> property.  
  
 When paging is enabled, an additional row called the pager row is automatically displayed in the <xref:System.Web.UI.WebControls.GridView> control. The pager row contains controls that allow the user to navigate to the other pages. You can control the settings of the pager row (such as the pager display mode, the number of page links to display at a time, and the pager control's text labels) by using the <xref:System.Web.UI.WebControls.GridView.PagerSettings%2A> property. The pager row can be displayed at the top, bottom, or both the top and bottom of the control by setting the <xref:System.Web.UI.WebControls.PagerSettings.Position%2A> property. You can also select from one of four built-in pager display modes by setting the <xref:System.Web.UI.WebControls.PagerSettings.Mode%2A> property. The following table describes the built-in display modes.  
  
|Mode|Description|  
|----------|-----------------|  
|`PagerButton.NextPrevious`|A set of pagination controls consisting of previous and next buttons.|  
|`PagerButton.NextPreviousFirstLast`|A set of pagination controls consisting of previous, next, first, and last buttons.|  
|`PagerButton.Numeric`|A set of pagination controls consisting of numbered link buttons to access pages directly. This is the default mode.|  
|`PagerButton.NumericFirstLast`|A set of pagination controls consisting of numbered and first and last link buttons.|  
  
 To control the appearance of the pager row (including its background color, font color, and position), use the <xref:System.Web.UI.WebControls.GridView.PagerStyle%2A> property.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.GridView> control automatically hides the pager row when the data source contains only one page of records.  
  
 The <xref:System.Web.UI.WebControls.GridView> control also enables you to define a custom template for the pager row. For more information about creating a custom pager row template, see <xref:System.Web.UI.WebControls.GridView.PagerTemplate%2A>.  
  
 The <xref:System.Web.UI.WebControls.GridView> control provides several events that you can use to perform a custom action when paging occurs. The following table lists the available events.  
  
|Event|Description|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.GridView.PageIndexChanged>|Occurs when one of the pager buttons is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control handles the paging operation. This event is commonly used when you need to perform a task after the user navigates to a different page in the control.|  
|<xref:System.Web.UI.WebControls.GridView.PageIndexChanging>|Occurs when one of the pager buttons is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control handles the paging operation. This event is often used to cancel the paging operation.|  
  
   
  
## Examples  
 The following example demonstrates how to use the AllowPaging property to declaratively enable the paging feature in the <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewAllowPaging#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_198_1.aspx)]
 [!code-cs[GridViewAllowPaging#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_198_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowSorting">
      <MemberSignature Language="C#" Value="public virtual bool AllowSorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the sorting feature is enabled.</summary>
        <value>
          <see langword="true" /> if the sorting feature is enabled; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a data source control that supports sorting is bound to the <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.GridView> control can take advantage of the data source control's capabilities and provide automatic sorting functionality. When the <xref:System.Web.UI.WebControls.GridView> control is bound to a data source by setting the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> property programmatically, you must provide the sorting functionality by using the <xref:System.Web.UI.WebControls.GridView.Sorting> event.  
  
> [!NOTE]
>  Different data sources have different requirements for enabling their sorting capabilities. To determine the requirements, see the documentation for the specific data source.  
  
 To enable sorting, set the AllowSorting property to `true`. When sorting is enabled, the heading text for each column field with its <xref:System.Web.UI.WebControls.DataControlField.SortExpression%2A> property set is displayed as a link button.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.DataControlField.SortExpression%2A> property for an automatically generated columns field is automatically populated. If you define your own columns through the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection, you must set the <xref:System.Web.UI.WebControls.DataControlField.SortExpression%2A> property for each column; otherwise, the column will not display the link button in the header.  
  
 Clicking the link button for a column causes the items in the <xref:System.Web.UI.WebControls.GridView> control to be sorted based on the sort expression. Typically, the sort expression is simply the name of the field displayed in the column, which causes the <xref:System.Web.UI.WebControls.GridView> control to sort with respect to that column. To sort by multiple fields, use a sort expression that contains a comma-separated list of field names. You can determine the sort expression that the <xref:System.Web.UI.WebControls.GridView> control is applying by using the <xref:System.Web.UI.WebControls.GridView.SortExpression%2A> property. Clicking a column's link button repeatedly toggles the sort direction between ascending and descending order. To determine the current sort direction, use the <xref:System.Web.UI.WebControls.GridView.SortDirection%2A> property.  
  
 The <xref:System.Web.UI.WebControls.GridView> control provides several events that you can use to perform a custom action when sorting occurs. The following table lists the available events.  
  
|Event|Description|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.GridView.Sorted>|Occurs when the hyperlink to sort a column is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control handles the sort operation. This event is commonly used to perform a task after the user clicks a hyperlink to sort a column.|  
|<xref:System.Web.UI.WebControls.GridView.Sorting>|Occurs when the hyperlink to sort a column is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control handles the sort operation. This event is often used to cancel the sorting operation or to perform a custom sorting routine.|  
  
   
  
## Examples  
 The following example demonstrates how to use the AllowSorting property to enable sorting in a <xref:System.Web.UI.WebControls.GridView> control when automatically generated columns are used.  
  
 [!code-cs[GridViewAllowSorting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1089_1.aspx)]
 [!code-vb[GridViewAllowSorting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1089_1.aspx)]  
  
 The following example demonstrates how to use the AllowSorting property to enable sorting in a <xref:System.Web.UI.WebControls.GridView> control when a <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection is defined. An image is also programmatically added to the header of the column being sorted to indicate the sort direction. You must provide your own images for this sample to work.  
  
 [!code-cs[GridViewAllowSortingColumns#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1089_2.aspx)]
 [!code-vb[GridViewAllowSortingColumns#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1089_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternatingRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle AlternatingRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle AlternatingRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of alternating data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of alternating data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AlternatingRowStyle property to control the appearance of alternating data rows in a <xref:System.Web.UI.WebControls.GridView> control. When this property is set, the data rows are displayed alternating between the <xref:System.Web.UI.WebControls.GridView.RowStyle%2A> settings and the AlternatingRowStyle settings. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:  
  
-   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.GridView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `AlternatingRowStyle-ForeColor`).  
  
-   Nest an `<AlternatingRowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The properties can also be set programmatically in the form `Property.Subproperty` (for example, `AlternatingRowStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties.  
  
   
  
## Examples  
 The following example demonstrates how to use the AlternatingRowStyle property to declaratively define the style for alternating data rows in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewRowStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1004_1.aspx)]
 [!code-cs[GridViewRowStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1004_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateColumns">
      <MemberSignature Language="C#" Value="public virtual bool AutoGenerateColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether bound fields are automatically created for each field in the data source.</summary>
        <value>
          <see langword="true" /> to automatically create bound fields for each field in the data source; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the AutoGenerateColumns property is set to `true`, an <xref:System.Web.UI.WebControls.AutoGeneratedField> object is automatically created for each field in the data source. Each field is then displayed as a column in the <xref:System.Web.UI.WebControls.GridView> control in the order that the fields appear in the data source. This option provides a convenient way to display every field in the data source; however, you have limited control of how an automatically generated column field is displayed or behaves.  
  
 Instead of letting the <xref:System.Web.UI.WebControls.GridView> control automatically generate the column fields, you can manually define the column fields by setting the AutoGenerateColumns property to `false` and then creating a custom `Columns` collection. In addition to bound column fields, you can also display a button column field, a check box column field, a command field, a hyperlink column field, an image field, or a column field based on your own custom-defined template.  
  
 You can also combine explicitly declared column fields with automatically generated column fields. When both are used, explicitly declared column fields are rendered first, followed by the automatically generated column fields. Automatically generated bound column fields are not added to the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection. For more information, see <xref:System.Web.UI.WebControls.GridView.Columns%2A>.  
  
 If you set this property to `true` and set the <xref:System.Web.UI.WebControls.DataBoundControl.ItemType%2A> property to a model type, <xref:System.Web.DynamicData.DynamicField> controls are generated. If you do not set the <xref:System.Web.UI.WebControls.DataBoundControl.ItemType%2A> property, <xref:System.Web.UI.WebControls.BoundField> controls are generated. If you do not want <xref:System.Web.DynamicData.DynamicField> controls, you have the following options:  
  
-   Set the <xref:System.Web.UI.WebControls.GridView.ColumnsGenerator%2A> property to `null` in the `Page_Load` event handler. In that case, <xref:System.Web.UI.WebControls.BoundField> controls are generated.  
  
-   Write custom code to automatically generate fields by creating and assigning your own <xref:System.Web.UI.WebControls.GridView.ColumnsGenerator%2A> class and assigning an instance of it to the control.  
  
-   Set AutoGenerateColumns to `false`. In that case, no fields are generated, and you must manually specify fields using controls such as <xref:System.Web.UI.WebControls.BoundField> or <xref:System.Web.UI.WebControls.ImageField>.  
  
-   Do not set the <xref:System.Web.UI.WebControls.DataBoundControl.ItemType%2A> property. In that case, <xref:System.Web.UI.WebControls.BoundField> controls are generated.  
  
   
  
## Examples  
 The following example demonstrates how to use the AutoGenerateColumns property to automatically create bound field columns in a <xref:System.Web.UI.WebControls.GridView> control for each field in the data source.  
  
 [!code-vb[GridViewSimple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1153_1.aspx)]
 [!code-cs[GridViewSimple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1153_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateDeleteButton">
      <MemberSignature Language="C#" Value="public virtual bool AutoGenerateDeleteButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateDeleteButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with a Delete button for each data row is automatically added to a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>
          <see langword="true" /> to automatically add a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with a Delete button for each data row; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a data source control that supports deleting is bound to a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.GridView> control can take advantage of the data source control's capabilities and provide automatic deleting functionality.  
  
> [!NOTE]
>  For a data source control to delete data, it must be configured to delete data. To configure a data source control to delete records, see the documentation for the specific data source control.  
  
 When the AutoGenerateDeleteButton property is set to `true`, a column (represented by a <xref:System.Web.UI.WebControls.CommandField> object) with a Delete button for each data row is automatically added to the <xref:System.Web.UI.WebControls.GridView> control. Clicking the Delete button for a row permanently removes that record from the data source.  
  
> [!NOTE]
>  You must also set the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property to identify the key field or fields of the data source for the automatic deleting feature to work.  
  
 The <xref:System.Web.UI.WebControls.GridView> control provides several events that you can use to perform a custom action when a row is deleted. The following table lists the available events.  
  
|Event|Description|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.GridView.RowDeleted>|Occurs when a row's Delete button is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control deletes the record from the data source. This event is often used to check the results of the delete operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowDeleting>|Occurs when a row's Delete button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control deletes the record from the data source. This event is often used to cancel the deleting operation.|  
  
   
  
## Examples  
 The following example demonstrates how to use the AutoGenerateDeleteButton property to enable the automatic deleting feature of a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewEdit#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1343_1.aspx)]
 [!code-cs[GridViewEdit#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1343_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateEditButton">
      <MemberSignature Language="C#" Value="public virtual bool AutoGenerateEditButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateEditButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with an Edit button for each data row is automatically added to a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>
          <see langword="true" /> to automatically add a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with an Edit button for each data row; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a data source control that supports updating is bound to a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.GridView> control can take advantage of the data source control's capabilities and provide automatic updating functionality.  
  
> [!NOTE]
>  For a data source control to update data, it must be configured to update data. To configure a data source control to update records, see the documentation for the specific data source control.  
  
 When the AutoGenerateEditButton property is set to `true`, a column (represented by a <xref:System.Web.UI.WebControls.CommandField> object) with an Edit button for each data row is automatically added to the <xref:System.Web.UI.WebControls.GridView> control. Clicking an Edit button for a row puts that row in edit mode. When a row is in edit mode, each column field in the row that is not read-only displays the appropriate input control, such as a <xref:System.Web.UI.WebControls.TextBox> control, for the field's data type. This allows the user to modify the field's value.  
  
 When clicked, the Edit button is also replaced with an Update button and a Cancel button. Clicking the Update button updates the row in the data source with any value changes and returns the row to display mode. Clicking the Cancel button abandons any value changes and returns the row to display mode.  
  
> [!NOTE]
>  You can programmatically put a row in edit mode by setting the <xref:System.Web.UI.WebControls.GridView.EditIndex%2A> property with the index of the row. To programmatically exit edit mode, set the <xref:System.Web.UI.WebControls.GridView.EditIndex%2A> property to -1.  
  
 When using the built-in updating functionality, you must set the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property with a comma-separated list of field names to identify the primary key field or fields of the data source; otherwise, the built-in updating functionality will not be able to update the correct record. When using automatically generated field columns (by setting the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property to `true`), the <xref:System.Web.UI.WebControls.GridView> control automatically ensures that the automatically generated field columns that correspond to the field or fields specified in the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property are read-only.  
  
 You can control the appearance of a row that is in edit mode by using the <xref:System.Web.UI.WebControls.GridView.EditRowStyle%2A> property. Common settings usually include a custom background color, foreground color, and font properties.  
  
 The <xref:System.Web.UI.WebControls.GridView> control provides several events that you can use to perform a custom action when a row is updated. The following table lists the available events.  
  
|Event|Description|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.GridView.RowCancelingEdit>|Occurs when a row's Cancel button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control cancels out of edit mode. This event is often used to stop the canceling operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowEditing>|Occurs when a row's Edit button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control enters edit mode. This event is often used to cancel the editing operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowUpdated>|Occurs when a row's Update button is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control updates the row. This event is often used to check the results of the update operation.|  
|<xref:System.Web.UI.WebControls.GridView.RowUpdating>|Occurs when a row's Update button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control updates the row. This event is often used to cancel the updating operation.|  
  
   
  
## Examples  
 The following example demonstrates how to use the AutoGenerateEditButton property to enable the automatic editing feature of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewEdit#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1016_1.aspx)]
 [!code-cs[GridViewEdit#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1016_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateSelectButton">
      <MemberSignature Language="C#" Value="public virtual bool AutoGenerateSelectButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateSelectButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with a Select button for each data row is automatically added to a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>
          <see langword="true" /> to automatically add a <see cref="T:System.Web.UI.WebControls.CommandField" /> field column with a Select button for each data row; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the AutoGenerateSelectButton property is set to `true`, a column (represented by a <xref:System.Web.UI.WebControls.CommandField> object) with a Select button for each data row is automatically added to the <xref:System.Web.UI.WebControls.GridView> control. Clicking the Select button for a row selects that row in the control, which sets the <xref:System.Web.UI.WebControls.GridView.SelectedIndex%2A> property to the index of the row. To retrieve the <xref:System.Web.UI.WebControls.GridViewRow> object that represents the selected row, use the <xref:System.Web.UI.WebControls.GridView.SelectedRow%2A> property. You can also get the primary key value for the selected record by using the <xref:System.Web.UI.WebControls.GridView.SelectedValue%2A> property. The <xref:System.Web.UI.WebControls.GridView.SelectedValue%2A> property contains the values of the key fields specified in the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property.  
  
> [!NOTE]
>  You can programmatically select a row by setting the <xref:System.Web.UI.WebControls.GridView.SelectedIndex%2A> property. To cancel the selection of a row, set the <xref:System.Web.UI.WebControls.GridView.SelectedIndex%2A> property to -1.  
  
 You can control the appearance of the selected row by using the <xref:System.Web.UI.WebControls.GridView.SelectedRowStyle%2A> property. Common settings usually include a custom background color, foreground color, and font properties.  
  
 The <xref:System.Web.UI.WebControls.GridView> control provides several events that you can use to perform a custom action when a row is selected. The following table lists the available events.  
  
|Event|Description|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|Occurs when a row's Select button is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control handles the select operation. This event is often used to perform a task after a row is selected in the control.|  
|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanging>|Occurs when a row's Select button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control handles the select operation. This event is often used to cancel the selecting operation.|  
  
   
  
## Examples  
 The following example demonstrates how to use the AutoGenerateSelectButton property to enable the automatic selection feature of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewSelect#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1205_1.aspx)]
 [!code-vb[GridViewSelect#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1205_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackImageUrl">
      <MemberSignature Language="C#" Value="public virtual string BackImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BackImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL to an image to display in the background of a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>The URL of an image to display in the background of the <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default is an empty string (""), which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the BackImageUrl property to specify the URL to an image to display in the background of a <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  If the specified image is smaller than the <xref:System.Web.UI.WebControls.GridView> control, the image is tiled to fill in the background. If the image is larger than the control, the image is cropped.  
  
   
  
## Examples  
 The following example demonstrates how to use the BackImageUrl property to display a custom image in the background of a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewBackImageUrl#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1003_1.aspx)]
 [!code-vb[GridViewBackImageUrl#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1003_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BottomPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridViewRow BottomPagerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.GridViewRow BottomPagerRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the bottom pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the bottom pager row in the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When paging is enabled (by setting the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property to `true`), an additional row called the pager row is automatically displayed in the <xref:System.Web.UI.WebControls.GridView> control. The pager row contains controls that allow the user to navigate to the other pages, and can be displayed at the top, the bottom, or both the top and bottom of the control. Use the BottomPagerRow property to programmatically access the <xref:System.Web.UI.WebControls.GridViewRow> object that represents the bottom pager row in the <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  The BottomPagerRow property is available only after the <xref:System.Web.UI.WebControls.GridView> control creates the bottom pager row in the <xref:System.Web.UI.WebControls.GridView.RowCreated> event.  
  
 This property is commonly used when you need to programmatically manipulate the bottom pager row, for example when adding custom content. Any modification to the BottomPagerRow property must be performed after the <xref:System.Web.UI.WebControls.GridView> control has been rendered; otherwise, the <xref:System.Web.UI.WebControls.GridView> control will overwrite any changes.  
  
   
  
## Examples  
 The following example demonstrates how to use the BottomPagerRow property to access the bottom pager row in a <xref:System.Web.UI.WebControls.GridView> control. The BottomPagerRow property is used to retrieve a <xref:System.Web.UI.WebControls.DropDownList> control from the pager row.  
  
 [!code-vb[GridViewPagerTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_54_1.aspx)]
 [!code-cs[GridViewPagerTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_54_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public virtual string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text to render in an HTML caption element in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
        <value>A string that represents the text to render in an HTML caption element in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default value is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Caption property to specify the text to render in an HTML caption element in a <xref:System.Web.UI.WebControls.GridView> control. The text that you specify provides assistive technology devices with a description of the table that can be used to make the control more accessible. You can also specify the position at which to render the HTML caption element by using the <xref:System.Web.UI.WebControls.GridView.CaptionAlign%2A> property.  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example demonstrates how to use the Caption property to specify the caption for a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewCaption#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_177_1.aspx)]
 [!code-vb[GridViewCaption#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_177_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CaptionAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableCaptionAlign CaptionAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.TableCaptionAlign CaptionAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableCaptionAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the horizontal or vertical position of the HTML caption element in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> values. The default is <see langword="TableCaptionAlign.NotSet" />, which uses the browser's default setting.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CaptionAlign property to specify the horizontal or vertical position of the HTML caption element in a <xref:System.Web.UI.WebControls.GridView> control. This property is provided to make the control more accessible to users of assistive technology devices.  
  
 This property is set using one of the <xref:System.Web.UI.WebControls.TableCaptionAlign> enumeration values. The following table lists the possible values.  
  
|Value|Description|  
|-----------|-----------------|  
|`TableCaptionAlign.Bottom`|The caption element is aligned with the bottom of the table.|  
|`TableCaptionAlign.Left`|The caption element is aligned with the left side of the table.|  
|`TableCaptionAlign.NotSet`|The caption element's alignment is not set.|  
|`TableCaptionAlign.Right`|The caption element is aligned with the right side of the table.|  
|`TableCaptionAlign.Top`|The caption element is aligned with the top of the table.|  
  
> [!NOTE]
>  When this property is set to `TableCaptionAlign.NotSet`, the default value of the browser is used.  
  
 To specify the text for the HTML caption element, use the <xref:System.Web.UI.WebControls.GridView.Caption%2A> property.  
  
   
  
## Examples  
 The following example demonstrates how to use the CaptionAlign property to specify that the caption element for a <xref:System.Web.UI.WebControls.GridView> control is aligned with the top of the control.  
  
 [!code-cs[GridViewCaption#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_600_1.aspx)]
 [!code-vb[GridViewCaption#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_600_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value is not one of the <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> enumeration values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellPadding">
      <MemberSignature Language="C#" Value="public virtual int CellPadding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CellPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the amount of space between the contents of a cell and the cell's border.</summary>
        <value>The amount of space, in pixels, between the contents of a cell and the cell's border. The default value is -1, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CellPadding property to control the spacing between the contents of a cell and the cell's border. The padding amount specified is added to all four sides of the cell.  
  
 All cells in the same column of a <xref:System.Web.UI.WebControls.GridView> control have the same width. The padding amount is applied to the widest cell and all other cells in the column have this cell width. Similarly, all cells in the same row have the same height. The padding amount is applied to the tallest cell in the row and all other cells in the row have this cell height. Individual cell sizes cannot be specified.  
  
   
  
## Examples  
 The following example demonstrates how to use the CellPadding property to declaratively set the amount of space between the contents of a cell and the cell's border.  
  
 [!code-cs[GridViewCellPadding#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_836_1.aspx)]
 [!code-vb[GridViewCellPadding#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_836_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellSpacing">
      <MemberSignature Language="C#" Value="public virtual int CellSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CellSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the amount of space between cells.</summary>
        <value>The amount of space, in pixels, between cells. The default value is 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CellSpacing property to control the spacing between adjacent cells in the <xref:System.Web.UI.WebControls.GridView> control. This spacing is applied both vertically and horizontally. The cell spacing is uniform for the entire control. Individual cell spacing between rows or columns cannot be specified.  
  
> [!NOTE]
>  If you set this property to a value greater than 0 and then set the <xref:System.Web.UI.WebControls.GridView.GridLines%2A> property to a value that displays the cell borders, a gap is displayed between the borders of adjacent cells. In this situation, the <xref:System.Web.UI.WebControls.Table.CellSpacing%2A> property controls the size of the gap.  
  
   
  
## Examples  
 The following example demonstrates how to use the CellSpacing property to declaratively set the amount of space between the cells of a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewCellPadding#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_898_1.aspx)]
 [!code-vb[GridViewCellPadding#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_898_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientIDRowSuffix">
      <MemberSignature Language="C#" Value="public virtual string[] ClientIDRowSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ClientIDRowSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.StringArrayConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the names of the data fields whose values are appended to the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; property value to uniquely identify each instance of a data-bound control.</summary>
        <value>The names of the data fields whose values are used to uniquely identify each instance of a data-bound control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To prevent naming conflicts when multiple instances of a control are rendered in multiple rows of a <xref:System.Web.UI.WebControls.GridView> control, ASP.NET generates a unique <xref:System.Web.UI.Control.ClientID%2A> value for each instance. You specify how the <xref:System.Web.UI.Control.ClientID%2A> value is generated by setting the <xref:System.Web.UI.Control.ClientIDMode%2A> property. If you set the <xref:System.Web.UI.Control.ClientIDMode%2A> property to <xref:System.Web.UI.ClientIDMode>, ASP.NET will generate the <xref:System.Web.UI.Control.ClientID%2A> by appending a suffix that is derived from the data field or fields that are specified in ClientIDRowSuffix. If ClientIDRowSuffix is not set, the suffix is a sequential number.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientIDRowSuffixDataKeys">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.DataKeyArray ClientIDRowSuffixDataKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKeyArray ClientIDRowSuffixDataKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKeyArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data values that are used to uniquely identify each instance of a data-bound control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</summary>
        <value>The data values that are used to uniquely identify each instance of a data-bound control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataControlFieldCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataControlFieldCollection Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataControlFieldTypeEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataControlFieldCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.DataControlField" /> objects that represent the column fields in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" /> that contains all the column fields in the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A column field represents a column in a <xref:System.Web.UI.WebControls.GridView> control. The Columns property (collection) is used to store all the explicitly declared column fields that get rendered in the <xref:System.Web.UI.WebControls.GridView> control. You can also use the Columns collection to programmatically manage the collection of column fields.  
  
> [!NOTE]
>  Explicitly declared column fields can be used in combination with automatically generated column fields. When both are used, explicitly declared column fields are rendered first, followed by the automatically generated column fields. Automatically generated column fields are not added to the Columns collection.  
  
 The column fields are displayed in the <xref:System.Web.UI.WebControls.GridView> control in the order that the column fields appear in the Columns collection. The following table shows the different column field classes that derive from the <xref:System.Web.UI.WebControls.DataControlField> class and can be used in the Columns collection.  
  
|Column field type|Description|  
|-----------------------|-----------------|  
|<xref:System.Web.UI.WebControls.BoundField>|Displays the value of a field in a data source. This is the default column type of the <xref:System.Web.UI.WebControls.GridView> control.|  
|<xref:System.Web.UI.WebControls.ButtonField>|Displays a command button for each item in the <xref:System.Web.UI.WebControls.GridView> control. This enables you to create a column of custom button controls, such as the Add or the Remove button.|  
|<xref:System.Web.UI.WebControls.CheckBoxField>|Displays a check box for each item in the <xref:System.Web.UI.WebControls.GridView> control. This column field type is commonly used to display fields with a Boolean value.|  
|<xref:System.Web.UI.WebControls.CommandField>|Displays predefined command buttons to perform select, edit, or delete operations.|  
|<xref:System.Web.UI.WebControls.HyperLinkField>|Displays the value of a field in a data source as a hyperlink. This column field type enables you to bind a second field to the hyperlink's URL.|  
|<xref:System.Web.UI.WebControls.ImageField>|Displays an image for each item in the <xref:System.Web.UI.WebControls.GridView> control.|  
|<xref:System.Web.UI.WebControls.TemplateField>|Displays user-defined content for each item in the <xref:System.Web.UI.WebControls.GridView> control, according to a specified template. This column field type enables you to create a custom column field.|  
  
 Although you can programmatically add column fields to the Columns collection, it is easier to list the column fields declaratively in the <xref:System.Web.UI.WebControls.GridView> control and then use the <xref:System.Web.UI.WebControls.DataControlField.Visible%2A> property of each column field to show or hide each column field.  
  
 If the <xref:System.Web.UI.WebControls.DataControlField.Visible%2A> property of a column field is set to `false`, the column is not displayed in the <xref:System.Web.UI.WebControls.GridView> control and the data for the column does not make a round trip to the client. If you want the data for a column that is not visible to make a round trip, add the field name to the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property.  
  
   
  
## Examples  
 The following example demonstrates how to populate the Columns collection declaratively.  
  
 [!code-vb[GridViewColumnFields#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_420_1.aspx)]
 [!code-cs[GridViewColumnFields#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_420_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnsGenerator">
      <MemberSignature Language="C#" Value="public System.Web.UI.IAutoFieldGenerator ColumnsGenerator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IAutoFieldGenerator ColumnsGenerator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.IAutoFieldGenerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the control that will automatically generate the columns for a <see cref="T:System.Web.UI.WebControls.GridView" /> control that uses ASP.NET Dynamic Data features.</summary>
        <value>The control that will automatically generate the columns for a <see cref="T:System.Web.UI.WebControls.GridView" /> control that uses ASP.NET Dynamic Data features.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In order to use ASP.NET Dynamic Data features in a page, you must add a <xref:System.Web.DynamicData.DynamicDataManager> control to the page. This enables ASP.NET Dynamic Data features for data-bound controls in a page, such as <xref:System.Web.UI.WebControls.GridView> control. To enable an individual <xref:System.Web.UI.WebControls.GridView> control to use Dynamic Data features, you must associate it with the <xref:System.Web.DynamicData.DynamicDataManager> control by calling the <xref:System.Web.DynamicData.DynamicDataManager.RegisterControl%2A?displayProperty=fullName> method during the `Page_Init` event. This method automatically sets the ColumnsGenerator property to the <xref:System.Web.DynamicData.DynamicDataManager> object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateAutoGeneratedColumn">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.AutoGeneratedField CreateAutoGeneratedColumn (System.Web.UI.WebControls.AutoGeneratedFieldProperties fieldProperties);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.AutoGeneratedField CreateAutoGeneratedColumn(class System.Web.UI.WebControls.AutoGeneratedFieldProperties fieldProperties) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This is kept for backward compatibility - this API is no more used")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.AutoGeneratedField</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldProperties" Type="System.Web.UI.WebControls.AutoGeneratedFieldProperties" />
      </Parameters>
      <Docs>
        <param name="fieldProperties">An <see cref="T:System.Web.UI.WebControls.AutoGeneratedFieldProperties" /> that represents the properties of the automatically generated column field to create.</param>
        <summary>Creates an automatically generated column field.</summary>
        <returns>An <see cref="T:System.Web.UI.WebControls.AutoGeneratedField" /> that represents the automatically generated column field specified by the <paramref name="fieldProperties" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateAutoGeneratedColumn method is used to create an automatically generated column field when the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property is set to `true`. The properties of the automatically generated column field are specified through the <xref:System.Web.UI.WebControls.AutoGeneratedFieldProperties> object contained in the `fieldProperties` parameter.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override int CreateChildControls (System.Collections.IEnumerable dataSource, bool dataBinding);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 CreateChildControls(class System.Collections.IEnumerable dataSource, bool dataBinding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Collections.IEnumerable" />
        <Parameter Name="dataBinding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSource">An &lt;xref:System.Collections.IEnumerable?displayProperty=fullName&gt; that contains the data source for the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</param>
        <param name="dataBinding">
          <see langword="true" /> to indicate that the child controls are bound to data; otherwise, <see langword="false" />.</param>
        <summary>Creates the control hierarchy used to render the <see cref="T:System.Web.UI.WebControls.GridView" /> control using the specified data source.</summary>
        <returns>The number of rows created.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateChildControls method is used to create the control hierarchy of the <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="dataSource" /> returns a null <see cref="T:System.Web.UI.DataSourceView" />.  
  
 -or-  
  
 <paramref name="dataSource" /> does not implement the &lt;xref:System.Collections.ICollection&gt; interface and cannot return a &lt;xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A&gt;.  
  
 -or-  
  
 &lt;xref:System.Web.UI.WebControls.GridView.AllowPaging%2A&gt; is <see langword="true" /> and <paramref name="dataSource" /> does not implement the &lt;xref:System.Collections.ICollection&gt; interface and cannot perform data source paging.  
  
 -or-  
  
 <paramref name="dataSource" /> does not implement the &lt;xref:System.Collections.ICollection&gt; interface and <paramref name="dataBinding" /> is set to <see langword="false" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateChildTable">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.Table CreateChildTable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.Table CreateChildTable() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Table</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new child table.</summary>
        <returns>Always returns a new <see cref="T:System.Web.UI.WebControls.Table" /> that represents the child table.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateChildTable method is a helper method used by the <xref:System.Web.UI.WebControls.GridView> control to create a child table.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateColumns">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ICollection CreateColumns (System.Web.UI.WebControls.PagedDataSource dataSource, bool useDataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ICollection CreateColumns(class System.Web.UI.WebControls.PagedDataSource dataSource, bool useDataSource) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.PagedDataSource" />
        <Parameter Name="useDataSource" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSource">A <see cref="T:System.Web.UI.WebControls.PagedDataSource" /> that represents the data source.</param>
        <param name="useDataSource">
          <see langword="true" /> to use the data source specified by the `dataSource` parameter; otherwise, <see langword="false" />.</param>
        <summary>Creates the set of column fields used to build the control hierarchy.</summary>
        <returns>A &lt;xref:System.Collections.ICollection?displayProperty=fullName&gt; that contains the fields used to build the control hierarchy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property is set to `true`, a bound column field is automatically created for each field in the data source. Each bound column field is then displayed as a row in the <xref:System.Web.UI.WebControls.GridView> control in the order that the fields appear in the data source. The CreateColumns method is used to create the automatically generated column fields.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the default style for the control.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style for the control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateControlStyle method is used to create the default style for the control.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceSelectArguments">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceSelectArguments</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the <see cref="T:System.Web.UI.DataSourceSelectArguments" /> object that contains the arguments that get passed to the data source for processing.</summary>
        <returns>A <see cref="T:System.Web.UI.DataSourceSelectArguments" /> that contains the arguments that get passed to the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateDataSourceSelectArguments method is a helper method called by the <xref:System.Web.UI.WebControls.GridView> control to create the <xref:System.Web.UI.DataSourceSelectArguments> object that contains the arguments passed to the data source. In this implementation, the <xref:System.Web.UI.DataSourceSelectArguments> object contains the arguments for paging operations.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateRow">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.GridViewRow CreateRow (int rowIndex, int dataSourceIndex, System.Web.UI.WebControls.DataControlRowType rowType, System.Web.UI.WebControls.DataControlRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.GridViewRow CreateRow(int32 rowIndex, int32 dataSourceIndex, valuetype System.Web.UI.WebControls.DataControlRowType rowType, valuetype System.Web.UI.WebControls.DataControlRowState rowState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="dataSourceIndex" Type="System.Int32" />
        <Parameter Name="rowType" Type="System.Web.UI.WebControls.DataControlRowType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row to create.</param>
        <param name="dataSourceIndex">The index of the data source item to bind to the row.</param>
        <param name="rowType">One of the <see cref="T:System.Web.UI.WebControls.DataControlRowType" /> values.</param>
        <param name="rowState">One of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> values.</param>
        <summary>Creates a row in the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> created using the specified parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateRow method is used to create a row in the <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control. A data-bound <xref:System.Web.UI.WebControls.GridView> control automatically generates the rows needed to display the target data.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataBind">
      <MemberSignature Language="C#" Value="public override sealed void DataBind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DataBind() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Binds the data source to the <see cref="T:System.Web.UI.WebControls.GridView" /> control. This method cannot be inherited.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DataBind method to bind data from a data source to the <xref:System.Web.UI.WebControls.GridView> control. This method resolves all data-binding expressions in the active template of the control.  
  
 The DataBind method is called automatically if the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property of the <xref:System.Web.UI.WebControls.GridView> control refers to a valid data source control.  
  
 Instead of manually calling the DataBind method, you can use model binding with your DataBind control by setting the <xref:System.Web.UI.WebControls.DataBoundControl.SelectMethod%2A> property to the name of a method that returns data for the <xref:System.Web.UI.WebControls.GridView>. The <xref:System.Web.UI.WebControls.GridView> is then automatically populated with the data that is returned from the select method. Model binding can simplify your code for working with data. For more information, see [Model Binding and Web Forms](http://go.microsoft.com/fwlink/?LinkId=286117).  
  
   
  
## Examples  
 The following example demonstrates how to use the DataBind method to bind a data source to a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewDataBind#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_182_1.aspx)]
 [!code-vb[GridViewDataBind#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_182_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataKeyNames">
      <MemberSignature Language="C#" Value="public virtual string[] DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DataKeyNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.StringArrayConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an array that contains the names of the primary key fields for the items displayed in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>An array that contains the names of the primary key fields for the items displayed in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DataKeyNames property to specify the field or fields that represent the primary key of the data source. You should only set this property to the field or fields that are required to uniquely identify each row; for example, the ID column if an integer value uniquely identifies each row. You must set the DataKeyNames property in order for the automatic update and delete features of the <xref:System.Web.UI.WebControls.GridView> control to work. The values of these key fields are passed to the data source control in order to specify the row to update or delete.  
  
 If you need to retrieve the data key value when updating or deleting a row, use the `Keys` property of either the <xref:System.Web.UI.WebControls.GridViewUpdateEventArgs> or <xref:System.Web.UI.WebControls.GridViewDeleteEventArgs> class. For example, `e.Keys[0]` holds the value of the first data key in a <xref:System.Web.UI.WebControls.GridView.RowUpdating> or <xref:System.Web.UI.WebControls.GridView.RowDeleting> event handler.  
  
 If you need to retrieve the data key value when a row is selected, use the <xref:System.Web.UI.WebControls.GridView.SelectedDataKey%2A> property.  
  
 When the DataKeyNames property is set, the <xref:System.Web.UI.WebControls.GridView> control automatically populates its <xref:System.Web.UI.WebControls.GridView.DataKeys%2A> collection with the values from the specified field or fields, which provides a convenient way to access the primary keys of each row.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.GridView> control stores these key field values in the control state. If these values contain sensitive information, it is strongly recommended that you enable view-state encryption by setting the <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> property to `ViewStateEncryptionMode.Always`.  
  
 When you use automatically generated field columns (by setting the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property to `true`), the <xref:System.Web.UI.WebControls.GridView> control makes sure that the columns that correspond to the field or fields specified in the DataKeyNames property are read-only.  
  
 If the <xref:System.Web.UI.WebControls.DataControlField.Visible%2A> property of a column field is set to `false`, the column is not displayed in the <xref:System.Web.UI.WebControls.GridView> control and the data for the column does not make a round trip to the client. If you want the data for a column that is not visible to be available to the client, add the field name to the DataKeyNames property.  
  
   
  
## Examples  
 The following example demonstrates how to use the DataKeyNames property to specify the key field of the data source. In the example, the `DataKeyNames` attribute of the `GridView` element in markup specifies two key fields by using a comma to separate the names. To run this example, create a Web site that has the following:  
  
-   A connection to the AdventureWorksLT sample database and a connection string that is named `AdventureWorksLTConnectionString`. For information about how to set up the AdventureWorksLT sample database, see [How to: Set Up an AdventureWorksLT Sample Database for ASP.NET Development](~/add/includes/ajax-current-ext-md.md).  
  
-   A LINQ-to-SQL data context class that is named `AdventureWorksLTDataClassesDataContext`. The data context must have a class for the SalesOrderDetails table. For information about how to create LINQ-to-SQL classes, see [LINQ to SQL](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[GridViewEdit#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1002_1.aspx)]
 [!code-cs[GridViewEdit#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1002_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataKeys">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKeyArray DataKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKeyArray DataKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKeyArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.DataKey" /> objects that represent the data key value of each row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.DataKeyArray" /> that contains the data key of each row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property is set, the <xref:System.Web.UI.WebControls.GridView> control automatically creates a <xref:System.Web.UI.WebControls.DataKey> object for each row in the control. The <xref:System.Web.UI.WebControls.DataKey> object contains the values of the field or fields specified in the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property. The <xref:System.Web.UI.WebControls.DataKey> objects are then added to the control's DataKeys collection. Use the DataKeys property to retrieve the <xref:System.Web.UI.WebControls.DataKey> object for a specific data row in the <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  You can use the <xref:System.Web.UI.WebControls.GridView.SelectedDataKey%2A> property to retrieve the <xref:System.Web.UI.WebControls.DataKey> object for the currently selected row. You can also use the <xref:System.Web.UI.WebControls.GridView.SelectedValue%2A> property to retrieve the data key value for the currently selected row directly.  
  
   
  
## Examples  
 The following example demonstrates how to use the DataKeys property to determine the data key value of the selected row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewDataKeys#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_962_1.aspx)]
 [!code-vb[GridViewDataKeys#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_962_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public virtual string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method to call in order to delete data.</summary>
        <value>The name of the method.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property causes model binding to be used as the data-binding method.  
  
 For a tutorial series on using model binding with Web Forms, see [Model Binding and Web Forms](http://go.microsoft.com/fwlink/?LinkId=286117).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteRow">
      <MemberSignature Language="C#" Value="public virtual void DeleteRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteRow(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row to delete.</param>
        <summary>Deletes the record at the specified index from the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DeleteRow method to programmatically delete the record at the specified index from the data source. This method is commonly used when you need to delete a record from outside of the <xref:System.Web.UI.WebControls.GridView> control, such as from a different control on the page. Calling this method also raises the <xref:System.Web.UI.WebControls.GridView.RowDeleted> and <xref:System.Web.UI.WebControls.GridView.RowDeleting> events.  
  
   
  
## Examples  
 The following example demonstrates how to use the DeleteRow method to programmatically delete a record in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewDeleteRow#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_184_1.aspx)]
 [!code-vb[GridViewDeleteRow#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_184_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.UI.WebControls.GridView" /> control is not bound to a data source control.</exception>
        <exception cref="T:System.NotSupportedException">The data source control that the <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to does not support delete operations, or there is no delete command defined for the data source.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditIndex">
      <MemberSignature Language="C#" Value="public virtual int EditIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the row to edit.</summary>
        <value>The zero-based index of the row to edit. The default is -1, which indicates that no row is being edited.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The row index is zero-based (the first row is row zero).  
  
 This property is typically used only in the following scenarios, which involve handlers for specific events:  
  
-   You want the <xref:System.Web.UI.WebControls.GridView> control to open in edit mode for a specific row the first time that the page is displayed. To do this, you can set the EditIndex property in the handler for the <xref:System.Web.UI.Control.Load> event of the <xref:System.Web.UI.Page> class or of the <xref:System.Web.UI.WebControls.GridView> control.  
  
-   You want to know which row was edited after the row was updated. To do this, you can retrieve the row index from the EditIndex property in the <xref:System.Web.UI.WebControls.GridView.RowUpdated> event handler.  
  
-   You are binding the <xref:System.Web.UI.WebControls.GridView> control to a data source by setting the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> property programmatically. In this case you must set the EditIndex property in the <xref:System.Web.UI.WebControls.GridView.RowEditing> and <xref:System.Web.UI.WebControls.GridView.RowCancelingEdit> event handlers.  
  
 If you set the EditIndex property after a postback or in handlers for events that are raised later than the <xref:System.Web.UI.Control.Load> event, the <xref:System.Web.UI.WebControls.GridView> control might not enter edit mode for the specified row. If you read the value of this property in other event handlers, the index is not guaranteed to reflect the row that is being edited.  
  
 To determine which row the user has clicked an **Edit** button or hyperlink in before the <xref:System.Web.UI.WebControls.GridView> control enters edit mode, you can retrieve the row index from the <xref:System.Web.UI.WebControls.GridViewEditEventArgs.NewEditIndex%2A> property of the <xref:System.Web.UI.WebControls.GridViewEditEventArgs> object in the <xref:System.Web.UI.WebControls.GridView.RowEditing> event handler.  
  
 To prevent the <xref:System.Web.UI.WebControls.GridView> control from entering edit mode after a user has clicked an **Edit** button or hyperlink, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.GridViewEditEventArgs> object to `true` in the <xref:System.Web.UI.WebControls.GridView.RowEditing> event handler.  
  
   
  
## Examples  
 The following example demonstrates how to use the EditIndex property to determine which row was updated after it was edited in a <xref:System.Web.UI.WebControls.GridView> control. A message is displayed to indicate that the update was successful.  
  
 [!code-cs[GridViewRows#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1013_1.aspx)]
 [!code-vb[GridViewRows#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1013_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified index is less than -1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EditRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EditRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the row selected for editing in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the row being edited in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EditRowStyle property to control the appearance of the row being edited in a <xref:System.Web.UI.WebControls.GridView> control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:  
  
-   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.GridView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `EditRowStyle-ForeColor`).  
  
-   Nest an `<EditRowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The properties can also be set programmatically in the form `Property.Subproperty` (for example, `EditRowStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties.  
  
   
  
## Examples  
 The following example demonstrates how to use the EditRowStyle property to define a custom style for the row being edited in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewEditRowStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_980_1.aspx)]
 [!code-vb[GridViewEditRowStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_980_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source that does not contain any records.</summary>
        <value>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that enables you to set the appearance of the null row.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the EmptyDataRowStyle property to control the appearance of the null row in a <xref:System.Web.UI.WebControls.GridView> control. The null row is displayed when the data source that is bound to the control does not contain any records. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:  
  
-   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.GridView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `EmptyDataRowStyle-ForeColor`).  
  
-   Nest an `<EmptyDataRowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The properties can also be set programmatically in the form `Property.Subproperty` (for example, `EmptyDataRowStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties.  
  
   
  
## Examples  
 The following example demonstrates how to set the EmptyDataRowStyle property declaratively to specify a light blue background and a red font for the null row.  
  
 [!code-cs[GridViewNullRowTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1110_1.aspx)]
 [!code-vb[GridViewNullRowTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1110_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EmptyDataTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EmptyDataTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.GridViewRow))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the user-defined content for the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source that does not contain any records.</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> that contains the custom content for the empty data row. The default value is <see langword="null" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The empty data row is displayed in a <xref:System.Web.UI.WebControls.GridView> control when the data source that is bound to the control does not contain any records. You can define your own custom user interface (UI) for the empty data row by using the EmptyDataTemplate property.  
  
 To specify a custom template for the empty data row, first place `<EmptyDataTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control. You can then list the contents of the template between the opening and closing `<EmptyDataTemplate>` tags. To control the style of the empty data row, use the <xref:System.Web.UI.WebControls.GridView.EmptyDataRowStyle%2A> property. Alternatively, you can use the built-in UI for the empty data row by setting the <xref:System.Web.UI.WebControls.GridView.EmptyDataText%2A> property instead of this property.  
  
 For information about how to programmatically access controls that you declare in an empty data template, see [How to: Access Server Controls by ID](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  If both the <xref:System.Web.UI.WebControls.GridView.EmptyDataText%2A> and EmptyDataTemplate properties are set, the EmptyDataTemplate property takes precedence.  
  
   
  
## Examples  
 The following example demonstrates how to define a custom template for the empty data row displayed when a <xref:System.Web.UI.WebControls.GridView> control is bound to a data source that does not contain any records.  
  
 [!code-cs[GridViewNullRowTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_206_1.aspx)]
 [!code-vb[GridViewNullRowTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_206_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataText">
      <MemberSignature Language="C#" Value="public virtual string EmptyDataText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyDataText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text to display in the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source that does not contain any records.</summary>
        <value>The text to display in the empty data row. The default is an empty string (""), which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The empty data row is displayed in a <xref:System.Web.UI.WebControls.GridView> control when the data source that is bound to the control does not contain any records. Use the EmptyDataText property to specify the text to display in the empty data row. To control the style of the empty data row, use the <xref:System.Web.UI.WebControls.GridView.EmptyDataRowStyle%2A> property. Alternatively, you can define your own custom user interface (UI) for the empty data row by setting the <xref:System.Web.UI.WebControls.GridView.EmptyDataTemplate%2A> property instead of this property.  
  
> [!NOTE]
>  If both the EmptyDataText and <xref:System.Web.UI.WebControls.GridView.EmptyDataTemplate%2A> properties are set, the <xref:System.Web.UI.WebControls.GridView.EmptyDataTemplate%2A> property takes precedence.  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example demonstrates how to use the EmptyDataText property to specify the text to display in the empty data row.  
  
 [!code-vb[GridViewEmptyDataText#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_935_1.aspx)]
 [!code-cs[GridViewEmptyDataText#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_935_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableModelValidation">
      <MemberSignature Language="C#" Value="public virtual bool EnableModelValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableModelValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether a validator control will handle exceptions that occur during insert or update operations.</summary>
        <value>
          <see langword="true" /> if a validator control will handle exceptions that occur during insert or update operations; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnablePersistedSelection">
      <MemberSignature Language="C#" Value="public virtual bool EnablePersistedSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePersistedSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the selection of a row is based on index or on data-key values.</summary>
        <value>
          <see langword="true" /> if the row selection is based on data-key values; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If this property is `false` and a row is selected, the same row is selected when a new page is displayed even though the new page has different data in it. If you set this property to `true`, when you display a page that has different data in it, no row is selected. If you then return to the page on which a row was selected, that row is still selected.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableSortingAndPagingCallbacks">
      <MemberSignature Language="C#" Value="public virtual bool EnableSortingAndPagingCallbacks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSortingAndPagingCallbacks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether client-side callbacks are used for sorting and paging operations.</summary>
        <value>
          <see langword="true" /> to use client-side callbacks for sorting and paging operations; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, when a sorting or paging operation is performed, the <xref:System.Web.UI.WebControls.GridView> control posts back to the server to perform the operation. When the EnableSortingAndPagingCallbacks property is set to `true`, a service is called on the client to perform sorting and paging operations, which eliminates the need to post back to the server.  
  
> [!NOTE]
>  Not all browsers support this feature. To determine whether a browser supports this feature, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property.  
  
 All columns in the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection must support callbacks for this feature to work. If the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection contains a column that does not support callbacks, such as <xref:System.Web.UI.WebControls.TemplateField>, a <xref:System.NotSupportedException> exception is raised.  
  
   
  
## Examples  
 The following example demonstrates how to use the EnableSortingAndPagingCallbacks property to enable client-side callbacks for sorting and paging operations.  
  
 [!code-vb[GridViewEnableSortingAndPagingCallbacks#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_960_1.aspx)]
 [!code-cs[GridViewEnableSortingAndPagingCallbacks#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_960_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The &lt;xref:System.Web.UI.WebControls.GridView.Columns%2A&gt; collection contains a column that does not support callbacks, such as <see cref="T:System.Web.UI.WebControls.TemplateField" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExtractRowValues">
      <MemberSignature Language="C#" Value="protected virtual void ExtractRowValues (System.Collections.Specialized.IOrderedDictionary fieldValues, System.Web.UI.WebControls.GridViewRow row, bool includeReadOnlyFields, bool includePrimaryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ExtractRowValues(class System.Collections.Specialized.IOrderedDictionary fieldValues, class System.Web.UI.WebControls.GridViewRow row, bool includeReadOnlyFields, bool includePrimaryKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldValues" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="row" Type="System.Web.UI.WebControls.GridViewRow" />
        <Parameter Name="includeReadOnlyFields" Type="System.Boolean" />
        <Parameter Name="includePrimaryKey" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldValues">An <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> used to store the field values.</param>
        <param name="row">The <see cref="T:System.Web.UI.WebControls.GridViewRow" /> from which to retrieve the field values.</param>
        <param name="includeReadOnlyFields">
          <see langword="true" /> to include read-only fields; otherwise, <see langword="false" />.</param>
        <param name="includePrimaryKey">
          <see langword="true" /> to include the primary key field or fields; otherwise, <see langword="false" />.</param>
        <summary>Retrieves the values of each field declared within the specified row and stores them in the specified <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ExtractRowValues method is a helper method called by the <xref:System.Web.UI.WebControls.GridView> control to retrieve the values of each field declared within the row specified by the `row` parameter. You can specify whether the extracted values include read-only fields and key fields by using the `includeReadOnlyFields` and `includePrimaryKey` parameters, respectively.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FooterRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridViewRow FooterRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.GridViewRow FooterRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the footer row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the footer row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the FooterRow property to programmatically access the <xref:System.Web.UI.WebControls.GridViewRow> object that represents the footer row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  The FooterRow property is available only after the <xref:System.Web.UI.WebControls.GridView> control creates the footer row in the <xref:System.Web.UI.WebControls.GridView.RowCreated> event.  
  
 This property is commonly used when you need to programmatically manipulate the footer row, for example when adding custom content. Any modification to the FooterRow property must be performed after the <xref:System.Web.UI.WebControls.GridView> control has been rendered; otherwise, the <xref:System.Web.UI.WebControls.GridView> control will overwrite any changes.  
  
   
  
## Examples  
 The following example demonstrates how to use the FooterRow property to display the sort direction in the footer row.  
  
 [!code-vb[GridViewFooterRow#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_775_1.aspx)]
 [!code-cs[GridViewFooterRow#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_775_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FooterStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle FooterStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the footer row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the footer row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the FooterStyle property to control the appearance of the footer row in a <xref:System.Web.UI.WebControls.GridView> control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:  
  
-   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.GridView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `FooterStyle-ForeColor`).  
  
-   Nest a `<FooterStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The properties can also be set programmatically in the form `Property.Subproperty` (for example, `FooterStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties.  
  
   
  
## Examples  
 The following example demonstrates how to use the FooterStyle property to define a custom style for the footer row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewShowHeader#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_100_1.aspx)]
 [!code-vb[GridViewShowHeader#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_100_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackResult">
      <MemberSignature Language="C#" Value="protected virtual string GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetCallbackResult() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the result of a callback event that targets a control.</summary>
        <returns>The results of the callback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView> control implements the <xref:System.Web.UI.ICallbackEventHandler> interface and uses the <xref:System.Web.UI.WebControls.GridView.RaisePostBackEvent%2A> to asynchronously retrieve data and the GetCallbackResult method to return the retrieved data to the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackScript">
      <MemberSignature Language="C#" Value="protected virtual string GetCallbackScript (System.Web.UI.WebControls.IButtonControl buttonControl, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetCallbackScript(class System.Web.UI.WebControls.IButtonControl buttonControl, string argument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttonControl" Type="System.Web.UI.WebControls.IButtonControl" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="buttonControl">The button control for which to create the callback script.</param>
        <param name="argument">The arguments to pass to the callback script.</param>
        <summary>Creates the callback script for a button that performs a sorting operation.</summary>
        <returns>The callback script for a button that performs a sorting operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetCallbackScript method is a helper method used by the <xref:System.Web.UI.WebControls.GridView> control to create the callback script for a button that performs a sorting operation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridLines GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.GridLines GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridLines</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the gridline style for a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.GridLines" /> values. The default is <see langword="GridLines.Both" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the GridLines property to specify the gridline style for a <xref:System.Web.UI.WebControls.GridView> control. The following table lists the available styles.  
  
|Style|Description|  
|-----------|-----------------|  
|`GridLines.None`|No gridlines are displayed.|  
|`GridLines.Horizontal`|Displays the horizontal gridlines only.|  
|`GridLines.Vertical`|Displays the vertical gridlines only.|  
|`GridLines.Both`|Displays both the horizontal and vertical gridlines.|  
  
   
  
## Examples  
 The following example demonstrates how to use the GridLines property to hide the gridlines in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewGridLines#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1102_1.aspx)]
 [!code-cs[GridViewGridLines#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1102_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridViewRow HeaderRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.GridViewRow HeaderRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the header row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the header row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the HeaderRow property to programmatically access the <xref:System.Web.UI.WebControls.GridViewRow> object that represents the header row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  The HeaderRow property is available only after the <xref:System.Web.UI.WebControls.GridView> control creates the header row in the <xref:System.Web.UI.WebControls.GridView.RowCreated> event.  
  
 This property is commonly used when you need to programmatically manipulate the header row, for example, when adding custom content. Any modification to the HeaderRow property must be performed after the <xref:System.Web.UI.WebControls.GridView> control has been rendered; otherwise, the <xref:System.Web.UI.WebControls.GridView> control will overwrite any changes.  
  
   
  
## Examples  
 The following example demonstrates how to use the HeaderRow property to programmatically change the font color of the header row based on the sort direction.  
  
 [!code-vb[GridViewFooterRow#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1107_1.aspx)]
 [!code-cs[GridViewFooterRow#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1107_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the header row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the header row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the HeaderStyle property to control the appearance of the header row in a <xref:System.Web.UI.WebControls.GridView> control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:  
  
-   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.GridView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `HeaderStyle-ForeColor`).  
  
-   Nest a `<HeaderStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The properties can also be set programmatically in the form `Property.Subproperty` (for example, `HeaderStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties.  
  
   
  
## Examples  
 The following example demonstrates how to use the HeaderStyle property to define a custom style for the header row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewShowHeader#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1352_1.aspx)]
 [!code-vb[GridViewShowHeader#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1352_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.HorizontalAlign HorizontalAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.HorizontalAlign HorizontalAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.HorizontalAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the horizontal alignment of a <see cref="T:System.Web.UI.WebControls.GridView" /> control on the page.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.HorizontalAlign" /> values. The default is <see langword="HorizontalAlign.NotSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the HorizontalAlign property to specify the horizontal alignment of a <xref:System.Web.UI.WebControls.GridView> control within the page. The following table lists the different horizontal alignment styles.  
  
|Alignment value|Description|  
|---------------------|-----------------|  
|`HorizontalAlign.NotSet`|The horizontal alignment of the <xref:System.Web.UI.WebControls.GridView> control has not been set.|  
|`HorizontalAlign.Left`|The <xref:System.Web.UI.WebControls.GridView> control is left-aligned on the page.|  
|`HorizontalAlign.Center`|The <xref:System.Web.UI.WebControls.GridView> control is centered on the page.|  
|`HorizontalAlign.Right`|The <xref:System.Web.UI.WebControls.GridView> control is right-aligned on the page.|  
|`HorizontalAlign.Justify`|The <xref:System.Web.UI.WebControls.GridView> control is aligned with both the left and right margins of the page.|  
  
   
  
## Examples  
 The following example demonstrates how to use the HorizontalAlign property to align a <xref:System.Web.UI.WebControls.GridView> control on the right side of a page.  
  
 [!code-vb[GridViewHorizontalAlign#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_660_1.aspx)]
 [!code-cs[GridViewHorizontalAlign#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_660_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InitializePager">
      <MemberSignature Language="C#" Value="protected virtual void InitializePager (System.Web.UI.WebControls.GridViewRow row, int columnSpan, System.Web.UI.WebControls.PagedDataSource pagedDataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializePager(class System.Web.UI.WebControls.GridViewRow row, int32 columnSpan, class System.Web.UI.WebControls.PagedDataSource pagedDataSource) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.GridViewRow" />
        <Parameter Name="columnSpan" Type="System.Int32" />
        <Parameter Name="pagedDataSource" Type="System.Web.UI.WebControls.PagedDataSource" />
      </Parameters>
      <Docs>
        <param name="row">A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the pager row to initialize.</param>
        <param name="columnSpan">The number of columns the pager row should span.</param>
        <param name="pagedDataSource">A <see cref="T:System.Web.UI.WebControls.PagedDataSource" /> that represents the data source.</param>
        <summary>Initializes the pager row displayed when the paging feature is enabled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InitializePager method is used to initialize the pager row displayed when the paging feature is enabled.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InitializeRow">
      <MemberSignature Language="C#" Value="protected virtual void InitializeRow (System.Web.UI.WebControls.GridViewRow row, System.Web.UI.WebControls.DataControlField[] fields);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeRow(class System.Web.UI.WebControls.GridViewRow row, class System.Web.UI.WebControls.DataControlField[] fields) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.GridViewRow" />
        <Parameter Name="fields" Type="System.Web.UI.WebControls.DataControlField[]" />
      </Parameters>
      <Docs>
        <param name="row">A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the row to initialize.</param>
        <param name="fields">An array of <see cref="T:System.Web.UI.WebControls.DataControlField" /> objects that represent the column fields in the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</param>
        <summary>Initializes a row in the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InitializeRow method is used to initialize a row in the <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsBindableType">
      <MemberSignature Language="C#" Value="public virtual bool IsBindableType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsBindableType(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A &lt;xref:System.Type?displayProperty=fullName&gt; that represents the data type to test.</param>
        <summary>Determines whether the specified data type can be bound to a column in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <returns>
          <see langword="true" /> if the specified data type can be bound to a column in a <see cref="T:System.Web.UI.WebControls.GridView" /> control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsBindableType method is a helper method that is commonly used by control developers to programmatically determine whether the specified data type can be bound to a column in a <xref:System.Web.UI.WebControls.GridView> control. The following data types can be bound to a column in a <xref:System.Web.UI.WebControls.GridView> control:  
  
-   <xref:System.Boolean?displayProperty=fullName>  
  
-   <xref:System.Byte?displayProperty=fullName>  
  
-   <xref:System.Char?displayProperty=fullName>  
  
-   <xref:System.DateTime?displayProperty=fullName>  
  
-   <xref:System.Decimal?displayProperty=fullName>  
  
-   <xref:System.Double?displayProperty=fullName>  
  
-   <xref:System.Guid?displayProperty=fullName>  
  
-   <xref:System.Int16?displayProperty=fullName>  
  
-   <xref:System.Int32?displayProperty=fullName>  
  
-   <xref:System.Int64?displayProperty=fullName>  
  
-   <xref:System.SByte?displayProperty=fullName>  
  
-   <xref:System.Single?displayProperty=fullName>  
  
-   <xref:System.String?displayProperty=fullName>  
  
-   <xref:System.UInt16?displayProperty=fullName>  
  
-   <xref:System.UInt32?displayProperty=fullName>  
  
-   <xref:System.UInt64?displayProperty=fullName>  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An &lt;xref:System.Object?displayProperty=fullName&gt; that contains the saved control state values for the control.</param>
        <summary>Loads the state of the properties in the <see cref="T:System.Web.UI.WebControls.GridView" /> control that need to be persisted, even when the &lt;xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=fullName&gt; property is set to <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to load the state of the properties in the <xref:System.Web.UI.WebControls.GridView> control that need to be persisted, even when the <xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=fullName> property is set to `false`.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An &lt;xref:System.Object?displayProperty=fullName&gt; that contains the saved view state values for the control.</param>
        <summary>Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code. However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">The source of the event.</param>
        <param name="e">An &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains event data.</param>
        <summary>Determines whether the event for the Web server control is passed up the page's user interface (UI) server control hierarchy.</summary>
        <returns>
          <see langword="true" /> if the event has been canceled; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnBubbleEvent method implements the <xref:System.Web.UI.Control.OnBubbleEvent%2A?displayProperty=fullName> method to pass events from child controls to the page hierarchy.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataPropertyChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataPropertyChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rebinds the <see cref="T:System.Web.UI.WebControls.GridView" /> control to its data after the &lt;xref:System.Web.UI.WebControls.DataBoundControl.DataMember%2A&gt;, &lt;xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A&gt;, or &lt;xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A&gt; property is changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnDataPropertyChanged method is a helper method used by the <xref:System.Web.UI.WebControls.GridView> control to rebind the control to its data after the <xref:System.Web.UI.WebControls.DataBoundControl.DataMember%2A>, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A>, or <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property is changed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceViewChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataSourceViewChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataSourceViewChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">The source of the event.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.DataSourceView.DataSourceViewChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnDataSourceViewChanged method notifies a <xref:System.Web.UI.WebControls.GridView> control that the underlying data source has changed and that the control should rebind. Typically, the OnDataSourceViewChanged method is called when a property of the data source view has changed.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnDataSourceViewChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When notified by this method, Web server controls must perform any initialization steps that are required to create and set up an instance. In this stage of the server control's life cycle, the control's View state has yet to be populated. Additionally, you cannot access other server controls when this method is called, regardless of whether it is a child or parent to this control. Other server controls are not guaranteed to be created and ready for access.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnInit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPageIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPageIndexChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.PageIndexChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.PageIndexChanged> event is raised when one of the pager buttons is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control handles the paging operation. This enables you to provide an event-handling method that performs a custom routine, such as a custom paging operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnPageIndexChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPageIndexChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanging (System.Web.UI.WebControls.GridViewPageEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPageIndexChanging(class System.Web.UI.WebControls.GridViewPageEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewPageEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewPageEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.PageIndexChanging" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.PageIndexChanging> event is raised when one of the pager buttons is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control handles the paging operation. This enables you to provide an event-handling method that performs a custom routine, such as canceling the paging operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnPageIndexChanging method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.PageIndexChanging" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPagePreLoad">
      <MemberSignature Language="C#" Value="protected override void OnPagePreLoad (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPagePreLoad(object sender, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">The source of the event.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Sets the initialized state of the data-bound control before the control is loaded.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method notifies the server control to perform any necessary pre-rendering steps prior to saving view state and rendering content.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnPreRender method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowCancelingEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnRowCancelingEdit (System.Web.UI.WebControls.GridViewCancelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowCancelingEdit(class System.Web.UI.WebControls.GridViewCancelEditEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewCancelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewCancelEditEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCancelingEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.RowCancelingEdit> event is raised when the Cancel button of a row in edit mode is clicked, but before the row exits edit mode. This enables you to provide an event-handling method that performs a custom routine, such as stopping the cancel operation if it would put the row in an undesired state, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowCancelingEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.RowCancelingEdit" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnRowCommand (System.Web.UI.WebControls.GridViewCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowCommand(class System.Web.UI.WebControls.GridViewCommandEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewCommandEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCommand" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.RowCommand> event is raised when a button is clicked in the <xref:System.Web.UI.WebControls.GridView> control. This enables you to provide an event-handling method that performs a custom routine whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=191882).  
  
 The following example demonstrates how provide an event-handling method for the <xref:System.Web.UI.WebControls.GridView.RowCommand> event. When the Add button is clicked for a given row of the <xref:System.Web.UI.WebControls.GridView> control, the name of the selected customer is added to a <xref:System.Web.UI.WebControls.ListBox> control.  
  
 [!code-cs[GridViewRowCommmand#1](~/add/codesnippet/csharp/10c8d2a8-eb40-462e-a63f-_1.aspx)]
 [!code-vb[GridViewRowCommmand#1](~/add/codesnippet/visualbasic/10c8d2a8-eb40-462e-a63f-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowCreated (System.Web.UI.WebControls.GridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowCreated(class System.Web.UI.WebControls.GridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCreated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.GridView> control can be rendered, a <xref:System.Web.UI.WebControls.GridViewRow> object must be created for each row in the control. The <xref:System.Web.UI.WebControls.GridView.RowCreated> event is raised when each row in the <xref:System.Web.UI.WebControls.GridView> control is created. This enables you to provide an event-handling method that performs a custom routine, such as adding custom content to a row, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following example demonstrates how provide an event-handling method for the <xref:System.Web.UI.WebControls.GridView.RowCreated> event. When a row is being created, its index is stored in the <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> property of a <xref:System.Web.UI.WebControls.LinkButton> control that is contained in the new row. This enables you to determine the index of the row when the user clicks the command button.  
  
 [!code-vb[GridViewRowCreated#1](~/add/codesnippet/visualbasic/a62170ef-53b8-4054-ad66-_1.aspx)]
 [!code-cs[GridViewRowCreated#1](~/add/codesnippet/csharp/a62170ef-53b8-4054-ad66-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowDataBound">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDataBound (System.Web.UI.WebControls.GridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDataBound(class System.Web.UI.WebControls.GridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowDataBound" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.GridView> control can be rendered, each row in the control must be bound to a record in the data source. The <xref:System.Web.UI.WebControls.GridView.RowDataBound> event is raised when a data row (represented by a <xref:System.Web.UI.WebControls.GridViewRow> object) is bound to data in the <xref:System.Web.UI.WebControls.GridView> control. This enables you to provide an event-handling method that performs a custom routine, such as modifying the values of the data bound to the row, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowDataBound method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=191882).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDeleted (System.Web.UI.WebControls.GridViewDeletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDeleted(class System.Web.UI.WebControls.GridViewDeletedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewDeletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewDeletedEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowDeleted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.RowDeleted> event is raised when a row's Delete button is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control deletes the row. This enables you to provide an event-handling method that performs a custom routine, such as checking the results of the delete operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowDeleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDeleting (System.Web.UI.WebControls.GridViewDeleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDeleting(class System.Web.UI.WebControls.GridViewDeleteEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewDeleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewDeleteEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowDeleting" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.RowDeleting> event is raised when a row's Delete button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control deletes the row. This enables you to provide an event-handling method that performs a custom routine, such as canceling the delete operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowDeleting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.RowDeleting" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowEditing">
      <MemberSignature Language="C#" Value="protected virtual void OnRowEditing (System.Web.UI.WebControls.GridViewEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowEditing(class System.Web.UI.WebControls.GridViewEditEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewEditEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowEditing" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.RowEditing> event is raised when a row's Edit button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control enters edit mode. This enables you to provide an event-handling method that performs a custom routine, such as canceling the edit operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowEditing method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.RowEditing" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Web.UI.WebControls.GridViewUpdatedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Web.UI.WebControls.GridViewUpdatedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewUpdatedEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowUpdated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.RowUpdated> event is raised when a row's Update button is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control updates the row. This enables you to provide an event-handling method that performs a custom routine, such as checking the results of the update operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowUpdated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Web.UI.WebControls.GridViewUpdateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Web.UI.WebControls.GridViewUpdateEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewUpdateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewUpdateEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowUpdating" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.RowUpdating> event is raised when a row's Update button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control updates the row. This enables you to provide an event-handling method that performs a custom routine, such as canceling the update operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowUpdating method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.RowUpdating" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.SelectedIndexChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged> event is raised when a row's Select button is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control handles the select operation. This enables you to provide an event-handling method that performs a custom routine, such as updating a status label with the currently selected row, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSelectedIndexChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following example shows how create an event handler for the <xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged> event. In this example, the selected row is persisted in the view state. So even after a sorting or a paging operation, only that row will be selected.  
  
 [!code-vb[System.Web.UI.WebControls.GridView.OnSelectedIndexChanged#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_77_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.GridView.OnSelectedIndexChanged#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_77_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanging (System.Web.UI.WebControls.GridViewSelectEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanging(class System.Web.UI.WebControls.GridViewSelectEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewSelectEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewSelectEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.SelectedIndexChanging" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.SelectedIndexChanging> event is raised when a row's Select button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control handles the select operation. This enables you to provide an event-handling method that performs a custom routine, such as canceling the selection operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSelectedIndexChanging method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSorted">
      <MemberSignature Language="C#" Value="protected virtual void OnSorted (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSorted(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.Sorted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.Sorted> event is raised when the hyperlink to sort a column is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control handles the sort operation. This enables you to provide an event-handling method that performs a custom routine, such as custom sorting, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSorted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSorting">
      <MemberSignature Language="C#" Value="protected virtual void OnSorting (System.Web.UI.WebControls.GridViewSortEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSorting(class System.Web.UI.WebControls.GridViewSortEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.GridViewSortEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewSortEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.GridView.Sorting" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView.Sorting> event is raised when the hyperlink to sort a column is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control handles the sort operation. This enables you to provide an event-handling method that performs a custom routine, such as canceling the sorting operation, whenever this event occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSorting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">There is no handler for the <see cref="E:System.Web.UI.WebControls.GridView.Sorting" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageCount">
      <MemberSignature Language="C#" Value="public virtual int PageCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of pages required to display the records of the data source in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>The number of pages in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the paging feature is enabled (by setting the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property to `true`), use the PageCount property to determine the total number of pages required to display the records in the data source. This value is calculated by dividing the total number of records in the data source by the number of records displayed in a page (as specified by the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property) and rounding up.  
  
   
  
## Examples  
 The following example demonstrates how to use the PageCount property to determine the total number of pages displayed in the <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewPagerTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_202_1.aspx)]
 [!code-cs[GridViewPagerTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_202_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageIndex">
      <MemberSignature Language="C#" Value="public virtual int PageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the currently displayed page.</summary>
        <value>The zero-based index of the currently displayed page.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the paging feature is enabled (by setting the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property to `true`), use the PageIndex property to determine the index of the currently displayed page. You can also use this property to programmatically change the displayed page.  
  
   
  
## Examples  
 The following example demonstrates how to use the PageIndex property to determine the index of the currently displayed page in the <xref:System.Web.UI.WebControls.GridView> control. The example also shows how the PageIndex property can be used to specify which page is displayed after the user selects a value from the pager row.  
  
 [!code-vb[GridViewPagerTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_849_1.aspx)]
 [!code-cs[GridViewPagerTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_849_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The PageIndex property is set to a value less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PageIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PageIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when one of the pager buttons is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the paging operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PageIndexChanged event is raised when one of the pager buttons is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control handles the paging operation. This enables you to provide an event-handling method that performs a custom routine, such as a custom paging operation, whenever this event occurs.  
  
 To determine the index of the page selected by the user, use the <xref:System.Web.UI.WebControls.GridView.PageIndex%2A> property of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the PageIndexChanged event to display the page number selected by the user from the pager row.  
  
 [!code-vb[GridViewPageIndexChanged#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_26_1.aspx)]
 [!code-cs[GridViewPageIndexChanged#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_26_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageIndexChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewPageEventHandler PageIndexChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewPageEventHandler PageIndexChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewPageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when one of the pager buttons is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the paging operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PageIndexChanging event is raised when one of the pager buttons is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control handles the paging operation. This enables you to provide an event-handling method that performs a custom routine, such as canceling the paging operation, whenever this event occurs.  
  
> [!NOTE]
>  This event is not raised when you programmatically set the <xref:System.Web.UI.WebControls.GridView.PageIndex%2A> property.  
  
 A <xref:System.Web.UI.WebControls.GridViewPageEventArgs> object is passed to the event-handling method, which enables you to determine the index of the page selected by the user and to indicate that the paging operation should be canceled. To cancel the paging operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.GridViewPageEventArgs> object to `true`.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the PageIndexChanging event to cancel the paging operation if the user attempts to navigate to another page when a <xref:System.Web.UI.WebControls.GridView> control is in edit mode.  
  
 [!code-cs[GridViewPageIndexChanging#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_115_1.aspx)]
 [!code-vb[GridViewPageIndexChanging#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_115_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PagerSettings">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.PagerSettings PagerSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.PagerSettings PagerSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.PagerSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.PagerSettings" /> object that enables you to set the properties of the pager buttons in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A reference to the <see cref="T:System.Web.UI.WebControls.PagerSettings" /> that enables you to set the properties of the pager buttons in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the PagerSettings property to control the settings of the pager row in a <xref:System.Web.UI.WebControls.GridView> control. The pager row is displayed when the paging feature is enabled (by setting the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property to `true`) and contains the controls that allow the user to navigate to the different pages in the control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.PagerSettings> object it returns. The properties can be set declaratively using one of the following methods:  
  
-   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.GridView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.PagerSettings> object (for example, `PagerSettings-Mode`).  
  
-   Nest a `<PagerSettings>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The properties can also be set programmatically in the form `Property.Subproperty` (for example, `PagerStyle.Mode`). Common settings usually include the pager row's display mode and custom text or images for the navigation controls.  
  
   
  
## Examples  
 The following example demonstrates how to set the PagerSettings property declaratively. It sets the font and background for the pager row to blue and light blue, respectively.  
  
 [!code-vb[GridViewAllowPaging#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1275_1.aspx)]
 [!code-cs[GridViewAllowPaging#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1275_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PagerStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle PagerStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle PagerStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the PagerStyle property to control the appearance of the pager row in a <xref:System.Web.UI.WebControls.GridView> control. The pager row is displayed when the paging feature is enabled (by setting the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property to `true`) and contains the controls that allow the user to navigate to the different pages in the control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:  
  
-   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.GridView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `PagerStyle-ForeColor`).  
  
-   Nest a `<PagerStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The properties can also be set programmatically in the form `Property.Subproperty` (for example, `PagerStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties.  
  
   
  
## Examples  
 The following example demonstrates how to set the PagerStyle property declaratively. It sets the font and background for the pager row to blue and light blue, respectively.  
  
 [!code-vb[GridViewAllowPaging#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_389_1.aspx)]
 [!code-cs[GridViewAllowPaging#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_389_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PagerTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate PagerTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate PagerTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.GridViewRow))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom content for the pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> that contains the custom content for the pager row. The default value is null, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A pager row is displayed in a <xref:System.Web.UI.WebControls.GridView> control when the paging feature is enabled (when the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property is set to true). The pager row contains the controls that allow the user to navigate to the different pages in the control. Instead of using the built-in pager row user interface (UI), you can define your own UI by using the PagerTemplate property.  
  
> [!NOTE]
>  When the PagerTemplate property is set, it overrides the built-in pager row UI.  
  
 To specify a custom template for the pager row, first place `<PagerTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control. You can then list the contents of the template between the opening and closing `<PagerTemplate>` tags. To control the appearance of the pager row, use the <xref:System.Web.UI.WebControls.GridView.PagerStyle%2A> property.  
  
 Typically, button controls are added to the pager template to perform the paging operations. The <xref:System.Web.UI.WebControls.GridView> control performs a paging operation when a button control with its `CommandName` property set to "Page" is clicked. The button's `CommandArgument` property determines the type of paging operation to perform. The following table lists the command argument values supported by the <xref:System.Web.UI.WebControls.GridView> control.  
  
|`CommandArgument` value|Description|  
|-----------------------------|-----------------|  
|"Next"|Navigates to the next page.|  
|"Prev"|Navigates to the previous page.|  
|"First"|Navigates to the first page.|  
|"Last"|Navigates to the last page.|  
|Integer value|Navigates to the specified page number.|  
  
   
  
## Examples  
 The following example demonstrates how to create a custom pager template that allows the user to navigate through a <xref:System.Web.UI.WebControls.GridView> control using a <xref:System.Web.UI.WebControls.DropDownList> control.  
  
 [!code-vb[GridViewPagerTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1266_1.aspx)]
 [!code-cs[GridViewPagerTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1266_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageSize">
      <MemberSignature Language="C#" Value="public virtual int PageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of records to display on a page in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>The number of records to display on a single page. The default is 10.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the paging feature is enabled (by setting the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property to `true`), use the PageSize property to specify the number of records to display on a single page.  
  
   
  
## Examples  
 The following example demonstrates how to use the PageSize property to display 15 records at a time in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewPageSize#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1100_1.aspx)]
 [!code-cs[GridViewPageSize#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1100_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The PageSize property is set to a value less than 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PerformDataBinding">
      <MemberSignature Language="C#" Value="protected override void PerformDataBinding (System.Collections.IEnumerable data);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void PerformDataBinding(class System.Collections.IEnumerable data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="data">An &lt;xref:System.Collections.IEnumerable&gt; that contains the data source.</param>
        <summary>Binds the specified data source to the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PerformDataBinding method is a helper method called by the <xref:System.Web.UI.WebControls.GridView> control to bind the specified data source to the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrepareControlHierarchy">
      <MemberSignature Language="C#" Value="protected virtual void PrepareControlHierarchy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void PrepareControlHierarchy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establishes the control hierarchy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to establish the control hierarchy for the <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The argument to pass to the event handler.</param>
        <summary>Creates the arguments for the callback handler in the &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RaiseCallbackEvent method is a helper method used by the <xref:System.Web.UI.WebControls.GridView> control to create the arguments for the callback handler in the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The event argument from which to create a <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> for the event or events that are raised.</param>
        <summary>Raises the appropriate events for the <see cref="T:System.Web.UI.WebControls.GridView" /> control when it posts back to the server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The page calls the <xref:System.Web.UI.Page.RaisePostBackEvent%2A> method when a postback event occurs that raises the appropriate events for a <xref:System.Web.UI.WebControls.GridView> control. This call occurs in the page life cycle after loading and change notification are complete, but before prerendering occurs. This method has been implemented to create a <xref:System.Web.UI.WebControls.CommandEventArgs> object for the events that are raised.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> used to render the server control content on the client's browser.</param>
        <summary>Renders the Web server control content to the client's browser using the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Render method is used to render the server control content to the client's browser using the specified <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> object.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowCancelingEdit">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewCancelEditEventHandler RowCancelingEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewCancelEditEventHandler RowCancelingEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewCancelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the Cancel button of a row in edit mode is clicked, but before the row exits edit mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowCancelingEdit event is raised when the Cancel button of a row in edit mode is clicked, but before the row exits edit mode. This enables you to provide an event-handling method that performs a custom routine, such as stopping the cancel operation if it would put the row in an undesired state, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.GridViewCancelEditEventArgs> object is passed to the event-handling method, which enables you to determine the index of the current row and to indicate that the cancel operation should be stopped. To stop the cancel operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.GridViewCancelEditEventArgs> object to `true`.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the RowCancelingEdit event to display a cancellation message when the user cancels the update operation of a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewRowCancellingEdit#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_3_1.aspx)]
 [!code-vb[GridViewRowCancellingEdit#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_3_1.aspx)]  
  
 The following example demonstrates how to use the RowCancelingEdit event to cancel the update operation when the data source is set programmatically.  
  
 [!code-cs[GridViewRowEditing#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_3_2.aspx)]
 [!code-vb[GridViewRowEditing#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_3_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewCommandEventHandler RowCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewCommandEventHandler RowCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a button is clicked in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowCommand event is raised when a button is clicked in the <xref:System.Web.UI.WebControls.GridView> control. This enables you to provide an event-handling method that performs a custom routine whenever this event occurs.  
  
 Buttons within a <xref:System.Web.UI.WebControls.GridView> control can also invoke some of the built-in functionality of the control. To perform one of these operations, set the `CommandName` property of a button to one of the values in the following table.  
  
|`CommandName` value|Description|  
|-------------------------|-----------------|  
|"Cancel"|Cancels an edit operation and returns the <xref:System.Web.UI.WebControls.GridView> control to read-only mode. Raises the <xref:System.Web.UI.WebControls.GridView.RowCancelingEdit> event.|  
|"Delete"|Deletes the current record. Raises the <xref:System.Web.UI.WebControls.GridView.RowDeleting> and <xref:System.Web.UI.WebControls.GridView.RowDeleted> events.|  
|"Edit"|Puts the current record in edit mode. Raises the <xref:System.Web.UI.WebControls.GridView.RowEditing> event.|  
|"Page"|Performs a paging operation. Sets the `CommandArgument` property of the button to "First", "Last", "Next", "Prev", or a page number to specify the type of paging operation to perform. Raises the <xref:System.Web.UI.WebControls.GridView.PageIndexChanging> and <xref:System.Web.UI.WebControls.GridView.PageIndexChanged> events.|  
|"Select"|Selects the current record. Raises the <xref:System.Web.UI.WebControls.GridView.SelectedIndexChanging> and <xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged> events.|  
|"Sort"|Sorts the <xref:System.Web.UI.WebControls.GridView> control. Raises the <xref:System.Web.UI.WebControls.GridView.Sorting> and <xref:System.Web.UI.WebControls.GridView.Sorted> events.|  
|"Update"|Updates the current record in the data source. Raises the <xref:System.Web.UI.WebControls.GridView.RowUpdating> and <xref:System.Web.UI.WebControls.GridView.RowUpdated> events.|  
  
 Although the RowCommand event is raised when a button listed in the previous table is clicked, it is recommended that you use the events listed in the table for the operation.  
  
 A <xref:System.Web.UI.WebControls.GridViewCommandEventArgs> object is passed to the event-handling method, which enables you to determine the command name and command argument of the button clicked.  
  
> [!NOTE]
>  To determine the index of the row that raised the event, use the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> property of the event argument that is passed to the event. The <xref:System.Web.UI.WebControls.ButtonField> class automatically populates the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> property with the appropriate index value. For other command buttons, you must manually set the <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> property of the command button. For example, you can set the <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> to `<%# Container.DataItemIndex %>` when the <xref:System.Web.UI.WebControls.GridView> control has no paging enabled.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=191882).  
  
 The following example demonstrates how to use the RowCommand event to add the name of a customer from a <xref:System.Web.UI.WebControls.GridView> control to a <xref:System.Web.UI.WebControls.ListBox> control when a row's Add button is clicked.  
  
 [!code-cs[GridViewRowCommmand#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_121_1.aspx)]
 [!code-vb[GridViewRowCommmand#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_121_1.aspx)]  
  
 The following example demonstrates how to use the RowCommand event to update the price of a product when a row's button is clicked. This example has the paging functionality enabled for the <xref:System.Web.UI.WebControls.GridView> control and sets the <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> property of the <xref:System.Web.UI.WebControls.Button> control to the appropriate row index.  
  
 [!code-cs[GridViewRowCommmand#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_121_2.aspx)]
 [!code-vb[GridViewRowCommmand#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_121_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewRowEventHandler RowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewRowEventHandler RowCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row is created in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.GridView> control can be rendered, a <xref:System.Web.UI.WebControls.GridViewRow> object must be created for each row in the control. The RowCreated event is raised when each row in the <xref:System.Web.UI.WebControls.GridView> control is created. This enables you to provide an event-handling method that performs a custom routine, such as adding custom content to a row, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.GridViewRowEventArgs> object is passed to the event-handling method, which enables you to access the properties of the row being created. To access a specific cell in the row, use the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.GridViewRowEventArgs> object. You can determine which row type (header row, data row, and so on) is being created by using the <xref:System.Web.UI.WebControls.GridViewRow.RowType%2A> property.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the RowCreated event to store the index of the row being created in the <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> property of a <xref:System.Web.UI.WebControls.LinkButton> control contained in the row. This enables you to determine the index of the row that contains the <xref:System.Web.UI.WebControls.LinkButton> control when the user clicked the button.  
  
 [!code-vb[GridViewRowCreated#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_98_1.aspx)]
 [!code-cs[GridViewRowCreated#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_98_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDataBound">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewRowEventHandler RowDataBound;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewRowEventHandler RowDataBound" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a data row is bound to data in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the <xref:System.Web.UI.WebControls.GridView> control can be rendered, each row in the control must be bound to a record in the data source. The RowDataBound event is raised when a data row (represented by a <xref:System.Web.UI.WebControls.GridViewRow> object) is bound to data in the <xref:System.Web.UI.WebControls.GridView> control. This enables you to provide an event-handling method that performs a custom routine, such as modifying the values of the data bound to the row, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.GridViewRowEventArgs> object is passed to the event-handling method, which enables you to access the properties of the row being bound. To access a specific cell in the row, use the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.GridViewRow> object contained in the <xref:System.Web.UI.WebControls.GridViewRowEventArgs.Row%2A> property of the <xref:System.Web.UI.WebControls.GridViewRowEventArgs> object. You can determine which row type (header row, data row, and so on) is being bound by using the <xref:System.Web.UI.WebControls.GridViewRow.RowType%2A> property.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=191882).  
  
 The following example demonstrates how to use the RowDataBound event to modify the value of a field in the data source before it is displayed in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewRowDataBound#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_141_1.aspx)]
 [!code-vb[GridViewRowDataBound#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_141_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDeleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewDeletedEventHandler RowDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewDeletedEventHandler RowDeleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewDeletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's Delete button is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control deletes the row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowDeleted event is raised when a row's Delete button is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control deletes the row. This enables you to provide an event-handling method that performs a custom routine, such as checking the results of the delete operation, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.GridViewDeletedEventArgs> object is passed to the event-handling method, which enables you to determine the number of rows affected and any exceptions that might have occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.GridViewDeletedEventArgs.ExceptionHandled%2A> property of the <xref:System.Web.UI.WebControls.GridViewDeletedEventArgs> object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the RowDeleted event to check the result of the delete operation. A message is displayed to indicate to the user whether the operation succeeded.  
  
 [!code-cs[GridViewRowDeleted#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_152_1.aspx)]
 [!code-vb[GridViewRowDeleted#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_152_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDeleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewDeleteEventHandler RowDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewDeleteEventHandler RowDeleting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewDeleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's Delete button is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control deletes the row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowDeleting event is raised when a row's Delete button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control deletes the row. This enables you to provide an event-handling method that performs a custom routine, such as canceling the delete operation, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.GridViewDeleteEventArgs> object is passed to the event-handling method, which enables you to determine the index of the current row and to indicate that the delete operation should be canceled. To cancel the delete operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.GridViewDeleteEventArgs> object to `true`. You can also manipulate the <xref:System.Web.UI.WebControls.GridViewDeleteEventArgs.Keys%2A> and <xref:System.Web.UI.WebControls.GridViewDeleteEventArgs.Values%2A> collections, if necessary, before the values are passed to the data source.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the RowDeleting event to cancel the delete operation. The page contains a <xref:System.Web.UI.WebControls.GridView> control that displays a list of customer names and addresses from the AdventureWorksLT database. When the user clicks the **Delete** link for a row, the handler for the RowDeleting event checks the last name of the person displayed in the row that the user is trying to delete. If the last name is "Beaver", the delete operation is canceled, and an error message is displayed. For any other name, the delete operation proceeds and the row is deleted.  
  
 The event handler uses the <xref:System.Web.UI.WebControls.GridViewDeleteEventArgs.RowIndex%2A> property of the <xref:System.Web.UI.WebControls.GridViewDeleteEventArgs> object to find the row that the user is trying to delete. The example examines the contents of the <xref:System.Web.UI.WebControls.GridView.Rows%2A> collection. If the value you want to compare to is a key value, you could examine the <xref:System.Web.UI.WebControls.GridView.DataKeys%2A> collection instead.  
  
 Rows are deleted from the CustomerAddress table instead of the Customer table in order to keep the example simple. The <xref:System.Web.UI.WebControls.GridView> control shows the result of joining three tables: Customer, Address, and CustomerAddress. When a CustomerAddress row is deleted, the corresponding <xref:System.Web.UI.WebControls.GridView> row disappears. Referential integrity constraints would make the code for an example that actually deletes rows from the Customer table more complex.  
  
 For information about how to set up the AdventureWorksLT database, see [How to: Set Up an AdventureWorksLT Sample Database for ASP.NET Development](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[GridViewRowDeleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_24_1.aspx)]
 [!code-cs[GridViewRowDeleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_24_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowEditing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewEditEventHandler RowEditing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewEditEventHandler RowEditing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's Edit button is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control enters edit mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowEditing event is raised when a row's Edit button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control enters edit mode. This enables you to provide an event-handling method that performs a custom routine, such as canceling the edit operation, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.GridViewEditEventArgs> object is passed to the event-handling method, which enables you to determine the index of the current row and to indicate that the edit operation should be canceled. To cancel the edit operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.GridViewEditEventArgs> object to `true`.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the RowEditing event to put a row in edit mode when the data source is set programmatically.  
  
 [!code-cs[GridViewRowEditing#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_133_1.aspx)]
 [!code-vb[GridViewRowEditing#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_133_1.aspx)]  
  
 The following example demonstrates how to use the RowEditing event to cancel the editing operation if the user attempts to edit the record for a company in the United States.  
  
 [!code-vb[GridViewRowEditing#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_133_2.aspx)]
 [!code-cs[GridViewRowEditing#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_133_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderColumn">
      <MemberSignature Language="C#" Value="public virtual string RowHeaderColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RowHeaderColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.DataColumnSelectionConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the column to use as the column header for the <see cref="T:System.Web.UI.WebControls.GridView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
        <value>The name of the column to use as the column header. The default is an empty string (""), which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In HTML, the header of a table can be associated with either a row or a column. The direction is specified by setting the `scope` attribute of the `<th>` elements. The <xref:System.Web.UI.WebControls.GridView> control has a built-in header row that can be displayed by setting the <xref:System.Web.UI.WebControls.GridView.ShowHeader%2A> property to `true`. You can also optionally specify a header column (usually the first or last column in the <xref:System.Web.UI.WebControls.GridView> control) by setting this property. When this property is set, all cells in the column that corresponds to the specified field name are rendered as `<th scope="row">` elements.  
  
> [!NOTE]
>  Although the specified column is treated like a header, the <xref:System.Web.UI.WebControls.GridView.HeaderStyle%2A>, <xref:System.Web.UI.WebControls.GridView.ShowHeader%2A>, and <xref:System.Web.UI.WebControls.GridView.UseAccessibleHeader%2A> properties do not apply to the header column.  
  
 The default rendering of the `<th>` element is preserved, rendering text as bold and centered horizontally. Developers can override the behavior of the `<th>` element using a cascading style sheet.  
  
> [!NOTE]
>  This property works only with bound fields. It does not work with template fields.  
  
   
  
## Examples  
 The following example demonstrates how to use the RowHeaderColumn property to display a header column in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewRowHeaderColumn#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_213_1.aspx)]
 [!code-cs[GridViewRowHeaderColumn#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_213_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridViewRowCollection Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.GridViewRowCollection Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.GridViewRow" /> objects that represent the data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" /> that contains all the data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Rows property (collection) is used to store the data rows in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> control automatically populates the Rows collection by creating a <xref:System.Web.UI.WebControls.GridViewRow> object for each record in the data source and then adding each object to the collection. This property is commonly used to access a specific row in the control or to iterate though the entire collection of rows.  
  
> [!NOTE]
>  Only rows with their <xref:System.Web.UI.WebControls.GridViewRow.RowType%2A> property set to `DataControlRowType.DataRow` are stored in the Rows collection. The <xref:System.Web.UI.WebControls.GridViewRow> objects that represent the header, footer, and pager rows are not included in the collection.  
  
   
  
## Examples  
 The following example demonstrates how to use the Rows collection to access the row being edited in a <xref:System.Web.UI.WebControls.GridView> control. After a row is updated, a message is displayed to indicate that the update was successful.  
  
 [!code-cs[GridViewRows#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_233_1.aspx)]
 [!code-vb[GridViewRows#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_233_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle RowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle RowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the data rows in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RowStyle property to control the appearance of the data rows in a <xref:System.Web.UI.WebControls.GridView> control. When the <xref:System.Web.UI.WebControls.GridView.AlternatingRowStyle%2A> property is also set, the data rows are displayed alternating between the RowStyle settings and the <xref:System.Web.UI.WebControls.GridView.AlternatingRowStyle%2A> settings. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:  
  
-   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.GridView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `RowStyle-ForeColor`).  
  
-   Nest a `<RowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The properties can also be set programmatically in the form `Property.Subproperty` (for example, `RowStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties.  
  
   
  
## Examples  
 The following example demonstrates how to use the RowStyle property to declaratively define the style for the item rows in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewRowStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_996_1.aspx)]
 [!code-cs[GridViewRowStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_996_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowUpdated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewUpdatedEventHandler RowUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewUpdatedEventHandler RowUpdated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewUpdatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's Update button is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control updates the row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowUpdated event is raised when a row's Update button is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control updates the row. This enables you to provide an event-handling method that performs a custom routine, such as checking the results of the update operation, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.GridViewUpdatedEventArgs> object is passed to the event-handling method, which enables you to determine the number of rows affected and any exceptions that might have occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.GridViewUpdatedEventArgs.ExceptionHandled%2A> property of the <xref:System.Web.UI.WebControls.GridViewUpdatedEventArgs> object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the RowUpdated event to check the result of the update operation. A message is displayed to indicate to the user whether the operation succeeded.  
  
 [!code-vb[GridViewRowUpdated#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_146_1.aspx)]
 [!code-cs[GridViewRowUpdated#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_146_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowUpdating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewUpdateEventHandler RowUpdating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewUpdateEventHandler RowUpdating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewUpdateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's Update button is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control updates the row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowUpdating event is raised when a row's Update button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control updates the row. This enables you to provide an event-handling method that performs a custom routine, such as canceling the update operation, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.GridViewUpdateEventArgs> object is passed to the event-handling method, which enables you to determine the index of the current row and to indicate that the update operation should be canceled. To cancel the update operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.GridViewUpdateEventArgs> object to `true`. You can also manipulate the <xref:System.Web.UI.WebControls.GridViewUpdateEventArgs.Keys%2A>, <xref:System.Web.UI.WebControls.GridViewUpdateEventArgs.OldValues%2A>, and <xref:System.Web.UI.WebControls.GridViewUpdateEventArgs.NewValues%2A> collections, if necessary, before the values are passed to the data source. A common way to use these collections is to HTML-encode the values supplied by the user before they are stored in the data source. This helps to prevent script injection attacks.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.GridViewUpdateEventArgs.Keys%2A>, <xref:System.Web.UI.WebControls.GridViewUpdateEventArgs.OldValues%2A> and <xref:System.Web.UI.WebControls.GridViewUpdateEventArgs.NewValues%2A> collections are automatically populated only when the <xref:System.Web.UI.WebControls.GridView> control is bound to data by using the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A> property.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the RowUpdating event to update the values in the data source object when the data source is set programmatically.  
  
 [!code-cs[GridViewRowEditing#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_52_1.aspx)]
 [!code-vb[GridViewRowEditing#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_52_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the state of the properties in the <see cref="T:System.Web.UI.WebControls.GridView" /> control that need to be persisted, even when the &lt;xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=fullName&gt; property is set to <see langword="false" />.</summary>
        <returns>Returns the server control's current view state. If there is no view state associated with the control, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to save the state of the properties in the <xref:System.Web.UI.WebControls.GridView> control that need to be persisted, even when the <xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=fullName> property is set to `false`.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <returns>A &lt;xref:System.Object?displayProperty=fullName&gt; that contains the saved view state values for the control.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedDataKey">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKey SelectedDataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey SelectedDataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.UI.WebControls.DataKey" /> object that contains the data key value for the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>The <see cref="T:System.Web.UI.WebControls.DataKey" /> for the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default is <see langword="null" />, which indicates that no row is currently selected.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property is set, the <xref:System.Web.UI.WebControls.GridView> control automatically creates a <xref:System.Web.UI.WebControls.DataKey> object for each row in the control using the value or values of the specified field or fields. The <xref:System.Web.UI.WebControls.DataKey> objects are then added to the control's <xref:System.Web.UI.WebControls.GridView.DataKeys%2A> collection. Normally, the <xref:System.Web.UI.WebControls.GridView.DataKeys%2A> property is used to retrieve the <xref:System.Web.UI.WebControls.DataKey> object for a specific data row in the <xref:System.Web.UI.WebControls.GridView> control. However, if you just need to retrieve the <xref:System.Web.UI.WebControls.DataKey> object of the currently selected row, you can simply use the SelectedDataKey property as a shortcut.  
  
> [!NOTE]
>  This is the same as retrieving the <xref:System.Web.UI.WebControls.DataKey> object at the index specified by the <xref:System.Web.UI.WebControls.GridView.SelectedIndex%2A> property from the <xref:System.Web.UI.WebControls.GridView.DataKeys%2A> collection. You can also use the <xref:System.Web.UI.WebControls.GridView.SelectedValue%2A> property to retrieve the data key value for the currently selected row directly.  
  
 If you are creating a <xref:System.Web.UI.WebControls.ControlParameter> object and want to access a key field other than the first field, use the indexed SelectedDataKey property in the <xref:System.Web.UI.WebControls.ControlParameter.PropertyName%2A> property of the <xref:System.Web.UI.WebControls.ControlParameter> object. An example is shown below.  
  
   
  
## Examples  
 The following example demonstrates how to use the SelectedDataKey property to determine the data key value of the selected row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewSelectedDataKey#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_93_1.aspx)]
 [!code-vb[GridViewSelectedDataKey#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_93_1.aspx)]  
  
 The following example demonstrates how to use the second key field as a parameter in a master/detail scenario. A <xref:System.Web.UI.WebControls.GridView> control is used to display records from the Order Details table of the Northwind database. When a record is selected in the <xref:System.Web.UI.WebControls.GridView> control, the details of the product from the Products table are displayed in a <xref:System.Web.UI.WebControls.DetailsView> control. ProductID is the second key name in the <xref:System.Web.UI.WebControls.GridView> control. To access the second key, the value of GridView1.SelectedDataKey[1] is used as the <xref:System.Web.UI.WebControls.ControlParameter.PropertyName%2A> for the <xref:System.Web.UI.WebControls.ControlParameter> object of the <xref:System.Web.UI.WebControls.SqlDataSource> control of the <xref:System.Web.UI.WebControls.DetailsView> control.  
  
 [!code-cs[GridViewSelectedDataKeyIndex#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_93_2.aspx)]
 [!code-vb[GridViewSelectedDataKeyIndex#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_93_2.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No data keys are specified in the &lt;xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A&gt; property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public virtual int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>The zero-based index of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default is -1, which indicates that no row is currently selected.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SelectedIndex property to determine the index of the currently selected row in a <xref:System.Web.UI.WebControls.GridView> control. You can also use this property to programmatically select a row in the control. To clear the selection of a row, set this property to -1. The appearance of the currently selected row can be customized by using the <xref:System.Web.UI.WebControls.GridView.SelectedRowStyle%2A> property. To access the currently selected row, use the <xref:System.Web.UI.WebControls.GridView.SelectedRow%2A> property.  
  
   
  
## Examples  
 The following example demonstrates how to use the SelectedIndex property to select the second row in a <xref:System.Web.UI.WebControls.GridView> control when the control is initially displayed.  
  
 [!code-cs[GridViewSelect#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_806_1.aspx)]
 [!code-vb[GridViewSelect#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_806_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The SelectedIndex property is set to a value less than -1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's Select button is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the select operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectedIndexChanged event is raised when a row's Select button is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control handles the select operation. This enables you to provide an event-handling method that performs a custom routine, such as updating a status label with the currently selected row, whenever this event occurs.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the SelectedIndexChanged event to display the name of the customer in the selected row of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewSelect#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_150_1.aspx)]
 [!code-vb[GridViewSelect#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_150_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewSelectEventHandler SelectedIndexChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewSelectEventHandler SelectedIndexChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewSelectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's Select button is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the select operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectedIndexChanging event is raised when a row's Select button is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control handles the select operation. This enables you to provide an event-handling method that performs a custom routine, such as canceling the selection operation, whenever this event occurs.  
  
> [!NOTE]
>  This event is not raised when you programmatically set the <xref:System.Web.UI.WebControls.GridView.SelectedIndex%2A> property.  
  
 A <xref:System.Web.UI.WebControls.GridViewSelectEventArgs> object is passed to the event-handling method, which enables you to determine the index of the row selected by the user and to indicate that the selection operation should be canceled. To cancel the selection operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.GridViewSelectEventArgs> object to `true`.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the SelectedIndexChanging event to cancel a select operation.  
  
 [!code-cs[GridViewSelect#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_37_1.aspx)]
 [!code-vb[GridViewSelect#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_37_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedPersistedDataKey">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKey SelectedPersistedDataKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey SelectedPersistedDataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data-key value for the persisted selected item in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>The data key for the persisted selected item in a <see cref="T:System.Web.UI.WebControls.GridView" /> control. The default is <see langword="null" />, which indicates that no item is currently selected.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridViewRow SelectedRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.GridViewRow SelectedRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the selected row in the control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the selected row in the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a row is selected in a <xref:System.Web.UI.WebControls.GridView> control, use the SelectedRow property to retrieve the <xref:System.Web.UI.WebControls.GridViewRow> object that represents that row.  
  
> [!NOTE]
>  This is the same as retrieving the <xref:System.Web.UI.WebControls.GridViewRow> object at the index specified by the <xref:System.Web.UI.WebControls.GridView.SelectedIndex%2A> property from the <xref:System.Web.UI.WebControls.GridView.Rows%2A> collection.  
  
 This object can then be used to access the properties of the selected row.  
  
   
  
## Examples  
 The following example demonstrates how to use the SelectedRow property to access the properties of the <xref:System.Web.UI.WebControls.GridViewRow> object that represents the selected row in the <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewSelect#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_482_1.aspx)]
 [!code-vb[GridViewSelect#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_482_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle SelectedRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SelectedRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that enables you to set the appearance of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> that represents the style of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SelectedRowStyle property to control the appearance of the selected row in a <xref:System.Web.UI.WebControls.GridView> control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:  
  
-   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.GridView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `SelectedRowStyle-ForeColor`).  
  
-   Nest a `<SelectedRowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The properties can also be set programmatically in the form `Property.Subproperty` (for example, `SelectedRowStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties.  
  
   
  
## Examples  
 The following example demonstrates how to use the SelectedRowStyle property to define a custom style for the selected row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewSelect#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_603_1.aspx)]
 [!code-vb[GridViewSelect#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_603_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedValue">
      <MemberSignature Language="C#" Value="public object SelectedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data key value of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>The data key value of the selected row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property is set with a comma-separated list of field names that represent the primary key of the data source, the <xref:System.Web.UI.WebControls.GridView> control automatically creates a <xref:System.Web.UI.WebControls.DataKey> object for each row in the control using the value or values of the specified field or fields. The <xref:System.Web.UI.WebControls.DataKey> objects are then added to the control's <xref:System.Web.UI.WebControls.GridView.DataKeys%2A> collection. Normally, the <xref:System.Web.UI.WebControls.GridView.DataKeys%2A> property is used to retrieve the <xref:System.Web.UI.WebControls.DataKey> object for a specific data row in the <xref:System.Web.UI.WebControls.GridView> control. However, if you just need to retrieve the <xref:System.Web.UI.WebControls.DataKey> object of the currently selected row, you can simply use the <xref:System.Web.UI.WebControls.GridView.SelectedDataKey%2A> property as a shortcut. As a further shortcut, you can directly determine the data key value of the first key field of the selected row by using the SelectedValue property.  
  
 If you are creating a <xref:System.Web.UI.WebControls.ControlParameter> object and want to access a key field other than the first field, use the <xref:System.Web.UI.WebControls.GridView.SelectedDataKey%2A> property. For an example, see <xref:System.Web.UI.WebControls.GridView.SelectedDataKey%2A>.  
  
   
  
## Examples  
 The following example demonstrates how to use the SelectedValue property to determine the data key value of the selected row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewSelectedValue#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_553_1.aspx)]
 [!code-vb[GridViewSelectedValue#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_553_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectRow">
      <MemberSignature Language="C#" Value="public void SelectRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectRow(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row to edit.</param>
        <summary>Selects the row to edit in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method raises the <xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged> event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetEditRow">
      <MemberSignature Language="C#" Value="public void SetEditRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEditRow(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row to edit.</param>
        <summary>Puts a row in edit mode in a <see cref="T:System.Web.UI.WebControls.GridView" /> control by using the specified row index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method raises the <xref:System.Web.UI.WebControls.GridView.RowEditing> event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetPageIndex">
      <MemberSignature Language="C#" Value="public void SetPageIndex (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPageIndex(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row on the page to edit.</param>
        <summary>Sets the page index of the <see cref="T:System.Web.UI.WebControls.GridView" /> control by using the row index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method raises the <xref:System.Web.UI.WebControls.GridView.PageIndexChanged> event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowFooter">
      <MemberSignature Language="C#" Value="public virtual bool ShowFooter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFooter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the footer row is displayed in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>
          <see langword="true" /> to display the footer row; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ShowFooter property to specify whether a <xref:System.Web.UI.WebControls.GridView> control displays the footer row. To control the appearance of the footer row, use the <xref:System.Web.UI.WebControls.GridView.FooterStyle%2A> property.  
  
   
  
## Examples  
 The following example demonstrates how to use the ShowFooter property to display the footer row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewShowHeader#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1216_1.aspx)]
 [!code-vb[GridViewShowHeader#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1216_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowHeader">
      <MemberSignature Language="C#" Value="public virtual bool ShowHeader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the header row is displayed in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>
          <see langword="true" /> to display the header row; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ShowHeader property to specify whether a <xref:System.Web.UI.WebControls.GridView> control displays the header row. To control the appearance of the header row, use the <xref:System.Web.UI.WebControls.GridView.HeaderStyle%2A> property.  
  
   
  
## Examples  
 The following example demonstrates how to use the ShowHeader property to display the header row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[GridViewShowHeader#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_292_1.aspx)]
 [!code-vb[GridViewShowHeader#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_292_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowHeaderWhenEmpty">
      <MemberSignature Language="C#" Value="public virtual bool ShowHeaderWhenEmpty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHeaderWhenEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the heading of a column in the <see cref="T:System.Web.UI.WebControls.GridView" /> control is visible when the column has no data.</summary>
        <value>
          <see langword="true" /> if the header is visible; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (string sortExpression, System.Web.UI.WebControls.SortDirection sortDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(string sortExpression, valuetype System.Web.UI.WebControls.SortDirection sortDirection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortExpression" Type="System.String" />
        <Parameter Name="sortDirection" Type="System.Web.UI.WebControls.SortDirection" />
      </Parameters>
      <Docs>
        <param name="sortExpression">The sort expression with which to sort the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</param>
        <param name="sortDirection">One of the <see cref="T:System.Web.UI.WebControls.SortDirection" /> values.</param>
        <summary>Sorts the <see cref="T:System.Web.UI.WebControls.GridView" /> control based on the specified sort expression and direction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Sort method to programmatically sort the <xref:System.Web.UI.WebControls.GridView> control using the specified sort expression and direction. The sort expression specifies the column or columns with which to sort. To sort multiple columns, create a sort expression that contains a comma-separated list of field names. The sort direction indicates whether sorting is performed in ascending or descending order. This method is commonly used when you need to sort the <xref:System.Web.UI.WebControls.GridView> control from outside of the control, such as from a different control on the page. This method is also commonly used to programmatically set a default sort order for the <xref:System.Web.UI.WebControls.GridView> control when it is first rendered. Calling this method also raises the <xref:System.Web.UI.WebControls.GridView.Sorted> and <xref:System.Web.UI.WebControls.GridView.Sorting> events.  
  
   
  
## Examples  
 The following example demonstrates how to use the Sort method to programmatically sort the <xref:System.Web.UI.WebControls.GridView> control by multiple columns.  
  
 [!code-cs[GridViewSort#1](~/add/codesnippet/csharp/73688195-5df0-44a7-842d-_1.aspx)]
 [!code-vb[GridViewSort#1](~/add/codesnippet/visualbasic/73688195-5df0-44a7-842d-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source control, but the <see cref="T:System.Web.UI.DataSourceView" /> that is associated with the data source is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortDirection">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.SortDirection SortDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SortDirection SortDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SortDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the sort direction of the column being sorted.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.SortDirection" /> values. The default is <see langword="SortDirection.Ascending" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SortDirection property to determine whether the column being sorted is sorted in ascending or descending order.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.GridView> control has a built-in sorting feature that automatically sets this property. This property is typically used only when you need to programmatically determine the sort direction or when you are adding your own custom sorting functionality to a <xref:System.Web.UI.WebControls.GridView> control.  
  
   
  
## Examples  
 The following example demonstrates how to use the SortDirection property to programmatically determine the sort direction of a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewFooterRow#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_871_1.aspx)]
 [!code-cs[GridViewFooterRow#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_871_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public event EventHandler Sorted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Sorted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the hyperlink to sort a column is clicked, but after the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the sort operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Sorted event is raised when the hyperlink to sort a column is clicked, but after the <xref:System.Web.UI.WebControls.GridView> control handles the sort operation. This enables you to provide an event-handling method that performs a custom routine, such as custom sorting, whenever this event occurs.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the Sorted event to display the name of the column being sorted.  
  
 [!code-vb[GridViewSorting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_149_1.aspx)]
 [!code-cs[GridViewSorting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_149_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortedAscendingCellStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle SortedAscendingCellStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SortedAscendingCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the CSS style for a <see cref="T:System.Web.UI.WebControls.GridView" /> column when the column is sorted in ascending order.</summary>
        <value>
          <see langword="true" /> if a style is applied to the <see cref="T:System.Web.UI.WebControls.GridView" /> control when the column is sorted in ascending order; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to `true`, a style is applied to cells in the column when the data is sorted in ascending order. For example, the column can be highlighted with a specific color when the sort type is ascending.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortedAscendingHeaderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle SortedAscendingHeaderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SortedAscendingHeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the CSS style to apply to a <see cref="T:System.Web.UI.WebControls.GridView" /> column heading when the column is sorted in ascending order.</summary>
        <value>
          <see langword="true" /> if a style is applied to the <see cref="T:System.Web.UI.WebControls.GridView" /> heading when the column is sorted in ascending order; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to `true`, an arrow that indicates the sort direction is displayed in the column heading.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortedDescendingCellStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle SortedDescendingCellStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SortedDescendingCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style of a <see cref="T:System.Web.UI.WebControls.GridView" /> column when the column is sorted in descending order.</summary>
        <value>
          <see langword="true" /> if a style is applied to the <see cref="T:System.Web.UI.WebControls.GridView" /> when the column is sorted in descending order; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to `true`, a style is applied to cells in the column when the data is sorted in descending order. For example, the column can be highlighted with a specific color when the sort type is descending.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortedDescendingHeaderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle SortedDescendingHeaderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SortedDescendingHeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style to apply to a <see cref="T:System.Web.UI.WebControls.GridView" /> column heading when the column is sorted in descending order.</summary>
        <value>
          <see langword="true" /> if a style is applied to the <see cref="T:System.Web.UI.WebControls.GridView" /> heading when the column is sorted in descending order; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to `true`, an arrow that indicates the sort direction is displayed in the column heading.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortExpression">
      <MemberSignature Language="C#" Value="public virtual string SortExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the sort expression associated with the column or columns being sorted.</summary>
        <value>The sort expression associated with the column or columns being sorted.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SortExpression property to determine the sort expression associated with the column or columns being sorted.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.GridView> control has a built-in sorting feature that automatically sets this property. This property is typically used only when you need to programmatically determine the column or columns being sorted or when you are adding your own custom sorting functionality to a <xref:System.Web.UI.WebControls.GridView> control.  
  
 When multiple columns are sorted, this property contains a comma-separated list of the fields by which to sort.  
  
   
  
## Examples  
 The following example demonstrates how to use the SortExpression property to determine the name of the column being sorted.  
  
 [!code-cs[GridViewAllowSortingColumns#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_14_1.aspx)]
 [!code-vb[GridViewAllowSortingColumns#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_14_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.GridViewSortEventHandler Sorting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.GridViewSortEventHandler Sorting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewSortEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the hyperlink to sort a column is clicked, but before the <see cref="T:System.Web.UI.WebControls.GridView" /> control handles the sort operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Sorting event is raised when the hyperlink to sort a column is clicked, but before the <xref:System.Web.UI.WebControls.GridView> control handles the sort operation. This enables you to provide an event-handling method that performs a custom routine, such as canceling the sorting operation, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.GridViewSortEventArgs> object is passed to the event-handling method, which enables you to determine the sort expression for the column and to indicate that the selection operation should be canceled. To cancel the selection operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.GridViewSortEventArgs> object to `true`.  
  
 For information about how to programmatically initiate a sort operation, see the <xref:System.Web.UI.WebControls.GridView.Sort%2A> method.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to use the Sorting event to perform the sorting functionality when the <xref:System.Web.UI.WebControls.GridView> control is bound to a <xref:System.Data.DataTable> object by setting the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> property programmatically.  
  
 [!code-cs[GridViewSorting#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_126_1.aspx)]
 [!code-vb[GridViewSorting#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_126_1.aspx)]  
  
 The following example demonstrates how to use the Sorting event to cancel a sorting operation.  
  
 [!code-vb[GridViewSorting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_126_2.aspx)]
 [!code-cs[GridViewSorting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_126_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.ICallbackEventHandler.GetCallbackResult">
      <MemberSignature Language="C#" Value="string ICallbackEventHandler.GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Web.UI.ICallbackEventHandler.GetCallbackResult() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the result of a callback event that targets a control.</summary>
        <returns>The results of the callback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.GridView> control implements the <xref:System.Web.UI.ICallbackEventHandler> interface and uses the <xref:System.Web.UI.WebControls.GridView.RaisePostBackEvent%2A> to asynchronously retrieve data and the <xref:System.Web.UI.WebControls.GridView.GetCallbackResult%2A> method to return the retrieved data to the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="void ICallbackEventHandler.RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The argument to pass to the event handler.</param>
        <summary>Creates the arguments for the callback handler in the &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ICallbackEventHandler.RaiseCallbackEvent is a helper method that is used by the <xref:System.Web.UI.WebControls.GridView> control to create the arguments for the callback handler in the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataKeysControl.ClientIDRowSuffixDataKeys">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKeyArray System.Web.UI.IDataKeysControl.ClientIDRowSuffixDataKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKeyArray System.Web.UI.IDataKeysControl.ClientIDRowSuffixDataKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKeyArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data values that are used to uniquely identify each instance of a data-bound control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</summary>
        <value>The data values that are used to uniquely identify each instance of a data-bound control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.IDataKeysControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The event argument from which to create a <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> for the event or events that are raised.</param>
        <summary>Raises the appropriate events for the <see cref="T:System.Web.UI.WebControls.GridView" /> control when it posts back to the server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The page calls the <xref:System.Web.UI.Page.RaisePostBackEvent%2A> method when a postback event occurs to raise the appropriate events for a <xref:System.Web.UI.WebControls.GridView> control. This call occurs in the page life cycle after loading and change notification are complete, but before prerendering occurs. This method has been implemented to create a <xref:System.Web.UI.WebControls.CommandEventArgs> object for the event or events that are raised.  
  
> [!NOTE]
>  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.GridView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.ICallbackContainer.GetCallbackScript">
      <MemberSignature Language="C#" Value="string ICallbackContainer.GetCallbackScript (System.Web.UI.WebControls.IButtonControl buttonControl, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Web.UI.WebControls.ICallbackContainer.GetCallbackScript(class System.Web.UI.WebControls.IButtonControl buttonControl, string argument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttonControl" Type="System.Web.UI.WebControls.IButtonControl" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="buttonControl">The button control for which to create the callback script.</param>
        <param name="argument">The arguments to pass to the callback script.</param>
        <summary>Creates the callback script for a button that performs a sorting operation.</summary>
        <returns>The callback script for a button that performs a sorting operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ICallbackContainer.GetCallbackScript is a helper method that is used by the <xref:System.Web.UI.WebControls.GridView> control to create the callback script for a button that performs a sorting operation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataKeyNames">
      <MemberSignature Language="C#" Value="string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the names of the primary key fields for the items displayed in a data-bound control.</summary>
        <value>An array that contains the names of the primary-key fields for the items that are displayed in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 This property provides access to the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property of the <xref:System.Web.UI.WebControls.GridView> control. It is exposed through the <xref:System.Web.UI.WebControls.IDataBoundControl> Interface.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataMember">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the table that is exposed by the data source control to bind to the data-bound control.</summary>
        <value>The table that is exposed by the data source control to bind to the data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 If the data source contains multiple sources of data, use this property to set the specific data table, collection, or other data for the control to bind to. For example, if the data source is a <xref:System.Data.DataSet> instance that contains multiple tables, you can specify which table to bind the control to by using this property.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSource">
      <MemberSignature Language="C#" Value="object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Web.UI.WebControls.IDataBoundControl.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data source object from which the data-bound control retrieves the list of data items.</summary>
        <value>The data source object that the data-bound control uses.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceID">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataSourceID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ID of the data source from which the data-bound control retrieves the list of data items.</summary>
        <value>The ID of the data source from which the data-bound control retrieves data items.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceObject">
      <MemberSignature Language="C#" Value="System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IDataSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data source object from which the data-bound control retrieves the list of data items.</summary>
        <value>The data source object from which the data-bound control retrieves the list of data items</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix">
      <MemberSignature Language="C#" Value="string[] System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the names of the data fields whose values are appended to the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; property value to uniquely identify each instance of a data-bound control.</summary>
        <value>The names of the data fields whose values are used to uniquely identify each instance of a data-bound control when ASP.NET generates the &lt;xref:System.Web.UI.Control.ClientID%2A&gt; value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundListControl> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.DataKeys">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKeyArray System.Web.UI.WebControls.IDataBoundListControl.DataKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKeyArray System.Web.UI.WebControls.IDataBoundListControl.DataKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKeyArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of objects that represent the &lt;xref:System.Web.UI.WebControls.GridView.DataKeys%2A&gt; value in a data-bound control.</summary>
        <value>An array that contains the data key of each row in a data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundListControl> interface.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.EnablePersistedSelection">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IDataBoundListControl.EnablePersistedSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IDataBoundListControl.EnablePersistedSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the selection of a row is based on index or on data-key values.</summary>
        <value>
          <see langword="true" /> if the row selection is based on data-key values; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundListControl> interface.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.SelectedDataKey">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundListControl.SelectedDataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundListControl.SelectedDataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the object that contains the data key value for the selected row in a data-bound control.</summary>
        <value>The data-key value for the selected row.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundListControl> interface.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundListControl.SelectedIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.WebControls.IDataBoundListControl.SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.WebControls.IDataBoundListControl.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the selected row in the data-bound control.</summary>
        <value>The index of the selected row in the data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundListControl> interface.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IFieldControl.FieldsGenerator">
      <MemberSignature Language="C#" Value="System.Web.UI.IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.FieldsGenerator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.FieldsGenerator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IAutoFieldGenerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the control that automatically generates the columns for a data-bound control for use by ASP.NET Dynamic Data.</summary>
        <value>The control that automatically generates the columns for a data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.GridView> instance is cast to an <xref:System.Web.UI.WebControls.IFieldControl> interface.  
  
 ASP.NET Dynamic Data supports this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPersistedSelector.DataKey">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IPersistedSelector.DataKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IPersistedSelector.DataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.WebControls.IPersistedSelector.DataKey%2A?displayProperty=fullName&gt;.</summary>
        <value>The data-key value for the persisted selected record in a data-bound control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can specify how selected rows are persisted when the <xref:System.Web.UI.WebControls.GridView> control is in paging mode. By default, row selection is based on row index. The same row (for example, the third row) is selected on each page. Alternatively, you can enable persistence based on the data key of the selected row. In that case, if you select row 3 on page 1 and you move to page 2, no row is selected on page 2. If you move back to page 1, row 3 is still selected. To enable this functionality, set this property to `true`.  
  
> [!NOTE]
>  In versions 2.0, 3.0, and 3.5 of ASP.NET, row selection was based only on row index. By default, row selection in ASP.NET 4 is based on index for backward compatibility.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions">
      <MemberSignature Language="C#" Value="System.Web.UI.PostBackOptions IPostBackContainer.GetPostBackOptions (System.Web.UI.WebControls.IButtonControl buttonControl);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(class System.Web.UI.WebControls.IButtonControl buttonControl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttonControl" Type="System.Web.UI.WebControls.IButtonControl" />
      </Parameters>
      <Docs>
        <param name="buttonControl">The button control for which to create the callback script.</param>
        <summary>Creates a <see cref="T:System.Web.UI.PostBackOptions" /> object that represents the postback behavior of the specified button control.</summary>
        <returns>A <see cref="T:System.Web.UI.PostBackOptions" /> that represents the postback behavior of the specified button control.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buttonControl" /> parameter contains <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="buttonControl" /> causes validation and is attempting to post back to the same container it validates.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value for the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value for the <see cref="T:System.Web.UI.WebControls.GridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TagKey property allows the output stream to write the appropriate HTML markup for the <xref:System.Web.UI.WebControls.GridView> control. When the <xref:System.Web.UI.WebControls.GridView.EnableSortingAndPagingCallbacks%2A> property is set to `true`, this property returns `HtmlTextWriterTag.Div`; otherwise, this property returns `HtmlTextWriterTag.Table`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TopPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridViewRow TopPagerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.GridViewRow TopPagerRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Web.UI.WebControls.GridViewRow" /> object that represents the top pager row in a <see cref="T:System.Web.UI.WebControls.GridView" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.GridViewRow" /> that represents the top pager row in the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When paging is enabled (by setting the <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property to `true`), an additional row called the pager row is automatically displayed in the <xref:System.Web.UI.WebControls.GridView> control. The pager row contains controls that allow the user to navigate to the other pages and can be displayed at the top, the bottom, or both the top and bottom of the control. Use the TopPagerRow property to programmatically access the <xref:System.Web.UI.WebControls.GridViewRow> object that represents the top pager row in a <xref:System.Web.UI.WebControls.GridView> control.  
  
> [!NOTE]
>  The TopPagerRow property is available only after the <xref:System.Web.UI.WebControls.GridView> control creates the top pager row in the <xref:System.Web.UI.WebControls.GridView.RowCreated> event.  
  
 This property is commonly used when you need to programmatically manipulate the top pager row, for example when adding custom content. Any modification to the TopPagerRow property must be performed after the <xref:System.Web.UI.WebControls.GridView> control has been rendered; otherwise, the <xref:System.Web.UI.WebControls.GridView> control will overwrite any changes.  
  
   
  
## Examples  
 The following example demonstrates how to use the TopPagerRow property to access the top pager row in a <xref:System.Web.UI.WebControls.GridView> control. The TopPagerRow property is used to retrieve a <xref:System.Web.UI.WebControls.DropDownList> control from the pager row.  
  
 [!code-vb[GridViewTopPagerRow#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_315_1.aspx)]
 [!code-cs[GridViewTopPagerRow#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_315_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tracks view-state changes to the <see cref="T:System.Web.UI.WebControls.GridView" /> control so they can be stored in the control's <see cref="T:System.Web.UI.StateBag" /> object. This object is accessible through the &lt;xref:System.Web.UI.Control.ViewState%2A?displayProperty=fullName&gt; property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is overridden to mark the starting point at which to begin tracking and saving changes to the control as part of the control's view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public virtual string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method to call in order to update data.</summary>
        <value>The name of the method.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property causes model binding to be used as the data-binding method.  
  
 For a tutorial series on using model binding with Web Forms, see [Model Binding and Web Forms](http://go.microsoft.com/fwlink/?LinkId=286117).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateRow">
      <MemberSignature Language="C#" Value="public virtual void UpdateRow (int rowIndex, bool causesValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateRow(int32 rowIndex, bool causesValidation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row to update.</param>
        <param name="causesValidation">
          <see langword="true" /> to perform page validation when this method is called; otherwise, <see langword="false" />.</param>
        <summary>Updates the record at the specified row index using the field values of the row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the UpdateRow method to programmatically update the record at the specified index in the data source. This method is commonly used when you need to update a record from outside of the <xref:System.Web.UI.WebControls.GridView> control, such as from a different control on the page.  
  
> [!NOTE]
>  This method can be called only for the row that is currently in edit mode, or for a row that contains a two-way data-bound input control. For more information about two-way binding expressions, see [Binding to Databases](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742).  
  
 To specify whether page validation is performed before the update operation, use the `causesValidation` parameter. Calling this method also raises the <xref:System.Web.UI.WebControls.GridView.RowUpdated> and <xref:System.Web.UI.WebControls.GridView.RowUpdating> events.  
  
   
  
## Examples  
 The following example demonstrates how to use the UpdateRow method to programmatically update a record in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[GridViewUpdateRow#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_0_1.aspx)]
 [!code-cs[GridViewUpdateRow#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_0_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source control, but the <see cref="T:System.Web.UI.DataSourceView" /> associated with the data source is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UseAccessibleHeader">
      <MemberSignature Language="C#" Value="public virtual bool UseAccessibleHeader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseAccessibleHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a <see cref="T:System.Web.UI.WebControls.GridView" /> control renders its header in an accessible format. This property is provided to make the control more accessible to users of assistive technology devices.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.GridView" /> control renders its header in an accessible format; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the UseAccessibleHeader property to specify whether the <xref:System.Web.UI.WebControls.GridView> control renders its header row in an accessible format. This property is provided to make the control more accessible to users of assistive technology devices. By default, the value of this property is `true` and the header for the control is rendered using `<th>` table header cell tags. In addition, a `scope="col"` attribute is added to the table header to specify that the header applies to all the cells in the column. The default rendering of the `<th>` element is preserved, rendering text as bold and centered horizontally. Developers can override the style of the `<th>` element using a cascading style sheet.  
  
 If the value of this property is `false`, the header for the control is rendered using `<td>` table cell tags.  
  
   
  
## Examples  
 The following example demonstrates how to use the UseAccessibleHeader property to disable the accessible header.  
  
 [!code-vb[GridViewUseAccessibleHeader#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1058_1.aspx)]
 [!code-cs[GridViewUseAccessibleHeader#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1058_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VirtualItemCount">
      <MemberSignature Language="C#" Value="public virtual int VirtualItemCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the virtual number of items in the data source that the <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to when custom paging is used.</summary>
        <value>The virtual number of items in the data source that the <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to when custom paging is used.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is used only when the value of the <xref:System.Web.UI.WebControls.GridView.AllowCustomPaging%2A> property is `true`. For more information, see the <xref:System.Web.UI.WebControls.GridView.AllowCustomPaging%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>