<Type Name="TableCell" FullName="System.Web.UI.WebControls.TableCell">
  <TypeSignature Language="C#" Value="public class TableCell : System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TableCell extends System.Web.UI.WebControls.WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.TableCellControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a cell in a <see cref="T:System.Web.UI.WebControls.Table" /> control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In this topic:  
  
-   [Introduction](#introduction)  
  
-   [Declarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 The TableCell class represents a cell in a <xref:System.Web.UI.WebControls.Table> control. You can use the <xref:System.Web.UI.WebControls.TableCell.Text%2A> property to specify or determine the contents of the cell.  
  
 The TableCell class allows you to control how the contents of the cell are displayed. The alignment of the contents in the cell are specified by setting the <xref:System.Web.UI.WebControls.TableCell.HorizontalAlign%2A> and <xref:System.Web.UI.WebControls.TableCell.VerticalAlign%2A> properties. You can use the <xref:System.Web.UI.WebControls.TableCell.Wrap%2A> property to specify whether the contents of the cell wrap in the cell.  
  
 You can also specify how many rows or columns in the table, represented by a <xref:System.Web.UI.WebControls.Table> control, are occupied by an individual cell. The <xref:System.Web.UI.WebControls.TableCell.RowSpan%2A> and <xref:System.Web.UI.WebControls.TableCell.ColumnSpan%2A> properties control how many rows and columns are used, respectively.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. ASP.NET provides an input request validation feature to block script and HTML in user input. Validation server controls are also provided to assess user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
<a name="declarative_syntax"></a>   
## Declarative Syntax  
  
```  
<asp:TableCell  
    AccessKey="string"  
    AssociatedHeaderCellID="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    ColumnSpan="integer"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    HorizontalAlign="NotSet|Left|Center|Right|Justify"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    RowSpan="integer"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    Text="string"  
    ToolTip="string"  
    VerticalAlign="NotSet|Top|Middle|Bottom"  
    Visible="True|False"  
    Width="size"  
    Wrap="True|False"  
/></asp:TableCell>  
```  
  
   
  
## Examples  
 The following code example demonstrates how to create a table, add elements to the table programmatically, and display the table on the Web page. Note how TableCell controls are instantiated and their property values are set.  
  
> [!NOTE]
>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[TableCell#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_46_1.aspx)]
 [!code-vb[TableCell#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_46_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableCell ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.TableCell" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.TableCell> is created using the <xref:System.Web.UI.HtmlTextWriterTag> tag.  
  
   
  
## Examples  
 The following example demonstrates how to programmatically create a new instance of a <xref:System.Web.UI.WebControls.TableCell> control.  
  
 [!code-cs[TableCell#5](~/add/codesnippet/csharp/m-system.web.ui.webcontr_66_1.aspx)]
 [!code-vb[TableCell#5](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_66_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The output stream that renders HTML content to the client.</param>
        <summary>Adds properties specific to the <see cref="T:System.Web.UI.WebControls.TableCell" /> control to the list of attributes to render.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AddAttributesToRender method overrides the base class's <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A> method and first calls the base method and then adds the <xref:System.Web.UI.WebControls.TableCell> attributes corresponding to the <xref:System.Web.UI.WebControls.TableCell.RowSpan%2A> property, the <xref:System.Web.UI.WebControls.TableCell.ColumnSpan%2A> property and the <xref:System.Web.UI.WebControls.TableCell.AssociatedHeaderCellID%2A> property. If the <xref:System.Web.UI.WebControls.TableCell.AssociatedHeaderCellID%2A> property refers to a <xref:System.Web.UI.WebControls.TableHeaderCell> that can not be found, an <xref:System.Web.HttpException> is thrown.  
  
 The AddAttributesToRender method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.WebControls.TableCell> control.  
  
   
  
## Examples  
 The following code example demonstrates how to override the AddAttributesToRender method in a custom server control so that a custom title attribute is rendered for each cell.  
  
 [!code-cs[CustomTableCellAddAttributesToRender#1](~/add/codesnippet/csharp/d7533fd7-c6ec-4fe0-8c31-_1.aspx)]
 [!code-vb[CustomTableCellAddAttributesToRender#1](~/add/codesnippet/visualbasic/d7533fd7-c6ec-4fe0-8c31-_1.aspx)]  
  
 [!code-vb[CustomTableCellAddAttributesToRender#2](~/add/codesnippet/visualbasic/d7533fd7-c6ec-4fe0-8c31-_2.vb)]
 [!code-cs[CustomTableCellAddAttributesToRender#2](~/add/codesnippet/csharp/d7533fd7-c6ec-4fe0-8c31-_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">A cell listed as an associated header cell was not found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An &lt;xref:System.Object&gt; that represents the parsed element</param>
        <summary>Adds a parsed child control to the <see cref="T:System.Web.UI.WebControls.TableCell" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Web.UI.WebControls.TableCell> control contains child controls then the base class's AddParsedSubObject method is called; otherwise, the <xref:System.Web.UI.WebControls.TableCell> control's <xref:System.Web.UI.WebControls.TableCell.Text%2A> property value is added as a <xref:System.Web.UI.LiteralControl> object to the <xref:System.Web.UI.WebControls.TableCell> control's <xref:System.Web.UI.ControlCollection>.  
  
 The AddParsedSubObject method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.WebControls.TableCell> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AssociatedHeaderCellID">
      <MemberSignature Language="C#" Value="public virtual string[] AssociatedHeaderCellID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AssociatedHeaderCellID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.StringArrayConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a space-separated list of table header cells associated with the <see cref="T:System.Web.UI.WebControls.TableCell" /> control.</summary>
        <value>An array of strings containing the identifiers of the associated table header cells.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AssociatedHeaderCellID property contains a list of header cell programmatic identifiers that provide header information of the <xref:System.Web.UI.WebControls.TableCell> control. The list of header cell identifiers is rendered as a comma delimited list into the HTML `<td>` element's `header` attribute.  
  
 When setting the AssociatedHeaderCellID property use a comma delimited list of strings. If an element of the list is not recognized as a valid table header cell an <xref:System.Web.HttpException> is thrown when the <xref:System.Web.UI.WebControls.TableCell.AddAttributesToRender%2A> is invoked.  
  
   
  
## Examples  
 The following code example demonstrates how to declaratively specify the AssociatedHeaderCellID property of a <xref:System.Web.UI.WebControls.TableCell> control. In particular, note how the cell in the last row is associated to three header cells. For a complete, working code example, see the <xref:System.Web.UI.WebControls.TableHeaderCell> class overview topic.  
  
```c#  
<asp:TableCell AssociatedHeaderCellID="Column1Header Column2Header Column3Header"  
ColumnSpan="3"  
HorizontalAlign="Left">(2,0)  
</asp:TableCell>  
```  
  
```vb#  
<asp:TableCell AssociatedHeaderCellID="Column1Header Column2Header Column3Header"  
ColumnSpan="3"  
HorizontalAlign="Left">(2,0)  
</asp:TableCell>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnSpan">
      <MemberSignature Language="C#" Value="public virtual int ColumnSpan { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of columns in the <see cref="T:System.Web.UI.WebControls.Table" /> control that the cell spans.</summary>
        <value>The number of columns in the rendered table that the cell spans. The default value is <see langword="0" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ColumnSpan property to specify or determine the number of columns in the rendered table that the cell spans. For example, if you set this property to `2`, the cell takes up two columns in the <xref:System.Web.UI.WebControls.Table> control.  
  
   
  
## Examples  
 The following code example demonstrates how to declaratively specify the ColumnSpan of a <xref:System.Web.UI.WebControls.TableCell> control. In particular, note how the last row's single cell spans three columns. For a complete, working code example, see the <xref:System.Web.UI.WebControls.TableHeaderCell> class overview topic.  
  
```c#  
<asp:TableCell AssociatedHeaderCellID="Column1Header Column2Header Column3Header"  
ColumnSpan="3"  
HorizontalAlign="Left">(2,0)  
</asp:TableCell>  
```  
  
```vb#  
<asp:TableCell AssociatedHeaderCellID="Column1Header Column2Header Column3Header"  
ColumnSpan="3"  
HorizontalAlign="Left">(2,0)  
</asp:TableCell>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see langword="0" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> for the <see cref="T:System.Web.UI.WebControls.TableCell" /> control.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> for the <see cref="T:System.Web.UI.WebControls.TableCell" /> control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.TableItemStyle> created by the CreateControlStyle method is used with the <xref:System.Web.UI.WebControls.TableCell.Wrap%2A>, <xref:System.Web.UI.WebControls.TableCell.HorizontalAlign%2A>, and <xref:System.Web.UI.WebControls.TableCell.VerticalAlign%2A> properties.  
  
 The CreateControlStyle method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.WebControls.TableCell> control.  
  
   
  
## Examples  
 The following code example demonstrates how to override the CreateControlStyle method in a custom server control so that it always returns a new instance of the <xref:System.Web.UI.WebControls.TableStyle> class for the <xref:System.Web.UI.WebControls.TableCell>.  
  
 [!code-cs[CustomTableCellCreateControlStyle#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_96_1.aspx)]
 [!code-vb[CustomTableCellCreateControlStyle#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_96_1.aspx)]  
  
 [!code-cs[CustomTableCellCreateControlStyle#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_96_2.cs)]
 [!code-vb[CustomTableCellCreateControlStyle#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_96_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.HorizontalAlign HorizontalAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.HorizontalAlign HorizontalAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.HorizontalAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the horizontal alignment of the contents in the cell.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.HorizontalAlign" /> enumeration values. The default is <see langword="NotSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the HorizontalAlign property to specify the horizontal alignment of the contents of the cell. The possible values for use are specified in the <xref:System.Web.UI.WebControls.HorizontalAlign> enumeration.  
  
   
  
## Examples  
 The following code example demonstrates how to declaratively specify the HorizontalAlign property of a <xref:System.Web.UI.WebControls.TableCell> control. In particular, note how the cell in the last row is left justified. For a complete, working code example, see the <xref:System.Web.UI.WebControls.TableHeaderCell> class overview topic.  
  
```c#  
<asp:TableCell AssociatedHeaderCellID="Column1Header,Column2Header,Column3Header"  
ColumnSpan="3"  
HorizontalAlign="Left">(2,0)  
</asp:TableCell>  
```  
  
```vb#  
<asp:TableCell AssociatedHeaderCellID="Column1Header,Column2Header,Column3Header"  
ColumnSpan="3"  
HorizontalAlign="Left">(2,0)  
</asp:TableCell>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The output stream that renders HTML content to the client.</param>
        <summary>Renders the <see cref="T:System.Web.UI.WebControls.TableCell" /> contents to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Web.UI.WebControls.TableCell> control has child controls or is overridden in a derived class the base class's <xref:System.Web.UI.WebControls.WebControl.RenderContents%2A> method is called; otherwise, the value of the <xref:System.Web.UI.WebControls.TableCell.Text%2A> property is written to the <xref:System.Web.UI.HtmlTextWriter> object.  
  
 The RenderContents method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.WebControls.TableCell> control.  
  
   
  
## Examples  
 The following code example demonstrates how to override the RenderContents method in a custom <xref:System.Web.UI.WebControls.TableCell> control so that it custom text is inserted in the cell's contents.  
  
 [!code-cs[CustomTableCellRenderContents#1](~/add/codesnippet/csharp/cba70dfb-1bcf-4903-828d-_1.aspx)]
 [!code-vb[CustomTableCellRenderContents#1](~/add/codesnippet/visualbasic/cba70dfb-1bcf-4903-828d-_1.aspx)]  
  
 [!code-cs[CustomTableCellRenderContents#2](~/add/codesnippet/csharp/cba70dfb-1bcf-4903-828d-_2.cs)]
 [!code-vb[CustomTableCellRenderContents#2](~/add/codesnippet/visualbasic/cba70dfb-1bcf-4903-828d-_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowSpan">
      <MemberSignature Language="C#" Value="public virtual int RowSpan { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of rows in the <see cref="T:System.Web.UI.WebControls.Table" /> control that the cell spans.</summary>
        <value>The number of rows in the rendered table that the cell spans. The default value is <see langword="0" />, which indicates that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RowSpan property to specify or determine the number of rows in the rendered table that the cell spans. For example, if you set this property to `2`, the cell takes up two rows in the <xref:System.Web.UI.WebControls.Table> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see langword="0" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SupportsDisabledAttribute">
      <MemberSignature Language="C#" Value="public override bool SupportsDisabledAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDisabledAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the control should set the <see langword="disabled" /> attribute of the rendered HTML element to "disabled" when the control's &lt;xref:System.Web.UI.WebControls.WebControl.IsEnabled%2A&gt; property is <see langword="false" />.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Web.UI.Control.RenderingCompatibility%2A?displayProperty=fullName&gt; property indicates an ASP.NET version lower than `4.0`; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property indicates how ASP.NET should render HTML for a control when the control is disabled. If this property is `true`, ASP.NET renders a `disabled` attribute when a control is disabled. If this property is `false`, ASP.NET renders a `class` attribute when a control is disabled. For more information, see <xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text contents of the cell.</summary>
        <value>The text contents of the cell. The default value is &lt;xref:System.String?displayProperty=fullName&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Text property to specify or determine the text contents of the cell. This property is commonly used to programmatically update the contents of a cell.  
  
> [!NOTE]
>  Setting the Text property will clear any other controls contained in the <xref:System.Web.UI.WebControls.TableCell>.  
  
> [!CAUTION]
>  The Text control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. ASP.NET provides an input request validation feature to block script and HTML in user input. Validation server controls are also provided to assess user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to create a new instance of a <xref:System.Web.UI.WebControls.TableCell> control programmatically. In particular, note how the Text property is used for setting the contents of the <xref:System.Web.UI.WebControls.TableCell> control.  
  
 This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.TableCell> class.  
  
 [!code-cs[TableCell#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_47_1.aspx)]
 [!code-vb[TableCell#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_47_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VerticalAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.VerticalAlign VerticalAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.VerticalAlign VerticalAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.VerticalAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the vertical alignment of the contents in the cell.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.VerticalAlign" /> enumeration values. The default is <see langword="NotSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the VerticalAlign property to specify the vertical alignment of the contents of the cell. The possible values for use are specified in the <xref:System.Web.UI.WebControls.VerticalAlign> enumeration.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public virtual bool Wrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Wrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicating whether the contents of the cell wrap.</summary>
        <value>
          <see langword="true" /> if the contents of the cell wrap in the cell; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Wrap property to specify or determine whether the content of the cell wrap in the cell.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>