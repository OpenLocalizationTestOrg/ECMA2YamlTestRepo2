<Type Name="FormViewModeEventArgs" FullName="System.Web.UI.WebControls.FormViewModeEventArgs">
  <TypeSignature Language="C#" Value="public class FormViewModeEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormViewModeEventArgs extends System.ComponentModel.CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> event.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.FormView.ModeChanging> event is raised when a <xref:System.Web.UI.WebControls.FormView> control attempts to switch between edit, insert, and read-only mode, but before the mode actually changes. This allows you to provide an event-handling method that performs a custom routine, such as configuring the <xref:System.Web.UI.WebControls.FormView> control for a specific mode or canceling the mode change, whenever this event occurs.  
  
 A <xref:System.Web.UI.WebControls.FormViewInsertEventArgs> object is passed to the event-handling method, which allows you to determine the mode to which the <xref:System.Web.UI.WebControls.FormView> control is changing, to determine whether the <xref:System.Web.UI.WebControls.FormView.ModeChanging> event was raised as a result of the user canceling an edit or insert operation, or to indicate that the mode change should be canceled. To determine the new mode, use the <xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A> property. You can also use the <xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A> property to programmatically specify an alternate mode to which to change by setting it to one of the <xref:System.Web.UI.WebControls.FormViewMode> enumeration values. Use the <xref:System.Web.UI.WebControls.FormViewModeEventArgs.CancelingEdit%2A> property to determine whether this event was raised as the result of the user canceling an edit or insert operation. To cancel the mode change, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 For a list of initial property values for an instance of the FormViewModeEventArgs class, see the <xref:System.Web.UI.WebControls.FormViewModeEventArgs.%23ctor%2A> constructor.  
  
   
  
## Examples  
 The following example demonstrates how to use the FormViewModeEventArgs object passed to the event-handling method for the <xref:System.Web.UI.WebControls.FormView.ModeChanging> event to hide the pager row when the <xref:System.Web.UI.WebControls.FormView> control transitions to edit mode.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[FormViewModeEventArgs#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_17_1.aspx)]
 [!code-cs[FormViewModeEventArgs#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_17_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormViewModeEventArgs (System.Web.UI.WebControls.FormViewMode mode, bool cancelingEdit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.WebControls.FormViewMode mode, bool cancelingEdit) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.UI.WebControls.FormViewMode" />
        <Parameter Name="cancelingEdit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mode">One of the <see cref="T:System.Web.UI.WebControls.FormViewMode" /> enumeration values.</param>
        <param name="cancelingEdit">
          <see langword="true" /> to indicate the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> event was raised as a result of the user canceling an edit operation; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewModeEventArgs> class.  
  
 The following table shows initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewModeEventArgs> class.  
  
|Property|Initial Value|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.FormViewModeEventArgs.CancelingEdit%2A>|The value of the `cancelingEdit` parameter.|  
|<xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A>|The value of the `mode` parameter.|  
  
> [!NOTE]
>  This constructor is used primarily by control developers when raising events.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelingEdit">
      <MemberSignature Language="C#" Value="public bool CancelingEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelingEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> event was raised as a result of the user canceling an edit operation.</summary>
        <value>
          <see langword="true" /> to indicate the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> event was raised as a result of the user canceling an edit operation; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.FormView.ModeChanging> event is raised when a <xref:System.Web.UI.WebControls.FormView> control attempts to switch between edit, insert, and read-only mode, but before the mode actually changes. Use the CancelingEdit property to determine whether the <xref:System.Web.UI.WebControls.FormView.ModeChanging> event was raised as a result of the user canceling an edit or insert operation. For example, you might want to reset the <xref:System.Web.UI.WebControls.FormView> control whenever the user cancels an edit operation.  
  
   
  
## Examples  
 The following example demonstrates how to use the CancelingEdit property to determine whether a mode change is the result of the user canceling an edit operation.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[FormViewModeEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_623_1.aspx)]
 [!code-cs[FormViewModeEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_623_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.FormViewMode NewMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.FormViewMode NewMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the mode to which the <see cref="T:System.Web.UI.WebControls.FormView" /> control is changing.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.FormViewMode" /> enumeration values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the NewMode property to determine the mode to which the <xref:System.Web.UI.WebControls.FormView> control is changing. For example, you might want to configure the <xref:System.Web.UI.WebControls.FormView> control based on the mode to which it changes. You can also use this property to specify the mode to which the <xref:System.Web.UI.WebControls.FormView> control changes by setting it to one of the <xref:System.Web.UI.WebControls.FormViewMode> enumeration values.  
  
   
  
## Examples  
 The following example demonstrates how to use the NewMode property to determine the mode to which the <xref:System.Web.UI.WebControls.FormView> control is transitioning.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[FormViewModeEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_376_1.aspx)]
 [!code-cs[FormViewModeEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_376_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>