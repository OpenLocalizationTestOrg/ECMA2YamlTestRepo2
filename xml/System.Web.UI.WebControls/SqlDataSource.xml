<Type Name="SqlDataSource" FullName="System.Web.UI.WebControls.SqlDataSource">
  <TypeSignature Language="C#" Value="public class SqlDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSource extends System.Web.UI.DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("SelectQuery")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an SQL database to data-bound controls.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In this topic:  
  
-   [Introduction](#introduction)  
  
-   [Data Connections](#data_connections)  
  
-   [Performing Data Operations](#performing_data_operations)  
  
-   [Data Provider](#data_provider)  
  
-   [Caching](#caching)  
  
-   [Additional Features](#additional_features)  
  
-   [Data Source View](#data_source_view)  
  
-   [Declarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 The SqlDataSource data source control represents data in an SQL relational database to data-bound controls. You can use the SqlDataSource control in conjunction with a data-bound control to retrieve data from a relational database and to display, edit, and sort data on a Web page with little or no code.  
  
<a name="data_connections"></a>   
## Data Connections  
 To connect to a database, you must set the <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property to a valid connection string. The SqlDataSource can support any SQL relational database that can be connected to using an ADO.NET provider, such as the `SqlClient`, `OleDb`, `Odbc`, or `OracleClient` provider. For information about how to secure connection strings, see [How To: Secure Connection Strings when Using Data Source Controls](~/add/includes/ajax-current-ext-md.md).  
  
 To retrieve data from an underlying database, set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property with an SQL query. If the database that the SqlDataSource is associated with supports stored procedures, you can set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to the name of a stored procedure. The SQL query that you specify can also be a parameterized query. You can add <xref:System.Web.UI.WebControls.Parameter> objects that are associated with a parameterized query to the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> collection. For more information about parameterized SQL queries and their syntax, see [Using Parameters with Data Source Controls for Filtering](~/add/includes/ajax-current-ext-md.md).  
  
 The SqlDataSource control retrieves data whenever the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is called. This method provides programmatic access to the method that is specified by <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. The <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is automatically called by controls that are bound to the SqlDataSource when their <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method is called. If you set the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A> property of a data-bound control, the control automatically binds to data from the data source, as required. Setting the `DataSourceID` property is the recommended method for binding an <xref:System.Web.UI.WebControls.ObjectDataSource> control to a data-bound control. Alternatively, you can use the `DataSource` property, but then you must explicitly call the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the data-bound control. Some examples of data-bound controls that can use SqlDataSource are <xref:System.Web.UI.WebControls.DataGrid>, <xref:System.Web.UI.WebControls.DetailsView>, <xref:System.Web.UI.WebControls.DataList>, and <xref:System.Web.UI.WebControls.DropDownList>. You can call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method programmatically at any time to retrieve data from the underlying database.  
  
 In declarative and programmatic ASP.NET scenarios, you can set the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property of the data-bound control to the ID of the SqlDataSource control. You can also assign an instance of the SqlDataSource class to the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> property of the data-bound control. For more information about binding data-bound control to data source controls, see [ASP.NET Data Access Options](http://msdn.microsoft.com/en-us/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d).  
  
<a name="performing_data_operations"></a>   
## Performing Data Operations  
 Depending on the capabilities of the underlying database product and the configuration of the instance of the SqlDataSource class, you can perform data operations, such as updates, inserts, and deletes. To perform these data operations, set the appropriate command text and any associated parameters for the operation that you want to perform. For example, for an update operation, set the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property to an SQL string or the name of a stored procedure and add any required parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. The update is performed when the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method is called, either explicitly by your code or automatically by a data-bound control. The same general pattern is followed for <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> operations.  
  
 The SQL queries and commands that you use in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>, and <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> properties can be parameterized. This means that the query or command can use placeholders instead of literal values and bind the placeholders to application or user-defined variables. You can bind parameters in SQL queries to Session variables, values that are passed on the query string for a Web Forms page, the property values of other server controls, and more. For more information about how to use parameters in SQL queries with the SqlDataSource, see [Using Parameters with Data Source Controls for Filtering](../Topic/Using%20Parameters%20with%20Data%20Source%20Controls%20for%20Filtering.md) and [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  By default, if one of the parameters is `null` when you execute a `Select` command, no data will be returned and no exception will be thrown. You can change this behavior by setting the <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> property to `false`.  
  
<a name="data_provider"></a>   
## Data Provider  
 By default, the SqlDataSource control works with the .NET Framework Data Provider for SQL Server, but SqlDataSource is not Microsoft SQL Serverâ€“specific. You can connect the SqlDataSource control with any database product for which there is a managed ADO.NET provider. When used with the <xref:System.Data.OleDb?displayProperty=fullName> provider, the SqlDataSource can work with any OLE DB-compliant database. When used with the <xref:System.Data.Odbc?displayProperty=fullName> provider, the SqlDataSource can be used with any ODBC driver and database, including IBM DB2, MySQL, and PostgreSQL. When used with the <xref:System.Data.OracleClient?displayProperty=fullName> provider, the SqlDataSource can work with Oracle 8.1.7 databases and later. The list of allowable providers is registered in the `DbProviderFactories` section of the configuration file, either in the Machine.config or Web.config file. For more information, see [Selecting Data Using the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
<a name="caching"></a>   
## Caching  
 If you display data on your page using a SqlDataSource control, you can increase the performance of the page by using the data caching capabilities of the data source control. Caching reduces the processing load on the database servers at the expense of memory on the Web server; in most cases, this is a good trade-off. The SqlDataSource automatically caches data when the <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> property is set to the number of seconds that the cache stores data before the cache entry is discarded. You can also specify a <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> and an optional <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> value.  
  
<a name="additional_features"></a>   
## Additional Features  
 The SqlDataSource provides additional capabilities, as listed in the following table.  
  
|Capability|Requirements|  
|----------------|------------------|  
|Caching|Set the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value, the <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> property to `true`, and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> properties according to the caching behavior you want for your cached data.|  
|Deleting|Set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> property to an SQL statement used to delete data. This statement is typically parameterized.|  
|Filtering|Set the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value. Set the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property to a filtering expression used to filter the data when the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is called.|  
|Inserting|Set the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property to an SQL statement used to insert data. This statement is typically parameterized.|  
|Paging|Not currently supported by the SqlDataSource, however some data-bound controls, such as <xref:System.Web.UI.WebControls.GridView>, support paging when you set the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value.|  
|Selecting|Set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to an SQL statement used to retrieve data.|  
|Sorting|Set the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property to <xref:System.Web.UI.WebControls.SqlDataSourceMode>.|  
|Updating|Set the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property to an SQL statement used to update data. This statement is typically parameterized.|  
  
<a name="data_source_view"></a>   
## Data Source View  
 As with all data source controls, the SqlDataSource control is associated with a data source view class. The SqlDataSource control has only one associated <xref:System.Web.UI.WebControls.SqlDataSourceView>, and it is always named `Table`.  
  
 There is no visual rendering of the SqlDataSource control; it is implemented as a control so that you can create it declaratively and, optionally, to allow it to participate in state management. As a result, the SqlDataSource does not support visual features, such as the ones that are provided by the <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> or <xref:System.Web.UI.DataSourceControl.SkinID%2A> property.  
  
<a name="declarative_syntax"></a>   
## Declarative Syntax  
  
```  
<asp:SqlDataSource  
Â Â Â Â CacheDuration="string|Infinite"  
Â Â Â Â CacheExpirationPolicy="Absolute|Sliding"  
Â Â Â Â CacheKeyDependency="string"  
Â Â Â Â CancelSelectOnNullParameter="True|False"  
Â Â Â Â ConflictDetection="OverwriteChanges|CompareAllValues"  
Â Â Â Â ConnectionString="string"  
Â Â Â Â DataSourceMode="DataReader|DataSet"  
Â Â Â Â DeleteCommand="string"  
Â Â Â Â DeleteCommandType="Text|StoredProcedure"  
Â Â Â Â EnableCaching="True|False"  
Â Â Â Â EnableTheming="True|False"  
Â Â Â Â EnableViewState="True|False"  
Â Â Â Â FilterExpression="string"  
Â Â Â Â ID="string"  
Â Â Â Â InsertCommand="string"  
Â Â Â Â InsertCommandType="Text|StoredProcedure"  
Â Â Â Â OldValuesParameterFormatString="string"  
Â Â Â Â OnDataBinding="DataBinding event handler"  
Â Â Â Â OnDeleted="Deleted event handler"  
Â Â Â Â OnDeleting="Deleting event handler"  
Â Â Â Â OnDisposed="Disposed event handler"  
Â Â Â Â OnFiltering="Filtering event handler"  
Â Â Â Â OnInit="Init event handler"  
Â Â Â Â OnInserted="Inserted event handler"  
Â Â Â Â OnInserting="Inserting event handler"  
Â Â Â Â OnLoad="Load event handler"  
Â Â Â Â OnPreRender="PreRender event handler"  
Â Â Â Â OnSelected="Selected event handler"  
Â Â Â Â OnSelecting="Selecting event handler"  
Â Â Â Â OnUnload="Unload event handler"  
Â Â Â Â OnUpdated="Updated event handler"  
Â Â Â Â OnUpdating="Updating event handler"  
Â Â Â Â ProviderName="string|System.Data.Odbc|System.Data.OleDb|  
        System.Data.OracleClient|System.Data.SqlClient|  
        Microsoft.SqlServerCe.Client"  
Â Â Â Â runat="server"  
Â Â Â Â SelectCommand="string"  
Â Â Â Â SelectCommandType="Text|StoredProcedure"  
Â Â Â Â SkinID="string"  
Â Â Â Â SortParameterName="string"  
Â Â Â Â SqlCacheDependency="string"  
Â Â Â Â UpdateCommand="string"  
Â Â Â Â UpdateCommandType="Text|StoredProcedure"  
Â Â Â Â Visible="True|False"  
>  
Â Â Â Â Â Â Â Â <DeleteParameters>  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ControlParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ControlID="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:CookieParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â CookieName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:FormParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â FormField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:Parameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ProfileParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:QueryStringParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â QueryStringField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:SessionParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â SessionField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â </DeleteParameters>  
Â Â Â Â Â Â Â Â <FilterParameters>  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ControlParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ControlID="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:CookieParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â CookieName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:FormParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â FormField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:Parameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ProfileParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:QueryStringParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â QueryStringField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:SessionParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â SessionField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â </FilterParameters>  
Â Â Â Â Â Â Â Â <InsertParameters>  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ControlParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ControlID="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:CookieParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â CookieName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:FormParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â FormField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:Parameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ProfileParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:QueryStringParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â QueryStringField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:SessionParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â SessionField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â </InsertParameters>  
Â Â Â Â Â Â Â Â <SelectParameters>  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ControlParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ControlID="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:CookieParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â CookieName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:FormParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â FormField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:Parameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ProfileParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:QueryStringParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â QueryStringField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:SessionParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â SessionField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â </SelectParameters>  
Â Â Â Â Â Â Â Â <UpdateParameters>  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ControlParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ControlID="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:CookieParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â CookieName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:FormParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â FormField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:Parameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:ProfileParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PropertyName="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:QueryStringParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â QueryStringField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <asp:SessionParameter  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ConvertEmptyStringToNull="True|False"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DefaultValue="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Direction="Input|Output|InputOutput|ReturnValue"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Name="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â SessionField="string"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Size="integer"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />  
Â Â Â Â Â Â Â Â </UpdateParameters>  
</asp:SqlDataSource>  
```  
  
   
  
## Examples  
 A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192424).  
  
 This section contains four code examples:  
  
-   The first code example demonstrates how to display data from SQL Server in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  
  
-   The second code example demonstrates how to display data from an ODBC-compliant database in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  
  
-   The third code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.GridView> control.  
  
-   The fourth code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.DropDownList> control.  
  
    > [!NOTE]
    >  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  
  
 The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_1.aspx)]  
  
 The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is the name of the .NET Framework Data Provider for ODBC, which is <xref:System.Data.Odbc?displayProperty=fullName>.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_2.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_2.aspx)]  
  
 The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.GridView> control. As with the previous examples, data from the Northwind database is displayed in the <xref:System.Web.UI.WebControls.GridView> control. Additionally, because an <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is specified and the <xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A> property is set to `true`, you can edit and update the records with no additional code. The <xref:System.Web.UI.WebControls.GridView> control automatically handles adding parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** button in the <xref:System.Web.UI.WebControls.GridView> control is clicked.  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_3.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_3.aspx)]  
  
 The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.DropDownList> and <xref:System.Web.UI.WebControls.TextBox> controls. The <xref:System.Web.UI.WebControls.DropDownList> control does not automatically add update parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection nor call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method, so you must do so. The update parameters are specified declaratively and you can add an event handler to perform the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> operation when an event is raised.  
  
> [!IMPORTANT]
>  This example includes a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_4.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_4.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string selectCommand) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection string used to connect to the underlying database.</param>
        <param name="selectCommand">The SQL query used to retrieve data from the underlying database. If the SQL query is a parameterized SQL string, you might need to add <see cref="T:System.Web.UI.WebControls.Parameter" /> objects to the &lt;xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A&gt; collection.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> class with the specified connection string and Select command.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because different database products use different varieties of SQL, the syntax for `selectCommand` depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `'@parameterName'`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or the <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `'?'`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> value can be an SQL string or the name of a stored procedure, if the data source supports stored procedures.  
  
   
  
## Examples  
 The following code example demonstrates how to create a <xref:System.Web.UI.WebControls.SqlDataSource> control using the SqlDataSource constructor. The example is unusual in that the <xref:System.Web.UI.WebControls.SqlDataSource> control is being used not on a Web Forms page, but in the implementation of a middle-tier object as a simple way for a business object to interact with a database. The example uses a connection string that is stored in the Web.config file.  
  
 This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  
  
 [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/csharp/m-system.web.ui.webcontr_142_1.cs)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_142_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string providerName, string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerName, string connectionString, string selectCommand) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerName">The name of the data provider that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> uses. If no provider is set, the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> uses the ADO.NET provider for Microsoft SQL Server, by default.</param>
        <param name="connectionString">The connection string used to connect to the underlying database.</param>
        <param name="selectCommand">The SQL query used to retrieve data from the underlying database. If the SQL query is a parameterized SQL string, you might need to add <see cref="T:System.Web.UI.WebControls.Parameter" /> objects to the &lt;xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A&gt; collection.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> class with the specified connection string and Select command.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because different database products use different varieties of SQL, the syntax of `selectCommand` depends on the current ADO.NET provider being used, which is identified by the `providerName` parameter. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `'@parameterName'`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or the <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `'?'`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property can be an SQL string or the name of a stored procedure, if the data source supports stored procedures.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the length of time, in seconds, that the data source control caches data that is retrieved by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.Select%2A&gt; method.</summary>
        <value>The number of seconds that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> caches the results of a &lt;xref:System.Web.UI.WebControls.SqlDataSource.Select%2A&gt; operation. The default is 0. The value cannot be negative.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control supports data caching. While data is cached, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the cache rather than from the underlying database. When the cache expires, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the underlying database, and then caches the data again.  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> property is set to `true` and the CacheDuration property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache.  
  
 The behavior of the cache is determined by a combination of the duration and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property. If the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.SqlDataSource> caches data on the first data retrieval operation, holds it in memory for, at most, the amount of time that is specified by CacheDuration property. The data might be released before the duration time, if the memory is required. The cache is then refreshed during the next operation. If the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first data retrieval operation, but resets the time window that it holds the cache for each subsequent operation. The cache expires, if there is no activity for a time that is equal to the CacheDuration value since the last <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> operation.  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control can cache data only when it is in <xref:System.Web.UI.WebControls.SqlDataSourceMode> mode. A <xref:System.NotSupportedException> exception is thrown by the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method, if the <xref:System.Web.UI.WebControls.SqlDataSource> control is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value and caching is also enabled.  
  
> [!IMPORTANT]
>  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user's access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching.  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The CacheDuration is set to 20 seconds and, because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value by default, users of this page will see fresh data every 20 seconds.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_599_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_599_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cache expiration behavior that, when combined with the duration, describes the behavior of the cache that the data source control uses.</summary>
        <value>One of the <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> values. The default is the <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control supports data caching. While data is cached, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the cache rather than from the underlying database. When the cache expires, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the underlying database, and then caches the data again.  
  
 The behavior of the cache is determined by a combination of the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> and CacheExpirationPolicy settings. If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.SqlDataSource> caches data on the first data retrieval operation, holds it in memory for the amount of time that is specified by the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> property, and then discards it after the time has lapsed. The cache is then refreshed during the next operation. If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first data retrieval operation, but resets the time window that it holds the cache for each subsequent operation. The cache expires, if there is no activity for a time that is equal to the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> value since the last <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> operation.  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control can cache data only when in the <xref:System.Web.UI.WebControls.SqlDataSourceMode> mode. A <xref:System.NotSupportedException> exception is thrown by the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method, if the <xref:System.Web.UI.WebControls.SqlDataSource> control is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value and caching is also enabled.  
  
> [!IMPORTANT]
>  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user's access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching.  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. Because the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, users will not see fresh data even though the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> value is 20 seconds. The cached data is refreshed only if there is no activity on the page for more than 20 seconds since the last page load.  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_249_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_249_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a user-defined key dependency that is linked to all data cache objects that are created by the data source control. All cache objects are explicitly expired when the key is expired.</summary>
        <value>A key that identifies all cache objects created by the <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control supports data caching. While data is cached, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the cache rather than from the underlying database. When the cache expires, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the underlying database, and then caches the data again.  
  
 You can set the CacheKeyDependency property to create a dependency between all cache entries that are created by the <xref:System.Web.UI.WebControls.SqlDataSource> control and the key. You can programmatically expire all the cache entries at any time by expiring the key.  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control can cache data only when in the <xref:System.Web.UI.WebControls.SqlDataSourceMode> mode. A <xref:System.NotSupportedException> exception is thrown by the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method, if the <xref:System.Web.UI.WebControls.SqlDataSource> control is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value and caching is also enabled.  
  
 A unique cache entry is created for every combination of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>, and <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> properties. Multiple <xref:System.Web.UI.WebControls.SqlDataSource> controls can use the same cache entries in scenarios where the controls load the same data from the same underlying database.  
  
> [!IMPORTANT]
>  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user's access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public virtual bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a data retrieval operation is canceled when any parameter that is contained in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A&gt; collection evaluates to <see langword="null" />.</summary>
        <value>
          <see langword="true" /> if a data retrieval operation is canceled when a parameter contained in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A&gt; collection evaluated to <see langword="null" />; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the CancelSelectOnNullParameter property is stored in view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value indicating how the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control performs updates and deletes when data in a row in the underlying database changes during the time of the operation.</summary>
        <value>One of the <see cref="T:System.Web.UI.ConflictOptions" /> values. The default is the <see cref="T:System.Web.UI.ConflictOptions" /> value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ConflictDetection property determines whether parameters for old and new values are applied to the `Update` method. For example, if the command that is specified by the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property returns a <xref:System.Data.DataTable> object with the columns `Name` and `Number` and the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters are created for `Name` and `Number` for the `Update` method. If the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters are created for `Name`, `Number`, `original_Name`, and `original_Number`. (The exact name of the parameters for the original values depends on the <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> property.) The <xref:System.Web.UI.WebControls.SqlDataSource> control then determines if the `Update` method that is specified in the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property has parameters that match.  
  
 Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data. For example, one client reads data and presents it to a user, while another client reads the same data, and presents it to a different user. If both users update the data and submit it to the data storage, some unexpected result might occur, because both clients might update different values for the same data. This is considered a conflict. By setting the ConflictDetection property to the <xref:System.Web.UI.ConflictOptions> value, your `Update` method can then compare the old and new values to the original data source to detect conflicts and handle them, as necessary.  
  
 The ConflictDetection property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public virtual string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ADO.NET providerâ€“specific connection string that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control uses to connect to an underlying database.</summary>
        <value>A .NET Framework data providerâ€“specific string that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> uses to connect to the SQL database that it represents. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control can be used with a variety of ADO.NET providers and the syntax of the connection string that is used to connect to an underlying data source is specific to the provider.  
  
 When you configure a <xref:System.Web.UI.WebControls.SqlDataSource> control, you set the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property to the type of database (the default is <xref:System.Data.SqlClient?displayProperty=fullName>), and you set the ConnectionString property to a connection string that includes information that is required in order to connect to the database. The contents of a connection string differ depending on what type of database the data source control is accessing. For example, the <xref:System.Web.UI.WebControls.SqlDataSource> control requires a server name, database (catalog) name, and information about how to authenticate the user when connecting to a SQL Server. For information about the contents of connection strings, see the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property for the <xref:System.Data.SqlClient.SqlConnection> class, <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> property for the <xref:System.Data.OracleClient.OracleConnection> class, <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> property for the <xref:System.Data.OleDb.OleDbConnection> class, or the <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> property for the <xref:System.Data.Odbc.OdbcConnection> class.  
  
 If you change the ConnectionString property, the <xref:System.Web.UI.IDataSource.DataSourceChanged> event is raised, causing any controls that are bound to the <xref:System.Web.UI.WebControls.SqlDataSource> control to rebind.  
  
> [!IMPORTANT]
>  For information about storing a connection string, see [How To: Secure Connection Strings when Using Data Source Controls](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to set the ConnectionString property to connect to a Microsoft SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates a more complex scenario, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Microsoft Access database. In each case, the `connectionStrings` element of the Web.config file is shown first, followed by the ASP.NET page that contains the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 The following code example demonstrates how to set the ConnectionString property to connect to a SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_2.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_2.aspx)]  
  
 The following code example demonstrates a more complex scenario than the preceding code example, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Access database. Because the <xref:System.Web.UI.WebControls.SqlDataSource> is used with Access, the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is set to the <xref:System.Data.OleDb> provider, and the ConnectionString property is set to an appropriate connection string for a UNC-shared Access database. A <xref:System.Web.UI.WebControls.GridView> control displays orders with shipment dates. You can update an order by checking the appropriate check box, and then clicking the **Update** button.  
  
> [!IMPORTANT]
>  This example includes a password in plain text only for illustration purposes. In a production application, connection strings that include passwords should be encrypted. For more information, see [Protecting Connection Information](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_3.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_3.aspx)]  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_4.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_4.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView(string viewName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">The name of the data source view.</param>
        <summary>Creates a data source view object that is associated with the data source control.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> that is associated with the <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes that derive from the <xref:System.Web.UI.WebControls.SqlDataSource> class can override the CreateDataSourceView method to return strongly typed data source view objects.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataSourceMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data retrieval mode that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control uses to fetch data.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> values. The default is the  <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The data retrieval mode identifies how a <xref:System.Web.UI.WebControls.SqlDataSource> control retrieves data from the underlying database.  
  
 When the DataSourceMode property is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value, data is loaded into a <xref:System.Data.DataSet> object and stored in memory on the server. This enables scenarios where user interface controls, such as <xref:System.Web.UI.WebControls.GridView>, offer sorting, filtering, and paging capabilities.  
  
 When the DataSourceMode property is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value, data is retrieved by a <xref:System.Data.IDataReader> object, which is a forward-only, read-only cursor. The specific type of the <xref:System.Data.IDataReader> object depends on the NET data provider that the <xref:System.Web.UI.WebControls.SqlDataSource> uses, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. By default, the <xref:System.Web.UI.WebControls.SqlDataSource> control uses the provider for Microsoft SQL Server, the <xref:System.Data.SqlClient?displayProperty=fullName>, and the data reader is a <xref:System.Data.SqlClient.SqlDataReader> object.  
  
 If you change the DataSourceMode property, the <xref:System.Web.UI.IDataSource.DataSourceChanged> event is raised, causing any controls that are bound to the <xref:System.Web.UI.WebControls.SqlDataSource> to rebind.  
  
 The value of the DataSourceMode property is stored in view state.  
  
   
  
## Examples  
 The following code example demonstrates how to set the DataSourceMode property of the <xref:System.Web.UI.WebControls.SqlDataSource> control to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value for a scenario with a <xref:System.Web.UI.WebControls.ListBox> control that requires no sorting, paging, nor filtering.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_5_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_5_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The DataSourceMode property is not one of the values defined in the <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs a delete operation using the &lt;xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A&gt; SQL string and any parameters that are in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A&gt; collection.</summary>
        <returns>A value that represents the number of rows deleted from the underlying database.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the delete operation is performed, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> event. You can handle this event to examine the values of the parameters and to perform any preprocessing before a delete operation.  
  
 After the operation completes, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> event. You can handle this event to examine any return values and error codes and to perform any post-processing.  
  
 The Delete method is provided for programmatic access to the `Delete` method. If the <xref:System.Web.UI.WebControls.SqlDataSource> control is associated with a data-bound control, the data-bound control automatically calls the **Delete** method.  
  
 The Delete method delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control. To perform the operation, the <xref:System.Web.UI.WebControls.SqlDataSourceView> builds a <xref:System.Data.Common.DbCommand> object using the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text and any associated <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> values, and then executes the <xref:System.Data.Common.DbCommand> against the underlying database.  
  
   
  
## Examples  
 The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> property and call the Delete method when using data-bound controls, such as the <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call the Delete method on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the Delete method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_3_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_3_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> cannot establish a connection with the underlying data source.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the SQL string that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control uses to delete data from the underlying database.</summary>
        <value>An SQL string that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> uses to delete data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DeleteCommand represents an SQL query or the name of a stored procedure, and is used by the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method.  
  
 Because different database products use different varieties of SQL, the syntax of the SQL string depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the syntax of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the syntax of the parameter is `'@parameterName'`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `'?'`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 The DeleteCommand property can be an SQL string or the name of a stored procedure, if the database supports stored procedures.  
  
 The DeleteCommand property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
> [!IMPORTANT]
>  For security purposes, the DeleteCommand property is not stored in view state. Because it is possible to decode the contents of view state on the client, storing sensitive information about the database structure in view state could result in an information disclosure vulnerability.  
  
   
  
## Examples  
 The following code example demonstrates how to set the DeleteCommand text to delete an order from the Northwind database Orders table. Data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> renders a **Delete** button automatically when the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`. Additionally, when the **Delete** button is clicked, the <xref:System.Web.UI.WebControls.GridView> control automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method. Finally, because this code example deletes data, an event handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_45_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_45_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the text in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A&gt; property is an SQL statement or the name of a stored procedure.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> values. The default is the <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DeleteCommandType property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a delete operation has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Deleted event to examine the values of output parameters after a delete operation has completed. The output parameters are available from the <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> object that is associated with the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters collection that contains the parameters that are used by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A&gt; property from the <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> object that is associated with the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains the parameters used by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> property contains a parameterized SQL query, the DeleteParameters collection contains any <xref:System.Web.UI.WebControls.Parameter> objects that correspond to the parameter placeholders in the SQL string.  
  
> [!NOTE]
>  Make sure that no <xref:System.Web.UI.WebControls.BoundField> controls in the data-bound control that you bind to the <xref:System.Web.UI.WebControls.SqlDataSource> control have names that match any parameter names in the DeleteParameters collection. Parameters that have the same name as bound fields are excluded from the SQL command, and a "parameter was not supplied" error might result.  
  
 If the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the parameters are created for both the old and new values of the data. The parameters for the old values are named according to the <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> property.  
  
 Depending on the ADO.NET provider, the order of the parameters in the DeleteParameters collection might be important. The <xref:System.Data.OleDb?displayProperty=fullName> and <xref:System.Data.Odbc?displayProperty=fullName> providers associate the parameters in the collection according to the order in which the parameters appear in the parameterized SQL query. The <xref:System.Data.SqlClient?displayProperty=fullName> provider, which is the default ADO.NET provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, associates the parameters in the collection by matching the name of the parameter with the placeholder in the SQL query. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 The DeleteParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare DeleteParameters property and call the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method when using data-bound controls, such as <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_121_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_121_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a delete operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Deleting event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs the delete operation.  
  
 The connection to the underlying data source is not yet open when the event handler delegate is called. Therefore, you cannot cancel the operation directly by calling the <xref:System.Data.Common.DbCommand.Cancel%2A> method on the <xref:System.Data.Common.DbCommand> object that is exposed by the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> object. You can, however, cancel the database operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> object to `true`.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to handle the Deleting event that is raised before a <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation occurs. Because this example deletes data from the Northwind database, an <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_101_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_101_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control has data caching enabled.</summary>
        <value>
          <see langword="true" /> if data caching is enabled for the data source control; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control supports data caching. While data is cached, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the cache rather than from the underlying database. When the cache expires, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the underlying database, and then caches the data again.  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control automatically caches data when the EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before retrieving a fresh set.  
  
> [!IMPORTANT]
>  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user's access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching.  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> is set to 20 seconds. Because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> field by default, users of this page will see fresh data every 20 seconds.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_591_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_591_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The EnableCaching property is set to <see langword="true" /> when caching is not supported by the <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a filtering expression that is applied when the &lt;xref:System.Web.UI.WebControls.SqlDataSource.Select%2A&gt; method is called.</summary>
        <value>A string that represents a filtering expression applied when data is retrieved using the &lt;xref:System.Web.UI.WebControls.SqlDataSource.Select%2A&gt; method.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FilterExpression property value is a format string expression (a string that is processed by the <xref:System.String.Format%2A?displayProperty=fullName> method) that uses the values in the FilterExpression collection for any substitution parameters included in the string. The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataView.RowFilter%2A> property, because the filter expression is applied to the <xref:System.Data.DataView.RowFilter%2A> property of the <xref:System.Data.DataView> object that is returned from executing the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method. For more information, see <xref:System.Data.DataColumn.Expression%2A>.  
  
 If you add parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection, you can also include format string placeholders (for example, `"{0}")` in the expression to substitute for parameter values. The placeholders are replaced according to the index of the parameter in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. If an object in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection is `null`, the object will be replaced by an empty string.  
  
 You can include parameters in the FilterExpression property. If the parameter is a string or character type, enclose the parameter in single quotation marks. Quotation marks are not required, if the parameter is a numeric type. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection contains the parameters that are evaluated for the placeholders that are found in the FilterExpression property.  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control supports filtering data only when in the <xref:System.Web.UI.WebControls.SqlDataSourceMode> mode.  
  
 The FilterExpression property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve data from the Northwind database and filter it using a FilterExpression string and the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. The FilterExpression property is applied any time the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the FilterExpression contains a placeholder for a filter parameter, which is contained in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the selection for the <xref:System.Web.UI.WebControls.DropDownList> control causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_89_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_89_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The FilterExpression property was set and the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> is in <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> mode.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a filter operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Filtering event to perform validation operations on filter parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs a filter operation. You can cancel the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> object to `true`. The event is raised only if the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property is set.  
  
 The Filtering event delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of parameters that are associated with any parameter placeholders that are in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A&gt; string.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains a set of parameters associated with any parameter placeholders found in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The parameters in the FilterParameters collection are associated with any parameters that are specified in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property. The parameter placeholders that are specified in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property are matched by order to parameter objects in the FilterParameters collection when the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is called.  
  
 The FilterParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve data from the Northwind database and filter it using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and FilterParameters properties. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control is applied anytime the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property contains a placeholder for a filter parameter, which is contained in the FilterParameters collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the <xref:System.Web.UI.WebControls.DropDownList> selection causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1207_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1207_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderFactory">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbProviderFactory GetDbProviderFactory() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <see cref="T:System.Data.Common.DbProviderFactory" /> object that is associated with the ADO.NET provider that is identified by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A&gt; property.</summary>
        <returns>A <see cref="T:System.Data.Common.DbProviderFactory" /> that represents the identified ADO.NET provider; otherwise, and instance of the <see cref="N:System.Data.SqlClient" />, if no provider is set.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.Common.DbProviderFactory> property is used by the <xref:System.Web.UI.WebControls.SqlDataSource> control to create the correct ADO.NET connection, command, and parameter objects when interacting with a database.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">The name of the view to retrieve. Because the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> supports only one view, `viewName` is ignored.</param>
        <summary>Gets the named data source view that is associated with the data source control.</summary>
        <returns>The <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> named "Table" that is associated with the <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control supports only one data source view. As with all data source view objects, the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the data source control defines its capabilities, performs all work that is necessary to retrieve data from the underlying database, and performs operations, such as sorting, inserting, deleting, and updating.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="viewName" /> is <see langword="null" /> or something other than `Table`.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a collection of names representing the list of view objects that are associated with the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control.</summary>
        <returns>An &lt;xref:System.Collections.ICollection&gt; that contains the names of the views associated with the <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control supports only one view on its underlying data, named `"Table"`. The GetViewNames method returns a single-element collection of this one view name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs an insert operation using the &lt;xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A&gt; SQL string and any parameters that are in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A&gt; collection.</summary>
        <returns>A value that represents the number of rows inserted into the underlying database.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before the insert operation is performed, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event. You can handle this event to examine the values of the parameters and to perform any preprocessing before the Insert operation. To perform an insert operation, the <xref:System.Web.UI.WebControls.SqlDataSourceView> object builds an <xref:System.Data.Common.DbCommand> object using the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> text and any associated <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> properties, and then executes the <xref:System.Data.Common.DbCommand> object against the underlying database.  
  
 After the operation completes, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event. You can handle this event to examine any return values and error codes and to perform any post-processing.  
  
 The Insert method is provided for programmatic access to the `Insert` method. If the <xref:System.Web.UI.WebControls.SqlDataSource> control is associated with a data-bound control, the data-bound control automatically calls the `Insert` method.  
  
 The Insert method delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and then the <xref:System.Web.UI.WebControls.DropDownList> is refreshed.  
  
> [!IMPORTANT]
>  This example includes a text box that accepts user input, which is a potential security threat and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  
  
> [!NOTE]
>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_101_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_101_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> cannot establish a connection with the underlying data source.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the SQL string that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control uses to insert data into the underlying database.</summary>
        <value>An SQL string that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> uses to insert data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InsertCommand represents either an SQL query or the name of a stored procedure, and is used by the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method.  
  
 Because different database products use different varieties of SQL, the syntax of the SQL string depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `'@parameterName'`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `'?'`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 The InsertCommand can be an SQL string or the name of a stored procedure, if the data source supports stored procedures.  
  
 This property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
> [!IMPORTANT]
>  For security purposes, the InsertCommand property is not stored is view state. Because it is possible to decode the contents of view state on the client, storing sensitive information about the database structure in view state could result in an information disclosure vulnerability.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The second code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row into the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  
  
> [!NOTE]
>  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  
  
 The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values into the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  
  
> [!IMPORTANT]
>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_1.aspx)]  
  
 The following code example demonstrates how to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  
  
 Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  
  
 If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  
  
 Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_2.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the text in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A&gt; property is an SQL statement or the name of a stored procedure.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> values. The default is the <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InsertCommandType property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.GridView> control. It also demonstrates how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  
  
 The <xref:System.Web.UI.WebControls.GridView> control displays a set of data and the <xref:System.Web.UI.WebControls.DetailsView> displays the details for a particular row. If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. The stored procedure name is set in the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property and identified as a stored procedure by setting the InsertCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value.  
  
 After data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_948_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_948_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an insert operation has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Inserted event to examine the values of output parameters after an insert operation has completed. The output parameters are available from the <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> object that is associated with the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  
  
> [!NOTE]
>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  
  
 Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  
  
 If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  
  
 Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the Inserted event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_73_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_73_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before an insert operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Inserting event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs the insert operation. The connection to the underlying data source is not yet open when the event handler delegate is called. Therefore, you cannot cancel the operation directly by calling the <xref:System.Data.Common.DbCommand.Cancel%2A> method on the <xref:System.Data.Common.DbCommand> object that is exposed by the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> property. You can, however, cancel the database operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> object to `true`.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  
  
> [!NOTE]
>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  
  
 Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  
  
 If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  
  
 Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the `DataBind` method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_151_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_151_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters collection that contains the parameters that are used by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A&gt; property from the <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> object that is associated with the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains the parameters used by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InsertParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 If the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property contains a parameterized SQL query, the InsertParameters collection contains any <xref:System.Web.UI.WebControls.Parameter> objects that correspond to the parameter placeholders in the SQL string.  
  
 Depending on the ADO.NET provider, the order of the parameters in the InsertParameters collection might be important. The <xref:System.Data.OleDb?displayProperty=fullName> and <xref:System.Data.Odbc?displayProperty=fullName> providers associate the parameters in the collection according to the order that the parameters appear in the parameterized SQL query. The <xref:System.Data.SqlClient?displayProperty=fullName> provider, which is the default ADO.NET provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, associates the parameters in the collection by matching the name of the parameter with a placeholder alias in the SQL query. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  
  
> [!IMPORTANT]
>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  
  
> [!NOTE]
>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_596_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_596_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An object that represents the state of the <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</param>
        <summary>Loads the state of the properties in the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control that need to be persisted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LoadViewState method is used to load the previously saved view state of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a format string to apply to the names of any parameters that are passed to the &lt;xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A&gt; or &lt;xref:System.Web.UI.WebControls.SqlDataSource.Update%2A&gt; method.</summary>
        <value>A string that represents a format string applied to the names of any <paramref name="oldValues" /> parameters passed to the &lt;xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A&gt; or &lt;xref:System.Web.UI.WebControls.SqlDataSource.Update%2A&gt; methods. The default is "{0}".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OldValuesParameterFormatString format string is applied only to primary keys, such as those that are identified by the `DataKeyNames` property of the associated data-bound control, or in delete and update scenarios where the <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value and a set of `oldValues` are passed to the corresponding data method. In this case, the format string is applied to each parameter name in the `oldValues` collection.  
  
 Two common scenarios where you might change the OldValuesParameterFormatString property are as follows:  
  
-   To differentiate between old and new values in updates. When the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters for both the original and new values are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. Without the formatting string, two parameters with the same name would be created for each data field. By changing the name of the original value parameter, you can compare the data to the original data source to detect conflicts and compare key values.  
  
-   Some visual designers implement a particular naming scheme for original values and keys.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Adds a <see cref="E:System.Web.UI.Page.LoadComplete" /> event handler to the <see cref="T:System.Web.UI.Page" /> control that contains the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The event handler that is added by the <xref:System.Web.UI.WebControls.SqlDataSource> object updates the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> values. If the values are updated, the <xref:System.Web.UI.IDataSource.DataSourceChanged> event is raised, causing any controls that are bound to the <xref:System.Web.UI.WebControls.SqlDataSource> control to rebind.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public virtual string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the .NET Framework data provider that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control uses to connect to an underlying data source.</summary>
        <value>The name of the data provider that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> uses; otherwise, the ADO.NET provider for Microsoft SQL Server, if no provider is set. The default is the ADO.NET provider for Microsoft SQL Server.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The .NET Framework includes the following data providers:  
  
-   The <xref:System.Data.SqlClient?displayProperty=fullName> provider is the default .NET Framework Data Provider for SQL Server.  
  
-   The <xref:System.Data.OleDb?displayProperty=fullName> provider is the .NET Framework Data Provider for OLE DB.  
  
-   The <xref:System.Data.Odbc?displayProperty=fullName> provider is the .NET Framework Data Provider for ODBC.  
  
-   The <xref:System.Data.OracleClient?displayProperty=fullName> provider is the .NET Framework Data Provider for Oracle.  
  
 The ProviderName property is never set to the name of an unmanaged ADO.NET provider, such as `MSDAORA`. For more information, see [Selecting Data Using the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 If you change the ProviderName property, the <xref:System.Web.UI.IDataSource.DataSourceChanged> event is raised, causing any controls that are bound to the <xref:System.Web.UI.WebControls.SqlDataSource> to rebind.  
  
 A list of available providers is specified in the `DbProviderFactories` subsection of the `system.data` section of the Machine.config file.  
  
   
  
## Examples  
 This section contains two code examples. The first code demonstrates how to connect to a SQL Server database using the default .NET Framework Data Provider for SQL Server for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. The second code example demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>.  
  
 The following code example demonstrates how to connect to a SQL Server database using the default data provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. Whenever the ProviderName property is not explicitly set, the default provider is used. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is provider-specific.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_1.aspx)]  
  
 The following code example, which is functionally the same as the preceding code example, demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN) that is used to connect to the ODBC database.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_2.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the current view state of the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control.</summary>
        <returns>An object that contains the saved state of the <see cref="T:System.Web.UI.WebControls.SqlDataSource" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">A <see cref="T:System.Web.UI.DataSourceSelectArguments" /> object that is used to request operations on the data beyond basic data retrieval.</param>
        <summary>Retrieves data from the underlying database by using the &lt;xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A&gt; SQL string and any parameters that are in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A&gt; collection.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerable&gt; list of data rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Select method is automatically called during the <xref:System.Web.UI.Control.PreRender> phase of the page life cycle. It is called by data-bound controls that have been attached to a <xref:System.Web.UI.WebControls.SqlDataSource> control through their <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property.  
  
 The <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> method returns a <xref:System.Data.DataView> object if the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value. The <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> method returns a <xref:System.Data.IDataReader> object if the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value. Close the <xref:System.Data.IDataReader> object when you have finished reading the data.  
  
 Before the Select operation is performed, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> event. You can handle this event to examine the values of the parameters and to perform any processing before the Select operation.  
  
 After the Select operation completes, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Selected> event. You can handle this event to examine any return values and error codes and to perform any post-processing.  
  
 If the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property is set to <xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName> and caching is enabled, the <xref:System.Web.UI.WebControls.SqlDataSource> object retrieves data from and saves data to the cache during the Select operation. The cache is created, discarded, or refreshed based on the caching behavior that is specified by the combination of the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> properties.  
  
> [!IMPORTANT]
>  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user's access to the data. If you expect more than one user to access the data, and you want each retrieval of data to be verified by the security configurations for the database, do not use caching.  
  
 If the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property is set to <xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName> and a <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property has been specified, the filter expression is evaluated with any supplied <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties and the resulting filter is applied to the list of data during the Select operation.  
  
 The Select method delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control. To perform a data retrieval operation, the <xref:System.Web.UI.WebControls.SqlDataSourceView> builds a <xref:System.Data.Common.DbCommand> object by using the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text and any associated <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> values, and then executes the <xref:System.Data.Common.DbCommand> against the underlying database.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following examples show how to programmatically call the Select method and set values based on the result of the query. The following example shows the declarative code for the Web controls.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_1.aspx)]  
  
 The following example shows how to programmatically call the Select method. The <xref:System.Web.UI.WebControls.SqlDataSource> control returns an integer. The value of the integer is used to set the text of a <xref:System.Web.UI.WebControls.Label> control and to determine whether to display a <xref:System.Web.UI.WebControls.HyperLink> control.  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_2.vb)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> object cannot establish a connection with the underlying data source.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the SQL string that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control uses to retrieve data from the underlying database.</summary>
        <value>An SQL string or the name of a stored procedure that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> uses to retrieve data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectCommand property represents an SQL query or the name of a stored procedure, and is used by the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method to retrieve data from a SQL Server database. If you use an asterisk (*) in the Select command to select all columns, and if you use automatic code generation to perform update or delete operations, make sure that no columns have spaces in their names.  
  
 Because different database products use different varieties of SQL, the syntax of the SQL string depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `'@parameterName'`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `'?'`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 The SelectCommand property can be an SQL string or the name of a stored procedure, if the data source supports stored procedures.  
  
 The SelectCommand property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
> [!IMPORTANT]
>  For security purposes, the SelectCommand property is not stored is view state. Because it is possible to decode the contents of view state on the client, storing sensitive information about the database structure in view state could result in an information disclosure vulnerability.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  
  
 In both examples, there is no need to explicitly call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method because the data-bound controls that are attached to the data source control through the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property will automatically call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method during the <xref:System.Web.UI.Control.PreRender> phase.  
  
 The following code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_1.aspx)]  
  
 The following code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control. The SelectCommand property can be an SQL query or the name of a stored procedure, if the data source supports stored procedures.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_2.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the text in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A&gt; property is an SQL query or the name of a stored procedure.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> values. The default is the <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectCommandType property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
   
  
## Examples  
 The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to the name of a stored procedure and the SelectCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value, in order to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_358_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_358_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a data retrieval operation has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Selected event to examine the values of output parameters after a data retrieval operation has completed. The output parameters are available from the <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> object that is associated with the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a data retrieval operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Selecting event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs the select operation. The select arguments are available from the <xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs> object that is associated with the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters collection that contains the parameters that are used by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A&gt; property from the <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> object that is associated with the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains the parameters used by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property contains a parameterized SQL query, the SelectParameters collection contains any <xref:System.Web.UI.WebControls.Parameter> objects that correspond to the parameter placeholders in the SQL string.  
  
 Depending on the ADO.NET provider, the order of the parameters in the SelectParameters collection might be important. The <xref:System.Data.OleDb?displayProperty=fullName> and <xref:System.Data.Odbc?displayProperty=fullName> providers associate the parameters in the collection according to the order that the parameters appear in the parameterized SQL query. The <xref:System.Data.SqlClient?displayProperty=fullName> provider, which is the default ADO.NET provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, associates the parameters in the collection by matching the name of the parameter with a placeholder alias in the SQL query. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 The SelectParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server by setting the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to an SQL query. The SQL query is parameterized and the placeholder in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property is matched to the <xref:System.Web.UI.WebControls.ControlParameter> object that is added to the SelectParameters collection. The <xref:System.Web.UI.WebControls.DropDownList> control, which the <xref:System.Web.UI.WebControls.ControlParameter> is bound to, acts as a filter for what is displayed in the <xref:System.Web.UI.WebControls.ListBox> control.  
  
 For information about other types of parameters you can use, see the <xref:System.Web.UI.WebControls.Parameter> class overview.  
  
> [!NOTE]
>  Because the parameter is used in a WHERE clause, the use of the SelectParameters property in the code example is functionally equivalent to using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1230_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1230_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of a stored procedure parameter that is used to sort retrieved data when data retrieval is performed using a stored procedure.</summary>
        <value>The name of a stored procedure parameter used to sort retrieved data when data retrieval is performed using a stored procedure.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> property is evaluated only when the SQL command that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> property is the name of a stored procedure. In this case, if the SortParameterName property is set, it contains the name of a parameter that is used to sort the results of the stored procedure.  
  
 If the <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> property is set, it is prepended to the <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a semicolon-delimited string that indicates which databases and tables to use for the Microsoft SQL Server cache dependency.</summary>
        <value>A string that indicates which databases and tables to use for the SQL Server cache dependency.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control supports an optional expiration policy based on the <xref:System.Web.Caching.SqlCacheDependency> object for the data cache (the service must be configured for the database server).  
  
 The SqlCacheDependency string identifies databases and tables according to the same format that is used by the `@ Page` directive, where the first part of the string is a connection string to a Microsoft SQL Server database, followed by a colon delimiter, and finally the name of the database table (for example, `"connectionstring1:table1"`). If the SqlCacheDependency property depends on more than one table, the connection string-and-table name pairs are separated by semicolons (for example, `"connectionstring1:table1";connectionstring2:table2"`).  
  
> [!IMPORTANT]
>  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user's access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching.  
  
   
  
## Examples  
 The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.SqlDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.SqlDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is refreshed by the <xref:System.Web.UI.WebControls.SqlDataSource> control the next time the database is polled.  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_795_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_795_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tracks view state changes to the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control so that the changes can be stored in the <see cref="T:System.Web.UI.StateBag" /> object for the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TrackViewState method is overridden to mark the starting point to begin tracking and saving changes to the control as part of the view state for the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs an update operation using the &lt;xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A&gt; SQL string and any parameters that are in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A&gt; collection.</summary>
        <returns>A value that represents the number of rows updated in the underlying database.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Update method is automatically called by the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.FormView> controls during postback if the data has been changed. For data that has been changed in other controls, the Update method can be explicitly called on postback during the <xref:System.Windows.Forms.Form.Load> event.  
  
 Before the Update operation is performed, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Updating> event. You can handle this event to examine the values of the parameters and to perform any preprocessing before an Update operation.  
  
 After the Update operation completes, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Updated> event. You can handle this event to examine any return values and error codes and to perform any post-processing.  
  
 The Update method delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control. To perform an update operation, the <xref:System.Web.UI.WebControls.SqlDataSourceView> builds a <xref:System.Data.Common.DbCommand> object using the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> text and any associated <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> properties, and then executes the <xref:System.Data.Common.DbCommand> object against the underlying database.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Updating> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The second code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control.  
  
 The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is set with a parameterized SQL statement, and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the Update method explicitly.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_1.aspx)]  
  
 The following code example demonstrates how to display data that is retrieved from a SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_2.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_2.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> cannot establish a connection with the underlying data source.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the SQL string that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control uses to update data in the underlying database.</summary>
        <value>An SQL string that the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> uses to update data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UpdateCommand represents an SQL query or the name of a stored procedure, and is used by the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method.  
  
 Because different database products use different varieties of SQL, the syntax of the SQL string depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `'@parameterName'`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `'?'`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 The UpdateCommand property can be an SQL string or the name of a stored procedure, if the data source supports stored procedures.  
  
 The UpdateCommand property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
> [!IMPORTANT]
>  For security purposes, the UpdateCommand property is not stored is view state. Because it is possible to decode the contents of view state on the client, storing sensitive information about the database structure in view state could result in an information disclosure vulnerability.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 This section contains two code examples. The first code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a Microsoft SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control.  
  
 The following code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection, inferring the parameters from the <xref:System.Web.UI.WebControls.BoundField> objects, and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** link on the editable <xref:System.Web.UI.WebControls.GridView> is selected. This example also includes some post-processing: after a record is updated, a notification e-mail message is sent.  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_1.aspx)]  
  
 The following code example, which is functionally identical to the preceding code example, demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> is set to the ADO.NET provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>, and the <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN).  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_2.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the text in the &lt;xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A&gt; property is an SQL statement or the name of a stored procedure.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> values. The default is the <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UpdateCommandType property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an update operation has completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Updated event to examine the values of output parameters after an update operation has completed. The output parameters are available from the <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> object that is associated with the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to display and update data that is retrieved from an ODBC database in a <xref:System.Web.UI.WebControls.GridView> control. After a record is successfully updated, the Updated event is handled by an event handler to perform a post-processing step where an e-mail notification is sent.  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_103_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_103_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters collection that contains the parameters that are used by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A&gt; property from the <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> control that is associated with the <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> that contains the parameters used by the &lt;xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property contains a parameterized SQL query, the UpdateParameters collection contains any <xref:System.Web.UI.WebControls.Parameter> objects that correspond to the parameter placeholders in the SQL string.  
  
 Parameter names might be affected by the <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> property, specifically if the name identifies a primary key, such as a key specified using the `DataKeyNames` property of the data-bound control, or in delete and update scenarios where the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value and a set of `oldValues` are passed to the corresponding data method. In this case, the format string is applied to each parameter name in the `oldValues` collection.  
  
 The order of the parameters in the UpdateParameters collection might be important, depending on the ADO.NET provider. The <xref:System.Data.OleDb?displayProperty=fullName> and <xref:System.Data.Odbc?displayProperty=fullName> providers associate the parameters in the collection according to the order that the parameters appear in the parameterized SQL query. The <xref:System.Data.SqlClient?displayProperty=fullName> provider, which is the default ADO.NET provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, associates the parameters in the collection by matching the name of the parameter with a placeholder alias in the SQL query. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).  
  
 The UpdateParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> is set with a parameterized SQL statement and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the UpdateParameters collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method explicitly.  
  
> [!IMPORTANT]
>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  
  
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1200_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1200_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before an update operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handle the Updating event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs the update operation. The connection to the underlying data source is not yet open when the event handler delegate is called. Therefore, you cannot directly cancel the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> database operation by calling the <xref:System.Data.Common.DbCommand.Cancel%2A> method on the <xref:System.Data.Common.DbCommand> object that is exposed by the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> object. You can, however, cancel the database operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> to `true`.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
> [!IMPORTANT]
>  Values are inserted into parameters without validation, which is a potential security threat. Use the Updating event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  
  
 [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_75_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_75_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>