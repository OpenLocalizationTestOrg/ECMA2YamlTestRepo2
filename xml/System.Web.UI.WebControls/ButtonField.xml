<Type Name="ButtonField" FullName="System.Web.UI.WebControls.ButtonField">
  <TypeSignature Language="C#" Value="public class ButtonField : System.Web.UI.WebControls.ButtonFieldBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ButtonField extends System.Web.UI.WebControls.ButtonFieldBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ButtonFieldBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a field that is displayed as a button in a data-bound control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ButtonField class is used by data-bound controls (such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>) to display a button for each record that is displayed. The ButtonField object is displayed differently depending on the data-bound control in which it is used. For example, the <xref:System.Web.UI.WebControls.GridView> control displays a ButtonField object as a column, while the <xref:System.Web.UI.WebControls.DetailsView> control displays it as a row.  
  
 Clicking a button in a button field raises the command event of the parent data-bound control. You can provide a custom routine to perform when a command button is clicked by providing an event handler for the command event.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.GridView> control raises the <xref:System.Web.UI.WebControls.GridView.RowCommand> event, while the <xref:System.Web.UI.WebControls.DetailsView> control raises the <xref:System.Web.UI.WebControls.DetailsView.ItemCommand> event.  
  
 To determine the index of the record that raises the command event, use the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> property of the event argument that is passed to the command event for the data-bound control. The ButtonField class automatically populates the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> property with the appropriate index value.  
  
 To specify the type of button to display, use the <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> property. When displaying a link or command button, use the <xref:System.Web.UI.WebControls.ButtonField.Text%2A> property to specify the caption to display in the buttons.  
  
> [!NOTE]
>  If you set the <xref:System.Web.UI.WebControls.ButtonField.Text%2A> property, all buttons in a ButtonField share the same caption.  
  
 Alternatively, you can bind the ButtonField object to a field in a data source. This allows you to display different captions for the buttons in the ButtonField object. The values that are in the specified field are used for the text captions of the buttons. Set the <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> property to bind a ButtonField object to a field in a data source.  
  
 When displaying an image button, use the <xref:System.Web.UI.WebControls.ButtonField.ImageUrl%2A> property to specify the image to display for the buttons in the ButtonField object.  
  
> [!NOTE]
>  All buttons in a ButtonField object share the same image.  
  
 You can hide a ButtonField object in a data-bound control by setting the <xref:System.Web.UI.WebControls.DataControlField.Visible%2A> property to `false`.  
  
 The ButtonField object allows you to customize its header and footer sections. To display a caption in the header or footer section, set the <xref:System.Web.UI.WebControls.DataControlField.HeaderText%2A> or <xref:System.Web.UI.WebControls.DataControlField.FooterText%2A> properties, respectively. Instead of displaying text in the header section, you can display an image by setting the <xref:System.Web.UI.WebControls.DataControlField.HeaderImageUrl%2A> property. To hide the header section in a ButtonField object, set the <xref:System.Web.UI.WebControls.ButtonFieldBase.ShowHeader%2A> property to `false`.  
  
> [!NOTE]
>  Some data-bound controls (such as the <xref:System.Web.UI.WebControls.GridView> control) can show or hide only the entire header section of the control. These data-bound controls do not support the <xref:System.Web.UI.WebControls.ButtonFieldBase.ShowHeader%2A> property for an individual button field. To show or hide the entire header section of a data-bound control (if available), use the `ShowHeader` property for the control.  
  
 You also can customize the appearance of the ButtonField object (font color, background color, and so on) by setting the style properties for the different parts of the field. The following table lists the different style properties.  
  
|Style property|The style settings for|  
|--------------------|----------------------------|  
|<xref:System.Web.UI.WebControls.DataControlField.ControlStyle%2A>|The child Web server controls of the ButtonField.|  
|<xref:System.Web.UI.WebControls.DataControlField.FooterStyle%2A>|The footer section of the ButtonField.|  
|<xref:System.Web.UI.WebControls.DataControlField.HeaderStyle%2A>|The header section of the ButtonField.|  
|<xref:System.Web.UI.WebControls.DataControlField.ItemStyle%2A>|The data items in the ButtonField.|  
  
   
  
## Examples  
 The following code example demonstrates how to use a ButtonField object to display a column of command buttons in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[ButtonField#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_176_1.aspx)]
 [!code-cs[ButtonField#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_176_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ButtonField ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ButtonField" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ButtonField constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.ButtonField> class. This constructor is commonly used when adding fields to a dynamically created data-bound control.  
  
 To add a <xref:System.Web.UI.WebControls.ButtonField> object dynamically to a data-bound control, create a new <xref:System.Web.UI.WebControls.ButtonField> object, set its properties, and then add it to the field collection for the data-bound control. For example, if you are using the <xref:System.Web.UI.WebControls.GridView> control, add the <xref:System.Web.UI.WebControls.ButtonField> object to the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection.  
  
> [!NOTE]
>  Although you can add fields dynamically to a data-bound control, fields should be declared statically, and then shown or hidden, as appropriate. Statically declaring all of your fields reduces the size of the view state for the parent data-bound control.  
  
   
  
## Examples  
 The following code example demonstrates how to use the M:System.Web.UI.WebControls.ButtonField.#ctor constructor to add a <xref:System.Web.UI.WebControls.ButtonField> object dynamically to a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[ButtonFieldCtor#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_218_1.aspx)]
 [!code-cs[ButtonFieldCtor#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_218_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public virtual string CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a string that represents the action to perform when a button in a <see cref="T:System.Web.UI.WebControls.ButtonField" /> object is clicked.</summary>
        <value>The name of the action to perform when a button in the <see cref="T:System.Web.UI.WebControls.ButtonField" /> is clicked.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CommandName property to associate a command name, such as `"Add"` or `"Remove"`, with the buttons in the <xref:System.Web.UI.WebControls.ButtonField> object. You can set the CommandName property to any string that identifies the action to perform when the command button is clicked. You can then programmatically determine the command name in an event handler and perform the appropriate actions.  
  
> [!NOTE]
>  All buttons in a <xref:System.Web.UI.WebControls.ButtonField> object share the same command name.  
  
 Data-bound controls recognize certain command names and automatically raise and handle the appropriate events for the control. The following command names are recognized:  
  
-   `"Cancel"`  
  
-   `"Delete"`  
  
-   `"Edit"`  
  
-   `"Insert"`  
  
-   `"New"`  
  
-   `"Page"`  
  
-   `"Select"`  
  
-   `"Sort"`  
  
-   `"Update"`  
  
 To invoke paging, set the CommandName to `"Page"` and the <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> of the contained <xref:System.Web.UI.WebControls.Button> control to `"First"`, `"Last"`, `"Prev"`, `"Next"`, or a page number. However, since the <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> for a <xref:System.Web.UI.WebControls.ButtonField> control is always the integer row index, a <xref:System.Web.UI.WebControls.ButtonField> control is not suitable for invoking paging. Similarly, while you can invoke sorting by setting the CommandName to `"Sort"`, the <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> property for a <xref:System.Web.UI.WebControls.ButtonField> control is always the integer row index. For this reason, a <xref:System.Web.UI.WebControls.ButtonField> control is not suitable for invoking sorting. For custom command names, such as `"Add"` and `"Remove"`, you need to write the event code to check the command name and perform some custom action. For more information, see <xref:System.Web.UI.WebControls.DataControlCommands>.  
  
> [!NOTE]
>  Not all command names are recognized by every data-bound controls. For example, `"New"` is not recognized by the <xref:System.Web.UI.WebControls.GridView> control and `"Select"` is not recognized by the <xref:System.Web.UI.WebControls.DetailsView> control.  
  
 The value of this property is stored in view state.  
  
   
  
## Examples  
 The following code example demonstrates how to use the CommandName property to specify a command name for the buttons in a <xref:System.Web.UI.WebControls.ButtonField> object of a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-vb[ButtonField#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_922_1.aspx)]
 [!code-cs[ButtonField#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_922_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyProperties">
      <MemberSignature Language="C#" Value="protected override void CopyProperties (System.Web.UI.WebControls.DataControlField newField);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CopyProperties(class System.Web.UI.WebControls.DataControlField newField) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newField" Type="System.Web.UI.WebControls.DataControlField" />
      </Parameters>
      <Docs>
        <param name="newField">The <see cref="T:System.Web.UI.WebControls.DataControlField" /> to which to copy the properties of the current <see cref="T:System.Web.UI.WebControls.ButtonField" />.</param>
        <summary>Copies the properties of the current <see cref="T:System.Web.UI.WebControls.ButtonField" /> object to the specified <see cref="T:System.Web.UI.WebControls.DataControlField" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ButtonFieldBase.CopyProperties%2A> method is a helper method that is used by the <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A?displayProperty=fullName> method to copy the properties of the current <xref:System.Web.UI.WebControls.ButtonFieldBase>-derived object to the <xref:System.Web.UI.WebControls.DataControlField> object that was created by the <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateField">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.DataControlField CreateField ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.DataControlField CreateField() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataControlField</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns a new instance of the <see cref="T:System.Web.UI.WebControls.ButtonField" /> class.</summary>
        <returns>A new instance of the  <see cref="T:System.Web.UI.WebControls.ButtonField" /> class.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateField method is a helper method that is used by the <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A> method of the base class to create an empty <xref:System.Web.UI.WebControls.ButtonField> object to which to copy the properties of the current <xref:System.Web.UI.WebControls.ButtonField>-derived object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataTextField">
      <MemberSignature Language="C#" Value="public virtual string DataTextField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataTextField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the data field for which the value is bound to the &lt;xref:System.Web.UI.WebControls.Button.Text%2A&gt; property of the <see cref="T:System.Web.UI.WebControls.Button" /> control that is rendered by the <see cref="T:System.Web.UI.WebControls.ButtonField" /> object.</summary>
        <value>The name of the field to bind to the <see cref="T:System.Web.UI.WebControls.ButtonField" />. The default is an empty string (""), which indicates that the DataTextField property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> property of a <xref:System.Web.UI.WebControls.ButtonField> object is set to the <xref:System.Web.UI.WebControls.ButtonType> or <xref:System.Web.UI.WebControls.ButtonType> value, use the DataTextField property to specify the name of the field to bind to the <xref:System.Web.UI.WebControls.ButtonField> object. The values of the field are then displayed as the text for the buttons in the <xref:System.Web.UI.WebControls.ButtonField> object. Optionally, you can format the displayed text by setting the <xref:System.Web.UI.WebControls.ButtonField.DataTextFormatString%2A> property.  
  
 Instead of using the DataTextField property to bind a <xref:System.Web.UI.WebControls.ButtonField> object to a field from a data source, you can use the <xref:System.Web.UI.WebControls.ButtonField.Text%2A> property to display static text for the text of the buttons in the <xref:System.Web.UI.WebControls.ButtonField> object. When the <xref:System.Web.UI.WebControls.ButtonField.Text%2A> property is used, each button shares the same caption.  
  
> [!NOTE]
>  If the DataTextField and <xref:System.Web.UI.WebControls.ButtonField.Text%2A> properties are both set, the DataTextField property takes precedence.  
  
 The value of this property is stored in view state.  
  
   
  
## Examples  
 The following code example demonstrates how to use the DataTextField property to specify which field to display in a <xref:System.Web.UI.WebControls.ButtonField> column of a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-cs[ButtonFieldDataTextField#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1139_1.aspx)]
 [!code-vb[ButtonFieldDataTextField#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1139_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataTextFormatString">
      <MemberSignature Language="C#" Value="public virtual string DataTextFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataTextFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string that specifies the display format for the value of the field.</summary>
        <value>A format string that specifies the display format for the value of the field. The default is an empty string (""), which indicates that no special formatting is applied to the field value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DataTextFormatString property to specify a custom display format for the values that are displayed in the <xref:System.Web.UI.WebControls.ButtonField> object. If the DataTextFormatString property is not set, the value for the field is displayed without any special formatting.  
  
> [!NOTE]
>  The format string is applied only when the <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> property is set.  
  
 The format string can be any literal string and usually includes a placeholder for the value for the field. For example, in the format string `"Item Value: {0}"`, the `{0}` placeholder is replaced with the value for the field when it is displayed in the <xref:System.Web.UI.WebControls.ButtonField> object. The rest of the format string is displayed as literal text.  
  
> [!NOTE]
>  If the format string does not include a placeholder, the value for the field from the data source is not included in the final display text.  
  
 The placeholder consists of two parts, separated by a colon and wrapped in braces, in the form { `A` : `Bxx` }. The value before the colon (`A` in the general example) specifies the index for the field value in a zero-based list of parameters.  
  
> [!NOTE]
>  This `A` parameter is part of the formatting syntax. Because there is only one field value in each cell, this value can only be set to 0.  
  
 The colon and the values after the colon are optional. The character after the colon (`B` in the general example) specifies the format in which to display the value. The following table lists the common formats.  
  
|Format character|Description|  
|----------------------|-----------------|  
|`C`|Displays numeric values in currency format.|  
|`D`|Displays numeric values in decimal format.|  
|`E`|Displays numeric values in scientific (exponential) format.|  
|`F`|Displays numeric values in fixed format.|  
|`G`|Displays numeric values in general format.|  
|`N`|Displays numeric values in number format.|  
|`X`|Displays numeric values in hexadecimal format.|  
  
> [!NOTE]
>  Except for `X`, the format characters are not case sensitive. The `X` format character displays the hexadecimal characters in the case that is specified.  
  
 The value after the format character (`xx` in the general example) specifies the number of significant digits or decimal places to display. For example, the format string `"{0:F2}"` displays a fixed-point number with two decimal places.  
  
 For more information on formatting strings, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
 The value of this property is stored in view state.  
  
   
  
## Examples  
 The following code example demonstrates how to use the DataTextFormatString property to specify a custom display format for the values of a field.  
  
 [!code-cs[ButtonFieldDataTextField#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_654_1.aspx)]
 [!code-vb[ButtonFieldDataTextField#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_654_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FormatDataTextValue">
      <MemberSignature Language="C#" Value="protected virtual string FormatDataTextValue (object dataTextValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string FormatDataTextValue(object dataTextValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTextValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataTextValue">The field value to format.</param>
        <summary>Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.ButtonField" /> object.</summary>
        <returns>The field value converted to the format specified by the &lt;xref:System.Web.UI.WebControls.ButtonField.DataTextFormatString%2A&gt; property.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FormatDataTextValue method is a helper method that is used to transform a field value to the format that is specified by the <xref:System.Web.UI.WebControls.ButtonField.DataTextFormatString%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ImageUrl">
      <MemberSignature Language="C#" Value="public virtual string ImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the image to display for each button in the <see cref="T:System.Web.UI.WebControls.ButtonField" /> object.</summary>
        <value>The image to display for each button in the <see cref="T:System.Web.UI.WebControls.ButtonField" />. The default is an empty string (""), which indicates that the ImageUrl property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> property of a <xref:System.Web.UI.WebControls.ButtonField> object is set to the <xref:System.Web.UI.WebControls.ButtonType> value, use the ImageUrl property to specify the image to display for each button. This image can be in any file format (.jpg, .gif, .bmp, and so on), as long as the client browser supports that format.  
  
 The value of this property is stored in view state.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ImageUrl property to specify an image to display for each button in the <xref:System.Web.UI.WebControls.ButtonField> object. For this code example to display, you must provide your own image.  
  
 [!code-vb[ButtonFieldImageUrl#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_99_1.aspx)]
 [!code-cs[ButtonFieldImageUrl#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_99_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override bool Initialize (bool sortingEnabled, System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Initialize(bool sortingEnabled, class System.Web.UI.Control control) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortingEnabled" Type="System.Boolean" />
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="sortingEnabled">
          <see langword="true" /> to enable sorting; otherwise, <see langword="false" />.</param>
        <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.ButtonField" />.</param>
        <summary>Initializes the current <see cref="T:System.Web.UI.WebControls.ButtonField" /> object.</summary>
        <returns>
          <see langword="false" />, which indicates the control does not need to rebind to the data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Initialize method is called by the data control with which the <xref:System.Web.UI.WebControls.ButtonField> object is associated to perform basic object initialization for instances of the field, before the field is ever added to a rows collection. Data controls, such as <xref:System.Web.UI.WebControls.DetailsView> and <xref:System.Web.UI.WebControls.GridView>, call the <xref:System.Web.UI.WebControls.DataControlField.Initialize%2A> method in their `CreateChildControls` methods before other methods, such as `CreateRow`, are called to create specific rows with data.  
  
 Call The Initialize method when you are writing a custom data-bound control that uses <xref:System.Web.UI.WebControls.TableCell> objects to perform basic initialization for a <xref:System.Web.UI.WebControls.ButtonField> object. Implement this method if your <xref:System.Web.UI.WebControls.ButtonField>-derived type requires any object initialization before it populates <xref:System.Web.UI.WebControls.TableCell> objects with data or controls in the <xref:System.Web.UI.WebControls.ButtonField.InitializeCell%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InitializeCell">
      <MemberSignature Language="C#" Value="public override void InitializeCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlCellType cellType, System.Web.UI.WebControls.DataControlRowState rowState, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void InitializeCell(class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlCellType cellType, valuetype System.Web.UI.WebControls.DataControlRowState rowState, int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="cellType" Type="System.Web.UI.WebControls.DataControlCellType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cell">The <see cref="T:System.Web.UI.WebControls.DataControlFieldCell" /> to initialize.</param>
        <param name="cellType">A <see cref="T:System.Web.UI.WebControls.DataControlCellType" /> value that indicates the type of row (header, footer, or data).</param>
        <param name="rowState">One of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> values.</param>
        <param name="rowIndex">The zero-based index of the row.</param>
        <summary>Initializes the specified <see cref="T:System.Web.UI.WebControls.DataControlFieldCell" /> object to the specified row state.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InitializeCell method creates the button type that is specified by the <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> property and adds it to the <xref:System.Web.UI.Control.Controls%2A> collection of the <xref:System.Web.UI.WebControls.DataControlFieldCell> object. The <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> property of the <xref:System.Web.UI.WebControls.Button> control is set to `rowIndex`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the static caption that is displayed for each button in the <see cref="T:System.Web.UI.WebControls.ButtonField" /> object.</summary>
        <value>The caption displayed for each button in the <see cref="T:System.Web.UI.WebControls.ButtonField" />. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> property of a <xref:System.Web.UI.WebControls.ButtonField> object is set to the <xref:System.Web.UI.WebControls.ButtonType> or <xref:System.Web.UI.WebControls.ButtonType> value, use the Text property to display static text for the caption of the buttons in the <xref:System.Web.UI.WebControls.ButtonField>. Each button shares the same caption.  
  
 Instead of using the Text property to display static text in a <xref:System.Web.UI.WebControls.ButtonField> object, you can use the <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> property to bind the <xref:System.Web.UI.WebControls.ButtonField> to a field in a data source. The values of the field are then displayed as the caption of the buttons.  
  
> [!NOTE]
>  If the <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> and Text properties are both set, the <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> property takes precedence.  
  
 The value of this property is stored in view state.  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the Text property to specify the caption to display for each button in a <xref:System.Web.UI.WebControls.ButtonField> object.  
  
 [!code-vb[ButtonField#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_489_1.aspx)]
 [!code-cs[ButtonField#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_489_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValidateSupportsCallback">
      <MemberSignature Language="C#" Value="public override void ValidateSupportsCallback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ValidateSupportsCallback() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines whether the controls that are contained in a <see cref="T:System.Web.UI.WebControls.ButtonField" /> object support callbacks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ValidateSupportsCallback method is a helper method that is used to determine whether the controls that are contained in a <xref:System.Web.UI.WebControls.ButtonField> object support callbacks. This method is implemented as an empty method (a method that does not contain any code) to indicate that callbacks are supported.  
  
> [!NOTE]
>  The ValidateSupportsCallback method is used primarily by control developers.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>