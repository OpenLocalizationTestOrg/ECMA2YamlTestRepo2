<Type Name="WebColorConverter" FullName="System.Web.UI.WebControls.WebColorConverter">
  <TypeSignature Language="C#" Value="public class WebColorConverter : System.Drawing.ColorConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebColorConverter extends System.Drawing.ColorConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Drawing.ColorConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Converts a predefined color name or an RGB color value to and from a <see cref="T:System.Drawing.Color" /> object.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WebColorConverter class is used to convert a <xref:System.Drawing.Color?displayProperty=fullName> object to a predefined color name or an RGB color value. It is also used to convert a predefined color name or an RGB color value to a <xref:System.Drawing.Color?displayProperty=fullName> object.  
  
> [!CAUTION]
>  You should never access a type converter directly. Instead, call the appropriate converter by using <xref:System.ComponentModel.TypeDescriptor?displayProperty=fullName>. For more information, see the examples in the <xref:System.ComponentModel.TypeConverter?displayProperty=fullName> class overview.  
  
 The following list contains the sixteen predefined HTML color names you can use:  
  
-   Black  
  
-   Blue  
  
-   Cyan  
  
-   Gray  
  
-   Green  
  
-   Lime  
  
-   Magenta  
  
-   Maroon  
  
-   Navy  
  
-   Olive  
  
-   Purple  
  
-   Red  
  
-   Silver  
  
-   Teal  
  
-   White  
  
-   Yellow  
  
 You can also specify a custom color by using a hexadecimal number, preceded by the pound character (#), in the form `#RRGGBB`. `RR`, `GG`, and `BB` represent hexadecimal values from 0 to 255 that indicate the red, green, and blue components of a color, respectively. For example, the value `#0000FF` represents the color blue. It specifies the minimum value (`00`) for the red and green components, while specifying the maximum value (`FF`) for the blue component.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebColorConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebColorConverter" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that indicates the context of the object to convert.</param>
        <param name="culture">A &lt;xref:System.Globalization.CultureInfo&gt; object that represents information about a culture such as language, calendar system, and so on. This parameter is not used in this method. It is reserved for future versions of this method. You can optionally pass in <see langword="null" /> for this parameter.</param>
        <param name="value">The object to convert.</param>
        <summary>Converts the given value to the type of the converter.</summary>
        <returns>The object resulting from conversion.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> instance that indicates the context of the object to convert.</param>
        <param name="culture">A &lt;xref:System.Globalization.CultureInfo&gt; object that represents information about a culture such as language, calendar system, and so on. This parameter is not used in this method. It is reserved for future versions of this method. You can optionally pass in <see langword="null" /> for this parameter.</param>
        <param name="value">The object to convert.</param>
        <param name="destinationType">The type to convert to.</param>
        <summary>Converts the specified object to a specified type.</summary>
        <returns>The object resulting from conversion.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationType" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>