<Type Name="ImageMap" FullName="System.Web.UI.WebControls.ImageMap">
  <TypeSignature Language="C#" Value="public class ImageMap : System.Web.UI.WebControls.Image, System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImageMap extends System.Web.UI.WebControls.Image implements class System.Web.UI.IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Image</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("HotSpots")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "HotSpots")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Creates a control that displays an image on a page. When a hot spot region defined within the ImageMap control is clicked, the control either generates a postback to the server or navigates to a specified URL.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In this topic:  
  
-   [Introduction](#introduction)  
  
-   [Accessibility](#accessibility)  
  
-   [Declarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 Use the ImageMap control to create an image that contains defined hot spot regions. When a user clicks a hot spot region, the control can either generate a postback to the server or navigate to a specified URL. For example, you can use this control to display a map of a geographical region. When a user clicks a specific region on the map, the control navigates to a URL that provides additional data about the selected region. You can also use this control to generate a postback to the server and run specific code based on the hot spot region that was clicked. For example, you can use an ImageMap control to capture user responses such as votes. When a user clicks the hot spot region defined for yes votes, code is called to record a yes response in a database. When a user clicks on the hot spot region defined for no votes, a no response is recorded. You can also mix these two scenarios within a single ImageMap control. For example, you can specify one hot spot region to navigate to a URL and another hot spot region to post back to the server.  
  
 Use the <xref:System.Web.UI.WebControls.Image.ImageUrl%2A> property to specify the path to the image to display for the ImageMap control. You can define any number of <xref:System.Web.UI.WebControls.HotSpot> objects within an ImageMap control. You can use the <xref:System.Web.UI.WebControls.CircleHotSpot>, <xref:System.Web.UI.WebControls.RectangleHotSpot>, and <xref:System.Web.UI.WebControls.PolygonHotSpot> classes to define hot spot regions. Alternatively, you can derive from the abstract <xref:System.Web.UI.WebControls.HotSpot> class to define your own custom hot spot object.  
  
 There are two ways to specify the behavior of a <xref:System.Web.UI.WebControls.HotSpot> object in an ImageMap control when the <xref:System.Web.UI.WebControls.HotSpot> is clicked. You can use either the <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A> property on the ImageMap control or the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A> property on an individual <xref:System.Web.UI.WebControls.HotSpot> object. These properties are set using one of the <xref:System.Web.UI.WebControls.HotSpotMode> enumeration values. If both properties are set, the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A> property specified on each individual <xref:System.Web.UI.WebControls.HotSpot> object takes precedence over the <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A> property on the ImageMap control.  
  
 To navigate to a URL, set either the <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A?displayProperty=fullName> property or the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property to `HotSpotMode.Navigate`. Use the <xref:System.Web.UI.WebControls.HotSpot.NavigateUrl%2A> property to specify the URL to navigate to.  
  
 To generate a postback to the server, set either the <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A?displayProperty=fullName> property or the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property to `HotSpotMode.Postback`. Use the <xref:System.Web.UI.WebControls.HotSpot.PostBackValue%2A> property to specify a name for the hot spot region. This name will be passed in the <xref:System.Web.UI.WebControls.ImageMapEventArgs> event data when a postback event occurs. When a postback <xref:System.Web.UI.WebControls.HotSpot> is clicked, the <xref:System.Web.UI.WebControls.ImageMap.Click> event is raised. To programmatically control the actions performed when a postback <xref:System.Web.UI.WebControls.HotSpot> is clicked, provide an event handler for the <xref:System.Web.UI.WebControls.ImageMap.Click> event.  
  
 To cause all <xref:System.Web.UI.WebControls.HotSpot> objects in an ImageMap control to have the same behavior, use the <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A?displayProperty=fullName> property to specify the behavior. Then, either set the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property on each individual <xref:System.Web.UI.WebControls.HotSpot> object to `HotSpotMode.NotSet` or do not specify a value for the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property.  
  
 To specify different behaviors for <xref:System.Web.UI.WebControls.HotSpot> objects in an ImageMap, set the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property on each individual <xref:System.Web.UI.WebControls.HotSpot> object to either `HotSpotMode.Navigate` or `HotSpotMode.PostBack`.  
  
> [!NOTE]
>  If an ImageMap control's <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A?displayProperty=fullName> property or the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property on any of the <xref:System.Web.UI.WebControls.HotSpot> objects it contains is set to `HotSpotMode.NotSet` or is not set to a value, by default the behavior is `HotSpotMode.Navigate`.  
  
<a name="accessibility"></a>   
## Accessibility  
 For information about how to configure this control so that it generates markup that conforms to accessibility standards, see [Accessibility in Visual Studio and ASP.NET](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Controls and Accessibility](~/add/includes/ajax-current-ext-md.md).  
  
<a name="declarative_syntax"></a>   
## Declarative Syntax  
  
```  
<asp:ImageMap  
    AccessKey="string"  
    AlternateText="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CssClass="string"  
    DescriptionUrl="uri"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    HotSpotMode="NotSet|Navigate|PostBack|Inactive"  
    ID="string"  
    ImageAlign="NotSet|Left|Right|Baseline|Top|Middle|Bottom|  
        AbsBottom|AbsMiddle|TextTop"  
    ImageUrl="uri"  
    OnClick="Click event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    Target="string"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
>  
            <asp:CircleHotSpot  
                AccessKey="string"  
                AlternateText="string"  
                HotSpotMode="NotSet|Navigate|PostBack|Inactive"  
                NavigateUrl="uri"  
                PostBackValue="string"  
                Radius="integer"  
                TabIndex="integer"  
                Target="string|_blank|_parent|_search|_self|_top"  
                X="integer"  
                Y="integer"  
            />  
            <asp:PolygonHotSpot  
                AccessKey="string"  
                AlternateText="string"  
                Coordinates="string"  
                HotSpotMode="NotSet|Navigate|PostBack|Inactive"  
                NavigateUrl="uri"  
                PostBackValue="string"  
                TabIndex="integer"  
                Target="string|_blank|_parent|_search|_self|_top"  
            />  
            <asp:RectangleHotSpot  
                AccessKey="string"  
                AlternateText="string"  
                Bottom="integer"  
                HotSpotMode="NotSet|Navigate|PostBack|Inactive"  
                Left="integer"  
                NavigateUrl="uri"  
                PostBackValue="string"  
                Right="integer"  
                TabIndex="integer"  
                Target="string|_blank|_parent|_search|_self|_top"  
                Top="integer"  
            />  
</asp:ImageMap>  
```  
  
   
  
## Examples  
 The following code example demonstrates how to declaratively create an ImageMap control that contains two <xref:System.Web.UI.WebControls.CircleHotSpot> objects. The <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property is set to `HotSpotMode.Navigate`, which causes the page to navigate to the specified URL each time a user clicks one of the circle hot spot regions. For this example to work correctly, you must supply your own image for the <xref:System.Web.UI.WebControls.Image.ImageUrl%2A> property and update the path to the image appropriately so that the application can locate it.  
  
 [!code-vb[ImageMapClass1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_21_1.aspx)]
 [!code-cs[ImageMapClass1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_21_1.aspx)]  
  
 The following code example demonstrates how to declaratively create an ImageMap control that contains two <xref:System.Web.UI.WebControls.RectangleHotSpot> objects. The <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A?displayProperty=fullName> property is set to `HotSpotMode.PostBack`, which causes the page to post back to the server each time a user clicks one of the hot spot regions. For this example to work correctly, you must supply your own image for the <xref:System.Web.UI.WebControls.Image.ImageUrl%2A> property and update the path to the image appropriately so that the application can locate it.  
  
 [!code-cs[ImageMapClass2#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_21_2.aspx)]
 [!code-vb[ImageMapClass2#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_21_2.aspx)]  
  
 The following code example demonstrates how to create an ImageMap control that contains hot spots with different behaviors. The background area is a defined as a single <xref:System.Web.UI.WebControls.RectangleHotSpot> that posts back to the server. Three <xref:System.Web.UI.WebControls.RectangleHotSpot> objects are defined in the same region. Each of these hot spots looks like a button and navigates to a URL. When an ImageMap control is clicked in a region where two hot spots overlap, the hot spot that is declared first has precedence. In this example, the button hot spots are declared first and the background hot spot that contains them is declared last. Therefore, the user gets the behavior of the button <xref:System.Web.UI.WebControls.RectangleHotSpot> object, not the background <xref:System.Web.UI.WebControls.RectangleHotSpot> object, when the user clicks a button hot spot. For this example to work correctly, you must supply your own image for the <xref:System.Web.UI.WebControls.Image.ImageUrl%2A> property and update the path to the image appropriately so that the application can locate it.  
  
 [!code-vb[ImageMapClass3#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_21_3.aspx)]
 [!code-cs[ImageMapClass3#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_21_3.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImageMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ImageMap" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.ImageMap> class.  
  
   
  
## Examples  
 The following code example demonstrates how to programmatically create an <xref:System.Web.UI.WebControls.ImageMap> control and add it to a page.  
  
 [!code-vb[ImageMap.Cstr#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_225_1.aspx)]
 [!code-cs[ImageMap.Cstr#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_225_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        <summary>Adds the HTML attributes and styles of an <see cref="T:System.Web.UI.WebControls.ImageMap" /> control to be rendered to the specified <see cref="T:System.Web.UI.HtmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used primarily by control developers to insert the appropriate attributes and styles to the <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> output stream for an <xref:System.Web.UI.WebControls.ImageMap> control. This method overrides <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ImageMapEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ImageMapEventHandler Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ImageMapEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a <see cref="T:System.Web.UI.WebControls.HotSpot" /> object in an <see cref="T:System.Web.UI.WebControls.ImageMap" /> control is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Click event is raised when a <xref:System.Web.UI.WebControls.HotSpot> object in an <xref:System.Web.UI.WebControls.ImageMap> control is clicked. To allow a <xref:System.Web.UI.WebControls.HotSpot> to raise the Click event, you must first set either the <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A> property on the <xref:System.Web.UI.WebControls.ImageMap> control or the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A> property on the <xref:System.Web.UI.WebControls.HotSpot> object to `HotSpotMode.Postback`.  
  
 To programmatically control the actions performed when a postback <xref:System.Web.UI.WebControls.HotSpot> is clicked, provide an event handler for the Click event that contains the code to run when the event is raised.  
  
 Raising an event invokes the event handler through a delegate. For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to create an <xref:System.Web.UI.WebControls.ImageMap> control that contains two <xref:System.Web.UI.WebControls.RectangleHotSpot> objects. The <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A?displayProperty=fullName> property is set to `HotSpotMode.PostBack`, which causes the page to post back to the server each time a user clicks one of the hot spot regions. The `VoteMap_Clicked` event handler handles the click event for the <xref:System.Web.UI.WebControls.ImageMap> control. For this example to work correctly, you must supply your own image for the <xref:System.Web.UI.MobileControls.Image.ImageUrl%2A> property and update the path to the image appropriately so that the application can locate it.  
  
 [!code-cs[ImageMapClass2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_6_1.aspx)]
 [!code-vb[ImageMapClass2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_6_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public override bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control can respond to user interaction.</summary>
        <value>
          <see langword="true" /> if the control is to respond to user clicks; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 With the Enabled property, you can enable or disable the <xref:System.Web.UI.WebControls.ImageMap> control at run time.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HotSpotMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.HotSpotMode HotSpotMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.HotSpotMode HotSpotMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.HotSpotMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default behavior for the <see cref="T:System.Web.UI.WebControls.HotSpot" /> objects of an <see cref="T:System.Web.UI.WebControls.ImageMap" /> control when the <see cref="T:System.Web.UI.WebControls.HotSpot" /> objects are clicked.</summary>
        <value>One of the <see cref="T:System.Web.UI.WebControls.HotSpotMode" /> enumeration values. The default is <see langword="NotSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the HotSpotMode property to specify the default click behavior of the <xref:System.Web.UI.WebControls.HotSpot> objects within an <xref:System.Web.UI.WebControls.ImageMap> control. This property is set using one of the <xref:System.Web.UI.WebControls.HotSpotMode> enumeration values. The following table lists the possible values.  
  
|Item|Description|  
|----------|-----------------|  
|`Inactive`|The <xref:System.Web.UI.WebControls.HotSpot> object does not have any behavior.|  
|`NotSet`|The <xref:System.Web.UI.WebControls.HotSpot> object uses the behavior set by the <xref:System.Web.UI.WebControls.ImageMap> control's HotSpotMode property. If the <xref:System.Web.UI.WebControls.ImageMap> control does not define the behavior, the <xref:System.Web.UI.WebControls.HotSpot> objects all navigate to a URL.|  
|`Navigate`|The <xref:System.Web.UI.WebControls.HotSpot> objects navigate to a URL.|  
|`PostBack`|The <xref:System.Web.UI.WebControls.HotSpot> objects generate a postback to the server.|  
  
 You can specify a <xref:System.Web.UI.WebControls.HotSpot> object's behavior using either the HotSpotMode property of the <xref:System.Web.UI.WebControls.ImageMap> control or the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property of each individual <xref:System.Web.UI.WebControls.HotSpot> object. If both properties are set, the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property specified on each individual <xref:System.Web.UI.WebControls.HotSpot> object takes precedence over the HotSpotMode property on the <xref:System.Web.UI.WebControls.ImageMap> control.  
  
 When you set the HotSpotMode property of the <xref:System.Web.UI.WebControls.ImageMap> control, note that the `HotSpotMode.NotSet` and `HotSpotMode.Navigate` values have the same behavior: both navigate to a URL. When you specify `HotSpotMode.NotSet` for the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property of an individual <xref:System.Web.UI.WebControls.HotSpot> object, that <xref:System.Web.UI.WebControls.HotSpot> determines its behavior from the value of the HotSpotMode property of the <xref:System.Web.UI.WebControls.ImageMap> control.  
  
 If you specify `HotSpotMode.Navigate` for the HotSpotMode property, the page navigates to a URL when the <xref:System.Web.UI.WebControls.HotSpot> is clicked. Use the <xref:System.Web.UI.WebControls.HotSpot.NavigateUrl%2A> property to specify the URL to navigate to.  
  
 If you specify `HotSpotMode.PostBack` for the HotSpotMode property, the page generates a postback to the server when the <xref:System.Web.UI.WebControls.HotSpot> is clicked. Use the <xref:System.Web.UI.WebControls.HotSpot.PostBackValue%2A> property to specify the name of the hot spot region. This name will be passed in the <xref:System.Web.UI.WebControls.ImageMapEventArgs> event data when a postback event occurs. When a postback <xref:System.Web.UI.WebControls.HotSpot> is clicked, the <xref:System.Web.UI.WebControls.ImageMap.Click> event is raised. To programmatically control the actions performed when a postback <xref:System.Web.UI.WebControls.HotSpot> is clicked, provide an event handler for the <xref:System.Web.UI.WebControls.ImageMap.Click> event.  
  
 If you specify `HotSpotMode.Inactive` for the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property, the <xref:System.Web.UI.WebControls.HotSpot> object does not have any behavior when it is clicked. You can use this value to create an inactive hot spot within a larger active hot spot. This option is provided to allow you to create more complex hot spot zones within an <xref:System.Web.UI.WebControls.ImageMap> control.  
  
 To create an inactive area within an active hot spot, you must specify the inactive hot spot before the active hot spot in the <xref:System.Web.UI.WebControls.ImageMap> control. For example, the following <xref:System.Web.UI.WebControls.ImageMap> defines an active ring by specifying an inactive circular hot spot within a larger active circular hot spot:  
  
```  
<asp:ImageMap ID="SaturnImage"   
       ImageUrl="~/saturn.PNG"   
       runat="server" OnClick="SaturnImage_Click">  
    <asp:CircleHotSpot AlternateText="planet" HotSpotMode=PostBack  
          PostBackValue="planet" Radius=40 X=100 Y=100 />  
  
    <asp:CircleHotSpot HotSpotMode=Inactive   
          Radius=60 X=100 Y=100 />  
    <asp:CircleHotSpot AlternateText="rings" HotSpotMode=PostBack  
          PostBackValue="rings" Radius=80 X=100 Y=100 />  
</asp:ImageMap>  
```  
  
 To cause all <xref:System.Web.UI.WebControls.HotSpot> objects in an <xref:System.Web.UI.WebControls.ImageMap> control to have the same behavior, use the HotSpotMode property on the <xref:System.Web.UI.WebControls.ImageMap> control to specify the behavior. Then, either set the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A> property on each individual <xref:System.Web.UI.WebControls.HotSpot> object to `HotSpotMode.NotSet` or do not specify a value for the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property.  
  
 To specify different behaviors for <xref:System.Web.UI.WebControls.HotSpot> objects in an <xref:System.Web.UI.WebControls.ImageMap> control, set the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property on each individual <xref:System.Web.UI.WebControls.HotSpot> object to either `HotSpotMode.Navigate`, `HotSpotMode.PostBack`, or `HotSpotMode.Inactive`.  
  
> [!NOTE]
>  If an <xref:System.Web.UI.WebControls.ImageMap> control's HotSpotMode property or the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A?displayProperty=fullName> property on any of the <xref:System.Web.UI.WebControls.HotSpot> objects it contains is either set to `HotSpotMode.NotSet` or not set to a value, by default the behavior is `HotSpotMode.Navigate`.  
  
   
  
## Examples  
 The following code example demonstrates how to declaratively create an <xref:System.Web.UI.WebControls.ImageMap> control that contains two <xref:System.Web.UI.WebControls.RectangleHotSpot> objects. The HotSpotMode property is set to `HotSpotMode.PostBack`, which causes the page to post back to the server each time a user clicks one of the hot spot regions. The <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A> property is not set on each of the <xref:System.Web.UI.WebControls.RectangleHotSpot> objects because they get their behavior from the HotSpotMode property. For this example to work correctly, you must supply your own image for the <xref:System.Web.UI.WebControls.Image.ImageUrl%2A> property and update the path to the image appropriately so that the application can locate it.  
  
 [!code-vb[ImageMap.HotSpotMode1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_438_1.aspx)]
 [!code-cs[ImageMap.HotSpotMode1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_438_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified type is not one of the <see cref="T:System.Web.UI.WebControls.HotSpotMode" /> enumeration values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HotSpots">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.HotSpotCollection HotSpots { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.HotSpotCollection HotSpots" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.HotSpotCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.HotSpot" /> objects that represents the defined hot spot regions in an <see cref="T:System.Web.UI.WebControls.ImageMap" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.HotSpotCollection" /> object that represents the defined hot spot regions in an <see cref="T:System.Web.UI.WebControls.ImageMap" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the HotSpots property to programmatically manage the hot spot regions in an <xref:System.Web.UI.WebControls.ImageMap> control. You can use the HotSpots property to add, insert, remove, and retrieve <xref:System.Web.UI.WebControls.HotSpot> objects. For more information, see <xref:System.Web.UI.WebControls.HotSpotCollection>.  
  
   
  
## Examples  
 The following code example demonstrates how to programmatically create an <xref:System.Web.UI.WebControls.ImageMap> control and add two <xref:System.Web.UI.WebControls.CircleHotSpot> objects to it. The HotSpots property is used to access the <xref:System.Web.UI.WebControls.HotSpotCollection> for the <xref:System.Web.UI.WebControls.ImageMap> control and add the <xref:System.Web.UI.WebControls.CircleHotSpot> objects to it. For this example to work correctly, you must supply your own image for the <xref:System.Web.UI.WebControls.Image.ImageUrl%2A> property and update the path to the image appropriately so that the application can locate it.  
  
 [!code-vb[ImageMap.Cstr#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1193_1.aspx)]
 [!code-cs[ImageMap.Cstr#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1193_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An &lt;xref:System.Object&gt; that represents the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control to restore.</param>
        <summary>Restores view-state information for the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control from a previous page request that was saved by the &lt;xref:System.Web.UI.WebControls.ImageMap.SaveViewState%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code.  However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" /> is not a valid &lt;xref:System.Web.UI.Control.ViewState%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (System.Web.UI.WebControls.ImageMapEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.Web.UI.WebControls.ImageMapEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.ImageMapEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An argument of type <see cref="T:System.Web.UI.WebControls.ImageMapEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ImageMap.Click" /> event for the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ImageMap.Click> event is raised when a <xref:System.Web.UI.WebControls.HotSpot> object in an <xref:System.Web.UI.WebControls.ImageMap> control is clicked. To allow a <xref:System.Web.UI.WebControls.HotSpot> to raise the <xref:System.Web.UI.WebControls.ImageMap.Click> event, you must first set either the <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A> property on the <xref:System.Web.UI.WebControls.ImageMap> control or the <xref:System.Web.UI.WebControls.HotSpot.HotSpotMode%2A> property on the <xref:System.Web.UI.WebControls.HotSpot> object to `HotSpotMode.Postback`.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The argument for the event.</param>
        <summary>Raises events for the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control when a form is posted back to the server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The page passes the value of the `eventArgument` parameter to the RaisePostBackEvent method of the <xref:System.Web.UI.WebControls.ImageMap> control. The <xref:System.Web.UI.WebControls.ImageMap> raises a <xref:System.Web.UI.WebControls.ImageMap.Click> event for the <xref:System.Web.UI.WebControls.HotSpot> object that was clicked.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control content.</param>
        <summary>Sends the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to render on the client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used primarily by control developers. When developing a custom server control derived from the <xref:System.Web.UI.WebControls.ImageMap> control, you can override this method to generate content for the <xref:System.Web.UI.WebControls.ImageMap>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves any changes to an <see cref="T:System.Web.UI.WebControls.ImageMap" /> control's view-state that have occurred since the time the page was posted back to the server.</summary>
        <returns>Returns the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control's current view state. If there is no view state associated with the control, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used primarily by control developers.  
  
 View state is the accumulation of the values of a server control's properties. These values are automatically placed in the server control's <xref:System.Web.UI.Control.ViewState%2A> property, which is an instance of the <xref:System.Web.UI.StateBag> class. This property's value is then persisted to a string object after the save state stage of the server control life cycle. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 When view state is saved, this string object is returned to the client as a variable that is stored in an `Hidden` HTML element. When you author custom server controls, you can improve efficiency by overriding this method and modifying your server control's `ViewState` property. For more information, see [ASP.NET State Management Overview](../Topic/ASP.NET%20State%20Management%20Overview.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The argument for the event.</param>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you should use the <xref:System.Web.UI.WebControls.ImageMap.RaisePostBackEvent%2A?displayProperty=fullName> method to raise an event for the <xref:System.Web.UI.WebControls.ImageMap> control when a form is posted back to the server.  
  
 The IPostBackEventHandler.RaisePostBackEvent method is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.ImageMap> instance is cast to an <xref:System.Web.UI.IPostBackEventHandler> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public virtual string Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the target window or frame that displays the Web page content linked to when the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control is clicked.</summary>
        <value>The target window or frame that displays the specified Web page when the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control is clicked. Values must begin with a letter in the range of A through Z (case-insensitive), except for the following special values, which begin with an underscore:  
  
 <list type="table">  
<item>  
<term> <see langword="_blank " />  
  
 </term>  
<description> Renders the content in a new window without frames.  
  
 </description>  
</item>  
<item>  
<term> <see langword="_parent " />  
  
 </term>  
<description> Renders the content in the immediate frameset parent.  
  
 </description>  
</item>  
<item>  
<term> <see langword="_search" />  
  
 </term>  
<description> Renders the content in the search pane.  
  
 </description>  
</item>  
<item>  
<term> <see langword="_self " />  
  
 </term>  
<description> Renders the content in the frame with focus.  
  
 </description>  
</item>  
<item>  
<term> <see langword="_top " />  
  
 </term>  
<description> Renders the content in the full window without frames.  
  
 </description>  
</item>  
</list>  
  
 <block subset="none" type="note">  
 Check your browser documentation to determine if the <see langword="_search" /> value is supported.  For example, Microsoft Internet Explorer 5.0 and later support the <see langword="_search" /> target value.  
  
</block>  
  
 The default value is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Target property to specify the frame or window that displays the Web page r when the <xref:System.Web.UI.WebControls.ImageMap> control is clicked. The Web page is specified by setting the <xref:System.Web.UI.WebControls.Image.ImageUrl%2A> property.  
  
 The Target property is used when the value of the <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A> property is `HotSpotMode.Navigate`; it is ignored when the value of the <xref:System.Web.UI.WebControls.ImageMap.HotSpotMode%2A> property is `HotSpotMode.PostBack`.  
  
 If the Target property is not set, the browser or window with focus refreshes when the <xref:System.Web.UI.WebControls.ImageMap> control is clicked.  
  
> [!NOTE]
>  The Target property renders as a `target` attribute. The `target` attribute on `anchor` elements is not allowed in the XHTML 1.1 document type definition. Do not set the Target property if the rendered output for the <xref:System.Web.UI.WebControls.ImageMap> must be XHTML 1.1-compliant. For more information, see [XHTML Standards in Visual Studio and ASP.NET](~/add/includes/ajax-current-ext-md.md).  
>   
>  When creating accessible Web pages, it is strongly recommended that you avoid using the Target property to target another window. For more information, see [Accessibility in Visual Studio and ASP.NET](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Controls and Accessibility](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tracks view-state changes to the <see cref="T:System.Web.UI.WebControls.ImageMap" /> control so they can be stored in the control's <see cref="T:System.Web.UI.StateBag" /> object. This object is accessible through the &lt;xref:System.Web.UI.Control.ViewState%2A?displayProperty=fullName&gt; property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called automatically by ASP.NET when the <xref:System.Web.UI.WebControls.ImageMap> control is initialized.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>