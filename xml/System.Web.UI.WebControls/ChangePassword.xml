<Type Name="ChangePassword" FullName="System.Web.UI.WebControls.ChangePassword">
  <TypeSignature Language="C#" Value="public class ChangePassword : System.Web.UI.WebControls.CompositeControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChangePassword extends System.Web.UI.WebControls.CompositeControl implements class System.Web.UI.INamingContainer" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.CompositeControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ChangedPassword")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ChangePasswordDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a user interface that enable users to change their Web site password.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In this topic:  
  
-   [Introduction](#Introduction)  
  
-   [Sending E-mail Messages](#sending_email_messages)  
  
-   [Views](#views)  
  
-   [Styles and Templates](#styles_and_templates)  
  
-   [Validation Groupings](#validation_groupings)  
  
-   [Access Keys and Tab Indexes](#access_keys_and_tab_indexes)  
  
-   [Accessibility](#accessibility)  
  
-   [Accessing Controls During Page_Load and Page_Init](#accessing_controls_during_page_load_and_page_init)  
  
-   [Applying CSS Styles](#applying_styles)  
  
-   [Declarative Syntax#](#DeclarativeSyntax)  
  
<a name="Introduction"></a>   
## Introduction  
 Use the ChangePassword control on a page to enable your Web site users to change the passwords they use to log on to your Web site.  
  
> [!NOTE]
>  If you are not familiar with the set of login controls available in ASP.NET, read [ASP.NET Login Controls Overview](~/add/includes/ajax-current-ext-md.md) before continuing. For a list of other topics related to login controls and membership, see [Managing Users by Using Membership](~/add/includes/ajax-current-ext-md.md).  
  
> [!IMPORTANT]
>  Transmitting passwords over HTTP is a potential security threat. HTTP transmissions can be viewed or compromised by malicious users. To improve security when using login controls, you should use HTTPS protocol with secure sockets layer (SSL) encryption to ensure that the user's password cannot be read during postback. For more information, see [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
 The ChangePassword control uses the membership provider defined in the <xref:System.Web.UI.WebControls.ChangePassword.MembershipProvider%2A> property to change the password stored in the membership provider data store for the Web site. If you do not assign a membership provider, the ChangePassword control uses the default membership provider defined in the  section of the Web.config file. The ChangePassword control enables users to perform the following actions:  
  
-   Change their password if they are logged on.  
  
-   Change their password if they are not logged on, as long as the page that contains the ChangePassword control allows anonymous access and the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property is `true`.  
  
-   Change the password for a user account, even if they are logged on as a different user. This requires the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property to be `true`.  
  
 Setting the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property to `true` displays the User Name text box, which allows the user to type in a user name. If the user is logged on, the <xref:System.Web.UI.WebControls.ChangePassword.UserName%2A> control is populated with the name of the logged-on user. After the password for the given user name is changed, the user is logged on to the account associated with the changed password, even if the user was not logged on to that account previously.  
  
> [!IMPORTANT]
>  Accepting user input is a potential security threat. Malicious users can send data that is intended to expose vulnerabilities or run programs that try generated passwords. To improve security when working with user input, you should use the validation features of your control and secure any data providers that are configured for your control. For more information, see [Securing Login Controls](../Topic/Securing%20Login%20Controls.md), [Basic Security Practices for Web Applications](~/add/includes/ajax-current-ext-md.md), and [Securing Membership](~/add/includes/ajax-current-ext-md.md).  
  
<a name="sending_email_messages"></a>   
## Sending E-mail Messages  
 The ChangePassword control can be configured to use e-mail services to send the new password to the user. To send e-mail messages to users from any of ASP.NET Web server controls, you must configure an e-mail server in the Web.config file for your application. For more information, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8).  
  
 E-mail messages are configured using the <xref:System.Web.UI.WebControls.MailDefinition> class. You must set the <xref:System.Web.UI.WebControls.MailDefinition.BodyFileName%2A> property to instruct ASP.NET to send e-mail.  
  
> [!IMPORTANT]
>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network "sniffing" applications. To improve security, use the mitigations that are described in [Securing Login Controls](../Topic/Securing%20Login%20Controls.md).  
  
> [!NOTE]
>  It is not possible to guarantee that a user will receive or view an e-mail message. To verify that a user has received a message, provide a confirmation link in the e-mail message that lets the user confirm that the notification was received.  
  
<a name="views"></a>   
## Views  
 The ChangePassword control has two states, or views:  
  
-   Change Password view   Requests the current password, and requires the user to type the new password twice for confirmation. If you allow users who are not logged on to change their passwords, set the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property to `true` to display the <xref:System.Web.UI.WebControls.ChangePassword.UserName%2A> control in Change Password view. The <xref:System.Web.UI.WebControls.ChangePassword.UserName%2A> control allows the user to provide their registered user name. If there is an error when changing the password, an error message is displayed in the Change Password view, allowing the user to try again.  
  
-   Success view   Provides confirmation that the password has been changed.  
  
    > [!IMPORTANT]
    >  The functionality for changing passwords and for continue and cancel is attached to any button that has the correct command name, regardless of which view the button is placed on. For example, a button with the value `commandname=changepassword` in the Success view will attempt to change the password and result in an exception.  
  
<a name="styles_and_templates"></a>   
## Styles and Templates  
 You can use an extensive set of style properties to customize the appearance of the ChangePassword control. Alternatively, you can apply custom templates to the two views if you need complete control over the appearance of the ChangePassword control. If you define a template for a view, the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> properties are applied. For a list of the controls that you must set in the view templates, see the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTemplate%2A> and <xref:System.Web.UI.WebControls.ChangePassword.SuccessTemplate%2A> properties. The ChangePassword control examines the content in the template and throws an exception if a required control is not found, is not named correctly, or is of the wrong type. For example, if you use the content in the template and set the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property to `true`, the ChangePassword will throw an exception if a <xref:System.Web.UI.WebControls.TextBox> or some other <xref:System.Web.UI.IEditableTextControl> control is not found for the user name.  
  
 The following table lists the ChangePassword control style properties and describes which UI element they affect. For a list of the properties to which each style applies, see the individual style property.  
  
|ChangePassword style property|UI element|  
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------|  
|<xref:System.Web.UI.WebControls.ChangePassword.CancelButtonStyle%2A>|Cancel button on the Change Password view.|  
|<xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordButtonStyle%2A>|Change Password button on the Change Password view.|  
|<xref:System.Web.UI.WebControls.ChangePassword.ContinueButtonStyle%2A>|Continue button on the Success view.|  
|<xref:System.Web.UI.WebControls.ChangePassword.FailureTextStyle%2A>|Error text displayed to the user.|  
|<xref:System.Web.UI.WebControls.ChangePassword.HyperLinkStyle%2A>|Hyperlinks to other pages.|  
|<xref:System.Web.UI.WebControls.ChangePassword.InstructionTextStyle%2A>|Instructional text on the page that describes how to use the ChangePassword control.|  
|<xref:System.Web.UI.WebControls.ChangePassword.LabelStyle%2A>|Labels for all input fields, such as text boxes.|  
|<xref:System.Web.UI.WebControls.ChangePassword.PasswordHintStyle%2A>|Hints for providing an acceptable password for the Web site.|  
|<xref:System.Web.UI.WebControls.ChangePassword.SuccessTextStyle%2A>|Text displayed to the user when the password has been successfully changed.|  
|<xref:System.Web.UI.WebControls.ChangePassword.TextBoxStyle%2A>|Text entry input fields.|  
|<xref:System.Web.UI.WebControls.ChangePassword.TitleTextStyle%2A>|Titles for the Change Password and Success views.|  
  
<a name="applying_styles"></a>   
## Applying CSS Styles  
 The ChangePassword control lets you specify CSS style rules in markup. If you use templates to customize the appearance of the ChangePassword control, you can specify CSS styles in the markup in the templates. In that case, no extra outer table is required. You can prevent the table from being rendered by setting the <xref:System.Web.UI.WebControls.ChangePassword.RenderOuterTable%2A> property to `false`.  
  
<a name="validation_groupings"></a>   
## Validation Groupings  
 The ChangePassword control uses a validation group so that other fields on the same page as the ChangePassword control can be validated separately. By default, the <xref:System.Web.UI.Control.ID%2A> property of the ChangePassword control is used as the name of the validation group. For example, a ChangePassword control with the ID `"ChangePassword1"` will use a validation group name of `ChangePassword1` as well. To set the validation group that the ChangePassword control is part of, you must create a template with the control, and then change the validation group name.  
  
 To show error messages if a user leaves a <xref:System.Web.UI.WebControls.TextBox> control empty, add a <xref:System.Web.UI.WebControls.ValidationSummary> control to the page. Set the <xref:System.Web.UI.WebControls.ValidationSummary.ValidationGroup%2A> property of the <xref:System.Web.UI.WebControls.ValidationSummary> control to the <xref:System.Web.UI.Control.ID%2A> property of the ChangePassword control.  
  
<a name="access_keys_and_tab_indexes"></a>   
## Access Keys and Tab Indexes  
 For information about how to use the <xref:System.Web.UI.WebControls.WebControl.AccessKey%2A> property and the <xref:System.Web.UI.WebControls.WebControl.TabIndex%2A> property of a ChangePassword control, see [Accessibility in Visual Studio and ASP.NET](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Controls and Accessibility](~/add/includes/ajax-current-ext-md.md).  
  
<a name="accessibility"></a>   
## Accessibility  
 For information about how to configure this control so that it generates markup that conforms to accessibility standards, see [Accessibility in Visual Studio and ASP.NET](../Topic/Accessibility%20in%20Visual%20Studio%20and%20ASP.NET.md) and [ASP.NET Controls and Accessibility](../Topic/ASP.NET%20Controls%20and%20Accessibility.md).  
  
<a name="accessing_controls_during_page_load_and_page_init"></a>   
## Accessing Controls During Page_Load and Page_Init  
 ChangePassword control properties represented by text boxes, such as <xref:System.Web.UI.WebControls.ChangePassword.UserName%2A> and <xref:System.Web.UI.WebControls.ChangePassword.CurrentPassword%2A>, are accessible during all phases of the page life cycle. In particular, during the Page_Init and Page_Load phases, these properties have the same value they had when the ChangePassword control was rendered. If the user changes the value of the <xref:System.Web.UI.WebControls.ChangePassword.UserName%2A> property by modifying the <xref:System.Web.UI.WebControls.ChangePassword.UserName%2A> text box, the new value will be available when the changed event is raised, which occurs after the Page_Load phase. Therefore, if you set the value of the <xref:System.Web.UI.WebControls.ChangePassword.UserName%2A> property in the Page_Init phase or Page_Load phase and provide a custom handler for a ChangePassword event, any change that the user makes in the <xref:System.Web.UI.WebControls.ChangePassword.UserName%2A> text box overrides the value set in the Page_Init or Page_Load phase.  
  
<a name="DeclarativeSyntax"></a>   
## Declarative Syntax  
  
```  
<asp:ChangePassword  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderPadding="integer"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CancelButtonImageUrl="uri"  
    CancelButtonText="string"  
    CancelButtonType="Button|Image|Link"  
    CancelDestinationPageUrl="uri"  
    ChangePasswordButtonImageUrl="uri"  
    ChangePasswordButtonText="string"  
    ChangePasswordButtonType="Button|Image|Link"  
    ChangePasswordFailureText="string"  
    ChangePasswordTitleText="string"  
    ConfirmNewPasswordLabelText="string"  
    ConfirmPasswordCompareErrorMessage="string"  
    ConfirmPasswordRequiredErrorMessage="string"  
    ContinueButtonImageUrl="uri"  
    ContinueButtonText="string"  
    ContinueButtonType="Button|Image|Link"  
    ContinueDestinationPageUrl="uri"  
    CreateUserIconUrl="uri"  
    CreateUserText="string"  
    CreateUserUrl="uri"  
    CssClass="string"  
    DisplayUserName="True|False"  
    EditProfileIconUrl="uri"  
    EditProfileText="string"  
    EditProfileUrl="uri"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    HelpPageIconUrl="uri"  
    HelpPageText="string"  
    HelpPageUrl="uri"  
    ID="string"  
    InstructionText="string"  
    MailDefinition-BodyFileName="uri"  
    MailDefinition-CC="string"  
    MailDefinition-From="string"  
    MailDefinition-IsBodyHtml="True|False"  
    MailDefinition-Priority="Normal|Low|High"  
    MailDefinition-Subject="string"  
    MembershipProvider="string"  
    NewPasswordLabelText="string"  
    NewPasswordRegularExpression="string"  
    NewPasswordRegularExpressionErrorMessage="string"  
    NewPasswordRequiredErrorMessage="string"  
    OnCancelButtonClick="CancelButtonClick event handler"  
    OnChangedPassword="ChangedPassword event handler"  
    OnChangePasswordError="ChangePasswordError event handler"  
    OnChangingPassword="ChangingPassword event handler"  
    OnContinueButtonClick="ContinueButtonClick event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSendingMail="SendingMail event handler"  
    OnSendMailError="SendMailError event handler"  
    OnUnload="Unload event handler"  
    PasswordHintText="string"  
    PasswordLabelText="string"  
    PasswordRecoveryIconUrl="uri"  
    PasswordRecoveryText="string"  
    PasswordRecoveryUrl="uri"  
    PasswordRequiredErrorMessage="string"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    SuccessPageUrl="uri"  
    SuccessText="string"  
    SuccessTitleText="string"  
    TabIndex="integer"  
    ToolTip="string"  
    UserName="string"  
    UserNameLabelText="string"  
    UserNameRequiredErrorMessage="string"  
    Visible="True|False"  
    Width="size"  
>  
        <CancelButtonStyle/>  
        <ChangePasswordButtonStyle/>  
        <ChangePasswordTemplate>  
            <!-- child controls -->  
        </ChangePasswordTemplate>  
        <ContinueButtonStyle/>  
        <FailureTextStyle/>  
        <HyperLinkStyle/>  
        <InstructionTextStyle/>  
        <LabelStyle/>  
        <MailDefinition  
            BodyFileName="uri"  
            CC="string"  
            From="string"  
            IsBodyHtml="True|False"  
            Priority="Normal|Low|High"  
            Subject="string"  
>  
                <EmbeddedObjects>  
                        <asp:EmbeddedMailObject  
                            Name="string"  
                            Path="uri"  
                        />  
                </EmbeddedObjects>  
        </MailDefinition>  
        <PasswordHintStyle/>  
        <SuccessTemplate>  
            <!-- child controls -->  
        </SuccessTemplate>  
        <SuccessTextStyle/>  
        <TextBoxStyle/>  
        <TitleTextStyle/>  
        <ValidatorTextStyle/>  
</asp:ChangePassword>  
```  
  
   
  
## Examples  
 The following code example shows how to set the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property to define a regular expression that checks passwords to ensure that they meet the following criteria:  
  
-   Are greater than six characters.  
  
-   Contain at least one digit.  
  
-   Contain at least one special (non-alphanumeric) character.  
  
 The password requirements contained in the <xref:System.Web.UI.WebControls.ChangePassword.PasswordHintText%2A> property are displayed to the user.  
  
 If the password entered by the user does not meet the requirements of the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpressionErrorMessage%2A> property is displayed to the user. If a new password is not entered, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRequiredErrorMessage%2A> property is displayed to the user.  
  
> [!NOTE]
>  The new password must meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
 [!code-cs[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_251_1.aspx)]
 [!code-vb[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_251_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangePassword ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to set the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property to define a regular expression that checks passwords to ensure that they meet the following criteria:  
  
-   Are greater than six characters.  
  
-   Contain at least one digit.  
  
-   Contain at least one special (non-alphanumeric) character.  
  
 The password requirements contained in the <xref:System.Web.UI.WebControls.ChangePassword.PasswordHintText%2A> property are displayed to the user.  
  
 If the password entered by the user does not meet the criteria, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpressionErrorMessage%2A> property is displayed to the user.  If a new password is not entered, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRequiredErrorMessage%2A> property is displayed to the user.  
  
> [!NOTE]
>  The new password must meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
 [!code-cs[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_206_1.aspx)]
 [!code-vb[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_206_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderPadding">
      <MemberSignature Language="C#" Value="public virtual int BorderPadding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BorderPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the amount of padding, in pixels, inside the border and the designated area for the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>The number of pixels of space between the contents of a <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control and the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control's border. The default value is 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the BorderPadding property is stored in view state.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the BorderPadding property is less than -1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelButtonClick">
      <MemberSignature Language="C#" Value="public event EventHandler CancelButtonClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CancelButtonClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks the Cancel button to cancel changing a password.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelButtonCommandName">
      <MemberSignature Language="C#" Value="public static readonly string CancelButtonCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string CancelButtonCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the <see langword="CommandName" /> value of the Cancel button. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CancelButtonCommandName field to represent the `CommandName` value of the Cancel button. This is useful when configuring any button to mimic the functionality of the Cancel button of the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 To assign cancel functionality to any <xref:System.Web.UI.WebControls.Button> control contained in the <xref:System.Web.UI.WebControls.ChangePassword> control, set the <xref:System.Web.UI.WebControls.Button.CommandName%2A> property of the button to the string that is contained in the CancelButtonCommandName field.  
  
 The Cancel button can appear on the ChangePassword template or the Success template. Clicking the Cancel button on the Success template will not undo the password change; it will clear the text boxes. To add custom functionality to the Cancel button, create an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.CancelButtonClick> event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelButtonImageUrl">
      <MemberSignature Language="C#" Value="public virtual string CancelButtonImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CancelButtonImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of an image to display with the Cancel button, if the Cancel button is configured by the &lt;xref:System.Web.UI.WebControls.ChangePassword.CancelButtonType%2A&gt; property to be an image button.</summary>
        <value>The URL of the image to display with the Cancel button. The default is &lt;xref:System.String&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelButtonStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style CancelButtonStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style CancelButtonStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of the Cancel button on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Style" /> object that defines the appearance of the Cancel button. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the CancelButtonStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color of the Cancel button. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the Cancel button. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the Cancel button.  The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`. The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` setting is greater than 2.|  
|`BorderWidth`|The width of the border around the Cancel button.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the Cancel button. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the Cancel button text in bold type.|  
|`Font-Italic`|`true` to display the Cancel button text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the Cancel button text with a line above it.|  
|`Font-Size`|The size of the text in the Cancel button as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the Cancel button text as crossed out.|  
|`Font-Underline`|`true` to display the Cancel button text with an underline.|  
|`ForeColor`|The color of the text in the Cancel button. The color can be any of the <xref:System.Drawing.Color> properties.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelButtonText">
      <MemberSignature Language="C#" Value="public virtual string CancelButtonText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CancelButtonText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text displayed on the Cancel button.</summary>
        <value>The text to display on the Cancel button. The default is "Cancel".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default for the CancelButtonText property is "Cancel".  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelButtonType">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.ButtonType CancelButtonType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ButtonType CancelButtonType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ButtonType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of button to use for the Cancel button when rendering the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ButtonType" /> object that defines the type of button to render for the Cancel button. The property value can be one of the three <see cref="T:System.Web.UI.WebControls.ButtonType" /> enumeration values: <see langword="Button" />, <see langword="Image" />, or <see langword="Link" />. The default is <see langword="Button" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CancelButtonType property gets or sets the type (`Button`, `Image`, or `Link)` of Cancel button to use when rendering the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified <see cref="T:System.Web.UI.WebControls.ButtonType" /> is not one of the <see cref="T:System.Web.UI.WebControls.ButtonType" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelDestinationPageUrl">
      <MemberSignature Language="C#" Value="public virtual string CancelDestinationPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CancelDestinationPageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of the page that the user is shown after clicking the Cancel button in the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>The URL of the page the user is redirected to after clicking the Cancel button. The default is &lt;xref:System.String&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangedPassword">
      <MemberSignature Language="C#" Value="public event EventHandler ChangedPassword;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ChangedPassword" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the password is changed for a user account.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ChangedPassword event is raised after the password is changed by the membership provider specified in the <xref:System.Web.UI.WebControls.ChangePassword.MembershipProvider%2A> property. After the ChangedPassword event is raised, the following occurs:  
  
-   If the <xref:System.Web.UI.WebControls.ChangePassword.MailDefinition%2A> property is set, the <xref:System.Web.UI.WebControls.ChangePassword> control attempts to send an e-mail message to the user.  
  
-   The user is either redirected to the Web site specified in the <xref:System.Web.UI.WebControls.ChangePassword.SuccessPageUrl%2A> property or the control template specified in the <xref:System.Web.UI.WebControls.ChangePassword.SuccessTemplate%2A> property is displayed.  
  
 The new authorization token for the user is set after the <xref:System.Web.UI.WebControls.ChangePassword.ChangingPassword> event but before the ChangedPassword event.  
  
 For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordButtonCommandName">
      <MemberSignature Language="C#" Value="public static readonly string ChangePasswordButtonCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string ChangePasswordButtonCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the <see langword="CommandName" /> value of the Change Password button. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ChangePasswordButtonCommandName field to represent the `CommandName` value of the Change Password button. This is useful when configuring any button to mimic the functionality of the Change Password button of the <xref:System.Web.UI.WebControls.ChangePassword> control. The Change Password button completes the last step in the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 To assign change-password functionality to any <xref:System.Web.UI.WebControls.Button> control contained in the <xref:System.Web.UI.WebControls.ChangePassword> control, set the <xref:System.Web.UI.WebControls.Button.CommandName%2A> property of the button to the string that is contained in the ChangePasswordButtonCommandName field.  
  
 The Change Password button can appear on the ChangePassword template or the Success template. In both cases, clicking the Change Password button calls the membership provider to change the password. To add custom functionality to the Change Password button, create an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.ChangedPassword> event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordButtonImageUrl">
      <MemberSignature Language="C#" Value="public virtual string ChangePasswordButtonImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChangePasswordButtonImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of an image displayed next to the Change Password button on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control if the Change Password button is configured by the &lt;xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordButtonType%2A&gt; property to be an image button.</summary>
        <value>The URL of the image to display next to the Change Password button. The default is &lt;xref:System.String&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordButtonStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style ChangePasswordButtonStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style ChangePasswordButtonStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of the Change Password button on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Style" /> object that defines the appearance of the Change Password button. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the ChangePasswordButtonStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color of the Change Password button. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the Change Password button. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the Change Password button. The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`. The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the Change Password button.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the Change Password button. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the Change Password button text in bold type.|  
|`Font-Italic`|`true` to display the Change Password button text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the Change Password button text with a line above it.|  
|`Font-Size`|The size of the text in the Change Password button as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the Change Password button text as crossed out.|  
|`Font-Underline`|`true` to display the Change Password button text with an underline.|  
|`ForeColor`|The color of the text in the Change Password button. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the Change Password button.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the Change Password button.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordButtonText">
      <MemberSignature Language="C#" Value="public virtual string ChangePasswordButtonText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChangePasswordButtonText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text displayed on the Change Password button.</summary>
        <value>The text to display on the Change Password button. The default is "Change Password".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordButtonType">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.ButtonType ChangePasswordButtonType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ButtonType ChangePasswordButtonType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ButtonType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of button to use when rendering the Change Password button of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ButtonType" /> object that defines the type of button to render for the Change Password button. The property value can be one of the three <see cref="T:System.Web.UI.WebControls.ButtonType" /> enumeration values: <see langword="Button" />, <see langword="Image" />, or <see langword="Link" />. The default is <see langword="Button" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ChangePasswordButtonType property gets or sets the type (`Button`, `Image`, or `Link)` of the Change Password button to use when rendering the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified <see cref="T:System.Web.UI.WebControls.ButtonType" /> is not one of the <see cref="T:System.Web.UI.WebControls.ButtonType" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordError">
      <MemberSignature Language="C#" Value="public event EventHandler ChangePasswordError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ChangePasswordError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when there is an error changing the password for the user account.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ChangePasswordError event is raised when the membership provider specified in the <xref:System.Web.UI.WebControls.ChangePassword.MembershipProvider%2A> property encounters an error while attempting to change the password for a user account. This can occur if the user enters an incorrect current password or an invalid new password. The specified <xref:System.Web.Security.MembershipProvider> object does not indicate the reason why changing the password failed, only that the password was not changed.  
  
 Use the ChangePasswordError event to perform custom actions when the password is not changed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordFailureText">
      <MemberSignature Language="C#" Value="public virtual string ChangePasswordFailureText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChangePasswordFailureText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the message that is shown when the user's password is not changed.</summary>
        <value>The error message to display when the attempt to change the user's password is not successful. The default is "Your attempt to change passwords was unsuccessful. Please try again."</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ChangePasswordFailureText property is displayed when the membership provider rejects the password entered by the user.  
  
 The <xref:System.Web.Security.MembershipProvider> object does not return a reason for rejecting the new password. Use the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event to examine the rejected password if you want to provide the user with a tip on how to enter an acceptable password (for example, to indicate that a strong password must be provided).  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ChangePasswordTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ChangePasswordTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ChangePassword))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Web.UI.ITemplate" /> object used to display the Change Password view of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>An <see cref="T:System.Web.UI.ITemplate" /> object that contains the template for displaying the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control in the Change Password view. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ChangePasswordTemplate property specifies the <xref:System.Web.UI.ITemplate> object used by the <xref:System.Web.UI.WebControls.ChangePassword> control. For more information, see [How To: Create ASP.NET Web Server Control Templates Dynamically](~/add/includes/ajax-current-ext-md.md).  
  
 A template is a set of HTML elements and controls that make up the layout for a particular portion of a control. Templates differ from styles:  
  
-   Templates define the content of a section of a control.  
  
-   Styles specify the appearance of elements in the control.  
  
 For more information, see [Web Server Controls Templates](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
 The following table lists the templates and the corresponding control view that are supported by the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
|Template name|Control view|  
|-------------------|------------------|  
|ChangePasswordTemplate|Change Password|  
|<xref:System.Web.UI.WebControls.ChangePassword.SuccessTemplate%2A>|Success|  
  
 You can also create or modify the template for a control in your .aspx file. For more information, see [How to: Create ASP.NET Web Control Templates Declaratively](~/add/includes/ajax-current-ext-md.md) and [How To: Create ASP.NET Web Server Control Templates Dynamically](../Topic/How%20To:%20Create%20ASP.NET%20Web%20Server%20Control%20Templates%20Dynamically.md). The procedures in those topics do not require you to configure the ChangePasswordTemplate property. If you do configure the template, the following table lists the required and optional controls for the template.  
  
|Control ID|Control type|Required/optional|  
|----------------|------------------|------------------------|  
|`Cancel`|Any control that causes event bubbling (passing the event up the server control hierarchy), such as the <xref:System.Web.UI.WebControls.Button>, <xref:System.Web.UI.WebControls.LinkButton>, and <xref:System.Web.UI.WebControls.ImageButton> controls. The button command name must be set to the control ID.|Optional|  
|`ChangePassword`|Any control that causes event bubbling (passing the event up the server control hierarchy), such as the <xref:System.Web.UI.WebControls.Button>, <xref:System.Web.UI.WebControls.LinkButton>, and <xref:System.Web.UI.WebControls.ImageButton> controls. The button command name must be set to the control ID.|Optional|  
|`ConfirmNewPassword`|Any type that supports the <xref:System.Web.UI.IEditableTextControl> interface, such as the <xref:System.Web.UI.WebControls.TextBox> class.|Optional|  
|`Continue`|Any control that causes event bubbling (passing the event up the server control hierarchy), such as the <xref:System.Web.UI.WebControls.Button>, <xref:System.Web.UI.WebControls.LinkButton>, and <xref:System.Web.UI.WebControls.ImageButton> controls. The button command name must be set to the control ID. This control appears on the Success template.|Optional|  
|`CurrentPassword`|Any type that supports the <xref:System.Web.UI.IEditableTextControl> interface, such as the <xref:System.Web.UI.WebControls.TextBox> class.|Required|  
|`FailureText`|Any type that supports the <xref:System.Web.UI.ITextControl> interface.|Optional|  
|`NewPassword`|Any type that supports the <xref:System.Web.UI.IEditableTextControl> interface, such as the <xref:System.Web.UI.WebControls.TextBox> class.|Required|  
|`UserName`|Any type that supports the <xref:System.Web.UI.IEditableTextControl> interface.|Required if <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> is `true`. Must be absent if <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> is `false`.|  
  
 The <xref:System.Web.UI.WebControls.ChangePassword> control throws an <xref:System.Web.HttpException> exception if the template does not contain the required controls. No exception is thrown if you give an optional control ID to a control of the wrong type; however, the control is subsequently ignored by the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordTemplateContainer">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control ChangePasswordTemplateContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control ChangePasswordTemplateContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the container that a <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control uses to create an instance of the &lt;xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTemplate%2A&gt; template. This provides programmatic access to child controls.</summary>
        <value>A <see cref="T:System.Web.UI.Control" /> that contains a &lt;xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTemplate%2A&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordTitleText">
      <MemberSignature Language="C#" Value="public virtual string ChangePasswordTitleText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChangePasswordTitleText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text displayed at the top of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control in Change Password view.</summary>
        <value>The text to display at the top of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is "Change Your Password".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangingPassword">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.LoginCancelEventHandler ChangingPassword;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.LoginCancelEventHandler ChangingPassword" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LoginCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the password for a user account is changed by the membership provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ChangingPassword event is raised before the membership provider specified in the <xref:System.Web.UI.WebControls.ChangePassword.MembershipProvider%2A> property is called to change the password for a user account.  
  
 Use the ChangingPassword event to perform any processing that is necessary before changing the password, such as checking the new password to make sure it is not in a list of common passwords. The new authorization token for the user is set after the ChangingPassword event but before the <xref:System.Web.UI.WebControls.ChangePassword.ChangedPassword> event.  
  
 The ChangingPassword event can be canceled by setting the <xref:System.Web.UI.WebControls.LoginCancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.LoginCancelEventArgs> object to `true` if the event handler determines that the membership provider should not be called.  
  
 For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to use an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> control, and includes a handler for the ChangingPassword event named `ChangingPassword`. The code in the event handler compares the old password stored in the <xref:System.Web.UI.WebControls.ChangePassword.CurrentPassword%2A> property to the new password stored in <xref:System.Web.UI.WebControls.ChangePassword.NewPassword%2A>. If the two passwords are the same, changing the password fails.  
  
 The <xref:System.Web.UI.WebControls.ChangePassword> control sets the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property to `true` to enable users to enter their user name. This means that the user does not have to log on to view the page.  
  
 The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_34_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_34_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConfirmNewPassword">
      <MemberSignature Language="C#" Value="public virtual string ConfirmNewPassword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConfirmNewPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Filterable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the duplicate password entered by the user.</summary>
        <value>The duplicate new password string entered by the user.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ConfirmNewPassword property contains the duplicate new password entered by the user.  
  
 You can use the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property to define the requirements for the new password. This regular expression is used to enforce password rules on the client side.  
  
 The <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> is not related to the password enforcement that can be configured at the data store level and enforced on the server side. The password must meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
> [!IMPORTANT]
>  Transmitting passwords over HTTP is a potential security threat. HTTP transmissions can be viewed or compromised by malicious users. To improve security when using login controls, you should use the HTTPS protocol with secure sockets layer (SSL) encryption to ensure that the user's password cannot be read during postback. For more information, see [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
 This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConfirmNewPasswordLabelText">
      <MemberSignature Language="C#" Value="public virtual string ConfirmNewPasswordLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConfirmNewPasswordLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the label text for the &lt;xref:System.Web.UI.WebControls.ChangePassword.ConfirmNewPassword%2A&gt; text box.</summary>
        <value>The text to display with the &lt;xref:System.Web.UI.WebControls.ChangePassword.ConfirmNewPassword%2A&gt; text box. The default is "Confirm New Password:".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConfirmPasswordCompareErrorMessage">
      <MemberSignature Language="C#" Value="public virtual string ConfirmPasswordCompareErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConfirmPasswordCompareErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the message that is displayed when the new password and the duplicate password entered by the user are not identical.</summary>
        <value>The error message displayed when the new password and confirmed password are not identical. The default is "The confirm New Password entry must match the New Password entry."</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ChangePassword> control requires the user to enter the new password twice because the password characters are masked on the screen as the user types them. If the user does not enter the same password in both the New Password text box and the Confirm New Password text box, the message in the ConfirmPasswordCompareErrorMessage property is displayed.  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConfirmPasswordRequiredErrorMessage">
      <MemberSignature Language="C#" Value="public virtual string ConfirmPasswordRequiredErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConfirmPasswordRequiredErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the error message that is displayed when the Confirm New Password text box is left empty.</summary>
        <value>The error message that is displayed when users attempt to change their password without entering the new password in the &lt;xref:System.Web.UI.WebControls.ChangePassword.ConfirmNewPassword%2A&gt; input box.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContinueButtonClick">
      <MemberSignature Language="C#" Value="public event EventHandler ContinueButtonClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContinueButtonClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raises the ContinueButtonClick event when the user clicks the Continue button.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContinueButtonCommandName">
      <MemberSignature Language="C#" Value="public static readonly string ContinueButtonCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string ContinueButtonCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents <see langword="CommandName" /> value of the Continue button. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ContinueButtonCommandName field to represent the `CommandName` value of the Continue button. This is useful when configuring any button to mimic the functionality of the Continue button of the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 To assign continue functionality to any <xref:System.Web.UI.WebControls.Button> control contained in the <xref:System.Web.UI.WebControls.ChangePassword> control, set the <xref:System.Web.UI.WebControls.Button.CommandName%2A> property of the button to the string that is contained in the ContinueButtonCommandName field.  
  
 The Continue button can appear on the ChangePassword template or the Success template. Clicking the Continue button redirects the user to the URL stored in the <xref:System.Web.UI.WebControls.ChangePassword.ContinueDestinationPageUrl%2A> property. To add custom functionality to the Continue button, create an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.ContinueButtonClick> event.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContinueButtonImageUrl">
      <MemberSignature Language="C#" Value="public virtual string ContinueButtonImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContinueButtonImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of an image to use for the Continue button on the Success view of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control if the Continue button is configured by the &lt;xref:System.Web.UI.WebControls.ChangePassword.ContinueButtonType%2A&gt; property to be an image button.</summary>
        <value>The URL of the image to display with the Continue button. The default is &lt;xref:System.String&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContinueButtonStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style ContinueButtonStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style ContinueButtonStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of the Continue button on the Success view of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Style" /> object that defines the appearance of the Continue button. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the ContinueButtonStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color of the Continue button. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the Continue button. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the Continue button. The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`.  The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the Continue button.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the Continue button. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the Continue button text in bold type.|  
|`Font-Italic`|`true` to display the Continue button text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the Continue button text with a line above it.|  
|`Font-Size`|The size of the text in the Continue button as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the Continue button text as crossed out.|  
|`Font-Underline`|`true` to display the Continue button text with an underline.|  
|`ForeColor`|The color of the text in the Continue button. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the Continue button.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the Continue button.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContinueButtonText">
      <MemberSignature Language="C#" Value="public virtual string ContinueButtonText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContinueButtonText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text that is displayed on the Continue button on the Success view of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>The text to display on the Continue button. The default is "Continue".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContinueButtonType">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.ButtonType ContinueButtonType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ButtonType ContinueButtonType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ButtonType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of button to use when rendering the Continue button for the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ButtonType" /> object that defines the type of button to render for the Continue button. The property value can be one of the three <see cref="T:System.Web.UI.WebControls.ButtonType" /> enumeration values: <see langword="Button" />, <see langword="Image" />, or <see langword="Link" />. The default is <see langword="Button" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ContinueButtonType property gets or sets the type (`Button`, `Image`, or `Link)` of the change password button to use when rendering the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified <see cref="T:System.Web.UI.WebControls.ButtonType" /> is not one of the <see cref="T:System.Web.UI.WebControls.ButtonType" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContinueDestinationPageUrl">
      <MemberSignature Language="C#" Value="public virtual string ContinueDestinationPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContinueDestinationPageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of the page that the user will see after clicking the Continue button on the Success view.</summary>
        <value>The URL of the page the user is redirected to after clicking the Continue button. The default is &lt;xref:System.String&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ContinueDestinationPageUrl property contains the URL of the Web page that users will see after successfully changing their password. By setting the ContinueDestinationPageUrl, you can control the first page that users see after changing their password.  
  
 If the ContinueDestinationPageUrl property is the default, an <xref:System.String> field, when the user clicks the Continue button, the page is refreshed and any values on the form are cleared.  
  
 This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the individual controls that make up the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control in preparation for posting back or rendering.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateChildControls method creates instances of the controls that make up the <xref:System.Web.UI.WebControls.ChangePassword> control and creates default event handlers for their events.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The &lt;xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A&gt; property is set to <see langword="false" />, the &lt;xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTemplate%2A&gt; contains a control that implements the <see cref="T:System.Web.UI.IEditableTextControl" /> interface, and the &lt;xref:System.Web.UI.Control.ID%2A&gt; property of the control is set to "UserName".  
  
 -or-  
  
 The &lt;xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A&gt; property is set to <see langword="true" />, the &lt;xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTemplate%2A&gt; does not contain a control that implements the <see cref="T:System.Web.UI.IEditableTextControl" /> interface, and the &lt;xref:System.Web.UI.Control.ID%2A&gt; property of the control is set to "UserName".  
  
 -or-  
  
 The &lt;xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTemplate%2A&gt; does not contain a control that implements the <see cref="T:System.Web.UI.IEditableTextControl" /> interface, and the &lt;xref:System.Web.UI.Control.ID%2A&gt; property of the control is set to "CurrentPassword".  
  
 -or-  
  
 The &lt;xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTemplate%2A&gt; does not contain a control that implements the <see cref="T:System.Web.UI.IEditableTextControl" /> interface, and the &lt;xref:System.Web.UI.Control.ID%2A&gt; property of the control is set to "NewPassword".</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateUserIconUrl">
      <MemberSignature Language="C#" Value="public virtual string CreateUserIconUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CreateUserIconUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of an image to display next to the link to the Web page that contains a <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> control for the Web site.</summary>
        <value>The URL of an image to display next to the link to the Web page that contains a <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> control for the Web site. The default is &lt;xref:System.String.Empty&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateUserText">
      <MemberSignature Language="C#" Value="public virtual string CreateUserText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CreateUserText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text of the link to the Web page that contains a <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> control for the Web site.</summary>
        <value>The text to display next to the link to the Web page that contains a <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> control for the Web site. The default is &lt;xref:System.String.Empty&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateUserUrl">
      <MemberSignature Language="C#" Value="public virtual string CreateUserUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CreateUserUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of the Web page that contains a <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> control for the Web site.</summary>
        <value>The URL of the Web page that contains a <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> control for the Web site. The default is &lt;xref:System.String.Empty&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentPassword">
      <MemberSignature Language="C#" Value="public virtual string CurrentPassword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Filterable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current password for the user.</summary>
        <value>The current password entered by the user.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CurrentPassword property contains the current password entered by the user.  
  
> [!IMPORTANT]
>  Transmitting passwords over HTTP is a potential security threat. HTTP transmissions can be viewed or compromised by malicious users. To improve security when using login controls, you should use HTTPS protocol with secure sockets layer (SSL) encryption to ensure that the user's password cannot be read during postback. For more information, see [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
 This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to use an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> control, and includes a handler for the <xref:System.Web.UI.WebControls.ChangePassword.ChangingPassword> event named `ChangingPassword`. The code in the `ChangingPassword` handler compares the old password stored in the CurrentPassword property to the new password stored in <xref:System.Web.UI.WebControls.ChangePassword.NewPassword%2A>. If the two passwords are the same, changing the password fails.  
  
 The <xref:System.Web.UI.WebControls.ChangePassword> control sets the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property to `true` to enable users to enter their user name. This means that the user does not have to log on to view the page.  
  
 The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_261_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_261_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisplayUserName">
      <MemberSignature Language="C#" Value="public virtual bool DisplayUserName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayUserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control should display the &lt;xref:System.Web.UI.WebControls.ChangePassword.UserName%2A&gt; control and label.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control should display the &lt;xref:System.Web.UI.WebControls.ChangePassword.UserName%2A&gt;; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In order to change their password, users must be authenticated by the membership provider. To allow users who are not logged on to change their password, or to be authenticated by the membership provider with a different user account and then change the password for that account, the <xref:System.Web.UI.WebControls.ChangePassword> control can display a <xref:System.Web.UI.WebControls.TextBox> control to accept the user name.  
  
 You must set the DisplayUserName property to `true` if the <xref:System.Web.UI.WebControls.ChangePassword> control will be displayed to users who are not logged on; otherwise, the user will not be able to specify a user name.  
  
   
  
## Examples  
 The following code example shows how to set the DisplayUserName property to display the <xref:System.Web.UI.WebControls.ChangePassword.UserName%2A> control to users who are not logged on to the Web site.  
  
 [!code-vb[ChangePasswordDisplayUserName#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1167_1.aspx)]
 [!code-cs[ChangePasswordDisplayUserName#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1167_1.aspx)]  
  
 The following code example shows how to use an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> control, and includes a handler for the <xref:System.Web.UI.WebControls.ChangePassword.ChangingPassword> event named `ChangingPassword`. The code in the `ChangingPassword` handler compares the old password stored in the <xref:System.Web.UI.WebControls.ChangePassword.CurrentPassword%2A> property to the new password stored in <xref:System.Web.UI.WebControls.ChangePassword.NewPassword%2A>. If the two passwords are the same, changing the password fails.  
  
 The <xref:System.Web.UI.WebControls.ChangePassword> control sets the DisplayUserName property to `true` to enable the user to enter their user name. This means that the user does not have to log on to view the page.  
  
 The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1167_2.aspx)]
 [!code-vb[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1167_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditProfileIconUrl">
      <MemberSignature Language="C#" Value="public virtual string EditProfileIconUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EditProfileIconUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of an image to display next to the link to the user profile editing page for the Web site.</summary>
        <value>The URL of the image to display with the link to the user profile editing page for the Web site. The default is &lt;xref:System.String&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditProfileText">
      <MemberSignature Language="C#" Value="public virtual string EditProfileText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EditProfileText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text of the link to the user profile editing page for the Web site.</summary>
        <value>The text to display for the link to the user profile editing page for the Web site. The default is &lt;xref:System.String&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditProfileUrl">
      <MemberSignature Language="C#" Value="public virtual string EditProfileUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EditProfileUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of the user profile editing page for the Web site.</summary>
        <value>The URL of the user profile editing page for the Web site. The default is &lt;xref:System.String&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FailureTextStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle FailureTextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle FailureTextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of error messages on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of error messages on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the FailureTextStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color that appears behind the error message text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the error message text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the error message text. The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`.  The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the error message text.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the error message text. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the error message text in bold type.|  
|`Font-Italic`|`true` to display the error message text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the error message text with a line above it.|  
|`Font-Size`|The size of the text in the error message as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the error message text as crossed out.|  
|`Font-Underline`|`true` to display the error message text with an underline.|  
|`ForeColor`|The color of the text in the error message text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the error message text.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the error message text.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HelpPageIconUrl">
      <MemberSignature Language="C#" Value="public virtual string HelpPageIconUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpPageIconUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of an image to display next to the Change Password help page for the Web site.</summary>
        <value>The URL of the image to display next to the Change Password help page for the Web site. The default is &lt;xref:System.String&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HelpPageText">
      <MemberSignature Language="C#" Value="public virtual string HelpPageText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpPageText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the link text to the Change Password help page for the Web site.</summary>
        <value>The text to display for the link to the Change Password help page for the Web site. The default is &lt;xref:System.String&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HelpPageUrl">
      <MemberSignature Language="C#" Value="public virtual string HelpPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpPageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of the Change Password help page for the Web site.</summary>
        <value>The URL of the Change Password help page for the Web site. The default is &lt;xref:System.String&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HyperLinkStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle HyperLinkStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle HyperLinkStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of hyperlinks on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of hyperlinks on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the HyperLinkStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color behind the hyperlink text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the hyperlinks. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the hyperlinks. The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`. The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the hyperlinks.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the hyperlinks. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the hyperlinks text in bold type.|  
|`Font-Italic`|`true` to display the hyperlinks text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the hyperlinks text with a line above it.|  
|`Font-Size`|The size of the text in the hyperlinks as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the hyperlinks text as crossed out.|  
|`Font-Underline`|`true` to display the hyperlinks text with an underline.|  
|`ForeColor`|The color of the text in the hyperlinks. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the hyperlinks.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the hyperlinks.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstructionText">
      <MemberSignature Language="C#" Value="public virtual string InstructionText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InstructionText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets informational text that appears on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control between the &lt;xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTitleText%2A&gt; and the input boxes.</summary>
        <value>The informational text to display on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control between the &lt;xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTitleText%2A&gt; and the input boxes. The default is &lt;xref:System.String.Empty&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InstructionText property gets or sets informational text that appears on the <xref:System.Web.UI.WebControls.ChangePassword> control. The default is <xref:System.String.Empty>.  
  
 Use this property to display general information about your control. You can also use the <xref:System.Web.UI.WebControls.ChangePassword.PasswordHintText%2A> property to display instructions about password requirements specified in the membership provider or in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property.  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstructionTextStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle InstructionTextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle InstructionTextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of the instructional text on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of the instructional text contained in the &lt;xref:System.Web.UI.WebControls.ChangePassword.InstructionText%2A&gt; property. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the InstructionTextStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color behind the instructional text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the instructional text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the instructional text. The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`. The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the instructional text.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the instructional text. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the instructional text in bold type.|  
|`Font-Italic`|`true` to display the instructional text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the instructional text with a line above it.|  
|`Font-Size`|The size of the text in the instructional text as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the instructional text as crossed out.|  
|`Font-Underline`|`true` to display the instructional text with an underline.|  
|`ForeColor`|The color of the text in the instructional text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the instructional text.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the instructional text.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LabelStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle LabelStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle LabelStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> objects that define the appearance of text box labels on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of text box labels on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the LabelStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color behind the text box labels. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the text box labels. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the text box labels. The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`. The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the text box labels.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the text box labels. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the text box labels text in bold type.|  
|`Font-Italic`|`true` to display the text box labels text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the text box labels text with a line above it.|  
|`Font-Size`|The size of the text in the text box labels as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the text box labels text as crossed out.|  
|`Font-Underline`|`true` to display the text box labels text with an underline.|  
|`ForeColor`|The color of the text in the text box labels. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the text box labels.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the text box labels.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An &lt;xref:System.Object&gt; that represents the control state to restore.</param>
        <summary>Restores control state information from a previous page request that was saved by the &lt;xref:System.Web.UI.WebControls.ChangePassword.SaveControlState%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override the LoadControlState method when you need to specify how a custom server control restores its control state. For more information, see [Server Control Custom State Management](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An &lt;xref:System.Object&gt; that represents the control state to restore.</param>
        <summary>Restores view state information from a previous page request that was saved by the &lt;xref:System.Web.UI.WebControls.ChangePassword.SaveViewState%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override the LoadViewState method when you need to specify how a custom server control restores its view state. For more information, see [Server Control Custom State Management](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="savedState" /> parameter cannot be resolved to a valid &lt;xref:System.Web.UI.Control.ViewState%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MailDefinition">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.MailDefinition MailDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.MailDefinition MailDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.MailDefinition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of properties that define the e-mail message that is sent to users after they have changed their password.</summary>
        <value>A reference to a <see cref="T:System.Web.UI.WebControls.MailDefinition" /> object that defines the e-mail message sent to a new user.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MailDefinition property returns a reference to a group of properties that you use to define the format and content of the e-mail message sent to users after they have changed their password. Common settings include the subject line and the sender's return address. For a complete list of properties, see <xref:System.Web.UI.WebControls.MailDefinition>.  
  
 The MailDefinition property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.MailDefinition> object it returns. You can set these properties in the form *property*`-`*subproperty*, where *subproperty* represents a property of the <xref:System.Web.UI.WebControls.MailDefinition> class (for example, `MailDefinition-Subject`). You can also set the properties programmatically in the form *Property*`.`*Subproperty* (for example,`MailDefinition.Subject`).  
  
 An e-mail message is sent only if the user has an e-mail address registered with the membership provider and if the <xref:System.Web.UI.WebControls.MailDefinition.BodyFileName%2A> property of the MailDefinition property points to a valid file. If the <xref:System.Web.UI.WebControls.MailDefinition.BodyFileName%2A> property is set, the <xref:System.Web.UI.WebControls.MailDefinition.From%2A> property must be set to an e-mail address; otherwise, an <xref:System.Web.HttpException> exception is thrown.  
  
 If the e-mail message is created from the <xref:System.Web.UI.WebControls.MailDefinition> object, it will make the substitutions shown in the following table. The substitution text is case-insensitive.  
  
|Substitution text|Replaced with|  
|-----------------------|-------------------|  
|**<%** `UserName` **%>**|The Web site user name of the user.|  
|**\<%** *Password* **%>**|The new password for the user.|  
  
 If the <xref:System.Web.UI.WebControls.MailDefinition.IsBodyHtml%2A> property of the <xref:System.Web.UI.WebControls.MailDefinition> object is `true`, the contents of the mail message will be HTML-encoded to guard against cross-site scripting security vulnerabilities for the message recipient.  
  
 You can use the <xref:System.Web.UI.WebControls.ChangePassword.SendingMail> event to modify the <xref:System.Net.Mail.MailMessage> object that is created by the <xref:System.Web.UI.WebControls.MailDefinition> object.  
  
> [!IMPORTANT]
>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network "sniffing" applications. To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
 This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to use the MailDefinition property to define an e-mail message that is sent to users who change their passwords. It assumes that there is a file called `MailFile.txt` that contains the text of the e-mail message to send.  
  
 To be able to send e-mail messages to users, you must configure an e-mail server in the Web.config file for your application. For more information, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8).  
  
 [!code-cs[ChangePasswordMailDefinition#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_936_1.aspx)]
 [!code-vb[ChangePasswordMailDefinition#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_936_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The &lt;xref:System.Web.UI.WebControls.MailDefinition.From%2A&gt; property is not set to an e-mail address.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MembershipProvider">
      <MemberSignature Language="C#" Value="public virtual string MembershipProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MembershipProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the membership provider that is used to manage member information.</summary>
        <value>The name of the &lt;xref:System.Web.Security.MembershipProvider&gt; for the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is the membership provider for the application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MembershipProvider property gets or sets the membership provider that is used to look up member information. If the MembershipProvider property is `null` or empty, the default membership provider, `AspNetSqlMembershipProvider`, is used. For more information about the membership providers available to ASP.NET applications, see [Membership Providers](~/add/includes/ajax-current-ext-md.md).  
  
 The new password must meet the minimum requirements set by the membership provider in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
 This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewPassword">
      <MemberSignature Language="C#" Value="public virtual string NewPassword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Filterable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the new password entered by the user.</summary>
        <value>The new password entered by the user.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The NewPassword property contains the new password entered by the user.  
  
 You can use the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property to define the requirements for the new password. This regular expression is used to enforce password rules on the client side. The <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> is not related to the password enforcement that can be configured at the data store level. The password must meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
> [!IMPORTANT]
>  Transmitting passwords over HTTP is a potential security threat. HTTP transmissions can be viewed or compromised by malicious users. To improve security when using login controls, you should use HTTPS protocol with secure sockets layer (SSL) encryption to ensure that the user's password cannot be read during postback. For more information, see [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
 This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to use an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> control, and includes a handler for the <xref:System.Web.UI.WebControls.ChangePassword.ChangingPassword> event named `ChangingPassword`. `ChangingPassword` compares the old password stored in the <xref:System.Web.UI.WebControls.ChangePassword.CurrentPassword%2A> property to the new password stored in NewPassword. If they are the same, changing the password fails.  
  
 The <xref:System.Web.UI.WebControls.ChangePassword> control sets the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property to `true` to enable the user to enter their user name. This means that the user does not have to log on to view the page.  
  
 The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_254_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_254_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewPasswordLabelText">
      <MemberSignature Language="C#" Value="public virtual string NewPasswordLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewPasswordLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the label text for the New Password text box.</summary>
        <value>The text to display next to the New Password text box. The default is "New Password:".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewPasswordRegularExpression">
      <MemberSignature Language="C#" Value="public virtual string NewPasswordRegularExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewPasswordRegularExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the regular expression that is used to validate the password provided by the user.</summary>
        <value>The regular expression string used to validate the new password provided by the user. The default is &lt;xref:System.String&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the NewPasswordRegularExpression property to define the requirements for passwords that are used to validate user accounts on your Web site. This regular expression is used to enforce password rules on the client side. The NewPasswordRegularExpression is not related to the password enforcement that can be configured at the data store level. The password must meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
 To display requirements to the user, set the <xref:System.Web.UI.WebControls.ChangePassword.PasswordHintText%2A> property.  
  
 If the password entered does not pass the regular expression contained in the NewPasswordRegularExpression property, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpressionErrorMessage%2A> property is displayed to the user.  
  
 If the password is rejected by the membership provider, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordFailureText%2A> property is displayed.  
  
 A common use of password standards is to force users to select strong passwords. As a best practice, enforce password rules at the data level in the membership provider. The NewPasswordRegularExpression property allows for the convenience of checking the password on the client side, but does not lock out users who make repeated attempts to log on. To improve security, configure your membership provider to restrict the number of attempts a user may make to log on.  For more information, see [Securing Membership](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to set the NewPasswordRegularExpression property to define a regular expression that checks passwords to ensure that they meet the following criteria:  
  
-   Are greater than six characters.  
  
-   Contain at least one digit.  
  
-   Contain at least one special (non-alphanumeric) character.  
  
 The password requirements contained in the <xref:System.Web.UI.WebControls.ChangePassword.PasswordHintText%2A> property are displayed to the user.  
  
 If the password entered by the user does not meet the criteria, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpressionErrorMessage%2A> property is displayed to the user. If a new password is not entered, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRequiredErrorMessage%2A> property is displayed to the user.  
  
> [!NOTE]
>  The new password must also meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
 [!code-cs[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1105_1.aspx)]
 [!code-vb[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1105_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewPasswordRegularExpressionErrorMessage">
      <MemberSignature Language="C#" Value="public virtual string NewPasswordRegularExpressionErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewPasswordRegularExpressionErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the error message that is shown when the password entered does not pass the regular expression criteria defined in the &lt;xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A&gt; property.</summary>
        <value>The error message shown when the password entered does not pass the regular expression defined in the &lt;xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A&gt;. The default is &lt;xref:System.String.Empty&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the NewPasswordRegularExpressionErrorMessage property to inform the user that the password entered does not pass the regular expression defined in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property.  
  
 The NewPasswordRegularExpressionErrorMessage is not related to the password enforcement that can be configured at the data store level. The new password must meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
   
  
## Examples  
 The following code example shows how to set the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property to define a regular expression that checks passwords to ensure that they meet the following criteria:  
  
-   Are greater than six characters.  
  
-   Contain at least one digit.  
  
-   Contain at least one special (non-alphanumeric) character.  
  
 The password requirements contained in the <xref:System.Web.UI.WebControls.ChangePassword.PasswordHintText%2A> property are displayed to the user.  
  
 If the password entered by the user does not meet the criteria, the text contained in the NewPasswordRegularExpressionErrorMessage property is displayed to the user.  If a new password is not entered, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRequiredErrorMessage%2A> property is displayed to the user.  
  
> [!NOTE]
>  The new password must also meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
 [!code-cs[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/csharp/2c15c5f2-7fda-420e-b346-_1.aspx)]
 [!code-vb[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/visualbasic/2c15c5f2-7fda-420e-b346-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewPasswordRequiredErrorMessage">
      <MemberSignature Language="C#" Value="public virtual string NewPasswordRequiredErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewPasswordRequiredErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the error message that is displayed when the user leaves the New Password text box empty.</summary>
        <value>The error message to display if the user leaves the New Password text box empty. The default is "New Password is required."</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to set the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property to define a regular expression that checks passwords to ensure that they meet the following criteria:  
  
-   Are greater than six characters.  
  
-   Contain at least one digit.  
  
-   Contain at least one special (non-alphanumeric) character.  
  
 The password requirements contained in the <xref:System.Web.UI.WebControls.ChangePassword.PasswordHintText%2A> property are displayed to the user.  
  
 If the password entered by the user does not meet the criteria, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpressionErrorMessage%2A> property is displayed to the user. If a new password is not entered, the text contained in the NewPasswordRequiredErrorMessage property is displayed to the user.  
  
> [!NOTE]
>  The new password must also meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
 [!code-cs[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1143_1.aspx)]
 [!code-vb[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1143_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">The source of the event.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; object that contains the event data.</param>
        <summary>Determines whether the event for the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control is passed up the Web server control hierarchy for the page.</summary>
        <returns>
          <see langword="true" /> if the event has been canceled; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ChangePassword> control contains child controls for the Change Password and Success views. Rather than each button raising an event individually, events from the nested controls are bubbled (that is, they are sent to the naming container). The naming container in turn raises a generic event called `ItemCommand` with parameter values that allow you to determine which individual control raised the original event. By responding to this single event, you can avoid writing event-handling methods for individual child controls.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCancelButtonClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCancelButtonClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCancelButtonClick(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; object that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ChangePassword.CancelButtonClick" /> event when a user clicks the Cancel button.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnChangedPassword">
      <MemberSignature Language="C#" Value="protected virtual void OnChangedPassword (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChangedPassword(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; object that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ChangePassword.ChangedPassword" /> event after the password is changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnChangedPassword method is called after the password is changed by the membership provider specified in the <xref:System.Web.UI.WebControls.ChangePassword.MembershipProvider%2A> property. After the OnChangedPassword method is called, the following occurs:  
  
-   If the <xref:System.Web.UI.WebControls.ChangePassword.MailDefinition%2A> property is set, the <xref:System.Web.UI.WebControls.ChangePassword> control attempts to send an e-mail message to the user.  
  
-   The user is either redirected to the Web site specified in the <xref:System.Web.UI.WebControls.ChangePassword.SuccessPageUrl%2A> property or the control template specified in the <xref:System.Web.UI.WebControls.ChangePassword.SuccessTemplate%2A> property is displayed.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md).  
  
 The OnChangedPassword method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnChangePasswordError">
      <MemberSignature Language="C#" Value="protected virtual void OnChangePasswordError (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChangePasswordError(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; object that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ChangePassword.ChangePasswordError" /> event when the user's password is not changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnChangePasswordError method is called when the membership provider specified in the <xref:System.Web.UI.WebControls.ChangePassword.MembershipProvider%2A> property encounters an error while attempting to change the user's password. The specified <xref:System.Web.Security.MembershipProvider> object does not indicate the reason why changing the password failed, only that the password was not changed.  
  
 Use the OnChangePasswordError method to perform a custom action when the user's password is not changed.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md).  
  
 The OnChangePasswordError method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnChangingPassword">
      <MemberSignature Language="C#" Value="protected virtual void OnChangingPassword (System.Web.UI.WebControls.LoginCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChangingPassword(class System.Web.UI.WebControls.LoginCancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.LoginCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.ComponentModel.CancelEventArgs&gt; object containing the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ChangePassword.ChangingPassword" /> event before the user's password is changed by the membership provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnChangingPassword method is called before the membership provider specified in the <xref:System.Web.UI.WebControls.ChangePassword.MembershipProvider%2A> property is called to change the user's password.  
  
 Use the OnChangingPassword method to perform any processing that is necessary before changing the password, such as checking the new password to make sure it is not in a list of common passwords.  
  
 The OnChangingPassword method can cancel the <xref:System.Web.UI.WebControls.ChangePassword.ChangingPassword> event by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> object passed as the *e* parameter to `true`.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md).  
  
 The OnChangingPassword method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example shows how to use an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> control, and includes a handler for the <xref:System.Web.UI.WebControls.ChangePassword.ChangingPassword> event named `ChangingPassword`. `ChangingPassword` compares the old password stored in the <xref:System.Web.UI.WebControls.ChangePassword.CurrentPassword%2A> property to the new password stored in <xref:System.Web.UI.WebControls.ChangePassword.NewPassword%2A>. If the two passwords are the same, changing the password fails.  
  
 The <xref:System.Web.UI.WebControls.ChangePassword> control sets the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property to `true` to enable the user to enter their user name. This means that the user does not have to log on to view the page.  
  
 The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/csharp/300857d8-f77e-47d6-b0f4-_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.ChangePassword.OnChangingPassword#1](~/add/codesnippet/visualbasic/300857d8-f77e-47d6-b0f4-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContinueButtonClick">
      <MemberSignature Language="C#" Value="protected virtual void OnContinueButtonClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContinueButtonClick(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; object that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ChangePassword.ContinueButtonClick" /> event when a user clicks the Continue button.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; object containing the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event for the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control to allow the control to register itself with the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web server controls should perform any initialization steps that are required to create and set up an instance. You cannot use view state information within this event; it is not populated yet. You should not access another Web server control during the OnInit method, regardless of whether it is a child or parent to the <xref:System.Web.UI.WebControls.ChangePassword> control. Other Web server controls are not certain to be created and ready for access.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; object containing the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSendingMail">
      <MemberSignature Language="C#" Value="protected virtual void OnSendingMail (System.Web.UI.WebControls.MailMessageEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSendingMail(class System.Web.UI.WebControls.MailMessageEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.MailMessageEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.MailMessageEventArgs" /> object containing the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ChangePassword.SendingMail" /> event before an e-mail message is sent to the SMTP server for processing. The SMTP server then sends the e-mail message to the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OnSendingMail method to modify the e-mail message that is sent to users after they change their password. The <xref:System.Web.UI.WebControls.MailMessageEventArgs.Message%2A> property of the <xref:System.Web.UI.WebControls.MailMessageEventArgs> object will be sent to the SMTP server for processing. Modify the properties of the <xref:System.Web.Mail.MailMessage> object to modify the e-mail message.  
  
 E-mail messages are created only when the <xref:System.Web.UI.WebControls.MailDefinition.BodyFileName%2A> property of the <xref:System.Web.UI.WebControls.MailDefinition> object specified by the <xref:System.Web.UI.WebControls.ChangePassword.MailDefinition%2A> property points to a valid file name.  
  
> [!IMPORTANT]
>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network "sniffing" applications. To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md).  
  
 The OnSendingMail method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendingMail> event named `SendingMail`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 If the password change succeeds, the code attempts to use SMTP to send an e-mail message to the user to confirm the change. This is done in the`SendingMail` event handler. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  
  
 If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  
  
 [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/220e3cce-b663-43f2-8126-_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/220e3cce-b663-43f2-8126-_1.aspx)]  
  
 Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  
  
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/220e3cce-b663-43f2-8126-_2.vb)]
 [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/220e3cce-b663-43f2-8126-_2.cs)]  
  
 The following example code can be used as the ChangePasswordMail.htm file for the previous example code.  
  
> [!IMPORTANT]
>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network "sniffing" applications. To improve security, use the mitigations that are described in [Securing Login Controls](../Topic/Securing%20Login%20Controls.md).  
  
```  
<html>  
<head><title></title></head>  
<body>  
<form>  
  
  <h1>Your password for the account named "<%Username%>" has changed.</h1>  
  
  <p>  
  If you did not initiate this change, please call 1-206-555-0100.  
  </p>  
  
  <p>  
  <a href="http://www.contoso.com/login.aspx">  
    <img src="cid:LoginGif" alt="Log In" />  
  </a>   
  </p>  
  
  <p>  
  Please read our attached Privacy Notice.  
  </p>  
  
</form>  
</body>  
</html>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSendMailError">
      <MemberSignature Language="C#" Value="protected virtual void OnSendMailError (System.Web.UI.WebControls.SendMailErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSendMailError(class System.Web.UI.WebControls.SendMailErrorEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SendMailErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.SendMailErrorEventArgs" /> object containing the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" /> event when an e-mail message cannot be sent to the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnSendMailError method is called when the SMTP mail system raises an exception while attempting to send an e-mail message after a user has changed a password.  
  
 Examine the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object passed as the `e` parameter to determine the actual cause of the exception. The most common reason is a configuration error in the `smtp` section of the Web.config file.  
  
 You must set the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the object passed as the `e` parameter to `true` to signal that the exception has been taken care of; otherwise, the exception is thrown again.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md).  
  
 The OnSendMailError method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendingMail> event named `SendingMail`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 If the password change succeeds, the code attempts to use SMTP to send an e-mail message to the user to confirm the change. This is done in the`SendingMail` event handler. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  
  
 If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  
  
 [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/d1fb735b-4f24-402c-be6f-_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/d1fb735b-4f24-402c-be6f-_1.aspx)]  
  
 Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  
  
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/d1fb735b-4f24-402c-be6f-_2.vb)]
 [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/d1fb735b-4f24-402c-be6f-_2.cs)]  
  
 The following example code can be used as the ChangePasswordMail.htm file for the previous example code.  
  
> [!IMPORTANT]
>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network "sniffing" applications. To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
```  
<html>  
<head><title></title></head>  
<body>  
<form>  
  
  <h1>Your password for the account named "<%Username%>" has changed.</h1>  
  
  <p>  
  If you did not initiate this change, please call 1-206-555-0100.  
  </p>  
  
  <p>  
  <a href="http://www.contoso.com/login.aspx">  
    <img src="cid:LoginGif" alt="Log In" />  
  </a>   
  </p>  
  
  <p>  
  Please read our attached Privacy Notice.  
  </p>  
  
</form>  
</body>  
</html>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PasswordHintStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle PasswordHintStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle PasswordHintStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of hint text that appears on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of the text contained in the &lt;xref:System.Web.UI.WebControls.ChangePassword.PasswordHintText%2A&gt; property. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the PasswordHintStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color behind the hint text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the hint text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the hint text. The style can be "None", "Dotted", "Dashed", "Solid", "Double", "Groove", "Ridge", "Inset", or "Outset". The default is "NotSet". Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the hint text.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the hint text. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the hint text in bold type.|  
|`Font-Italic`|`true` to display the hint text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the hint text with a line above it.|  
|`Font-Size`|The size of the text in the hint text as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the hint text as crossed out.|  
|`Font-Underline`|`true` to display the hint text with an underline.|  
|`ForeColor`|The color of the text in the hint text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the hint text.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the hint text.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PasswordHintText">
      <MemberSignature Language="C#" Value="public virtual string PasswordHintText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordHintText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets informational text about the requirements for creating a password for the Web site.</summary>
        <value>The informational text to display about the criteria for the new password. The default is &lt;xref:System.String&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PasswordHintText property gets or sets informational text about the requirements for creating a password for the Web site. Use this property to describe the requirements for the new password that are specified in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property.  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to set the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpression%2A> property to define a regular expression that checks passwords to ensure that they meet the following criteria:  
  
-   Are greater than six characters.  
  
-   Contain at least one digit.  
  
-   Contain at least one special (non-alphanumeric) character.  
  
 The password requirements contained in the PasswordHintText property are displayed to the user.  
  
 If the password entered by the user does not meet the criteria, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRegularExpressionErrorMessage%2A> property is displayed to the user. If a new password is not entered, the text contained in the <xref:System.Web.UI.WebControls.ChangePassword.NewPasswordRequiredErrorMessage%2A> property is displayed to the user.  
  
> [!NOTE]
>  The new password must also meet the minimum requirements set by the  in the <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>, <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>, and <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> properties. If the password does not meet these requirements, the <xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordError> event is raised.  
  
 [!code-cs[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_650_1.aspx)]
 [!code-vb[ChangePasswordNewPasswordRegex#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_650_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PasswordLabelText">
      <MemberSignature Language="C#" Value="public virtual string PasswordLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the label text for the Current Password text box.</summary>
        <value>The text to display next to the Current Password text box. The default is "Password:".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PasswordRecoveryIconUrl">
      <MemberSignature Language="C#" Value="public virtual string PasswordRecoveryIconUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordRecoveryIconUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of an image to display next to a link to the Web page that contains the <see cref="T:System.Web.UI.WebControls.PasswordRecovery" /> control.</summary>
        <value>The URL of the image to display next to a link to the password recovery page for the Web site. The default is &lt;xref:System.String&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PasswordRecoveryText">
      <MemberSignature Language="C#" Value="public virtual string PasswordRecoveryText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordRecoveryText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text of the link to the Web page that contains the <see cref="T:System.Web.UI.WebControls.PasswordRecovery" /> control.</summary>
        <value>The text to display for the link to the Web page that contains the <see cref="T:System.Web.UI.WebControls.PasswordRecovery" /> control. The default is &lt;xref:System.String.Empty&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PasswordRecoveryUrl">
      <MemberSignature Language="C#" Value="public virtual string PasswordRecoveryUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordRecoveryUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of the Web page that contains the <see cref="T:System.Web.UI.WebControls.PasswordRecovery" /> control.</summary>
        <value>The URL for the Web page that contains the <see cref="T:System.Web.UI.WebControls.PasswordRecovery" /> control. The default is &lt;xref:System.String.Empty&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PasswordRequiredErrorMessage">
      <MemberSignature Language="C#" Value="public virtual string PasswordRequiredErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordRequiredErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the error message that is displayed when the user leaves the Current Password text box empty.</summary>
        <value>The error message to display if the user leaves the Current Password text box empty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PasswordRequiredErrorMessage property gets or sets the error message that is displayed when the user leaves the Current Password text box empty.  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that represents the output stream used to write content to a Web page.</param>
        <summary>Writes the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderOuterTable">
      <MemberSignature Language="C#" Value="public virtual bool RenderOuterTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderOuterTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the control encloses rendered HTML in a <see langword="table" /> element in order to apply inline styles.</summary>
        <value>
          <see langword="true" /> if the control encloses rendered HTML in a <see langword="table" /> element; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In order to make inline style properties such as <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> apply to all the HTML that is rendered for the control, ASP.NET encloses the rendered HTML in a `table` element. If you do not want the outer `table` element to be rendered, set this property to `false`. In that case, if you try to set inline style properties that apply to the whole control, an exception is thrown.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves any server control state changes that have occurred since the time the page was posted back to the server.</summary>
        <returns>The server control's current state; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SaveControlState method to save state information required for the operation of the <xref:System.Web.UI.WebControls.ChangePassword> control. This control state data is stored separately from the view state data for the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 Custom controls using control state must call the <xref:System.Web.UI.Page.RegisterRequiresControlState%2A> method on the <xref:System.Web.UI.Control.Page%2A> object before saving control state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves any server control view state changes that have occurred since the time the page was posted back to the server.</summary>
        <returns>The server control's current view state; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 View state is the accumulation of the values of the properties for the <xref:System.Web.UI.WebControls.ChangePassword> control. These values are automatically placed in the <xref:System.Web.UI.Control.ViewState%2A> property for the <xref:System.Web.UI.WebControls.ChangePassword> control, which is an instance of the <xref:System.Web.UI.StateBag> class. The value for the <xref:System.Web.UI.Control.ViewState%2A> property is then persisted to a string object after the save state stage of the <xref:System.Web.UI.WebControls.ChangePassword> control life cycle. For more information, see [ASP.NET Page Life Cycle Overview](~/add/includes/ajax-current-ext-md.md).  
  
 When view state is saved, this string object is returned to the client as a variable that is stored in an HTML `<input type="hidden" />` element. When you author custom server controls, you can improve efficiency by overriding the SaveViewState method and modifying the <xref:System.Web.UI.Control.ViewState%2A> property for the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SendingMail">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.MailMessageEventHandler SendingMail;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.MailMessageEventHandler SendingMail" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.MailMessageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the user is sent an e-mail confirmation that the password has been changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ChangePassword> control will send an e-mail message confirming that the password has been changed when the <xref:System.Web.UI.WebControls.ChangePassword.MailDefinition%2A> property defines an e-mail message to send.  
  
 The e-mail message contains automatic replacement fields for the user name and password. You can use the SendingMail event to modify the e-mail message before it is sent to the user.  
  
> [!IMPORTANT]
>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network "sniffing" applications. To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the SendingMail event named `SendingMail`.  
  
 The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 If the password change succeeds, the code attempts to use SMTP to send an e-mail message to the user to confirm the change. This is done in the`SendingMail` event handler. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  
  
 If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  
  
 [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_50_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_50_1.aspx)]  
  
 Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  
  
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_50_2.vb)]
 [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_50_2.cs)]  
  
 The following example code can be used as the ChangePasswordMail.htm file for the previous example code.  
  
> [!IMPORTANT]
>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network "sniffing" applications.  To improve security, use the mitigations that are described in [Securing Login Controls](../Topic/Securing%20Login%20Controls.md).  
  
```  
<html>  
<head><title></title></head>  
<body>  
<form>  
  
  <h1>Your password for the account named "<%Username%>" has changed.</h1>  
  
  <p>  
  If you did not initiate this change, please call 1-206-555-0100.  
  </p>  
  
  <p>  
  <a href="http://www.contoso.com/login.aspx">  
    <img src="cid:LoginGif" alt="Log In" />  
  </a>   
  </p>  
  
  <p>  
  Please read our attached Privacy Notice.  
  </p>  
  
</form>  
</body>  
</html>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SendMailError">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SendMailErrorEventHandler SendMailError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SendMailErrorEventHandler SendMailError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SendMailErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when there is an SMTP error sending an e-mail message to the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SendMailError event is raised when the SMTP mail provider throws an exception when trying to send an e-mail message after users have changed their password. The most common reason that this event is raised is that the `smtp` section of the Web.config file is incorrect. For more information about the `smtp` section, see .  
  
 The default SendMailError event handler does not catch or handle the SMTP error from the mail system. Your SendMailError event handler must set the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object to `true` in order to stop the error from being displayed to users.  
  
 For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendingMail> event named `SendingMail`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 If the password change succeeds, the code attempts to use SMTP to send an e-mail message to the user to confirm the change. This is done in the`SendingMail` event handler. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  
  
 If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  
  
 [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_125_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_125_1.aspx)]  
  
 Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  
  
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_125_2.vb)]
 [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_125_2.cs)]  
  
 The following example code can be used as the ChangePasswordMail.htm file for the previous example code.  
  
> [!IMPORTANT]
>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network "sniffing" applications.  To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
```  
<html>  
<head><title></title></head>  
<body>  
<form>  
  
  <h1>Your password for the account named "<%Username%>" has changed.</h1>  
  
  <p>  
  If you did not initiate this change, please call 1-206-555-0100.  
  </p>  
  
  <p>  
  <a href="http://www.contoso.com/login.aspx">  
    <img src="cid:LoginGif" alt="Log In" />  
  </a>   
  </p>  
  
  <p>  
  Please read our attached Privacy Notice.  
  </p>  
  
</form>  
</body>  
</html>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetDesignModeState">
      <MemberSignature Language="C#" Value="protected override void SetDesignModeState (System.Collections.IDictionary data);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetDesignModeState(class System.Collections.IDictionary data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="data">An &lt;xref:System.Collections.IDictionary&gt; containing the design-time data for the control.</param>
        <summary>Sets design-time data for a control.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuccessPageUrl">
      <MemberSignature Language="C#" Value="public virtual string SuccessPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SuccessPageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL of the page that is shown to users after they have changed their password successfully.</summary>
        <value>The URL of the destination page after the password is changed. The default is &lt;xref:System.String&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set the SuccessPageUrl property when you want users to be redirected to a specific page of your Web site after successfully changing their passwords. If the SuccessPageUrl property is not set (set is the default), the page containing the <xref:System.Web.UI.WebControls.ChangePassword> control is refreshed and the <xref:System.Web.UI.WebControls.ChangePassword.SuccessText%2A> property is displayed. If the SuccessPageUrl property is set, the Success view is not displayed.  
  
 This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuccessTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate SuccessTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate SuccessTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.ChangePassword))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Web.UI.ITemplate" /> object that is used to display the Success and Change Password views of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>An <see cref="T:System.Web.UI.ITemplate" /> object that contains the template for displaying the Success and Change Password views of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SuccessTemplate property specifies the <xref:System.Web.UI.ITemplate> object that is used by the <xref:System.Web.UI.WebControls.ChangePassword> control. The SuccessTemplate property is accessible only when using a code-behind file. For more information, see [How To: Create ASP.NET Web Server Control Templates Dynamically](~/add/includes/ajax-current-ext-md.md).  
  
 A template is a set of HTML elements and controls that make up the layout for a particular portion of a control. Templates differ from styles:  
  
-   Templates define the content of a section of a control.  
  
-   Styles specify the appearance of elements in the control.  
  
 For more information, see [Web Server Controls Templates](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).  
  
 The <xref:System.Web.UI.WebControls.ChangePassword> control supports the following templates, which are applied to the corresponding control view.  
  
|Template name|Control view|  
|-------------------|------------------|  
|<xref:System.Web.UI.WebControls.ChangePassword.ChangePasswordTemplate%2A>|Change Password view|  
|SuccessTemplate|Success view|  
  
 You can also create or modify the template for a control in your .aspx file. For more information, see [How to: Create ASP.NET Web Control Templates Declaratively](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuccessTemplateContainer">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control SuccessTemplateContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control SuccessTemplateContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the container that a <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control used to create an instance of the &lt;xref:System.Web.UI.WebControls.ChangePassword.SuccessTemplate%2A&gt; template. This provides programmatic access to child controls.</summary>
        <value>A <see cref="T:System.Web.UI.Control" /> that contains a &lt;xref:System.Web.UI.WebControls.ChangePassword.SuccessTemplate%2A&gt;.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuccessText">
      <MemberSignature Language="C#" Value="public virtual string SuccessText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SuccessText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text that is displayed on the Success view between the &lt;xref:System.Web.UI.WebControls.ChangePassword.SuccessTitleText%2A&gt; and the Continue button.</summary>
        <value>The text to display on the Success view between the &lt;xref:System.Web.UI.WebControls.ChangePassword.SuccessTitleText%2A&gt; and the Continue button. The default is &lt;xref:System.String.Empty&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SuccessText property gets or sets the text that is displayed on the Success view. The default is "Your password has been changed!".  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuccessTextStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle SuccessTextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SuccessTextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of text on the Success view.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of the text contained in the &lt;xref:System.Web.UI.WebControls.ChangePassword.SuccessText%2A&gt; property. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the SuccessTextStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color behind the Success view text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the Success view text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the Success view text. The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`. The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the Success view text.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the Success view text. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the Success view text in bold type.|  
|`Font-Italic`|`true` to display the Success view text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the Success view text with a line above it.|  
|`Font-Size`|The size of the text in the Success view text as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the Success view text as crossed out.|  
|`Font-Underline`|`true` to display the Success view text with an underline.|  
|`ForeColor`|The color of the text in the Success view text. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the Success view text.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the Success view text.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuccessTitleText">
      <MemberSignature Language="C#" Value="public virtual string SuccessTitleText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SuccessTitleText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the title of the Success view.</summary>
        <value>The text to display as the title in the Success view of the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is "Change Password Complete".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SuccessTitleText property gets or sets the title of the Success view. The default is "Change Password Complete".  
  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value that corresponds to a <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. This property is used primarily by control developers.</summary>
        <value>The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value for the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. Always returns <see langword="HtmlTextWriterTag.Table." /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the TagKey property to determine the <xref:System.Web.UI.HtmlTextWriterTag> value that is associated with a <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 The TagKey property allows the output stream to write the appropriate HTML markup for the <xref:System.Web.UI.WebControls.ChangePassword> control.  
  
 This property is used primarily by control developers.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TextBoxStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style TextBoxStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style TextBoxStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of text box controls on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Style" /> object that defines the appearance of text box controls on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the TextBoxStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The background color of text boxes. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the text boxes. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the text boxes. The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`. The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the text boxes.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the text boxes. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the text boxes text in bold type.|  
|`Font-Italic`|`true` to display the text boxes text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the text boxes text with a line above it.|  
|`Font-Size`|The size of the text in the text boxes as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the text boxes text as crossed out.|  
|`Font-Underline`|`true` to display the text boxes text with an underline.|  
|`ForeColor`|The color of the text in the text boxes. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the text boxes.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the text boxes.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TitleTextStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle TitleTextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle TitleTextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of titles on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that contains the <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of error messages titles on the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the TitleTextStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color behind the titles. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the titles. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the titles. The style can be `"None"`, `"Dotted"`, `"Dashed"`, `"Solid"`, `"Double"`, `"Groove"`, `"Ridge"`, `"Inset"`, or `"Outset"`. The default is `"NotSet"`. Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the titles.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the titles. If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the titles text in bold type.|  
|`Font-Italic`|`true` to display the titles text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the titles text with a line above it.|  
|`Font-Size`|The size of the text in the titles as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the titles text as crossed out.|  
|`Font-Underline`|`true` to display the titles text with an underline.|  
|`ForeColor`|The color of the text in the titles. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the titles.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the titles.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes tracking of view-state changes to the server control so that they can be stored in the server control's <see cref="T:System.Web.UI.StateBag" /> object. This object is accessible through the &lt;xref:System.Web.UI.Control.ViewState%2A?displayProperty=fullName&gt; property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public virtual string UserName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the Web site user name for which to change the password.</summary>
        <value>The user name for which to change the password.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UserName property gets the Web site user name for which to change the password. You can also use the UserName property just to get the user name from within the <xref:System.Web.UI.WebControls.ChangePassword> control, without changing the password. Additionally, the UserName property can be used from within an e-mail message that has been created to send e-mail from the <xref:System.Web.UI.WebControls.ChangePassword> control by using the string "\<%UserName%>" in the body of the e-mail message.  
  
 To allow the user to type in a user name, set the <xref:System.Web.UI.WebControls.ChangePassword.DisplayUserName%2A> property to `true`. If a user is already authenticated, he or she does not need to enter a user name.  
  
   
  
## Examples  
 The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendingMail> event named `SendingMail`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  
  
 If the password change succeeds, the code attempts to use SMTP to send an e-mail message to the user to confirm the change. This is done in the`SendingMail` event handler. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  
  
 If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  
  
 [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1204_1.aspx)]
 [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1204_1.aspx)]  
  
 Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  
  
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1204_2.vb)]
 [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1204_2.cs)]  
  
 The following example code can be used as the ChangePasswordMail.htm file for the previous example code.  
  
> [!IMPORTANT]
>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network "sniffing" applications.  To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  
  
```  
<html>  
<head><title></title></head>  
<body>  
<form>  
  
  <h1>Your password for the account named "<%Username%>" has changed.</h1>  
  
  <p>  
  If you did not initiate this change, please call 1-206-555-0100.  
  </p>  
  
  <p>  
  <a href="http://www.contoso.com/login.aspx">  
    <img src="cid:LoginGif" alt="Log In" />  
  </a>   
  </p>  
  
  <p>  
  Please read our attached Privacy Notice.  
  </p>  
  
</form>  
</body>  
</html>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UserNameLabelText">
      <MemberSignature Language="C#" Value="public virtual string UserNameLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserNameLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the label for the User Name text box.</summary>
        <value>The text to display next to the User Name textbox. The default string is "User Name:".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UserNameRequiredErrorMessage">
      <MemberSignature Language="C#" Value="public virtual string UserNameRequiredErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserNameRequiredErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the error message that is displayed when the user leaves the User Name text box empty.</summary>
        <value>The error message to display if the user leaves the User Name text box empty. The default string is "User Name is required.".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValidatorTextStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style ValidatorTextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style ValidatorTextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of <see cref="T:System.Web.UI.WebControls.Style" /> properties that define the appearance of error messages that are associated with any input validation used by the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Style" /> object that defines the appearance of error messages that are associated with any input validation used by the <see cref="T:System.Web.UI.WebControls.ChangePassword" /> control. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists the style settings that are available for customization with the ValidatorTextStyle property.  
  
|Setting|Description|  
|-------------|-----------------|  
|`BackColor`|The color behind the error messages. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderColor`|The color of the border around the error messages. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`BorderStyle`|The style of the border around the error messages. The style can be "None", "Dotted", "Dashed", "Solid", "Double", "Groove", "Ridge", "Inset", or "Outset". The default is "NotSet". Some styles do not show up clearly unless the `BorderWidth` value is greater than 2.|  
|`BorderWidth`|The width of the border around the error messages.|  
|`CssClass`|The cascading style sheet (CSS) class used to render the error messages.  If other settings are specified, they will override a style sheet setting.|  
|`Font-Bold`|`true` to display the error messages text in bold type.|  
|`Font-Italic`|`true` to display the error messages text in italic type.|  
|`Font-Names`|The name of the font face.|  
|`Font-Overline`|`true` to display the error messages text with a line above it.|  
|`Font-Size`|The size of the text in the error messages as a <xref:System.Web.UI.WebControls.FontUnit> object.|  
|`Font-Strikeout`|`true` to display the error messages text as crossed out.|  
|`Font-Underline`|`true` to display the error messages text with an underline.|  
|`ForeColor`|The color of the text in the error messages. The color can be any of the <xref:System.Drawing.Color> properties.|  
|`Height`|A <xref:System.Web.UI.WebControls.Unit> that represents the height of the error messages.|  
|`Width`|A <xref:System.Web.UI.WebControls.Unit> that represents the width of the error messages.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>