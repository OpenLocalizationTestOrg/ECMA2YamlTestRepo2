<Type Name="CommandEventArgs" FullName="System.Web.UI.WebControls.CommandEventArgs">
  <TypeSignature Language="C#" Value="public class CommandEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandEventArgs extends System.EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for the <see langword="Command" /> event.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Command` event is raised when a <xref:System.Web.UI.WebControls.Button> or <xref:System.Web.UI.WebControls.ImageButton> control is clicked.  
  
 The CommandEventArgs object contains data about the `Command` event that can be accessed in the event handler. Using the properties available in the CommandEventArgs class, you can determine the name of the command to perform, such as `Sort`, in addition to an optional argument that supplements the command, such as `Ascending`.  
  
 For a list of initial property values for an instance of CommandEventArgs, see the <xref:System.Web.UI.WebControls.CommandEventArgs.%23ctor%2A> constructor.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following example demonstrates how to access the properties in CommandEventArgs to determine the command to perform. This example specifies the event handler declaratively, using the <xref:System.Web.UI.WebControls.Button.OnClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control.  
  
 [!code-vb[ButtonCommandNameArgument#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_199_1.aspx)]
 [!code-cs[ButtonCommandNameArgument#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_199_1.aspx)]  
  
 The following code example demonstrates how to specify the event handler and programmatically add it to the event in the `Page_Load` method.  
  
 [!code-cs[ButtonCommand#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_199_2.aspx)]
 [!code-vb[ButtonCommand#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_199_2.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandEventArgs (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> that contains the event data.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> class with another <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.WebControls.CommandEventArgs> class using the specified <xref:System.Web.UI.WebControls.CommandEventArgs> object.  
  
 When an instance of <xref:System.Web.UI.WebControls.CommandEventArgs> is created by a call to this constructor, the following properties are initialized to the specified values.  
  
|Property|Initial Value|  
|--------------|-------------------|  
|CommandName|The `e.CommandName` parameter.|  
|CommandArgument|The `e.CommandArgument` parameter.|  
  
   
  
## Examples  
 The following example demonstrates how to create and initialize a new instance of the <xref:System.Web.UI.WebControls.CommandEventArgs> class using the specified <xref:System.Web.UI.WebControls.CommandEventArgs> object.  
  
 [!code-cs[Classic CommandEventArgs.CommandEventArgs Example#1](~/add/codesnippet/csharp/8cddd133-08a0-42ee-824a-_1.cs)]
 [!code-vb[Classic CommandEventArgs.CommandEventArgs Example#1](~/add/codesnippet/visualbasic/8cddd133-08a0-42ee-824a-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandEventArgs (string commandName, object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandName, object argument) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandName" Type="System.String" />
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="commandName">The name of the command.</param>
        <param name="argument">A &lt;xref:System.Object?displayProperty=fullName&gt; that contains the arguments for the command.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> class with the specified command name and argument.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.WebControls.CommandEventArgs> class using the specified command name and argument.  
  
 When an instance of <xref:System.Web.UI.WebControls.CommandEventArgs> is created by a call to this constructor, the following properties are initialized to the specified values.  
  
|Property|Initial Value|  
|--------------|-------------------|  
|CommandName|The value of the `commandName` parameter.|  
|CommandArgument|The value of the `argument` parameter.|  
  
   
  
## Examples  
 The following example demonstrates how to create and initialize a new instance of the <xref:System.Web.UI.WebControls.CommandEventArgs> class using the specified command name and argument.  
  
 [!code-vb[Classic CommandEventArgs.CommandEventArgs1 Example#1](~/add/codesnippet/visualbasic/227f8d74-47ad-48c3-92e3-_1.vb)]
 [!code-cs[Classic CommandEventArgs.CommandEventArgs1 Example#1](~/add/codesnippet/csharp/227f8d74-47ad-48c3-92e3-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public object CommandArgument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the argument for the command.</summary>
        <value>A &lt;xref:System.Object?displayProperty=fullName&gt; that contains the argument for the command.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CommandArgument can contain any string set by the programmer. The CommandArgument property complements the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> property by allowing you to provide any additional information for the command. For example, you can set the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> property to `Sort` and set the CommandArgument property to `Ascending` to specify a command to sort in ascending order.  
  
   
  
## Examples  
 The following example demonstrates how to use the CommandArgument property to determine supplemental information for the command to perform.  
  
 [!code-vb[ButtonCommandNameArgument#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1082_1.aspx)]
 [!code-cs[ButtonCommandNameArgument#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1082_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the command.</summary>
        <value>The name of the command to perform.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CommandName property to determine the command to perform. The CommandName property can contain any string set by the programmer. The programmer can then identify the command name in code and perform the appropriate tasks.  
  
   
  
## Examples  
 The following example demonstrates how to use the CommandName property to programmatically determine the command to perform.  
  
 [!code-vb[ButtonCommandNameArgument#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_858_1.aspx)]
 [!code-cs[ButtonCommandNameArgument#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_858_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>