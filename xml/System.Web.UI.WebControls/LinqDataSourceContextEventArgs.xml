<Type Name="LinqDataSourceContextEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceContextEventArgs">
  <TypeSignature Language="C#" Value="public class LinqDataSourceContextEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceContextEventArgs extends System.EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for the <see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" /> event.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control creates an instance of the type that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property. The <xref:System.Web.UI.WebControls.LinqDataSource> control calls the default constructor of the data context object to create an instance of the object.  
  
 You can manually create the data context object by handling the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event. You do this if you want to use a non-default constructor.  
  
 You can also handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event if you want to create a data context object that is different from the one specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property. In that case, you set the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property to the object you created. The <xref:System.Web.UI.WebControls.LinqDataSource> control will use the object you have created for selecting the data. When you are updating, inserting, or deleting data, you must set the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property to an object that derives from the <xref:System.Data.Linq.DataContext> class.  
  
   
  
## Examples  
 The following example shows how to create the data context object by calling a non-default constructor in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event. The code assigns the custom object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.  
  
 [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_133_1.cs)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_133_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceContextEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceContextEventArgs" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceContextEventArgs (System.Web.UI.DataSourceOperation operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.DataSourceOperation operation) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="operation" Type="System.Web.UI.DataSourceOperation" />
      </Parameters>
      <Docs>
        <param name="operation">The data operation that is being performed.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceContextEventArgs" /> class for the specified data operation.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ObjectInstance">
      <MemberSignature Language="C#" Value="public object ObjectInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ObjectInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data context object to create.</summary>
        <value>The data context object that you have set to the ObjectInstance property; otherwise, <see langword="null" />. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control creates an instance of the class specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property. It does this by calling the default constructor of that class.  
  
 You can manually create the object for data operations by handling the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event and setting the ObjectInstance property to an object you have created.  
  
 You create the object manually if you want to use a non-default constructor or if you want to create an object that is different from the one specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.  
  
 The ObjectInstance property does not contain an instance of the type specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property, because that instance is created after the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event. The ObjectInstance property is used only when you manually create the data context object during the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event. When you are updating, inserting, or deleting data, you must set the ObjectInstance property to an object that derives from the <xref:System.Data.Linq.DataContext> class.  
  
   
  
## Examples  
 The following example shows how to create the data context object by calling a non-default constructor in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event. The code assigns the custom object to the ObjectInstance property.  
  
 [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_590_1.cs)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_590_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Operation">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataSourceOperation Operation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceOperation Operation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data operation that is being performed.</summary>
        <value>A value that represents the type of data operation that is being performed.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>