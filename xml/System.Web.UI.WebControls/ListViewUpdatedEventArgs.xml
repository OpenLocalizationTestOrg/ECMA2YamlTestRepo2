<Type Name="ListViewUpdatedEventArgs" FullName="System.Web.UI.WebControls.ListViewUpdatedEventArgs">
  <TypeSignature Language="C#" Value="public class ListViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListViewUpdatedEventArgs extends System.EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for the <see cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" /> event.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.ListView> control raises the <xref:System.Web.UI.WebControls.ListView.ItemUpdated> event when the <xref:System.Web.UI.WebControls.ListView.UpdateItem%2A> method is called or when an Update button in the control is clicked, but after the <xref:System.Web.UI.WebControls.ListView> control updates the item. (An Update button is a button whose `CommandName` property is set to "Update".) This enables you to provide an event-handling method that performs a custom routine whenever this event occurs, such as checking the results of an update operation.  
  
 A ListViewUpdatedEventArgs object is passed to the event-handling method. This object enables you to determine the number of items updated and to get any exceptions that might have occurred. To determine the number of items that were affected by the update operation, use the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A> property. To determine whether any exceptions occurred, use the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A> property. You can indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A> property. You can access the original field values by using the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.OldValues%2A> property. You can access updated field values by using the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.NewValues%2A> property.  
  
 By default, the <xref:System.Web.UI.WebControls.ListView> item returns to read-only mode after an update operation. If you handle an exception that occurred during the update operation, you can keep the <xref:System.Web.UI.WebControls.ListView> item in edit mode by setting the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A> property to `true`.  
  
 For a list of initial property values for an instance of the ListViewUpdatedEventArgs class, see the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.%23ctor%2A> constructor.  
  
   
  
## Examples  
 The following example shows how to use the ListViewUpdatedEventArgs object to determine whether an exception occurred during an update operation.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_339_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemUpdated#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_339_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListViewUpdatedEventArgs (int affectedRows, Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 affectedRows, class System.Exception exception) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="affectedRows" Type="System.Int32" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="affectedRows">The number of rows that were affected by the update operation.</param>
        <param name="exception">The exception that was raised when the update operation was performed, if any. If no exception is raised, use <see langword="null" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ListViewUpdatedEventArgs" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> class.  
  
> [!NOTE]
>  This constructor is primarily used by control developers when they raise events.  
  
 The following table shows initial property values for an instance of the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> class.  
  
|Property|Initial value|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A>|The value of the `affectedRows` parameter.|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A>|The <xref:System.Exception?displayProperty=fullName> object that is contained in the `e` parameter.|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A>|`false`.|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A>|`false`.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AffectedRows">
      <MemberSignature Language="C#" Value="public int AffectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AffectedRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of rows that were affected by the update operation.</summary>
        <value>The number of rows that were affected by the update operation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AffectedRows property to determine the number of rows that were affected by the update operation, as returned by the data source. Because typically only one item is updated, this property usually contains a value of 0 or 1.  
  
 Sometimes during the update operation an error can occur that does not raise an exception. In that case, the AffectedRows property can be used to verify that an item was updated.  
  
   
  
## Examples  
 The following example shows how to use the AffectedRows property to verify that an item was updated. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> class.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_677_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_677_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the exception, if any, that was raised during the update operation.</summary>
        <value>The exception that was raised during the update operation, if any; if no exception was raised, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Exception property to determine the exception (if any) that was raised during the update operation. If no exception was raised, this property returns `null`.  
  
> [!NOTE]
>  If an exception was raised and you handle the exception in the event handler, set the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A> property to `true`. Otherwise, the <xref:System.Web.UI.WebControls.ListView> control re-throws the exception.  
  
   
  
## Examples  
 The following example shows how to use the Exception property to determine whether an exception occurred during an update operation. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> class.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_764_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_764_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether an exception that was raised during the update operation was handled during the event.</summary>
        <value>
          <see langword="true" /> if the exception was handled in the event handler; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If an exception is raised during the update operation, use the ExceptionHandled property to indicate whether you have handled the exception during the event. If this property is set to `true`, the exception is considered handled and is not re-thrown by the <xref:System.Web.UI.WebControls.ListView> control. If this property is set to `false`, the <xref:System.Web.UI.WebControls.ListView> control re-throws the exception. To determine which exception was raised, use the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A> property.  
  
   
  
## Examples  
 The following example shows how to use the ExceptionHandled property to indicate that the exception was handled in the event handler. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> class.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_148_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_148_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeepInEditMode">
      <MemberSignature Language="C#" Value="public bool KeepInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.ListView" /> control should remain in edit mode after an update operation.</summary>
        <value>
          <see langword="true" /> if the control should remain in edit mode after an update operation; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the <xref:System.Web.UI.WebControls.ListView> control returns to read-only mode after an update operation. Set the KeepInEditMode property to `true` to specify that the <xref:System.Web.UI.WebControls.ListView> control should remain in edit mode. This also preserves the values that the user has entered.  
  
   
  
## Examples  
 The following example shows how to use the KeepInEditMode property to keep a <xref:System.Web.UI.WebControls.ListView> control in edit mode when an exception occurs. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> class.  
  
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_74_1.aspx)]
 [!code-cs[System.Web.UI.WebControls.ListView.ItemUpdated#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_74_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary NewValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary NewValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a dictionary that contains the new values for the updated item.</summary>
        <value>The new values for the updated item.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the NewValues property to access the new field values for the updated item. For example, you can use these values to keep a log of updated items.  
  
 The NewValues property returns an object that implements the <xref:System.Collections.Specialized.IOrderedDictionary> interface. The object contains <xref:System.Collections.DictionaryEntry> objects that represent the fields of the updated item.  
  
> [!NOTE]
>  As a shortcut, you can use the indexer of the <xref:System.Collections.Specialized.IOrderedDictionary> object to access the field values directly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OldValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary OldValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary OldValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a dictionary that contains the original values for the updated item.</summary>
        <value>The original values for the updated item.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OldValues property to access the original field values for the updated item. For example, you can use these values to keep a log of updated items.  
  
 The OldValues property returns an object that implements the <xref:System.Collections.Specialized.IOrderedDictionary> interface. The object contains <xref:System.Collections.DictionaryEntry> objects that represent the fields of the updated item.  
  
> [!NOTE]
>  As a shortcut, you can use the indexer of the <xref:System.Collections.Specialized.IOrderedDictionary> object to access the field values directly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>