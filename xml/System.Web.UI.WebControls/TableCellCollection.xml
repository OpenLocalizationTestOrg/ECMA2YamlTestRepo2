<Type Name="TableCellCollection" FullName="System.Web.UI.WebControls.TableCellCollection">
  <TypeSignature Language="C#" Value="public sealed class TableCellCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TableCellCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.TableCellsCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encapsulates a collection of <see cref="T:System.Web.UI.WebControls.TableHeaderCell" /> and <see cref="T:System.Web.UI.WebControls.TableCell" /> objects that make up a row in a <see cref="T:System.Web.UI.WebControls.Table" /> control. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this class to programmatically manage a collection of <xref:System.Web.UI.WebControls.TableCell> objects that make up a row in a <xref:System.Web.UI.WebControls.Table> control. This class is commonly used to add or remove cells from a row in a <xref:System.Web.UI.WebControls.Table> control.  
  
> [!NOTE]
>  A <xref:System.Web.UI.WebControls.Table> control contains a <xref:System.Web.UI.WebControls.Table.Rows%2A> collection that represents a collection of <xref:System.Web.UI.WebControls.TableRow> objects. Each <xref:System.Web.UI.WebControls.TableRow> represents an individual row in the table and contains a <xref:System.Web.UI.WebControls.TableRow.Cells%2A> collection that represents a collection of <xref:System.Web.UI.WebControls.TableCell> objects. These <xref:System.Web.UI.WebControls.TableCell> objects represent the individual cells in the table. To get an individual cell, you must first get a <xref:System.Web.UI.WebControls.TableRow> from the <xref:System.Web.UI.WebControls.Table.Rows%2A> collection of a <xref:System.Web.UI.WebControls.Table> control. You can then get a <xref:System.Web.UI.WebControls.TableCell> from the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> collection of the <xref:System.Web.UI.WebControls.TableRow>.  
  
   
  
## Examples  
 The following example demonstrates how to programmatically fill a <xref:System.Web.UI.WebControls.Table> control. <xref:System.Web.UI.WebControls.TableCell> objects, which represent individual cells, are added to <xref:System.Web.UI.WebControls.TableRow> objects, which represent the individual rows, through the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property.  
  
 [!code-cs[Classic TableCellCollection Example#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_221_1.aspx)]
 [!code-vb[Classic TableCellCollection Example#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_221_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Web.UI.WebControls.TableCell cell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Web.UI.WebControls.TableCell cell) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.TableCell" />
      </Parameters>
      <Docs>
        <param name="cell">The <see cref="T:System.Web.UI.WebControls.TableCell" /> to add to the collection.</param>
        <summary>Appends the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> to the end of the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</summary>
        <returns>The index number of the <see cref="T:System.Web.UI.WebControls.TableCell" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to add the specified <xref:System.Web.UI.WebControls.TableCell> to the end of a <xref:System.Web.UI.WebControls.TableCellCollection>.  
  
   
  
## Examples  
 The following example demonstrates how to use the Add method to add a <xref:System.Web.UI.WebControls.TableCell> to a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  
  
 [!code-cs[Classic TableCellCollection.Add Example#1](~/add/codesnippet/csharp/ee795911-b57c-473c-a40c-_1.aspx)]
 [!code-vb[Classic TableCellCollection.Add Example#1](~/add/codesnippet/visualbasic/ee795911-b57c-473c-a40c-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public void AddAt (int index, System.Web.UI.WebControls.TableCell cell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAt(int32 index, class System.Web.UI.WebControls.TableCell cell) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="cell" Type="System.Web.UI.WebControls.TableCell" />
      </Parameters>
      <Docs>
        <param name="index">The location in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> at which to add the <see cref="T:System.Web.UI.WebControls.TableCell" />.</param>
        <param name="cell">The <see cref="T:System.Web.UI.WebControls.TableCell" /> to add to the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
        <summary>Adds the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> to the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> at the specified index location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to insert the specified <xref:System.Web.UI.WebControls.TableCell> in a <xref:System.Web.UI.WebControls.TableCellCollection> at the specified index.  
  
   
  
## Examples  
 The following example demonstrates how to use the AddAt method to add a <xref:System.Web.UI.WebControls.TableCell> to the middle of a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  
  
 [!code-cs[Classic TableCellCollection.AddAt Example#1](~/add/codesnippet/csharp/8b5e0b20-2dc9-4b2e-bd0c-_1.aspx)]
 [!code-vb[Classic TableCellCollection.AddAt Example#1](~/add/codesnippet/visualbasic/8b5e0b20-2dc9-4b2e-bd0c-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Web.UI.WebControls.TableCell[] cells);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Web.UI.WebControls.TableCell[] cells) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cells" Type="System.Web.UI.WebControls.TableCell[]" />
      </Parameters>
      <Docs>
        <param name="cells">The array containing the <see cref="T:System.Web.UI.WebControls.TableCell" /> objects to add to the collection.</param>
        <summary>Appends the <see cref="T:System.Web.UI.WebControls.TableCell" /> objects from the specified array to the end of the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AddRange method to append the <xref:System.Web.UI.WebControls.TableCell> objects from the specified array to the collection. This method is commonly used when you are constructing a row of a table. To construct a row of a table, first create an array of <xref:System.Web.UI.WebControls.TableCell> objects to represent the cells of the row. Next, use the AddRange method, passing the array as an argument, to add the <xref:System.Web.UI.WebControls.TableCell> objects to the collection.  
  
   
  
## Examples  
 The following example demonstrates how to use the AddRange method to add the <xref:System.Web.UI.WebControls.TableCell> objects from an array to a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  
  
 [!code-vb[TableCellCollection_AddRange#1](~/add/codesnippet/visualbasic/cc471817-21c7-41f0-a2b5-_1.aspx)]
 [!code-cs[TableCellCollection_AddRange#1](~/add/codesnippet/csharp/cc471817-21c7-41f0-a2b5-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value of the <paramref name="cells" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:System.Web.UI.WebControls.TableCell" /> objects from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to remove all <xref:System.Web.UI.WebControls.TableCell> objects from the <xref:System.Web.UI.WebControls.TableCellCollection> and set the <xref:System.Web.UI.WebControls.TableCellCollection.Count%2A> property to 0.  
  
> [!NOTE]
>  This method removes the <xref:System.Web.UI.WebControls.TableCell> objects from the <xref:System.Web.UI.WebControls.TableCellCollection>, but it does not remove the <xref:System.Web.UI.WebControls.TableRow> from the <xref:System.Web.UI.WebControls.Table> control. Be sure to also remove the <xref:System.Web.UI.WebControls.TableRow> if you want to completely remove a row from the table.  
  
   
  
## Examples  
 The following example demonstrates how to use the Clear method to remove all <xref:System.Web.UI.WebControls.TableCell> objects from the center row of the table and replace them with new <xref:System.Web.UI.WebControls.TableCell> objects.  
  
 [!code-cs[Classic TableCellCollection.Clear Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_74_1.aspx)]
 [!code-vb[Classic TableCellCollection.Clear Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_74_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">A zero-based &lt;xref:System.Array?displayProperty=fullName&gt; that receives the copied items from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
        <param name="index">The first index in the specified &lt;xref:System.Array?displayProperty=fullName&gt; to receive the items.</param>
        <summary>Copies the items from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> to the specified &lt;xref:System.Array?displayProperty=fullName&gt;, starting with the specified index in the &lt;xref:System.Array?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to copy the contents of the <xref:System.Web.UI.WebControls.TableCellCollection> into the specified <xref:System.Array?displayProperty=fullName> starting at the specified index.  
  
> [!NOTE]
>  The `array` parameter must be a zero-based <xref:System.Array?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example demonstrates how to use the CopyTo method to copy the items from the <xref:System.Web.UI.WebControls.TableCellCollection> into the specified array.  
  
 [!code-vb[Classic TableCellCollection.CopyTo Example#1](~/add/codesnippet/visualbasic/bdea1b6d-8af6-40aa-a8be-_1.aspx)]
 [!code-cs[Classic TableCellCollection.CopyTo Example#1](~/add/codesnippet/csharp/bdea1b6d-8af6-40aa-a8be-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of <see cref="T:System.Web.UI.WebControls.TableCell" /> objects in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</summary>
        <value>The number of <see cref="T:System.Web.UI.WebControls.TableCell" /> objects in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />. The default is 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to determine the number of cells in the <xref:System.Web.UI.WebControls.TableCellCollection>. The Count property is often used when iterating through the collection to determine the upper bound.  
  
   
  
## Examples  
 The following example demonstrates how to use the Count property to determine the number of cells in the <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance the <xref:System.Web.UI.WebControls.TableCellCollection> class.  
  
 [!code-cs[Classic TableCellCollection.Count Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_107_1.cs)]
 [!code-vb[Classic TableCellCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_107_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCellIndex">
      <MemberSignature Language="C#" Value="public int GetCellIndex (System.Web.UI.WebControls.TableCell cell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetCellIndex(class System.Web.UI.WebControls.TableCell cell) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.TableCell" />
      </Parameters>
      <Docs>
        <param name="cell">The <see cref="T:System.Web.UI.WebControls.TableCell" /> to get the index of in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
        <summary>Returns a value that represents the index of the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</summary>
        <returns>The index of the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> within the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />. The default is -1, which indicates that a match has not been found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to determine the index of the specified <xref:System.Web.UI.WebControls.TableCell> in the <xref:System.Web.UI.WebControls.TableCellCollection>. If the specified <xref:System.Web.UI.WebControls.TableCell> is not found, an index of -1 is returned.  
  
   
  
## Examples  
 The following example demonstrates how to use the GetCellIndex property to display the column index of the selected cell.  
  
 [!code-cs[Classic TableCellCollection.GetCellIndex Example#1](~/add/codesnippet/csharp/adbcd4ba-a31d-48e3-aca6-_1.aspx)]
 [!code-vb[Classic TableCellCollection.GetCellIndex Example#1](~/add/codesnippet/visualbasic/adbcd4ba-a31d-48e3-aca6-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a &lt;xref:System.Collections.IEnumerator?displayProperty=fullName&gt; implemented object that contains all <see cref="T:System.Web.UI.WebControls.TableCell" /> objects in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</summary>
        <returns>A &lt;xref:System.Collections.IEnumerator?displayProperty=fullName&gt; implemented object that contains all <see cref="T:System.Web.UI.WebControls.TableCell" /> objects within the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create a <xref:System.Collections.IEnumerator?displayProperty=fullName> implemented object that can be iterated through easily to get each item in the <xref:System.Web.UI.WebControls.TableCellCollection>.  
  
 Use the <xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName> property to get the item currently pointed to in the collection.  
  
 Use the <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> method to move to the next item in the collection.  
  
 Use the <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName> method to move the enumerator back to the initial position.  
  
> [!NOTE]
>  The <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> method must be called after creating a <xref:System.Collections.IEnumerator?displayProperty=fullName> implemented object or after using the <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName> method to move the enumerator to the first item in the collection. Otherwise, the item represented by the <xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName> property is undefined.  
  
   
  
## Examples  
 The following example demonstrates how to use the GetEnumerator method to create a <xref:System.Collections.IEnumerator?displayProperty=fullName> implemented object. It is then iterated through to display the items in the selected row.  
  
 [!code-cs[Classic TableCellCollection.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_188_1.aspx)]
 [!code-vb[Classic TableCellCollection.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_188_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> is read-only.</summary>
        <value>
          <see langword="false" /> for all cases.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property always returns `false` to indicate that the <xref:System.Web.UI.WebControls.TableCellCollection> can be written to in all cases.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> is synchronized (thread-safe).</summary>
        <value>
          <see langword="false" /> for all cases.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is derived from <xref:System.Collections.ICollection?displayProperty=fullName> and is overridden to always return `false`.  
  
 For more information on the IsSynchronized property, see the <xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=fullName> property of the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableCell this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableCell Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">An ordinal index value that specifies the <see cref="T:System.Web.UI.WebControls.TableCell" /> to return.</param>
        <summary>Gets a <see cref="T:System.Web.UI.WebControls.TableCell" /> from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> at the specified index.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableCell" /> that represents an element in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this indexer to get an individual <xref:System.Web.UI.WebControls.TableCell> in the <xref:System.Web.UI.WebControls.TableCellCollection> at the specified index using simple array notation.  
  
   
  
## Examples  
 The following example demonstrates how to use the indexer to get a <xref:System.Web.UI.WebControls.TableCell> from a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  
  
 [!code-vb[Classic TableCellCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_965_1.aspx)]
 [!code-cs[Classic TableCellCollection.this Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_965_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Web.UI.WebControls.TableCell cell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Web.UI.WebControls.TableCell cell) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.TableCell" />
      </Parameters>
      <Docs>
        <param name="cell">The <see cref="T:System.Web.UI.WebControls.TableCell" /> to remove from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
        <summary>Removes the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to remove the specified <xref:System.Web.UI.WebControls.TableCell> from a <xref:System.Web.UI.WebControls.TableCellCollection>.  
  
   
  
## Examples  
 The following example demonstrates how use the Remove method to remove the center column from the table. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  
  
 [!code-cs[Classic TableCellCollection.Remove Example#1](~/add/codesnippet/csharp/5661f8f5-48f6-4afd-9f95-_1.aspx)]
 [!code-vb[Classic TableCellCollection.Remove Example#1](~/add/codesnippet/visualbasic/5661f8f5-48f6-4afd-9f95-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the <see cref="T:System.Web.UI.WebControls.TableCell" /> to remove from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
        <summary>Removes a <see cref="T:System.Web.UI.WebControls.TableCell" /> from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> at the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to remove a <xref:System.Web.UI.WebControls.TableCell> from a <xref:System.Web.UI.WebControls.TableCellCollection> at the specified index.  
  
   
  
## Examples  
 The following example demonstrates how use the RemoveAt method to remove the fourth column from the table. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class. Also note that the index of the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> collection is zero-based.  
  
 [!code-cs[Classic TableCellCollection.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_147_1.aspx)]
 [!code-vb[Classic TableCellCollection.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_147_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the object that can be used to synchronize access to the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</summary>
        <value>An object that can be used to synchronize access to the collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The object returned in this implementation is the <xref:System.Web.UI.WebControls.TableCellCollection> itself.  
  
 For more information on the SyncRoot property, see the <xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=fullName> property of the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to add to the collection.</param>
        <summary>Adds an object to the collection.</summary>
        <returns>The index at which the object was added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you should use the <xref:System.Web.UI.WebControls.TableCellCollection.Add%2A?displayProperty=fullName> method to add an element to a <xref:System.Web.UI.WebControls.TableCellCollection> object.  
  
 The IList.Add method is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.TableCellCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to locate within the collection.</param>
        <summary>Determines whether the specified object is contained within the collection.</summary>
        <returns>
          <see langword="true" /> if the object is in the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IList.Contains method is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.TableCellCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to locate within the collection.</param>
        <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the collection.</summary>
        <returns>The zero-based index of the first occurrence of the object within the collection; otherwise, -1 if the object is not in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you should use the <xref:System.Web.UI.WebControls.TableCellCollection.GetCellIndex%2A> method to get the index of an element in a <xref:System.Web.UI.WebControls.TableCellCollection> object.  
  
 The IList.IndexOf method is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.TableCellCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index within the collection at which to insert the object.</param>
        <param name="o">The object to insert into the collection.</param>
        <summary>Inserts an object into the collection at the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you should use the <xref:System.Web.UI.WebControls.TableCellCollection.AddAt%2A> method to add an element to a <xref:System.Web.UI.WebControls.TableCellCollection> object.  
  
 The IList.Insert method is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.TableCellCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Collections.IList.IsFixedSize%2A&gt;.</summary>
        <value>
          <see langword="true" /> if the list has a fixed size; otherwise, <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.TableCellCollection> instance is cast to the <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the element to get or set.</param>
        <summary>For a description of this member, see &lt;xref:System.Collections.IList.Item%2A&gt;.</summary>
        <value>The element at the specified index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.TableCellCollection> instance is cast to the <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to remove from the collection.</param>
        <summary>Removes an object from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you should use the <xref:System.Web.UI.WebControls.TableCellCollection.Remove%2A?displayProperty=fullName> method to remove an element from a <xref:System.Web.UI.WebControls.TableCellCollection> object.  
  
 The IList.Remove method is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.TableCellCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>