<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents the properties and methods of a default HTTP handler.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A DefaultHttpHandler object intercepts incoming requests in the HTTP pipeline when both request interception has been configured through Internet Information Services (IIS) 6.0 and no explicit  bindings apply to the requested extension.  
  
 Request interception can be set up through the wildcard application mapping feature introduced in IIS 6.0. For more information, search the [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118) for information about using wildcard application maps to remap a URL.  
  
 The DefaultHttpHandler class implements the <xref:System.Web.IHttpAsyncHandler> interface to provide asynchronous request processing. For general information about HTTP handlers, see [HTTP Handlers and HTTP Modules Overview](~/add/includes/ajax-current-ext-md.md). Additionally, for more information see the following:  
  
-   About creating asynchronous HTTP handlers, see [Walkthrough: Creating an Asynchronous HTTP Handler](~/add/includes/ajax-current-ext-md.md).  
  
-   About registering HTTP handlers, see [How to: Register HTTP Handlers](~/add/includes/ajax-current-ext-md.md).  
  
 Classes can derive from the DefaultHttpHandler class to provide customized handling of requests. An asynchronous HTTP handler that is derived from the DefaultHttpHandler could override the <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> method to change how requests are processed.  
  
 A DefaultHttpHandler does not use ASP.NET errors. Existing content that uses IIS errors or a propriety ISAPI custom error mechanism would work unchanged.  
  
   
  
## Examples  
 The following code example demonstrates how to implement a customized HTTP handler by deriving from the DefaultHttpHandler class.  
  
 [!code-vb[System.Web.DefaultHttpHandler#1](~/add/codesnippet/visualbasic/t-system.web.defaulthttp_1.vb)]
 [!code-cs[System.Web.DefaultHttpHandler#1](~/add/codesnippet/csharp/t-system.web.defaulthttp_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.DefaultHttpHandler" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">An object that provides references to intrinsic server objects that are used to service HTTP requests.</param>
        <param name="callback">The method to call when the asynchronous method call is complete. If `callback` is <see langword="null" />, the delegate is not called.</param>
        <param name="state">Any state data that is needed to process the request.</param>
        <summary>Initiates an asynchronous call to the HTTP handler.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that contains information about the status of the process.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When creating an HTTP handler for asynchronous use, your handler must implement the asynchronous BeginProcessRequest and <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> methods that are called asynchronously by ASP.NET.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The preconditions for processing a request fail and either the requested file has the suffix .asp or the request was sent through POST.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the context that is associated with the current <see cref="T:System.Web.DefaultHttpHandler" /> object.</summary>
        <value>An <see cref="T:System.Web.HttpContext" /> object that contains the current context.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Context property provides access to the current <xref:System.Web.HttpContext> object for derived classes. An <xref:System.Web.HttpContext> object provides access to the intrinsic <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, and <xref:System.Web.HttpApplication.Server%2A> properties for the request. For more information about accessing contextual information, see <xref:System.Web.HttpContext>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">An object that contains information about the status of the process.</param>
        <summary>Provides an end method for an asynchronous process.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the EndProcessRequest method to throw any exceptions that are caught during the asynchronous process.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of request headers and request values to transfer along with the request.</summary>
        <value>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> containing request headers and values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ExecuteUrlHeaders property returns an empty collection unless it is populated in a class that is derived from the <xref:System.Web.DefaultHttpHandler> class. The headers that are added are appended to the collection of headers in the request before passing the request back to Internet Information Services (IIS).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value indicating that another request can use the current instance of the <see cref="T:System.Web.DefaultHttpHandler" /> class.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Web.DefaultHttpHandler" /> is reusable; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To explicitly set the IsReusable property to `true` or `false`, override the IsReusable property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when preconditions prevent the <see cref="T:System.Web.DefaultHttpHandler" /> object from processing a request.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Preconditions are specified by the client in the request-header fields and are evaluated on the Web server. For example, by using preconditions, clients can prevent a requested method (for example, GET) from being applied to a resource other than the one intended. For more information, see section 14, "Header Field Definitions," in the [Hypertext Transfer Protocol -- HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) specification on the World Wide Web Consortium (W3C) Web site.  
  
 The OnExecuteUrlPreconditionFailure method is called when preconditions prevent the <xref:System.Web.DefaultHttpHandler> object from processing a request. A deriving class might override the OnExecuteUrlPreconditionFailure method to throw an exception when the preconditions fail. The <xref:System.Web.DefaultHttpHandler> does not throw an exception in the OnExecuteUrlPreconditionFailure method.  
  
 Any of the following will cause the preconditions to fail:  
  
-   Calling <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>.  
  
-   Calling <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>.  
  
-   Calling <xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>.  
  
-   Changing the cache policy for the response.  
  
-   Adding a <xref:System.IO.Stream> object as a filter to the <xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Overrides the target URL for the current request.</summary>
        <returns>The overridden URL to use in the request; or <see langword="null" /> if an overridden URL is not provided.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OverrideExecuteUrlPath method returns `null` unless it is overridden in a class that is derived from the <xref:System.Web.DefaultHttpHandler> class.  
  
 The OverrideExecuteUrlPath method is called only if ASP.NET is running in worker process isolation mode on IIS 6.0, and if the response was not modified before the <xref:System.Web.DefaultHttpHandler> object was called. The response is modified by any of the following:  
  
-   Calling <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>.  
  
-   Calling <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>.  
  
-   Calling <xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>.  
  
-   Changing the cache policy for the response.  
  
-   Adding a <xref:System.IO.Stream> object as a filter to the <xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">An object that provides references to intrinsic server objects used to service HTTP requests.</param>
        <summary>Enables a <see cref="T:System.Web.DefaultHttpHandler" /> object to process of HTTP Web requests.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ProcessRequest method should not be called synchronously. Classes that are derived from the <xref:System.Web.DefaultHttpHandler> class can override the ProcessRequest to provide customized request processing.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The ProcessRequest is called synchronously.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>