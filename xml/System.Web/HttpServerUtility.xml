<Type Name="HttpServerUtility" FullName="System.Web.HttpServerUtility">
  <TypeSignature Language="C#" Value="public sealed class HttpServerUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpServerUtility extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides helper methods for processing Web requests.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The methods and properties of the HttpServerUtility class are exposed through the intrinsic <xref:System.Web.HttpContext.Server%2A> object provided by ASP.NET.  
  
   
  
## Examples  
 A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192870).  
  
 The following example demonstrates how to use the <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method and the <xref:System.Web.HttpServerUtility.UrlEncode%2A> method of the HttpServerUtility class. The <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method helps ensure that any user-supplied string input will be rendered as static text in browsers instead of executable script or HTML elements. The <xref:System.Web.HttpServerUtility.UrlEncode%2A> method encodes URLs so that they are correctly transmitted in the HTTP stream.  
  
 [!code-cs[System.Web.HttpServerUtility1#1](~/add/codesnippet/csharp/t-system.web.httpserveru_1.aspx)]
 [!code-vb[System.Web.HttpServerUtility1#1](~/add/codesnippet/visualbasic/t-system.web.httpserveru_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ClearError">
      <MemberSignature Language="C#" Value="public void ClearError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearError() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the previous exception.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example clears the last exception that was thrown.  
  
 [!code-cs[Classic HttpServerUtility.ClearError Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_6_1.cs)]
 [!code-vb[Classic HttpServerUtility.ClearError Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(string progID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">The class or type of object to create an instance of.</param>
        <summary>Creates a server instance of a COM object identified by the object's programmatic identifier (ProgID).</summary>
        <returns>The new object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates an object by using the object's ProgID.  
  
 [!code-vb[Classic HttpServerUtility.CreateObject Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_4_1.vb)]
 [!code-cs[Classic HttpServerUtility.CreateObject Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">An instance of the object could not be created.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A &lt;xref:System.Type&gt; representing the object to create.</param>
        <summary>Creates a server instance of a COM object identified by the object's type.</summary>
        <returns>The new object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateObjectFromClsid">
      <MemberSignature Language="C#" Value="public object CreateObjectFromClsid (string clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObjectFromClsid(string clsid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">The class identifier of the object to create an instance of.</param>
        <summary>Creates a server instance of a COM object identified by the object's class identifier (CLSID).</summary>
        <returns>The new object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to use the CreateObjectFromClsid method to create a server instance of a COM object.  
  
 [!code-cs[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_2_1.cs)]
 [!code-vb[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">An instance of the object could not be created.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The URL path to execute.</param>
        <summary>Executes the handler for the specified virtual path in the context of the current request.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Execute method continues execution of the original page after execution of the new page is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.  
  
 ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  
  
 You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  
  
 You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.  
  
   
  
## Examples  
 The following example displays the .aspx page "Updateinfo.aspx" in the current directory. Program execution returns to the starting page after the Updateinfo.aspx page is displayed.  
  
 [!code-vb[Classic HttpServerUtility.Execute Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_15_1.vb)]
 [!code-cs[Classic HttpServerUtility.Execute Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_15_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.  
  
 \- or -  
  
 An error occurred while executing the handler specified by <paramref name="path" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="path" /> is not a virtual path.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, bool preserveForm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">The URL path to execute.</param>
        <param name="preserveForm">
          <see langword="true" /> to preserve the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections; <see langword="false" /> to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</param>
        <summary>Executes the handler for the specified virtual path in the context of the current request and specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to execute the .aspx page `Updateinfo.aspx` in the current request and preserve the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections. Program execution returns to the starting page after `Updateinfo.aspx` is displayed.  
  
 [!code-vb[HttpServerUtility.Execute#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_16_1.aspx)]
 [!code-cs[HttpServerUtility.Execute#1](~/add/codesnippet/csharp/m-system.web.httpserveru_16_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.  
  
 \- or -  
  
 An error occurred while executing the handler specified by <paramref name="path" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="path" /> is not a virtual path.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="path">The URL path to execute.</param>
        <param name="writer">The &lt;xref:System.IO.TextWriter&gt; to capture the output.</param>
        <summary>Executes the handler for the specified virtual path in the context of the current request. A &lt;xref:System.IO.TextWriter&gt; captures output from the executed handler.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Execute method continues execution of the original request after execution of the virtual path specified is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.  
  
 ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  
  
 You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  
  
 You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.  
  
   
  
## Examples  
 The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`. It writes the HTML stream received from `writer` to the HTTP output stream.  
  
 [!code-cs[Classic HttpServerUtility.Execute1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_12_1.cs)]
 [!code-vb[Classic HttpServerUtility.Execute1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.  
  
 \- or -  
  
 An error occurred while executing the handler specified by <paramref name="path" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.  
  
 \- or -  
  
 <paramref name="path" /> is not a virtual path.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">The URL path to execute.</param>
        <param name="writer">The &lt;xref:System.IO.TextWriter&gt; to capture the output.</param>
        <param name="preserveForm">
          <see langword="true" /> to preserve the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections; <see langword="false" /> to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</param>
        <summary>Executes the handler for the specified virtual path in the context of the current request. A &lt;xref:System.IO.TextWriter&gt; captures output from the page and a Boolean parameter specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original request after execution of the specified virtual path is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.  
  
 ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  
  
 You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  
  
 You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.  
  
   
  
## Examples  
 The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`. It writes the HTML stream received from `writer` to the HTTP output stream. The contents of the <xref:System.Web.HttpRequest.Form%2A> and <xref:System.Web.HttpRequest.QueryString%2A> collections are preserved.  
  
 [!code-cs[HttpServerUtility.Execute02#1](~/add/codesnippet/csharp/0d13d28c-0070-4c47-b943-_1.aspx)]
 [!code-vb[HttpServerUtility.Execute02#1](~/add/codesnippet/visualbasic/0d13d28c-0070-4c47-b943-_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is a null reference (<see langword="Nothing" /> in Visual Basic).  
  
 \- or -  
  
 <paramref name="path" /> ends with a period (.).  
  
 \- or -  
  
 An error occurred while executing the handler specified by <paramref name="path" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> is not a virtual path.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Web.IHttpHandler handler, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Web.IHttpHandler handler, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler">The HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> to transfer the current request to.</param>
        <param name="writer">The &lt;xref:System.IO.TextWriter&gt; to capture the output.</param>
        <param name="preserveForm">
          <see langword="true" /> to preserve the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections; <see langword="false" /> to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</param>
        <summary>Executes the handler for the specified virtual path in the context of the current request. A &lt;xref:System.IO.TextWriter&gt; captures output from the executed handler and a Boolean parameter specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS). Executable code that is defined in the HTTP handler classes instead of  conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests. HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.  
  
 ASP.NET does not verify that the current user is authorized to view the resource that is delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler that is indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If the security policy for your application requires clients to have appropriate authorization to gain access to the resource, the application should force reauthorization or provide a custom access-control mechanism.  
  
 You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. The <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.  
  
 You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">An error occurred while executing the handler specified by <paramref name="handler" />.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="handler" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetLastError">
      <MemberSignature Language="C#" Value="public Exception GetLastError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetLastError() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the previous exception.</summary>
        <returns>The previous exception that was thrown.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example prints a description of the application's last error to the HTTP output stream. It prints "No Errors" if no errors have been encountered.  
  
 [!code-vb[Classic HttpServerUtility.GetLastError Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_8_1.vb)]
 [!code-cs[Classic HttpServerUtility.GetLastError Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_8_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public string HtmlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlDecode(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The HTML string to decode.</param>
        <summary>Decodes an HTML-encoded string and returns the decoded string.</summary>
        <returns>The decoded text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag. When the characters are HTML encoded, they are converted to the strings `<` and `>`, which causes the browser to display the less than sign and greater than sign correctly. HtmlDecode decodes text that has been transmitted to the server.  
  
 This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> to decode strings.  
  
 In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  
  
 Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.  
  
   
  
## Examples  
 The following example contains the function `LoadDecodedFile`, which decodes the data from a file and copies it into one string.  
  
 [!code-cs[Classic HttpServerUtility.HtmlDecode Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_14_1.aspx)]
 [!code-vb[Classic HttpServerUtility.HtmlDecode Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_14_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public void HtmlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">The HTML string to decode.</param>
        <param name="output">The &lt;xref:System.IO.TextWriter&gt; output stream that contains the decoded string.</param>
        <summary>Decodes an HTML-encoded string and sends the resulting output to a &lt;xref:System.IO.TextWriter&gt; output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag. When the characters are HTML encoded, they are converted to the strings `<` and `>`, which causes the browser to display the less than sign and greater than sign correctly.  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> decodes text that has been transmitted to the server.  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.HtmlDecode%2A> uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> to decode strings.  
  
 To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.  
  
   
  
## Examples  
 The following example decodes a string that has been HTML-encoded for transmission over HTTP. It decodes the supplied string named `EncodedString` which contains the text "This is a &lt;Test String&gt;.", and copies it into the string named `DecodedString` as "This is a \<Test String>.".  
  
 [!code-vb[Classic HttpServerUtility.HtmlDecode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_1_1.vb)]
 [!code-cs[Classic HttpServerUtility.HtmlDecode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public string HtmlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlEncode(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The text string to encode.</param>
        <summary>HTML-encodes a string and returns the encoded string.</summary>
        <returns>The HTML-encoded text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag. When the characters are HTML encoded, they are converted to the strings `<` and `>`, which causes the browser to display the less than sign and greater than sign correctly.  
  
 This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> to encode strings.  
  
 In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  
  
 Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.  
  
   
  
## Examples  
 The following example shows how to HTML-encode a value that potentially codes unsafe code. The code resides in the code-behind file for a web page. The value to encode is hard-coded in this example only to simplify the example and show the type of value you might HTML-encode. Typically, you would HTML-encode a value that you received from the user or the request. `Result` refers to a `Literal` control.  
  
 [!code-cs[System.Web.HttpServerUtility.HtmlEncode#1](~/add/codesnippet/csharp/m-system.web.httpserveru_10_1.cs)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_10_1.vb)]  
  
 The next example is similar to the previous example except it shows how to HTML-encode a value from within a class that is not in the code-behind file.  
  
 [!code-cs[System.Web.HttpServerUtility.HtmlEncode#2](~/add/codesnippet/csharp/m-system.web.httpserveru_10_2.cs)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_10_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public void HtmlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">The string to encode.</param>
        <param name="output">The &lt;xref:System.IO.TextWriter&gt; output stream that contains the encoded string.</param>
        <summary>HTML-encodes a string and sends the resulting output to a &lt;xref:System.IO.TextWriter&gt; output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML encoding ensures that text will be correctly displayed in the browser, not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as an opening or closing bracket of an HTML tag. The HTML encoding of these two characters is `<` and `>`, respectively, which causes the browser to display the less than sign and greater than sign correctly.  
  
 <xref:System.Web.HttpServerUtility.HtmlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.HtmlEncode%2A> uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> to encode strings.  
  
 To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.  
  
   
  
## Examples  
 The following example encodes a string for transmission by HTTP. It encodes the string named `TestString`, which contains the text "This is a \<Test String>.", and copies it into the string named `EncodedString` as "This is a &lt;Test String&gt;.".  
  
 [!code-vb[Classic HttpServerUtility.HtmlEncode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_7_1.vb)]
 [!code-cs[Classic HttpServerUtility.HtmlEncode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_7_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the server's computer name.</summary>
        <value>The name of the local computer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example stores the server's computer name as a string variable.  
  
 [!code-vb[Classic HttpServerUtility.MachineName Example#1](~/add/codesnippet/visualbasic/p-system.web.httpserveru_0_1.vb)]
 [!code-cs[Classic HttpServerUtility.MachineName Example#1](~/add/codesnippet/csharp/p-system.web.httpserveru_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The computer name cannot be found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The virtual path in the Web application.</param>
        <summary>Returns the physical file path that corresponds to the specified virtual path.</summary>
        <returns>The physical file path on the Web server that corresponds to <paramref name="path" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `path` is `null`, the MapPath method returns the full physical path of the directory that contains the current request for the path. The relative path does not need to specify an existing file or folder for this method to return a value. However, you cannot specify a path outside of the Web application.  
  
> [!IMPORTANT]
>  The MapPath method potentially contains sensitive information about the hosting environment. The return value should not be displayed to users.  
  
 A Web application that resides at `C:\ExampleSites\TestMapPath` would return the following results:  
  
|Request from|`path`|Returned value|  
|------------------|------------|--------------------|  
|RootLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath|  
|RootLevelPage.aspx|"/DownOneLevel/DownLevelPage.aspx"|C:\ExampleSites\TestMapPath\DownOneLevel\DownLevelPage.aspx|  
|RootLevelPage.aspx|"/NotRealFolder"|C:\ExampleSites\TestMapPath\NotRealFolder|  
|RootLevelPage.aspx|"../OutsideApplication"|<xref:System.Web.HttpException>|  
|/DownOneLevel/DownLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath\DownOneLevel|  
|/DownOneLevel/DownLevelPage.aspx|"../RootLevelPage.aspx"|C:\ExampleSites\TestMapPath\RootLevelPage.aspx|  
  
   
  
## Examples  
 The following example shows how to retrieve the physical file of a relative virtual path. The code resides in the code-behind file for a web page and utilizes the default `Server` object.  
  
 [!code-cs[System.Web.HttpServerUtility.MapPath#1](~/add/codesnippet/csharp/m-system.web.httpserveru_5_1.cs)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_5_1.vb)]  
  
 The next example is similar to the previous example except it shows how to retrieve a physical path from within a class that is not in the code-behind file.  
  
 [!code-cs[System.Web.HttpServerUtility.MapPath#2](~/add/codesnippet/csharp/m-system.web.httpserveru_5_2.cs)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_5_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScriptTimeout">
      <MemberSignature Language="C#" Value="public int ScriptTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScriptTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets and sets the request time-out value in seconds.</summary>
        <value>The time-out value setting for requests.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ScriptTimeout property can be set in the Web.config file by setting the `executionTimeout` attribute of the  element. Setting the time-out programmatically with the ScriptTimeout property takes precedence over the Web.config setting.  
  
> [!NOTE]
>  If you set the `debug` attribute of the  element to `true` in the Web.config file, the value of ScriptTimeout will be ignored.  
  
   
  
## Examples  
 The following example sets the request time-out period to 60 seconds.  
  
 [!code-vb[Classic HttpServerUtility.ScriptTimeout Example#1](~/add/codesnippet/visualbasic/p-system.web.httpserveru_1_1.vb)]
 [!code-cs[Classic HttpServerUtility.ScriptTimeout Example#1](~/add/codesnippet/csharp/p-system.web.httpserveru_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The time-out period is <see langword="null" /> or otherwise could not be set.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The URL path of the new page on the server to execute.</param>
        <summary>For the current request, terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The page transferred to should be another .aspx page. For instance, a transfer to an .asp or .asmx page is not valid. The Transfer method preserves the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections.  
  
 Transfer calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.  
  
 ASP.NET does not verify that the current user is authorized to view the resource delivered by the Transfer method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  
  
 You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  
  
 You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path, bool preserveForm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">The URL path of the new page on the server to execute.</param>
        <param name="preserveForm">
          <see langword="true" /> to preserve the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections; <see langword="false" /> to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</param>
        <summary>Terminates execution of the current page and starts execution of a new page by using the specified URL path of the page. Specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The page transferred to should be another .aspx page. For instance, a transfer to an .asp or .asmx page is not valid.  
  
 Transfer calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.  
  
 If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.  
  
 For security purposes, you should keep the `enableViewStateMac` attribute set to `true`. ASP.NET does not verify that the current user is authorized to view the resource delivered by the Transfer method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  
  
 You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  
  
 You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.  
  
   
  
## Examples  
 The following example executes a new page in the same directory as the current page.  
  
 [!code-cs[Classic HttpServerUtility.Transfer Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_3_1.cs)]
 [!code-vb[Classic HttpServerUtility.Transfer Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">The current page request is a callback.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (System.Web.IHttpHandler handler, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(class System.Web.IHttpHandler handler, bool preserveForm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler">The HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> to transfer the current request to.</param>
        <param name="preserveForm">
          <see langword="true" /> to preserve the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections; <see langword="false" /> to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</param>
        <summary>Terminates execution of the current page and starts execution of a new request by using a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> interface and specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS). Executable code that is defined in the HTTP handler classes instead of conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests. HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.  
  
 If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.  
  
 For security purposes, you should keep the `enableViewStateMac` attribute set to `true`. ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method, and does not rerun authentication and authorization logic for the new resource. If the security policy for your application requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  
  
 You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.  
  
 You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">The current page request is a callback.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The URL path of the new page on the server to execute.</param>
        <summary>Performs an asynchronous execution of the specified URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to `false`, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`. For more information, see the "Remarks" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> overload.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)].</exception>
        <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="path" /> parameter is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">The URL path of the new page on the server to execute.</param>
        <param name="preserveForm">
          <see langword="true" /> to preserve the &lt;xref:System.Web.HttpRequest.Form%2A&gt; collection; <see langword="false" /> to clear the &lt;xref:System.Web.HttpRequest.Form%2A&gt; collection.</param>
        <summary>Performs an asynchronous execution of the specified URL and preserves query string parameters.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to the value passed in, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`. For more information, see the "Remarks" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.  
  
 TransferRequest is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)].</exception>
        <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="path" /> parameter is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="path">The URL path of the new page on the server to execute.</param>
        <param name="preserveForm">
          <see langword="true" /> to preserve the &lt;xref:System.Web.HttpRequest.Form%2A&gt; collection; <see langword="false" /> to clear the &lt;xref:System.Web.HttpRequest.Form%2A&gt; collection.</param>
        <param name="method">The HTTP method to use in the execution of the new request.</param>
        <param name="headers">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of request headers for the new request.</param>
        <summary>Performs an asynchronous execution of the specified URL using the specified HTTP method and headers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used when running with the integrated pipeline mode in [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] to allow request processing to be transferred from one resource type to another while executing the target request with the correct request context. For example, you can use the TransferRequest method to transfer a request for an ASPX page to a request for an XML page.  
  
 The TransferRequest method performs an asynchronous child execution of the specified URL with the following conditions:  
  
-   If the `path` parameter specifies a query string, it will be used as the new query string. If no query string is included, the query string of the request will be re-used.  
  
-   If the `method` parameter is specified, it will be used. If it is `null`, the HTTP method of the original request will be used.  
  
-   If the `preserveForm` parameter is `true`, the current entity body of the request will be available to the target request. This allows form posts and uploads to be transferred.  
  
-   If the user identity is currently set on the original request, the identity will be transferred to the new request. This allows authenticated requests to re-use the result of the authentication for the new request. If you do not want the user to be transferred, set the user to `null` on the original request before transferring.  
  
-   If the `headers` parameter is specified, the new request will execute with the specified headers. This can be used to modify the request headers and cookies for the new request, or add a special header that specifies where the original request was received.  
  
     This method calls the <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29> method overload with the `preserveUser` parameter set to `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">The request requires [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] running in integrated mode.</exception>
        <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="path" /> parameter is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers, bool preserveUser);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers, bool preserveUser) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="preserveUser" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">The path.</param>
        <param name="preserveForm">
          <see langword="true" /> to preserve the &lt;xref:System.Web.HttpRequest.Form%2A&gt; collection; <see langword="false" /> to clear the &lt;xref:System.Web.HttpRequest.Form%2A&gt; collection.</param>
        <param name="method">The HTTP method to use in the new request.</param>
        <param name="headers">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> object that contains request headers for the new request.</param>
        <param name="preserveUser">
          <see langword="true" /> to preserve the user identity; otherwise, <see langword="false" />. The other method overloads of this method call this overload with this parameter set to <see langword="true" />.</param>
        <summary>Performs an asynchronous execution of the specified URL using the specified HTTP method, headers, and path, and optionally preserves form values and the user identity.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information, see the "Remarks" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)].</exception>
        <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="path" /> parameter is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public string UrlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlDecode(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The text string to decode.</param>
        <summary>URL-decodes a string and returns the decoded string.</summary>
        <returns>The decoded text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.  
  
 This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> to decode strings.  
  
 In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  
  
 Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.  
  
   
  
## Examples  
 The following example shows how to URL-decode a value that is retrieved from the query string. The code resides in the code-behind file for a web page. `ReturnPage` refers to a `HyperLink` control.  
  
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_9_1.vb)]
 [!code-cs[System.Web.HttpServerUtility.UrlDecode#1](~/add/codesnippet/csharp/m-system.web.httpserveru_9_1.cs)]  
  
 The next example is similar to the previous example except it shows how to URL-decode a value from within a class that is not in the code-behind file.  
  
 [!code-cs[System.Web.HttpServerUtility.UrlDecode#2](~/add/codesnippet/csharp/m-system.web.httpserveru_9_2.cs)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_9_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public void UrlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">The HTML string to decode.</param>
        <param name="output">The &lt;xref:System.IO.TextWriter&gt; output stream that contains the decoded string.</param>
        <summary>Decodes an HTML string received in a URL and sends the resulting output to a &lt;xref:System.IO.TextWriter&gt; output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.  
  
 <xref:System.Web.HttpServerUtility.UrlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.UrlDecode%2A> uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> to decode strings.  
  
 To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.  
  
   
  
## Examples  
 The following example decodes the string named `EncodedString` (received in a URL) into the string named `DecodedString`.  
  
 [!code-vb[Classic HttpServerUtility.UrlDecode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_11_1.vb)]
 [!code-cs[Classic HttpServerUtility.UrlDecode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_11_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public string UrlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlEncode(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The text to URL-encode.</param>
        <summary>URL-encodes a string and returns the encoded string.</summary>
        <returns>The URL-encoded text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.  
  
 This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> to encode strings.  
  
 In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  
  
 Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.  
  
   
  
## Examples  
 The following example shows how to URL-encode a value that is used as a query string value of a hyperlink. The code resides in the code-behind file for a web page. The value to encode is hard-coded in this example only to simplify the example and show the type of value you might URL-encode. Typically, you would URL-encode a value that you received from the user or the request. `NextPage` refers to a `HyperLink` control.  
  
 [!code-cs[System.Web.HttpServerUtility.UrlEncode#1](~/add/codesnippet/csharp/m-system.web.httpserveru_0_1.cs)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_0_1.vb)]  
  
 The next example is similar to the previous example except it shows how to URL-encode a value from within a class that is not in the code-behind file.  
  
 [!code-cs[System.Web.HttpServerUtility.UrlEncode#2](~/add/codesnippet/csharp/m-system.web.httpserveru_0_2.cs)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_0_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public void UrlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">The text string to encode.</param>
        <param name="output">The &lt;xref:System.IO.TextWriter&gt; output stream that contains the encoded string.</param>
        <summary>URL-encodes a string and sends the resulting output to a &lt;xref:System.IO.TextWriter&gt; output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.  
  
 <xref:System.Web.HttpServerUtility.UrlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.UrlEncode%2A> uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> to encode strings.  
  
 To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.  
  
   
  
## Examples  
 The following example encodes a string for transmission by HTTP. It encodes the string named `TestString`, which contains the text "This is a \<Test String>.", and copies it into the string named `EncodedString` as "This+is+a+%3cTest+String%3e.".  
  
 [!code-cs[Classic HttpServerUtility.UrlEncode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_13_1.cs)]
 [!code-vb[Classic HttpServerUtility.UrlEncode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="public string UrlPathEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlPathEncode(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The text to URL-encode.</param>
        <summary>Do not use; intended only for browser compatibility. Use &lt;xref:System.Web.HttpServerUtility.UrlEncode%2A&gt;.</summary>
        <returns>The URL encoded text.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UrlTokenDecode">
      <MemberSignature Language="C#" Value="public static byte[] UrlTokenDecode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlTokenDecode(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The URL string token to decode.</param>
        <summary>Decodes a URL string token to its equivalent byte array using base 64 digits.</summary>
        <returns>The byte array containing the decoded URL string token.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UrlTokenDecode method converts a URL string token, which encodes binary data as base 64 digits, to its equivalent byte array representation. Use the UrlTokenDecode method to decode tokens transmitted on the URL and encoded by using the <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>.  
  
 The UrlTokenDecode method will return an empty byte array if the `input` parameter has a length of less than one.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value of the <paramref name="input" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UrlTokenEncode">
      <MemberSignature Language="C#" Value="public static string UrlTokenEncode (byte[] input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlTokenEncode(unsigned int8[] input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="input">The byte array to encode.</param>
        <summary>Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL.</summary>
        <returns>The string containing the encoded token if the byte array *length* is greater than one; otherwise, an empty string ("").</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UrlTokenEncode method converts a byte array into an equivalent string representation encoded with base 64 digits. The resulting string token can be transmitted on the URL.  
  
 The UrlTokenEncode will return an empty string if the `input` parameter has a length of less than one.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value of the <paramref name="input" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>