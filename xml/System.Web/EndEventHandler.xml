<Type Name="EndEventHandler" FullName="System.Web.EndEventHandler">
  <TypeSignature Language="C#" Value="public delegate void EndEventHandler(IAsyncResult ar);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EndEventHandler extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="ar" Type="System.IAsyncResult" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="ar">The &lt;xref:System.IAsyncResult&gt; that is the result of the <see cref="T:System.Web.BeginEventHandler" /> operation.</param>
    <summary>Represents the method that handles asynchronous events such as application events.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This delegate is called by the event source when completion of the asynchronous operation is signaled by a callback to the <xref:System.Web.BeginEventHandler> delegate.  
  
 When you create an EndEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).  
  
   
  
## Examples  
 The following code example uses the EndEventHandler delegate to register a handler for an asynchronous page.  
  
 [!code-vb[PageAddOnPreRenderCompleteAsync#1](~/add/codesnippet/visualbasic/t-system.web.endeventhan_1.aspx)]
 [!code-cs[PageAddOnPreRenderCompleteAsync#1](~/add/codesnippet/csharp/t-system.web.endeventhan_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
</Type>