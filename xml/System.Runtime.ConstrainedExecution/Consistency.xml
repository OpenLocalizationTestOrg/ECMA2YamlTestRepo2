<Type Name="Consistency" FullName="System.Runtime.ConstrainedExecution.Consistency">
  <TypeSignature Language="C#" Value="public enum Consistency" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Consistency extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Specifies a reliability contract.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Consistency enumeration is used as a parameter to the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to specify the reliability guarantee on a given method.  
  
   
  
## Examples  
 The following code example demonstrates the use of the Consistency enumeration when specifying a constrained execution region for a method. This code example  is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.  
  
 [!code-vb[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/visualbasic/t-system.runtime.constra_3_1.vb)]
 [!code-cs[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/csharp/t-system.runtime.constra_3_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="MayCorruptAppDomain">
      <MemberSignature Language="C#" Value="MayCorruptAppDomain" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Consistency MayCorruptAppDomain = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Consistency</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MayCorruptInstance">
      <MemberSignature Language="C#" Value="MayCorruptInstance" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Consistency MayCorruptInstance = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Consistency</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MayCorruptProcess">
      <MemberSignature Language="C#" Value="MayCorruptProcess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Consistency MayCorruptProcess = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Consistency</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WillNotCorruptState">
      <MemberSignature Language="C#" Value="WillNotCorruptState" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Consistency WillNotCorruptState = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Consistency</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>In the face of exceptional conditions, the method is guaranteed not to corrupt state.</summary>
        <threadsafe />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  This does not guarantee that the method will never fail; however, it does guarantee that such a failure will never corrupt state.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>