<Type Name="ComUnregisterFunctionAttribute" FullName="System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
  <TypeSignature Language="C#" Value="public sealed class ComUnregisterFunctionAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComUnregisterFunctionAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can apply this attribute to methods.  
  
 ComUnregisterFunctionAttribute enables you to add code that reverses the operations performed by a registration method. If you apply the <xref:System.Runtime.InteropServices.ComRegisterFunctionAttribute> to provide a registration method, you must also provide an unregistration method to reverse the operations done in the registration method. You can have only one unregistration method for a class.  
  
 The common language runtime calls the method with this attribute when its containing assembly is unregistered (directly or indirectly) with the [Regasm.exe (Assembly Registration Tool)](~/add/includes/ajax-current-ext-md.md) or through the <xref:System.Runtime.InteropServices.RegistrationServices.UnregisterAssembly%2A?displayProperty=fullName> API method. Methods with this attribute can have any visibility (public, private, and so on), but must be `static` and must take a single <xref:System.Type> parameter for the <xref:System.Type> to unregister.  
  
   
  
## Examples  
 The following example demonstrates applying <xref:System.Runtime.InteropServices.ComRegisterFunctionAttribute> and ComUnregisterFunctionAttribute to methods with the appropriate signature.  
  
 [!code-vb[Classic ComRegisterFunctionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.runtime.interop_13_1.vb)]
 [!code-cpp[Classic ComRegisterFunctionAttribute Example#1](~/add/codesnippet/cpp/t-system.runtime.interop_13_1.cpp)]
 [!code-cs[Classic ComRegisterFunctionAttribute Example#1](~/add/codesnippet/csharp/t-system.runtime.interop_13_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComUnregisterFunctionAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>