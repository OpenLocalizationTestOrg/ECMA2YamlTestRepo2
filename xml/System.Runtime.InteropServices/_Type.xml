<Type Name="_Type" FullName="System.Runtime.InteropServices._Type">
  <TypeSignature Language="C#" Value="public interface _Type" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _Type" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibImportClass(typeof(System.Type))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exposes the public members of the &lt;xref:System.Type?displayProperty=fullName&gt; class to the unmanaged code.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This interface is for access to managed classes from unmanaged code and should not be called from managed code.  
  
 This interface preserves the vtable order of the <xref:System.Type?displayProperty=fullName> class members that can be accessed by unmanaged COM objects.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.Assembly%2A?displayProperty=fullName&gt; property.</summary>
        <value>An &lt;xref:System.Reflection.Assembly&gt; instance that describes the assembly containing the current type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.Assembly%2A?displayProperty=fullName> property gets the <xref:System.Reflection.Assembly> in which the type is declared. For generic types, this property gets the <xref:System.Reflection.Assembly> in which the generic type is defined.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName&gt; property.</summary>
        <value>The assembly-qualified name of the &lt;xref:System.Type&gt;, including the name of the assembly from which the &lt;xref:System.Type&gt; was loaded.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName> property gets the assembly-qualified name of the <xref:System.Type>, including the name of the assembly from which the <xref:System.Type> was loaded.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.Attributes%2A?displayProperty=fullName&gt; property.</summary>
        <value>A &lt;xref:System.Reflection.TypeAttributes&gt; object representing the attribute set of the &lt;xref:System.Type&gt;, unless the &lt;xref:System.Type&gt; represents a generic type parameter, in which case the value is unspecified.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.Attributes%2A?displayProperty=fullName> property gets the attributes associated with the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.BaseType%2A?displayProperty=fullName&gt; property.</summary>
        <value>The &lt;xref:System.Type&gt; from which the current &lt;xref:System.Type&gt; directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the &lt;xref:System.Object&gt; class.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.BaseType%2A?displayProperty=fullName> property gets the type from which the current <xref:System.Type> directly inherits.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.DeclaringType%2A?displayProperty=fullName&gt; property.</summary>
        <value>The &lt;xref:System.Type&gt; object for the class that declares this member. If the type is a nested type, this property returns the enclosing type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.DeclaringType%2A?displayProperty=fullName> property gets the class that declares this member.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">The &lt;xref:System.Object&gt; whose underlying system type is to be compared with the underlying system type of the current &lt;xref:System.Type&gt;.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.Equals%2A?displayProperty=fullName&gt; method.</summary>
        <returns>
          <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current &lt;xref:System.Type&gt;; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.Equals%2A?displayProperty=fullName> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">The &lt;xref:System.Type&gt; whose underlying system type is to be compared with the underlying system type of the current &lt;xref:System.Type&gt;.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.Equals%2A?displayProperty=fullName&gt; method.</summary>
        <returns>
          <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current &lt;xref:System.Type&gt;; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.Equals%2A?displayProperty=fullName> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">The <see cref="T:System.Reflection.TypeFilter" /> delegate that compares the interfaces against `filterCriteria`.</param>
        <param name="filterCriteria">The search criteria that determines whether an interface should be included in the returned array.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.FindInterfaces%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Type&gt; objects representing a filtered list of the interfaces implemented or inherited by the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Type&gt;, if no interfaces matching the filter are implemented or inherited by the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.FindInterfaces%2A?displayProperty=fullName> method returns an array of <xref:System.Type> objects representing a filtered list of interfaces implemented or inherited by the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">A <see langword="MemberTypes" /> object indicating the type of member to search for.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <param name="filter">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the `filterCriteria` and <see langword="false" /> otherwise. You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class. The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</param>
        <param name="filterCriteria">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.  
  
 The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.FindMembers%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A filtered array of &lt;xref:System.Reflection.MemberInfo&gt; objects of the specified member type.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.MemberInfo&gt;, if the current &lt;xref:System.Type&gt; does not have members of type <paramref name="memberType" /> that match the filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.FindMembers%2A?displayProperty=fullName> method returns a filtered array of <xref:System.Reflection.MemberInfo> objects of the specified member type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt; property.</summary>
        <value>A string containing the fully qualified name of the &lt;xref:System.Type&gt;, including the namespace of the &lt;xref:System.Type&gt; but not the assembly.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.FullName%2A?displayProperty=fullName> property gets the fully qualified name of the <xref:System.Type>, including the namespace of the <xref:System.Type> but not the assembly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetArrayRank%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An &lt;xref:System.Int32&gt; containing the number of dimensions in the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetArrayRank%2A?displayProperty=fullName> method gets the number of dimensions in an <xref:System.Array>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the desired constructor.  
  
 -or-  
  
 An empty array of &lt;xref:System.Type&gt; objects, to get a constructor that takes no parameters. Such an empty array is provided by the <see langword="static" /> field &lt;xref:System.Type?displayProperty=fullName&gt;.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetConstructor%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.ConstructorInfo&gt; object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetConstructor%2A?displayProperty=fullName> method searches for a public instance constructor whose parameters match the types in the specified array.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 <see langword="null" />, to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the constructor to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.  
  
 -or-  
  
 &lt;xref:System.Type&gt;.</param>
        <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetConstructor%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.ConstructorInfo&gt; object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetConstructor%2A?displayProperty=fullName> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 <see langword="null" />, to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="callConvention">The &lt;xref:System.Reflection.CallingConventions&gt; object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the constructor to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</param>
        <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the `types` array. The default binder does not process this parameter.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetConstructor%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.ConstructorInfo&gt; object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetConstructor%2A?displayProperty=fullName> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetConstructors%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.ConstructorInfo&gt; objects representing all the public instance constructors defined for the current &lt;xref:System.Type&gt;, but not including the type initializer (static constructor). If no public instance constructors are defined for the current &lt;xref:System.Type&gt;, or if the current &lt;xref:System.Type&gt; represents a type parameter of a generic type or method definition, an empty array of type &lt;xref:System.Reflection.ConstructorInfo&gt; is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetConstructors%2A?displayProperty=fullName> method returns all the public constructors defined for the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetConstructors%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.ConstructorInfo&gt; objects representing all constructors defined for the current &lt;xref:System.Type&gt; that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type &lt;xref:System.Reflection.ConstructorInfo&gt; if no constructors are defined for the current &lt;xref:System.Type&gt;, if none of the defined constructors match the binding constraints, or if the current &lt;xref:System.Type&gt; represents a type parameter of a generic type or method definition.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetConstructors%2A?displayProperty=fullName> method searches for the constructors defined for the current <xref:System.Type>, using the specified <xref:System.Reflection.BindingFlags>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName> method returns all attributes applied to this member.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
        <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName> method returns all attributes applied to this member.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetDefaultMembers%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.MemberInfo&gt; objects representing all default members of the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.MemberInfo&gt;, if the current &lt;xref:System.Type&gt; does not have default members.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetDefaultMembers%2A?displayProperty=fullName> method searches for the members defined for the current <xref:System.Type> whose <xref:System.Reflection.DefaultMemberAttribute> is set.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetElementType%2A?displayProperty=fullName&gt; method.</summary>
        <returns>The &lt;xref:System.Type&gt; of the object encompassed or referred to by the current array, pointer or reference type.  
  
 -or-  
  
 <see langword="null" /> if the current &lt;xref:System.Type&gt; is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter of a generic type or method definition.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetElementType%2A?displayProperty=fullName> method returns the <xref:System.Type> of the object encompassed or referred to by the current array, pointer or reference type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetEvent%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.EventInfo&gt; objects representing all events that are declared or inherited by the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.EventInfo&gt;, if the current &lt;xref:System.Type&gt; does not have events, or if none of the events match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetEvent%2A?displayProperty=fullName> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of an event that is declared or inherited by the current &lt;xref:System.Type&gt;.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetEvent%2A?displayProperty=fullName&gt; method.</summary>
        <returns>The &lt;xref:System.Reflection.EventInfo&gt; object representing the specified event that is declared or inherited by the current &lt;xref:System.Type&gt;, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetEvent%2A?displayProperty=fullName> method returns the <xref:System.Reflection.EventInfo> object representing the specified event, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetEvents%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.EventInfo&gt; objects representing all the public events that are declared or inherited by the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.EventInfo&gt;, if the current &lt;xref:System.Type&gt; does not have public events.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetEvents%2A?displayProperty=fullName> method returns all the public events that are declared or inherited by the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetEvents%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.EventInfo&gt; objects representing all events that are declared or inherited by the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.EventInfo&gt;, if the current &lt;xref:System.Type&gt; does not have events, or if none of the events match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetEvents%2A?displayProperty=fullName> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the data field to get.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.FieldInfo&gt; object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetField%2A?displayProperty=fullName> method searches for the public field with the specified name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the data field to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.FieldInfo&gt; object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetField%2A?displayProperty=fullName> method searches for the specified field, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetFields%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.FieldInfo&gt; objects representing all the public fields defined for the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.FieldInfo&gt;, if no public fields are defined for the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetFields%2A?displayProperty=fullName> method returns all the public fields of the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetFields%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.FieldInfo&gt; objects representing all fields defined for the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.FieldInfo&gt;, if no fields are defined for the current &lt;xref:System.Type&gt;, or if none of the defined fields match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetFields%2A?displayProperty=fullName> method searches for the fields defined for the current <xref:System.Type>, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetHashCode%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An &lt;xref:System.Int32&gt; containing the hash code for this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetHashCode%2A?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetIDsOfNames">
      <MemberSignature Language="C#" Value="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetIDsOfNames(valuetype System.Guid riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">Reserved for future use. Must be IID_NULL.</param>
        <param name="rgszNames">Passed-in array of names to be mapped.</param>
        <param name="cNames">Count of the names to be mapped.</param>
        <param name="lcid">The locale context in which to interpret the names.</param>
        <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
        <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetInterface%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Type&gt; object representing the interface with the specified name, implemented or inherited by the current &lt;xref:System.Type&gt;, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetInterface%2A?displayProperty=fullName> method searches for the interface with the specified name..  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
        <param name="ignoreCase">
          <see langword="true" /> to perform a case-insensitive search for `name`.  
  
 -or-  
  
 <see langword="false" /> to perform a case-sensitive search for `name`.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetInterface%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Type&gt; object representing the interface with the specified name, implemented or inherited by the current &lt;xref:System.Type&gt;, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetInterface%2A?displayProperty=fullName> method searches for the specified interface, specifying whether to do a case-sensitive search.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">The &lt;xref:System.Type&gt; of the interface of which to retrieve a mapping.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetInterfaceMap%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An &lt;xref:System.Reflection.InterfaceMapping&gt; object representing the interface mapping for <paramref name="interfaceType" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetInterfaceMap%2A?displayProperty=fullName> method returns an interface mapping for the specified interface type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetInterfaces%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Type&gt; objects representing all the interfaces implemented or inherited by the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Type&gt;, if no interfaces are implemented or inherited by the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetInterfaces%2A?displayProperty=fullName> method gets all the interfaces implemented or inherited by the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the public members to get.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMember%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.MemberInfo&gt; objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMember%2A?displayProperty=fullName> method searches for the public members with the specified name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the members to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return an empty array.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMember%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.MemberInfo&gt; objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMember%2A?displayProperty=fullName> method searches for the specified members, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the members to get.</param>
        <param name="type">The <see cref="T:System.Reflection.MemberTypes" /> value to search for.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return an empty array.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMember%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.MemberInfo&gt; objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMember%2A?displayProperty=fullName> method searches for the specified members of the specified member type, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMembers%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.MemberInfo&gt; objects representing all the public members of the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.MemberInfo&gt;, if the current &lt;xref:System.Type&gt; does not have public members.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMembers%2A?displayProperty=fullName> method returns all the public members of the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMembers%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.MemberInfo&gt; objects representing all members defined for the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.MemberInfo&gt;, if no members are defined for the current &lt;xref:System.Type&gt;, or if none of the defined members match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMembers%2A?displayProperty=fullName> method searches for the members defined for the current <xref:System.Type>, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the public method to get.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.MethodInfo&gt; object representing the public method with the specified name, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMethod%2A?displayProperty=fullName> method searches for the public method with the specified name..  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the method to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.MethodInfo&gt; object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMethod%2A?displayProperty=fullName> method searches for the specified method, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the public method to get.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.MethodInfo&gt; object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMethod%2A?displayProperty=fullName> method searches for the specified public method whose parameters match the specified argument types.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the public method to get.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
        <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the `types` array. The default binder does not process this parameter.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.MethodInfo&gt; object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMethod%2A?displayProperty=fullName> method searches for the specified public method whose parameters match the specified argument types and modifiers.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the method to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 <see langword="null" />, to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
        <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the `types` array. The default binder does not process this parameter.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.MethodInfo&gt; object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMethod%2A?displayProperty=fullName> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the method to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 <see langword="null" />, to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="callConvention">The &lt;xref:System.Reflection.CallingConventions&gt; object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
        <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the `types` array. The default binder does not process this parameter.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.MethodInfo&gt; object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMethod%2A?displayProperty=fullName> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMethods%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.MethodInfo&gt; objects representing all the public methods defined for the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.MethodInfo&gt;, if no public methods are defined for the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMethods%2A?displayProperty=fullName> method returns all the public methods of the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetMethods%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.MethodInfo&gt; objects representing all methods defined for the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.MethodInfo&gt;, if no methods are defined for the current &lt;xref:System.Type&gt;, or if none of the defined methods match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetMethods%2A?displayProperty=fullName> method searches for the methods defined for the current <xref:System.Type>, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the nested type to get.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetNestedType%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Type&gt; object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetNestedType%2A?displayProperty=fullName> method searches for the public nested type with the specified name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the nested type to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetNestedType%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Type&gt; object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetNestedType%2A?displayProperty=fullName> method searches for the specified nested type, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetNestedTypes%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Type&gt; objects representing all the types nested within the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Type&gt;, if no types are nested within the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetNestedTypes%2A?displayProperty=fullName> method returns all the types nested within the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetNestedTypes%2A?displayProperty=fullName&gt; method, and searches for the types nested within the current &lt;xref:System.Type&gt;, using the specified binding constraints.</summary>
        <returns>An array of &lt;xref:System.Type&gt; objects representing all the types nested within the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Type&gt;, if no types are nested within the current &lt;xref:System.Type&gt;, or if none of the nested types match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetProperties%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.PropertyInfo&gt; objects representing all public properties of the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.PropertyInfo&gt;, if the current &lt;xref:System.Type&gt; does not have public properties.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetProperties%2A?displayProperty=fullName> method returns all the public properties of the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetProperties%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An array of &lt;xref:System.Reflection.PropertyInfo&gt; objects representing all properties of the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;xref:System.Reflection.PropertyInfo&gt;, if the current &lt;xref:System.Type&gt; does not have properties, or if none of the properties match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetProperties%2A?displayProperty=fullName> method searches for the properties of the current <xref:System.Type>, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the public property to get.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.PropertyInfo&gt; object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetProperty%2A?displayProperty=fullName> method searches for the public property with the specified name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the property to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.PropertyInfo&gt; object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetProperty%2A?displayProperty=fullName> method searches for the specified property, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the public property to get.</param>
        <param name="returnType">The return type of the property.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.PropertyInfo&gt; object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetProperty%2A?displayProperty=fullName> method searches for the public property with the specified name and return type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the public property to get.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.PropertyInfo&gt; object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetProperty%2A?displayProperty=fullName> method searches for the specified public property whose parameters match the specified argument types..  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the public property to get.</param>
        <param name="returnType">The return type of the property.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.PropertyInfo&gt; object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetProperty%2A?displayProperty=fullName> method searches for the specified public property whose parameters match the specified argument types.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the public property to get.</param>
        <param name="returnType">The return type of the property.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
        <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the `types` array. The default binder does not process this parameter.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.PropertyInfo&gt; object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetProperty%2A?displayProperty=fullName> method searches for the specified public property whose parameters match the specified argument types and modifiers.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the property to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return <see langword="null" />.</param>
        <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 <see langword="null" />, to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="returnType">The return type of the property.</param>
        <param name="types">An array of &lt;xref:System.Type&gt; objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type &lt;xref:System.Type&gt; (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
        <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the `types` array. The default binder does not process this parameter.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.Reflection.PropertyInfo&gt; object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetProperty%2A?displayProperty=fullName> method searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt; method.</summary>
        <returns>The current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GetType%2A?displayProperty=fullName> method gets the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">The type information to return.</param>
        <param name="lcid">The locale identifier for the type information.</param>
        <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
        <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoCount">
      <MemberSignature Language="C#" Value="public void GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfoCount(unsigned int32 pcTInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
        <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.GUID%2A?displayProperty=fullName&gt; property.</summary>
        <value>The GUID associated with the &lt;xref:System.Type&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.GUID%2A?displayProperty=fullName> property gets the GUID associated with the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.HasElementType%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.HasElementType%2A?displayProperty=fullName> property  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(unsigned int32 dispIdMember, valuetype System.Guid riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">Identifies the member.</param>
        <param name="riid">Reserved for future use. Must be IID_NULL.</param>
        <param name="lcid">The locale context in which to interpret arguments.</param>
        <param name="wFlags">Flags describing the context of the call.</param>
        <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
        <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
        <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
        <param name="puArgErr">The index of the first argument that has an error.</param>
        <summary>Provides access to properties and methods exposed by an object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the constructor, method, property, or field member to invoke.  
  
 -or-  
  
 An empty string ("") to invoke the default member.  
  
 -or-  
  
 For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
        <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</param>
        <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 <see langword="null" />, to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="target">The &lt;xref:System.Object&gt; on which to invoke the specified member.</param>
        <param name="args">An array containing the arguments to pass to the member to invoke.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An &lt;xref:System.Object&gt; representing the return value of the invoked member.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method invokes the specified member, using the specified binding constraints and matching the specified argument list.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the constructor, method, property, or field member to invoke.  
  
 -or-  
  
 An empty string ("") to invoke the default member.  
  
 -or-  
  
 For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
        <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</param>
        <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 <see langword="null" />, to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="target">The &lt;xref:System.Object&gt; on which to invoke the specified member.</param>
        <param name="args">An array containing the arguments to pass to the member to invoke.</param>
        <param name="culture">The &lt;xref:System.Globalization.CultureInfo&gt; object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.  
  
 -or-  
  
 <see langword="null" /> to use the current thread's &lt;xref:System.Globalization.CultureInfo&gt;.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An &lt;xref:System.Object&gt; representing the return value of the invoked member.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.String&gt; containing the name of the constructor, method, property, or field member to invoke.  
  
 -or-  
  
 An empty string ("") to invoke the default member.  
  
 -or-  
  
 For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
        <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</param>
        <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 <see langword="null" />, to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="target">The &lt;xref:System.Object&gt; on which to invoke the specified member.</param>
        <param name="args">An array containing the arguments to pass to the member to invoke.</param>
        <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the `args` array. A parameter's associated attributes are stored in the member's signature. The default binder does not process this parameter.</param>
        <param name="culture">The &lt;xref:System.Globalization.CultureInfo&gt; object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.  
  
 -or-  
  
 <see langword="null" /> to use the current thread's &lt;xref:System.Globalization.CultureInfo&gt;.</param>
        <param name="namedParameters">An array containing the names of the parameters to which the values in the `args` array are passed.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt; method.</summary>
        <returns>An &lt;xref:System.Object&gt; representing the return value of the invoked member.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers, and culture.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsAbstract%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is abstract; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsAbstract%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is abstract and must be overridden.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsAnsiClass%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the &lt;xref:System.Type&gt;; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsAnsiClass%2A?displayProperty=fullName> property gets a value indicating whether the string format attribute `AnsiClass` is selected for the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsArray%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is an array; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsArray%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is an array.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">The &lt;xref:System.Type&gt; to compare with the current &lt;xref:System.Type&gt;.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsAssignableFrom%2A?displayProperty=fullName&gt; method.</summary>
        <returns>
          <see langword="true" /> if <paramref name="c" /> and the current &lt;xref:System.Type&gt; represent the same type, or if the current &lt;xref:System.Type&gt; is in the inheritance hierarchy of <paramref name="c" />, or if the current &lt;xref:System.Type&gt; is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current &lt;xref:System.Type&gt; represents one of the constraints of <paramref name="c" />. <see langword="false" /> if none of these conditions are the case, or if <paramref name="c" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsAutoClass%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the &lt;xref:System.Type&gt;; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsAutoClass%2A?displayProperty=fullName> property gets a value indicating whether the string format attribute `AutoClass` is selected for the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsAutoLayout%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the class layout attribute <see langword="AutoLayout" /> is selected for the &lt;xref:System.Type&gt;; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsAutoLayout%2A?displayProperty=fullName> property gets a value indicating whether the class layout attribute `AutoLayout` is selected for the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsByRef%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is passed by reference; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsByRef%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is passed by reference.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsClass%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is a class; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsClass%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is a class; that is, not a value type or interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsCOMObject%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is a COM object; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsCOMObject%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is a COM object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsContextful%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; can be hosted in a context; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsContextful%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> can be hosted in a context.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">The <see langword="Type" /> object to which the custom attributes are applied.</param>
        <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=fullName&gt; method.</summary>
        <returns>
          <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is applied to this member; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=fullName> method indicates whether one or more instance of `attributeType` is applied to this member.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsEnum%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the current &lt;xref:System.Type&gt; represents an enumeration; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsEnum%2A?displayProperty=fullName> property gets a value indicating whether the current <xref:System.Type> represents an enumeration.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsExplicitLayout%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the class layout attribute <see langword="ExplicitLayout" /> is selected for the &lt;xref:System.Type&gt;; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsExplicitLayout%2A?displayProperty=fullName> property gets a value indicating whether the class layout attribute `ExplicitLayout` is selected for the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsImport%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; has &lt;xref:System.Runtime.InteropServices.ComImportAttribute&gt;; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsImport%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> has <xref:System.Runtime.InteropServices.ComImportAttribute>, indicating that it was imported from a COM type library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to compare with the current &lt;xref:System.Type&gt;.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsInstanceOfType%2A?displayProperty=fullName&gt; method.</summary>
        <returns>
          <see langword="true" /> if the current &lt;xref:System.Type&gt; is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current &lt;xref:System.Type&gt; is an interface that <paramref name="o" /> supports. <see langword="false" /> if neither of these conditions is the case, or if <paramref name="o" /> is <see langword="null" />, or if the current &lt;xref:System.Type&gt; is an open generic type (that is, &lt;xref:System.Type.ContainsGenericParameters%2A&gt; returns <see langword="true" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsInstanceOfType%2A?displayProperty=fullName> method determines whether the specified object is an instance of the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsInterface%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is an interface; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsInterface%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is an interface; that is, not a class or a value type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsLayoutSequential%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the class layout attribute <see langword="SequentialLayout" /> is selected for the &lt;xref:System.Type&gt;; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsLayoutSequential%2A?displayProperty=fullName> property gets a value indicating whether the class layout attribute `SequentialLayout` is selected for the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsMarshalByRef%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is marshaled by reference; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsMarshalByRef%2A?displayProperty=fullName> property gets a value indicating whether the Type is marshaled by reference.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsNestedAssembly%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is nested and visible only within its own assembly; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsNestedAssembly%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own assembly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to both its own family and its own assembly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsNestedFamily%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is nested and visible only within its own family; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsNestedFamily%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own family.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsNestedFamORAssem%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsNestedFamORAssem%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to either its own family or to its own assembly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsNestedPrivate%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is nested and declared private; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsNestedPrivate%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is nested and declared private.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsNestedPublic%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsNestedPublic%2A?displayProperty=fullName> property gets a value indicating whether a class is nested and declared public.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsNotPublic%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the top-level &lt;xref:System.Type&gt; is not declared public; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsNotPublic%2A?displayProperty=fullName> property gets a value indicating whether the top-level <xref:System.Type> is not declared public.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsPointer%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is a pointer; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsPointer%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is a pointer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsPrimitive%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is one of the primitive types; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsPrimitive%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is one of the primitive types.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsPublic%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the top-level &lt;xref:System.Type&gt; is declared public; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsPublic%2A?displayProperty=fullName> property gets a value indicating whether the top-level <xref:System.Type> is declared public.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsSealed%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is declared sealed; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsSealed%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is declared sealed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsSerializable%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is serializable; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsSerializable%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is serializable.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsSpecialName%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; has a name that requires special handling; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsSpecialName%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> has a name that requires special handling.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">The &lt;xref:System.Type&gt; to compare with the current &lt;xref:System.Type&gt;.</param>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsSubclassOf%2A?displayProperty=fullName&gt; method.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.Type&gt; represented by the <paramref name="c" /> parameter and the current &lt;xref:System.Type&gt; represent classes, and the class represented by the current &lt;xref:System.Type&gt; derives from the class represented by <paramref name="c" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="c" /> and the current &lt;xref:System.Type&gt; represent the same class.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsSubclassOf%2A?displayProperty=fullName> method determines whether the class represented by the current <xref:System.Type> derives from the class represented by the specified <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsUnicodeClass%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the &lt;xref:System.Type&gt;; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsUnicodeClass%2A?displayProperty=fullName> property gets a value indicating whether the string format attribute `UnicodeClass` is selected for the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.IsValueType%2A?displayProperty=fullName&gt; property.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Type&gt; is a value type; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.IsValueType%2A?displayProperty=fullName> property gets a value indicating whether the <xref:System.Type> is a value type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.MemberType%2A?displayProperty=fullName&gt; property.</summary>
        <value>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.MemberType%2A?displayProperty=fullName> property gets a <xref:System.Reflection.MemberTypes> value indicating that this member is a type or a nested type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.Module%2A?displayProperty=fullName&gt; property.</summary>
        <value>The name of the module in which the current &lt;xref:System.Type&gt; is defined.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.Module%2A?displayProperty=fullName> property gets the module (the DLL) in which the current <xref:System.Type> is defined.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Reflection.MemberInfo.Name%2A?displayProperty=fullName&gt; property.</summary>
        <value>The name of the &lt;xref:System.Type&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Reflection.MemberInfo.Name%2A?displayProperty=fullName> property gets the name of the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.Namespace%2A?displayProperty=fullName&gt; property.</summary>
        <value>The namespace of the &lt;xref:System.Type&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.Namespace%2A?displayProperty=fullName> property gets the namespace of the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.ReflectedType%2A?displayProperty=fullName&gt; property.</summary>
        <value>The &lt;xref:System.Type&gt; object through which this &lt;xref:System.Reflection.MemberInfo&gt; object was obtained.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.ReflectedType%2A?displayProperty=fullName> property gets the class object that was used to obtain this member.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.ToString%2A?displayProperty=fullName&gt; method.</summary>
        <returns>A &lt;xref:System.String&gt; representing the name of the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.ToString%2A?displayProperty=fullName> method returns the name of the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.TypeHandle%2A?displayProperty=fullName&gt; property.</summary>
        <value>The handle for the current &lt;xref:System.Type&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property gets the handle for the current <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.TypeInitializer%2A?displayProperty=fullName&gt; property.</summary>
        <value>A &lt;xref:System.Reflection.ConstructorInfo&gt; containing the name of the class constructor for the &lt;xref:System.Type&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.TypeInitializer%2A?displayProperty=fullName> property gets the initializer for the <xref:System.Type>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides COM objects with version-independent access to the &lt;xref:System.Type.UnderlyingSystemType%2A?displayProperty=fullName&gt; property.</summary>
        <value>The underlying system type for the &lt;xref:System.Type&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is for access to managed classes from unmanaged code, and should not be called from managed code.  
  
 The <xref:System.Type.UnderlyingSystemType%2A?displayProperty=fullName> property indicates the type provided by the common language runtime that represents this type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>