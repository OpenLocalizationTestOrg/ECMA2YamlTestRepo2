<Type Name="ComRegisterFunctionAttribute" FullName="System.Runtime.InteropServices.ComRegisterFunctionAttribute">
  <TypeSignature Language="C#" Value="public sealed class ComRegisterFunctionAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComRegisterFunctionAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can apply this attribute to methods.  
  
 ComRegisterFunctionAttribute enables you to add arbitrary registration code to accommodate the requirements of COM clients. For example, you can update the registry using registration functions from the <xref:Microsoft.Win32> namespace. If you provide a registration method, you must also apply <xref:System.Runtime.InteropServices.ComUnregisterFunctionAttribute?displayProperty=fullName> to an unregistration method, which reverses the operations done in the registration method.  
  
 The common language runtime calls the method with this attribute when its containing assembly is registered (directly or indirectly) with the [Regasm.exe (Assembly Registration Tool)](~/add/includes/ajax-current-ext-md.md)or through the <xref:System.Runtime.InteropServices.RegistrationServices.RegisterAssembly%2A?displayProperty=fullName> method.  
  
 This attribute can be applied only to methods that have the following characteristics:  
  
-   Scope: Any (public, private, and so on).  
  
-   Type: `static`.  
  
-   Parameters: Accepts a single <xref:System.Type> parameter or a <xref:System.String> parameter type.  
  
-   Return type: `void`.  
  
   
  
## Examples  
 The following example demonstrates how to apply ComRegisterFunctionAttribute and <xref:System.Runtime.InteropServices.ComUnregisterFunctionAttribute> to methods with the appropriate signature.  
  
 [!code-vb[Classic ComRegisterFunctionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.runtime.interop_12_1.vb)]
 [!code-cpp[Classic ComRegisterFunctionAttribute Example#1](~/add/codesnippet/cpp/t-system.runtime.interop_12_1.cpp)]
 [!code-cs[Classic ComRegisterFunctionAttribute Example#1](~/add/codesnippet/csharp/t-system.runtime.interop_12_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComRegisterFunctionAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>