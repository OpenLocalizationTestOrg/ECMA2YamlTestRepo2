<Type Name="UCOMIMoniker" FullName="System.Runtime.InteropServices.UCOMIMoniker">
  <TypeSignature Language="C#" Value="public interface UCOMIMoniker" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract UCOMIMoniker" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("Use System.Runtime.InteropServices.ComTypes.IMoniker instead. http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0000000f-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Use &lt;xref:System.Runtime.InteropServices.ComTypes.IMoniker?displayProperty=fullName&gt; instead.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about the `IMoniker`, `IPersist`, and `IPersistStream` interfaces, see the MSDN Library.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="BindToObject">
      <MemberSignature Language="C#" Value="public void BindToObject (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, ref Guid riidResult, out object ppvResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BindToObject(class System.Runtime.InteropServices.UCOMIBindCtx pbc, class System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, valuetype System.Guid riidResult, object ppvResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pbc" Type="System.Runtime.InteropServices.UCOMIBindCtx" />
        <Parameter Name="pmkToLeft" Type="System.Runtime.InteropServices.UCOMIMoniker" />
        <Parameter Name="riidResult" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="ppvResult" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context object used in this binding operation.</param>
        <param name="pmkToLeft">A reference to the moniker to the left of this moniker, if the moniker is part of a composite moniker.</param>
        <param name="riidResult">The interface identifier (IID) of the interface the client intends to use to communicate with the object that the moniker identifies.</param>
        <param name="ppvResult">On successful return, reference to the interface requested by `riidResult`.</param>
        <summary>Uses the moniker to bind to the object it identifies.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::BindToObject`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BindToStorage">
      <MemberSignature Language="C#" Value="public void BindToStorage (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, ref Guid riid, out object ppvObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BindToStorage(class System.Runtime.InteropServices.UCOMIBindCtx pbc, class System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, valuetype System.Guid riid, object ppvObj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pbc" Type="System.Runtime.InteropServices.UCOMIBindCtx" />
        <Parameter Name="pmkToLeft" Type="System.Runtime.InteropServices.UCOMIMoniker" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="ppvObj" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context object used during this binding operation.</param>
        <param name="pmkToLeft">A reference to the moniker to the left of this moniker, if the moniker is part of a composite moniker.</param>
        <param name="riid">The interface identifier (IID) of the storage interface requested.</param>
        <param name="ppvObj">On successful return, a reference to the interface requested by `riid`.</param>
        <summary>Retrieves an interface pointer to the storage that contains the object identified by the moniker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::BindToStorage`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommonPrefixWith">
      <MemberSignature Language="C#" Value="public void CommonPrefixWith (System.Runtime.InteropServices.UCOMIMoniker pmkOther, out System.Runtime.InteropServices.UCOMIMoniker ppmkPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommonPrefixWith(class System.Runtime.InteropServices.UCOMIMoniker pmkOther, class System.Runtime.InteropServices.UCOMIMoniker ppmkPrefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pmkOther" Type="System.Runtime.InteropServices.UCOMIMoniker" />
        <Parameter Name="ppmkPrefix" Type="System.Runtime.InteropServices.UCOMIMoniker&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pmkOther">A reference to the <see langword="IMoniker" /> interface on another moniker to compare with this for a common prefix.</param>
        <param name="ppmkPrefix">On successful return, contains the moniker that is the common prefix of this moniker and `pmkOther`.</param>
        <summary>Creates a new moniker based on the common prefix that this moniker shares with another moniker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::CommonPrefixWith`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ComposeWith">
      <MemberSignature Language="C#" Value="public void ComposeWith (System.Runtime.InteropServices.UCOMIMoniker pmkRight, bool fOnlyIfNotGeneric, out System.Runtime.InteropServices.UCOMIMoniker ppmkComposite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ComposeWith(class System.Runtime.InteropServices.UCOMIMoniker pmkRight, bool fOnlyIfNotGeneric, class System.Runtime.InteropServices.UCOMIMoniker ppmkComposite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pmkRight" Type="System.Runtime.InteropServices.UCOMIMoniker" />
        <Parameter Name="fOnlyIfNotGeneric" Type="System.Boolean" />
        <Parameter Name="ppmkComposite" Type="System.Runtime.InteropServices.UCOMIMoniker&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pmkRight">A reference to the <see langword="IMoniker" /> interface on the moniker to compose onto the end of this moniker.</param>
        <param name="fOnlyIfNotGeneric">If <see langword="true" />, the caller requires a nongeneric composition, so the operation proceeds only if `pmkRight` is a moniker class that this moniker can compose with in some way other than forming a generic composite. If <see langword="false" />, the method can create a generic composite if necessary.</param>
        <param name="ppmkComposite">On successful return, a reference to the resulting composite moniker.</param>
        <summary>Combines the current moniker with another moniker, creating a new composite moniker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::ComposeWith`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Enum">
      <MemberSignature Language="C#" Value="public void Enum (bool fForward, out System.Runtime.InteropServices.UCOMIEnumMoniker ppenumMoniker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enum(bool fForward, class System.Runtime.InteropServices.UCOMIEnumMoniker ppenumMoniker) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fForward" Type="System.Boolean" />
        <Parameter Name="ppenumMoniker" Type="System.Runtime.InteropServices.UCOMIEnumMoniker&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="fForward">If <see langword="true" />, enumerates the monikers from left to right. If <see langword="false" />, enumerates from right to left.</param>
        <param name="ppenumMoniker">On successful return, references the enumerator object for the moniker.</param>
        <summary>Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::Enum`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetClassID">
      <MemberSignature Language="C#" Value="public void GetClassID (out Guid pClassID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetClassID(valuetype System.Guid pClassID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pClassID" Type="System.Guid&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pClassID">On successful return, contains the CLSID.</param>
        <summary>Retrieves the class identifier (CLSID) of an object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IPersist::GetClassID`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDisplayName">
      <MemberSignature Language="C#" Value="public void GetDisplayName (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, out string ppszDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetDisplayName(class System.Runtime.InteropServices.UCOMIBindCtx pbc, class System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, string ppszDisplayName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pbc" Type="System.Runtime.InteropServices.UCOMIBindCtx" />
        <Parameter Name="pmkToLeft" Type="System.Runtime.InteropServices.UCOMIMoniker" />
        <Parameter Name="ppszDisplayName" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pbc">A reference to the bind context to use in this operation.</param>
        <param name="pmkToLeft">A reference to the moniker to the left of this moniker, if the moniker is part of a composite moniker.</param>
        <param name="ppszDisplayName">On successful return, contains the display name string.</param>
        <summary>Gets the display name, which is a user-readable representation of this moniker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::GetDisplayName`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetSizeMax">
      <MemberSignature Language="C#" Value="public void GetSizeMax (out long pcbSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetSizeMax(int64 pcbSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcbSize" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcbSize">On successful return, contains a <see langword="long" /> value indicating the size in bytes of the stream needed to save this object.</param>
        <summary>Returns the size in bytes of the stream needed to save the object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IPersistStream::GetSizeMax`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTimeOfLastChange">
      <MemberSignature Language="C#" Value="public void GetTimeOfLastChange (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, out System.Runtime.InteropServices.FILETIME pFileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTimeOfLastChange(class System.Runtime.InteropServices.UCOMIBindCtx pbc, class System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, valuetype System.Runtime.InteropServices.FILETIME pFileTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pbc" Type="System.Runtime.InteropServices.UCOMIBindCtx" />
        <Parameter Name="pmkToLeft" Type="System.Runtime.InteropServices.UCOMIMoniker" />
        <Parameter Name="pFileTime" Type="System.Runtime.InteropServices.FILETIME&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pbc">A reference to the bind context to be used in this binding operation.</param>
        <param name="pmkToLeft">A reference to the moniker to the left of this moniker, if the moniker is part of a composite moniker.</param>
        <param name="pFileTime">On successful return, contains the time of last change.</param>
        <summary>Provides a number representing the time the object identified by this moniker was last changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::GetTimeOfLastChange`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Hash">
      <MemberSignature Language="C#" Value="public void Hash (out int pdwHash);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Hash(int32 pdwHash) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pdwHash" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pdwHash">On successful return, contains the hash value for this moniker.</param>
        <summary>Calculates a 32-bit integer using the internal state of the moniker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::Hash`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Inverse">
      <MemberSignature Language="C#" Value="public void Inverse (out System.Runtime.InteropServices.UCOMIMoniker ppmk);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Inverse(class System.Runtime.InteropServices.UCOMIMoniker ppmk) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ppmk" Type="System.Runtime.InteropServices.UCOMIMoniker&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ppmk">On successful return, contains a moniker that is the inverse of this moniker.</param>
        <summary>Provides a moniker that, when composed to the right of this moniker or one of similar structure, composes to nothing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::Inverse`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public int IsDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IsDirty() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks the object for changes since it was last saved.</summary>
        <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the object has changed; otherwise, an <see langword="S_FALSE" /><see langword="HRESULT" /> value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IPersistStream::IsDirty`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEqual">
      <MemberSignature Language="C#" Value="public void IsEqual (System.Runtime.InteropServices.UCOMIMoniker pmkOtherMoniker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IsEqual(class System.Runtime.InteropServices.UCOMIMoniker pmkOtherMoniker) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pmkOtherMoniker" Type="System.Runtime.InteropServices.UCOMIMoniker" />
      </Parameters>
      <Docs>
        <param name="pmkOtherMoniker">A reference to the moniker to be used for comparison.</param>
        <summary>Compares this moniker with a specified moniker and indicates whether they are identical.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::IsEqual`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public void IsRunning (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, System.Runtime.InteropServices.UCOMIMoniker pmkNewlyRunning);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IsRunning(class System.Runtime.InteropServices.UCOMIBindCtx pbc, class System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, class System.Runtime.InteropServices.UCOMIMoniker pmkNewlyRunning) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pbc" Type="System.Runtime.InteropServices.UCOMIBindCtx" />
        <Parameter Name="pmkToLeft" Type="System.Runtime.InteropServices.UCOMIMoniker" />
        <Parameter Name="pmkNewlyRunning" Type="System.Runtime.InteropServices.UCOMIMoniker" />
      </Parameters>
      <Docs>
        <param name="pbc">A reference to the bind context to be used in this binding operation.</param>
        <param name="pmkToLeft">A reference to the moniker to the left of this moniker if this moniker is part of a composite.</param>
        <param name="pmkNewlyRunning">A reference to the moniker most recently added to the Running Object Table.</param>
        <summary>Determines whether the object that is identified by this moniker is currently loaded and running.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::IsRunning`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSystemMoniker">
      <MemberSignature Language="C#" Value="public void IsSystemMoniker (out int pdwMksys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IsSystemMoniker(int32 pdwMksys) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pdwMksys" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pdwMksys">A pointer to an integer that is one of the values from the <see langword="MKSYS" /> enumeration, and refers to one of the COM moniker classes.</param>
        <summary>Indicates whether this moniker is of one of the system-supplied moniker classes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For details on the values of the `MKSYS` enumeration and for information about `IMoniker::IsSystemMoniker`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Runtime.InteropServices.UCOMIStream pStm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Runtime.InteropServices.UCOMIStream pStm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pStm" Type="System.Runtime.InteropServices.UCOMIStream" />
      </Parameters>
      <Docs>
        <param name="pStm">Stream from which the object is loaded.</param>
        <summary>Initializes an object from the stream where it was previously saved.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IPersistStream::Load`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParseDisplayName">
      <MemberSignature Language="C#" Value="public void ParseDisplayName (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out System.Runtime.InteropServices.UCOMIMoniker ppmkOut);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ParseDisplayName(class System.Runtime.InteropServices.UCOMIBindCtx pbc, class System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, string pszDisplayName, int32 pchEaten, class System.Runtime.InteropServices.UCOMIMoniker ppmkOut) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pbc" Type="System.Runtime.InteropServices.UCOMIBindCtx" />
        <Parameter Name="pmkToLeft" Type="System.Runtime.InteropServices.UCOMIMoniker" />
        <Parameter Name="pszDisplayName" Type="System.String" />
        <Parameter Name="pchEaten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="ppmkOut" Type="System.Runtime.InteropServices.UCOMIMoniker&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pbc">A reference to the bind context to be used in this binding operation.</param>
        <param name="pmkToLeft">A reference to the moniker that has been built out of the display name up to this point.</param>
        <param name="pszDisplayName">A reference to the string containing the remaining display name to parse.</param>
        <param name="pchEaten">On successful return, contains the number of characters in `pszDisplayName` that were consumed in this step.</param>
        <param name="ppmkOut">Reference to the moniker that was built from `pszDisplayName`.</param>
        <summary>Reads as many characters of the specified display name as it understands and builds a moniker corresponding to the portion read.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::ParseDisplayName`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public void Reduce (System.Runtime.InteropServices.UCOMIBindCtx pbc, int dwReduceHowFar, ref System.Runtime.InteropServices.UCOMIMoniker ppmkToLeft, out System.Runtime.InteropServices.UCOMIMoniker ppmkReduced);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reduce(class System.Runtime.InteropServices.UCOMIBindCtx pbc, int32 dwReduceHowFar, class System.Runtime.InteropServices.UCOMIMoniker ppmkToLeft, class System.Runtime.InteropServices.UCOMIMoniker ppmkReduced) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pbc" Type="System.Runtime.InteropServices.UCOMIBindCtx" />
        <Parameter Name="dwReduceHowFar" Type="System.Int32" />
        <Parameter Name="ppmkToLeft" Type="System.Runtime.InteropServices.UCOMIMoniker&amp;" RefType="ref" />
        <Parameter Name="ppmkReduced" Type="System.Runtime.InteropServices.UCOMIMoniker&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context to be used in this binding operation.</param>
        <param name="dwReduceHowFar">Specifies how far this moniker should be reduced.</param>
        <param name="ppmkToLeft">A reference to the moniker to the left of this moniker.</param>
        <param name="ppmkReduced">On successful return, a reference to the reduced form of this moniker, which can be <see langword="null" /> if an error occurs or if this moniker is reduced to nothing.</param>
        <summary>Returns a reduced moniker which is another moniker that refers to the same object as this moniker but can be bound with equal or greater efficiency.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::Reduce`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RelativePathTo">
      <MemberSignature Language="C#" Value="public void RelativePathTo (System.Runtime.InteropServices.UCOMIMoniker pmkOther, out System.Runtime.InteropServices.UCOMIMoniker ppmkRelPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RelativePathTo(class System.Runtime.InteropServices.UCOMIMoniker pmkOther, class System.Runtime.InteropServices.UCOMIMoniker ppmkRelPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pmkOther" Type="System.Runtime.InteropServices.UCOMIMoniker" />
        <Parameter Name="ppmkRelPath" Type="System.Runtime.InteropServices.UCOMIMoniker&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pmkOther">A reference to the moniker to which a relative path should be taken.</param>
        <param name="ppmkRelPath">On successful return, reference to the relative moniker.</param>
        <summary>Supplies a moniker that, when appended to this moniker (or one with a similar structure), yields the specified moniker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IMoniker::RelativePath`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Runtime.InteropServices.UCOMIStream pStm, bool fClearDirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Runtime.InteropServices.UCOMIStream pStm, bool fClearDirty) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pStm" Type="System.Runtime.InteropServices.UCOMIStream" />
        <Parameter Name="fClearDirty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pStm">The stream into which the object is saved.</param>
        <param name="fClearDirty">Indicates whether to clear the modified flag after the save is complete.</param>
        <summary>Saves an object to the specified stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IPersistStream::Save`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>