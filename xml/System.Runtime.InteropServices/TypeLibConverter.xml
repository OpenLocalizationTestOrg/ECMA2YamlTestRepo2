<Type Name="TypeLibConverter" FullName="System.Runtime.InteropServices.TypeLibConverter">
  <TypeSignature Language="C#" Value="public sealed class TypeLibConverter : System.Runtime.InteropServices.ITypeLibConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeLibConverter extends System.Object implements class System.Runtime.InteropServices.ITypeLibConverter" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices.ITypeLibConverter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("F1C3BF79-C3E4-11d3-88E7-00902754C43A")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a set of services that convert a managed assembly to a COM type library and vice versa.</summary>
    <remarks>To be added.</remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeLibConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibConverter" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertAssemblyToTypeLib">
      <MemberSignature Language="C#" Value="public object ConvertAssemblyToTypeLib (System.Reflection.Assembly assembly, string strTypeLibName, System.Runtime.InteropServices.TypeLibExporterFlags flags, System.Runtime.InteropServices.ITypeLibExporterNotifySink notifySink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertAssemblyToTypeLib(class System.Reflection.Assembly assembly, string strTypeLibName, valuetype System.Runtime.InteropServices.TypeLibExporterFlags flags, class System.Runtime.InteropServices.ITypeLibExporterNotifySink notifySink) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="strTypeLibName" Type="System.String" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.TypeLibExporterFlags" />
        <Parameter Name="notifySink" Type="System.Runtime.InteropServices.ITypeLibExporterNotifySink" />
      </Parameters>
      <Docs>
        <param name="assembly">The assembly to convert.</param>
        <param name="strTypeLibName">The file name of the resulting type library.</param>
        <param name="flags">A <see cref="T:System.Runtime.InteropServices.TypeLibExporterFlags" /> value indicating any special settings.</param>
        <param name="notifySink">The <see cref="T:System.Runtime.InteropServices.ITypeLibExporterNotifySink" /> interface implemented by the caller.</param>
        <summary>Converts an assembly to a COM type library.</summary>
        <returns>An object that implements the <see langword="ITypeLib" /> interface.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on `ITypeLib`, please see its existing documentation in the MSDN library.  
  
   
  
## Examples  
 [!code-cpp[System.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1#1](~/add/codesnippet/cpp/00d885a3-4d86-4f95-bcb7-_1.cpp)]
 [!code-vb[System.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1#1](~/add/codesnippet/visualbasic/00d885a3-4d86-4f95-bcb7-_1.vb)]
 [!code-cs[System.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1#1](~/add/codesnippet/csharp/00d885a3-4d86-4f95-bcb7-_1.cs)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for permission to call unmanaged code.  
  
 Security Action: Demand.  
  
 Associated Enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertTypeLibToAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, int flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, bool unsafeInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, int32 flags, class System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, unsigned int8[] publicKey, class System.Reflection.StrongNameKeyPair keyPair, bool unsafeInterfaces) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeLib" Type="System.Object" />
        <Parameter Name="asmFileName" Type="System.String" />
        <Parameter Name="flags" Type="System.Int32" />
        <Parameter Name="notifySink" Type="System.Runtime.InteropServices.ITypeLibImporterNotifySink" />
        <Parameter Name="publicKey" Type="System.Byte[]" />
        <Parameter Name="keyPair" Type="System.Reflection.StrongNameKeyPair" />
        <Parameter Name="unsafeInterfaces" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeLib">The object that implements the <see langword="ITypeLib" /> interface.</param>
        <param name="asmFileName">The file name of the resulting assembly.</param>
        <param name="flags">A <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> value indicating any special settings.</param>
        <param name="notifySink">
          <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" /> interface implemented by the caller.</param>
        <param name="publicKey">A <see langword="byte" /> array containing the public key.</param>
        <param name="keyPair">A <see cref="T:System.Reflection.StrongNameKeyPair" /> object containing the public and private cryptographic key pair.</param>
        <param name="unsafeInterfaces">If <see langword="true" />, the interfaces require link time checks for <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> permission. If <see langword="false" />, the interfaces require run time checks that require a stack walk and are more expensive, but help provide greater protection.</param>
        <summary>Converts a COM type library to an assembly.</summary>
        <returns>An &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt; object containing the converted type library.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>. Otherwise, at least one of these parameters must be specified. If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly. If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.  
  
 For more information on `ITypeLib`, please see its existing documentation in the MSDN library.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeLib" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="asmFileName" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="notifySink" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asmFileName" /> is an empty string.  
  
 -or-  
  
 <paramref name="asmFileName" /> is longer than MAX_PATH.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="flags" /> is not <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" />.  
  
 -or-  
  
 <paramref name="publicKey" /> and <paramref name="keyPair" /> are <see langword="null" />.</exception>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException">The metadata produced has errors preventing any types from loading.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for permission to call unmanaged code.  
  
 Security Action: Demand.  
  
 Associated Enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertTypeLibToAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, System.Runtime.InteropServices.TypeLibImporterFlags flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, string asmNamespace, Version asmVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, valuetype System.Runtime.InteropServices.TypeLibImporterFlags flags, class System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, unsigned int8[] publicKey, class System.Reflection.StrongNameKeyPair keyPair, string asmNamespace, class System.Version asmVersion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeLib" Type="System.Object" />
        <Parameter Name="asmFileName" Type="System.String" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.TypeLibImporterFlags" />
        <Parameter Name="notifySink" Type="System.Runtime.InteropServices.ITypeLibImporterNotifySink" />
        <Parameter Name="publicKey" Type="System.Byte[]" />
        <Parameter Name="keyPair" Type="System.Reflection.StrongNameKeyPair" />
        <Parameter Name="asmNamespace" Type="System.String" />
        <Parameter Name="asmVersion" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="typeLib">The object that implements the <see langword="ITypeLib" /> interface.</param>
        <param name="asmFileName">The file name of the resulting assembly.</param>
        <param name="flags">A <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> value indicating any special settings.</param>
        <param name="notifySink">
          <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" /> interface implemented by the caller.</param>
        <param name="publicKey">A <see langword="byte" /> array containing the public key.</param>
        <param name="keyPair">A <see cref="T:System.Reflection.StrongNameKeyPair" /> object containing the public and private cryptographic key pair.</param>
        <param name="asmNamespace">The namespace for the resulting assembly.</param>
        <param name="asmVersion">The version of the resulting assembly. If <see langword="null" />, the version of the type library is used.</param>
        <summary>Converts a COM type library to an assembly.</summary>
        <returns>An &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt; object containing the converted type library.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>. Otherwise, atleast one of these parameters must be specified. If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly. If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.  
  
 For more information on `ITypeLib`, please see its existing documentation in the MSDN library.  
  
   
  
## Examples  
 [!code-cpp[System.Runtime.InteropServices.ConvertTypelibToASSembly#1](~/add/codesnippet/cpp/6fb3bd23-0a7d-4ad3-847a-_1.cpp)]
 [!code-cs[System.Runtime.InteropServices.ConvertTypelibToASSembly#1](~/add/codesnippet/csharp/6fb3bd23-0a7d-4ad3-847a-_1.cs)]
 [!code-vb[System.Runtime.InteropServices.ConvertTypelibToASSembly#1](~/add/codesnippet/visualbasic/6fb3bd23-0a7d-4ad3-847a-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeLib" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="asmFileName" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="notifySink" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asmFileName" /> is an empty string.  
  
 -or-  
  
 <paramref name="asmFileName" /> is longer than MAX_PATH.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="flags" /> is not <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" />.  
  
 -or-  
  
 <paramref name="publicKey" /> and <paramref name="keyPair" /> are <see langword="null" />.</exception>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException">The metadata produced has errors preventing any types from loading.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for permission to call unmanaged code.  
  
 Security Action: Demand.  
  
 Associated Enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetPrimaryInteropAssembly">
      <MemberSignature Language="C#" Value="public bool GetPrimaryInteropAssembly (Guid g, int major, int minor, int lcid, out string asmName, out string asmCodeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetPrimaryInteropAssembly(valuetype System.Guid g, int32 major, int32 minor, int32 lcid, string asmName, string asmCodeBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Guid" />
        <Parameter Name="major" Type="System.Int32" />
        <Parameter Name="minor" Type="System.Int32" />
        <Parameter Name="lcid" Type="System.Int32" />
        <Parameter Name="asmName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="asmCodeBase" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="g">The GUID of the type library.</param>
        <param name="major">The major version number of the type library.</param>
        <param name="minor">The minor version number of the type library.</param>
        <param name="lcid">The LCID of the type library.</param>
        <param name="asmName">On successful return, the name of the primary interop assembly associated with `g`.</param>
        <param name="asmCodeBase">On successful return, the code base of the primary interop assembly associated with `g`.</param>
        <summary>Gets the name and code base of a primary interop assembly for a specified type library.</summary>
        <returns>
          <see langword="true" /> if the primary interop assembly was found in the registry; otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>