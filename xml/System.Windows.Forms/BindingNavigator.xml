<Type Name="BindingNavigator" FullName="System.Windows.Forms.BindingNavigator">
  <TypeSignature Language="C#" Value="public class BindingNavigator : System.Windows.Forms.ToolStrip, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BindingNavigator extends System.Windows.Forms.ToolStrip implements class System.ComponentModel.ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ToolStrip</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RefreshItems")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("BindingSource")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.BindingNavigatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the navigation and manipulation user interface (UI) for controls on a form that are bound to data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BindingNavigator control represents a standardized way to navigate and manipulate data on a form. In most cases, a BindingNavigator is paired with a <xref:System.Windows.Forms.BindingSource> control to move through data records on a form and interact with them. In these cases, the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property is set to the associated <xref:System.Windows.Forms.BindingSource?displayProperty=fullName> component that acts as a data source.  
  
 By default, the BindingNavigator control's user interface (UI) is composed of a series of <xref:System.Windows.Forms.ToolStrip> buttons, text boxes, and static text elements for most common data-related actions, such as adding data, deleting data, and navigating through data. Each of these controls can be retrieved or set through an associated member of the BindingNavigator control. Likewise, there is also a one-to-one correspondence to members within the <xref:System.Windows.Forms.BindingSource> class that programmatically perform the same functionality, as shown in the following table.  
  
|UI Control|BindingNavigator member|<xref:System.Windows.Forms.BindingSource> member|  
|----------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|  
|**Move First**|<xref:System.Windows.Forms.BindingNavigator.MoveFirstItem%2A>|<xref:System.Windows.Forms.BindingSource.MoveFirst%2A>|  
|**Move Previous**|<xref:System.Windows.Forms.BindingNavigator.MovePreviousItem%2A>|<xref:System.Windows.Forms.BindingSource.MovePrevious%2A>|  
|**Current Position**|<xref:System.Windows.Forms.BindingNavigator.PositionItem%2A>|<xref:System.Windows.Forms.BindingSource.Current%2A>|  
|**Count**|<xref:System.Windows.Forms.BindingNavigator.CountItem%2A>|<xref:System.Windows.Forms.BindingSource.Count%2A>|  
|**Move Next**|<xref:System.Windows.Forms.BindingNavigator.MoveNextItem%2A>|<xref:System.Windows.Forms.BindingSource.MoveNext%2A>|  
|**Move Last**|<xref:System.Windows.Forms.BindingNavigator.MoveLastItem%2A>|<xref:System.Windows.Forms.BindingSource.MoveLast%2A>|  
|**Add New**|<xref:System.Windows.Forms.BindingNavigator.AddNewItem%2A>|<xref:System.Windows.Forms.BindingSource.AddNew%2A>|  
|**Delete**|<xref:System.Windows.Forms.BindingNavigator.DeleteItem%2A>|<xref:System.Windows.Forms.BindingSource.RemoveCurrent%2A>|  
  
 Adding a BindingNavigator control to a form and binding it to a data source, such as a <xref:System.Windows.Forms.BindingSource>, will automatically establish the relationships in this table.  
  
 You can use one of the following techniques to customize this toolbar:  
  
-   Create the BindingNavigator with the <xref:System.Windows.Forms.BindingNavigator.%23ctor%28System.Boolean%29> constructor, which accepts a Boolean `addStandardItems` parameter, and set this parameter to `false`. Then add the desired <xref:System.Windows.Forms.ToolStripItem> objects to the <xref:System.Windows.Forms.ToolStrip.Items%2A> collection.  
  
-   If a great deal of customization is desired, or the custom design will be reused, derive a class from BindingNavigator and override the <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> method to define additional or alternate standard items.  
  
   
  
## Examples  
 The following code example demonstrates how to use a BindingNavigator control to move through a data set. The set is contained in a <xref:System.Data.DataView>, which is bound to a <xref:System.Windows.Forms.TextBox> control with a <xref:System.Windows.Forms.BindingSource> component.  
  
 [!code-cs[System.Windows.Forms.DataNavigator#1](~/add/codesnippet/csharp/t-system.windows.forms.b_9_1.cs)]
 [!code-vb[System.Windows.Forms.DataNavigator#1](~/add/codesnippet/visualbasic/t-system.windows.forms.b_9_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingNavigator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.BindingNavigator" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default constructor sets the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property to `null`. This constructor is equivalent to calling the <xref:System.Windows.Forms.BindingNavigator.%23ctor%28System.Boolean%29> constructor with a parameter value of `false`. You can add the standard items by making a separate call to <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingNavigator (bool addStandardItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool addStandardItems) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addStandardItems" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="addStandardItems">
          <see langword="true" /> to show the standard navigational UI; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.BindingNavigator" /> class, indicating whether to display the standard navigation user interface (UI).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor sets the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property to `null`. If <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> is `false`, <xref:System.Windows.Forms.BindingNavigator.AddNewItem%2A>, <xref:System.Windows.Forms.BindingNavigator.MoveFirstItem%2A>, <xref:System.Windows.Forms.BindingNavigator.MoveLastItem%2A>, <xref:System.Windows.Forms.BindingNavigator.MoveNextItem%2A>, <xref:System.Windows.Forms.BindingNavigator.MovePreviousItem%2A>, <xref:System.Windows.Forms.BindingNavigator.DeleteItem%2A>, <xref:System.Windows.Forms.BindingNavigator.CountItem%2A> and <xref:System.Windows.Forms.BindingNavigator.PositionItem%2A> will also be `null`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingNavigator (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">The <see cref="T:System.ComponentModel.IContainer" /> to add the new <see cref="T:System.Windows.Forms.BindingNavigator" /> control to.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.BindingNavigator" /> class and adds this new instance to the specified container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is provided as a convenience, combining the steps of creating a new <xref:System.Windows.Forms.BindingNavigator> control and adding it to a parent <xref:System.ComponentModel.IContainer>. Like the default constructor, it sets the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property to `null` and does not show the standard user interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingNavigator (System.Windows.Forms.BindingSource bindingSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.BindingSource bindingSource) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bindingSource" Type="System.Windows.Forms.BindingSource" />
      </Parameters>
      <Docs>
        <param name="bindingSource">The <see cref="T:System.Windows.Forms.BindingSource" /> used as a data source.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.BindingNavigator" /> class with the specified <see cref="T:System.Windows.Forms.BindingSource" /> as the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor uses the `BindingSource` parameter to initialize the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property. It also adds the standard set of navigational buttons and sets their corresponding properties, such as <xref:System.Windows.Forms.BindingNavigator.CountItem%2A> and <xref:System.Windows.Forms.BindingNavigator.MoveNextItem%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddNewItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItem AddNewItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolStripItem AddNewItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that represents the **Add New** button.</summary>
        <value>A <see cref="T:System.Windows.Forms.ToolStripItem" /> that represents the **Add New** button for the <see cref="T:System.Windows.Forms.BindingSource" />. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When set, the AddNewItem property generates the <xref:System.Windows.Forms.Control.Click> event handler for the **Add New** button. This event handler calls the <xref:System.Windows.Forms.BindingSource.AddNew%2A> method when the **Add New** button is clicked at run time.  
  
 This property is `null` if it was not previously set and it is accessed before the <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> method is implicitly or explicitly called.  
  
 The <xref:System.Windows.Forms.BindingNavigator> control will disable the **Add New** button if the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property is `null` or the <xref:System.Windows.Forms.BindingSource.AllowNew%2A> property is `false`.  
  
 In the default implementation, this property represents a control of type <xref:System.Windows.Forms.ToolStripButton>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddStandardItems">
      <MemberSignature Language="C#" Value="public virtual void AddStandardItems ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStandardItems() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Adds the standard set of navigation items to the <see cref="T:System.Windows.Forms.BindingNavigator" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AddStandardItems method adds the standard set of user interface <xref:System.Windows.Forms.ToolStripItem> objects to the <xref:System.Windows.Forms.BindingNavigator> tool strip for basic navigation operations, such as **Move First**, **Move Last**, and **Add New**.  
  
 Override AddStandardItems in derived classes to define additional or alternative tool strip items. To ensure optimal design-time support for your derived class, make sure each item has a meaningful value in its <xref:System.Windows.Forms.ToolStripItem.Name%2A> property. At design time, this will be used to generate a unique name for the corresponding member variable. The item's <xref:System.Windows.Forms.ToolStripItem.Name%2A> property will then be updated to match the name given to the member variable.  
  
> [!NOTE]
>  This method does not explicitly remove any previously existing items from the <xref:System.Windows.Forms.BindingNavigator>, but does set new values for the <xref:System.Windows.Forms.BindingNavigator.MoveNextItem%2A>, <xref:System.Windows.Forms.BindingNavigator.MovePreviousItem%2A>, <xref:System.Windows.Forms.BindingNavigator.MoveFirstItem%2A>, <xref:System.Windows.Forms.BindingNavigator.MoveLastItem%2A>, <xref:System.Windows.Forms.BindingNavigator.PositionItem%2A>, <xref:System.Windows.Forms.BindingNavigator.CountItem%2A>, <xref:System.Windows.Forms.BindingNavigator.AddNewItem%2A> and <xref:System.Windows.Forms.BindingNavigator.DeleteItem%2A> properties. Also AddStandardItems does not suspend layout while items are being added.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disables updates to the <see cref="T:System.Windows.Forms.ToolStripItem" /> controls of the <see cref="T:System.Windows.Forms.BindingNavigator" /> during the component's initialization.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BeginInit and <xref:System.Windows.Forms.BindingNavigator.EndInit%2A> methods allow the <xref:System.Windows.Forms.BindingNavigator> control to optimize changes to multiple properties. Using this pair of methods, you can initialize co-dependent properties or batch set multiple properties at design time. Call the BeginInit method to signal the control that initialization is starting; call the <xref:System.Windows.Forms.BindingNavigator.EndInit%2A> method to signal that initialization is complete.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BindingSource">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingSource BindingSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingSource BindingSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.BindingSource" /> component that is the source of data.</summary>
        <value>The <see cref="T:System.Windows.Forms.BindingSource" /> component associated with this <see cref="T:System.Windows.Forms.BindingNavigator" />. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BindingSource property represents the data source that the <xref:System.Windows.Forms.BindingNavigator> navigates through. More specifically, the <xref:System.Windows.Forms.BindingSource.List%2A> property of the <xref:System.Windows.Forms.BindingSource> represents the actual data list.  
  
 This is the default property for the <xref:System.Windows.Forms.BindingNavigator> class.  
  
   
  
## Examples  
 The following code example demonstrates how to use a <xref:System.Windows.Forms.BindingNavigator> control to move through a data set. The set is contained in a <xref:System.Data.DataView>, which is bound to a <xref:System.Windows.Forms.TextBox> control with a <xref:System.Windows.Forms.BindingSource> component. This code example is part of a larger example provided in [How to: Move Through a DataSet with the Windows Forms BindingNavigator Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataNavigator#1](~/add/codesnippet/csharp/p-system.windows.forms.b_7_1.cs)]
 [!code-vb[System.Windows.Forms.DataNavigator#1](~/add/codesnippet/visualbasic/p-system.windows.forms.b_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CountItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItem CountItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolStripItem CountItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that displays the total number of items in the associated <see cref="T:System.Windows.Forms.BindingSource" />.</summary>
        <value>A <see cref="T:System.Windows.Forms.ToolStripItem" /> that displays the total number of items in the associated <see cref="T:System.Windows.Forms.BindingSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CountItem property is `null` if it was not previously set and it is accessed before the <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> method is implicitly or explicitly called.  
  
 The count of items is accessed through the <xref:System.Windows.Forms.BindingSource.Count%2A> property of the <xref:System.Windows.Forms.BindingSource>.  
  
 In the default implementation, this property represents a control of type <xref:System.Windows.Forms.ToolStripLabel>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CountItemFormat">
      <MemberSignature Language="C#" Value="public string CountItemFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CountItemFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a string used to format the information displayed in the &lt;xref:System.Windows.Forms.BindingNavigator.CountItem%2A&gt; control.</summary>
        <value>The format &lt;xref:System.String&gt; used to format the item count. The default is the string "of {0}".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.BindingNavigator.CountItem%2A> control is a <xref:System.Windows.Forms.ToolStripLabel> that displays the total number of items in the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A>. The CountItemFormat property is the format string used to format the count.  
  
 For more information about format strings, see the <xref:System.String.Format%28System.String%2CSystem.Object%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItem DeleteItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolStripItem DeleteItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that is associated with the **Delete** functionality.</summary>
        <value>A <see cref="T:System.Windows.Forms.ToolStripItem" /> that represents the **Delete** button for the <see cref="T:System.Windows.Forms.BindingSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When set, this property generates the <xref:System.Windows.Forms.Control.Click> event handler for the **Delete** button. This event handler calls the <xref:System.Windows.Forms.BindingSource.RemoveCurrent%2A> method when the **Delete** button is clicked at run time.  
  
 This property is `null` if it was not previously set and it is accessed before the <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> method is implicitly or explicitly called.  
  
 The <xref:System.Windows.Forms.BindingNavigator> control will disable the **Delete** button under the following run-time circumstances: the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property is `null`, the <xref:System.Windows.Forms.BindingSource.Count%2A> property is 0, or the <xref:System.Windows.Forms.BindingSource.AllowRemove%2A> property is `false`.  
  
 In the default implementation, this property represents a control of type <xref:System.Windows.Forms.ToolStripButton>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.BindingNavigator" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  
  
 When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.BindingNavigator> references. This method invokes the `Dispose()` method of each referenced object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enables updates to the <see cref="T:System.Windows.Forms.ToolStripItem" /> controls of the <see cref="T:System.Windows.Forms.BindingNavigator" /> after the component's initialization has concluded.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.BindingNavigator.BeginInit%2A> and EndInit methods allow the <xref:System.Windows.Forms.BindingNavigator> control to optimize changes to multiple properties. Using this pair of methods, you can initialize co-dependent properties or batch set multiple properties at design time. Call the <xref:System.Windows.Forms.BindingNavigator.BeginInit%2A> method to signal the control that initialization is starting; call the EndInit method to signal that initialization is complete.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveFirstItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItem MoveFirstItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolStripItem MoveFirstItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that is associated with the **Move First** functionality.</summary>
        <value>A <see cref="T:System.Windows.Forms.ToolStripItem" /> that represents the **Move First** button for the <see cref="T:System.Windows.Forms.BindingSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When set, this property generates the <xref:System.Windows.Forms.Control.Click> event handler for the **Move First** button. This event handler calls the <xref:System.Windows.Forms.BindingSource.MoveFirst%2A> method when the **Move First** button is clicked at run time.  
  
 This property is `null` if it was not previously set and it is accessed before the <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> method is implicitly or explicitly called.  
  
 The <xref:System.Windows.Forms.BindingNavigator> control will disable the **Move First** button under the following run-time circumstances: the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property is `null`, the <xref:System.Windows.Forms.BindingSource.Position%2A?displayProperty=fullName> property is zero, or <xref:System.Windows.Forms.BindingSource.AllowNew%2A> for the related <xref:System.Windows.Forms.BindingSource> is `false`.  
  
 In the default implementation, this property represents a control of type <xref:System.Windows.Forms.ToolStripButton>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveLastItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItem MoveLastItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolStripItem MoveLastItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that is associated with the **Move Last** functionality.</summary>
        <value>A <see cref="T:System.Windows.Forms.ToolStripItem" /> that represents the **Move Last** button for the <see cref="T:System.Windows.Forms.BindingSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When set, this property generates the <xref:System.Windows.Forms.Control.Click> event handler for the **Move Last** button. This event handler calls the <xref:System.Windows.Forms.BindingSource.MoveLast%2A> method when the **Move Last** button is clicked at run time.  
  
 This property is `null` if it was not previously set and it is accessed before the <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> method is implicitly or explicitly called.  
  
 The <xref:System.Windows.Forms.BindingNavigator> control will disable the **Move Last** button under the following run-time circumstances: the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property is `null` or the <xref:System.Windows.Forms.BindingSource.Position%2A> property is greater than or equal to the <xref:System.Windows.Forms.BindingSource.Count%2A> property.  
  
 In the default implementation, this property represents a control of type <xref:System.Windows.Forms.ToolStripButton>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveNextItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItem MoveNextItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolStripItem MoveNextItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that is associated with the **Move Next** functionality.</summary>
        <value>A <see cref="T:System.Windows.Forms.ToolStripItem" /> that represents the **Move Next** button for the <see cref="T:System.Windows.Forms.BindingSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When set, this property generates the <xref:System.Windows.Forms.Control.Click> event handler for the **Move Next** button. This event handler calls the <xref:System.Windows.Forms.BindingSource.MoveNext%2A> method when the **Move Next** button is clicked at run time.  
  
 This property is `null` if it was not previously set and it is accessed before the <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> method is implicitly or explicitly called.  
  
 The <xref:System.Windows.Forms.BindingNavigator> control will disable the **Move Next** button under the following run-time circumstances: the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property is `null` or the <xref:System.Windows.Forms.BindingSource.Position%2A> property is greater than or equal to the <xref:System.Windows.Forms.BindingSource.Count%2A> property.  
  
 In the default implementation, this property represents a control of type <xref:System.Windows.Forms.ToolStripButton>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MovePreviousItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItem MovePreviousItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolStripItem MovePreviousItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that is associated with the **Move Previous** functionality.</summary>
        <value>A <see cref="T:System.Windows.Forms.ToolStripItem" /> that represents the **Move Previous** button for the <see cref="T:System.Windows.Forms.BindingSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When set, the MovePreviousItem property generates the <xref:System.Windows.Forms.Control.Click> event handler for the **Move Previous** button. This event handler calls the <xref:System.Windows.Forms.BindingSource.MovePrevious%2A> method when the **Move Previous** button is clicked at run time.  
  
 This property is `null` if it was not previously set and it is accessed before the <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> method is implicitly or explicitly called.  
  
 The <xref:System.Windows.Forms.BindingNavigator> control will disable the **Move Previous** button under the following run-time circumstances: the <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A> property is `null` or the <xref:System.Windows.Forms.BindingSource.Position%2A> property is less than or equal to 0.  
  
 In the default implementation, this property represents a control of type <xref:System.Windows.Forms.ToolStripButton>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRefreshItems">
      <MemberSignature Language="C#" Value="protected virtual void OnRefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRefreshItems() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raises the <see cref="E:System.Windows.Forms.BindingNavigator.RefreshItems" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In addition to raising the corresponding <xref:System.Windows.Forms.BindingNavigator.RefreshItems> event, the OnRefreshItems method performs the following operations against the state of the associated <xref:System.Windows.Forms.BindingSource>.  
  
-   Sets the internal members using the current <xref:System.Windows.Forms.BindingSource> state.  
  
-   Enables or disables user interface (UI) items appropriately for the current <xref:System.Windows.Forms.BindingSource> state.  
  
-   Updates the <xref:System.Windows.Forms.BindingNavigator.CountItem%2A> and <xref:System.Windows.Forms.BindingNavigator.PositionItem%2A> controls.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnRefreshItems method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PositionItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItem PositionItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolStripItem PositionItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> that displays the current position within the <see cref="T:System.Windows.Forms.BindingSource" />.</summary>
        <value>The <see cref="T:System.Windows.Forms.ToolStripItem" /> that displays the current position.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In the default implementation, the PositionItem property is of type <xref:System.Windows.Forms.ToolStripTextBox>.  
  
 This property is `null` if it was not previously set and it is accessed before the <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> method is implicitly or explicitly called.  
  
 The current position calculated by obtaining the <xref:System.Windows.Forms.BindingSource.Position%2A> property of the <xref:System.Windows.Forms.BindingSource>, and adding 1 to transform the position into a 1-based count.  
  
 In the default implementation, this property represents a control of type <xref:System.Windows.Forms.ToolStripTextBox>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="public event EventHandler RefreshItems;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RefreshItems" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the state of the navigational user interface (UI) needs to be refreshed to reflect the current state of the underlying data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RefreshItems event signals that the navigational UI of the <xref:System.Windows.Forms.BindingNavigator> needs to be updated to reflect the current state of the associated <xref:System.Windows.Forms.BindingSource>.  
  
 This is the default event for the <xref:System.Windows.Forms.BindingNavigator> class.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RefreshItems event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.BindingNavigator> named `BindingNavigator1`. Then ensure that the event handler is associated with the RefreshItems event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#124](~/add/codesnippet/csharp/e-system.windows.forms.b_16_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#124](~/add/codesnippet/visualbasic/e-system.windows.forms.b_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RefreshItemsCore">
      <MemberSignature Language="C#" Value="protected virtual void RefreshItemsCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RefreshItemsCore() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Refreshes the state of the standard items to reflect the current state of the data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you have overridden <xref:System.Windows.Forms.BindingNavigator.AddStandardItems%2A> in a derived class, you should also override RefreshItemsCore to refresh any custom standard items you have added to the <xref:System.Windows.Forms.BindingNavigator> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public bool Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Validate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes form validation to occur and returns whether validation was successful.</summary>
        <returns>
          <see langword="true" /> if validation was successful and focus can shift to the <see cref="T:System.Windows.Forms.BindingNavigator" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to confirm focus can shift before performing the click action for an item on the <xref:System.Windows.Forms.BindingNavigator> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>