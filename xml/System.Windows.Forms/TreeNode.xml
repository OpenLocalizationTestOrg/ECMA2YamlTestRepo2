<Type Name="TreeNode" FullName="System.Windows.Forms.TreeNode">
  <TypeSignature Language="C#" Value="public class TreeNode : MarshalByRefObject, ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TreeNode extends System.MarshalByRefObject implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TreeNodeConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a node of a <see cref="T:System.Windows.Forms.TreeView" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Nodes%2A> collection holds all the child TreeNode objects assigned to the current TreeNode. You can add, remove, or clone a TreeNode; when you do this, all child tree nodes are added, removed, or cloned. Each TreeNode can contain a collection of other TreeNode objects. This can make it difficult to determine where you are in the <xref:System.Windows.Forms.TreeView> when iterating through the collection. To determine your location in a tree structure, use the <xref:System.Windows.Forms.TreeNode.FullPath%2A> property. The <xref:System.Windows.Forms.TreeNode.FullPath%2A> string can be parsed using the <xref:System.Windows.Forms.TreeView.PathSeparator%2A> string value to determine where a TreeNode label begins and ends.  
  
 The TreeNode label is set by setting the <xref:System.Windows.Forms.TreeNode.Text%2A> property explicitly. The alternative is to create the tree node using one of the <xref:System.Windows.Forms.TreeNode.%23ctor%2A> constructors that has a string parameter that represents the <xref:System.Windows.Forms.TreeNode.Text%2A> property. The label is displayed next to the TreeNode image, if one is displayed.  
  
 To display images next to the tree nodes, assign an <xref:System.Windows.Forms.ImageList> to the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView> control and assign an <xref:System.Drawing.Image> by referencing its index value in the <xref:System.Windows.Forms.ImageList> property. Set the <xref:System.Windows.Forms.TreeNode.ImageIndex%2A> property to the index value of the <xref:System.Drawing.Image> you want to display when the TreeNode is in an unselected state. Likewise, set the <xref:System.Windows.Forms.TreeNode.SelectedImageIndex%2A> property to the index value of the <xref:System.Drawing.Image> you want to display when the TreeNode is selected.  
  
 Selecting specific tree nodes and iterating through the <xref:System.Windows.Forms.TreeView.Nodes%2A> collection can be achieved by using the following property values: <xref:System.Windows.Forms.TreeNode.FirstNode%2A>, <xref:System.Windows.Forms.TreeNode.LastNode%2A>, <xref:System.Windows.Forms.TreeNode.NextNode%2A>, <xref:System.Windows.Forms.TreeNode.PrevNode%2A>, <xref:System.Windows.Forms.TreeNode.NextVisibleNode%2A>, <xref:System.Windows.Forms.TreeNode.PrevVisibleNode%2A>. Assign the TreeNode returned by one of aforementioned properties to the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName> property to select that tree node in the <xref:System.Windows.Forms.TreeView> control.  
  
 Tree nodes can be expanded to display the next level of child tree nodes. The user can expand the TreeNode by pressing the plus (+) button next to the TreeNode, if one is displayed, or you can expand the TreeNode by calling the <xref:System.Windows.Forms.TreeNode.Expand%2A> method. To expand all child tree node levels in the <xref:System.Windows.Forms.TreeNode.Nodes%2A> collection, call the <xref:System.Windows.Forms.TreeNode.ExpandAll%2A> method. You can collapse the child TreeNode level by calling the <xref:System.Windows.Forms.TreeNode.Collapse%2A> method, or the user can press the minus (-) button next to the TreeNode, if one is displayed. You can also call the <xref:System.Windows.Forms.TreeNode.Toggle%2A> method to alternate the TreeNode between the expanded and collapsed states.  
  
 Tree nodes can optionally display a check box. To display the check boxes, set the <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> property of the <xref:System.Windows.Forms.TreeView> to `true`. The <xref:System.Windows.Forms.TreeNode.Checked%2A> property is set to `true` for tree nodes that are in a checked state.  
  
   
  
## Examples  
 The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the TreeNode objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/t-system.windows.forms.t_1_1.vb)]
 [!code-cs[TreeView#1](~/add/codesnippet/csharp/t-system.windows.forms.t_1_1.cs)]
 [!code-cpp[TreeView#1](~/add/codesnippet/cpp/t-system.windows.forms.t_1_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates a root tree node to assign child tree nodes to. A child tree node for each `Customer` object in an <xref:System.Collections.ArrayList> is added to the root tree node as well as a child tree node for each `Order` object assigned to the `Customer` object. The `Customer` object is assigned to the <xref:System.Windows.Forms.TreeNode.Tag%2A> property, and the tree nodes representing `Customer` objects are displayed with <xref:System.Drawing.Color.Orange%2A> text. This example requires that you have a `Customer` and `Order` object defined, a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>, and an <xref:System.Collections.ArrayList> named `customerArray` that contains `Customer` objects.  
  
 [!code-cs[TreeNode_Bounds#1](~/add/codesnippet/csharp/m-system.windows.forms.t_46_1.cs)]
 [!code-cpp[TreeNode_Bounds#1](~/add/codesnippet/cpp/m-system.windows.forms.t_46_1.cpp)]
 [!code-vb[TreeNode_Bounds#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_46_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The label &lt;xref:System.Windows.Forms.TreeNode.Text%2A&gt; of the new tree node.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class with the specified label text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `text` parameter value is assigned to the node's <xref:System.Windows.Forms.TreeNode.Text%2A> property and becomes the tree node label.  
  
   
  
## Examples  
 The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_17_1.vb)]
 [!code-cs[TreeView#1](~/add/codesnippet/csharp/m-system.windows.forms.t_17_1.cs)]
 [!code-cpp[TreeView#1](~/add/codesnippet/cpp/m-system.windows.forms.t_17_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TreeNode (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the data to deserialize the class.</param>
        <param name="context">The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains the source and destination of the serialized stream.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class using the specified serialization information and context.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text, System.Windows.Forms.TreeNode[] children);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.Windows.Forms.TreeNode[] children) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="children" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="text">The label &lt;xref:System.Windows.Forms.TreeNode.Text%2A&gt; of the new tree node.</param>
        <param name="children">An array of child <see cref="T:System.Windows.Forms.TreeNode" /> objects.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class with the specified label text and child tree nodes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `text` parameter value is assigned to the node's <xref:System.Windows.Forms.TreeNode.Text%2A> property and becomes the tree node label. The tree nodes that are contained in the `children` array are added to the <xref:System.Windows.Forms.TreeNodeCollection> that is stored in the <xref:System.Windows.Forms.TreeNode.Nodes%2A> property.  
  
   
  
## Examples  
 The following code example creates a root tree node to assign child tree nodes to. A child tree node for each `Customer` object in an <xref:System.Collections.ArrayList> is added to the root tree node as well as a child tree node for each `Order` object assigned to the `Customer` object. The `Customer` object is assigned to the <xref:System.Windows.Forms.TreeNode.Tag%2A> property, and the tree nodes representing `Customer` objects are displayed with <xref:System.Drawing.Color.Orange%2A> text. This example requires that you have a `Customer` and `Order` object defined, a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>, and an <xref:System.Collections.ArrayList> named `customerArray` that contains `Customer` objects.  
  
 [!code-cs[TreeNode_Bounds#1](~/add/codesnippet/csharp/f9da6810-4d20-4683-b032-_1.cs)]
 [!code-cpp[TreeNode_Bounds#1](~/add/codesnippet/cpp/f9da6810-4d20-4683-b032-_1.cpp)]
 [!code-vb[TreeNode_Bounds#1](~/add/codesnippet/visualbasic/f9da6810-4d20-4683-b032-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The label &lt;xref:System.Windows.Forms.TreeNode.Text%2A&gt; of the new tree node.</param>
        <param name="imageIndex">The index value of <see cref="T:System.Drawing.Image" /> to display when the tree node is unselected.</param>
        <param name="selectedImageIndex">The index value of <see cref="T:System.Drawing.Image" /> to display when the tree node is selected.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class with the specified label text and images to display when the tree node is in a selected and unselected state.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `text` parameter value is assigned to the node's <xref:System.Windows.Forms.TreeNode.Text%2A> property and becomes the tree node label. The `imageIndex` and `selectedImageIndex` values are the index values of an <xref:System.Drawing.Image> stored in the <xref:System.Windows.Forms.ImageList> assigned to the <xref:System.Windows.Forms.TreeView.ImageList%2A?displayProperty=fullName> property. The image referenced in the `imageIndex` property is displayed when the tree node is not selected. Likewise, the image referenced in the `selectedImageIndex` property is displayed when the tree node is in a selected state.  
  
   
  
## Examples  
 The following code example creates and assigns an <xref:System.Windows.Forms.ImageList> to a <xref:System.Windows.Forms.TreeView> control and fills the <xref:System.Windows.Forms.TreeView> control with <xref:System.Windows.Forms.TreeNode> objects. The tree nodes are assigned images from the <xref:System.Windows.Forms.ImageList> that is displayed when the tree node is in a selected or unselected state. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TreeView>, and an <xref:System.Collections.ArrayList> that contains `Customer` objects that each contain `Order` objects. It also requires that the `Customer` and `Order` objects are defined.  
  
 [!code-vb[TreeNode_TreeNode#1](~/add/codesnippet/visualbasic/8c41dd24-47e3-4299-bfdf-_1.vb)]
 [!code-cpp[TreeNode_TreeNode#1](~/add/codesnippet/cpp/8c41dd24-47e3-4299-bfdf-_1.cpp)]
 [!code-cs[TreeNode_TreeNode#1](~/add/codesnippet/csharp/8c41dd24-47e3-4299-bfdf-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text, int imageIndex, int selectedImageIndex, System.Windows.Forms.TreeNode[] children);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, int32 imageIndex, int32 selectedImageIndex, class System.Windows.Forms.TreeNode[] children) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
        <Parameter Name="children" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="text">The label &lt;xref:System.Windows.Forms.TreeNode.Text%2A&gt; of the new tree node.</param>
        <param name="imageIndex">The index value of <see cref="T:System.Drawing.Image" /> to display when the tree node is unselected.</param>
        <param name="selectedImageIndex">The index value of <see cref="T:System.Drawing.Image" /> to display when the tree node is selected.</param>
        <param name="children">An array of child <see cref="T:System.Windows.Forms.TreeNode" /> objects.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class with the specified label text, child tree nodes, and images to display when the tree node is in a selected and unselected state.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `text` parameter value is assigned to the node's <xref:System.Windows.Forms.TreeNode.Text%2A> property and becomes the tree node label. The `imageIndex` and `selectedImageIndex` values are the index values of an <xref:System.Drawing.Image> stored in the <xref:System.Windows.Forms.ImageList> assigned to the <xref:System.Windows.Forms.TreeView.ImageList%2A?displayProperty=fullName> property. The image referenced in the `imageIndex` parameter is displayed when the tree node is not selected. Likewise, the image referenced in the `selectedImageIndex` parameter is displayed when the tree node is in a selected state. The tree nodes that are contained in the `children` array are added to the <xref:System.Windows.Forms.TreeNodeCollection> that is stored in the <xref:System.Windows.Forms.TreeNode.Nodes%2A> property.  
  
   
  
## Examples  
 The following code example creates and assigns an <xref:System.Windows.Forms.ImageList> to a <xref:System.Windows.Forms.TreeView> control and fills the <xref:System.Windows.Forms.TreeView> control with <xref:System.Windows.Forms.TreeNode> objects. The tree nodes are assigned images from the <xref:System.Windows.Forms.ImageList> that is displayed when the tree node is in a selected or unselected state. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TreeView>, and an <xref:System.Collections.ArrayList> that contains `Customer` objects that each contain `Order` objects. It also requires that the `Customer` and `Order` objects are defined.  
  
 [!code-vb[TreeNode_TreeNode#1](~/add/codesnippet/visualbasic/737755cf-fb88-4601-a0bc-_1.vb)]
 [!code-cpp[TreeNode_TreeNode#1](~/add/codesnippet/cpp/737755cf-fb88-4601-a0bc-_1.cpp)]
 [!code-cs[TreeNode_TreeNode#1](~/add/codesnippet/csharp/737755cf-fb88-4601-a0bc-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of the tree node.</summary>
        <value>The background <see cref="T:System.Drawing.Color" /> of the tree node. The default is <see cref="T:System.Drawing.Color" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the BackColor property is set to <xref:System.Drawing.Color?displayProperty=fullName>, the <xref:System.Drawing.Color> used is the <xref:System.Windows.Forms.Control.BackColor%2A> property value of the <xref:System.Windows.Forms.TreeView> control that the tree node is assigned to.  
  
   
  
## Examples  
 The following code example highlights any <xref:System.Windows.Forms.TreeNode> objects a <xref:System.Windows.Forms.TreeView> control that has its <xref:System.Windows.Forms.TreeNode.Checked%2A> property set to `true` by setting its BackColor property to <xref:System.Drawing.Color.Yellow%2A>. This code requires that you have a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form> with a collection of <xref:System.Windows.Forms.TreeNode> objects.  
  
 [!code-vb[TreeNode_Checked#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_251_1.vb)]
 [!code-cpp[TreeNode_Checked#1](~/add/codesnippet/cpp/p-system.windows.forms.t_251_1.cpp)]
 [!code-cs[TreeNode_Checked#1](~/add/codesnippet/csharp/p-system.windows.forms.t_251_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public void BeginEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initiates the editing of the tree node label.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A typical scenario to use this method is to call it on the <xref:System.Windows.Forms.MenuItem.Click> event of a <xref:System.Windows.Forms.MenuItem> or <xref:System.Windows.Forms.ContextMenu>.  
  
> [!NOTE]
>  This method only works if the <xref:System.Windows.Forms.TreeView.LabelEdit%2A> property of the <xref:System.Windows.Forms.TreeView> is set to `true`. If <xref:System.Windows.Forms.TreeView.LabelEdit%2A> is set to `false`, an exception is thrown and the tree node will not be put into an editable state.  
  
   
  
## Examples  
 The following code example lets the user edit nonroot tree nodes by using a <xref:System.Windows.Forms.ContextMenu>. When the user right-clicks the mouse, the <xref:System.Windows.Forms.TreeNode> at that position is determined and stored in a variable named `mySelectedNode`. If a nonroot tree node was selected, it is put into an editable state, allowing the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  
  
 [!code-cpp[classic treenode.beginedit example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_77_1.cpp)]
 [!code-cs[classic treenode.beginedit example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_77_1.cs)]
 [!code-vb[classic treenode.beginedit example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_77_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">&lt;xref:System.Windows.Forms.TreeView.LabelEdit%2A?displayProperty=fullName&gt; is set to <see langword="false" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bounds of the tree node.</summary>
        <value>The <see cref="T:System.Drawing.Rectangle" /> that represents the bounds of the tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The coordinates are relative to the upper-left corner of the <xref:System.Windows.Forms.TreeView> control.  
  
   
  
## Examples  
 The following code example changes the size <xref:System.Windows.Forms.TreeNode.NodeFont%2A> to the specified size and adjusts the <xref:System.Windows.Forms.TreeView.ItemHeight%2A> of the tree node's parent <xref:System.Windows.Forms.TreeView> control. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TreeView> control with a collection of <xref:System.Windows.Forms.TreeNode> objects, and a <xref:System.Windows.Forms.ComboBox> that contains font sizes.  
  
 [!code-cs[TreeNode_Bounds#2](~/add/codesnippet/csharp/p-system.windows.forms.t_227_1.cs)]
 [!code-cpp[TreeNode_Bounds#2](~/add/codesnippet/cpp/p-system.windows.forms.t_227_1.cpp)]
 [!code-vb[TreeNode_Bounds#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_227_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the tree node is in a checked state.</summary>
        <value>
          <see langword="true" /> if the tree node is in a checked state; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example highlights any <xref:System.Windows.Forms.TreeNode> objects a <xref:System.Windows.Forms.TreeView> control that has its Checked property set to `true` by setting its <xref:System.Windows.Forms.TreeNode.BackColor%2A> property to <xref:System.Drawing.Color.Yellow%2A>. This code requires that you have a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form> with a collection of <xref:System.Windows.Forms.TreeNode> objects.  
  
 [!code-vb[TreeNode_Checked#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_26_1.vb)]
 [!code-cpp[TreeNode_Checked#1](~/add/codesnippet/cpp/p-system.windows.forms.t_26_1.cpp)]
 [!code-cs[TreeNode_Checked#1](~/add/codesnippet/csharp/p-system.windows.forms.t_26_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Copies the tree node and the entire subtree rooted at this tree node.</summary>
        <returns>The &lt;xref:System.Object&gt; that represents the cloned <see cref="T:System.Windows.Forms.TreeNode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The tree structure from the tree node being cloned and below is copied. Any child tree nodes assigned to the <xref:System.Windows.Forms.TreeNode> being cloned are included in the new tree node and subtree.  
  
 The Clone method performs a shallow copy of the node. If the value of the <xref:System.Windows.Forms.TreeNode.Tag%2A> property is a reference type, both the original and cloned copy will point to the same single instance of the <xref:System.Windows.Forms.TreeNode.Tag%2A> value.  
  
   
  
## Examples  
 The following code example clones the last child tree node of the last root tree node and inserts the clone as the first root tree node in the `TreeNodeCollection`. This example requires that you have a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form> that contains a collection of <xref:System.Windows.Forms.TreeNode> objects and a <xref:System.Windows.Forms.Button>.  
  
 [!code-vb[TreeNode_EnsureVisible_4#3](~/add/codesnippet/visualbasic/m-system.windows.forms.t_43_1.vb)]
 [!code-cs[TreeNode_EnsureVisible_4#3](~/add/codesnippet/csharp/m-system.windows.forms.t_43_1.cs)]
 [!code-cpp[TreeNode_EnsureVisible_4#3](~/add/codesnippet/cpp/m-system.windows.forms.t_43_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public void Collapse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Collapse() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Collapses the tree node.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Collapse method collapses the current <xref:System.Windows.Forms.TreeNode> and its child nodes. If you want to collapse only the current <xref:System.Windows.Forms.TreeNode>, use the <xref:System.Windows.Forms.TreeNode.Collapse%28System.Boolean%29?displayProperty=fullName> overload, passing `true` to ignore its child nodes.  
  
> [!NOTE]
>  The state of a <xref:System.Windows.Forms.TreeNode> is persisted. For example, if the next level of child nodes was not collapsed previously, when the <xref:System.Windows.Forms.TreeNode.Expand%2A> method is called, the child nodes appear in their previously expanded state.  
  
   
  
## Examples  
 The following code example toggles the selected node when a button is clicked. If the selected node is collapsed, it is expanded, if it is expanded by calling the <xref:System.Windows.Forms.TreeNode.Expand%2A> method, it is collapsed by calling the Collapse method. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has at least one <xref:System.Windows.Forms.TreeNode> with at least one child <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-vb[TreeNode_EnsureVisible_4#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_7_1.vb)]
 [!code-cs[TreeNode_EnsureVisible_4#1](~/add/codesnippet/csharp/m-system.windows.forms.t_7_1.cs)]
 [!code-cpp[TreeNode_EnsureVisible_4#1](~/add/codesnippet/cpp/m-system.windows.forms.t_7_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public void Collapse (bool ignoreChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Collapse(bool ignoreChildren) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ignoreChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ignoreChildren">
          <see langword="true" /> to leave the child nodes in their current state; <see langword="false" /> to collapse the child nodes.</param>
        <summary>Collapses the <see cref="T:System.Windows.Forms.TreeNode" /> and optionally collapses its children.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Collapse method, passing `true`, when you want to collapse a node but leave its child nodes in their expanded state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenu ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the shortcut menu that is associated with this tree node.</summary>
        <value>The <see cref="T:System.Windows.Forms.ContextMenu" /> that is associated with the tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The preferred way to associate a shortcut menu with a tree node is with the <xref:System.Windows.Forms.TreeNode.ContextMenuStrip%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the shortcut menu associated with this tree node.</summary>
        <value>The <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associated with the tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The shortcut menu is shown when the user right-clicks the tree node.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="protected virtual void Deserialize (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Deserialize(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that describes the <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <param name="context">The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that indicates the state of the stream during deserialization.</param>
        <summary>Loads the state of the <see cref="T:System.Windows.Forms.TreeNode" /> from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public void EndEdit (bool cancel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndEdit(bool cancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cancel">
          <see langword="true" /> if the editing of the tree node label text was canceled without being saved; otherwise, <see langword="false" />.</param>
        <summary>Ends the editing of the tree node label.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example lets the user edit nonroot tree nodes by using a <xref:System.Windows.Forms.ContextMenu>. When the user right clicks the mouse, the <xref:System.Windows.Forms.TreeNode> at that position is determined and stored in a variable named `mySelectedNode`. If a nonroot tree node was selected, it is put into an editable state, allowing the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  
  
 [!code-cpp[classic treenode.beginedit example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_40_1.cpp)]
 [!code-cs[classic treenode.beginedit example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_40_1.cs)]
 [!code-vb[classic treenode.beginedit example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_40_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ensures that the tree node is visible, expanding tree nodes and scrolling the tree view control as necessary.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the EnsureVisible method is called, the tree is expanded and scrolled to ensure that the current tree node is visible in the <xref:System.Windows.Forms.TreeView>. This method is useful if you are selecting a tree node in code based on certain criteria. By calling this method after you select the node, the user can see and interact with the selected node.  
  
> [!NOTE]
>  If the <xref:System.Windows.Forms.TreeView.ItemHeight%2A?displayProperty=fullName> property is set to a value that is larger than the height of the tree view control, calling this method has unexpected results.  
  
   
  
## Examples  
 The following code example brings the last child tree node of the last root tree node into view in the tree view when a button is clicked. This example requires that you have a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form> that contains a collection of <xref:System.Windows.Forms.TreeNode> objects, and a <xref:System.Windows.Forms.Button>. There should be enough tree nodes so that they are not all visible in the tree view control.  
  
 [!code-vb[TreeNode_EnsureVisible_4#2](~/add/codesnippet/visualbasic/m-system.windows.forms.t_34_1.vb)]
 [!code-cs[TreeNode_EnsureVisible_4#2](~/add/codesnippet/csharp/m-system.windows.forms.t_34_1.cs)]
 [!code-cpp[TreeNode_EnsureVisible_4#2](~/add/codesnippet/cpp/m-system.windows.forms.t_34_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Expand">
      <MemberSignature Language="C#" Value="public void Expand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expand() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Expands the tree node.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Expand method expands the current <xref:System.Windows.Forms.TreeNode> down to the next level of nodes.  
  
> [!NOTE]
>  The state of a <xref:System.Windows.Forms.TreeNode> is persisted. For example, if the next level of child nodes was not collapsed previously, when the Expand method is called, the child nodes appear in their previously expanded state.  
  
   
  
## Examples  
 The following code example toggles the selected node when a button is clicked. If the selected node is collapsed, it is expanded, if it is expanded by calling the Expand method, it is collapsed by calling the <xref:System.Windows.Forms.TreeNode.Collapse%2A> method. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has at least one <xref:System.Windows.Forms.TreeNode> with at least one child <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-vb[TreeNode_EnsureVisible_4#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_74_1.vb)]
 [!code-cs[TreeNode_EnsureVisible_4#1](~/add/codesnippet/csharp/m-system.windows.forms.t_74_1.cs)]
 [!code-cpp[TreeNode_EnsureVisible_4#1](~/add/codesnippet/cpp/m-system.windows.forms.t_74_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExpandAll">
      <MemberSignature Language="C#" Value="public void ExpandAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Expands all the child tree nodes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ExpandAll method expands all the child tree nodes assigned to the <xref:System.Windows.Forms.TreeNode.Nodes%2A> collection.  
  
> [!NOTE]
>  The state of a <xref:System.Windows.Forms.TreeNode> is persisted. For example, if the next level of child nodes was not collapsed previously, when the <xref:System.Windows.Forms.TreeNode.Expand%2A> method is called, the child nodes appear in their previously expanded state.  
  
   
  
## Examples  
 The following code example expands all the tree nodes in a <xref:System.Windows.Forms.TreeView> control when a <xref:System.Windows.Forms.CheckBox> is checked, and collapses the <xref:System.Windows.Forms.TreeNode.FirstNode%2A> when the <xref:System.Windows.Forms.CheckBox> is cleared. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.CheckBox>, and a <xref:System.Windows.Forms.TreeView> control with a <xref:System.Windows.Forms.TreeNodeCollection> that has several <xref:System.Windows.Forms.TreeNode> objects (preferably with three or more levels).  
  
 [!code-cpp[TreeNode_ForeColor#1](~/add/codesnippet/cpp/m-system.windows.forms.t_38_1.cpp)]
 [!code-cs[TreeNode_ForeColor#1](~/add/codesnippet/csharp/m-system.windows.forms.t_38_1.cs)]
 [!code-vb[TreeNode_ForeColor#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_38_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FirstNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode FirstNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode FirstNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the first child tree node in the tree node collection.</summary>
        <value>The first child <see cref="T:System.Windows.Forms.TreeNode" /> in the &lt;xref:System.Windows.Forms.TreeNode.Nodes%2A&gt; collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FirstNode is the first child <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection> stored in the <xref:System.Windows.Forms.TreeNode.Nodes%2A> property of the current tree node. If the <xref:System.Windows.Forms.TreeNode> has no child tree node, the FirstNode property returns `null`.  
  
   
  
## Examples  
 The following code example selects the appropriate <xref:System.Windows.Forms.TreeNode> after determining if the <xref:System.Windows.Forms.TreeNode> passed in is selected and which <xref:System.Windows.Forms.TreeNode> to select. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains several <xref:System.Windows.Forms.TreeNode> objects. It also requires that you have a <xref:System.Windows.Forms.ComboBox> with the following items: "Previous", "PreviousVisible", "Next", "NextVisible", "First", and "Last".  
  
 [!code-cs[TreeNode_Parent#1](~/add/codesnippet/csharp/p-system.windows.forms.t_89_1.cs)]
 [!code-vb[TreeNode_Parent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_89_1.vb)]
 [!code-cpp[TreeNode_Parent#1](~/add/codesnippet/cpp/p-system.windows.forms.t_89_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color of the tree node.</summary>
        <value>The foreground <see cref="T:System.Drawing.Color" /> of the tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `null`, the <xref:System.Drawing.Color> used is the <xref:System.Windows.Forms.Control.ForeColor%2A> property value of the <xref:System.Windows.Forms.TreeView> control that the tree node is assigned to.  
  
   
  
## Examples  
 The following code example creates a root tree node to assign child tree nodes to. A child tree node for each `Customer` object in an <xref:System.Collections.ArrayList> is added to the root tree node as well as a child tree node for each `Order` object assigned to the `Customer` object. The `Customer` object is assigned to the <xref:System.Windows.Forms.TreeNode.Tag%2A> property, and the tree nodes representing `Customer` objects are displayed with <xref:System.Drawing.Color.Orange%2A> text. This example requires that you have a `Customer` and `Order` object defined, a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>, and an <xref:System.Collections.ArrayList> named `customerArray` that contains `Customer` objects.  
  
 [!code-cs[TreeNode_Bounds#1](~/add/codesnippet/csharp/p-system.windows.forms.t_178_1.cs)]
 [!code-cpp[TreeNode_Bounds#1](~/add/codesnippet/cpp/p-system.windows.forms.t_178_1.cpp)]
 [!code-vb[TreeNode_Bounds#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_178_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.TreeNode FromHandle (System.Windows.Forms.TreeView tree, IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.TreeNode FromHandle(class System.Windows.Forms.TreeView tree, native int handle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree" Type="System.Windows.Forms.TreeView" />
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="tree">The <see cref="T:System.Windows.Forms.TreeView" /> that contains the tree node.</param>
        <param name="handle">The handle of the tree node.</param>
        <summary>Returns the tree node with the specified handle and assigned to the specified tree view control.</summary>
        <returns>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the tree node assigned to the specified <see cref="T:System.Windows.Forms.TreeView" /> control with the specified handle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a node is added to the <xref:System.Windows.Forms.TreeView.Nodes%2A?displayProperty=fullName> collection, the <xref:System.Windows.Forms.TreeView> control sends an NM_CUSTOMDRAW notification before the node handle is available. If you override the <xref:System.Windows.Forms.Control.WndProc%2A> method of the <xref:System.Windows.Forms.TreeView> to provide custom drawing in response to this notification, you should always check the return value of this method for `null` before you attempt to access the node.  
  
   
  
## Examples  
 The following code example gets the <xref:System.Windows.Forms.TreeNode> that was collapsed and creates a copy of it using its <xref:System.Windows.Forms.TreeNode.Handle%2A> property. The original <xref:System.Windows.Forms.TreeNode> is removed from the <xref:System.Windows.Forms.TreeNodeCollection>, and the copy is added to the collection. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control on it. The <xref:System.Windows.Forms.TreeView> control should have two or more root nodes, each having at least one child node.  
  
 [!code-cpp[Windows.Forms.TreeNode#3](~/add/codesnippet/cpp/0a58bc0d-b346-4d14-af9f-_1.cpp)]
 [!code-cs[Windows.Forms.TreeNode#3](~/add/codesnippet/csharp/0a58bc0d-b346-4d14-af9f-_1.cs)]
 [!code-vb[Windows.Forms.TreeNode#3](~/add/codesnippet/visualbasic/0a58bc0d-b346-4d14-af9f-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FullPath">
      <MemberSignature Language="C#" Value="public string FullPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the path from the root tree node to the current tree node.</summary>
        <value>The path from the root tree node to the current tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The path consists of the labels of all the tree nodes that must be navigated to reach this tree node, starting at the root tree node. The node labels are separated by the delimiter character specified in the <xref:System.Windows.Forms.TreeView.PathSeparator%2A> property of the <xref:System.Windows.Forms.TreeView> control that contains this node. For example, if the delimiter character of the tree view control named "Location" is set to the backslash character, (\\), the FullPath property value is "Country\Region\State".  
  
   
  
## Examples  
 The following code example sets the <xref:System.Windows.Forms.TreeView.PathSeparator%2A> property of a <xref:System.Windows.Forms.TreeView> and displays the number of child tree nodes that are contained in the <xref:System.Windows.Forms.TreeNodeCollection> of the <xref:System.Windows.Forms.TreeView.SelectedNode%2A>. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button>, and a <xref:System.Windows.Forms.TreeView> control with a <xref:System.Windows.Forms.TreeNodeCollection> that has several <xref:System.Windows.Forms.TreeNode> objects (preferably with three or more levels).  
  
 [!code-cpp[TreeNode_ForeColor#2](~/add/codesnippet/cpp/p-system.windows.forms.t_103_1.cpp)]
 [!code-cs[TreeNode_ForeColor#2](~/add/codesnippet/csharp/p-system.windows.forms.t_103_1.cs)]
 [!code-vb[TreeNode_ForeColor#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_103_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The node is not contained in a <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNodeCount">
      <MemberSignature Language="C#" Value="public int GetNodeCount (bool includeSubTrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetNodeCount(bool includeSubTrees) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeSubTrees" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeSubTrees">
          <see langword="true" /> if the resulting count includes all tree nodes indirectly rooted at this tree node; otherwise, <see langword="false" />.</param>
        <summary>Returns the number of child tree nodes.</summary>
        <returns>The number of child tree nodes assigned to the &lt;xref:System.Windows.Forms.TreeNode.Nodes%2A&gt; collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example sets the <xref:System.Windows.Forms.TreeView.PathSeparator%2A> property of a <xref:System.Windows.Forms.TreeView> and displays the number of child tree nodes that are contained in the <xref:System.Windows.Forms.TreeNodeCollection> of the <xref:System.Windows.Forms.TreeView.SelectedNode%2A>. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button>, and a <xref:System.Windows.Forms.TreeView> control with a <xref:System.Windows.Forms.TreeNodeCollection> that has several <xref:System.Windows.Forms.TreeNode> objects (preferably with three or more levels).  
  
 [!code-cpp[TreeNode_ForeColor#2](~/add/codesnippet/cpp/m-system.windows.forms.t_75_1.cpp)]
 [!code-cs[TreeNode_ForeColor#2](~/add/codesnippet/csharp/m-system.windows.forms.t_75_1.cs)]
 [!code-vb[TreeNode_ForeColor#2](~/add/codesnippet/visualbasic/m-system.windows.forms.t_75_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the handle of the tree node.</summary>
        <value>The tree node handle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a handle is not already created when the Handle property is referenced, it is created.  
  
   
  
## Examples  
 The following code example gets the <xref:System.Windows.Forms.TreeNode> that was collapsed and creates a copy of it using its Handle property. The original <xref:System.Windows.Forms.TreeNode> is removed from the <xref:System.Windows.Forms.TreeNodeCollection>, and the copy is added to the collection. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control on it. The <xref:System.Windows.Forms.TreeView> control should have two or more root nodes, each having at least one child node.  
  
 [!code-cpp[Windows.Forms.TreeNode#3](~/add/codesnippet/cpp/p-system.windows.forms.t_268_1.cpp)]
 [!code-cs[Windows.Forms.TreeNode#3](~/add/codesnippet/csharp/p-system.windows.forms.t_268_1.cs)]
 [!code-vb[Windows.Forms.TreeNode#3](~/add/codesnippet/visualbasic/p-system.windows.forms.t_268_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ImageIndex">
      <MemberSignature Language="C#" Value="public int ImageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ImageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TreeViewImageIndexConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("TreeView.ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the image list index value of the image displayed when the tree node is in the unselected state.</summary>
        <value>A zero-based index value that represents the image position in the assigned <see cref="T:System.Windows.Forms.ImageList" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ImageIndex value is the index value of an <xref:System.Drawing.Image> stored in the <xref:System.Windows.Forms.ImageList> assigned to the <xref:System.Windows.Forms.TreeView.ImageList%2A?displayProperty=fullName> property.  
  
> [!NOTE]
>  The default value of the ImageIndex property is the same as the <xref:System.Windows.Forms.TreeView.ImageIndex%2A> property of the <xref:System.Windows.Forms.TreeView> control that the <xref:System.Windows.Forms.TreeNode> is assigned to.  
  
 The <xref:System.Windows.Forms.TreeNode.ImageKey%2A> and ImageIndex properties are mutually exclusive; therefore, if one property is set, the other is ignored. If you set the <xref:System.Windows.Forms.TreeNode.ImageKey%2A> property, the ImageIndex property is automatically set to -1. Alternatively, if you set ImageIndex, <xref:System.Windows.Forms.TreeNode.ImageKey%2A> is automatically set to an empty string ("").  
  
   
  
## Examples  
 The following code example creates and assigns an <xref:System.Windows.Forms.ImageList> to a <xref:System.Windows.Forms.TreeView> control and fills the <xref:System.Windows.Forms.TreeView> control with <xref:System.Windows.Forms.TreeNode> objects. The tree nodes are assigned images from the <xref:System.Windows.Forms.ImageList> that is displayed when the tree node is in a selected or unselected state. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TreeView>, and an <xref:System.Collections.ArrayList> that contains `Customer` objects that each contain `Order` objects. It also requires that the `Customer` and `Order` objects are defined.  
  
 [!code-vb[TreeNode_TreeNode#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_272_1.vb)]
 [!code-cpp[TreeNode_TreeNode#1](~/add/codesnippet/cpp/p-system.windows.forms.t_272_1.cpp)]
 [!code-cs[TreeNode_TreeNode#1](~/add/codesnippet/csharp/p-system.windows.forms.t_272_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ImageKey">
      <MemberSignature Language="C#" Value="public string ImageKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TreeViewImageKeyConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("TreeView.ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key for the image associated with this tree node when the node is in an unselected state.</summary>
        <value>The key for the image associated with this tree node when the node is in an unselected state.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The image key returned by this property is contained in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the containing <xref:System.Windows.Forms.TreeView> control.  
  
 The ImageKey is case-insensitive.  
  
 The ImageKey and <xref:System.Windows.Forms.TreeNode.ImageIndex%2A> properties are mutually exclusive; if one property is set, the other is ignored. If you set the ImageKey property, the <xref:System.Windows.Forms.TreeNode.ImageIndex%2A> property is automatically set to -1. Alternatively, if you set <xref:System.Windows.Forms.TreeNode.ImageIndex%2A>, ImageKey is automatically set to an empty string ("").  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the position of the tree node in the tree node collection.</summary>
        <value>A zero-based index value that represents the position of the tree node in the &lt;xref:System.Windows.Forms.TreeNode.Nodes%2A&gt; collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example displays the <xref:System.Windows.Forms.TreeNode.Text%2A> and Index property values of the <xref:System.Windows.Forms.TreeNode> represented by the <xref:System.Windows.Forms.TreeNode.Parent%2A> property of the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName>. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control on it. The <xref:System.Windows.Forms.TreeView> should have at least two root nodes, each having at least one child node.  
  
 [!code-cpp[Windows.Forms.TreeNode#2](~/add/codesnippet/cpp/p-system.windows.forms.t_120_1.cpp)]
 [!code-cs[Windows.Forms.TreeNode#2](~/add/codesnippet/csharp/p-system.windows.forms.t_120_1.cs)]
 [!code-vb[Windows.Forms.TreeNode#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_120_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEditing">
      <MemberSignature Language="C#" Value="public bool IsEditing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the tree node is in an editable state.</summary>
        <value>
          <see langword="true" /> if the tree node is in editable state; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example lets the user edit nonroot tree nodes by using a <xref:System.Windows.Forms.ContextMenu>. When the user right clicks the mouse, the <xref:System.Windows.Forms.TreeNode> at that position is determined and stored in a variable named `mySelectedNode`. If a nonroot tree node was selected, it is put into an editable state, letting the user edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  
  
 [!code-cpp[classic treenode.beginedit example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_7_1.cpp)]
 [!code-cs[classic treenode.beginedit example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_7_1.cs)]
 [!code-vb[classic treenode.beginedit example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsExpanded">
      <MemberSignature Language="C#" Value="public bool IsExpanded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpanded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the tree node is in the expanded state.</summary>
        <value>
          <see langword="true" /> if the tree node is in the expanded state; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example toggles the selected node when a button is clicked. If the selected node is collapsed, it is expanded, if it is expanded by calling the <xref:System.Windows.Forms.TreeNode.Expand%2A> method, it is collapsed by calling the <xref:System.Windows.Forms.TreeNode.Collapse%2A> method. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has at least one <xref:System.Windows.Forms.TreeNode> with at least one child <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-vb[TreeNode_EnsureVisible_4#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_106_1.vb)]
 [!code-cs[TreeNode_EnsureVisible_4#1](~/add/codesnippet/csharp/p-system.windows.forms.t_106_1.cs)]
 [!code-cpp[TreeNode_EnsureVisible_4#1](~/add/codesnippet/cpp/p-system.windows.forms.t_106_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSelected">
      <MemberSignature Language="C#" Value="public bool IsSelected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSelected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the tree node is in the selected state.</summary>
        <value>
          <see langword="true" /> if the tree node is in the selected state; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example selects the appropriate <xref:System.Windows.Forms.TreeNode> after determining if the <xref:System.Windows.Forms.TreeNode> passed in is selected and which <xref:System.Windows.Forms.TreeNode> to select. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has a <xref:System.Windows.Forms.TreeNodeCollection> containing several <xref:System.Windows.Forms.TreeNode> objects. It also requires that you have a <xref:System.Windows.Forms.ComboBox> with the following items: "Previous", "PreviousVisible", "Next", "NextVisible", "First", and "Last".  
  
 [!code-cs[TreeNode_Parent#1](~/add/codesnippet/csharp/p-system.windows.forms.t_224_1.cs)]
 [!code-vb[TreeNode_Parent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_224_1.vb)]
 [!code-cpp[TreeNode_Parent#1](~/add/codesnippet/cpp/p-system.windows.forms.t_224_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the tree node is visible or partially visible.</summary>
        <value>
          <see langword="true" /> if the tree node is visible or partially visible; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example brings the last child tree node of the last root tree node into view in the tree view when a button is clicked. This example requires that you have a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form> that contains a collection of <xref:System.Windows.Forms.TreeNode> objects, and a <xref:System.Windows.Forms.Button>. There should be enough tree nodes so that they are not all visible in the tree view control.  
  
 [!code-vb[TreeNode_EnsureVisible_4#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_184_1.vb)]
 [!code-cs[TreeNode_EnsureVisible_4#2](~/add/codesnippet/csharp/p-system.windows.forms.t_184_1.cs)]
 [!code-cpp[TreeNode_EnsureVisible_4#2](~/add/codesnippet/cpp/p-system.windows.forms.t_184_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LastNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode LastNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode LastNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the last child tree node.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the last child tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LastNode is the last child <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection> stored in the <xref:System.Windows.Forms.TreeNode.Nodes%2A> property of the current tree node. If the <xref:System.Windows.Forms.TreeNode> has no child tree node, the LastNode property returns `null`.  
  
   
  
## Examples  
 The following code example selects the appropriate <xref:System.Windows.Forms.TreeNode> after determining if the <xref:System.Windows.Forms.TreeNode> passed in is selected and which <xref:System.Windows.Forms.TreeNode> to select. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains several <xref:System.Windows.Forms.TreeNode> objects. It also requires that you have a <xref:System.Windows.Forms.ComboBox> with the following items: "Previous", "PreviousVisible", "Next", "NextVisible", "First", and "Last".  
  
 [!code-cs[TreeNode_Parent#1](~/add/codesnippet/csharp/p-system.windows.forms.t_169_1.cs)]
 [!code-vb[TreeNode_Parent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_169_1.vb)]
 [!code-cpp[TreeNode_Parent#1](~/add/codesnippet/cpp/p-system.windows.forms.t_169_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Level">
      <MemberSignature Language="C#" Value="public int Level { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Level" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the zero-based depth of the tree node in the <see cref="T:System.Windows.Forms.TreeView" /> control.</summary>
        <value>The zero-based depth of the tree node in the <see cref="T:System.Windows.Forms.TreeView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For the Level property, the root node is considered the first level of nesting and returns 0.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the tree node.</summary>
        <value>A &lt;xref:System.String&gt; that represents the name of the tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Name of a <xref:System.Windows.Forms.TreeNode> is also the node's key, when the node is part of a <xref:System.Windows.Forms.TreeNodeCollection>. If the node does not have a name, Name returns an empty string ("").  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NextNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode NextNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode NextNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the next sibling tree node.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the next sibling tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The NextNode is the next sibling <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection> stored in the <xref:System.Windows.Forms.TreeNode.Nodes%2A> property of the tree node's parent <xref:System.Windows.Forms.TreeNode>. If there is no next tree node, the NextNode property returns `null`.  
  
   
  
## Examples  
 The following code example selects the appropriate <xref:System.Windows.Forms.TreeNode> after determining if the <xref:System.Windows.Forms.TreeNode> passed in is selected and which <xref:System.Windows.Forms.TreeNode> to select. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains several <xref:System.Windows.Forms.TreeNode> objects. It also requires that you have a <xref:System.Windows.Forms.ComboBox> with the following items: "Previous", "PreviousVisible", "Next", "NextVisible", "First", and "Last".  
  
 [!code-cs[TreeNode_Parent#1](~/add/codesnippet/csharp/p-system.windows.forms.t_51_1.cs)]
 [!code-vb[TreeNode_Parent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_51_1.vb)]
 [!code-cpp[TreeNode_Parent#1](~/add/codesnippet/cpp/p-system.windows.forms.t_51_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NextVisibleNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode NextVisibleNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode NextVisibleNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the next visible tree node.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the next visible tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The NextVisibleNode can be a child, sibling, or a tree node from another branch. If there is no next tree node, the NextVisibleNode property returns `null`.  
  
   
  
## Examples  
 The following code example selects the appropriate <xref:System.Windows.Forms.TreeNode> after determining if the <xref:System.Windows.Forms.TreeNode> passed in is selected and which <xref:System.Windows.Forms.TreeNode> to select. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains several <xref:System.Windows.Forms.TreeNode> objects. It also requires that you have a <xref:System.Windows.Forms.ComboBox> with the following items: "Previous", "PreviousVisible", "Next", "NextVisible", "First", and "Last".  
  
 [!code-cs[TreeNode_Parent#1](~/add/codesnippet/csharp/p-system.windows.forms.t_267_1.cs)]
 [!code-vb[TreeNode_Parent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_267_1.vb)]
 [!code-cpp[TreeNode_Parent#1](~/add/codesnippet/cpp/p-system.windows.forms.t_267_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NodeFont">
      <MemberSignature Language="C#" Value="public System.Drawing.Font NodeFont { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font NodeFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the font that is used to display the text on the tree node label.</summary>
        <value>The <see cref="T:System.Drawing.Font" /> that is used to display the text on the tree node label.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `null`, the <xref:System.Drawing.Font> used is the <xref:System.Windows.Forms.Control.Font%2A> property value of the <xref:System.Windows.Forms.TreeView> control that this node is attached to.  
  
> [!NOTE]
>  If the node font is larger than the <xref:System.Windows.Forms.Control.Font%2A> property value that is set in the <xref:System.Windows.Forms.TreeView> control, the tree node label text is clipped.  
  
   
  
## Examples  
 The following code example changes the size of NodeFont to the specified size and adjusts the <xref:System.Windows.Forms.TreeView.ItemHeight%2A> of the tree node's parent <xref:System.Windows.Forms.TreeView> control. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that contains a collection of <xref:System.Windows.Forms.TreeNode> objects, and a <xref:System.Windows.Forms.ComboBox> that contains font sizes.  
  
 [!code-cs[TreeNode_Bounds#2](~/add/codesnippet/csharp/p-system.windows.forms.t_20_1.cs)]
 [!code-cpp[TreeNode_Bounds#2](~/add/codesnippet/cpp/p-system.windows.forms.t_20_1.cpp)]
 [!code-vb[TreeNode_Bounds#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_20_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Nodes">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNodeCollection Nodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNodeCollection Nodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of <see cref="T:System.Windows.Forms.TreeNode" /> objects assigned to the current tree node.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeNodeCollection" /> that represents the tree nodes assigned to the current tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Nodes property can hold a collection of other <xref:System.Windows.Forms.TreeNode> objects. Each of the tree node in the collection has a Nodes property that can contain its own <xref:System.Windows.Forms.TreeNodeCollection>. This nesting of tree nodes can make it difficult to navigate a tree structure. The <xref:System.Windows.Forms.TreeNode.FullPath%2A> property makes it easier to determine your location in a tree.  
  
   
  
## Examples  
 The following code example removes the selected tree node from one <xref:System.Windows.Forms.TreeView> and adds it to another if both tree node collections are not read-only. When a <xref:System.Windows.Forms.Button> is clicked, the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName> is deleted from one <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> method and added to the other <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> method. This example requires that you have two <xref:System.Windows.Forms.TreeView> controls named `treeView1` and `treeView2`, and a <xref:System.Windows.Forms.Button> on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeNodeCollection#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_107_1.vb)]
 [!code-cpp[TreeNodeCollection#1](~/add/codesnippet/cpp/p-system.windows.forms.t_107_1.cpp)]
 [!code-cs[TreeNodeCollection#1](~/add/codesnippet/csharp/p-system.windows.forms.t_107_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent tree node of the current tree node.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the parent of the current tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the tree node is at the root level, the Parent property returns `null`.  
  
   
  
## Examples  
 The following code example displays the <xref:System.Windows.Forms.TreeNode.Text%2A> and <xref:System.Windows.Forms.TreeNode.Index%2A> property values of the <xref:System.Windows.Forms.TreeNode> represented by the Parent property of the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName>. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control on it. The <xref:System.Windows.Forms.TreeView> should have at least two root nodes, each having at least one child node.  
  
 [!code-cpp[Windows.Forms.TreeNode#2](~/add/codesnippet/cpp/p-system.windows.forms.t_38_1.cpp)]
 [!code-cs[Windows.Forms.TreeNode#2](~/add/codesnippet/csharp/p-system.windows.forms.t_38_1.cs)]
 [!code-vb[Windows.Forms.TreeNode#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_38_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrevNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode PrevNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode PrevNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the previous sibling tree node.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the previous sibling tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PrevNode is the previous sibling <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection> stored in the <xref:System.Windows.Forms.TreeNode.Nodes%2A> property of the tree node's parent <xref:System.Windows.Forms.TreeNode>. If there is no previous tree node, the PrevNode property returns `null`.  
  
   
  
## Examples  
 The following code example selects the appropriate <xref:System.Windows.Forms.TreeNode> after determining if the <xref:System.Windows.Forms.TreeNode> passed in is selected and which <xref:System.Windows.Forms.TreeNode> to select. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains several <xref:System.Windows.Forms.TreeNode> objects. It also requires that you have a <xref:System.Windows.Forms.ComboBox> with the following items: "Previous", "PreviousVisible", "Next", "NextVisible", "First", and "Last".  
  
 [!code-cs[TreeNode_Parent#1](~/add/codesnippet/csharp/p-system.windows.forms.t_237_1.cs)]
 [!code-vb[TreeNode_Parent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_237_1.vb)]
 [!code-cpp[TreeNode_Parent#1](~/add/codesnippet/cpp/p-system.windows.forms.t_237_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrevVisibleNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode PrevVisibleNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode PrevVisibleNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the previous visible tree node.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the previous visible tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PrevVisibleNode can be a child, sibling, or a tree node from another branch. If there is no previous tree node, the PrevVisibleNode property returns `null`.  
  
   
  
## Examples  
 The following code example selects the appropriate <xref:System.Windows.Forms.TreeNode> after determining if the <xref:System.Windows.Forms.TreeNode> passed in is selected and which <xref:System.Windows.Forms.TreeNode> to select. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains several <xref:System.Windows.Forms.TreeNode> objects. It also requires that you have a <xref:System.Windows.Forms.ComboBox> with the following items: "Previous", "PreviousVisible", "Next", "NextVisible", "First", and "Last".  
  
 [!code-cs[TreeNode_Parent#1](~/add/codesnippet/csharp/p-system.windows.forms.t_203_1.cs)]
 [!code-vb[TreeNode_Parent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_203_1.vb)]
 [!code-cpp[TreeNode_Parent#1](~/add/codesnippet/cpp/p-system.windows.forms.t_203_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes the current tree node from the tree view control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the Remove method is called, the tree node, and any child tree nodes that are assigned to the <xref:System.Windows.Forms.TreeNode>, are removed from the <xref:System.Windows.Forms.TreeView>. The removed child nodes are removed from the <xref:System.Windows.Forms.TreeView> but are still attached to this tree node.  
  
   
  
## Examples  
 The following code example removes a <xref:System.Windows.Forms.TreeNode> when the user right-clicks the mouse over it and toggles it from expanded to collapsed when the user clicks the mouse wheel over it. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control on it. The <xref:System.Windows.Forms.TreeView> should have two or more root tree nodes, each having at least one child node.  
  
 [!code-cpp[Windows.Forms.TreeNode#1](~/add/codesnippet/cpp/m-system.windows.forms.t_3_1.cpp)]
 [!code-cs[Windows.Forms.TreeNode#1](~/add/codesnippet/csharp/m-system.windows.forms.t_3_1.cs)]
 [!code-vb[Windows.Forms.TreeNode#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedImageIndex">
      <MemberSignature Language="C#" Value="public int SelectedImageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedImageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TreeViewImageIndexConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("TreeView.ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the image list index value of the image that is displayed when the tree node is in the selected state.</summary>
        <value>A zero-based index value that represents the image position in an <see cref="T:System.Windows.Forms.ImageList" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectedImageIndex value is the index value of an <xref:System.Drawing.Image> stored in the <xref:System.Windows.Forms.ImageList> assigned to the <xref:System.Windows.Forms.TreeView.ImageList%2A?displayProperty=fullName> property.  
  
> [!NOTE]
>  The default value of the SelectedImageIndex property is the same as the <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> property of the <xref:System.Windows.Forms.TreeView> control that the <xref:System.Windows.Forms.TreeNode> is assigned to.  
  
   
  
## Examples  
 The following code example creates and assigns an <xref:System.Windows.Forms.ImageList> to a <xref:System.Windows.Forms.TreeView> control and fills the <xref:System.Windows.Forms.TreeView> control with <xref:System.Windows.Forms.TreeNode> objects. The tree nodes are assigned images from the <xref:System.Windows.Forms.ImageList> that is displayed when the tree node is in a selected or unselected state. This example requires that you have a <xref:System.Windows.Forms.Form> containing a <xref:System.Windows.Forms.TreeView>, and an <xref:System.Collections.ArrayList> containing `Customer` objects that each contain `Order` objects. It also requires that the `Customer` and `Order` objects are defined.  
  
 [!code-vb[TreeNode_TreeNode#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_172_1.vb)]
 [!code-cpp[TreeNode_TreeNode#1](~/add/codesnippet/cpp/p-system.windows.forms.t_172_1.cpp)]
 [!code-cs[TreeNode_TreeNode#1](~/add/codesnippet/csharp/p-system.windows.forms.t_172_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedImageKey">
      <MemberSignature Language="C#" Value="public string SelectedImageKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedImageKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TreeViewImageKeyConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("TreeView.ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key of the image displayed in the tree node when it is in a selected state.</summary>
        <value>The key of the image displayed when the tree node is in a selected state.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The image key returned by this property is contained in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="protected virtual void Serialize (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Serialize(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that describes the <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <param name="context">The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that indicates the state of the stream during serialization</param>
        <summary>Saves the state of the <see cref="T:System.Windows.Forms.TreeNode" /> to the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for serialization services. Associated enumeration: &lt;xref:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter%2A&gt;</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StateImageIndex">
      <MemberSignature Language="C#" Value="public int StateImageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StateImageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.NoneExcludedImageIndexConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("TreeView.StateImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the image that is used to indicate the state of the <see cref="T:System.Windows.Forms.TreeNode" /> when the parent <see cref="T:System.Windows.Forms.TreeView" /> has its &lt;xref:System.Windows.Forms.TreeView.CheckBoxes%2A&gt; property set to <see langword="false" />.</summary>
        <value>The index of the image that is used to indicate the state of the <see cref="T:System.Windows.Forms.TreeNode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The image index that is returned by this property is contained in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView> control.  
  
 If the parent <xref:System.Windows.Forms.TreeView> has check boxes enabled, the StateImageIndex is ignored and the node will display the first or second image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> set on the parent <xref:System.Windows.Forms.TreeView> to indicate an unchecked or checked state, respectively. Toggling the <xref:System.Windows.Forms.TreeNode.Checked%2A> property does not affect the value of the StateImageIndex.  
  
 The StateImageIndex returns -1 when not set. The <xref:System.Windows.Forms.TreeNode.StateImageKey%2A> and StateImageIndex properties are mutually exclusive, meaning if one is set, the other is ignored. If you set the <xref:System.Windows.Forms.TreeNode.StateImageKey%2A> property, the StateImageIndex property is automatically set to -1. Alternatively, if you set StateImageIndex, <xref:System.Windows.Forms.TreeNode.StateImageKey%2A> is automatically set to an empty string ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified index is less than -1 or greater than 14.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StateImageKey">
      <MemberSignature Language="C#" Value="public string StateImageKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StateImageKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageKeyConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("TreeView.StateImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key of the image that is used to indicate the state of the <see cref="T:System.Windows.Forms.TreeNode" /> when the parent <see cref="T:System.Windows.Forms.TreeView" /> has its &lt;xref:System.Windows.Forms.TreeView.CheckBoxes%2A&gt; property set to <see langword="false" />.</summary>
        <value>The key of the image that is used to indicate the state of the <see cref="T:System.Windows.Forms.TreeNode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The image key that is returned by this property is contained in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView> control.  
  
 If the parent <xref:System.Windows.Forms.TreeView> has check boxes enabled, the StateImageKey is ignored and the node will display the first or second image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> set on the parent <xref:System.Windows.Forms.TreeView> to indicate an unchecked or checked state, respectively. Toggling the <xref:System.Windows.Forms.TreeNode.Checked%2A> property does not affect the value of the StateImageKey.  
  
 The StateImageKey and <xref:System.Windows.Forms.TreeNode.StateImageIndex%2A> properties are mutually exclusive, meaning if one is set, the other is ignored. If you set the StateImageKey property, the <xref:System.Windows.Forms.TreeNode.StateImageIndex%2A> property is automatically set to -1. Alternatively, if you set <xref:System.Windows.Forms.TreeNode.StateImageIndex%2A>, StateImageKey is automatically set to an empty string (""). You should set the StateImageKey to an image with a corresponding index between 0 and 14. You can set the StateImageKey to an image with an index value greater than 14 (an exception will not be thrown), but the image may not be displayed  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the data to serialize the <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <param name="context">A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains the destination information for this serialization.</param>
        <summary>Populates a serialization information object with the data needed to serialize the <see cref="T:System.Windows.Forms.TreeNode" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for serialization services. Associated enumeration: &lt;xref:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter%2A&gt;</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object that contains data about the tree node.</summary>
        <value>An &lt;xref:System.Object&gt; that contains data about the tree node. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Any <xref:System.Object> derived type can be assigned to this property. If this property is being set through the Windows Forms designer, only text can be assigned.  
  
> [!CAUTION]
>  The <xref:System.Windows.Forms.TreeNode.Clone%2A> method performs a shallow copy of the node. If the value of the Tag property is a reference type, both the original and cloned copy will point to the same single instance of the Tag value.  
  
   
  
## Examples  
 The following code example creates a root tree node to assign child tree nodes to. A child tree node for each `Customer` object in an <xref:System.Collections.ArrayList> is added to the root tree node as well as a child tree node for each `Order` object assigned to the `Customer` object. The `Customer` object is assigned to the Tag property, and the tree nodes representing `Customer` objects are displayed with <xref:System.Drawing.Color.Orange%2A> text. This example requires that you have a `Customer` and `Order` object defined, a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>, and an <xref:System.Collections.ArrayList> named `customerArray` that contains `Customer` objects.  
  
 [!code-cs[TreeNode_Bounds#1](~/add/codesnippet/csharp/p-system.windows.forms.t_222_1.cs)]
 [!code-cpp[TreeNode_Bounds#1](~/add/codesnippet/cpp/p-system.windows.forms.t_222_1.cpp)]
 [!code-vb[TreeNode_Bounds#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_222_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text displayed in the label of the tree node.</summary>
        <value>The text displayed in the label of the tree node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The maximum number of characters that a <xref:System.Windows.Forms.TreeNode> can display is 259. If a <xref:System.String> that has more than 259 characters is assigned to this property, only the first 259 characters are displayed.  
  
 This property cannot be set by the user if the <xref:System.Windows.Forms.TreeView.LabelEdit%2A> property of the parent <xref:System.Windows.Forms.TreeView> is set to `false`. The alternative to explicitly setting this property is to create the tree node by using one of the <xref:System.Windows.Forms.TreeNode.%23ctor%2A> constructors that has a string parameter that represents the Text property. The label is displayed next to the <xref:System.Windows.Forms.TreeNode> image, if one is displayed.  
  
   
  
## Examples  
 The following code example creates a root tree node to assign child tree nodes to. A child tree node for each `Customer` object in an <xref:System.Collections.ArrayList> is added to the root tree node as well as a child tree node for each `Order` object assigned to the `Customer` object. The `Customer` object is assigned to the <xref:System.Windows.Forms.TreeNode.Tag%2A> property, and the tree nodes representing `Customer` objects are displayed with <xref:System.Drawing.Color.Orange%2A> text. This example requires that you have a `Customer` and `Order` object defined, a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>, and an <xref:System.Collections.ArrayList> named `customerArray` that contains `Customer` objects.  
  
 [!code-cs[TreeNode_Bounds#1](~/add/codesnippet/csharp/p-system.windows.forms.t_94_1.cs)]
 [!code-cpp[TreeNode_Bounds#1](~/add/codesnippet/cpp/p-system.windows.forms.t_94_1.cpp)]
 [!code-vb[TreeNode_Bounds#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_94_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Toggle">
      <MemberSignature Language="C#" Value="public void Toggle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Toggle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Toggles the tree node to either the expanded or collapsed state.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The tree node is toggled to the state opposite its current state, either expanded or collapsed.  
  
> [!NOTE]
>  The state of a <xref:System.Windows.Forms.TreeNode> is persisted. For example, if the next level of child nodes was not collapsed previously, when the <xref:System.Windows.Forms.TreeNode.Expand%2A> method is called, the child nodes appear in their previously expanded state.  
  
   
  
## Examples  
 The following code example removes a <xref:System.Windows.Forms.TreeNode> when the user right-clicks the mouse over it and toggles it from expanded to collapsed when the user clicks the mouse wheel over it. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control on it. The <xref:System.Windows.Forms.TreeView> should have two or more root tree nodes, each having at least one child node.  
  
 [!code-cpp[Windows.Forms.TreeNode#1](~/add/codesnippet/cpp/m-system.windows.forms.t_28_1.cpp)]
 [!code-cs[Windows.Forms.TreeNode#1](~/add/codesnippet/csharp/m-system.windows.forms.t_28_1.cs)]
 [!code-vb[Windows.Forms.TreeNode#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_28_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToolTipText">
      <MemberSignature Language="C#" Value="public string ToolTipText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTipText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text that appears when the mouse pointer hovers over a <see cref="T:System.Windows.Forms.TreeNode" />.</summary>
        <value>Gets the text that appears when the mouse pointer hovers over a <see cref="T:System.Windows.Forms.TreeNode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You must set the <xref:System.Windows.Forms.TreeView.ShowNodeToolTips%2A> property of the parent <xref:System.Windows.Forms.TreeView> to `true` for the ToolTipText to be visible at run time.  
  
 If the <xref:System.Windows.Forms.TreeView> control has a ToolTip and also contains a <xref:System.Windows.Forms.TreeNode> that has a <xref:System.Windows.Forms.ToolTip>, only the <xref:System.Windows.Forms.ToolTip> for the node will be shown.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ToolTipText and <xref:System.Windows.Forms.TreeView.ShowNodeToolTips%2A> properties. To run this example, paste the following code into a Windows Form and call `InitializeTreeViewWithToolTips` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler.  
  
 [!code-cs[System.Windows.Forms.TreeViewWhidbeyMembers#7](~/add/codesnippet/csharp/p-system.windows.forms.t_52_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#7](~/add/codesnippet/visualbasic/p-system.windows.forms.t_52_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current object.</summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TreeView">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeView TreeView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeView TreeView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent tree view that the tree node is assigned to.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeView" /> that represents the parent tree view that the tree node is assigned to, or <see langword="null" /> if the node has not been assigned to a tree view.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example selects the appropriate <xref:System.Windows.Forms.TreeNode> after determining if the <xref:System.Windows.Forms.TreeNode> passed in is selected and which <xref:System.Windows.Forms.TreeNode> to select. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains several <xref:System.Windows.Forms.TreeNode> objects. It also requires that you have a <xref:System.Windows.Forms.ComboBox> with the following items: "Previous", "PreviousVisible", "Next", "NextVisible", "First", and "Last".  
  
 [!code-cs[TreeNode_Parent#1](~/add/codesnippet/csharp/p-system.windows.forms.t_40_1.cs)]
 [!code-vb[TreeNode_Parent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_40_1.vb)]
 [!code-cpp[TreeNode_Parent#1](~/add/codesnippet/cpp/p-system.windows.forms.t_40_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>