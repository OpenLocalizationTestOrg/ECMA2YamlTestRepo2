<Type Name="TreeView" FullName="System.Windows.Forms.TreeView">
  <TypeSignature Language="C#" Value="public class TreeView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeView extends System.Windows.Forms.Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("AfterSelect")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Nodes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.TreeViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Displays a hierarchical collection of labeled items, each represented by a <see cref="T:System.Windows.Forms.TreeNode" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeView.Nodes%2A> collection holds all the <xref:System.Windows.Forms.TreeNode> objects that are assigned to the TreeView control. The tree nodes in this collection are referred to as the root tree nodes. Any tree node that is subsequently added to a root tree node is referred to as a child node. Because each <xref:System.Windows.Forms.TreeNode> can contain a collection of other <xref:System.Windows.Forms.TreeNode> objects, you might find it difficult to determine your location in the tree structure when you iterate through the collection. You can parse the <xref:System.Windows.Forms.TreeNode.FullPath%2A?displayProperty=fullName> string by using the <xref:System.Windows.Forms.TreeView.PathSeparator%2A> string value to determine where a <xref:System.Windows.Forms.TreeNode> label begins and ends.  
  
 You can display images next to the tree nodes by assigning an <xref:System.Windows.Forms.ImageList> to the <xref:System.Windows.Forms.TreeView.ImageList%2A> property and referencing the index value of an <xref:System.Drawing.Image> in the <xref:System.Windows.Forms.ImageList> to assign that <xref:System.Drawing.Image>. Use the following properties to assign images:  
  
-   Set the <xref:System.Windows.Forms.TreeView.ImageIndex%2A> property to the index value of the <xref:System.Drawing.Image> that you want to display when a tree node is not selected.  
  
-   Set the <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> property to the index value of the <xref:System.Drawing.Image> that you want to display when a tree node is selected.  
  
 The images referenced by the <xref:System.Windows.Forms.TreeView.ImageIndex%2A> and <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> property values are the default images displayed by all the tree nodes that are assigned to the <xref:System.Windows.Forms.TreeView.Nodes%2A> collection. Individual tree nodes can override the default images by setting the <xref:System.Windows.Forms.TreeNode.ImageIndex%2A?displayProperty=fullName> and <xref:System.Windows.Forms.TreeNode.SelectedImageIndex%2A?displayProperty=fullName> properties.  
  
 The state images displayed in the TreeView are 16 x 16 pixels by default. Setting the <xref:System.Windows.Forms.ImageList.ImageSize%2A> property of the <xref:System.Windows.Forms.TreeView.StateImageList%2A> will have no effect on how the images are displayed. However, the state images are resized according to the system DPI setting when the app.config file contains the following entry:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
  
```  
  
 Tree nodes can be expanded to display the next level of child tree nodes. The user can expand the <xref:System.Windows.Forms.TreeNode> by clicking the plus-sign (+) button, if one is displayed next to the <xref:System.Windows.Forms.TreeNode>, or you can expand the <xref:System.Windows.Forms.TreeNode> by calling the <xref:System.Windows.Forms.TreeNode.Expand%2A?displayProperty=fullName> method. To expand all the child tree node levels in the <xref:System.Windows.Forms.TreeNode.Nodes%2A> collection, call the <xref:System.Windows.Forms.TreeNode.ExpandAll%2A> method. You can collapse the child <xref:System.Windows.Forms.TreeNode> level by calling the <xref:System.Windows.Forms.TreeNode.Collapse%2A?displayProperty=fullName> method, or the user can press the minus-sign (-) button, if one is displayed next to the <xref:System.Windows.Forms.TreeNode>. You can also call the <xref:System.Windows.Forms.TreeNode.Toggle%2A?displayProperty=fullName> method to alternate between the expanded and collapsed states.  
  
 Tree nodes can optionally display check boxes. To display the check boxes, set the <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> property of the TreeView to `true`. The <xref:System.Windows.Forms.TreeNode.Checked%2A> property is set to `true` for tree nodes that are in a checked state.  
  
> [!NOTE]
>  Setting the <xref:System.Windows.Forms.TreeNode.Checked%2A?displayProperty=fullName> property from within the <xref:System.Windows.Forms.TreeView.BeforeCheck> or <xref:System.Windows.Forms.TreeView.AfterCheck> event causes the event to be raised multiple times and can result in unexpected behavior. For example, you might set the <xref:System.Windows.Forms.TreeNode.Checked%2A> property in the event handler when you are recursively updating the child nodes so that the user does not have to expand and check each one individually. To prevent the event from being raised multiple times, add logic to your event handler that only executes your recursive code if the <xref:System.Windows.Forms.TreeViewEventArgs.Action%2A> property of the <xref:System.Windows.Forms.TreeViewEventArgs> is not set to <xref:System.Windows.Forms.TreeViewAction?displayProperty=fullName>. For an example of how to do this, see the Example section of the <xref:System.Windows.Forms.TreeView.AfterCheck> or <xref:System.Windows.Forms.TreeView.BeforeCheck> events.  
  
 You can change the appearance of the TreeView control by setting some of its display and style properties. Setting <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> to `true` displays a plus-sign or minus-sign button next to each <xref:System.Windows.Forms.TreeNode> that can be expanded or collapsed, respectively. Setting the <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> property to `true` causes the TreeView to display lines that join all the root tree nodes together. You can display lines that connect child tree nodes to their root node by setting the <xref:System.Windows.Forms.TreeView.ShowLines%2A> property to `true`. Setting the <xref:System.Windows.Forms.TreeView.HotTracking%2A> property to `true` changes the appearance of the tree node labels as the mouse pointer passes over them. When hot-tracked, the tree node labels take on the appearance of a hyperlink. You can also completely customize the appearance of the TreeView control. To do this, set the <xref:System.Windows.Forms.TreeView.DrawMode%2A> property to a value other than <xref:System.Windows.Forms.TreeViewDrawMode?displayProperty=fullName> and handle the <xref:System.Windows.Forms.TreeView.DrawNode> event.  
  
> [!NOTE]
>  When setting the <xref:System.Windows.Forms.TreeView.CheckBoxes%2A>, <xref:System.Windows.Forms.TreeView.Scrollable%2A>, <xref:System.Windows.Forms.TreeView.ImageIndex%2A>, and <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> properties at run time, the TreeView handle is recreated (see <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=fullName>) to update the control's appearance. This causes all tree nodes to be collapsed, except for the selected <xref:System.Windows.Forms.TreeNode>.  
  
   
  
## Examples  
 The following code example demonstrates the use of the TreeView control.  
  
 [!code-cs[TreeViewMisc#10](~/add/codesnippet/csharp/t-system.windows.forms.t_28_1.cs)]
 [!code-vb[TreeViewMisc#10](~/add/codesnippet/visualbasic/t-system.windows.forms.t_28_1.vb)]  
  
 The following, more complex code example displays customer information in a TreeView control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the TreeView is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the TreeView creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have a cursor file that is named `MyWait.cur` in the application directory and that you have created an instance of a TreeView control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/t-system.windows.forms.t_28_2.vb)]
 [!code-cs[TreeView#1](~/add/codesnippet/csharp/t-system.windows.forms.t_28_2.cs)]
 [!code-cpp[TreeView#1](~/add/codesnippet/cpp/t-system.windows.forms.t_28_2.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeView" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to change the collapse state of a <xref:System.Windows.Forms.TreeView> so that all the checked nodes are visible. First, all the nodes are expanded, and a handler is added for the <xref:System.Windows.Forms.TreeView.BeforeCollapse> event. Next, all the nodes are collapsed. The <xref:System.Windows.Forms.TreeView.BeforeCollapse> event handler determines whether a given node has child nodes that are checked. If a node has checked children, the collapse is canceled for that node. In order to allow standard node collapse when the minus sign next to a node is clicked, the <xref:System.Windows.Forms.TreeView.BeforeCollapse> event handler is then removed.  
  
 This behavior can also be implemented by handling the <xref:System.Windows.Forms.TreeView.BeforeExpand> event, as illustrated in the example for that topic.  
  
 [!code-cs[TreeViewShowCheckedNodes2#1](~/add/codesnippet/csharp/m-system.windows.forms.t_71_1.cs)]
 [!code-cpp[TreeViewShowCheckedNodes2#1](~/add/codesnippet/cpp/m-system.windows.forms.t_71_1.cpp)]
 [!code-vb[TreeViewShowCheckedNodes2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_71_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AfterCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewEventHandler AfterCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewEventHandler AfterCheck" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the tree node check box is checked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting the <xref:System.Windows.Forms.TreeNode.Checked%2A?displayProperty=fullName> property from within a <xref:System.Windows.Forms.TreeView.BeforeCheck> or AfterCheck event handler causes the event to be raised multiple times and can result in unexpected behavior. To prevent the event from being raised multiple times, add logic to your event handler that only executes your recursive code if the <xref:System.Windows.Forms.TreeViewEventArgs.Action%2A> property of the <xref:System.Windows.Forms.TreeViewEventArgs> is not set to <xref:System.Windows.Forms.TreeViewAction?displayProperty=fullName>.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example updates all the child tree nodes of a <xref:System.Windows.Forms.TreeNode> when the user changes its checked state. This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> that has <xref:System.Windows.Forms.TreeNode> objects in its <xref:System.Windows.Forms.TreeNodeCollection>. The <xref:System.Windows.Forms.TreeNodeCollection> should have tree nodes with child nodes.  
  
 [!code-cpp[TreeView.AfterCheck_BeforeCheck#1](~/add/codesnippet/cpp/e-system.windows.forms.t_52_1.cpp)]
 [!code-vb[TreeView.AfterCheck_BeforeCheck#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_52_1.vb)]
 [!code-cs[TreeView.AfterCheck_BeforeCheck#1](~/add/codesnippet/csharp/e-system.windows.forms.t_52_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AfterCollapse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewEventHandler AfterCollapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewEventHandler AfterCollapse" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the tree node is collapsed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example updates all the child tree nodes of a <xref:System.Windows.Forms.TreeNode> when the user changes its checked state. This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> that has <xref:System.Windows.Forms.TreeNode> objects in its <xref:System.Windows.Forms.TreeNodeCollection>. The <xref:System.Windows.Forms.TreeNodeCollection> should have tree nodes with child nodes.  
  
 [!code-cpp[TreeView.AfterCheck_BeforeCheck#1](~/add/codesnippet/cpp/e-system.windows.forms.t_107_1.cpp)]
 [!code-vb[TreeView.AfterCheck_BeforeCheck#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_107_1.vb)]
 [!code-cs[TreeView.AfterCheck_BeforeCheck#1](~/add/codesnippet/csharp/e-system.windows.forms.t_107_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AfterExpand">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewEventHandler AfterExpand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewEventHandler AfterExpand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the tree node is expanded.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AfterExpand event. This report helps you learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.TreeView> named `TreeView1`. Then ensure that the event handler is associated with the AfterExpand event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#631](~/add/codesnippet/csharp/e-system.windows.forms.t_104_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#631](~/add/codesnippet/visualbasic/e-system.windows.forms.t_104_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.NodeLabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.NodeLabelEditEventHandler AfterLabelEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NodeLabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the tree node label text is edited.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example lets the user edit nonroot tree nodes by using a <xref:System.Windows.Forms.ContextMenu>. When the user right clicks the mouse, the <xref:System.Windows.Forms.TreeNode> at that position is determined and stored in a variable named `mySelectedNode`. If a nonroot tree node was selected, it is put into an editable state, which allows the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  
  
 [!code-cpp[classic treenode.beginedit example#1](~/add/codesnippet/cpp/e-system.windows.forms.t_77_1.cpp)]
 [!code-cs[classic treenode.beginedit example#1](~/add/codesnippet/csharp/e-system.windows.forms.t_77_1.cs)]
 [!code-vb[classic treenode.beginedit example#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_77_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AfterSelect">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewEventHandler AfterSelect;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewEventHandler AfterSelect" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the tree node is selected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event does not occur when the node is unselected. To detect whether the selection was cleared, you can test the <xref:System.Windows.Forms.TreeNode.IsSelected%2A?displayProperty=fullName> property.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.TreeViewAction> enumeration. To run this example, paste the following code in a form that contains a <xref:System.Windows.Forms.TreeView> control named `TreeView1`. This example requires that `TreeView1` is populated with items and the AfterSelect event is connected to the event handler defined in the sample.  
  
 [!code-cs[System.Windows.Forms.TreeViewAndPrintPreview#2](~/add/codesnippet/csharp/e-system.windows.forms.t_44_1.cs)]
 [!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#2](~/add/codesnippet/cpp/e-system.windows.forms.t_44_1.cpp)]
 [!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#2](~/add/codesnippet/visualbasic/e-system.windows.forms.t_44_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color for the control.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the background color of the control. The default is the value of the &lt;xref:System.Windows.Forms.Control.DefaultBackColor%2A&gt; property.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or set the background image for the <see cref="T:System.Windows.Forms.TreeView" /> control.</summary>
        <value>The <see cref="T:System.Drawing.Image" /> that is the background image for the <see cref="T:System.Windows.Forms.TreeView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.TreeView.BackgroundImage%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the layout of the background image for the <see cref="T:System.Windows.Forms.TreeView" /> control.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.ImageLayout" /> values. The default is <see cref="T:System.Windows.Forms.ImageLayout" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property/method/event is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.TreeView.BackgroundImageLayout%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeforeCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewCancelEventHandler BeforeCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewCancelEventHandler BeforeCheck" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the tree node check box is checked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Setting the <xref:System.Windows.Forms.TreeNode.Checked%2A?displayProperty=fullName> property from within the BeforeCheck or <xref:System.Windows.Forms.TreeView.AfterCheck> event causes the event to be raised multiple times and can result in unexpected behavior. For example, you might set the <xref:System.Windows.Forms.TreeNode.Checked%2A> property in the event handler when you are recursively updating the child nodes, so that the user does not have to expand and check each one individually. To prevent the event from being raised multiple times, add logic to your event handler that only executes your recursive code if the <xref:System.Windows.Forms.TreeViewEventArgs.Action%2A> property of the <xref:System.Windows.Forms.TreeViewEventArgs> is not set to <xref:System.Windows.Forms.TreeViewAction?displayProperty=fullName>.  
  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example updates all the child tree nodes of a <xref:System.Windows.Forms.TreeNode> when the user changes its checked state. This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> that has <xref:System.Windows.Forms.TreeNode> objects in its <xref:System.Windows.Forms.TreeNodeCollection>. The <xref:System.Windows.Forms.TreeNodeCollection> should have tree nodes with child nodes.  
  
 [!code-cpp[TreeView.AfterCheck_BeforeCheck#1](~/add/codesnippet/cpp/e-system.windows.forms.t_70_1.cpp)]
 [!code-vb[TreeView.AfterCheck_BeforeCheck#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_70_1.vb)]
 [!code-cs[TreeView.AfterCheck_BeforeCheck#1](~/add/codesnippet/csharp/e-system.windows.forms.t_70_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeforeCollapse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewCancelEventHandler BeforeCollapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewCancelEventHandler BeforeCollapse" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the tree node is collapsed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to change the collapse state of a <xref:System.Windows.Forms.TreeView> so that all the checked nodes are visible. First, all the nodes are expanded, and a handler is added for the BeforeCollapse event. Next, all the nodes are collapsed. The BeforeCollapse event handler determines whether a given node has child nodes that are checked. If a node has checked children, the collapse is canceled for that node. In order to allow standard node collapse when the minus sign next to a node is clicked, the BeforeCollapse event handler is then removed.  
  
 This behavior can also be implemented by handling the <xref:System.Windows.Forms.TreeView.BeforeExpand> event, as illustrated in the example for that topic.  
  
 For the complete example, see the <xref:System.Windows.Forms.TreeView.%23ctor%2A> constructor reference topic.  
  
 [!code-cs[TreeViewShowCheckedNodes2#2](~/add/codesnippet/csharp/e-system.windows.forms.t_109_1.cs)]
 [!code-cpp[TreeViewShowCheckedNodes2#2](~/add/codesnippet/cpp/e-system.windows.forms.t_109_1.cpp)]
 [!code-vb[TreeViewShowCheckedNodes2#2](~/add/codesnippet/visualbasic/e-system.windows.forms.t_109_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeforeExpand">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewCancelEventHandler BeforeExpand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewCancelEventHandler BeforeExpand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the tree node is expanded.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to change the collapse state of a <xref:System.Windows.Forms.TreeView> so that all the checked nodes are visible. First, all the nodes are collapsed, and a handler is added for the BeforeExpand event. Next, all the nodes are expanded. The BeforeExpand event handler determines whether a given node has child nodes that are checked. If a node does not have checked children, the expansion is canceled for that node. In order to allow standard node expansion when the plus sign next to a node is clicked, the BeforeExpand event handler is then removed.  
  
 This behavior can also be implemented by handling the <xref:System.Windows.Forms.TreeView.BeforeCollapse> event, as illustrated in the example for that topic.  
  
 For the complete example, see the <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> reference topic.  
  
 [!code-vb[TreeViewShowCheckedNodes1#2](~/add/codesnippet/visualbasic/e-system.windows.forms.t_149_1.vb)]
 [!code-cpp[TreeViewShowCheckedNodes1#2](~/add/codesnippet/cpp/e-system.windows.forms.t_149_1.cpp)]
 [!code-cs[TreeViewShowCheckedNodes1#2](~/add/codesnippet/csharp/e-system.windows.forms.t_149_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.NodeLabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.NodeLabelEditEventHandler BeforeLabelEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NodeLabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the tree node label text is edited.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the BeforeLabelEdit<xref:System.Windows.Forms.TreeView.AfterSelect> and <xref:System.Windows.Forms.TreeView.TopNode%2A> members. To run this example, paste the following code in a form that contains a `TreeView` control that is named `TreeView1`. Call the `InitializeTreeView` method in the form's constructor or `Load` method.  
  
 [!code-cs[System.Windows.Forms.TreeViewAndPrintPreview#1](~/add/codesnippet/csharp/e-system.windows.forms.t_125_1.cs)]
 [!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#1](~/add/codesnippet/cpp/e-system.windows.forms.t_125_1.cpp)]
 [!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_125_1.vb)]  
[!code-cs[System.Windows.Forms.TreeViewAndPrintPreview#2](~/add/codesnippet/csharp/e-system.windows.forms.t_125_2.cs)]
[!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#2](~/add/codesnippet/cpp/e-system.windows.forms.t_125_2.cpp)]
[!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#2](~/add/codesnippet/visualbasic/e-system.windows.forms.t_125_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeforeSelect">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewCancelEventHandler BeforeSelect;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewCancelEventHandler BeforeSelect" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the tree node is selected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BeforeSelect event. This report helps you learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.TreeView> named `TreeView1`. Then ensure that the event handler is associated with the BeforeSelect event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#635](~/add/codesnippet/csharp/e-system.windows.forms.t_153_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#635](~/add/codesnippet/visualbasic/e-system.windows.forms.t_153_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disables any redrawing of the tree view.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To maintain performance while items are added one at a time to the <xref:System.Windows.Forms.TreeView>, call the BeginUpdate method. The BeginUpdate method prevents the control from painting until the <xref:System.Windows.Forms.TreeView.EndUpdate%2A> method is called.  
  
 The preferred way to add items to a tree view control is to use the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> method to add an array of tree node items to a tree view. However, if you want to add items one at a time, use the BeginUpdate method to prevent the <xref:System.Windows.Forms.TreeView> control from painting during the add operations. To allow the control to resume painting, call the <xref:System.Windows.Forms.TreeView.EndUpdate%2A> method when all the tree nodes have been added to the tree view.  
  
   
  
## Examples  
 The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the BeginUpdate and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have a cursor file that is named `MyWait.cur` in the application directory and that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_55_1.vb)]
 [!code-cs[TreeView#1](~/add/codesnippet/csharp/m-system.windows.forms.t_55_1.cs)]
 [!code-cpp[TreeView#1](~/add/codesnippet/cpp/m-system.windows.forms.t_55_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border style of the tree view control.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.BorderStyle" /> values. The default is <see cref="T:System.Windows.Forms.BorderStyle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the BorderStyle property is set to <xref:System.Windows.Forms.BorderStyle>, the <xref:System.Windows.Forms.TreeView> has a sunken, three-dimensional appearance. To display a flat, thin border around the <xref:System.Windows.Forms.TreeView> control, set the <xref:System.Windows.Forms.BorderStyle> property to <xref:System.Windows.Forms.BorderStyle>.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.BorderStyle> enumeration and the BorderStyle, <xref:System.Windows.Forms.TreeView.ShowLines%2A>, <xref:System.Windows.Forms.TreeView.Scrollable%2A>, <xref:System.Windows.Forms.TreeView.HideSelection%2A> and <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> properties. To run this example, paste the following code in a form and call the `InitializeTreeView` method in the form's constructor or `Load` method.  
  
 [!code-cpp[System.Windows.Forms.TreeViewExample#1](~/add/codesnippet/cpp/p-system.windows.forms.t_190_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewExample#1](~/add/codesnippet/csharp/p-system.windows.forms.t_190_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewExample#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_190_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The assigned value is not one of the <see cref="T:System.Windows.Forms.BorderStyle" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether check boxes are displayed next to the tree nodes in the tree view control.</summary>
        <value>
          <see langword="true" /> if a check box is displayed next to each tree node in the tree view control; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A check box is displayed to the left of both the tree node label and tree node <xref:System.Drawing.Image>, if any. Check boxes allow the user to select more than one tree node at a time.  
  
 When the CheckBoxes property of a <xref:System.Windows.Forms.TreeView> is set to `true`, and the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property is set, each <xref:System.Windows.Forms.TreeNode> that is contained in the <xref:System.Windows.Forms.TreeView> displays the first and second images from the <xref:System.Windows.Forms.TreeView.StateImageList%2A> to indicate an unchecked or checked state, respectively. However, the displayed images may be different if the following situation occurs: If the <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> of the node is set to a value other than 0 or 1, and the CheckBoxes property of the parent <xref:System.Windows.Forms.TreeView> is set to `false`, the <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> will not automatically reset to -1 to indicate it is not set. In this case, the state image at the indicated index position is shown. If CheckBoxes is set to `true` again, the first and second images of the <xref:System.Windows.Forms.TreeView.StateImageList%2A> are shown to indicate a checked or unchecked state, respectively.  
  
> [!NOTE]
>  When setting the CheckBoxes property at run time, the <xref:System.Windows.Forms.TreeView> handle is recreated (see <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=fullName>) to update the control's appearance. This causes all tree nodes to be collapsed, with the exception of the selected <xref:System.Windows.Forms.TreeNode>.  
  
   
  
## Examples  
 The following code example demonstrates how to change the collapse state of a <xref:System.Windows.Forms.TreeView> so that all the checked nodes are visible. First, all the nodes are collapsed, and a handler is added for the <xref:System.Windows.Forms.TreeView.BeforeExpand> event. Next, all the nodes are expanded. The <xref:System.Windows.Forms.TreeView.BeforeExpand> event handler determines whether a given node has child nodes that are checked. If a node does not have checked children, the expansion is canceled for that node. In order to allow standard node expansion when the plus sign next to a node is clicked, the <xref:System.Windows.Forms.TreeView.BeforeExpand> event handler is then removed.  
  
 This behavior can also be implemented by handling the <xref:System.Windows.Forms.TreeView.BeforeCollapse> event, as illustrated in the example for that topic.  
  
 [!code-vb[TreeViewShowCheckedNodes1#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_230_1.vb)]
 [!code-cpp[TreeViewShowCheckedNodes1#1](~/add/codesnippet/cpp/p-system.windows.forms.t_230_1.cpp)]
 [!code-cs[TreeViewShowCheckedNodes1#1](~/add/codesnippet/csharp/p-system.windows.forms.t_230_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CollapseAll">
      <MemberSignature Language="C#" Value="public void CollapseAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CollapseAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Collapses all the tree nodes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CollapseAll method collapses all the <xref:System.Windows.Forms.TreeNode> objects, which includes all the child tree nodes, that are in the <xref:System.Windows.Forms.TreeView> control.  
  
> [!NOTE]
>  The state of a <xref:System.Windows.Forms.TreeNode> persists. For example, suppose that you call the <xref:System.Windows.Forms.TreeNode.Expand%2A> method for a root tree node. If the child tree nodes were not previously collapsed, they will appear in their previously-expanded state. Calling the CollapseAll method ensures that all the tree nodes appear in the collapsed state.  
  
   
  
## Examples  
 The following code example demonstrates how to change the collapse state of a <xref:System.Windows.Forms.TreeView> so that all the checked nodes are visible. First, all the nodes are collapsed, and a handler is added for the <xref:System.Windows.Forms.TreeView.BeforeExpand> event. Next, all the nodes are expanded. The <xref:System.Windows.Forms.TreeView.BeforeExpand> event handler determines whether a given node has child nodes that are checked. If a node does not have checked children, the expansion is canceled for that node. In order to allow standard node expansion when the plus sign next to a node is clicked, the <xref:System.Windows.Forms.TreeView.BeforeExpand> event handler is then removed.  
  
 This behavior can also be implemented by handling the <xref:System.Windows.Forms.TreeView.BeforeCollapse> event, as illustrated in the example for that topic.  
  
 For the complete example, see the <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> reference topic.  
  
 [!code-vb[TreeViewShowCheckedNodes1#2](~/add/codesnippet/visualbasic/m-system.windows.forms.t_41_1.vb)]
 [!code-cpp[TreeViewShowCheckedNodes1#2](~/add/codesnippet/cpp/m-system.windows.forms.t_41_1.cpp)]
 [!code-cs[TreeViewShowCheckedNodes1#2](~/add/codesnippet/csharp/m-system.windows.forms.t_41_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a handle for the control.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the required creation parameters when the control handle is created.</summary>
        <value>The creation parameters.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermissionFlag">for access to unmanaged code when getting the property value. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default size of the control.</summary>
        <value>The default <see cref="T:System.Drawing.Size" /> of the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.TreeView" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  
  
 When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.TreeView> references. This method invokes the `Dispose` method of each referenced object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control should redraw its surface using a secondary buffer. The DoubleBuffered property does not affect the <see cref="T:System.Windows.Forms.TreeView" /> control.</summary>
        <value>
          <see langword="true" /> if the control uses a secondary buffer; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting the DoubleBuffered property does not affect the <xref:System.Windows.Forms.TreeView> control. If you want to reduce flicker when the <xref:System.Windows.Forms.TreeView> is drawn, use the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeViewDrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.TreeViewDrawMode DrawMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewDrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the mode in which the control is drawn.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.TreeViewDrawMode" /> values. The default is <see cref="T:System.Windows.Forms.TreeViewDrawMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The nodes of a <xref:System.Windows.Forms.TreeView> are typically drawn by the operating system. The DrawMode property lets you customize the appearance of the nodes. To do this, set DrawMode to <xref:System.Windows.Forms.TreeViewDrawMode?displayProperty=fullName> or <xref:System.Windows.Forms.TreeViewDrawMode?displayProperty=fullName> and provide a handler for the <xref:System.Windows.Forms.TreeView.DrawNode> event. This is called owner drawing.  
  
   
  
## Examples  
 The following code example demonstrates how to customize a <xref:System.Windows.Forms.TreeView> control using owner drawing. The <xref:System.Windows.Forms.TreeView> control in the example displays optional node tags alongside the standard node labels. Node tags are specified by using the <xref:System.Windows.Forms.TreeNode.Tag%2A?displayProperty=fullName> property. The <xref:System.Windows.Forms.TreeView> control also uses custom colors, which include a custom highlight color.  
  
 You can customize most of the <xref:System.Windows.Forms.TreeView> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  
  
 For the complete example, see the <xref:System.Windows.Forms.TreeView.DrawNode> reference topic.  
  
 [!code-vb[TreeViewOwnerDraw#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_85_1.vb)]
 [!code-cpp[TreeViewOwnerDraw#2](~/add/codesnippet/cpp/p-system.windows.forms.t_85_1.cpp)]
 [!code-cs[TreeViewOwnerDraw#2](~/add/codesnippet/csharp/p-system.windows.forms.t_85_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The property value is not a valid <see cref="T:System.Windows.Forms.TreeViewDrawMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DrawNode">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawTreeNodeEventHandler DrawNode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawTreeNodeEventHandler DrawNode" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawTreeNodeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a <see cref="T:System.Windows.Forms.TreeView" /> is drawn and the &lt;xref:System.Windows.Forms.TreeView.DrawMode%2A&gt; property is set to a <see cref="T:System.Windows.Forms.TreeViewDrawMode" /> value other than <see cref="T:System.Windows.Forms.TreeViewDrawMode" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this event to customize the appearance of nodes in a <xref:System.Windows.Forms.TreeView> control using owner drawing.  
  
 This event is raised only when the <xref:System.Windows.Forms.TreeView.DrawMode%2A> property is set to <xref:System.Windows.Forms.TreeViewDrawMode> values of <xref:System.Windows.Forms.TreeViewDrawMode> or <xref:System.Windows.Forms.TreeViewDrawMode>. The following table indicates how the <xref:System.Windows.Forms.TreeNode> can be customized when the <xref:System.Windows.Forms.TreeView.DrawMode%2A> property is set to these values.  
  
|DrawMode property value|TreeNode customization|  
|-----------------------------|----------------------------|  
|<xref:System.Windows.Forms.TreeViewDrawMode>|The <xref:System.Windows.Forms.TreeNode> label area can be customized. All other <xref:System.Windows.Forms.TreeNode> elements are drawn automatically.|  
|<xref:System.Windows.Forms.TreeViewDrawMode>|The appearance of the entire <xref:System.Windows.Forms.TreeNode> can be customized. Icons, check boxes, plus and minus signs, and lines connecting the nodes must be drawn manually if they are desired.|  
  
 The region that the <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=fullName> value would occupy if it were drawn using the font specified by the <xref:System.Windows.Forms.TreeView> control's <xref:System.Windows.Forms.Control.Font%2A> property is the region in which a node can be clicked to select it. This is called the hit test region. If you draw outside this region, you should provide your own code that selects a node when its visible area is clicked.  
  
 The hit test region corresponds to the <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds%2A?displayProperty=fullName> property when using <xref:System.Windows.Forms.TreeViewDrawMode>. When using <xref:System.Windows.Forms.TreeViewDrawMode>, however, the <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds%2A?displayProperty=fullName> property encompasses the entire width of the <xref:System.Windows.Forms.TreeView>. In this case, you can access the hit test region by getting the <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Node%2A?displayProperty=fullName> value and accessing its <xref:System.Windows.Forms.TreeNode.Bounds%2A?displayProperty=fullName> property. You can then draw the hit test region of the node within these bounds, or you can provide your own hit test code. Note that setting the <xref:System.Windows.Forms.TreeNode.NodeFont%2A?displayProperty=fullName> property does not change the size of the hit test region, which is calculated using the font specified for the entire <xref:System.Windows.Forms.TreeView>.  
  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to customize a <xref:System.Windows.Forms.TreeView> control using owner drawing. The <xref:System.Windows.Forms.TreeView> control in the example displays optional node tags alongside the standard node labels. Node tags are specified by using the <xref:System.Windows.Forms.TreeNode.Tag%2A?displayProperty=fullName> property. The <xref:System.Windows.Forms.TreeView> control also uses custom colors, which include a custom highlight color.  
  
 You can customize most of the <xref:System.Windows.Forms.TreeView> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  
  
 In the example, a handler for the DrawNode event draws the node tags and the custom selection highlight manually. Unselected nodes do not need customization. For these, the <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A?displayProperty=fullName> property is set to `true` so that they will be drawn by the operating system.  
  
 Additionally, a handler for the <xref:System.Windows.Forms.Control.MouseDown> event provides hit-testing. By default, a node can be selected only by clicking the region around its label. The <xref:System.Windows.Forms.Control.MouseDown> event handler selects a node that is clicked anywhere within this region or within the region around a node tag, if present.  
  
 [!code-vb[TreeViewOwnerDraw#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_83_1.vb)]
 [!code-cpp[TreeViewOwnerDraw#1](~/add/codesnippet/cpp/e-system.windows.forms.t_83_1.cpp)]
 [!code-cs[TreeViewOwnerDraw#1](~/add/codesnippet/csharp/e-system.windows.forms.t_83_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enables the redrawing of the tree view.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To maintain performance while items are added one at a time to the <xref:System.Windows.Forms.TreeView>, call the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> method. The <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> method prevents the control from painting until the EndUpdate method is called.  
  
 The preferred way to add items to a tree view control is to use the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> method to add an array of tree node items to a tree view. However, if you want to add items one at a time, use the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> method to prevent the <xref:System.Windows.Forms.TreeView> control from painting during the add operations. To allow control the control to resume painting, call the EndUpdate method when all the tree nodes have been added to the tree view.  
  
   
  
## Examples  
 The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and EndUpdate methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have a cursor file that is named `MyWait.cur` in the application directory and that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_68_1.vb)]
 [!code-cs[TreeView#1](~/add/codesnippet/csharp/m-system.windows.forms.t_68_1.cs)]
 [!code-cpp[TreeView#1](~/add/codesnippet/cpp/m-system.windows.forms.t_68_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExpandAll">
      <MemberSignature Language="C#" Value="public void ExpandAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Expands all the tree nodes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ExpandAll method expands all the <xref:System.Windows.Forms.TreeNode> objects, which includes all the child tree nodes, that are in the <xref:System.Windows.Forms.TreeView> control.  
  
> [!NOTE]
>  The state of a <xref:System.Windows.Forms.TreeNode> persists. For example, suppose that you call the <xref:System.Windows.Forms.TreeNode.ExpandAll%2A> method, and then the individual root tree nodes are collapsed. The child tree nodes have not been collapsed, and will appear in their previously-expanded state when the root tree nodes are expanded again. Calling the <xref:System.Windows.Forms.TreeView.CollapseAll%2A> method ensures that all the tree nodes appear in the collapsed state.  
  
   
  
## Examples  
 The following code example expands all the tree nodes in a <xref:System.Windows.Forms.TreeView> control when a <xref:System.Windows.Forms.CheckBox> is checked, and collapses the <xref:System.Windows.Forms.TreeNode.FirstNode%2A> when the <xref:System.Windows.Forms.CheckBox> is cleared. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.CheckBox>, and a <xref:System.Windows.Forms.TreeView> control with a <xref:System.Windows.Forms.TreeNodeCollection> that has several <xref:System.Windows.Forms.TreeNode> objects (preferably with three or more levels).  
  
 [!code-cpp[TreeNode_ForeColor#1](~/add/codesnippet/cpp/m-system.windows.forms.t_70_1.cpp)]
 [!code-cs[TreeNode_ForeColor#1](~/add/codesnippet/csharp/m-system.windows.forms.t_70_1.cs)]
 [!code-vb[TreeNode_ForeColor#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_70_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color of the control.</summary>
        <value>The foreground <see cref="T:System.Drawing.Color" /> of the control. The default is the value of the &lt;xref:System.Windows.Forms.Control.DefaultForeColor%2A&gt; property.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the selection highlight spans the width of the tree view control.</summary>
        <value>
          <see langword="true" /> if the selection highlight spans the width of the tree view control; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When FullRowSelect is `true`, a selection highlight spans the entire width of the tree view, display instead of the width of just the tree node label. The FullRowSelect property is ignored if <xref:System.Windows.Forms.TreeView.ShowLines%2A> is set to `true`.  
  
   
  
## Examples  
 The following code example illustrates a customized <xref:System.Windows.Forms.TreeView>. By inheriting the <xref:System.Windows.Forms.TreeView> class, this custom version has all the functionality of a typical <xref:System.Windows.Forms.TreeView>. Changing various property values in the constructor provides a unique appearance. Because the <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> property is set to `false`, the customized control also overrides the <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> method so nodes can be expanded and collapsed when they are clicked.  
  
 A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  
  
 [!code-vb[TreeViewCustomization#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_215_1.vb)]
 [!code-cpp[TreeViewCustomization#2](~/add/codesnippet/cpp/p-system.windows.forms.t_215_1.cpp)]
 [!code-cs[TreeViewCustomization#2](~/add/codesnippet/csharp/p-system.windows.forms.t_215_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetItemRenderStyles">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.OwnerDrawPropertyBag GetItemRenderStyles (System.Windows.Forms.TreeNode node, int state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Windows.Forms.OwnerDrawPropertyBag GetItemRenderStyles(class System.Windows.Forms.TreeNode node, int32 state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.OwnerDrawPropertyBag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
        <Parameter Name="state" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> for which to return an <see cref="T:System.Windows.Forms.OwnerDrawPropertyBag" />.</param>
        <param name="state">The visible state of the <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Returns an <see cref="T:System.Windows.Forms.OwnerDrawPropertyBag" /> for the specified <see cref="T:System.Windows.Forms.TreeNode" />.</summary>
        <returns>An <see cref="T:System.Windows.Forms.OwnerDrawPropertyBag" /> for the specified <see cref="T:System.Windows.Forms.TreeNode" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNodeAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode GetNodeAt (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode GetNodeAt(valuetype System.Drawing.Point pt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">The <see cref="T:System.Drawing.Point" /> to evaluate and retrieve the node from.</param>
        <summary>Retrieves the tree node that is at the specified point.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> at the specified point, in tree view (client) coordinates, or <see langword="null" /> if there is no node at that location.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can pass the <xref:System.Windows.Forms.MouseEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.MouseEventArgs.Y%2A?displayProperty=fullName> coordinates of the <xref:System.Windows.Forms.Control.MouseDown> event as the <xref:System.Drawing.Point.X%2A> and <xref:System.Drawing.Point.Y%2A> values of a new <xref:System.Drawing.Point>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNodeAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode GetNodeAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode GetNodeAt(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The &lt;xref:System.Drawing.Point.X%2A&gt; position to evaluate and retrieve the node from.</param>
        <param name="y">The &lt;xref:System.Drawing.Point.Y%2A&gt; position to evaluate and retrieve the node from.</param>
        <summary>Retrieves the tree node at the point with the specified coordinates.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> at the specified location, in tree view (client) coordinates, or <see langword="null" /> if there is no node at that location.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can pass the <xref:System.Windows.Forms.MouseEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.MouseEventArgs.Y%2A?displayProperty=fullName> coordinates of the <xref:System.Windows.Forms.Control.MouseDown> event as the `x` and `y` parameters.  
  
   
  
## Examples  
 The following code example lets the user edit nonroot tree nodes by using a <xref:System.Windows.Forms.ContextMenu>. When the user right clicks the mouse, the <xref:System.Windows.Forms.TreeNode> at that position is determined and stored in a variable named `mySelectedNode`. If a nonroot tree node was selected, it is put into an editable state, which allows the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  
  
 [!code-cpp[classic treenode.beginedit example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_44_1.cpp)]
 [!code-cs[classic treenode.beginedit example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_44_1.cs)]
 [!code-vb[classic treenode.beginedit example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_44_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNodeCount">
      <MemberSignature Language="C#" Value="public int GetNodeCount (bool includeSubTrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetNodeCount(bool includeSubTrees) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeSubTrees" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeSubTrees">
          <see langword="true" /> to count the <see cref="T:System.Windows.Forms.TreeNode" /> items that the subtrees contain; otherwise, <see langword="false" />.</param>
        <summary>Retrieves the number of tree nodes, optionally including those in all subtrees, assigned to the tree view control.</summary>
        <returns>The number of tree nodes, optionally including those in all subtrees, assigned to the tree view control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `includeSubTrees` is `true`, the result is the number of all the tree nodes in the entire tree structure.  
  
   
  
## Examples  
 The following code example sets the <xref:System.Windows.Forms.TreeView.PathSeparator%2A> property of a <xref:System.Windows.Forms.TreeView> and displays the number of child tree nodes that are contained in the <xref:System.Windows.Forms.TreeNodeCollection> of the <xref:System.Windows.Forms.TreeView.SelectedNode%2A>. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button>, and a <xref:System.Windows.Forms.TreeView> control with a <xref:System.Windows.Forms.TreeNodeCollection> that has several <xref:System.Windows.Forms.TreeNode> objects (preferably with three or more levels).  
  
 [!code-cpp[TreeNode_ForeColor#2](~/add/codesnippet/cpp/m-system.windows.forms.t_5_1.cpp)]
 [!code-cs[TreeNode_ForeColor#2](~/add/codesnippet/csharp/m-system.windows.forms.t_5_1.cs)]
 [!code-vb[TreeNode_ForeColor#2](~/add/codesnippet/visualbasic/m-system.windows.forms.t_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the selected tree node remains highlighted even when the tree view has lost the focus.</summary>
        <value>
          <see langword="true" /> if the selected tree node is not highlighted when the tree view has lost the focus; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to `false`, selected nodes in the <xref:System.Windows.Forms.TreeView> control remain highlighted in a different color than the current selection color when the <xref:System.Windows.Forms.TreeView> control loses focus. You can use this property to keep items that are selected by the user visible when the user clicks a different control on the form or moves to a different window.  
  
> [!NOTE]
>  If you are concerned with the accessibility of your applications, it is recommended that you set the HideSelection property to `false`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the HideSelection property. To run this example, paste the following code in a form and call the `InitializeSelectedTreeView` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler.  
  
 [!code-cpp[System.Windows.Forms.TreeViewExample#2](~/add/codesnippet/cpp/p-system.windows.forms.t_46_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewExample#2](~/add/codesnippet/csharp/p-system.windows.forms.t_46_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewExample#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_46_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeViewHitTestInfo HitTest (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeViewHitTestInfo HitTest(valuetype System.Drawing.Point pt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">The <see cref="T:System.Drawing.Point" /> at which to retrieve node information.</param>
        <summary>Provides node information, given a point.</summary>
        <returns>The node information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to determine whether a point is located in a <xref:System.Windows.Forms.TreeNode> and where within the node the point is located, such as on the label or image area.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate at which to retrieve node information</param>
        <param name="y">The y-coordinate at which to retrieve node information.</param>
        <summary>Provides node information, given x- and y-coordinates.</summary>
        <returns>The node information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to determine whether a set of x- and y-coordinates is located in a <xref:System.Windows.Forms.TreeNode> and where within the node the point is located, such as on the label or image area.  
  
   
  
## Examples  
 The following code example code demonstrates how to use the <xref:System.Windows.Forms.TreeNode.Level%2A>, <xref:System.Windows.Forms.TreeViewHitTestInfo.Node%2A>, and <xref:System.Windows.Forms.TreeView.HitTest%2A> members. To run this example, create a Windows Form that contains a <xref:System.Windows.Forms.TreeView> named `treeView1` and populate it with several levels of nodes. Paste the following code into the form and associate the <xref:System.Windows.Forms.Control.MouseDown> event of `treeView1` with the `treeView1_MouseDown` method in this example.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#3](~/add/codesnippet/cpp/m-system.windows.forms.t_36_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewWhidbeyMembers#3](~/add/codesnippet/csharp/m-system.windows.forms.t_36_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#3](~/add/codesnippet/visualbasic/m-system.windows.forms.t_36_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a tree node label takes on the appearance of a hyperlink as the mouse pointer passes over it.</summary>
        <value>
          <see langword="true" /> if a tree node label takes on the appearance of a hyperlink as the mouse pointer passes over it; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> property is set to `true`, the HotTracking property has no effect.  
  
> [!NOTE]
>  When the HotTracking property is set to `true`, each tree node label takes on the appearance of a hyperlink as the mouse pointer passes over it. The <xref:System.Drawing.FontStyle> font style is applied to the <xref:System.Drawing.Font> and the <xref:System.Windows.Forms.Control.ForeColor%2A> is set to blue to make the label appear as a link. The appearance is not controlled by the Internet settings of the user's operating system.  
  
   
  
## Examples  
 The following code example illustrates a customized <xref:System.Windows.Forms.TreeView>. By inheriting the <xref:System.Windows.Forms.TreeView> class, this custom version has all the functionality of a typical <xref:System.Windows.Forms.TreeView>. Changing various property values in the constructor provides a unique appearance. Because the <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> property is set to `false`, the customized control also overrides the <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> method so that nodes can be expanded and collapsed when they are clicked.  
  
 A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  
  
 [!code-vb[TreeViewCustomization#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_238_1.vb)]
 [!code-cpp[TreeViewCustomization#2](~/add/codesnippet/cpp/p-system.windows.forms.t_238_1.cpp)]
 [!code-cs[TreeViewCustomization#2](~/add/codesnippet/csharp/p-system.windows.forms.t_238_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ImageIndex">
      <MemberSignature Language="C#" Value="public int ImageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ImageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.NoneExcludedImageIndexConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the image-list index value of the default image that is displayed by the tree nodes.</summary>
        <value>A zero-based index that represents the position of an <see cref="T:System.Drawing.Image" /> in an <see cref="T:System.Windows.Forms.ImageList" />. The default is zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ImageIndex value is the index of an <xref:System.Drawing.Image> stored in the <xref:System.Windows.Forms.ImageList> assigned to the <xref:System.Windows.Forms.TreeView.ImageList%2A> property.  
  
 The <xref:System.Windows.Forms.TreeView.ImageKey%2A> and ImageIndex properties are mutually exclusive; if one is set, the other is ignored. If you set <xref:System.Windows.Forms.TreeView.ImageKey%2A>, ImageIndex is automatically set to -1. Alternatively, if you set ImageIndex, <xref:System.Windows.Forms.TreeView.ImageKey%2A> is automatically set to an empty string ("").  
  
> [!NOTE]
>  When setting the ImageIndex property at run time, the <xref:System.Windows.Forms.TreeView> handle is recreated (see <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=fullName>) to update the control's appearance. This causes all tree nodes to be collapsed, with the exception of the selected <xref:System.Windows.Forms.TreeNode>.  
  
   
  
## Examples  
 The following code example creates and assigns an <xref:System.Windows.Forms.ImageList> to a <xref:System.Windows.Forms.TreeView> control and fills the <xref:System.Windows.Forms.TreeView> control with <xref:System.Windows.Forms.TreeNode> objects. The tree nodes are assigned images from the <xref:System.Windows.Forms.ImageList> that are displayed when in a selected or unselected state. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TreeView>, and an <xref:System.Collections.ArrayList> that contains `Customer` objects that each contain `Order` objects. It is also assumed that the `Customer` and `Order` objects are defined.  
  
 [!code-vb[TreeNode_TreeNode#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_277_1.vb)]
 [!code-cpp[TreeNode_TreeNode#1](~/add/codesnippet/cpp/p-system.windows.forms.t_277_1.cpp)]
 [!code-cs[TreeNode_TreeNode#1](~/add/codesnippet/csharp/p-system.windows.forms.t_277_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified index is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ImageKey">
      <MemberSignature Language="C#" Value="public string ImageKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageKeyConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key of the default image for each node in the <see cref="T:System.Windows.Forms.TreeView" /> control when it is in an unselected state.</summary>
        <value>The key of the default image shown for each node <see cref="T:System.Windows.Forms.TreeView" /> control when the node is in an unselected state.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ImageKey property is case-insensitive.  
  
 If a <xref:System.Windows.Forms.TreeNode> does not have an image set, the image specified by the ImageKey property will be shown when the node is not selected. When the node is selected, the first item in the <xref:System.Windows.Forms.ImageList> will be shown.  
  
 The ImageKey and <xref:System.Windows.Forms.TreeView.ImageIndex%2A> properties are mutually exclusive, meaning if one is set, the other is ignored. If you set the ImageKey property, the <xref:System.Windows.Forms.TreeView.ImageIndex%2A> property is automatically set to -1. Alternatively, if you set the <xref:System.Windows.Forms.TreeView.ImageIndex%2A> property, the ImageKey is automatically set to an empty string ("").  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList ImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList ImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> that contains the <see cref="T:System.Drawing.Image" /> objects that are used by the tree nodes.</summary>
        <value>The <see cref="T:System.Windows.Forms.ImageList" /> that contains the <see cref="T:System.Drawing.Image" /> objects that are used by the tree nodes. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.ImageList> property value is anything other than `null`, all the tree nodes display the first <xref:System.Drawing.Image> stored in the <xref:System.Windows.Forms.ImageList>. You can specify which images from the list are displayed for selected and unselected nodes by setting the <xref:System.Windows.Forms.TreeView.ImageIndex%2A> and <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> properties. Individual <xref:System.Windows.Forms.TreeNode> objects can specify which image is displayed by setting their <xref:System.Windows.Forms.TreeNode.ImageIndex%2A> and <xref:System.Windows.Forms.TreeNode.SelectedImageIndex%2A> properties. These individual settings will override the settings in the corresponding <xref:System.Windows.Forms.TreeView> properties.  
  
> [!NOTE]
>  In the .NET Framework version 1.1, there is an issue that prevents images from appearing on <xref:System.Windows.Forms.TreeView> nodes when your application calls <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName>. To work around this issue, call <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> in your `Main` method immediately after you call <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>. This issue is fixed in the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)].  
  
   
  
## Examples  
 The following code example creates and assigns an <xref:System.Windows.Forms.ImageList> to a <xref:System.Windows.Forms.TreeView> control and fills the <xref:System.Windows.Forms.TreeView> control with <xref:System.Windows.Forms.TreeNode> objects. The tree nodes are assigned images from the <xref:System.Windows.Forms.ImageList> that are displayed when in a selected or unselected state. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TreeView>, and an <xref:System.Collections.ArrayList> that contains `Customer` objects that each contain `Order` objects.  
  
 [!code-vb[TreeNode_TreeNode#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_243_1.vb)]
 [!code-cpp[TreeNode_TreeNode#1](~/add/codesnippet/cpp/p-system.windows.forms.t_243_1.cpp)]
 [!code-cs[TreeNode_TreeNode#1](~/add/codesnippet/csharp/p-system.windows.forms.t_243_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the distance to indent each child tree node level.</summary>
        <value>The distance, in pixels, to indent each child tree node level. The default value is 19.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property to a value of -1 does not throw an exception if the value has not yet been changed from its default. This is because the control uses a value of -1 as an internal default before the control handle has been created. This internal default value causes the wrapped control to return its own default value of 19.  
  
   
  
## Examples  
 The following code example illustrates a customized <xref:System.Windows.Forms.TreeView>. By inheriting the <xref:System.Windows.Forms.TreeView> class, this custom version has all the functionality of a typical <xref:System.Windows.Forms.TreeView>. Changing various property values in the constructor provides a unique appearance. Because the <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> property is set to false, the customized control also overrides the <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> method so that nodes can be expanded and collapsed when they are clicked.  
  
 A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  
  
 [!code-vb[TreeViewCustomization#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_282_1.vb)]
 [!code-cpp[TreeViewCustomization#2](~/add/codesnippet/cpp/p-system.windows.forms.t_282_1.cpp)]
 [!code-cs[TreeViewCustomization#2](~/add/codesnippet/csharp/p-system.windows.forms.t_282_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is less than 0 (see Remarks).  
  
 -or-  
  
 The assigned value is greater than 32,000.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">One of the Keys values.</param>
        <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
        <returns>
          <see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the user is editing a tree node, the <xref:System.Windows.Forms.TreeView> control treats keys such as ENTER, ESC, HOME, and END as input keys.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user begins dragging a node.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to enable drag-and-drop operations within a <xref:System.Windows.Forms.TreeView> control. In this example, any node can be dragged to another node that is not a descendant of the dragged node. The dragged node, which includes all its descendant nodes, becomes a child of the destination node. When the left mouse button is used, the dragged node is moved to the destination node. When the right mouse button is used, the dragged node is copied to the destination node.  
  
 [!code-cpp[TreeViewDragDrop#1](~/add/codesnippet/cpp/e-system.windows.forms.t_130_1.cpp)]
 [!code-cs[TreeViewDragDrop#1](~/add/codesnippet/csharp/e-system.windows.forms.t_130_1.cs)]
 [!code-vb[TreeViewDragDrop#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_130_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of each tree node in the tree view control.</summary>
        <value>The height, in pixels, of each tree node in the tree view.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the item height is set to a value larger than the height of the tree view control, calling the <xref:System.Windows.Forms.TreeNode.EnsureVisible%2A?displayProperty=fullName> method will have unexpected results.  
  
   
  
## Examples  
 The following code example changes the size <xref:System.Windows.Forms.TreeNode.NodeFont%2A> to the specified size and adjusts the ItemHeight of the tree node's parent <xref:System.Windows.Forms.TreeView> control. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> control with a collection of <xref:System.Windows.Forms.TreeNode> objects, and a <xref:System.Windows.Forms.ComboBox> that contains font sizes.  
  
 [!code-cs[TreeNode_Bounds#2](~/add/codesnippet/csharp/p-system.windows.forms.t_273_1.cs)]
 [!code-cpp[TreeNode_Bounds#2](~/add/codesnippet/cpp/p-system.windows.forms.t_273_1.cpp)]
 [!code-vb[TreeNode_Bounds#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_273_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is less than one.  
  
 -or-  
  
 The assigned value is greater than the &lt;xref:System.Int16.MaxValue&gt; value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the label text of the tree nodes can be edited.</summary>
        <value>
          <see langword="true" /> if the label text of the tree nodes can be edited; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.BeginEdit%2A> method works only if the LabelEdit property is `true`. If LabelEdit is `false` when you attempt to edit the label, an exception will be thrown and the tree node will not be put in to an editable state.  
  
   
  
## Examples  
 The following code example lets the user edit nonroot tree nodes by using a <xref:System.Windows.Forms.ContextMenu>. When the user right clicks the mouse, the <xref:System.Windows.Forms.TreeNode> at that position is determined and stored in a variable named `mySelectedNode`. If a nonroot tree node was selected, it is put into an editable state, which allows the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  
  
 [!code-cpp[classic treenode.beginedit example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_239_1.cpp)]
 [!code-cs[classic treenode.beginedit example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_239_1.cs)]
 [!code-vb[classic treenode.beginedit example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_239_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LineColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LineColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of the lines connecting the nodes of the <see cref="T:System.Windows.Forms.TreeView" /> control.</summary>
        <value>The <see cref="T:System.Drawing.Color" /> of the lines connecting the tree nodes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates setting the <xref:System.Windows.Forms.TreeNode> line color. To run this example, paste the code into a Windows Form. Call `InitializeLineTreeView` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#2](~/add/codesnippet/cpp/p-system.windows.forms.t_66_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewWhidbeyMembers#2](~/add/codesnippet/csharp/p-system.windows.forms.t_66_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_66_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NodeMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeMouseClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks a <see cref="T:System.Windows.Forms.TreeNode" /> with the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when the user clicks any part of a tree node with the mouse, including the plus sign (**+**) or minus sign (**-**) that indicates whether the node is collapsed or expanded.  
  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to handle the NodeMouseClick event.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#4](~/add/codesnippet/cpp/e-system.windows.forms.t_128_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewWhidbeyMembers#4](~/add/codesnippet/csharp/e-system.windows.forms.t_128_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#4](~/add/codesnippet/visualbasic/e-system.windows.forms.t_128_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NodeMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeMouseClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user double-clicks a <see cref="T:System.Windows.Forms.TreeNode" /> with the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when the user double-clicks any part of a tree node with the mouse, including the plus sign (+) or minus sign (-) that indicates whether the node is collapsed or expanded.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to handle the NodeMouseDoubleClick event and how to use the <xref:System.Windows.Forms.TreeNodeMouseClickEventArgs>. To run this example, paste the code into a Windows Form that contains a <xref:System.Windows.Forms.TreeView> named `treeView1`. Populate `treeView1` with the names of files located in the `c:\` directory of the system the sample is running on, and associate the NodeMouseDoubleClick event of `treeView1` with the `treeView1_NodeMouseDoubleClick` method in this example.  This example requires that the user has administrator privileges on the machine running the example.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#5](~/add/codesnippet/cpp/e-system.windows.forms.t_129_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewWhidbeyMembers#5](~/add/codesnippet/csharp/e-system.windows.forms.t_129_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#5](~/add/codesnippet/visualbasic/e-system.windows.forms.t_129_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NodeMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeNodeMouseHoverEventHandler NodeMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeNodeMouseHoverEventHandler NodeMouseHover" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse hovers over a <see cref="T:System.Windows.Forms.TreeNode" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the mouse is located over a <xref:System.Windows.Forms.TreeNode>, the NodeMouseHover event will occur before the <xref:System.Windows.Forms.Control.MouseHover> event.  
  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the NodeMouseHover event. This report helps you learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.TreeView> named `TreeView1`. Then ensure that the event handler is associated with the NodeMouseHover event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#634](~/add/codesnippet/csharp/e-system.windows.forms.t_144_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#634](~/add/codesnippet/visualbasic/e-system.windows.forms.t_144_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Nodes">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNodeCollection Nodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNodeCollection Nodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of tree nodes that are assigned to the tree view control.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeNodeCollection" /> that represents the tree nodes assigned to the tree view control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Nodes property holds a collection of <xref:System.Windows.Forms.TreeNode> objects, each of which has a <xref:System.Windows.Forms.TreeNode.Nodes%2A> property that can contain its own <xref:System.Windows.Forms.TreeNodeCollection>. This nesting of tree nodes can make it difficult to navigate a tree structure, but the <xref:System.Windows.Forms.TreeNode.FullPath%2A> property makes it easier to determine your location within the tree structure.  
  
   
  
## Examples  
 The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_281_1.vb)]
 [!code-cs[TreeView#1](~/add/codesnippet/csharp/p-system.windows.forms.t_281_1.cs)]
 [!code-cpp[TreeView#1](~/add/codesnippet/cpp/p-system.windows.forms.t_281_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAfterCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterCheck (System.Windows.Forms.TreeViewEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterCheck(class System.Windows.Forms.TreeViewEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterCheck" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnAfterCheck method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAfterCollapse">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterCollapse (System.Windows.Forms.TreeViewEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAfterCollapse(class System.Windows.Forms.TreeViewEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterCollapse" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnAfterCollapse method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAfterExpand">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterExpand (System.Windows.Forms.TreeViewEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterExpand(class System.Windows.Forms.TreeViewEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterExpand" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnAfterExpand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.NodeLabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.NodeLabelEditEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.NodeLabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.NodeLabelEditEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterLabelEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnAfterLabelEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAfterSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterSelect (System.Windows.Forms.TreeViewEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterSelect(class System.Windows.Forms.TreeViewEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterSelect" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnAfterSelect method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeCheck (System.Windows.Forms.TreeViewCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeCheck(class System.Windows.Forms.TreeViewCancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeCheck" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnBeforeCheck method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeCollapse">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeCollapse (System.Windows.Forms.TreeViewCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnBeforeCollapse(class System.Windows.Forms.TreeViewCancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeCollapse" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnBeforeCollapse method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeExpand">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeExpand (System.Windows.Forms.TreeViewCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeExpand(class System.Windows.Forms.TreeViewCancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeExpand" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnBeforeExpand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.NodeLabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.NodeLabelEditEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.NodeLabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.NodeLabelEditEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeLabelEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnBeforeLabelEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeSelect (System.Windows.Forms.TreeViewCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeSelect(class System.Windows.Forms.TreeViewCancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeSelect" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnBeforeSelect method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDrawNode">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawNode (System.Windows.Forms.DrawTreeNodeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawNode(class System.Windows.Forms.DrawTreeNodeEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawTreeNodeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DrawTreeNodeEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.DrawNode" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnDrawNode method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Overrides &lt;xref:System.Windows.Forms.Control.OnHandleCreated%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnHandleCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Overrides &lt;xref:System.Windows.Forms.Control.OnHandleDestroyed%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnHandleDestroyed method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.ItemDragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.ItemDrag" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnItemDrag method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> property is set to `true` and the <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> property is set to `false`, the OnKeyDown method switches between selecting and clearing the check box when the user presses the SPACEBAR.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnKeyDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> property is set to `false`, the <xref:System.Windows.Forms.TreeView> control will select the first item that begins with the value of the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property of `e`.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnKeyPress method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <summary>Overrides &lt;xref:System.Windows.Forms.Control.OnKeyUp%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnKeyUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseHover" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnMouseHover method performs a hit test to see whether the mouse is located over a <xref:System.Windows.Forms.TreeNode>, and if it is, raises the <xref:System.Windows.Forms.TreeView.NodeMouseHover> event.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseHover method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnNodeMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnNodeMouseClick (System.Windows.Forms.TreeNodeMouseClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNodeMouseClick(class System.Windows.Forms.TreeNodeMouseClickEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeNodeMouseClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeNodeMouseClickEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.NodeMouseClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnNodeMouseClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnNodeMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnNodeMouseDoubleClick (System.Windows.Forms.TreeNodeMouseClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNodeMouseDoubleClick(class System.Windows.Forms.TreeNodeMouseClickEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeNodeMouseClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.TreeNodeMouseClickEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.NodeMouseDoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnNodeMouseDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnNodeMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnNodeMouseHover (System.Windows.Forms.TreeNodeMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNodeMouseHover(class System.Windows.Forms.TreeNodeMouseHoverEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeNodeMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Forms.TreeNodeMouseHoverEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.NodeMouseHover" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnNodeMouseHover method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TreeView.RightToLeftLayoutChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnRightToLeftLayoutChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the spacing between the <see cref="T:System.Windows.Forms.TreeView" /> control's contents and its edges.</summary>
        <value>A <see cref="T:System.Windows.Forms.Padding" /> indicating the space between the control edges and its contents.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.TreeView.Padding%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Windows.Forms.TreeView" /> is drawn.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PathSeparator">
      <MemberSignature Language="C#" Value="public string PathSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PathSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("\")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the delimiter string that the tree node path uses.</summary>
        <value>The delimiter string that the tree node &lt;xref:System.Windows.Forms.TreeNode.FullPath%2A?displayProperty=fullName&gt; property uses. The default is the backslash character (\\).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The tree node path consists of a set of tree node labels separated by the PathSeparator delimiter strings. The labels range from the root tree node to the tree node that you want.  
  
   
  
## Examples  
 The following code example sets the PathSeparator property of a <xref:System.Windows.Forms.TreeView> and displays the number of child tree nodes that is contained in the <xref:System.Windows.Forms.TreeNodeCollection> of the <xref:System.Windows.Forms.TreeView.SelectedNode%2A>. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button>, and a <xref:System.Windows.Forms.TreeView> control with a <xref:System.Windows.Forms.TreeNodeCollection> that has several <xref:System.Windows.Forms.TreeNode> objects (preferably with three or more levels).  
  
 [!code-cpp[TreeNode_ForeColor#2](~/add/codesnippet/cpp/p-system.windows.forms.t_3_1.cpp)]
 [!code-cs[TreeNode_ForeColor#2](~/add/codesnippet/csharp/p-system.windows.forms.t_3_1.cs)]
 [!code-vb[TreeNode_ForeColor#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Forms.TreeView" /> should be laid out from right-to-left.</summary>
        <value>
          <see langword="true" /> if the control should be laid out from right-to-left; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RightToLeftLayout property is for use with international applications where the language is read from right-to-left. If you set RightToLeftLayout and <xref:System.Windows.Forms.Control.RightToLeft%2A> to `true` the control's contents and text will be laid out from right-to-left.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.TreeView.RightToLeftLayout%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about how to handle events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RightToLeftLayoutChanged event. This report helps you learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.TreeView> named `TreeView1`. Then ensure that the event handler is associated with the RightToLeftLayoutChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#639](~/add/codesnippet/csharp/e-system.windows.forms.t_99_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#639](~/add/codesnippet/visualbasic/e-system.windows.forms.t_99_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the tree view control displays scroll bars when they are needed.</summary>
        <value>
          <see langword="true" /> if the tree view control displays scroll bars when they are needed; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If this property is set to `true`, scroll bars are displayed on the <xref:System.Windows.Forms.TreeView> when any <xref:System.Windows.Forms.TreeNode> is located outside the control's client region.  
  
> [!NOTE]
>  When setting the Scrollable property at run time, the <xref:System.Windows.Forms.TreeView> handle is recreated (see <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=fullName>) to update the control's appearance. This causes all tree nodes to be collapsed, with the exception of the selected <xref:System.Windows.Forms.TreeNode>.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.BorderStyle> enumeration and the <xref:System.Windows.Forms.TreeView.BorderStyle%2A>, <xref:System.Windows.Forms.TreeView.ShowLines%2A>, Scrollable, <xref:System.Windows.Forms.TreeView.HideSelection%2A> and <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> properties. To run this example, paste the following code in a form and call the `InitializeTreeView` method in the form's constructor or `Load` method.  
  
 [!code-cpp[System.Windows.Forms.TreeViewExample#1](~/add/codesnippet/cpp/p-system.windows.forms.t_286_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewExample#1](~/add/codesnippet/csharp/p-system.windows.forms.t_286_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewExample#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_286_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedImageIndex">
      <MemberSignature Language="C#" Value="public int SelectedImageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedImageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.NoneExcludedImageIndexConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the image list index value of the image that is displayed when a tree node is selected.</summary>
        <value>A zero-based index value that represents the position of an <see cref="T:System.Drawing.Image" /> in an <see cref="T:System.Windows.Forms.ImageList" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectedImageIndex value is the index of an <xref:System.Drawing.Image> stored in the <xref:System.Windows.Forms.ImageList> assigned to the <xref:System.Windows.Forms.TreeView.ImageList%2A> property.  
  
> [!NOTE]
>  When setting the SelectedImageIndex property at run time, the <xref:System.Windows.Forms.TreeView> handle is recreated (see <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=fullName>) to update the control's appearance. This causes all tree nodes to be collapsed, except for the selected <xref:System.Windows.Forms.TreeNode>.  
  
   
  
## Examples  
 The following code example creates and assigns an <xref:System.Windows.Forms.ImageList> to a <xref:System.Windows.Forms.TreeView> control and fills the <xref:System.Windows.Forms.TreeView> control with <xref:System.Windows.Forms.TreeNode> objects. The tree nodes are assigned images from the <xref:System.Windows.Forms.ImageList> that are displayed when in a selected or unselected state. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TreeView>, and an <xref:System.Collections.ArrayList> that contains `Customer` objects that each contain `Order` objects. It is also assumed that the `Customer` and `Order` objects are defined.  
  
 [!code-vb[TreeNode_TreeNode#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_221_1.vb)]
 [!code-cpp[TreeNode_TreeNode#1](~/add/codesnippet/cpp/p-system.windows.forms.t_221_1.cpp)]
 [!code-cs[TreeNode_TreeNode#1](~/add/codesnippet/csharp/p-system.windows.forms.t_221_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The index assigned value is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedImageKey">
      <MemberSignature Language="C#" Value="public string SelectedImageKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedImageKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageKeyConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key of the default image shown when a <see cref="T:System.Windows.Forms.TreeNode" /> is in a selected state.</summary>
        <value>The key of the default image shown when a <see cref="T:System.Windows.Forms.TreeNode" /> is in a selected state.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a <xref:System.Windows.Forms.TreeNode> does not have a selected image set, the image specified by the SelectedImageKey property will be shown when the node is not selected.  
  
 The SelectedImageKey and <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> properties are mutually exclusive; if one is set, the other is ignored. If you set the SelectedImageKey property, the <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> property is automatically set to -1. Alternatively, if you set the <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> property, the SelectedImageKey is automatically set to an empty string ("").  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode SelectedNode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode SelectedNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tree node that is currently selected in the tree view control.</summary>
        <value>The <see cref="T:System.Windows.Forms.TreeNode" /> that is currently selected in the tree view control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If no <xref:System.Windows.Forms.TreeNode> is currently selected, the SelectedNode property is `null`.  
  
 When you set this property, the specified node is scrolled into view and any parent nodes are expanded so that the specified node is visible.  
  
 When the parent node or any ancestor node of the selected node is collapsed either programmatically or through user action, the collapsed node becomes the selected node.  
  
   
  
## Examples  
 The following code example sets the <xref:System.Windows.Forms.TreeView.PathSeparator%2A> property of a <xref:System.Windows.Forms.TreeView> and displays the number of child tree nodes that is contained in the <xref:System.Windows.Forms.TreeNodeCollection> of the SelectedNode. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button>, and a <xref:System.Windows.Forms.TreeView> control with a <xref:System.Windows.Forms.TreeNodeCollection> that has several <xref:System.Windows.Forms.TreeNode> objects (preferably with three or more levels).  
  
 [!code-cpp[TreeNode_ForeColor#2](~/add/codesnippet/cpp/p-system.windows.forms.t_258_1.cpp)]
 [!code-cs[TreeNode_ForeColor#2](~/add/codesnippet/csharp/p-system.windows.forms.t_258_1.cs)]
 [!code-vb[TreeNode_ForeColor#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_258_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowLines">
      <MemberSignature Language="C#" Value="public bool ShowLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether lines are drawn between tree nodes in the tree view control.</summary>
        <value>
          <see langword="true" /> if lines are drawn between tree nodes in the tree view control; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If ShowLines is set to `true`, the <xref:System.Windows.Forms.TreeView.FullRowSelect%2A> property is ignored.  
  
   
  
## Examples  
 The following code example illustrates a customized <xref:System.Windows.Forms.TreeView>. By inheriting the <xref:System.Windows.Forms.TreeView> class, this custom version has all the functionality of a typical <xref:System.Windows.Forms.TreeView>. Changing various property values in the constructor provides a unique appearance. Because the <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> property is set to false, the customized control also overrides the <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> method so that nodes can be expanded and collapsed when they are clicked.  
  
 A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  
  
 [!code-vb[TreeViewCustomization#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_257_1.vb)]
 [!code-cpp[TreeViewCustomization#2](~/add/codesnippet/cpp/p-system.windows.forms.t_257_1.cpp)]
 [!code-cs[TreeViewCustomization#2](~/add/codesnippet/csharp/p-system.windows.forms.t_257_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowNodeToolTips">
      <MemberSignature Language="C#" Value="public bool ShowNodeToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowNodeToolTips" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating ToolTips are shown when the mouse pointer hovers over a <see cref="T:System.Windows.Forms.TreeNode" />.</summary>
        <value>
          <see langword="true" /> if ToolTips are shown when the mouse pointer hovers over a <see cref="T:System.Windows.Forms.TreeNode" />; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In order for ToolTips to be visible, you must set the <xref:System.Windows.Forms.TreeNode.ToolTipText%2A> for a <xref:System.Windows.Forms.TreeNode>.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.TreeNode.ToolTipText%2A> and ShowNodeToolTips properties. To run this example, paste the following code into a Windows Form and call `InitializeTreeViewWithToolTips` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler.  
  
 [!code-cs[System.Windows.Forms.TreeViewWhidbeyMembers#7](~/add/codesnippet/csharp/p-system.windows.forms.t_75_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#7](~/add/codesnippet/visualbasic/p-system.windows.forms.t_75_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowPlusMinus">
      <MemberSignature Language="C#" Value="public bool ShowPlusMinus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowPlusMinus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether plus-sign (+) and minus-sign (-) buttons are displayed next to tree nodes that contain child tree nodes.</summary>
        <value>
          <see langword="true" /> if plus sign and minus sign buttons are displayed next to tree nodes that contain child tree nodes; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The plus sign and minus sign buttons appear next to the root tree nodes only if the <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> property value is `true`. If the plus sign and minus sign buttons are not displayed, no visual cue exists to indicate that the tree node contains child tree nodes and is expandable. The user then must double-click a tree node to determine whether it contains child tree nodes, to expand it, or to collapse it.  
  
   
  
## Examples  
 The following code example illustrates a customized <xref:System.Windows.Forms.TreeView>. By inheriting the <xref:System.Windows.Forms.TreeView> class, this custom version has all the functionality of a typical <xref:System.Windows.Forms.TreeView>. Changing various property values in the constructor provides a unique appearance. Because the ShowPlusMinus property is set to false, the customized control also overrides the <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> method so that nodes can be expanded and collapsed when they are clicked.  
  
 A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  
  
 [!code-vb[TreeViewCustomization#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_58_1.vb)]
 [!code-cpp[TreeViewCustomization#2](~/add/codesnippet/cpp/p-system.windows.forms.t_58_1.cpp)]
 [!code-cs[TreeViewCustomization#2](~/add/codesnippet/csharp/p-system.windows.forms.t_58_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowRootLines">
      <MemberSignature Language="C#" Value="public bool ShowRootLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowRootLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether lines are drawn between the tree nodes that are at the root of the tree view.</summary>
        <value>
          <see langword="true" /> if lines are drawn between the tree nodes that are at the root of the tree view; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the ShowRootLines property is `false`, the plus-sign and minus-sign buttons will not appear next to the root tree nodes, and the <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> property will have no effect.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.BorderStyle> enumeration and the <xref:System.Windows.Forms.TreeView.BorderStyle%2A>, <xref:System.Windows.Forms.TreeView.ShowLines%2A>, <xref:System.Windows.Forms.TreeView.Scrollable%2A>, <xref:System.Windows.Forms.TreeView.HideSelection%2A> and ShowRootLines properties. To run this example, paste the following code in a form and call the `InitializeTreeView` method in the form's constructor or `Load` method.  
  
 [!code-cpp[System.Windows.Forms.TreeViewExample#1](~/add/codesnippet/cpp/p-system.windows.forms.t_15_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewExample#1](~/add/codesnippet/csharp/p-system.windows.forms.t_15_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewExample#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sorts the items in <see cref="T:System.Windows.Forms.TreeView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method reapplies the default sort, which is alphabetical by node text, or a custom sort specified by the <xref:System.Windows.Forms.TreeView.TreeViewNodeSorter%2A> property. You can use this method if the text of existing nodes is changed or nodes are moved by the user, and you want to sort the items again.  
  
> [!NOTE]
>  The default sorter uses the <xref:System.Globalization.CompareInfo.Compare%2A> method based on the <xref:System.Windows.Forms.Application.CurrentCulture%2A> specified by the application. This means that <xref:System.Windows.Forms.TreeNode> objects with equal value are kept in the order in which they were added to the <xref:System.Windows.Forms.TreeView> control. This behavior may be different if a custom sort is applied.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the tree nodes in the tree view are sorted.</summary>
        <value>
          <see langword="true" /> if the tree nodes in the tree view are sorted; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When Sorted is set to `true`, the <xref:System.Windows.Forms.TreeNode> objects are sorted in alphabetical order by their <xref:System.Windows.Forms.TreeNode.Text%2A> property values. You should always use <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> to maintain performance when you add a large quantity of items to a sorted <xref:System.Windows.Forms.TreeView>. When the text of an existing node is changed, you must call <xref:System.Windows.Forms.TreeView.Sort%2A> to resort the items.  
  
> [!NOTE]
>  The default sorter uses the <xref:System.Globalization.CompareInfo.Compare%2A> method based on the <xref:System.Windows.Forms.Application.CurrentCulture%2A> specified by the application. This means that <xref:System.Windows.Forms.TreeNode> objects with equal value are kept in the order in which they were added to the <xref:System.Windows.Forms.TreeView> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the image list that is used to indicate the state of the <see cref="T:System.Windows.Forms.TreeView" /> and its nodes.</summary>
        <value>The <see cref="T:System.Windows.Forms.ImageList" /> used for indicating the state of the <see cref="T:System.Windows.Forms.TreeView" /> and its nodes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To indicate the state of a <xref:System.Windows.Forms.TreeNode>, set the StateImageList property and also set the <xref:System.Windows.Forms.TreeNode.StateImageKey%2A> or <xref:System.Windows.Forms.TreeNode.StateImageIndex%2A> property for each <xref:System.Windows.Forms.TreeNode>.  
  
 The state images displayed in the <xref:System.Windows.Forms.TreeView> are 16 x 16 pixels by default. Setting the <xref:System.Windows.Forms.ImageList.ImageSize%2A> property of the StateImageList will have no effect on how the images are displayed. However, the state images are resized according to the system DPI setting when the app.config file contains the following entry:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
  
```  
  
 When the <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> property of a <xref:System.Windows.Forms.TreeView> is set to `true` and the StateImageList property is set, each <xref:System.Windows.Forms.TreeNode> that is contained in the <xref:System.Windows.Forms.TreeView> displays the first and second images from the StateImageList to indicate an unchecked or checked state, respectively. You should set the StateImageList property before you add nodes to the <xref:System.Windows.Forms.TreeView> to prevent state images being shown at design time for nodes that do not have a state image set.  
  
   
  
## Examples  
 The following code example demonstrates the StateImageList property. To run this example, paste the code into a Windows Form and call `InitializeCheckTreeView` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#8](~/add/codesnippet/cpp/p-system.windows.forms.t_165_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewWhidbeyMembers#8](~/add/codesnippet/csharp/p-system.windows.forms.t_165_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#8](~/add/codesnippet/visualbasic/p-system.windows.forms.t_165_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text of the <see cref="T:System.Windows.Forms.TreeView" />.</summary>
        <value>
          <see langword="Null" /> in all cases.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.TreeView.Text%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TopNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode TopNode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode TopNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the first fully-visible tree node in the tree view control.</summary>
        <value>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the first fully-visible tree node in the tree view control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Initially, the TopNode returns the first root tree node, which is located at the top of the <xref:System.Windows.Forms.TreeView>. However, if the user has scrolled the contents, another tree node might be at the top.  
  
> [!NOTE]
>  Setting this property has no effect when the <xref:System.Windows.Forms.TreeView.Scrollable%2A> property value is `false`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.TreeView.BeforeLabelEdit><xref:System.Windows.Forms.TreeView.AfterSelect> and TopNode members. To run this example, paste the following code in a form that contains a `TreeView` control that is named `TreeView1`. Call the `InitializeTreeView` method in the form's constructor or `Load` method.  
  
 [!code-cs[System.Windows.Forms.TreeViewAndPrintPreview#1](~/add/codesnippet/csharp/p-system.windows.forms.t_127_1.cs)]
 [!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#1](~/add/codesnippet/cpp/p-system.windows.forms.t_127_1.cpp)]
 [!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_127_1.vb)]  
[!code-cs[System.Windows.Forms.TreeViewAndPrintPreview#2](~/add/codesnippet/csharp/p-system.windows.forms.t_127_2.cs)]
[!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#2](~/add/codesnippet/cpp/p-system.windows.forms.t_127_2.cpp)]
[!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_127_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a &lt;xref:System.String&gt; containing the name of the <see cref="T:System.ComponentModel.Component" />, if any. This method should not be overridden.</summary>
        <returns>A &lt;xref:System.String&gt; containing the name of the <see cref="T:System.ComponentModel.Component" />, if any, or <see langword="null" /> if the <see cref="T:System.ComponentModel.Component" /> is unnamed.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TreeViewNodeSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer TreeViewNodeSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer TreeViewNodeSorter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the implementation of &lt;xref:System.Collections.IComparer&gt; to perform a custom sort of the <see cref="T:System.Windows.Forms.TreeView" /> nodes.</summary>
        <value>The &lt;xref:System.Collections.IComparer&gt; to perform the custom sort.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The custom sort is applied when the TreeViewNodeSorter is set.  
  
 If a <xref:System.Windows.Forms.TreeNode> label is changed, you can call the <xref:System.Windows.Forms.TreeView.Sort%2A> method to sort the items again with the custom sorter specified by the TreeViewNodeSorter property.  
  
> [!NOTE]
>  The default sorter uses the <xref:System.Globalization.CompareInfo.Compare%2A> method based on the <xref:System.Windows.Forms.Application.CurrentCulture%2A> specified by the application. This means that <xref:System.Windows.Forms.TreeNode> objects with equal value are kept in the order in which they were added to the <xref:System.Windows.Forms.TreeView> control. This behavior may be different if a custom sort is applied.  
  
   
  
## Examples  
 The following code example demonstrates how to use the TreeViewNodeSorter property to sort nodes from smallest to largest. To run this example, paste the following code into a Windows Form and call `InitializeTreeView1` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#1](~/add/codesnippet/cpp/p-system.windows.forms.t_274_1.cpp)]
 [!code-cs[System.Windows.Forms.TreeViewWhidbeyMembers#1](~/add/codesnippet/csharp/p-system.windows.forms.t_274_1.cs)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_274_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VisibleCount">
      <MemberSignature Language="C#" Value="public int VisibleCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisibleCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of tree nodes that can be fully visible in the tree view control.</summary>
        <value>The number of <see cref="T:System.Windows.Forms.TreeNode" /> items that can be fully visible in the <see cref="T:System.Windows.Forms.TreeView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The VisibleCount value can be greater than the number of tree nodes in the tree view. The value is calculated by dividing the height of the client window by the height of a tree node item. The result is the total number of <xref:System.Windows.Forms.TreeNode> objects that the <xref:System.Windows.Forms.TreeView> can display within its current dimensions.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
        <summary>Overrides &lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermissionFlag">for access to unmanaged code when getting the property value. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>