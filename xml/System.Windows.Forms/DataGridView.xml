<Type Name="DataGridView" FullName="System.Windows.Forms.DataGridView">
  <TypeSignature Language="C#" Value="public class DataGridView : System.Windows.Forms.Control, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataGridView extends System.Windows.Forms.Control implements class System.ComponentModel.ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ComplexBindingProperties("DataSource", "DataMember")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("CellContentClick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Displays data in a customizable grid.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataGridView control provides a customizable table for displaying data. The DataGridView class allows customization of cells, rows, columns, and borders through the use of properties such as <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, and <xref:System.Windows.Forms.DataGridView.GridColor%2A>. For more information, see [Basic Formatting and Styling in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 You can use a DataGridView control to display data with or without an underlying data source. Without specifying a data source, you can create columns and rows that contain data and add them directly to the DataGridView using the <xref:System.Windows.Forms.DataGridView.Rows%2A> and <xref:System.Windows.Forms.DataGridView.Columns%2A> properties. You can also use the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection to access <xref:System.Windows.Forms.DataGridViewRow> objects and the <xref:System.Windows.Forms.DataGridViewRow.Cells%2A?displayProperty=fullName> property to read or write cell values directly. The <xref:System.Windows.Forms.DataGridView.Item%2A> indexer also provides direct access to cells.  
  
 As an alternative to populating the control manually, you can set the <xref:System.Windows.Forms.DataGridView.DataSource%2A> and <xref:System.Windows.Forms.DataGridView.DataMember%2A> properties to bind the DataGridView to a data source and automatically populate it with data. For more information, see [Displaying Data in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 When working with very large amounts of data, you can set the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property to `true` to display a subset of the available data. Virtual mode requires the implementation of a data cache from which the DataGridView control is populated. For more information, see [Data Display Modes in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 For additional information about the features available in the DataGridView control, see [DataGridView Control](~/add/includes/ajax-current-ext-md.md). The following table provides direct links to common tasks.  
  
-   [How to: Bind Data to the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/fbk67b6z\(v=vs.110\).aspx)  
  
-   [How to: Add ToolTips to Individual Cells in a Windows Forms DataGridView Control](http://msdn.microsoft.com/library/2249cf0a\(v=vs.110\).aspx)  
  
-   [How to: Set Font and Color Styles in the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/z2akwyy7\(v=vs.110\).aspx)  
  
-   [How to: Change the Type of a Windows Forms DataGridView Column Using the Designer](http://msdn.microsoft.com/library/053656ss\(v=vs.110\).aspx)  
  
-   [How to: Bind Data to the Windows Forms DataGridView Control Using the Designer](http://msdn.microsoft.com/library/33w255ac\(v=vs.110\).aspx)  
  
-   [How to: Set Default Cell Styles and Data Formats for the Windows Forms DataGridView Control Using the Designer](http://msdn.microsoft.com/library/95y5fz2x\(v=vs.110\).aspx)  
  
-   [How to: Format Data in the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/f9x2790s\(v=vs.110\).aspx)  
  
-   [Walkthrough: Validating Data in the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/ykdxa0bc\(v=vs.110\).aspx)  
  
-   [How to: Customize Data Formatting in the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/z1cc356h\(v=vs.110\).aspx)  
  
-   [Walkthrough: Creating a Master/Detail Form Using Two Windows Forms DataGridView Controls](http://msdn.microsoft.com/library/y8c0cxey\(v=vs.110\).aspx)  
  
 Although the DataGridView control replaces and adds functionality to the <xref:System.Windows.Forms.DataGrid> control of previous versions, the <xref:System.Windows.Forms.DataGrid> control is retained for both backward compatibility and future use if you choose. For more information, see [Differences Between the Windows Forms DataGridView and DataGrid Controls](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  The DataGridView control inherits both the <xref:System.Windows.Forms.Control.ContextMenu%2A> and <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> properties from <xref:System.Windows.Forms.Control>, but supports only the <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> property. Using the <xref:System.Windows.Forms.Control.ContextMenu%2A> property with the DataGridView control has no effect.  
  
   
  
## Examples  
 The following code example demonstrates how to initialize an unbound DataGridView control.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSimpleUnbound#00](~/add/codesnippet/csharp/t-system.windows.forms.d_82_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSimpleUnbound#00](~/add/codesnippet/visualbasic/t-system.windows.forms.d_82_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataGridView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridView" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table shows initial property values for an instance of the <xref:System.Windows.Forms.DataGridView> class.  
  
|Property|Initial Value|  
|--------------|-------------------|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToDeleteRows%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToOrderColumns%2A>|`false`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToResizeColumns%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToResizeRows%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A>|<xref:System.Windows.Forms.DataGridViewAutoSizeColumnsMode>|  
|<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>|<xref:System.Windows.Forms.DataGridViewAutoSizeRowsMode>|  
|<xref:System.Windows.Forms.DataGridView.ClipboardCopyMode%2A>|<xref:System.Windows.Forms.DataGridViewClipboardCopyMode>|  
|<xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A>|<xref:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode>|  
|<xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.EditMode%2A>|<xref:System.Windows.Forms.DataGridViewEditMode>|  
|<xref:System.Windows.Forms.DataGridView.MultiSelect%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.ReadOnly%2A>|`false`|  
|<xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A>|<xref:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode>|  
|<xref:System.Windows.Forms.DataGridView.SelectionMode%2A>|<xref:System.Windows.Forms.DataGridViewSelectionMode>|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyCurrentCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void AccessibilityNotifyCurrentCellChanged (System.Drawing.Point cellAddress);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AccessibilityNotifyCurrentCellChanged(valuetype System.Drawing.Point cellAddress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellAddress" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="cellAddress">A <see cref="T:System.Drawing.Point" /> indicating the row and column indexes of the new current cell.</param>
        <summary>Notifies the accessible client applications when a new cell becomes the current cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method converts the specified row and column indexes into `objectID` and `childID` parameters and calls the <xref:System.Windows.Forms.Control.AccessibilityNotifyClients%28System.Windows.Forms.AccessibleEvents%2CSystem.Int32%2CSystem.Int32%29> method overload twice using the <xref:System.Windows.Forms.AccessibleEvents> and <xref:System.Windows.Forms.AccessibleEvents> values of the <xref:System.Windows.Forms.AccessibleEvents> enumeration. The `objectID` and `childID` are determined by numbering only the visible rows and columns in their display order, counting the row or column headers if they are visible, and starting with 1. For example, if column headers are visible, the `objectID` for the first visible nonheader row is 2.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Drawing.Point.X%2A&gt; property of <paramref name="cellAddress" /> is less than 0 or greater than the number of columns in the control minus 1.  
  
 -or-  
  
 The value of the &lt;xref:System.Drawing.Point.Y%2A&gt; property of <paramref name="cellAddress" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AdjustColumnHeaderBorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle (System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewAdvancedBorderStyleInput" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="dataGridViewAdvancedBorderStylePlaceholder" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="isFirstDisplayedColumn" Type="System.Boolean" />
        <Parameter Name="isLastVisibleColumn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataGridViewAdvancedBorderStyleInput">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that that represents the column header border style to modify.</param>
        <param name="dataGridViewAdvancedBorderStylePlaceholder">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that is used to store intermediate changes to the column header border style.</param>
        <param name="isFirstDisplayedColumn">
          <see langword="true" /> to indicate that the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that is currently being painted is in the first column displayed on the <see cref="T:System.Windows.Forms.DataGridView" />; otherwise, <see langword="false" />.</param>
        <param name="isLastVisibleColumn">
          <see langword="true" /> to indicate that the <see cref="T:System.Windows.Forms.DataGridViewCell" /> that is currently being painted is in the last column in the <see cref="T:System.Windows.Forms.DataGridView" /> that has the &lt;xref:System.Windows.Forms.DataGridViewColumn.Visible%2A&gt; property set to <see langword="true" />; otherwise, <see langword="false" />.</param>
        <summary>Adjusts the <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> for a column header cell of a <see cref="T:System.Windows.Forms.DataGridView" /> that is currently being painted.</summary>
        <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style for the current column header.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control internally calls the AdjustColumnHeaderBorderStyle method to determine the appearance of the borders for the column header cells. The <xref:System.Windows.Forms.DataGridView> control typically uses the value of the <xref:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle%2A> property for the `dataGridViewAdvancedBorderStyleInput` parameter.  
  
   
  
## Examples  
 The following code example demonstrates how to override the AdjustColumnHeaderBorderStyle method to customize the borders of the column header cells. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> class.  
  
 [!code-cs[System.Windows.Forms.DataGridViewAdvancedBorderStyle#15](~/add/codesnippet/csharp/7d66cf77-dddc-423c-b30d-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle#15](~/add/codesnippet/visualbasic/7d66cf77-dddc-423c-b30d-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AdjustedTopLeftHeaderBorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the border style for the upper-left cell in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the style of the border of the upper-left cell in the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The upper-left cell is the cell that is shared by the column header row and the row header column. The <xref:System.Windows.Forms.DataGridView> gets the value of this property while painting the upper-left cell.  
  
   
  
## Examples  
 The following code example demonstrates how to override the AdjustedTopLeftHeaderBorderStyle property to customize the borders of the upper-left cell. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> class.  
  
 [!code-cs[System.Windows.Forms.DataGridViewAdvancedBorderStyle#12](~/add/codesnippet/csharp/p-system.windows.forms.d_130_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle#12](~/add/codesnippet/visualbasic/p-system.windows.forms.d_130_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AdvancedCellBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the border style of the cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style of the cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AdvancedCellBorderStyle property to customize the appearance of cells' borders. To change the style of the borders using the built-in styles, use the <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AdvancedColumnHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the border style of the column header cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style of the <see cref="T:System.Windows.Forms.DataGridViewColumnHeaderCell" /> objects in the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AdvancedColumnHeadersBorderStyle property to customize the appearance of column header cells' borders. To change the style of the borders using the built-in styles, use the <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AdvancedRowHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the border style of the row header cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the border style of the <see cref="T:System.Windows.Forms.DataGridViewRowHeaderCell" /> objects in the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the AdvancedRowHeadersBorderStyle property to customize the appearance of row header cells' borders in a derived <xref:System.Windows.Forms.DataGridView> control. To change the style of the borders using the built-in styles, use the <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyle%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToAddRows">
      <MemberSignature Language="C#" Value="public bool AllowUserToAddRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToAddRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the option to add rows is displayed to the user.</summary>
        <value>
          <see langword="true" /> if the add-row option is displayed to the user; otherwise <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.DataGridView> is bound to data, the user is allowed to add rows if both this property and the data source's <xref:System.ComponentModel.IBindingList.AllowNew%2A?displayProperty=fullName> property are set to `true`.  
  
   
  
## Examples  
 The following code example illustrates the use of this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_59_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_59_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToAddRowsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToAddRowsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToAddRowsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AllowUserToAddRowsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the AllowUserToAddRowsChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#250](~/add/codesnippet/csharp/e-system.windows.forms.d_137_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#250](~/add/codesnippet/visualbasic/e-system.windows.forms.d_137_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToDeleteRows">
      <MemberSignature Language="C#" Value="public bool AllowUserToDeleteRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToDeleteRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user is allowed to delete rows from the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>
          <see langword="true" /> if the user can delete rows; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.DataGridView> is bound to data, the user is allowed to delete rows if both this property and the <xref:System.ComponentModel.IBindingList.AllowRemove%2A?displayProperty=fullName> property are set to `true`.  
  
   
  
## Examples  
 The following code example illustrates the use of this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_31_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_31_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToDeleteRowsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToDeleteRowsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToDeleteRowsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the AllowUserToDeleteRowsChanged property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AllowUserToDeleteRowsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the AllowUserToDeleteRowsChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#251](~/add/codesnippet/csharp/e-system.windows.forms.d_87_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#251](~/add/codesnippet/visualbasic/e-system.windows.forms.d_87_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToOrderColumns">
      <MemberSignature Language="C#" Value="public bool AllowUserToOrderColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToOrderColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether manual column repositioning is enabled.</summary>
        <value>
          <see langword="true" /> if the user can change the column order; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When column repositioning is enabled, users can drag a column header to a new position. Note that frozen and unfrozen columns form two separate groups; users can reposition columns within a group, but cannot move a column from one group to the other.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridView> control does not support double buffering. If <xref:System.Windows.Forms.Control.DoubleBuffered%2A> is set to `true` in a derived <xref:System.Windows.Forms.DataGridView> control, users will not receive visual feedback when resizing rows, columns, or headers or when reordering columns.  
  
   
  
## Examples  
 The following code example illustrates the use of this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_140_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_140_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToOrderColumnsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToOrderColumnsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToOrderColumnsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.AllowUserToOrderColumns%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AllowUserToOrderColumnsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the AllowUserToOrderColumnsChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#252](~/add/codesnippet/csharp/e-system.windows.forms.d_96_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#252](~/add/codesnippet/visualbasic/e-system.windows.forms.d_96_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeColumns">
      <MemberSignature Language="C#" Value="public bool AllowUserToResizeColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToResizeColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether users can resize columns.</summary>
        <value>
          <see langword="true" /> if users can resize columns; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to prevent users from manually changing column widths. This is useful, for example, with display-only columns where data is loaded once and columns are resized at that time.  
  
 For more information about user resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridView> control does not support double buffering. If <xref:System.Windows.Forms.Control.DoubleBuffered%2A> is set to `true` in a derived <xref:System.Windows.Forms.DataGridView> control, users will not receive visual feedback when resizing rows, columns, or headers or when reordering columns.  
  
   
  
## Examples  
 The following code example illustrates how to use this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_252_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_252_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeColumnsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToResizeColumnsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToResizeColumnsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.AllowUserToResizeColumns%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AllowUserToResizeColumnsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the AllowUserToResizeColumnsChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#253](~/add/codesnippet/csharp/e-system.windows.forms.d_95_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#253](~/add/codesnippet/visualbasic/e-system.windows.forms.d_95_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeRows">
      <MemberSignature Language="C#" Value="public bool AllowUserToResizeRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToResizeRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether users can resize rows.</summary>
        <value>
          <see langword="true" /> if all the rows are resizable; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to prevent users from manually changing row heights. This is useful, for example, with display-only controls where data is loaded once and rows are resized at that time.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 For more information about user resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridView> control does not support double buffering. If <xref:System.Windows.Forms.Control.DoubleBuffered%2A> is set to `true` in a derived <xref:System.Windows.Forms.DataGridView> control, users will not receive visual feedback when resizing rows, columns, or headers or when reordering columns.  
  
   
  
## Examples  
 The following code example illustrates how to use this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_364_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_364_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeRowsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToResizeRowsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToResizeRowsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.AllowUserToResizeRows%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AllowUserToResizeRowsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the AllowUserToResizeRowsChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#254](~/add/codesnippet/csharp/e-system.windows.forms.d_104_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#254](~/add/codesnippet/visualbasic/e-system.windows.forms.d_104_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternatingRowsDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle AlternatingRowsDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle AlternatingRowsDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default cell style applied to odd-numbered rows of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to apply to the odd-numbered rows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control displays its cells using the styles indicated by the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property, which inherits styles from other properties of type <xref:System.Windows.Forms.DataGridViewCellStyle>. For cells in rows with odd index numbers, the styles specified through the AlternatingRowsDefaultCellStyle property override the styles specified through the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A>, and are overridden by the styles specified through the <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName> properties.  
  
 For more information, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 When getting this property, a <xref:System.Windows.Forms.DataGridViewCellStyle> with default values will be created if the property has not already been accessed. This can cause a performance impact when getting this property for many rows. Whenever possible, use a single <xref:System.Windows.Forms.DataGridViewCellStyle> to set this property for multiple rows. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates how to use this property to create a ledger effect in a <xref:System.Windows.Forms.DataGridView> control. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_109_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_109_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternatingRowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AlternatingRowsDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AlternatingRowsDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when any property of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> property is set to a new value or when the <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AlternatingRowsDefaultCellStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the AlternatingRowsDefaultCellStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#255](~/add/codesnippet/csharp/e-system.windows.forms.d_108_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#255](~/add/codesnippet/visualbasic/e-system.windows.forms.d_108_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AreAllCellsSelected">
      <MemberSignature Language="C#" Value="public bool AreAllCellsSelected (bool includeInvisibleCells);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AreAllCellsSelected(bool includeInvisibleCells) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeInvisibleCells" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeInvisibleCells">
          <see langword="true" /> to include the rows and columns with &lt;xref:System.Windows.Forms.DataGridViewBand.Visible%2A&gt; property values of <see langword="false" />; otherwise, <see langword="false" />.</param>
        <summary>Returns a value indicating whether all the <see cref="T:System.Windows.Forms.DataGridView" /> cells are currently selected.</summary>
        <returns>
          <see langword="true" /> if all cells (or all visible cells) are selected or if there are no cells (or no visible cells); otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> collection does not perform efficiently with large selections. To determine whether all the cells in the <xref:System.Windows.Forms.DataGridView> have been selected before you access the contents of the <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> collection, check the return value of the AreAllCellsSelected method. However, this method can cause rows to become unshared. For more information about <xref:System.Windows.Forms.DataGridView> performance, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates how to use this method to avoid calculations involving the <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> collection.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectedCollections#10](~/add/codesnippet/csharp/m-system.windows.forms.d_53_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectedCollections#10](~/add/codesnippet/visualbasic/m-system.windows.forms.d_53_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateColumns">
      <MemberSignature Language="C#" Value="public bool AutoGenerateColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether columns are created automatically when the &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt; or &lt;xref:System.Windows.Forms.DataGridView.DataMember%2A&gt; properties are set.</summary>
        <value>
          <see langword="true" /> if the columns should be created automatically; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Columns are automatically generated when this property is set to `true` and the <xref:System.Windows.Forms.DataGridView.DataSource%2A> or <xref:System.Windows.Forms.DataGridView.DataMember%2A> properties are set or changed. Columns can also be automatically generated when the AutoGenerateColumns property is changed from `false` to `true`. If this property is `true` and the <xref:System.Windows.Forms.DataGridView.DataSource%2A> changes so there are columns that do not match the columns of the previous <xref:System.Windows.Forms.DataGridView.DataSource%2A> value, data in the unmatched columns is discarded. This property is ignored if the <xref:System.Windows.Forms.DataGridView.DataSource%2A> or <xref:System.Windows.Forms.DataGridView.DataMember%2A> properties are not set.  
  
 When AutoGenerateColumns is set to `true`, the <xref:System.Windows.Forms.DataGridView> control generates one column for each public property of the objects in the data source. If the bound objects implement the <xref:System.ComponentModel.ICustomTypeDescriptor> interface, the control generates one column for each property returned by the <xref:System.ComponentModel.ICustomTypeDescriptor.GetProperties%2A> method. Each column header will contain the value of the property name the column represents.  
  
 If you set the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property but set AutoGenerateColumns to `false`, you must add columns manually. You can bind each added column to the data source by setting the <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=fullName> property to the name of a property exposed by the bound objects.  
  
> [!NOTE]
>  Setting the <xref:System.Windows.Forms.DataGridView.DataSource%2A> in the Windows Forms Designer automatically sets the AutoGenerateColumns property to `false` and generates code to add and bind a column for each property in the data source. The code that is generated at design-time is equivalent to the manually added code shown in the following example. It is not the same as the auto-generation of columns at run-time that occurs when the AutoGenerateColumns property is set to `true`.  
  
   
  
## Examples  
 The following code example demonstrates how to add columns manually and bind them to a data source when you set AutoGenerateColumns to `false`. In this example, a <xref:System.Windows.Forms.DataGridView> control is bound to a list of `Task` business objects. Then, columns are added and are bound to `Task` properties through the <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=fullName> property. This example is part of a larger example available in [How to: Access Objects in a Windows Forms DataGridViewComboBoxCell Drop-Down List](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewComboBoxObjectBinding#100](~/add/codesnippet/csharp/p-system.windows.forms.d_133_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewComboBoxObjectBinding#100](~/add/codesnippet/visualbasic/p-system.windows.forms.d_133_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateColumnsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoGenerateColumnsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoGenerateColumnsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the AutoGenerateColumnsChanged property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AutoGenerateColumnsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the AutoGenerateColumnsChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#256](~/add/codesnippet/csharp/e-system.windows.forms.d_124_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#256](~/add/codesnippet/visualbasic/e-system.windows.forms.d_124_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column to resize.</param>
        <summary>Adjusts the width of the specified column to fit the contents of all its cells, including the header cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when a column resizes. The column width is adjusted only once per method call; if the contents of the column later change, the column will not automatically adjust. To resize all columns, use the <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> method. To set the column to automatically resize whenever its contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> property or the column <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> property.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses this method to make the column width large enough to accommodate a new cell value. This example is part of a larger example available in [How to: Manipulate Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/add/codesnippet/cpp/m-system.windows.forms.d_22_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#211](~/add/codesnippet/csharp/m-system.windows.forms.d_22_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#211](~/add/codesnippet/visualbasic/m-system.windows.forms.d_22_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="autoSizeColumnMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnMode" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column to resize.</param>
        <param name="autoSizeColumnMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> values.</param>
        <summary>Adjusts the width of the specified column using the specified size mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when a column resizes. The column width is adjusted only once per method call; if the contents of the column later change, the column will not automatically adjust. To resize all columns, use the <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> method. To set the column to automatically resize whenever its contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> property or the column <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> property.  
  
 This overload lets you specify a sizing mode that calculates the new width based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses this method to make the column width large enough to accommodate a new cell value. This example is part of a larger example available in [How to: Manipulate Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/add/codesnippet/cpp/30237d51-ba6e-450c-a204-_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#211](~/add/codesnippet/csharp/30237d51-ba6e-450c-a204-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#211](~/add/codesnippet/visualbasic/30237d51-ba6e-450c-a204-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeColumnMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> and &lt;xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A&gt; is <see langword="false" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeColumnMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" />, <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" />, or <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeColumnMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumn (int columnIndex, System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="autoSizeColumnMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnMode" />
        <Parameter Name="fixedHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column to resize.</param>
        <param name="autoSizeColumnMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> values.</param>
        <param name="fixedHeight">
          <see langword="true" /> to calculate the new width based on the current row heights; <see langword="false" /> to calculate the width with the expectation that the row heights will also be adjusted.</param>
        <summary>Adjusts the width of the specified column using the specified size mode, optionally calculating the width with the expectation that row heights will subsequently be adjusted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when a column resizes. The column width is adjusted only once per method call; if the contents of the column later change, the column will not automatically adjust. To resize all columns, use the <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> method. To set the column to automatically resize whenever its contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> property or the column <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> property.  
  
 This overload lets you specify a sizing mode that calculates the new width based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 This overload is protected and is designed to enable you to achieve ideal cell height-to-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If `fixedHeight` is `false`, the column width will be calculated with the expectation that you will call the <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> or <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> method next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeColumnMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> and &lt;xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A&gt; is <see langword="false" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeColumnMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" />, <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" />, or <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeColumnMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="public void AutoResizeColumnHeadersHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumnHeadersHeight() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Adjusts the height of the column headers to fit the contents of the largest column header.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when the column headers resize. The height of the column headers is adjusted only once per method call; if the contents of the column headers later change, the column headers will not automatically adjust. To set the column headers to automatically resize when their contents change, use the <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when the column headers are resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to resize column headers and rows as a result of a button click.  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize#3](~/add/codesnippet/cpp/m-system.windows.forms.d_12_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewAutoSize#3](~/add/codesnippet/csharp/m-system.windows.forms.d_12_1.cs)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#3](~/add/codesnippet/visualbasic/m-system.windows.forms.d_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="public void AutoResizeColumnHeadersHeight (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumnHeadersHeight(int32 columnIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column containing the header with the changed content.</param>
        <summary>Adjusts the height of the column headers based on changes to the contents of the header in the specified column.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when the column headers resize if only the contents of the header in the specified column have changed as a result of user edits or changes to a bound data source. The height of the column headers is adjusted only once per method call if the content change requires it; if the contents of the column headers later change, the column headers will not automatically adjust. To set the column headers to automatically resize when their contents change, use the <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when the column headers are resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumnHeadersHeight (bool fixedRowHeadersWidth, bool fixedColumnsWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedRowHeadersWidth" Type="System.Boolean" />
        <Parameter Name="fixedColumnsWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fixedRowHeadersWidth">
          <see langword="true" /> to calculate the new height based on the current width of the row headers; <see langword="false" /> to calculate the height with the expectation that the row headers width will also be adjusted.</param>
        <param name="fixedColumnsWidth">
          <see langword="true" /> to calculate the new height based on the current column widths; <see langword="false" /> to calculate the height with the expectation that the column widths will also be adjusted.</param>
        <summary>Adjusts the height of the column headers to fit their contents, optionally calculating the height with the expectation that the column and/or row header widths will subsequently be adjusted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when the column headers resize. The height of the column headers is adjusted only once per method call; if the contents of the column headers later change, the column headers will not automatically adjust. To set the column headers to automatically resize when their contents change, use the <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when the column headers are resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 This overload is protected and is designed to enable you to achieve ideal cell height-to-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If the `fixedColumnsWidth` or `fixedRowHeadersWidth` parameters are `false`, the height of the column headers will be calculated with the expectation that you will call the methods such as <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> and <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumnHeadersHeight (int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumnHeadersHeight(int32 columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="fixedRowHeadersWidth" Type="System.Boolean" />
        <Parameter Name="fixedColumnWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column header whose contents should be used to determine new height.</param>
        <param name="fixedRowHeadersWidth">
          <see langword="true" /> to calculate the new height based on the current width of the row headers; <see langword="false" /> to calculate the height with the expectation that the row headers width will also be adjusted.</param>
        <param name="fixedColumnWidth">
          <see langword="true" /> to calculate the new height based on the current width of the specified column; <see langword="false" /> to calculate the height with the expectation that the column width will also be adjusted.</param>
        <summary>Adjusts the height of the column headers based on changes to the contents of the header in the specified column, optionally calculating the height with the expectation that the column and/or row header widths will subsequently be adjusted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when the column headers resize if only the contents of the header in the specified column have changed as a result of user edits or changes to a bound data source. The height of the column headers is adjusted only once per method call if the content change requires it; if the contents of the column headers later change, the column headers will not automatically adjust. To set the column headers to automatically resize when their contents change, use the <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when the column headers are resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 This overload is protected and is designed to enable you to achieve ideal cell height-to-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If the `fixedColumnWidth` or `fixedRowHeadersWidth` parameters are `false`, the height of the column headers will be calculated with the expectation that you will call the methods such as <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> and <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Adjusts the width of all columns to fit the contents of all their cells, including the header cells.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when columns resize. The column widths are adjusted only once per method call; if the contents of the columns later change, the columns will not automatically adjust. To resize a specific column, use the <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> method. To set the columns to automatically resize whenever their contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> property or the column <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> property.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example resizes all columns to fit the contents of the columns and the column headers. This code example is part of a larger example provided in [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/add/codesnippet/csharp/m-system.windows.forms.d_55_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/add/codesnippet/visualbasic/m-system.windows.forms.d_55_1.vb)]
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/add/codesnippet/cpp/m-system.windows.forms.d_55_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeColumnsMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />
      </Parameters>
      <Docs>
        <param name="autoSizeColumnsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> values.</param>
        <summary>Adjusts the width of all columns using the specified size mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when columns resize. The column widths are adjusted only once per method call; if the contents of the columns later change, the columns will not automatically adjust. To resize a specific column, use the <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> method. To set the columns to automatically resize whenever their contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> property or the column <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> property.  
  
 This overload lets you specify a sizing mode that calculates the new widths based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example resizes all columns to fit the contents of the columns and the column headers. This code example is part of a larger example provided in [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/add/codesnippet/csharp/9a7dd6e4-e64a-49db-84d2-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/add/codesnippet/visualbasic/9a7dd6e4-e64a-49db-84d2-_1.vb)]
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/add/codesnippet/cpp/9a7dd6e4-e64a-49db-84d2-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeColumnsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> and &lt;xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A&gt; is <see langword="false" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeColumnsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> or <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeColumnsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumns (System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeColumnsMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />
        <Parameter Name="fixedHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoSizeColumnsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> values.</param>
        <param name="fixedHeight">
          <see langword="true" /> to calculate the new widths based on the current row heights; <see langword="false" /> to calculate the widths with the expectation that the row heights will also be adjusted.</param>
        <summary>Adjusts the width of all columns using the specified size mode, optionally calculating the widths with the expectation that row heights will subsequently be adjusted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when columns resize. The column widths are adjusted only once per method call; if the contents of the columns later change, the columns will not automatically adjust. To resize a specific column, use the <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> method. To set the columns to automatically resize whenever their contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> property or the column <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> property.  
  
 This overload lets you specify a sizing mode that calculates the new widths based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 This overload is protected and is designed to enable you to achieve ideal cell height-to-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If `fixedHeight` is `false`, the column widths will be calculated with the expectation that you will call the <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> or <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> method next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeColumnsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> and &lt;xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A&gt; is <see langword="false" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeColumnsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> or <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeColumnsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRow">
      <MemberSignature Language="C#" Value="public void AutoResizeRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRow(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row to resize.</param>
        <summary>Adjusts the height of the specified row to fit the contents of all its cells including the header cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when a row resizes. The row height is adjusted only once per method call; if the contents of the row later change, the row will not automatically adjust. To resize all rows, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> method. To set the row to automatically resize whenever its contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example resizes the third row in a <xref:System.Windows.Forms.DataGridView> to fit the column contents. This code example is part of a larger example provided in [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/add/codesnippet/csharp/m-system.windows.forms.d_59_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/add/codesnippet/visualbasic/m-system.windows.forms.d_59_1.vb)]
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/add/codesnippet/cpp/m-system.windows.forms.d_59_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRow">
      <MemberSignature Language="C#" Value="public void AutoResizeRow (int rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRow(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row to resize.</param>
        <param name="autoSizeRowMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> values.</param>
        <summary>Adjusts the height of the specified row using the specified size mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when a row resizes. The row height is adjusted only once per method call; if the contents of the row later change, the row will not automatically adjust. To resize all rows, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> method. To set the row to automatically resize whenever its contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 This overload lets you specify a sizing mode that calculates the new height based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example resizes the third row in a <xref:System.Windows.Forms.DataGridView> to fit the column contents. This code example is part of a larger example provided in [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/add/codesnippet/csharp/8c594f4c-8340-4123-9e32-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/add/codesnippet/visualbasic/8c594f4c-8340-4123-9e32-_1.vb)]
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/add/codesnippet/cpp/8c594f4c-8340-4123-9e32-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> and &lt;xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A&gt; is <see langword="false" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> value.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRow">
      <MemberSignature Language="C#" Value="protected void AutoResizeRow (int rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRow(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row to resize.</param>
        <param name="autoSizeRowMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> values.</param>
        <param name="fixedWidth">
          <see langword="true" /> to calculate the new height based on the current width of the columns; <see langword="false" /> to calculate the height with the expectation that the column widths will also be adjusted.</param>
        <summary>Adjusts the height of the specified row using the specified size mode, optionally calculating the height with the expectation that column widths will subsequently be adjusted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when a row resizes. The row height is adjusted only once per method call; if the contents of the row later change, the row will not automatically adjust. To resize all rows, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> method. To set the row to automatically resize whenever its contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 This overload lets you specify a sizing mode that calculates the new height based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 This overload is protected and is designed to enable you to achieve ideal cell height-to-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If `fixedWidth` is `false`, the row height will be calculated with the expectation that you will call the <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> or <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> method next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> and &lt;xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A&gt; is <see langword="false" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> value.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="public void AutoResizeRowHeadersWidth (System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRowHeadersWidth(valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
      </Parameters>
      <Docs>
        <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
        <summary>Adjusts the width of the row headers using the specified size mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when the row headers resize. The width of the row headers is adjusted only once per method call; if the contents of the row headers later change, the row headers will not automatically adjust. To set the row headers to automatically resize when their contents change, use the <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> property.  
  
 This method lets you specify a sizing mode that calculates the new width based on values in a limited set of headers, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> or <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="public void AutoResizeRowHeadersWidth (int rowIndex, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRowHeadersWidth(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row header with the changed content.</param>
        <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
        <summary>Adjusts the width of the row headers based on changes to the contents of the header in the specified row and using the specified size mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when the row headers resize if only the contents of the header in the specified row have changed as a result of user edits or changes to a bound data source. The width of the row headers is adjusted only once per method call if the content change requires it; if the contents of the row headers later change, the row headers will not automatically adjust. To set the row headers to automatically resize when their contents change, use the <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> property.  
  
 This method lets you specify a sizing mode that calculates the new width based on values in a limited set of headers, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates how to resize the row header widths based on changes to the contents of the first row header. This code example is part of a larger example provided in [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ProgrammaticResizing#5](~/add/codesnippet/csharp/eaf9cae1-197b-48b4-8662-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#5](~/add/codesnippet/visualbasic/eaf9cae1-197b-48b4-8662-_1.vb)]
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#5](~/add/codesnippet/cpp/eaf9cae1-197b-48b4-8662-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> or <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="protected void AutoResizeRowHeadersWidth (System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRowHeadersWidth(valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
        <Parameter Name="fixedColumnHeadersHeight" Type="System.Boolean" />
        <Parameter Name="fixedRowsHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
        <param name="fixedColumnHeadersHeight">
          <see langword="true" /> to calculate the new width based on the current height of the column headers; <see langword="false" /> to calculate the width with the expectation that the height of the column headers will also be adjusted.</param>
        <param name="fixedRowsHeight">
          <see langword="true" /> to calculate the new width based on the current row heights; <see langword="false" /> to calculate the width with the expectation that the row heights will also be adjusted.</param>
        <summary>Adjusts the width of the row headers using the specified size mode, optionally calculating the width with the expectation that the row and/or column header widths will subsequently be adjusted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when the row headers resize. The width of the row headers is adjusted only once per method call; if the contents of the row headers later change, the row headers will not automatically adjust. To set the row headers to automatically resize when their contents change, use the <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> property.  
  
 This method lets you specify a sizing mode that calculates the new width based on values in a limited set of headers, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 This overload is protected and is designed to enable you to achieve ideal cell height-to-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If the `fixedColumnHeadersHeight` or `fixedRowsHeight` parameters are `false`, the width of the row headers will be calculated with the expectation that you will call methods such as <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> and <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> or <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="protected void AutoResizeRowHeadersWidth (int rowIndex, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRowHeadersWidth(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
        <Parameter Name="fixedColumnHeadersHeight" Type="System.Boolean" />
        <Parameter Name="fixedRowHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row containing the header with the changed content.</param>
        <param name="rowHeadersWidthSizeMode">One of the <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> values.</param>
        <param name="fixedColumnHeadersHeight">
          <see langword="true" /> to calculate the new width based on the current height of the column headers; <see langword="false" /> to calculate the width with the expectation that the height of the column headers will also be adjusted.</param>
        <param name="fixedRowHeight">
          <see langword="true" /> to calculate the new width based on the current height of the specified row; <see langword="false" /> to calculate the width with the expectation that the row height will also be adjusted.</param>
        <summary>Adjusts the width of the row headers based on changes to the contents of the header in the specified row and using the specified size mode, optionally calculating the width with the expectation that the row and/or column header widths will subsequently be adjusted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when the row headers resize if only the contents of the header in the specified row have changed as a result of user edits or changes to a bound data source. The width of the row headers is adjusted only once per method call if the content change requires it; if the contents of the row headers later change, the row headers will not automatically adjust. To set the row headers to automatically resize when their contents change, use the <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> property.  
  
 This method lets you specify a sizing mode that calculates the new width based on values in a limited set of headers, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 This overload is protected, and is designed to enable you to achieve ideal cell height-to-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If the `fixedColumnHeadersHeight` or `fixedRowHeight` parameters are `false`, the width of the row headers will be calculated with the expectation that you will call methods such as <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> and <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> or <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="public void AutoResizeRows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRows() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Adjusts the heights of all rows to fit the contents of all their cells, including the header cells.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when rows resize. The row heights are adjusted only once per method call; if the contents of the rows later change, the rows will not automatically adjust. To resize a specific row, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> method. To resize a subset of rows, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%28System.Int32%2CSystem.Int32%2CSystem.Windows.Forms.DataGridViewAutoSizeRowMode%2CSystem.Boolean%29> overload. To set the rows to automatically resize whenever their contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to resize all rows based on non-header cell content. This code example is part of a larger example provided in [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/add/codesnippet/csharp/m-system.windows.forms.d_19_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/add/codesnippet/visualbasic/m-system.windows.forms.d_19_1.vb)]
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/add/codesnippet/cpp/m-system.windows.forms.d_19_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="public void AutoResizeRows (System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRows(valuetype System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeRowsMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowsMode" />
      </Parameters>
      <Docs>
        <param name="autoSizeRowsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> values.</param>
        <summary>Adjusts the heights of the rows using the specified size mode value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when rows resize. The row heights are adjusted only once per method call; if the contents of the rows later change, the rows will not automatically adjust. To resize a specific row, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> method. To resize a subset of rows, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%28System.Int32%2CSystem.Int32%2CSystem.Windows.Forms.DataGridViewAutoSizeRowMode%2CSystem.Boolean%29> overload. To set the rows to automatically resize whenever their contents change, use the<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 This overload lets you specify a sizing mode that calculates the new heights based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to resize all rows based on non-header cell content. This code example is part of a larger example provided in [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/add/codesnippet/csharp/27984b43-3d0e-40aa-887c-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/add/codesnippet/visualbasic/27984b43-3d0e-40aa-887c-_1.vb)]
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/add/codesnippet/cpp/27984b43-3d0e-40aa-887c-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> or <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />, and &lt;xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A&gt; is <see langword="false" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeRowsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="protected void AutoResizeRows (System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRows(valuetype System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeRowsMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowsMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoSizeRowsMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> values.</param>
        <param name="fixedWidth">
          <see langword="true" /> to calculate the new heights based on the current column widths; <see langword="false" /> to calculate the heights with the expectation that the column widths will also be adjusted.</param>
        <summary>Adjusts the heights of all rows using the specified size mode, optionally calculating the heights with the expectation that column widths will subsequently be adjusted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when rows resize. The row heights are adjusted only once per method call; if the contents of the rows later change, the rows will not automatically adjust. To resize a specific row, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> method. To resize a subset of rows, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%28System.Int32%2CSystem.Int32%2CSystem.Windows.Forms.DataGridViewAutoSizeRowMode%2CSystem.Boolean%29> overload. To set the rows to automatically resize whenever their contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 This overload lets you specify a sizing mode that calculates the new heights based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 This overload is protected, and is designed to enable you to achieve ideal cell height-to-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If the `fixedWidth` parameter is `false`, the row heights will be calculated with the expectation that you will call the <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> or <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> method next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> or <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />, and &lt;xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A&gt; is <see langword="false" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeRowsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="protected void AutoResizeRows (int rowIndexStart, int rowsCount, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRows(int32 rowIndexStart, int32 rowsCount, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndexStart" Type="System.Int32" />
        <Parameter Name="rowsCount" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndexStart">The index of the first row to resize.</param>
        <param name="rowsCount">The number of rows to resize.</param>
        <param name="autoSizeRowMode">One of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> values.</param>
        <param name="fixedWidth">
          <see langword="true" /> to calculate the new heights based on the current column widths; <see langword="false" /> to calculate the heights with the expectation that the column widths will also be adjusted.</param>
        <summary>Adjusts the heights of the specified rows using the specified size mode, optionally calculating the heights with the expectation that column widths will subsequently be adjusted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful if you want to control when rows resize, but you want to resize only a specific subset of rows, such as those within a range of bound records that have been updated. The row heights for the specified rows are adjusted only once per method call; if the contents of the rows later change, the rows will not automatically adjust. To resize a specific row, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> method. To resize all rows, use a different overload of the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> method. To set the rows to automatically resize whenever their contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 This overload lets you specify a sizing mode that calculates the new heights based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 This overload is protected and is designed to enable you to achieve ideal cell height-to-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If the `fixedWidth` parameter is `false`, the row heights will be calculated with the expectation that you will call the <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> or <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> method next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> or <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />, and &lt;xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A&gt; is <see langword="false" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowsMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeRowsMode" /> has the value <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndexStart" /> is less than 0.  
  
 -or-  
  
 <paramref name="rowsCount" /> is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public override bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is not relevant for this class.</summary>
        <value>
          <see langword="true" /> if enabled; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeColumnModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A&gt; property of a column changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates the use of this event. This example is part of a larger example available in [How to: Manipulate Columns in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#180](~/add/codesnippet/cpp/e-system.windows.forms.d_142_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#180](~/add/codesnippet/visualbasic/e-system.windows.forms.d_142_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#180](~/add/codesnippet/csharp/e-system.windows.forms.d_142_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeColumnsMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeColumnsMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating how column widths are determined.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value. The default is <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property lets you configure the control so that column widths are automatically adjusted either to fill the control or to fit cell contents. Size adjustments occur in fill mode whenever the width of the control changes. In content-based sizing modes, size adjustments occur whenever cell contents change or, if <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> is enabled, whenever row heights change. Some content-based sizing modes let you limit the size adjustment to the currently displayed rows in order to increase performance.  
  
 To change the sizing mode for an individual column, set its <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> property. The default value of this property is <xref:System.Windows.Forms.DataGridViewAutoSizeColumnMode>, indicating that the column inherits its behavior and its <xref:System.Windows.Forms.DataGridViewColumn.InheritedAutoSizeMode%2A> property value from the control.  
  
 Columns in fill mode divide the available control width in proportions indicated by their <xref:System.Windows.Forms.DataGridViewColumn.FillWeight%2A> property values. The width available for fill mode is determined by subtracting the widths of all other columns from the width of the client area of the control. If this width is smaller than the combined <xref:System.Windows.Forms.DataGridViewColumn.MinimumWidth%2A> values of all fill-mode columns, the horizontal scroll bar is displayed, all fill-mode columns are shown with their minimum widths, and user column-resizing is disabled. For more information about column fill mode, see [Column Fill Mode in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 Only columns with a <xref:System.Windows.Forms.DataGridViewColumn.Visible%2A> property value of `true` are resized automatically, and changing the visibility of a column does not cause resizing to occur. Additionally, when columns are set to automatically resize, the user cannot adjust the column widths with the mouse.  
  
 To adjust column widths programmatically, use the <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> or <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> methods or set the column <xref:System.Windows.Forms.DataGridViewColumn.Width%2A> property.  
  
 For more information about content-based automatic sizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates how to use this property in a master/detail scenario where two <xref:System.Windows.Forms.DataGridView> controls display data from two tables in a parent/child relationship. In this example, the column sizing mode for the master control is <xref:System.Windows.Forms.DataGridViewAutoSizeColumnsMode>, and the column widths are programmatically initialized to fit the loaded values. The details control is set to an automatic column sizing mode so that columns will adjust automatically whenever the values change (for example, when the user changes the current row in the parent table). This example is part of a larger example available in [How to: Create a Master/Detail Form Using Two Windows Forms DataGridView Controls](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewMasterDetails#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_171_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewMasterDetails#10](~/add/codesnippet/csharp/p-system.windows.forms.d_171_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />, column headers are hidden, and at least one visible column has an &lt;xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A&gt; property value of <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" />.  
  
 -or-  
  
 The specified value when setting this property is <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> and at least one visible column with an &lt;xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A&gt; property value of <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> is frozen.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeColumnsModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AutoSizeColumnsModeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the AutoSizeColumnsModeChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#257](~/add/codesnippet/csharp/e-system.windows.forms.d_68_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#257](~/add/codesnippet/visualbasic/e-system.windows.forms.d_68_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeRowsMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAutoSizeRowsMode AutoSizeRowsMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewAutoSizeRowsMode AutoSizeRowsMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeRowsMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating how row heights are determined.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value indicating the sizing mode. The default is <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property lets you configure the control so that row heights are automatically adjusted to fit their contents whenever the contents change. If <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> is enabled, row heights are also adjusted whenever column widths change. Some sizing modes let you limit the size adjustment to the currently displayed rows in order to increase performance.  
  
 Only rows with a <xref:System.Windows.Forms.DataGridViewRow.Visible%2A> property value of `true` are resized automatically, and changing the visibility of a row does not cause resizing to occur. Additionally, when rows are set to automatically resize, the user cannot adjust the row heights with the mouse.  
  
 The <xref:System.Windows.Forms.DataGridViewRow.Height%2A> value of an automatically sized row is recalculated during layout to account for the size of the font that is used. To get the correct <xref:System.Windows.Forms.DataGridViewRow.Height%2A>, you should retrieve the value in the form's <xref:System.Windows.Forms.Control.Layout> event instead of in the form's constructor.  
  
 To adjust row heights programmatically, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> or <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> methods, or set the row <xref:System.Windows.Forms.DataGridViewRow.Height%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 For more information about content-based automatic sizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to set the row to automatically resize based on the contents of the row headers and all of the columns. This code example is part of a larger example provided in [How to: Automatically Resize Cells When Content Changes in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.AutoSizing#9](~/add/codesnippet/csharp/p-system.windows.forms.d_150_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView.AutoSizing#9](~/add/codesnippet/cpp/p-system.windows.forms.d_150_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.AutoSizing#9](~/add/codesnippet/visualbasic/p-system.windows.forms.d_150_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> or <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> and row headers are hidden.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeRowsModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates the use of this event. This example is part of a larger example available in [How to: Automatically Resize Cells When Content Changes in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.AutoSizing#10](~/add/codesnippet/csharp/e-system.windows.forms.d_126_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView.AutoSizing#10](~/add/codesnippet/cpp/e-system.windows.forms.d_126_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.AutoSizing#10](~/add/codesnippet/visualbasic/e-system.windows.forms.d_126_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color for the control.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the background color of the control. The default is the value of the &lt;xref:System.Windows.Forms.Control.DefaultBackColor%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not relevant to this control. To set the background color of the portion of the <xref:System.Windows.Forms.DataGridView> control not occupied by cells, use the <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.BackColor%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BackColorChanged event is raised if the <xref:System.Windows.Forms.DataGridView.BackColor%2A> property is changed programmatically or by user interaction.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the background color of the <see cref="T:System.Windows.Forms.DataGridView" />. The default is &lt;xref:System.Drawing.SystemColors.AppWorkspace%2A?displayProperty=fullName&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BackgroundColor property determines the color of the area of the <xref:System.Windows.Forms.DataGridView> that is not filled with cells.  
  
   
  
## Examples  
 The following code example demonstrates how to set the BackgroundColor property. In addition, the code example demonstrates how to set the <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> properties. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_185_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/cpp/p-system.windows.forms.d_185_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/csharp/p-system.windows.forms.d_185_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Drawing.Color.Empty" />.  
  
 -or-  
  
 The specified value when setting this property has a &lt;xref:System.Drawing.Color.A%2A?displayProperty=fullName&gt; property value that is less that 255.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.BackgroundColor%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BackgroundColorChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the BackgroundColorChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#259](~/add/codesnippet/csharp/e-system.windows.forms.d_19_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#259](~/add/codesnippet/visualbasic/e-system.windows.forms.d_19_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background image displayed in the control.</summary>
        <value>An <see cref="T:System.Drawing.Image" /> that represents the image to display in the background of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not relevant for this control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.BackgroundImage%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout" /> enumeration.</summary>
        <value>An <see cref="T:System.Windows.Forms.ImageLayout" /> value indicating the background image layout. The default is <see cref="T:System.Windows.Forms.ImageLayout" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not relevant for this control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.BackgroundImageLayout%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although this event occurs as described, the <xref:System.Windows.Forms.DataGridView.BackgroundImageLayout%2A> property is not relevant for this control.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public virtual bool BeginEdit (bool selectAll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BeginEdit(bool selectAll) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectAll">
          <see langword="true" /> to select all the cell's contents; <see langword="false" /> to not select any contents.</param>
        <summary>Puts the current cell in edit mode.</summary>
        <returns>
          <see langword="true" /> if the current cell is already in edit mode or successfully enters edit mode; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns `false` if the cell fails to enter edit mode, which can happen for a number of reasons. This method returns `false` if the current cell is read-only. It also returns `false` if the cell <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> property is `null` (meaning the cell cannot host an editing control) and the cell type does not implement the <xref:System.Windows.Forms.IDataGridViewEditingCell> interface.  
  
 If the cell supports editing, this method raises the <xref:System.Windows.Forms.DataGridView.CellBeginEdit> event, which can be canceled, and returns `false` if an event handler cancels the edit. If the edit is not canceled and the cell can host an editing control, this method initializes the control and displays it. If the initialization fails, this method returns `false`.  
  
 If the cell successfully enters edit mode, the <xref:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode%2A> property returns `true`.  
  
   
  
## Examples  
 The following code example demonstrates the use of this method.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc2#10](~/add/codesnippet/csharp/m-system.windows.forms.d_17_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#10](~/add/codesnippet/visualbasic/m-system.windows.forms.d_17_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">&lt;xref:System.Windows.Forms.DataGridView.CurrentCell%2A&gt; is not set to a valid cell.  
  
 -or-  
  
 This method was called in a handler for the <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> event.</exception>
        <exception cref="T:System.InvalidCastException">The type indicated by the cell's &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property does not derive from the <see cref="T:System.Windows.Forms.Control" /> type.  
  
 -or-  
  
 The type indicated by the cell's &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property does not implement the <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> interface.</exception>
        <exception cref="T:System.Exception">Initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border style for the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.BorderStyle" /> values. The default is <see cref="T:System.Windows.Forms.BorderStyle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property affects the outer border of the <xref:System.Windows.Forms.DataGridView>. To set the style of the cell borders, use the <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates how to initialize a simple data-bound <xref:System.Windows.Forms.DataGridView>. It also demonstrates how to set the BorderStyle property.  
  
 [!code-cs[System.Windows.Forms.GridViewSimpleBound#1](~/add/codesnippet/csharp/p-system.windows.forms.d_383_1.cs)]
 [!code-vb[System.Windows.Forms.GridViewSimpleBound#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_383_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewSimpleBound#1](~/add/codesnippet/cpp/p-system.windows.forms.d_383_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.BorderStyle" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BorderStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.BorderStyle%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BorderStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the BorderStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#260](~/add/codesnippet/csharp/e-system.windows.forms.d_56_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#260](~/add/codesnippet/visualbasic/e-system.windows.forms.d_56_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CancelEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels edit mode for the currently selected cell and discards any changes.</summary>
        <returns>
          <see langword="true" /> if the cancel was successful; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of this method. This example is part of a larger example available in [Column Fill Mode in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewFillColumnsDemo#20](~/add/codesnippet/csharp/m-system.windows.forms.d_41_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewFillColumnsDemo#20](~/add/codesnippet/visualbasic/m-system.windows.forms.d_41_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelRowEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QuestionEventHandler CancelRowEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QuestionEventHandler CancelRowEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QuestionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.VirtualMode%2A&gt; property of a <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and the cancels edits in a row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Windows.Forms.DataGridView> is in virtual mode, changes are committed to the data cache at the cell level by default. The CancelRowEdit event can be used when implementing row-level transactions.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to handle this event for a <xref:System.Windows.Forms.DataGridView> control in virtual mode. When the control is in edit mode, the `rowInEdit` variable holds the index of the row being edited, and the `customerInEdit` variable holds a reference to a Customer object corresponding to that row. When the user cancels out of edit mode, this object can be discarded. If the row the user was editing is the row for new records, however, the old Customer object is discarded and replaced with a new one so that the user can begin making edits again. This example is part of a larger example available in [Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.VirtualMode#170](~/add/codesnippet/cpp/e-system.windows.forms.d_165_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.VirtualMode#170](~/add/codesnippet/visualbasic/e-system.windows.forms.d_165_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.VirtualMode#170](~/add/codesnippet/csharp/e-system.windows.forms.d_165_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected override bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt; property can be set to an active value, to enable IME support.</summary>
        <value>
          <see langword="true" /> if there is an editable cell selected; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellBeginEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellCancelEventHandler CellBeginEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellCancelEventHandler CellBeginEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when edit mode starts for the selected cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to handle this event to reflect that the current <xref:System.Windows.Forms.DataGridViewCell> is being edited. In this example, the <xref:System.Windows.Forms.Control.Text%2A> property of the containing <xref:System.Windows.Forms.Form> is set to reflect which cell is being edited. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and ensure all events are associated with their event handlers.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#220](~/add/codesnippet/csharp/e-system.windows.forms.d_120_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#220](~/add/codesnippet/visualbasic/e-system.windows.forms.d_120_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellBorderStyle CellBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewCellBorderStyle CellBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the cell border style for the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" /> that represents the border style of the cells contained in the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the CellBorderStyle property is set to anything other than <xref:System.Windows.Forms.DataGridViewCellBorderStyle>, <xref:System.Windows.Forms.DataGridViewCellBorderStyle>, or <xref:System.Windows.Forms.DataGridViewCellBorderStyle>, the <xref:System.Windows.Forms.DataGridView.GridColor%2A> property must be a system color.  
  
 You cannot set this property to the <xref:System.Windows.Forms.DataGridViewCellBorderStyle> value, which is a read-only value indicating that the cell border style has been customized through the use of the <xref:System.Windows.Forms.DataGridView.AdvancedCellBorderStyle%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates how to use the CellBorderStyle property. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_28_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/cpp/p-system.windows.forms.d_28_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/csharp/p-system.windows.forms.d_28_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" /> value.</exception>
        <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellBorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CellBorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CellBorderStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the border style of a cell changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellBorderStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellBorderStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#261](~/add/codesnippet/csharp/e-system.windows.forms.d_106_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#261](~/add/codesnippet/visualbasic/e-system.windows.forms.d_106_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any part of a cell is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when any part of a cell is clicked, including borders and padding. It also occurs when the user presses and releases the SPACE key while a button cell or check box cell has focus, and will occur twice for these cell types if the cell is clicked while pressing the SPACE key.  
  
 To determine when the cell contents are clicked, handle the <xref:System.Windows.Forms.DataGridView.CellContentClick> event.  
  
 This event does not receive information about the mouse position. If the event handler needs information about the mouse position, use the <xref:System.Windows.Forms.DataGridView.CellMouseClick> event.  
  
 For clicks in a <xref:System.Windows.Forms.DataGridViewCheckBoxCell>, this event occurs before the check box changes value, so if you do not want to calculate the expected value based on the current value, you will typically handle the <xref:System.Windows.Forms.DataGridView.CellValueChanged?displayProperty=fullName> event instead. Because that event occurs only when the user-specified value is committed, which typically occurs when focus leaves the cell, you must also handle the <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged?displayProperty=fullName> event. In that handler, if the current cell is a check box cell, call the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A?displayProperty=fullName> method and pass in the <xref:System.Windows.Forms.DataGridViewDataErrorContexts> value.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example shows a CellClick event handler in a Tic-Tac-Toe game implementation that uses image columns in a <xref:System.Windows.Forms.DataGridView> control. Unless the game is over or the cell has already been clicked, the event handler sets the cell value to one of two <xref:System.Drawing.Bitmap> objects represented by the variables `x` and `o`.  
  
 This code is part of a larger example shown in [How to: Work with Image Columns in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#10](~/add/codesnippet/csharp/e-system.windows.forms.d_65_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#10](~/add/codesnippet/cpp/e-system.windows.forms.d_65_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#10](~/add/codesnippet/visualbasic/e-system.windows.forms.d_65_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellContentClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellContentClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellContentClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the content within a cell is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when the cell content is clicked. It also occurs when the user presses and releases the SPACEBAR while a button cell or check box cell has focus, and will occur twice for these cell types if the cell content is clicked while pressing the SPACEBAR.  
  
 Use this event to detect button clicks for a <xref:System.Windows.Forms.DataGridViewButtonCell> or link clicks for a <xref:System.Windows.Forms.DataGridViewLinkCell>.  
  
 For clicks in a <xref:System.Windows.Forms.DataGridViewCheckBoxCell>, this event occurs before the check box changes value, so if you do not want to calculate the expected value based on the current value, you will typically handle the <xref:System.Windows.Forms.DataGridView.CellValueChanged?displayProperty=fullName> event instead. Because that event occurs only when the user-specified value is committed, which typically occurs when focus leaves the cell, you must also handle the <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged?displayProperty=fullName> event. In that handler, if the current cell is a check box cell, call the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A?displayProperty=fullName> method and pass in the <xref:System.Windows.Forms.DataGridViewDataErrorContexts> value.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example provides a handler for this event that determines whether the clicked cell is a link cell or a button cell and performs the corresponding action as a result. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewComboBoxColumn> class overview topic.  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#60](~/add/codesnippet/cpp/e-system.windows.forms.d_23_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#60](~/add/codesnippet/csharp/e-system.windows.forms.d_23_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#60](~/add/codesnippet/visualbasic/e-system.windows.forms.d_23_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellContentDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellContentDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellContentDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user double-clicks a cell's contents.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellContentDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellContentDoubleClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#285](~/add/codesnippet/csharp/e-system.windows.forms.d_76_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#285](~/add/codesnippet/visualbasic/e-system.windows.forms.d_76_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellContextMenuStripChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellContextMenuStripChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellContextMenuStripChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#286](~/add/codesnippet/csharp/e-system.windows.forms.d_40_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#286](~/add/codesnippet/visualbasic/e-system.windows.forms.d_40_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell's shortcut menu is needed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CellContextMenuStripNeeded event occurs only when the <xref:System.Windows.Forms.DataGridView> control <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is set or its <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is `true`.  
  
 When you handle the CellContextMenuStripNeeded event, the shortcut menu that you specify in the handler is shown whenever the user right-clicks a cell. This is useful when you want to display a shortcut menu determined by the current state or value of a cell.  
  
 The CellContextMenuStripNeeded event also occurs whenever the value of the <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A?displayProperty=fullName> property is retrieved, either programmatically or when the user right-clicks a cell.  
  
 You can use the <xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A?displayProperty=fullName>and <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A> properties to determine the state or value of a cell, and use this information to change or modify the <xref:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip%2A?displayProperty=fullName> property. This property is initialized with the value of the cell <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> property, which the event value overrides.  
  
 Handle the CellContextMenuStripNeeded event when working with large amounts of data to avoid the performance penalties of setting the cell <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> value for multiple cells. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 You can also specify shortcut menus for individual rows rather than individual cells by setting the row <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> property or handling the <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> event. The cell <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> property setting overrides the row <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> property setting, and the CellContextMenuStripNeeded event overrides both the <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> event and the row <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> property setting. However, you can specify `null` for a cell shortcut menu to prevent a row shortcut menu from being overridden.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use aCellContextMenuStripNeeded event handler to display a custom shortcut menu used when the user right-clicks a cell.  
  
 [!code-cs[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/add/codesnippet/csharp/e-system.windows.forms.d_46_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/add/codesnippet/cpp/e-system.windows.forms.d_46_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/add/codesnippet/visualbasic/e-system.windows.forms.d_46_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user double-clicks anywhere in a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellDoubleClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#288](~/add/codesnippet/csharp/e-system.windows.forms.d_154_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#288](~/add/codesnippet/visualbasic/e-system.windows.forms.d_154_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellEndEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellEndEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellEndEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when edit mode stops for the currently selected cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to handle this event to clear the row <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A?displayProperty=fullName> property in case it was previously set by a <xref:System.Windows.Forms.DataGridView.CellValidating> event handler. The <xref:System.Windows.Forms.DataGridView.CellValidating> event handler can clear the error text when the new cell value meets the validation criteria, but when the user reverts to the old cell value by pressing ESC, the <xref:System.Windows.Forms.DataGridView.CellValidating> event does not occur. This example is part of a larger example available in [Walkthrough: Validating Data in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewDataValidation#20](~/add/codesnippet/visualbasic/e-system.windows.forms.d_130_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewDataValidation#20](~/add/codesnippet/csharp/e-system.windows.forms.d_130_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the current cell changes in the <see cref="T:System.Windows.Forms.DataGridView" /> control or when the control receives input focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event may occur twice for a single click if the control does not have input focus and the clicked cell was not previously the current cell.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to handle this event to change the <xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A> property of the current cell. In this example the selection background color is set in the CellEnter event, then reset to <xref:System.Drawing.Color.Empty> on the <xref:System.Windows.Forms.DataGridView.CellLeave> event. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and ensure that all events are associated with their event handlers.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#190](~/add/codesnippet/csharp/e-system.windows.forms.d_138_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#190](~/add/codesnippet/visualbasic/e-system.windows.forms.d_138_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellErrorTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellErrorTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellErrorTextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A&gt; property of a cell changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellErrorTextChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellErrorTextChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#291](~/add/codesnippet/csharp/e-system.windows.forms.d_90_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#291](~/add/codesnippet/visualbasic/e-system.windows.forms.d_90_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellErrorTextNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell's error text is needed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CellErrorTextNeeded event occurs only when the <xref:System.Windows.Forms.DataGridView> control <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is set or its <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is `true`. Handling the CellErrorTextNeeded event is useful when you want to determine the error for a cell depending on its value or state.  
  
 When you handle the CellErrorTextNeeded event and specify error text in the handler, an error glyph appears in the cell unless the <xref:System.Windows.Forms.DataGridView.ShowCellErrors%2A> property is set to `false` or the cell is in edit mode. When the user moves the mouse pointer over the error glyph, the error text appears in a ToolTip.  
  
 The CellErrorTextNeeded event also occurs whenever the value of the <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A?displayProperty=fullName> property is retrieved.  
  
 You can use the <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A> property to determine the state or value of a cell, and use this information to change or modify the <xref:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs.ErrorText%2A?displayProperty=fullName> property. This property is initialized with the value of the cell <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> property, which the event value overrides.  
  
 Handle the CellErrorTextNeeded event when working with large amounts of data to avoid the performance penalties of setting the cell <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> value for multiple cells. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to create error messages for cells without unsharing rows or causing the cell error to be duplicated over all the shared cells.  
  
 [!code-cs[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/add/codesnippet/csharp/e-system.windows.forms.d_166_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/add/codesnippet/cpp/e-system.windows.forms.d_166_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/add/codesnippet/visualbasic/e-system.windows.forms.d_166_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellFormatting">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellFormattingEventHandler CellFormatting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellFormattingEventHandler CellFormatting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellFormattingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the contents of a cell need to be formatted for display.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the <xref:System.Windows.Forms.DataGridView> control will attempt to convert a cell's value into a format suitable for display. For example, it will convert a numerical value into a string for display in a text box cell. You can indicate the formatting convention to use by setting the <xref:System.Windows.Forms.DataGridViewCellStyle.Format%2A> property of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by properties such as the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property.  
  
 If the standard formatting is insufficient, you can customize the formatting by handling the CellFormattingevent. This event lets you indicate the exact display value as well as the cell styles, such as background and foreground color, to use for the cell display. This means you can handle this event for any kind of cell formatting, regardless of whether the cell value itself needs formatting.  
  
 The CellFormatting event occurs every time each cell is painted, so you should avoid lengthy processing when handling this event. This event also occurs when the cell <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> is retrieved or its <xref:System.Windows.Forms.DataGridViewCell.GetFormattedValue%2A> method is called.  
  
 When you handle the CellFormatting event, the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> property is initialized with the cell value. If you provide custom conversion from the cell value to the display value, set the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> property to the converted value, ensuring that the new value is of the type specified by the cell <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> property. To indicate that no further value formatting is necessary, set the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=fullName> property to `true`.  
  
 When the event handler completes, if the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> is `null` or is not of the correct type, or the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=fullName> property is `false`, the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> is formatted using the <xref:System.Windows.Forms.DataGridViewCellStyle.Format%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>, and <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> properties of the cell style returned by the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle%2A?displayProperty=fullName> property, which is initialized using the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property.  
  
 Regardless of the value of the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=fullName> property, the display properties of the object returned by the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle%2A?displayProperty=fullName> property are used to render the cell.  
  
 For more information about custom formatting using the CellFormatting event, see [How to: Customize Data Formatting in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 To avoid performance penalties when handling this event, access the cell through the parameters of the event handler rather than accessing the cell directly.  
  
 To customize the conversion of a formatted, user-specified value into an actual cell value, handle the <xref:System.Windows.Forms.DataGridView.CellParsing> event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example shows how to handle the CellFormatting event.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#1](~/add/codesnippet/visualbasic/e-system.windows.forms.d_125_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#1](~/add/codesnippet/cpp/e-system.windows.forms.d_125_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#1](~/add/codesnippet/csharp/e-system.windows.forms.d_125_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell loses input focus and is no longer the current cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to handle this event to change the <xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A> property of the current cell. In this example the selection background color is set in the <xref:System.Windows.Forms.DataGridView.CellEnter> event, then reset to <xref:System.Drawing.Color.Empty> on the CellLeave event. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and ensure that all events are associated with their event handlers.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#190](~/add/codesnippet/csharp/e-system.windows.forms.d_127_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#190](~/add/codesnippet/visualbasic/e-system.windows.forms.d_127_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs whenever the user clicks anywhere on a cell with the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when the user clicks using any of the mouse buttons. Use the <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=fullName> property to determine which button was clicked.  
  
 To detect clicks on the contents of a cell, such as a button or link within a cell, use the <xref:System.Windows.Forms.DataGridView.CellContentClick> event.  
  
 The handler for this event receives the column index and row index of the mouse pointer position.  
  
 For clicks in a <xref:System.Windows.Forms.DataGridViewCheckBoxCell>, this event occurs before the check box changes value, so if you do not want to calculate the expected value based on the current value, you will typically handle the <xref:System.Windows.Forms.DataGridView.CellValueChanged> event instead. Because that event occurs only when the user-specified value is committed, which typically occurs when focus leaves the cell, you must also handle the <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> event. In that handler, if the current cell is a check box cell, call the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> method and pass in the <xref:System.Windows.Forms.DataGridViewDataErrorContexts> value.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellMouseClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellMouseClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#295](~/add/codesnippet/csharp/e-system.windows.forms.d_97_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#295](~/add/codesnippet/visualbasic/e-system.windows.forms.d_97_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell within the <see cref="T:System.Windows.Forms.DataGridView" /> is double-clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when the user double-clicks using any of the mouse buttons. Use the <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=fullName> property to determine which button was clicked.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellMouseDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellMouseDoubleClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#296](~/add/codesnippet/csharp/e-system.windows.forms.d_143_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#296](~/add/codesnippet/visualbasic/e-system.windows.forms.d_143_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user presses a mouse button while the mouse pointer is within the boundaries of a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when the user presses any of the mouse buttons. Use the <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=fullName> property to determine which button was clicked.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellMouseDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellMouseDown event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#297](~/add/codesnippet/csharp/e-system.windows.forms.d_149_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#297](~/add/codesnippet/visualbasic/e-system.windows.forms.d_149_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellMouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellMouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellMouseEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer enters a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example shows a CellMouseEnter event handler in a Tic-Tac-Toe game implementation that uses image columns in a <xref:System.Windows.Forms.DataGridView> control. The event handler uses the cell value to determine the cursor and ToolTip to display.  
  
 This code is part of a larger example shown in [How to: Work with Image Columns in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/add/codesnippet/csharp/e-system.windows.forms.d_160_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/add/codesnippet/cpp/e-system.windows.forms.d_160_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/add/codesnippet/visualbasic/e-system.windows.forms.d_160_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellMouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellMouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellMouseLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer leaves a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example shows a CellMouseLeave event handler in a Tic-Tac-Toe game implementation that uses image columns in a <xref:System.Windows.Forms.DataGridView> control. The event handler resets the cursor and ToolTip, which are set in a <xref:System.Windows.Forms.DataGridView.CellMouseEnter> event handler.  
  
 This code is part of a larger example shown in [How to: Work with Image Columns in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/add/codesnippet/csharp/e-system.windows.forms.d_135_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/add/codesnippet/cpp/e-system.windows.forms.d_135_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/add/codesnippet/visualbasic/e-system.windows.forms.d_135_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseMove" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer moves over the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellMouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellMouseMove event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#300](~/add/codesnippet/csharp/e-system.windows.forms.d_170_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#300](~/add/codesnippet/visualbasic/e-system.windows.forms.d_170_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseUp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user releases a mouse button while over a cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when the user releases any of the mouse buttons. Use the <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=fullName> property to determine which button was clicked.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellMouseUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellMouseUp event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#301](~/add/codesnippet/csharp/e-system.windows.forms.d_161_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#301](~/add/codesnippet/visualbasic/e-system.windows.forms.d_161_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellPainting">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellPaintingEventHandler CellPainting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellPaintingEventHandler CellPainting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellPaintingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell needs to be drawn.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can handle this event to customize the appearance of cells in the control. You can paint entire cells yourself, or paint specific parts of cells and use the <xref:System.Windows.Forms.DataGridViewCellPaintingEventArgs.PaintBackground%2A?displayProperty=fullName> or <xref:System.Windows.Forms.DataGridViewCellPaintingEventArgs.PaintContent%2A?displayProperty=fullName> methods to paint other parts. You can also use the <xref:System.Windows.Forms.VisualStyles.VisualStyleRenderer> class to paint standard controls using the current theme. For more information, see [Rendering Controls with Visual Styles](~/add/includes/ajax-current-ext-md.md). If you are using [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], you also have access to a large library of standard images that you can use with the <xref:System.Windows.Forms.DataGridView> control.  
  
 When handling this event, you should access the cell through the parameters of the event handler, rather than access the cell directly.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to use this event to customize the appearance of all cells in a particular column.  
  
 This code is part of a larger example available in [How to: Customize the Appearance of Cells in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewCellPainting#10](~/add/codesnippet/csharp/e-system.windows.forms.d_80_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewCellPainting#10](~/add/codesnippet/visualbasic/e-system.windows.forms.d_80_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellParsing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellParsingEventHandler CellParsing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellParsingEventHandler CellParsing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellParsingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell leaves edit mode if the cell value has been modified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the <xref:System.Windows.Forms.DataGridView> control will attempt to convert a user-specified value displayed in a cell to an actual underlying cell value in the type specified by the cell <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> property. This conversion uses the formatting properties of the cell style returned by the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property.  
  
 If the standard conversion does not meet your needs, handle the CellParsing event to provide custom value conversion to the required type.  
  
 Users can enter edit mode using the method specified by the <xref:System.Windows.Forms.DataGridView.EditMode%2A> property, and can leave edit mode, committing any changes to a cell, by moving to another cell or by pressing ENTER. Pressing ESC will revert any changes to the value before it is committed, and the CellParsing event will not occur. The CellParsing event occurs only if the cell value has actually been modified, even if the final value is the same as the original value. It also occurs when the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> method is called.  
  
 When you handle the CellParsing event, you can convert the value yourself or you can customize the default conversion. For example, you can convert the value yourself using the cell <xref:System.Windows.Forms.DataGridViewCell.ParseFormattedValue%2A> method with type converters of your choosing. Alternatively, you can let the default type converters parse the value, but modify the <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>, and <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> properties of the object returned by the <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.InheritedCellStyle%2A?displayProperty=fullName> property, which is initialized using the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property.  
  
 When you convert the value yourself, replace the initial, formatted value of the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> property with the converted value in the type specified by the cell <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> property. To indicate that no further parsing is necessary, set the <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied%2A?displayProperty=fullName> property to `true`.  
  
 When the event handler completes, if the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> is `null` or is not of the correct type, or the <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied%2A?displayProperty=fullName> property is `false`, the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> is parsed using the cell <xref:System.Windows.Forms.DataGridViewCell.ParseFormattedValue%2A> method with default type converters. The default implementation of this method parses the value using the <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>, and <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> properties of the cell style passed in. If the value is not equal to <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, the value is parsed using the <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> property and the type converters passed in.  
  
 To customize the conversion of a cell value into a formatted value for display, handle the <xref:System.Windows.Forms.DataGridView.CellFormatting> event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example shows how to handle the CellParsing event. It also shows how to use the <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs> class.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#2](~/add/codesnippet/visualbasic/e-system.windows.forms.d_50_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#2](~/add/codesnippet/cpp/e-system.windows.forms.d_50_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#2](~/add/codesnippet/csharp/e-system.windows.forms.d_50_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellStateChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellStateChangedEventHandler CellStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellStateChangedEventHandler CellStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell state changes, such as when the cell loses or gains focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates the use of this event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#135](~/add/codesnippet/csharp/e-system.windows.forms.d_0_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#135](~/add/codesnippet/visualbasic/e-system.windows.forms.d_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellStyleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridViewCell.Style%2A&gt; property of a <see cref="T:System.Windows.Forms.DataGridViewCell" /> changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when any property of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by a <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName> property is set to a new value or when a <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#305](~/add/codesnippet/csharp/e-system.windows.forms.d_55_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#305](~/add/codesnippet/visualbasic/e-system.windows.forms.d_55_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellStyleContentChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when one of the values of a cell style changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CellStyleContentChanged event occurs when a property value of a <xref:System.Windows.Forms.DataGridViewCellStyle> object returned by one of the following properties changes:  
  
-   <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A?displayProperty=fullName>  
  
 If one of these properties is set to a different <xref:System.Windows.Forms.DataGridViewCellStyle>, however, the corresponding *PropertyName*`Changed` event occurs, but the CellStyleContentChanged event does not occur.  
  
 For row, column, and cell properties, the name of the *PropertyName*`Changed` event begins with "`Row`", "`Column`", or "`Cell`" (for example, <xref:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged>).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellStyleContentChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellStyleContentChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#306](~/add/codesnippet/csharp/e-system.windows.forms.d_20_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#306](~/add/codesnippet/visualbasic/e-system.windows.forms.d_20_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellToolTipTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellToolTipTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellToolTipTextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A&gt; property value changes for a cell in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the CellToolTipTextChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the CellToolTipTextChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#307](~/add/codesnippet/csharp/e-system.windows.forms.d_109_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#307](~/add/codesnippet/visualbasic/e-system.windows.forms.d_109_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellToolTipTextNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell's ToolTip text is needed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CellToolTipTextNeeded event occurs only when the <xref:System.Windows.Forms.DataGridView> control <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is set or its <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is `true`.  
  
 When you handle the CellToolTipTextNeeded event, the ToolTip text you specify in the handler is shown whenever the mouse pointer is over a cell and the control <xref:System.Windows.Forms.DataGridView.ShowCellToolTips%2A> property value is `true`. The CellToolTipTextNeeded event is useful when you want to display ToolTips determined by the current state or value of a cell.  
  
 The CellToolTipTextNeeded event also occurs whenever the value of the <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A?displayProperty=fullName> property is retrieved, either programmatically or when the mouse pointer enters a cell.  
  
 You can use the <xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A> properties to determine the state or value of a cell, and use this information to change or modify the <xref:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText%2A?displayProperty=fullName> property. This property is initialized with the value of the cell <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> property, which the event value overrides.  
  
 Handle the CellToolTipTextNeeded event when working with large amounts of data to avoid the performance penalties of setting the cell <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> value for multiple cells. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use a CellToolTipTextNeeded event handler to display information from hidden columns in a data-bound <xref:System.Windows.Forms.DataGridView> control.  
  
 [!code-cs[System.Windows.Forms.DataGridView_NeededEvents#20](~/add/codesnippet/csharp/e-system.windows.forms.d_60_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView_NeededEvents#20](~/add/codesnippet/visualbasic/e-system.windows.forms.d_60_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellValidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellValidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellValidated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the cell has finished validating.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handling this event is useful for post-validation processing of the cell value.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use the CellValidated event to clear out the <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> property. In this example, the <xref:System.Windows.Forms.DataGridView.CellValidating> event sets the <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> if the user enters data that is not valid into a cell. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectionSum#50](~/add/codesnippet/csharp/e-system.windows.forms.d_36_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#50](~/add/codesnippet/visualbasic/e-system.windows.forms.d_36_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellValidating">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellValidatingEventHandler CellValidating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellValidatingEventHandler CellValidating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellValidatingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a cell loses input focus, enabling content validation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Canceling this event cancels the changes to the current cell. When this event is canceled in data-bound mode, the new value is not pushed to the underlying data source. When this event is canceled in virtual mode, the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event will not be raised.  
  
 Handle the <xref:System.Windows.Forms.DataGridView.CellValidated> event to perform post-validation processing.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example handles the CellValidating event to ensure that only positive integers are entered by the user. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cs[System.Windows.Forms.DataGridView._Virtual#40](~/add/codesnippet/csharp/e-system.windows.forms.d_122_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#40](~/add/codesnippet/cpp/e-system.windows.forms.d_122_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#40](~/add/codesnippet/visualbasic/e-system.windows.forms.d_122_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellValueChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellValueChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellValueChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of a cell changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CellValueChanged event occurs when the user-specified value is committed, which typically occurs when focus leaves the cell.  
  
 In the case of check box cells, however, you will typically want to handle the change immediately. To commit the change when the cell is clicked, you must handle the <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged?displayProperty=fullName> event. In the handler, if the current cell is a check box cell, call the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A?displayProperty=fullName> method and pass in the <xref:System.Windows.Forms.DataGridViewDataErrorContexts> value.  
  
 Rows in the control are not automatically sorted when a cell value is changed. To sort the control when the user modifies a cell, call the <xref:System.Windows.Forms.DataGridView.Sort%2A> method in a CellValueChanged event handler.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use the CellValueChanged event to update the values in a balance column of a <xref:System.Windows.Forms.DataGridView>. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectionSum#30](~/add/codesnippet/csharp/e-system.windows.forms.d_58_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#30](~/add/codesnippet/visualbasic/e-system.windows.forms.d_58_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellValueNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellValueEventHandler CellValueNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellValueEventHandler CellValueNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellValueEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.VirtualMode%2A&gt; property of the <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and the <see cref="T:System.Windows.Forms.DataGridView" /> requires a value for a cell in order to format and display the cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this event in virtual mode to populate cells with data from a custom data store without causing rows to become unshared. For more information about row sharing, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md). For more information about virtual mode, see [Virtual Mode in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 To add user-specified values to your custom data store, handle the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example handles the CellValueNeeded event to populate cells with positive integers. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cs[System.Windows.Forms.DataGridView._Virtual#10](~/add/codesnippet/csharp/e-system.windows.forms.d_3_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#10](~/add/codesnippet/cpp/e-system.windows.forms.d_3_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#10](~/add/codesnippet/visualbasic/e-system.windows.forms.d_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CellValuePushed">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellValueEventHandler CellValuePushed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellValueEventHandler CellValuePushed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellValueEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.VirtualMode%2A&gt; property of the <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and a cell value has changed and requires storage in the underlying data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this event in virtual mode to update a custom data store with user-specified data. Handle the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> event to retrieve values from the data store for display in the control.  
  
 For more information about virtual mode, see [Virtual Mode in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example handles the CellValuePushed event to store updates and new entries in a data store object. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cs[System.Windows.Forms.DataGridView._Virtual#10](~/add/codesnippet/csharp/e-system.windows.forms.d_77_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#10](~/add/codesnippet/cpp/e-system.windows.forms.d_77_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#10](~/add/codesnippet/visualbasic/e-system.windows.forms.d_77_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="public void ClearSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the current selection by unselecting all selected cells.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this method is called, each column and row's <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> property is set to `false`.  
  
   
  
## Examples  
 The following code example clears the selection of the <xref:System.Windows.Forms.DataGridView>. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and a <xref:System.Windows.Forms.Button> named `clearSelectionButton`, and ensure all events are associated with their event handlers.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#170](~/add/codesnippet/csharp/m-system.windows.forms.d_24_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#170](~/add/codesnippet/visualbasic/m-system.windows.forms.d_24_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="protected void ClearSelection (int columnIndexException, int rowIndexException, bool selectExceptionElement);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ClearSelection(int32 columnIndexException, int32 rowIndexException, bool selectExceptionElement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndexException" Type="System.Int32" />
        <Parameter Name="rowIndexException" Type="System.Int32" />
        <Parameter Name="selectExceptionElement" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndexException">The column index to exclude.</param>
        <param name="rowIndexException">The row index to exclude.</param>
        <param name="selectExceptionElement">
          <see langword="true" /> to select the excluded cell, row, or column; <see langword="false" /> to retain its original state.</param>
        <summary>Cancels the selection of all currently selected cells except the one indicated, optionally ensuring that the indicated cell is selected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `rowIndexException` value of -1 represents a column header, and a `columnIndexException` value of -1 represents a row header.  
  
 This method is useful to clear the current selection without canceling the selection of the cell, row, or column indicated by the exception indexes.  
  
 If the <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property value allows individual cell selection, this method sets the <xref:System.Windows.Forms.DataGridViewCell.Selected%2A> property of each cell to `false`, excluding the cell in the row and column specified. If the <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property value allows full row or column selection, this method also sets the <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> property of each row or column to `false`, excluding the row or column containing the specified cell.  
  
 The excluded cell, row, or column may or may not be in the selected state when this method is called. This method selects it if the `selectExceptionElement` parameter value is `true`. Depending on the selection mode, the entire row or column may also be selected as a result.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndexException" /> is greater than the highest column index.  
  
 -or-  
  
 <paramref name="columnIndexException" /> is less than -1 when &lt;xref:System.Windows.Forms.DataGridView.SelectionMode%2A&gt; is <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" />; otherwise, <paramref name="columnIndexException" /> is less than 0.  
  
 -or-  
  
 <paramref name="rowIndexException" /> is greater than the highest row index.  
  
 -or-  
  
 <paramref name="rowIndexException" /> is less than -1 when &lt;xref:System.Windows.Forms.DataGridView.SelectionMode%2A&gt; is <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" />; otherwise, <paramref name="rowIndexException" /> is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClipboardCopyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewClipboardCopyMode ClipboardCopyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewClipboardCopyMode ClipboardCopyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewClipboardCopyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether users can copy cell text values to the <see cref="T:System.Windows.Forms.Clipboard" /> and whether row and column header text is included.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> values. The default is <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control copies the text representation of each selected cell to the Clipboard. This value is the cell value converted to a string or, for image cells, the value of the <xref:System.Windows.Forms.DataGridViewImageCell.Description%2A> property.  
  
 Values are copied to the Clipboard in <xref:System.Windows.Forms.DataFormats.Text>, <xref:System.Windows.Forms.DataFormats.UnicodeText>, <xref:System.Windows.Forms.DataFormats.Html>, and <xref:System.Windows.Forms.DataFormats.CommaSeparatedValue> formats. These formats are useful for pasting content into applications such as Notepad, [!INCLUDE[ofprexcel](~/add/includes/ofprexcel-md.md)], and [!INCLUDE[ofprword](~/add/includes/ofprword-md.md)].  
  
 The <xref:System.Windows.Forms.DataGridView> control copies the cells contained in the smallest rectangle that includes all selected cells. Rows and columns that do not contain any selected cells are not represented in the copied data. Any unselected cells in the remaining rows and columns are represented by blank placeholders. Depending on the copy mode and the selection mode, header values for the copied rows and columns may be copied, as well.  
  
 When users copy content, the <xref:System.Windows.Forms.DataGridView> control adds a <xref:System.Windows.Forms.DataObject> to the Clipboard. This data object is retrieved from the <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A> method. You can call this method when you want to programmatically add the data object to the Clipboard.  
  
 The <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A>method retrieves values for individual cells by calling the <xref:System.Windows.Forms.DataGridViewCell.GetClipboardContent%2A?displayProperty=fullName> method. You can override either or both of these methods in derived classes to customize the layout of copied cells or to support additional data formats.  
  
 For more information about Clipboard operations and data formats, see the <xref:System.Windows.Forms.Clipboard> class.  
  
   
  
## Examples  
 The following code example demonstrates how to enable copying in the <xref:System.Windows.Forms.DataGridView> control. This example is part of a larger example available in [How to: Enable Users to Copy Multiple Cells to the Clipboard from the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewClipboardDemo#10](~/add/codesnippet/csharp/p-system.windows.forms.d_89_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewClipboardDemo#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_89_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnAdded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a column is added to the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnAdded event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnAdded event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#314](~/add/codesnippet/csharp/e-system.windows.forms.d_150_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#314](~/add/codesnippet/visualbasic/e-system.windows.forms.d_150_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnContextMenuStripChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridViewColumn.ContextMenuStrip%2A&gt; property of a column changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of theColumnContextMenuStripChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnContextMenuStripChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#315](~/add/codesnippet/csharp/e-system.windows.forms.d_14_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#315](~/add/codesnippet/visualbasic/e-system.windows.forms.d_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public int ColumnCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of columns displayed in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>The number of columns displayed in the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting the ColumnCount property to 0 will remove all columns from the <xref:System.Windows.Forms.DataGridView>.  
  
 If ColumnCount is reset to a value less than the current value, columns will be removed from the end of the <xref:System.Windows.Forms.DataGridView.Columns%2A> collection. If ColumnCount is set to a value greater than the current value, columns will be added to the end of the <xref:System.Windows.Forms.DataGridView.Columns%2A> collection.  
  
 This property can be used with the <xref:System.Windows.Forms.DataGridView.RowCount%2A> property to create a simple <xref:System.Windows.Forms.DataGridView> for displaying and editing text.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to set the<xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.GridColor%2A>, <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, <xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, ColumnCount, and <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> properties. In addition, the code example demonstrates how to set the <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> properties. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_34_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/cpp/p-system.windows.forms.d_34_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/csharp/p-system.windows.forms.d_34_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0.</exception>
        <exception cref="T:System.InvalidOperationException">When setting this property, the &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt; property has been set.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnDataPropertyNameChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDataPropertyNameChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDataPropertyNameChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A&gt; property for a column changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnDataPropertyNameChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnDataPropertyNameChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#316](~/add/codesnippet/csharp/e-system.windows.forms.d_118_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#316](~/add/codesnippet/visualbasic/e-system.windows.forms.d_118_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A&gt; property for a column changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when any properties of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> property for a column is set to a new value or when the <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> property for a column is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnDefaultCellStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnDefaultCellStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#317](~/add/codesnippet/csharp/e-system.windows.forms.d_93_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#317](~/add/codesnippet/visualbasic/e-system.windows.forms.d_93_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnDisplayIndexChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDisplayIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDisplayIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value the &lt;xref:System.Windows.Forms.DataGridViewColumn.DisplayIndex%2A&gt; property for a column changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnDisplayIndexChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnDisplayIndexChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#318](~/add/codesnippet/csharp/e-system.windows.forms.d_89_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#318](~/add/codesnippet/visualbasic/e-system.windows.forms.d_89_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnDividerDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user double-clicks a divider between two columns.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this event to customize the automatic sizing behavior that occurs when a user double-clicks a column divider. For example, you can handle this event to programmatically resize columns based only on the content in the rows that are currently visible, avoiding a performance impact with the default behavior when working with a large number of rows.  
  
 The column <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A> property does not extend the area in which a user can double-click. If the width of a divider has been increased through the use of this property, this event occurs when the user double-clicks the boundary between the divider and the adjacent column.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnDividerDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnDividerDoubleClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#319](~/add/codesnippet/csharp/e-system.windows.forms.d_152_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#319](~/add/codesnippet/visualbasic/e-system.windows.forms.d_152_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnDividerWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDividerWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDividerWidthChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnDividerWidthChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnDividerWidthChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#320](~/add/codesnippet/csharp/e-system.windows.forms.d_53_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#320](~/add/codesnippet/visualbasic/e-system.windows.forms.d_53_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderCellChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnHeaderCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnHeaderCellChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the contents of a column header cell change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnHeaderCellChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnHeaderCellChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#323](~/add/codesnippet/csharp/e-system.windows.forms.d_119_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#323](~/add/codesnippet/visualbasic/e-system.windows.forms.d_119_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks a column header.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 When a column heading is clicked in a <xref:System.Windows.Forms.DataGridView>, the default behavior is to order the grid rows based on the clicked column, or to reverse the sort order if the grid is already sorted by the clicked column. The following code example demonstrates how to use this event to perform a programmatic sort that emulates the default behavior of clicking a <xref:System.Windows.Forms.DataGridViewColumnHeaderCell> when the default behavior has been disabled. In this example, the<xref:System.Windows.Forms.DataGridView.SelectionMode%2A> is set to <xref:System.Windows.Forms.DataGridViewSelectionMode>, so clicking the <xref:System.Windows.Forms.DataGridViewColumnHeaderCell> selects the contents of the column. For the example code to function as intended, the default column header click behavior needs to be changed each time the data is loaded into the <xref:System.Windows.Forms.DataGridView>. Add a <xref:System.Windows.Forms.DataGridView.DataBindingComplete> event handler to provide the code that changes the default behavior. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and ensure that all events are associated with their event handlers.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#160](~/add/codesnippet/csharp/e-system.windows.forms.d_29_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#160](~/add/codesnippet/visualbasic/e-system.windows.forms.d_29_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a column header is double-clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnHeaderMouseDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnHeaderMouseDoubleClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#322](~/add/codesnippet/csharp/e-system.windows.forms.d_86_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#322](~/add/codesnippet/visualbasic/e-system.windows.forms.d_86_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the border style applied to the column headers.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the ColumnHeadersBorderStyle property is set to anything other than <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle>, the <xref:System.Windows.Forms.DataGridView.GridColor%2A> property must be a system color.  
  
 You cannot set this property to the <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle> value, which is a read-only value indicating that the border style has been customized through the use of the <xref:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle%2A> property.  
  
> [!NOTE]
>  If visual styles are enabled for the application through the <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> method and the <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> property is `true`, the column headers are painted using the current theme. In this case, the value of the ColumnHeadersBorderStyle property is ignored for all column headers except the <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A>, to which the theme is not applied.  
  
   
  
## Examples  
 The following code example demonstrates how to set the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, ColumnHeadersBorderStyle, <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.GridColor%2A>, <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, <xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, and <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> properties. In addition, the code example demonstrates how to set the <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> properties. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named`dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_169_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/cpp/p-system.windows.forms.d_169_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/csharp/p-system.windows.forms.d_169_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> value.</exception>
        <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ColumnHeadersBorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ColumnHeadersBorderStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnHeadersBorderStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnHeadersBorderStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#262](~/add/codesnippet/csharp/e-system.windows.forms.d_15_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#262](~/add/codesnippet/visualbasic/e-system.windows.forms.d_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle ColumnHeadersDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle ColumnHeadersDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default column header style.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the default column header style.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default <xref:System.Windows.Forms.DataGridViewCellStyle> returned by this property has the following initial property values:  
  
|`DataGridViewCellStyle` property|Default value|  
|--------------------------------------|-------------------|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A>|The value of the <xref:System.Drawing.SystemBrushes.Control%2A?displayProperty=fullName> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A>|The value of the <xref:System.Drawing.SystemBrushes.WindowText%2A?displayProperty=fullName> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A>|The value of the <xref:System.Drawing.SystemBrushes.Highlight%2A?displayProperty=fullName> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionForeColor%2A>|The value of the <xref:System.Drawing.SystemBrushes.HighlightText%2A?displayProperty=fullName> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A>|The value of the <xref:System.Windows.Forms.DataGridView.Font%2A> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Alignment%2A>|<xref:System.Windows.Forms.DataGridViewContentAlignment?displayProperty=fullName>|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A>|<xref:System.Windows.Forms.DataGridViewTriState?displayProperty=fullName>|  
  
 These values automatically override the values set through the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property. To force column headers to inherit the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> values, you must set the values in the ColumnHeadersDefaultCellStyle object to the default values indicated for the <xref:System.Windows.Forms.DataGridViewCellStyle> class.  
  
 For more information about cell style inheritance, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 If visual styles are enabled and <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> is set to `true`, all header cells except the <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A> are painted using the current theme and the ColumnHeadersDefaultCellStyle values are ignored.  
  
   
  
## Examples  
 The following code example demonstrates how to set the ColumnHeadersDefaultCellStyle, <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.GridColor%2A>, <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, <xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, and <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> properties. In addition, the code example demonstrates how to set the <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> properties. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_175_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/cpp/p-system.windows.forms.d_175_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/csharp/p-system.windows.forms.d_175_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ColumnHeadersDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ColumnHeadersDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when any properties of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> property is set to a new value or when the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnHeadersDefaultCellStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnHeadersDefaultCellStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#263](~/add/codesnippet/csharp/e-system.windows.forms.d_16_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#263](~/add/codesnippet/visualbasic/e-system.windows.forms.d_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeight">
      <MemberSignature Language="C#" Value="public int ColumnHeadersHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnHeadersHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height, in pixels, of the column headers row</summary>
        <value>The height, in pixels, of the row that contains the column headers. The default is 23.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than the minimum height of 4 pixels or is greater than the maximum height of 32768 pixels.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeightChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ColumnHeadersHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ColumnHeadersHeightChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.ColumnHeadersHeight%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnHeadersHeightChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnHeadersHeightChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#264](~/add/codesnippet/csharp/e-system.windows.forms.d_22_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#264](~/add/codesnippet/visualbasic/e-system.windows.forms.d_22_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeightSizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the height of the column headers is adjustable and whether it can be adjusted by the user or is automatically adjusted to fit the contents of the headers.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> value indicating the mode by which the height of the column headers row can be adjusted. The default is <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to <xref:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode>, the height of the column headers cannot be adjusted by the user.  
  
 To adjust the height of the column headers programmatically, use the <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> method or set the <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeight%2A> property.  
  
 To set the sizing mode for the row headers, use the <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when the column headers are resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 For more information about header sizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridView> control does not support double buffering. If <xref:System.Windows.Forms.Control.DoubleBuffered%2A> is set to `true` in a derived <xref:System.Windows.Forms.DataGridView> control, users will not receive visual feedback when resizing rows, columns, or headers or when reordering columns.  
  
   
  
## Examples  
 The following code example illustrates how to use this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_5_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeightSizeModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnHeadersHeightSizeModeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnHeadersHeightSizeModeChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#265](~/add/codesnippet/csharp/e-system.windows.forms.d_156_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#265](~/add/codesnippet/visualbasic/e-system.windows.forms.d_156_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersVisible">
      <MemberSignature Language="C#" Value="public bool ColumnHeadersVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ColumnHeadersVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the column header row is displayed.</summary>
        <value>
          <see langword="true" /> if the column headers are displayed; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the ColumnHeadersVisible property is `false`, a column whose <xref:System.Windows.Forms.DataGridViewColumn.Resizable%2A> property is set to `true` can still be resized in the user interface (UI) by clicking with the mouse cursor anywhere along the right border of the column to be resized.  
  
   
  
## Examples  
 The following code example populates an unbound <xref:System.Windows.Forms.DataGridView> control and sets the ColumnHeadersVisible property to `true` to ensure that column headers are displayed.  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize#2](~/add/codesnippet/cpp/p-system.windows.forms.d_294_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewAutoSize#2](~/add/codesnippet/csharp/p-system.windows.forms.d_294_1.cs)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#2](~/add/codesnippet/visualbasic/p-system.windows.forms.d_294_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="false" /> and one or more columns have an &lt;xref:System.Windows.Forms.DataGridViewColumn.InheritedAutoSizeMode%2A&gt; property value of <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnMinimumWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnMinimumWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnMinimumWidthChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewColumn.MinimumWidth%2A&gt; property for a column changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnMinimumWidthChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnMinimumWidthChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#324](~/add/codesnippet/csharp/e-system.windows.forms.d_35_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#324](~/add/codesnippet/visualbasic/e-system.windows.forms.d_35_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnNameChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnNameChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnNameChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewColumn.Name%2A&gt; property for a column changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnNameChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnNameChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#325](~/add/codesnippet/csharp/e-system.windows.forms.d_18_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#325](~/add/codesnippet/visualbasic/e-system.windows.forms.d_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a column is removed from the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnRemoved event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnRemoved event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#326](~/add/codesnippet/csharp/e-system.windows.forms.d_128_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#326](~/add/codesnippet/visualbasic/e-system.windows.forms.d_128_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumnCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewColumnCollection Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection that contains all the columns in the control.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" /> that contains all the columns in the <see cref="T:System.Windows.Forms.DataGridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By using the <xref:System.Windows.Forms.DataGridViewColumnCollection> returned by this property, you can add columns, remove columns, and obtain a count of the columns contained in the <xref:System.Windows.Forms.DataGridView> control. For more information, see <xref:System.Windows.Forms.DataGridViewColumnCollection>.  
  
   
  
## Examples  
 The following code example demonstrates how to create an unbound <xref:System.Windows.Forms.DataGridView>; set the <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, and <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> properties; and use the <xref:System.Windows.Forms.DataGridView.Rows%2A> and Columns properties. It also demonstrates how to use a version of the <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> and <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> methods to properly size the column headers and the rows. To run this example, paste the following code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and a button named `Button1`, and then call the `InitializeDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are connected with their event handlers.  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize#2](~/add/codesnippet/cpp/p-system.windows.forms.d_381_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewAutoSize#2](~/add/codesnippet/csharp/p-system.windows.forms.d_381_1.cs)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#2](~/add/codesnippet/visualbasic/p-system.windows.forms.d_381_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnSortModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnSortModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnSortModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A&gt; property for a column changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnSortModeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnSortModeChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#327](~/add/codesnippet/csharp/e-system.windows.forms.d_44_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#327](~/add/codesnippet/visualbasic/e-system.windows.forms.d_44_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnStateChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnStateChangedEventHandler ColumnStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnStateChangedEventHandler ColumnStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnStateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a column changes state, such as gaining or losing focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised when the value of one of the following column properties changes for a <xref:System.Windows.Forms.DataGridViewColumn> in the control:  
  
-   <xref:System.Windows.Forms.DataGridViewBand.Displayed%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.Frozen%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.ReadOnly%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.Resizable%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewBand.Selected%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.Visible%2A>  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnStateChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnStateChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#328](~/add/codesnippet/csharp/e-system.windows.forms.d_136_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#328](~/add/codesnippet/visualbasic/e-system.windows.forms.d_136_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnToolTipTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnToolTipTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnToolTipTextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridViewColumn.ToolTipText%2A&gt; property value changes for a column in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ColumnToolTipTextChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ColumnToolTipTextChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#329](~/add/codesnippet/csharp/e-system.windows.forms.d_66_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#329](~/add/codesnippet/visualbasic/e-system.windows.forms.d_66_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnWidthChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewColumn.Width%2A&gt; property for a column changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates the use of this event. This example is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#18](~/add/codesnippet/visualbasic/e-system.windows.forms.d_100_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#18](~/add/codesnippet/csharp/e-system.windows.forms.d_100_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public bool CommitEdit (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CommitEdit(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values that specifies the context in which an error can occur.</param>
        <summary>Commits changes in the current cell to the data cache without ending edit mode.</summary>
        <returns>
          <see langword="true" /> if the changes were committed; otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method attempts to convert the formatted, user-specified value to the underlying cell data type. To do this, it raises the <xref:System.Windows.Forms.DataGridView.CellParsing> event, which you can handle to customize the type conversion. Otherwise, default type converters are used. Conversion errors may result in an exception if the <xref:System.Windows.Forms.DataGridView.DataError> event is not handled to prevent it. If the value is successfully converted, it is committed to the data store, raising the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event for non-data-bound cells when the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property value is `true`. If the value is successfully committed, the <xref:System.Windows.Forms.DataGridView.CellValueChanged> event occurs.  
  
   
  
## Examples  
 The following code example calls the CommitEdit method within a <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> event handler to raise the <xref:System.Windows.Forms.DataGridView.CellValueChanged> event. This code example is part of a larger example provided in [How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#5](~/add/codesnippet/visualbasic/9d3dce2f-6bcc-4c80-a293-_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.DisabledButtons#5](~/add/codesnippet/csharp/9d3dce2f-6bcc-4c80-a293-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new accessible object for the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <returns>A new &lt;xref:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject&gt; for the <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateColumnsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.DataGridViewColumnCollection CreateColumnsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.DataGridViewColumnCollection CreateColumnsInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns a new <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />.</summary>
        <returns>An empty <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns a new &lt;xref:System.Windows.Forms.Control.ControlCollection&gt; that can be cast to type &lt;xref:System.Windows.Forms.DataGridView.DataGridViewControlCollection&gt;.</summary>
        <returns>An empty &lt;xref:System.Windows.Forms.Control.ControlCollection&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the <xref:System.Windows.Forms.Control.Controls%2A> property to initialize its value.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateRowsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.DataGridViewRowCollection CreateRowsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.DataGridViewRowCollection CreateRowsInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns a new <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />.</summary>
        <returns>An empty <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell CurrentCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell CurrentCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the currently active cell.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewCell" /> that represents the current cell, or <see langword="null" /> if there is no current cell. The default is the first cell in the first column or <see langword="null" /> if there are no cells in the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set a cell as the current cell, it will scroll into view if it is not currently displayed. The current cell cannot be a header cell, a disabled cell, or a cell in a hidden row or column.  
  
 You can set this property to `null` to temporarily remove the focus rectangle, but when the control receives focus and the value of this property is `null`, it is automatically set to the value of the <xref:System.Windows.Forms.DataGridView.FirstDisplayedCell%2A>property.  
  
 When you change the value of this property, the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event occurs before the <xref:System.Windows.Forms.DataGridView.CurrentCellChanged> event. Any <xref:System.Windows.Forms.DataGridView.SelectionChanged> event handler accessing the CurrentCell property at this time will get its previous value.  
  
 When you bind the <xref:System.Windows.Forms.DataGridView> to an external data source, this property is reset to its default value.  
  
   
  
## Examples  
 The following code example illustrates how to ensure that the current cell is visible after sorting by setting the <xref:System.Windows.Forms.DataGridView.FirstDisplayedCell%2A> property to the cell retrieved through the CurrentCell property. This code works only with an unbound <xref:System.Windows.Forms.DataGridView> control. With a <xref:System.Windows.Forms.DataGridView> control bound to an external data source, the current cell is not automatically persisted when sorting.  
  
 To run this example, paste the following code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`. In C#, you must also connect the <xref:System.Windows.Forms.DataGridView.Sorted> event to the event handler.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#150](~/add/codesnippet/csharp/p-system.windows.forms.d_291_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#150](~/add/codesnippet/visualbasic/p-system.windows.forms.d_291_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The value of this property cannot be set because changes to the current cell cannot be committed or canceled.  
  
 -or-  
  
 The specified cell when setting this property is in a hidden row or column.  
  
 Re-entrant calling is only allowed when the <see cref="T:System.Windows.Forms.DataGridView" /> is bound to a &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt;. Re-entrant calling results from a change to the underlying data.</exception>
        <exception cref="T:System.ArgumentException">The specified cell when setting this property is not in the <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCellAddress">
      <MemberSignature Language="C#" Value="public System.Drawing.Point CurrentCellAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point CurrentCellAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the row and column indexes of the currently active cell.</summary>
        <value>A <see cref="T:System.Drawing.Point" /> that represents the row and column indexes of the currently active cell.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to determine the row and column of the current cell without accessing the cell directly. This is useful to avoid unsharing shared rows. For more information about row sharing, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates how to use the CurrentCellAddress property in a row-painting scenario. In the example, this property is used to store the row index of the current cell. When the user changes the current cell to a different row, the row is forced to repaint itself.  
  
 This code is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#19](~/add/codesnippet/visualbasic/p-system.windows.forms.d_209_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#19](~/add/codesnippet/csharp/p-system.windows.forms.d_209_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCellChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentCellChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.CurrentCell%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates the use of this event. This example is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#19](~/add/codesnippet/visualbasic/e-system.windows.forms.d_28_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#19](~/add/codesnippet/csharp/e-system.windows.forms.d_28_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCellDirtyStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentCellDirtyStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentCellDirtyStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the state of a cell changes in relation to a change in its contents.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cell is marked as modified if its contents have changed but the change has not been saved.  
  
 This event typically occurs when a cell has been edited but the change has not been committed to the data cache, or when an edit operation is canceled.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to handle the CurrentCellDirtyStateChanged event. In this example, the event handler calls the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> method to raise the <xref:System.Windows.Forms.DataGridView.CellValueChanged> event and determine the current value of a <xref:System.Windows.Forms.DataGridViewCheckBoxCell>. This code example is part of a larger example provided in [How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#5](~/add/codesnippet/visualbasic/e-system.windows.forms.d_167_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.DisabledButtons#5](~/add/codesnippet/csharp/e-system.windows.forms.d_167_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentRow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRow CurrentRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRow CurrentRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the row containing the current cell.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewRow" /> that represents the row containing the current cell, or <see langword="null" /> if there is no current cell.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To change the current row, you must set the <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> property to a cell in the desired row.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataBindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewBindingCompleteEventHandler DataBindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewBindingCompleteEventHandler DataBindingComplete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewBindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a data-binding operation has finished.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised when the contents of the data source change or when the value of the <xref:System.Windows.Forms.DataGridView.DataSource%2A>, <xref:System.Windows.Forms.DataGridView.DataMember%2A>, or <xref:System.Windows.Forms.Control.BindingContext%2A> property changes.  
  
 Handling this event is useful, for example, to programmatically resize rows and columns based on content updates. For more information, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates the use of this event. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs> class overview.  
  
 [!code-cs[System.Windows.Forms.DataGridView_NeededEvents#05](~/add/codesnippet/csharp/e-system.windows.forms.d_17_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView_NeededEvents#05](~/add/codesnippet/visualbasic/e-system.windows.forms.d_17_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataError">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewDataErrorEventHandler DataError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewDataErrorEventHandler DataError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewDataErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an external data-parsing or validation operation throws an exception, or when an attempt to commit data to a data source fails.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataError event enables you to handle exceptions thrown in code that is called by the control during data processing operations.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex%2A> and <xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.RowIndex%2A> properties of the <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs> object associated with this event normally indicate the cell in which the data error occurred. When the error occurs in an external data source, however, the data source may not provide the column in which the error occurred. In this case, the <xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex%2A> property typically indicates the column of the current cell at the time of the error.  
  
   
  
## Examples  
 The following code example demonstrates a DataError event handler. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewComboBoxColumn> class overview topic.  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#50](~/add/codesnippet/cpp/e-system.windows.forms.d_32_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#50](~/add/codesnippet/csharp/e-system.windows.forms.d_32_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#50](~/add/codesnippet/visualbasic/e-system.windows.forms.d_32_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataMember">
      <MemberSignature Language="C#" Value="public string DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the list or table in the data source for which the <see cref="T:System.Windows.Forms.DataGridView" /> is displaying data.</summary>
        <value>The name of the table or list in the &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt; for which the <see cref="T:System.Windows.Forms.DataGridView" /> is displaying data. The default is &lt;xref:System.String.Empty&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is useful when binding to a data source that contains multiple lists or tables. You do not need to set this property when binding to a data source that contains a single list or table. For example, you can bind a <xref:System.Windows.Forms.DataGridView> control to a <xref:System.Data.DataSet> that contains a single table without setting this property. If the <xref:System.Data.DataSet> contains multiple tables, however, you must set this property to the name of one of the tables.  
  
   
  
## Examples  
 The following code example illustrates a common use for this property. In the example, a <xref:System.Windows.Forms.DataGridView> control named `customersDataGridView` is bound to a <xref:System.Data.DataSet> named `customersDataSet`. This <xref:System.Data.DataSet> contains a table named "Customers". The DataMember property is set to the name of the table.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#020](~/add/codesnippet/csharp/p-system.windows.forms.d_54_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#020](~/add/codesnippet/visualbasic/p-system.windows.forms.d_54_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">An error occurred in the data source and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataMemberChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataMemberChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when value of the &lt;xref:System.Windows.Forms.DataGridView.DataMember%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DataMemberChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the DataMemberChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#266](~/add/codesnippet/csharp/e-system.windows.forms.d_9_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#266](~/add/codesnippet/visualbasic/e-system.windows.forms.d_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AttributeProvider(typeof(System.ComponentModel.IListSource))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data source that the <see cref="T:System.Windows.Forms.DataGridView" /> is displaying data for.</summary>
        <value>The object that contains data for the <see cref="T:System.Windows.Forms.DataGridView" /> to display.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> class supports the standard Windows Forms data-binding model. This means the data source can be of any type that implements one of the following interfaces:  
  
-   The <xref:System.Collections.IList> interface, including one-dimensional arrays.  
  
-   The <xref:System.ComponentModel.IListSource> interface, such as the <xref:System.Data.DataTable> and <xref:System.Data.DataSet> classes.  
  
-   The <xref:System.ComponentModel.IBindingList> interface, such as the <xref:System.ComponentModel.BindingList%601> class.  
  
-   The <xref:System.ComponentModel.IBindingListView> interface, such as the <xref:System.Windows.Forms.BindingSource> class.  
  
 For specific examples, see the Example section and the task table at the end of this section.  
  
 Typically, you will bind to a <xref:System.Windows.Forms.BindingSource> component and bind the <xref:System.Windows.Forms.BindingSource> component to another data source or populate it with business objects. The <xref:System.Windows.Forms.BindingSource> component is the preferred data source because it can bind to a wide variety of data sources and can resolve many data binding issues automatically.  
  
 When binding to a data source that contains multiple lists or tables, you must set the <xref:System.Windows.Forms.DataGridView.DataMember%2A> property to a string that specifies the list or table to bind to. When binding to a <xref:System.Windows.Forms.BindingSource> component that contains multiple lists or tables, however, you can set the <xref:System.Windows.Forms.BindingSource.DataMember%2A> property of the <xref:System.Windows.Forms.BindingSource> component instead.  
  
 When binding to an object collection rather than to database data, you will typically set the <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> property of the object returned by the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property to `null` rather than using the default value of <xref:System.DBNull.Value?displayProperty=fullName>, which is appropriate for database data.  
  
 For more information, see [Displaying Data in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md). The following table provides direct links to common tasks related to the DataSource property.  
  
 See [Walkthrough: Creating a Master/Detail Form Using Two Windows Forms DataGridView Controls](~/add/includes/ajax-current-ext-md.md)and [How to: Bind Objects to Windows Forms DataGridView Controls](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to initialize a simple data-bound <xref:System.Windows.Forms.DataGridView>. It also demonstrates how to set the DataSource property.  
  
 [!code-cs[System.Windows.Forms.GridViewSimpleBound#1](~/add/codesnippet/csharp/p-system.windows.forms.d_359_1.cs)]
 [!code-vb[System.Windows.Forms.GridViewSimpleBound#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_359_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewSimpleBound#1](~/add/codesnippet/cpp/p-system.windows.forms.d_359_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">An error occurred in the data source and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DataSourceChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the DataSourceChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#267](~/add/codesnippet/csharp/e-system.windows.forms.d_41_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#267](~/add/codesnippet/visualbasic/e-system.windows.forms.d_41_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default cell style to be applied to the cells in the <see cref="T:System.Windows.Forms.DataGridView" /> if no other cell style properties are set.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to be applied as the default style.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control displays its cells using the styles indicated by the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property, which inherits styles from other properties of type <xref:System.Windows.Forms.DataGridViewCellStyle>. The styles specified through the DefaultCellStyle property affect all cells except when overridden by the styles specified through the following properties:  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A>  
  
-   <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName>  
  
 For more information, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 When getting this property, a <xref:System.Windows.Forms.DataGridViewCellStyle> with default values will be created if the property has not already been accessed. This can cause a performance impact when getting this property for many rows. Whenever possible, use a single <xref:System.Windows.Forms.DataGridViewCellStyle> to set this property for multiple rows. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates the use of this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_24_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_24_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when any properties of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property are set to new values or when the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DefaultCellStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the DefaultCellStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#268](~/add/codesnippet/csharp/e-system.windows.forms.d_48_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#268](~/add/codesnippet/visualbasic/e-system.windows.forms.d_48_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default initial size of the control.</summary>
        <value>A <see cref="T:System.Drawing.Size" /> representing the initial size of the control, which is 240 pixels wide by 150 pixels high.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultValuesNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler DefaultValuesNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler DefaultValuesNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user enters the row for new records so that it can be populated with default values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event lets you populate the row for new records when the user enters the row. Initial values for the row come from the <xref:System.Windows.Forms.DataGridViewCell.DefaultNewRowValue%2A> property of the <xref:System.Windows.Forms.DataGridViewCell> returned by each column's <xref:System.Windows.Forms.DataGridViewColumn.CellTemplate%2A> property.  
  
 In data bound mode, all cell values for data bound columns are stored in the external data source. When the user enters the row for new records, a new row is created in the data source before the DefaultValuesNeeded event occurs. When you populate the <xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A?displayProperty=fullName> property in your event handler, the values are added directly to the data source.  
  
 In virtual mode, after this event occurs, the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event occurs for each cell in the new row so that you can store the default values in your custom data store. Then, the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> event occurs for each cell in the new row, retrieving the values that you stored in the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event, which are then displayed.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how this event can be handled. In the example, cells for the given columns are populated with default values. For the `CustomerID` column, the value is retrieved from a separate method (not implemented) that generates a unique customer ID.  
  
 To run this example, replace the column names with the names of the column objects from an actual <xref:System.Windows.Forms.DataGridView> control and provide appropriate default values. When specifying columns by name, you must use the name of the column object and not the column header text.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#120](~/add/codesnippet/csharp/e-system.windows.forms.d_5_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#120](~/add/codesnippet/visualbasic/e-system.windows.forms.d_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisplayedColumnCount">
      <MemberSignature Language="C#" Value="public int DisplayedColumnCount (bool includePartialColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DisplayedColumnCount(bool includePartialColumns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePartialColumns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePartialColumns">
          <see langword="true" /> to include partial columns in the displayed column count; otherwise, <see langword="false" />.</param>
        <summary>Returns the number of columns displayed to the user.</summary>
        <returns>The number of columns displayed to the user.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisplayedRowCount">
      <MemberSignature Language="C#" Value="public int DisplayedRowCount (bool includePartialRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DisplayedRowCount(bool includePartialRow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePartialRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePartialRow">
          <see langword="true" /> to include partial rows in the displayed row count; otherwise, <see langword="false" />.</param>
        <summary>Returns the number of rows displayed to the user.</summary>
        <returns>The number of rows displayed to the user.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisplayRectangle">
      <MemberSignature Language="C#" Value="public override System.Drawing.Rectangle DisplayRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle DisplayRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rectangle that represents the display area of the control.</summary>
        <value>A <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DisplayRectangle property returns the client rectangle of the display area of the control, not including the area occupied by any scroll bars that are showing.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls and optionally releases the managed resources.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditingControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control EditingControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control EditingControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the control hosted by the current cell, if a cell with an editing control is in edit mode.</summary>
        <value>The <see cref="T:System.Windows.Forms.Control" /> hosted by the current cell.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the cell is not in edit mode or the cell type does not accommodate an editing control, this property returns `null`.  
  
   
  
## Examples  
 The following code example illustrates how to use this property in an overridden method of a custom cell type. In the example, a reference to the editing control is retrieved, cast to a custom editing control type, and then populated with the current value of the cell.  
  
 This example is part of a larger example available in [How to: Host Controls in Windows Forms DataGridView Cells](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewCalendarColumn#210](~/add/codesnippet/csharp/p-system.windows.forms.d_233_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#210](~/add/codesnippet/visualbasic/p-system.windows.forms.d_233_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditingControlShowing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewEditingControlShowingEventHandler EditingControlShowing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewEditingControlShowingEventHandler EditingControlShowing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewEditingControlShowingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a control for editing a cell is showing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can handle this event to perform custom initialization of the editing control when a cell enters edit mode. To customize the display characteristics of the control, set the properties of the object returned by the <xref:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.CellStyle%2A?displayProperty=fullName> property. To perform other initialization, cast the value of the <xref:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.Control%2A?displayProperty=fullName> property to the specific control type and access the members directly. For example, you can handle the EditingControlShowing event to attach event-handlers to the events of the editing control.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridView> control hosts one editing control at a time, and reuses the editing control whenever the cell type does not change between edits. When attaching event-handlers to the editing control, you must therefore take precautions to avoid attaching the same handler multiple times. To avoid this problem, remove the handler from the event before you attach the handler to the event. This will prevent duplication if the handler is already attached to the event, but will have no effect otherwise. For more information, see the example code in the <xref:System.Windows.Forms.DataGridViewComboBoxEditingControl> class overview.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to handle this event to change the <xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A> property of the current cell. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and ensure that the EditingControlShowing event is associated with the event handler.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#210](~/add/codesnippet/csharp/e-system.windows.forms.d_162_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#210](~/add/codesnippet/visualbasic/e-system.windows.forms.d_162_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditingPanel">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Panel EditingPanel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Panel EditingPanel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Panel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the panel that contains the &lt;xref:System.Windows.Forms.DataGridView.EditingControl%2A&gt;.</summary>
        <value>The <see cref="T:System.Windows.Forms.Panel" /> that contains the &lt;xref:System.Windows.Forms.DataGridView.EditingControl%2A&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unlike the <xref:System.Windows.Forms.DataGridView.EditingControl%2A> property, which is `null` when the current cell is not in edit mode, the EditingPanel property is always available.  
  
   
  
## Examples  
 The following code example illustrates how to use the EditingPanel property in a <xref:System.Windows.Forms.DataGridView> control to visually differentiate a cell when it is in edit mode. In this example, the <xref:System.Windows.Forms.Panel.BorderStyle%2A> of the cell's editing panel is set to <xref:System.Windows.Forms.BorderStyle>. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#069](~/add/codesnippet/csharp/p-system.windows.forms.d_297_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#069](~/add/codesnippet/visualbasic/p-system.windows.forms.d_297_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewEditMode EditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewEditMode EditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewEditMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating how to begin editing a cell.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DataGridViewEditMode" /> values. The default is <see cref="T:System.Windows.Forms.DataGridViewEditMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 All <xref:System.Windows.Forms.DataGridViewEditMode> values except for <xref:System.Windows.Forms.DataGridViewEditMode> also allow a user to double-click a cell to begin editing it.  
  
   
  
## Examples  
 The following code example demonstrates how to initialize a simple data-bound <xref:System.Windows.Forms.DataGridView>. It also demonstrates how to set the EditMode property.  
  
 [!code-cs[System.Windows.Forms.GridViewSimpleBound#1](~/add/codesnippet/csharp/p-system.windows.forms.d_300_1.cs)]
 [!code-vb[System.Windows.Forms.GridViewSimpleBound#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_300_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewSimpleBound#1](~/add/codesnippet/cpp/p-system.windows.forms.d_300_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewEditMode" /> value.</exception>
        <exception cref="T:System.Exception">The specified value when setting this property would cause the control to enter edit mode, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EditModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EditModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.EditMode%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the EditModeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type<xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the EditModeChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#269](~/add/codesnippet/csharp/e-system.windows.forms.d_111_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#269](~/add/codesnippet/visualbasic/e-system.windows.forms.d_111_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableHeadersVisualStyles">
      <MemberSignature Language="C#" Value="public bool EnableHeadersVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHeadersVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether row and column headers use the visual styles of the user's current theme if visual styles are enabled for the application.</summary>
        <value>
          <see langword="true" /> if visual styles are enabled for the headers; otherwise, <see langword="false" />. The default value is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can enable visual styles for your application by calling the <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> method before calling the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method. If EnableHeadersVisualStyles is set to `true`, all header cells except the <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A> are painted using the current theme.  
  
   
  
## Examples  
 The following code example demonstrates how to disable visual styles for the row and column headers in an application that has visual styles enabled. In this example, visual styles have been enabled for the application by calling the <xref:System.Windows.Forms.Application.EnableVisualStyles%2A> method in `Main`. However, visual styles will not be applied to the row and column headers because EnableHeadersVisualStyles is set to `false`. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> class.  
  
 [!code-cs[System.Windows.Forms.DataGridViewAdvancedBorderStyle#10](~/add/codesnippet/csharp/p-system.windows.forms.d_77_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_77_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public bool EndEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Commits and ends the edit operation on the current cell using the default error context.</summary>
        <returns>
          <see langword="true" /> if the edit operation is committed and ended; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method calls the <xref:System.Windows.Forms.DataGridView.EndEdit%2A> overload, passing in a bitwise combination of the <xref:System.Windows.Forms.DataGridViewDataErrorContexts> and <xref:System.Windows.Forms.DataGridViewDataErrorContexts> values.  
  
 This method raises the <xref:System.Windows.Forms.DataGridView.CellEndEdit> event.  
  
 This method may result in an exception if errors are not handled with the <xref:System.Windows.Forms.DataGridView.DataError> event.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public bool EndEdit (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndEdit(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values that specifies the context in which an error can occur.</param>
        <summary>Commits and ends the edit operation on the current cell using the specified error context.</summary>
        <returns>
          <see langword="true" /> if the edit operation is committed and ended; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method raises the <xref:System.Windows.Forms.DataGridView.CellEndEdit> event.  
  
 This method may result in an exception if errors are not handled with the <xref:System.Windows.Forms.DataGridView.DataError> event.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell FirstDisplayedCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell FirstDisplayedCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the first cell currently displayed in the <see cref="T:System.Windows.Forms.DataGridView" />; typically, this cell is in the upper left corner.</summary>
        <value>The first <see cref="T:System.Windows.Forms.DataGridViewCell" /> currently displayed in the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this property to determine which cell is in the first row and column currently displayed in the control. Typically, this is in the upper left corner, but for right-to-left languages, it is in the upper right corner. You can also set this property to scroll the control to the indicated cell.  
  
   
  
## Examples  
 The following code example illustrates how to ensure that the current cell is visible after sorting. This code works only with an unbound <xref:System.Windows.Forms.DataGridView> control. With a <xref:System.Windows.Forms.DataGridView> control bound to an external data source, the current cell is not automatically persisted when sorting.  
  
 To run this example, paste the following code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`. In C#, you must also connect the <xref:System.Windows.Forms.DataGridView.Sorted>event to the event handler.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#150](~/add/codesnippet/csharp/p-system.windows.forms.d_306_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#150](~/add/codesnippet/visualbasic/p-system.windows.forms.d_306_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified cell when setting this property is not in the <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
        <exception cref="T:System.InvalidOperationException">The specified cell when setting this property has a &lt;xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A&gt; or &lt;xref:System.Windows.Forms.DataGridViewCell.ColumnIndex%2A&gt; property value of -1, indicating that it is a header cell or a shared cell.  
  
 -or-  
  
 The specified cell when setting this property has a &lt;xref:System.Windows.Forms.DataGridViewCell.Visible%2A&gt; property value of <see langword="false" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedScrollingColumnHiddenWidth">
      <MemberSignature Language="C#" Value="public int FirstDisplayedScrollingColumnHiddenWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstDisplayedScrollingColumnHiddenWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the width of the portion of the column that is currently scrolled out of view..</summary>
        <value>The width of the portion of the column that is scrolled out of view.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedScrollingColumnIndex">
      <MemberSignature Language="C#" Value="public int FirstDisplayedScrollingColumnIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstDisplayedScrollingColumnIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the column that is the first column displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>The index of the column that is the first column displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0 or greater than the number of columns in the control minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property indicates a column with a &lt;xref:System.Windows.Forms.DataGridViewColumn.Visible%2A&gt; property value of <see langword="false" />.  
  
 -or-  
  
 The specified value when setting this property indicates a column with a &lt;xref:System.Windows.Forms.DataGridViewColumn.Frozen%2A&gt; property value of <see langword="true" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedScrollingRowIndex">
      <MemberSignature Language="C#" Value="public int FirstDisplayedScrollingRowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstDisplayedScrollingRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the index of the row that is the first row displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>The index of the row that is the first row displayed on the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property raises the <xref:System.Windows.Forms.DataGridView.Scroll> event.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0 or greater than the number of rows in the control minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property indicates a row with a &lt;xref:System.Windows.Forms.DataGridViewRow.Visible%2A&gt; property value of <see langword="false" />.  
  
 -or-  
  
 The specified value when setting this property indicates a column with a &lt;xref:System.Windows.Forms.DataGridViewRow.Frozen%2A&gt; property value of <see langword="true" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the font of the text displayed by the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control. The default is the value of the &lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Control.Font%2A> property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.  
  
 Because the <xref:System.Drawing.Font> is immutable (meaning that you cannot adjust any of its properties), you can only assign the <xref:System.Windows.Forms.Control.Font%2A> property a new <xref:System.Drawing.Font> object. However, you can base the new font on the existing font.  
  
 The <xref:System.Windows.Forms.DataGridView> control uses the value of the Font property as the default value of the <xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A> properties of <xref:System.Windows.Forms.DataGridViewCellStyle> objects returned by the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, and <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> properties. Changing the Font value automatically updates the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, and <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> properties, changing the font for any cell that inherits the value. Header cells override the value by default, and you can override the value for specific rows, columns, and cells. For more information about cell style inheritance, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates the use of this property. This example is part of a larger example available in [How to: Create an Unbound Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewSimpleUnbound#30](~/add/codesnippet/csharp/p-system.windows.forms.d_405_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSimpleUnbound#30](~/add/codesnippet/visualbasic/p-system.windows.forms.d_405_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FontChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FontChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.Font%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the FontChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the FontChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#271](~/add/codesnippet/csharp/e-system.windows.forms.d_54_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#271](~/add/codesnippet/visualbasic/e-system.windows.forms.d_54_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the foreground color of the <see cref="T:System.Windows.Forms.DataGridView" />. The default is the value of the &lt;xref:System.Windows.Forms.Control.DefaultForeColor%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Control.ForeColor%2A> property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.  
  
 Because the <xref:System.Drawing.Font> is immutable (meaning that you cannot adjust any of its properties), you can only assign the <xref:System.Windows.Forms.Control.Font%2A> property a new <xref:System.Drawing.Font> object. However, you can base the new font on the existing font.  
  
 The <xref:System.Windows.Forms.DataGridView> control uses the value of the ForeColor property as the default value of the <xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A> property of <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property. Changing the ForeColor value automatically updates the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property, changing the foreground text color for any cell that inherits the value. Header cells override the value by default, and you can override the value for specific rows, columns, and cells. For more information about cell style inheritance, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ForeColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.ForeColor%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ForeColorChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ForeColorChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#270](~/add/codesnippet/csharp/e-system.windows.forms.d_113_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#270](~/add/codesnippet/visualbasic/e-system.windows.forms.d_113_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityObjectById">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject GetAccessibilityObjectById(int32 objectId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="objectId">An <see langword="Int32" /> that identifies the <see cref="T:System.Windows.Forms.AccessibleObject" /> to retrieve.</param>
        <summary>Retrieves the specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</summary>
        <returns>The specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCellCount">
      <MemberSignature Language="C#" Value="public int GetCellCount (System.Windows.Forms.DataGridViewElementStates includeFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetCellCount(valuetype System.Windows.Forms.DataGridViewElementStates includeFilter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeFilter" Type="System.Windows.Forms.DataGridViewElementStates" />
      </Parameters>
      <Docs>
        <param name="includeFilter">A bitwise combination of the <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values specifying the cells to count.</param>
        <summary>Gets the number of cells that satisfy the provided filter.</summary>
        <returns>The number of cells that match the <paramref name="includeFilter" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful to determine the number of cells in a particular state. To retrieve the number of selected cells, for example, use this method with the <xref:System.Windows.Forms.DataGridViewElementStates?displayProperty=fullName> value. This is typically more efficient than using the <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> property.  
  
   
  
## Examples  
 The following code example illustrates how to use this method to determine whether there are any cells selected in a <xref:System.Windows.Forms.DataGridView> control. In this example, if any cells are selected, their values are retrieved through the <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A> method and displayed in a <xref:System.Windows.Forms.TextBox> control.  
  
 This code is part of a larger example illustrating the use of the Clipboard features of the <xref:System.Windows.Forms.DataGridView> control. This example is part of a larger example available in [How to: Enable Users to Copy Multiple Cells to the Clipboard from the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewClipboardDemo#16](~/add/codesnippet/csharp/772005c6-ad39-4372-b859-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewClipboardDemo#16](~/add/codesnippet/visualbasic/772005c6-ad39-4372-b859-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="includeFilter" /> includes the value <see cref="T:System.Windows.Forms.DataGridViewElementStates" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCellDisplayRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetCellDisplayRectangle (int columnIndex, int rowIndex, bool cutOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetCellDisplayRectangle(int32 columnIndex, int32 rowIndex, bool cutOverflow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cutOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The column index for the desired cell.</param>
        <param name="rowIndex">The row index for the desired cell.</param>
        <param name="cutOverflow">
          <see langword="true" /> to return the displayed portion of the cell only; <see langword="false" /> to return the entire cell bounds.</param>
        <summary>Returns the rectangle that represents the display area for a cell.</summary>
        <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the display rectangle of the cell.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns the entire cell bounds or the displayed portion only. To get the bounds of the cell contents only, use the cell <xref:System.Windows.Forms.DataGridViewCell.ContentBounds%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is less than -1 or greater than the number of columns in the control minus 1.  
  
 -or-  
  
 <paramref name="rowIndex" /> is less than -1 or greater than the number of rows in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetClipboardContent">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataObject GetClipboardContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataObject GetClipboardContent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the formatted values that represent the contents of the selected cells for copying to the <see cref="T:System.Windows.Forms.Clipboard" />.</summary>
        <returns>A <see cref="T:System.Windows.Forms.DataObject" /> that represents the contents of the selected cells.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method retrieves data that represents the region defined by the selected cells. This region is the smallest rectangle that includes all of the selected cells. The value for each selected cell in this region is retrieved by calling the <xref:System.Windows.Forms.DataGridViewCell.GetClipboardContent%2A?displayProperty=fullName> method. Blank placeholder values are used for unselected cells in this region. This method combines these values into a <xref:System.Windows.Forms.DataObject> containing several formats for copying to the clipboard. The supported clipboard formats include <xref:System.Windows.Forms.DataFormats.Text?displayProperty=fullName>, <xref:System.Windows.Forms.DataFormats.UnicodeText?displayProperty=fullName>, <xref:System.Windows.Forms.DataFormats.Html?displayProperty=fullName>, and <xref:System.Windows.Forms.DataFormats.CommaSeparatedValue?displayProperty=fullName>.  
  
 For more information, see the <xref:System.Windows.Forms.Clipboard> class.  
  
   
  
## Examples  
 The following code example demonstrates how to programmatically add selected <xref:System.Windows.Forms.DataGridView> content to the Clipboard. This example is part of a larger example available in [How to: Enable Users to Copy Multiple Cells to the Clipboard from the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewClipboardDemo#10](~/add/codesnippet/csharp/m-system.windows.forms.d_26_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewClipboardDemo#10](~/add/codesnippet/visualbasic/m-system.windows.forms.d_26_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">&lt;xref:System.Windows.Forms.DataGridView.ClipboardCopyMode%2A&gt; is set to <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetColumnDisplayRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetColumnDisplayRectangle (int columnIndex, bool cutOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetColumnDisplayRectangle(int32 columnIndex, bool cutOverflow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="cutOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The column index for the desired cell.</param>
        <param name="cutOverflow">
          <see langword="true" /> to return the column rectangle visible in the <see cref="T:System.Windows.Forms.DataGridView" /> bounds; <see langword="false" /> to return the entire column rectangle.</param>
        <summary>Returns the rectangle that represents the display area for a column, as determined by the column index.</summary>
        <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the display rectangle of the column.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRowDisplayRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetRowDisplayRectangle (int rowIndex, bool cutOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetRowDisplayRectangle(int32 rowIndex, bool cutOverflow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cutOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The row index for the desired cell.</param>
        <param name="cutOverflow">
          <see langword="true" /> to return the row rectangle visible in the <see cref="T:System.Windows.Forms.DataGridView" /> bounds; <see langword="false" /> to return the entire row rectangle.</param>
        <summary>Returns the rectangle that represents the display area for a row, as determined by the row index.</summary>
        <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the display rectangle of the row.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GridColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color GridColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of the grid lines separating the cells of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> or <see cref="T:System.Drawing.SystemColors" /> that represents the color of the grid lines. The default is <see cref="T:System.Drawing.KnownColor" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can set the GridColor property to any color when you use a single border; with other types of borders, the colors are specified by the operating system. If visual styles are enabled for the application through the <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> method, the GridColor property is ignored, and the current theme's colors are used.  
  
   
  
## Examples  
 The following code example demonstrates how to set the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, GridColor, <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, <xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, and <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> properties. In addition, the code example demonstrates how to set the <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> properties. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_365_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/cpp/p-system.windows.forms.d_365_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/csharp/p-system.windows.forms.d_365_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Drawing.Color.Empty" />.  
  
 -or-  
  
 The specified value when setting this property has a &lt;xref:System.Drawing.Color.A%2A?displayProperty=fullName&gt; property value that is less that 255.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler GridColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GridColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.GridColor%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the GridColorChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName>or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the GridColorChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#272](~/add/codesnippet/csharp/e-system.windows.forms.d_37_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#272](~/add/codesnippet/visualbasic/e-system.windows.forms.d_37_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridView.HitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.DataGridView/HitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridView+HitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate.</param>
        <param name="y">The y-coordinate.</param>
        <summary>Returns location information, such as row and column indices, given x- and y-coordinates.</summary>
        <returns>A &lt;xref:System.Windows.Forms.DataGridView.HitTestInfo&gt; that contains the location information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this method to determine which part of the <xref:System.Windows.Forms.DataGridView> control is located at the specified coordinates. For example, you can call this method—specifying the coordinates of a mouse click—to determine the row and column indexes of the clicked cell or whether a header cell or scroll bar was clicked.  
  
   
  
## Examples  
 The following code example illustrates the use of this method. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.Columns%2A> property reference topic.  
  
 [!code-cs[System.Windows.Forms.GridViewAutoSize#4](~/add/codesnippet/csharp/m-system.windows.forms.d_43_1.cs)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#4](~/add/codesnippet/visualbasic/m-system.windows.forms.d_43_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollBar">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.ScrollBar HorizontalScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ScrollBar HorizontalScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the horizontal scroll bar of the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ScrollBar" /> representing the horizontal scroll bar.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollingOffset">
      <MemberSignature Language="C#" Value="public int HorizontalScrollingOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalScrollingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of pixels by which the control is scrolled horizontally.</summary>
        <value>The number of pixels by which the control is scrolled horizontally.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of this property. This example is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_126_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#20](~/add/codesnippet/csharp/p-system.windows.forms.d_126_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvalidateCell">
      <MemberSignature Language="C#" Value="public void InvalidateCell (System.Windows.Forms.DataGridViewCell dataGridViewCell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateCell(class System.Windows.Forms.DataGridViewCell dataGridViewCell) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewCell" Type="System.Windows.Forms.DataGridViewCell" />
      </Parameters>
      <Docs>
        <param name="dataGridViewCell">The <see cref="T:System.Windows.Forms.DataGridViewCell" /> to invalidate.</param>
        <summary>Invalidates the specified cell of the <see cref="T:System.Windows.Forms.DataGridView" />, forcing it to be repainted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful to force a cell repaint in conditions that would not normally cause a cell to be repainted. For example, you can use this method with a custom cell type that changes its appearance as a result of external events.  
  
 For more information about painting and invalidation, see <xref:System.Windows.Forms.Control.Invalidate%2A>.  
  
   
  
## Examples  
 The following code example illustrates how to use this method in a customized <xref:System.Windows.Forms.DataGridViewCell> that is painted with a custom border when the mouse pointer rests on it. In the example, the cell is invalidated when the mouse pointer enters or leaves it.  
  
 This code is part of a larger example available in [How to: Customize Cells and Columns in the Windows Forms DataGridView Control by Extending Their Behavior and Appearance](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewRolloverCell#220](~/add/codesnippet/csharp/e127ddbe-3cbf-48d5-96b5-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/add/codesnippet/visualbasic/e127ddbe-3cbf-48d5-96b5-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataGridViewCell" /> does not belong to the <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataGridViewCell" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvalidateCell">
      <MemberSignature Language="C#" Value="public void InvalidateCell (int columnIndex, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateCell(int32 columnIndex, int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The column index of the cell to invalidate.</param>
        <param name="rowIndex">The row index of the cell to invalidate.</param>
        <summary>Invalidates the cell with the specified row and column indexes, forcing it to be repainted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful to force a cell repaint in conditions that would not normally cause a cell to be repainted. For example, you can use this method with a custom cell type that changes its appearance as a result of external events.  
  
 For more information about painting and invalidation, see <xref:System.Windows.Forms.Control.Invalidate%2A>.  
  
   
  
## Examples  
 The following code example illustrates how to use this method in a custom cell type that changes a cell's appearance when the user rests the mouse pointer over it. This example is part of a larger example available in [How to: Customize Cells and Columns in the Windows Forms DataGridView Control by Extending Their Behavior and Appearance](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewRolloverCell#220](~/add/codesnippet/csharp/m-system.windows.forms.d_33_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/add/codesnippet/visualbasic/m-system.windows.forms.d_33_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is less than -1 or greater than the number of columns in the control minus 1.  
  
 -or-  
  
 <paramref name="rowIndex" /> is less than -1 or greater than the number of rows in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvalidateColumn">
      <MemberSignature Language="C#" Value="public void InvalidateColumn (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateColumn(int32 columnIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column to invalidate.</param>
        <summary>Invalidates the specified column of the <see cref="T:System.Windows.Forms.DataGridView" />, forcing it to be repainted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about painting and invalidation, see <xref:System.Windows.Forms.Control.Invalidate%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is not in the valid range of 0 to the number of columns minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvalidateRow">
      <MemberSignature Language="C#" Value="public void InvalidateRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateRow(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row to invalidate.</param>
        <summary>Invalidates the specified row of the <see cref="T:System.Windows.Forms.DataGridView" />, forcing it to be repainted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to force a row to repaint itself. This method is useful in owner-drawing scenarios where you handle the <xref:System.Windows.Forms.DataGridView.RowPrePaint> or <xref:System.Windows.Forms.DataGridView.RowPostPaint> events.  
  
 For more information about painting and invalidation, see <xref:System.Windows.Forms.Control.Invalidate%2A>.  
  
   
  
## Examples  
 The following code example illustrates how to use the InvalidateRow method in a row-painting scenario. In the example, the row is invalidated when the current cell changes, forcing the row to repaint itself.  
  
 This code is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#19](~/add/codesnippet/visualbasic/m-system.windows.forms.d_77_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#19](~/add/codesnippet/csharp/m-system.windows.forms.d_77_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsCurrentCellDirty">
      <MemberSignature Language="C#" Value="public bool IsCurrentCellDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentCellDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current cell has uncommitted changes.</summary>
        <value>
          <see langword="true" /> if the current cell has uncommitted changes; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Windows.Forms.DataGridView> is not bound to data, the cell edit is considered committed when the user moves to another cell.  
  
 If row headers are visible, a pencil glyph is present in the header for the row that contains a cell with uncommitted changes.  
  
 If IsCurrentCellDirty is `true` and the current cell hosts an editing control, you can retrieve it through the <xref:System.Windows.Forms.DataGridView.EditingControl%2A> property.  
  
   
  
## Examples  
 The following code example uses the IsCurrentCellDirty property to determine whether to commit a cell value and raise the <xref:System.Windows.Forms.DataGridView.CellValueChanged> event from a handler for the <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> event. This code example is part of a larger example provided in [How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_341_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.DisabledButtons#5](~/add/codesnippet/csharp/p-system.windows.forms.d_341_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsCurrentCellInEditMode">
      <MemberSignature Language="C#" Value="public bool IsCurrentCellInEditMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentCellInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the currently active cell is being edited.</summary>
        <value>
          <see langword="true" /> if the current cell is being edited; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.DataGridViewCheckBoxCell> that has focus is always in edit mode. If the current cell hosts an editing control and IsCurrentCellInEditMode is `true`, you can retrieve the editing control through the <xref:System.Windows.Forms.DataGridView.EditingControl%2A> property.  
  
   
  
## Examples  
 The following code example illustrates the use of this property. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cs[System.Windows.Forms.DataGridView._Virtual#10](~/add/codesnippet/csharp/p-system.windows.forms.d_262_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#10](~/add/codesnippet/cpp/p-system.windows.forms.d_262_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_262_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsCurrentRowDirty">
      <MemberSignature Language="C#" Value="public bool IsCurrentRowDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentRowDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current row has uncommitted changes.</summary>
        <value>
          <see langword="true" /> if the current row has uncommitted changes; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns `true` when the pencil glyph is displayed in the row. By default, the IsCurrentRowDirty property will always equal the value of the <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> property, unless the <xref:System.Windows.Forms.DataGridView> is bound to a data source that supports editing, or virtual mode has been implemented to use row-level commit scope. In these cases, the <xref:System.Windows.Forms.DataGridView> will evaluate this property at the row level.  
  
 When the user navigates away from the row, the control commits all row changes. The user can also press CTRL+ENTER to commit row changes without leaving the row. To commit row changes programmatically, call the form's <xref:System.Windows.Forms.ContainerControl.Validate%2A> method. If your data source is a <xref:System.Windows.Forms.BindingSource>, you can also call<xref:System.Windows.Forms.BindingSource.EndEdit%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected override bool IsInputChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputChar(char charCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">The character to test.</param>
        <summary>Determines whether a character is an input character that the <see cref="T:System.Windows.Forms.DataGridView" /> recognizes.</summary>
        <returns>
          <see langword="true" /> if the character is recognized as an input character; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A character is recognized as an input character depending on whether the control is in edit mode and whether the current editing control can accept the character.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
        <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
        <returns>
          <see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell this[int columnIndex, int rowIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell Item(int32, int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column containing the cell.</param>
        <param name="rowIndex">The index of the row containing the cell.</param>
        <summary>Provides an indexer to get or set the cell located at the intersection of the column and row with the specified indexes.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewCell" /> at the specified location.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This indexer is an alternative to accessing cells through the <xref:System.Windows.Forms.DataGridViewRow.Cells%2A> collection of the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection.  
  
   
  
## Examples  
 The following code example demonstrates the use of this indexer.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#230](~/add/codesnippet/csharp/p-system.windows.forms.d_393_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#230](~/add/codesnippet/visualbasic/p-system.windows.forms.d_393_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1.  
  
 -or-  
  
 <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell this[string columnName, int rowIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell Item(string, int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnName">The name of the column containing the cell.</param>
        <param name="rowIndex">The index of the row containing the cell.</param>
        <summary>Provides an indexer to get or set the cell located at the intersection of the row with the specified index and the column with the specified name.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewCell" /> at the specified location.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This indexer is an alternative to accessing cells through the <xref:System.Windows.Forms.DataGridViewRow.Cells%2A> collection of the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection.  
  
   
  
## Examples  
 The following code example demonstrates the use of this indexer.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#230](~/add/codesnippet/csharp/p-system.windows.forms.d_74_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#230](~/add/codesnippet/visualbasic/p-system.windows.forms.d_74_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user is allowed to select more than one cell, row, or column of the <see cref="T:System.Windows.Forms.DataGridView" /> at a time.</summary>
        <value>
          <see langword="true" /> if the user can select more than one cell, row, or column at a time; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the MultiSelect property is set to `true`, multiple elements (cells, rows, or columns) can be selected in the <xref:System.Windows.Forms.DataGridView> control. To select multiple elements, the user can hold down the CTRL key while clicking the elements to select. Consecutive elements can be selected by clicking the first element to select and then, while holding down the SHIFT key, clicking the last element to select. The selection scope is based on the <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property. For example, if <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> is set to <xref:System.Windows.Forms.DataGridViewSelectionMode?displayProperty=fullName>, the user can select multiple columns.  
  
 You can use the MultiSelect property to allow a user to select multiple elements in the <xref:System.Windows.Forms.DataGridView> control and perform an operation on all the selected elements. For example, the user could select multiple cells and then right-click a selected cell to display a shortcut menu that displays a set of tasks to perform on the selected cells.  
  
 To determine which cells, rows, or columns are selected in the <xref:System.Windows.Forms.DataGridView> control, you can access the <xref:System.Windows.Forms.DataGridView.SelectedCells%2A>, <xref:System.Windows.Forms.DataGridView.SelectedRows%2A>, or <xref:System.Windows.Forms.DataGridView.SelectedColumns%2A> property. To determine the number of selected cells, call the <xref:System.Windows.Forms.DataGridView.GetCellCount%2A> method with an argument value of <xref:System.Windows.Forms.DataGridViewElementStates?displayProperty=fullName>. Use the <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowCount%2A> method to retrieve the number of selected rows and the <xref:System.Windows.Forms.DataGridViewColumnCollection.GetColumnCount%2A> method to retrieve the number of columns. These methods are more efficient than accessing the collections directly when working with large amounts of data. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to use the MultiSelect property. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_247_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/cpp/p-system.windows.forms.d_247_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/csharp/p-system.windows.forms.d_247_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MultiSelectChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultiSelectChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultiSelectChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.MultiSelect%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MultiSelectChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the MultiSelectChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#273](~/add/codesnippet/csharp/e-system.windows.forms.d_13_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#273](~/add/codesnippet/visualbasic/e-system.windows.forms.d_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewRowIndex">
      <MemberSignature Language="C#" Value="public int NewRowIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NewRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index of the row for new records.</summary>
        <value>The index of the row for new records, or -1 if &lt;xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A&gt; is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unless <xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A> is `false`, the value of this property is equal to the number of rows in the control minus 1.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewRowNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler NewRowNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler NewRowNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.VirtualMode%2A&gt; property of the <see cref="T:System.Windows.Forms.DataGridView" /> is <see langword="true" /> and the user navigates to the new row at the bottom of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Windows.Forms.DataGridView> is in virtual mode, this event allows a new entry to be created in the data store for the new row, and it also allows for the row to be populated with default values.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example uses the NewRowNeeded event to track when a new row is being added, so logic in the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> event handler can initialize a new row's cell to an initial value. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cs[System.Windows.Forms.DataGridView._Virtual#20](~/add/codesnippet/csharp/e-system.windows.forms.d_27_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#20](~/add/codesnippet/cpp/e-system.windows.forms.d_27_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#20](~/add/codesnippet/visualbasic/e-system.windows.forms.d_27_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NotifyCurrentCellDirty">
      <MemberSignature Language="C#" Value="public virtual void NotifyCurrentCellDirty (bool dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyCurrentCellDirty(bool dirty) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dirty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dirty">
          <see langword="true" /> to indicate the cell has uncommitted changes; otherwise, <see langword="false" />.</param>
        <summary>Notifies the <see cref="T:System.Windows.Forms.DataGridView" /> that the current cell has uncommitted changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to allow custom cell types to notify the <xref:System.Windows.Forms.DataGridView> when they have uncommitted changes.  
  
   
  
## Examples  
 The following code example illustrates the use of this method in a custom cell scenario. In the example, an <xref:System.Windows.Forms.IDataGridViewEditingControl> implementation derived from the <xref:System.Windows.Forms.DateTimePicker> class overrides the <xref:System.Windows.Forms.DateTimePicker.OnValueChanged%2A> method and uses the NotifyCurrentCellDirty method to indicate a change to the <xref:System.Windows.Forms.DataGridView> control.  
  
 This example is part of a larger example shown in [How to: Host Controls in Windows Forms DataGridView Cells](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewCalendarColumn#310](~/add/codesnippet/csharp/m-system.windows.forms.d_38_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#310](~/add/codesnippet/visualbasic/m-system.windows.forms.d_38_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToAddRowsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToAddRowsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToAddRowsChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAllowUserToAddRowsChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToDeleteRowsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToDeleteRowsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToDeleteRowsChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAllowUserToDeleteRowsChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToOrderColumnsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToOrderColumnsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToOrderColumnsChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAllowUserToOrderColumnsChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToResizeColumnsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToResizeColumnsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToResizeColumnsChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAllowUserToResizeColumnsChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToResizeRowsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToResizeRowsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToResizeRowsChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAllowUserToResizeRowsChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAlternatingRowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAlternatingRowsDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAlternatingRowsDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAlternatingRowsDefaultCellStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAutoGenerateColumnsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoGenerateColumnsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoGenerateColumnsChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAutoGenerateColumnsChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeColumnModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeColumnModeChanged (System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeColumnModeChanged(class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnModeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAutoSizeColumnModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The value of the &lt;xref:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs.Column%2A&gt; property of <paramref name="e" /> is null.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeColumnsModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeColumnsModeChanged (System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeColumnsModeChanged(class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAutoSizeColumnsModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value of the &lt;xref:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes%2A&gt; property of <paramref name="e" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The number of entries in the array returned by the &lt;xref:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes%2A&gt; property of <paramref name="e" /> is not equal to the number of columns in the control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeRowsModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeRowsModeChanged (System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeRowsModeChanged(class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.AutoSizeRowsModeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnAutoSizeRowsModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.BackgroundColorChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnBackgroundColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected override void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnBindingContextChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.BorderStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnBorderStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCancelRowEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCancelRowEdit (System.Windows.Forms.QuestionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCancelRowEdit(class System.Windows.Forms.QuestionEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.QuestionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.QuestionEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CancelRowEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCancelRowEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellBeginEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCellBeginEdit (System.Windows.Forms.DataGridViewCellCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellBeginEdit(class System.Windows.Forms.DataGridViewCellCancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see[NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellBeginEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellBorderStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellBorderStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see[NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellContentClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContentClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContentClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains information regarding the cell whose content was clicked.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContentClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellContentClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellContentDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContentDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContentDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContentDoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellContentDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContextMenuStripChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContextMenuStripChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellContextMenuStripChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContextMenuStripNeeded (System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContextMenuStripNeeded(class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellContextMenuStripNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellDoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellEndEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCellEndEdit (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellEndEdit(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellEndEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellEndEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnCellEnter (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellEnter(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellEnter" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellErrorTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellErrorTextChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellErrorTextChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellErrorTextChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is less than -1 or greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is less than -1 or greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellErrorTextNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellErrorTextNeeded (System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellErrorTextNeeded(class System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellErrorTextNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellFormatting">
      <MemberSignature Language="C#" Value="protected virtual void OnCellFormatting (System.Windows.Forms.DataGridViewCellFormattingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellFormatting(class System.Windows.Forms.DataGridViewCellFormattingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellFormattingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellFormattingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellFormatting" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellFormatting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnCellLeave (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellLeave(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellLeave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see[NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellMouseClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseDoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, double-clicking a cell puts the cell in edit mode.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellMouseDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseDown (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseDown(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellMouseDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseEnter (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseEnter(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseEnter" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see[NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellMouseEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseLeave (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseLeave(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseLeave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellMouseLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseMove (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseMove(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseMove" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellMouseMove method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseUp (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseUp(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellMouseUp" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellMouseUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellPainting">
      <MemberSignature Language="C#" Value="protected virtual void OnCellPainting (System.Windows.Forms.DataGridViewCellPaintingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCellPainting(class System.Windows.Forms.DataGridViewCellPaintingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellPaintingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellPaintingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellPainting" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellPainting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellPaintingEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellPaintingEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellParsing">
      <MemberSignature Language="C#" Value="protected virtual void OnCellParsing (System.Windows.Forms.DataGridViewCellParsingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellParsing(class System.Windows.Forms.DataGridViewCellParsingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellParsingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellParsingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellParsing" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellParsing method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellStateChanged (System.Windows.Forms.DataGridViewCellStateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellStateChanged(class System.Windows.Forms.DataGridViewCellStateChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellStateChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellStateChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellStyleChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellStyleChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellStyleContentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellStyleContentChanged (System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellStyleContentChanged(class System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellStyleContentChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellStyleContentChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellToolTipTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellToolTipTextChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellToolTipTextChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains information about the cell.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellToolTipTextChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellToolTipTextNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellToolTipTextNeeded (System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellToolTipTextNeeded(class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellToolTipTextNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValidated (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValidated(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValidated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellValidated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValidating (System.Windows.Forms.DataGridViewCellValidatingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValidating(class System.Windows.Forms.DataGridViewCellValidatingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellValidatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellValidatingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValidating" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellValidating method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellValidatingEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellValidatingEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellValueChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValueChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValueChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValueChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellValueChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellValueNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValueNeeded (System.Windows.Forms.DataGridViewCellValueEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValueNeeded(class System.Windows.Forms.DataGridViewCellValueEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellValueEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValueNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellValueNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is less than zero or greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is less than zero or greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCellValuePushed">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValuePushed (System.Windows.Forms.DataGridViewCellValueEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValuePushed(class System.Windows.Forms.DataGridViewCellValueEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellValueEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CellValuePushed" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCellValuePushed method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is less than zero or greater than the number of columns in the control minus one.  
  
 -or-  
  
 The value of the &lt;xref:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex%2A&gt; property of <paramref name="e" /> is less than zero or greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnAdded (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnAdded(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnAdded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnAdded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnContextMenuStripChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnContextMenuStripChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnContextMenuStripChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnDataPropertyNameChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDataPropertyNameChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDataPropertyNameChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnDataPropertyNameChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDefaultCellStyleChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDefaultCellStyleChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnDefaultCellStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnDisplayIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDisplayIndexChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDisplayIndexChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnDisplayIndexChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnDividerDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDividerDoubleClick (System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDividerDoubleClick(class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnDividerDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnDividerWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDividerWidthChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDividerWidthChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnDividerWidthChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderCellChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeaderCellChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeaderCellChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeaderMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeaderMouseClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex%2A&gt; property of <paramref name="e" /> is less than zero or greater than the number of columns in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeaderMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains information about the cell and the position of the mouse pointer.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeaderMouseDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeadersBorderStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeadersDefaultCellStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersHeightChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersHeightChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeadersHeightChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersHeightSizeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersHeightSizeModeChanged (System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersHeightSizeModeChanged(class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnHeadersHeightSizeModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnMinimumWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnMinimumWidthChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnMinimumWidthChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnMinimumWidthChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnNameChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnNameChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnNameChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnNameChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnNameChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnRemoved (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnRemoved(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnRemoved" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnRemoved method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnSortModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnSortModeChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnSortModeChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnSortModeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnSortModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnStateChanged (System.Windows.Forms.DataGridViewColumnStateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnStateChanged(class System.Windows.Forms.DataGridViewColumnStateChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnStateChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnStateChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The column changed from read-only to read/write, enabling the current cell to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnToolTipTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnToolTipTextChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnToolTipTextChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains information about the column.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnToolTipTextChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ColumnWidthChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnColumnWidthChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column indicated by the &lt;xref:System.Windows.Forms.DataGridViewColumnEventArgs.Column%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentCellChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentCellChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CurrentCellChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCurrentCellChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentCellDirtyStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentCellDirtyStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentCellDirtyStateChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCurrentCellDirtyStateChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCursorChanged">
      <MemberSignature Language="C#" Value="protected override void OnCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnCursorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event and updates the &lt;xref:System.Windows.Forms.DataGridView.UserSetCursor%2A&gt; property if the cursor was changed in user code.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control changes the <xref:System.Windows.Forms.Control.Cursor%2A> property value depending on the location of the mouse pointer. The <xref:System.Windows.Forms.DataGridView.UserSetCursor%2A> property stores the normal value of the <xref:System.Windows.Forms.Control.Cursor%2A> property and ignores the control's changes. This method is called when the <xref:System.Windows.Forms.Control.CursorChanged> event occurs, and it updates the <xref:System.Windows.Forms.DataGridView.UserSetCursor%2A> property, if necessary, in addition to invoking any event handlers.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnCursorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnDataBindingComplete (System.Windows.Forms.DataGridViewBindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataBindingComplete(class System.Windows.Forms.DataGridViewBindingCompleteEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewBindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataBindingComplete" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Binding operations occur when the data changes while a <xref:System.Windows.Forms.CurrencyManager> is in use. For example, if a <xref:System.Windows.Forms.CurrencyManager.ListChanged> event occurs, the <xref:System.Windows.Forms.DataGridView> will update its view and raise the <xref:System.Windows.Forms.DataGridView.DataBindingComplete> event when it is finished.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataError">
      <MemberSignature Language="C#" Value="protected virtual void OnDataError (bool displayErrorDialogIfNoHandler, System.Windows.Forms.DataGridViewDataErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataError(bool displayErrorDialogIfNoHandler, class System.Windows.Forms.DataGridViewDataErrorEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="displayErrorDialogIfNoHandler" Type="System.Boolean" />
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewDataErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="displayErrorDialogIfNoHandler">
          <see langword="true" /> to display an error dialog box if there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewDataErrorEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnDataError method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataMemberChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataMemberChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataMemberChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnDataMemberChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DataSourceChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnDataSourceChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DefaultCellStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnDefaultCellStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDefaultValuesNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnDefaultValuesNeeded (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDefaultValuesNeeded(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.DefaultValuesNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnDefaultValuesNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected override void OnDoubleClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDoubleClick(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnEditingControlShowing">
      <MemberSignature Language="C#" Value="protected virtual void OnEditingControlShowing (System.Windows.Forms.DataGridViewEditingControlShowingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEditingControlShowing(class System.Windows.Forms.DataGridViewEditingControlShowingEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" /> that contains information about the editing control.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.EditingControlShowing" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnEditingControlShowing method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnEditModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEditModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEditModeChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.EditModeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView.EditModeChanged> event is raised whenever the <xref:System.Windows.Forms.DataGridView.EditMode%2A> property changes.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnEditModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">When entering edit mode, the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected override void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected override void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Enter" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The control is configured to enter edit mode when it receives focus, but upon entering focus, the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.FontChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In addition to raising the <xref:System.Windows.Forms.DataGridView.FontChanged> event, this method uses the new value of the <xref:System.Windows.Forms.DataGridView.Font%2A> property to update the <xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A> properties of <xref:System.Windows.Forms.DataGridViewCellStyle> objects returned by the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, and <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A>properties.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnFontChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ForeColorChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In addition to raising the <xref:System.Windows.Forms.DataGridView.FontChanged> event, this method uses the new value of the <xref:System.Windows.Forms.DataGridView.ForeColor%2A> property to update the <xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A> property of <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnForeColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnGridColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnGridColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGridColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.GridColorChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnGridColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnHandleCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnKeyDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">This action would cause the control to enter edit mode but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnKeyPress method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnKeyUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected override void OnLayout (System.Windows.Forms.LayoutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnLayout method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected override void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected override void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected override void OnMouseClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnMouseClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates the use of this method.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc2#10](~/add/codesnippet/csharp/578c3792-9b2b-4d14-93b1-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#10](~/add/codesnippet/visualbasic/578c3792-9b2b-4d14-93b1-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected override void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnMouseDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the &lt;xref:System.Windows.Forms.Control.OnMouseEnter%2A&gt; event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnMouseLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example illustrates the use of this method. This example is part of a larger example available in [How to: Customize Cells and Columns in the Windows Forms DataGridView Control by Extending Their Behavior and Appearance](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewRolloverCell#220](~/add/codesnippet/csharp/m-system.windows.forms.d_21_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/add/codesnippet/visualbasic/m-system.windows.forms.d_21_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnMouseMove method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnMouseUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected override void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMultiSelectChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMultiSelectChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMultiSelectChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.MultiSelectChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnMultiSelectChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnNewRowNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnNewRowNeeded (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNewRowNeeded(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.NewRowNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnNewRowNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected override void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnPaint method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Any exceptions that occur during this method are ignored unless they are one of the following:  
  
-   &lt;xref:System.NullReferenceException&gt;  
  
-   <see cref="T:System.StackOverflowException" />  
  
-   &lt;xref:System.OutOfMemoryException&gt;  
  
-   <see cref="T:System.Threading.ThreadAbortException" />  
  
-   <see cref="T:System.ExecutionEngineException" />  
  
-   &lt;xref:System.IndexOutOfRangeException&gt;  
  
-   <see cref="T:System.AccessViolationException" /></exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnReadOnlyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnReadOnlyChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnReadOnlyChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.ReadOnlyChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnReadOnlyChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The control changed from read-only to read/write, enabling the current cell to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnResize method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected override void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowContextMenuStripChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowContextMenuStripChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowContextMenuStripChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowContextMenuStripNeeded (System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowContextMenuStripNeeded(class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnRowContextMenuStripNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDefaultCellStyleChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDefaultCellStyleChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowDefaultCellStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowDirtyStateNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDirtyStateNeeded (System.Windows.Forms.QuestionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDirtyStateNeeded(class System.Windows.Forms.QuestionEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.QuestionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.QuestionEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDirtyStateNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowDirtyStateNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowDividerDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDividerDoubleClick (System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDividerDoubleClick(class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDividerDoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowDividerDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowDividerHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDividerHeightChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDividerHeightChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowDividerHeightChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowDividerHeightChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnRowEnter (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowEnter(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowEnter" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnRowEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowErrorTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowErrorTextChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowErrorTextChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowErrorTextChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowErrorTextNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowErrorTextNeeded (System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowErrorTextNeeded(class System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnRowErrorTextNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeaderCellChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeaderCellChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeaderCellChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowHeaderCellChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeaderMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeaderMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains information about the mouse and the header cell that was clicked.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseClick" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeaderMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeaderMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" /> that contains information about the mouse and the header cell that was double-clicked.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowHeadersBorderStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowHeadersDefaultCellStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersWidthChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersWidthChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowHeadersWidthChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersWidthSizeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersWidthSizeModeChanged (System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersWidthSizeModeChanged(class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowHeadersWidthSizeModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeightChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeightChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeightChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowHeightChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeightInfoNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeightInfoNeeded (System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeightInfoNeeded(class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowHeightInfoNeeded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeightInfoPushed">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeightInfoPushed (System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeightInfoPushed(class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowHeightInfoPushed method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnRowLeave (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowLeave(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowLeave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowMinimumHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowMinimumHeightChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowMinimumHeightChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowMinimumHeightChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowMinimumHeightChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowPostPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnRowPostPaint (System.Windows.Forms.DataGridViewRowPostPaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRowPostPaint(class System.Windows.Forms.DataGridViewRowPostPaintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowPostPaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowPostPaintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowPostPaint" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowPostPaint method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowPrePaint">
      <MemberSignature Language="C#" Value="protected virtual void OnRowPrePaint (System.Windows.Forms.DataGridViewRowPrePaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRowPrePaint(class System.Windows.Forms.DataGridViewRowPrePaintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowPrePaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowPrePaintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowPrePaint" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowPrePaint method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowsAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowsAdded (System.Windows.Forms.DataGridViewRowsAddedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowsAdded(class System.Windows.Forms.DataGridViewRowsAddedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowsAddedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowsAddedEventArgs" /> that contains information about the added rows.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowsAdded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowsAdded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowsDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowsDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowsDefaultCellStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowsRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnRowsRemoved (System.Windows.Forms.DataGridViewRowsRemovedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowsRemoved(class System.Windows.Forms.DataGridViewRowsRemovedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowsRemovedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventArgs" /> that contains information about the deleted rows.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowsRemoved" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowsRemoved method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowStateChanged (int rowIndex, System.Windows.Forms.DataGridViewRowStateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowStateChanged(int32 rowIndex, class System.Windows.Forms.DataGridViewRowStateChangedEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row that is changing state.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowStateChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowStateChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowStateChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The row changed from read-only to read/write, enabling the current cell to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowUnshared">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUnshared (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUnshared(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowUnshared" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowUnshared method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowValidated (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowValidated(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowValidated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowValidated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowValidating (System.Windows.Forms.DataGridViewCellCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowValidating(class System.Windows.Forms.DataGridViewCellCancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.RowValidating" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnRowValidating method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnScroll (System.Windows.Forms.ScrollEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnScroll(class System.Windows.Forms.ScrollEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ScrollEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ScrollEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.Scroll" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnScroll method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectionChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains information about the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.SelectionChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSelectionChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSortCompare">
      <MemberSignature Language="C#" Value="protected virtual void OnSortCompare (System.Windows.Forms.DataGridViewSortCompareEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSortCompare(class System.Windows.Forms.DataGridViewSortCompareEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewSortCompareEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewSortCompareEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.SortCompare" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSortCompare method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSorted">
      <MemberSignature Language="C#" Value="protected virtual void OnSorted (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSorted(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.Sorted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnSorted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnUserAddedRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUserAddedRow (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserAddedRow(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.UserAddedRow" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnUserAddedRow method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The row indicated by the &lt;xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A&gt; property of <paramref name="e" /> does not belong to this <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnUserDeletedRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUserDeletedRow (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserDeletedRow(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.UserDeletedRow" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnUserDeletedRow method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnUserDeletingRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUserDeletingRow (System.Windows.Forms.DataGridViewRowCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserDeletingRow(class System.Windows.Forms.DataGridViewRowCancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGridView.UserDeletingRow" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnUserDeletingRow method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.ComponentModel.CancelEventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Validating" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In addition to raising the <xref:System.Windows.Forms.Control.Validating> event, this method ends the current cell edit and validates the cell and row values.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnValidating method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Validation failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected override void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; object that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is not relevant for this control.</summary>
        <value>A <see cref="T:System.Windows.Forms.Padding" /> instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not relevant for this control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.Padding%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView.Padding%2A> property is not relevant for this control, although you can change its value and respond to such changes by handling this event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaintBackground">
      <MemberSignature Language="C#" Value="protected virtual void PaintBackground (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle gridBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PaintBackground(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle gridBounds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="gridBounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the background.</param>
        <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be painted.</param>
        <param name="gridBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area in which cells are drawn.</param>
        <summary>Paints the background of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `clipBounds` parameter represents the area of the <xref:System.Windows.Forms.DataGridView> that needs to be repainted. For example, if a user covers the entire <xref:System.Windows.Forms.DataGridView> with another window and then uncovers it, then `clipBounds` represents the entire <xref:System.Windows.Forms.DataGridView>. If a user covers a small area of the <xref:System.Windows.Forms.DataGridView> and then uncovers it, then `clipBounds` represents the small area that was covered.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessAKey">
      <MemberSignature Language="C#" Value="protected bool ProcessAKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessAKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the A key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns `true` when the user presses CTRL+A and the <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> property is `true`. By default, this selects all cells in the control.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessDataGridViewKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDataGridViewKey (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDataGridViewKey(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Contains information about the key that was pressed.</param>
        <summary>Processes keys used for navigating in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method calls the key-processing method appropriate to the key pressed (for example, the <xref:System.Windows.Forms.DataGridView.ProcessF2Key%2A> method when F2 is pressed) and returns the return value of that method.  
  
   
  
## Examples  
 The following code example demonstrates how to change the behavior of the ENTER key in a <xref:System.Windows.Forms.DataGridView> subclass by overriding the ProcessDataGridViewKey and <xref:System.Windows.Forms.DataGridView.ProcessDialogKey%2A> methods. In the example, the ENTER key has the same behavior as the RIGHT ARROW key, making it easier for a user to edit multiple cells in a single row of data.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc2#70](~/add/codesnippet/csharp/7c073b5d-2aa6-4c58-9f96-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#70](~/add/codesnippet/visualbasic/7c073b5d-2aa6-4c58-9f96-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.  
  
 -or-  
  
 The DELETE key would delete one or more rows, but an error in the data source prevents the deletion and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessDeleteKey">
      <MemberSignature Language="C#" Value="protected bool ProcessDeleteKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessDeleteKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the DELETE key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns `true` when the user presses DELETE to delete rows in the control. The user can delete rows if the <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property is set to <xref:System.Windows.Forms.DataGridViewSelectionMode> or <xref:System.Windows.Forms.DataGridViewSelectionMode> and the <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> property is set to `true`. If the <xref:System.Windows.Forms.DataGridView> is bound to data, the <xref:System.ComponentModel.IBindingList.AllowRemove%2A?displayProperty=fullName> property of the data source must also be set to `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The DELETE key would delete one or more rows, but an error in the data source prevents the deletion and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes keys, such as the TAB, ESCAPE, ENTER, and ARROW keys, used to control dialog boxes.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called in edit mode to handle keyboard input that is not handled by the hosted editing control.  
  
 If a key press is determined to not be an input key, it will be sent to the base class for processing.  
  
   
  
## Examples  
 The following code example demonstrates how to change the behavior of the ENTER key in a <xref:System.Windows.Forms.DataGridView> subclass by overriding the <xref:System.Windows.Forms.DataGridView.ProcessDataGridViewKey%2A> and ProcessDialogKey methods. In the example, the ENTER key has the same behavior as the RIGHT ARROW key, making it easier for a user to edit multiple cells in a single row of data.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc2#70](~/add/codesnippet/csharp/m-system.windows.forms.d_87_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#70](~/add/codesnippet/visualbasic/m-system.windows.forms.d_87_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for using all windows and user events when the TAB key is pressed. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value:<see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessDownKey">
      <MemberSignature Language="C#" Value="protected bool ProcessDownKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessDownKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the DOWN ARROW key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The DOWN ARROW key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessEndKey">
      <MemberSignature Language="C#" Value="protected bool ProcessEndKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessEndKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the END key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The END key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessEnterKey">
      <MemberSignature Language="C#" Value="protected bool ProcessEnterKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessEnterKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the ENTER key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The ENTER key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessEscapeKey">
      <MemberSignature Language="C#" Value="protected bool ProcessEscapeKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessEscapeKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the ESC key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessF2Key">
      <MemberSignature Language="C#" Value="protected bool ProcessF2Key (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessF2Key(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the F2 key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The F2 key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">The F2 key would cause the control to enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessHomeKey">
      <MemberSignature Language="C#" Value="protected bool ProcessHomeKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessHomeKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">The key that was pressed.</param>
        <summary>Processes the HOME key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The HOME key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessInsertKey">
      <MemberSignature Language="C#" Value="protected bool ProcessInsertKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessInsertKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
        <summary>Processes the INSERT key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyEventArgs">
      <MemberSignature Language="C#" Value="protected override bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessKeyEventArgs(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
        <summary>Processes a key message and generates the appropriate control events.</summary>
        <returns>
          <see langword="true" /> if the message was processed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information, see the <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A?displayProperty=fullName> method on the base class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected override bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
        <summary>Previews a keyboard message.</summary>
        <returns>
          <see langword="true" /> if the message was processed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information, see the <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A?displayProperty=fullName> method on the base class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessLeftKey">
      <MemberSignature Language="C#" Value="protected bool ProcessLeftKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessLeftKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the LEFT ARROW key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The LEFT ARROW key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessNextKey">
      <MemberSignature Language="C#" Value="protected bool ProcessNextKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessNextKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the PAGE DOWN key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The PAGE DOWN key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessPriorKey">
      <MemberSignature Language="C#" Value="protected bool ProcessPriorKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessPriorKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the PAGE UP key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The PAGE UP key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessRightKey">
      <MemberSignature Language="C#" Value="protected bool ProcessRightKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessRightKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the RIGHT ARROW key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to change the behavior of the ENTER key in a <xref:System.Windows.Forms.DataGridView> subclass by overriding the <xref:System.Windows.Forms.DataGridView.ProcessDataGridViewKey%2A> and <xref:System.Windows.Forms.DataGridView.ProcessDialogKey%2A> methods. In the example, the ENTER key has the same behavior as the RIGHT ARROW key, making it easier for a user to edit multiple cells in a single row of data.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc2#70](~/add/codesnippet/csharp/m-system.windows.forms.d_72_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#70](~/add/codesnippet/visualbasic/m-system.windows.forms.d_72_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The RIGHT ARROW key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessSpaceKey">
      <MemberSignature Language="C#" Value="protected bool ProcessSpaceKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessSpaceKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
        <summary>Processes the SPACEBAR.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessTabKey">
      <MemberSignature Language="C#" Value="protected bool ProcessTabKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessTabKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the TAB key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The TAB key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for using all windows and user events. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessUpKey">
      <MemberSignature Language="C#" Value="protected bool ProcessUpKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessUpKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the UP ARROW key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The UP ARROW key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessZeroKey">
      <MemberSignature Language="C#" Value="protected bool ProcessZeroKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessZeroKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys" /> values that represents the key or keys to process.</param>
        <summary>Processes the 0 key.</summary>
        <returns>
          <see langword="true" /> if the key was processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">The 0 key would cause the control to enter edit mode, but the &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <exception cref="T:System.Exception">This action would cause the control to enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user can edit the cells of the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <value>
          <see langword="true" /> if the user cannot edit the cells of the <see cref="T:System.Windows.Forms.DataGridView" /> control; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cell is read-only if the value of the ReadOnly property is `true` for the cell, the cell's row, the cell's column, or the <xref:System.Windows.Forms.DataGridView>.  
  
   
  
## Examples  
 The following code example illustrates the use of this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_286_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_286_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="true" />, the current cell is in edit mode, and the current cell contains changes that cannot be committed.</exception>
        <exception cref="T:System.Exception">The specified value when setting this property would cause the control to enter edit mode, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event or the handler has set the &lt;xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=fullName&gt; property to <see langword="true" />. The exception object can typically be cast to type &lt;xref:System.FormatException&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ReadOnlyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ReadOnlyChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.ReadOnly%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ReadOnlyChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type<xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the ReadOnlyChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#274](~/add/codesnippet/csharp/e-system.windows.forms.d_34_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#274](~/add/codesnippet/visualbasic/e-system.windows.forms.d_34_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RefreshEdit">
      <MemberSignature Language="C#" Value="public bool RefreshEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RefreshEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Refreshes the value of the current cell with the underlying cell value when the cell is in edit mode, discarding any previous value.</summary>
        <returns>
          <see langword="true" /> if successful; <see langword="false" /> if a <see cref="E:System.Windows.Forms.DataGridView.DataError" /> event occurred.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call this method to force a cell to update its display value in edit mode. This is useful when an external process modifies the cell value and you want to notify the user of the change, even when a user-specified change is lost as a result.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetText">
      <MemberSignature Language="C#" Value="public override void ResetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGridView.Text%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although this method behaves as described, the <xref:System.Windows.Forms.DataGridView.Text%2A> property is not relevant for this control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowContextMenuStripChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of theRowContextMenuStripChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowContextMenuStripChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#338](~/add/codesnippet/csharp/e-system.windows.forms.d_159_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#338](~/add/codesnippet/visualbasic/e-system.windows.forms.d_159_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's shortcut menu is needed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowContextMenuStripNeeded event occurs only when the <xref:System.Windows.Forms.DataGridView> control <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is set or its <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is `true`. Handling the RowContextMenuStripNeeded event is useful when you want to display a shortcut menu determined by a row's current state or the values it contains.  
  
 When you handle the RowContextMenuStripNeeded event, the shortcut menu that you specify in the handler is shown whenever the user right-clicks a row unless the <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> overrides the shortcut menu for the specific cell that was clicked.  
  
 The RowContextMenuStripNeeded event also occurs whenever the value of the <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A?displayProperty=fullName> property is retrieved, either programmatically or when the user right-clicks a row.  
  
 You can use the <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs.RowIndex%2A?displayProperty=fullName> property to determine the state of a row or the values it contains, and use this information to change or modify the <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs.ContextMenuStrip%2A?displayProperty=fullName> property. This property is initialized with the value of the row <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> property, which the event value overrides.  
  
 Handle the RowContextMenuStripNeeded event when working with large amounts of data to avoid the performance penalties of setting the row <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> value for multiple rows. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example handles the RowContextMenuStripNeeded event to provide a <xref:System.Windows.Forms.ContextMenuStrip> based on the title of the employee. In this example, there are two shortcut menus, one for managers and one for all other employees.  
  
 [!code-cs[System.Windows.Forms.DataGridView_NeededEvents#10](~/add/codesnippet/csharp/e-system.windows.forms.d_6_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView_NeededEvents#10](~/add/codesnippet/visualbasic/e-system.windows.forms.d_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowCount">
      <MemberSignature Language="C#" Value="public int RowCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of rows displayed in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>The number of rows to display in the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If RowCount is set to a value less than the current value, rows will be removed from the end of the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection. If RowCount is set to a value greater than the current value, rows will be added to the end of the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection. The additional rows are based on the row specified in the <xref:System.Windows.Forms.DataGridView.RowTemplate%2A> property.  
  
 If you set the RowCount property to 0, all rows will be removed from the <xref:System.Windows.Forms.DataGridView>. This is equivalent to calling the <xref:System.Windows.Forms.DataGridViewRowCollection.Clear%2A?displayProperty=fullName> method.  
  
> [!NOTE]
>  If <xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A> is `true`, you cannot set RowCount to 0. In this case, call the <xref:System.Windows.Forms.DataGridViewRowCollection.Clear%2A?displayProperty=fullName> method to remove all rows except the row for new records. Calling <xref:System.Windows.Forms.DataGridViewRowCollection.Clear%2A> has the same result as setting RowCount to 1 in this case, but is much faster.  
  
 The RowCount property can be used with the <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> property to create a simple <xref:System.Windows.Forms.DataGridView> for displaying and editing text. If you set the RowCount property to a value greater than 0 for a <xref:System.Windows.Forms.DataGridView> control without columns, a <xref:System.Windows.Forms.DataGridViewTextBoxColumn> is added automatically.  
  
   
  
## Examples  
 The following code example demonstrates the use of the RowCount property. In this example, this property is used to track the number of entries in a <xref:System.Windows.Forms.DataGridView>. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectionSum#10](~/add/codesnippet/csharp/p-system.windows.forms.d_267_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_267_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified value when setting this property is less than 0.  
  
 -or-  
  
 The specified value is less than 1 and &lt;xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A&gt; is set to <see langword="true" />.</exception>
        <exception cref="T:System.InvalidOperationException">When setting this property, the &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt; property is set.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A&gt; property for a row changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when any property of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> property for a row is set to a new value or when the <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> property for a row is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowDefaultCellStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowDefaultCellStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#340](~/add/codesnippet/csharp/e-system.windows.forms.d_4_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#340](~/add/codesnippet/visualbasic/e-system.windows.forms.d_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDirtyStateNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QuestionEventHandler RowDirtyStateNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QuestionEventHandler RowDirtyStateNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QuestionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.VirtualMode%2A&gt; property of the <see cref="T:System.Windows.Forms.DataGridView" /> control is <see langword="true" /> and the <see cref="T:System.Windows.Forms.DataGridView" /> needs to determine whether the current row has uncommitted changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, this event sets the <xref:System.Windows.Forms.QuestionEventArgs.Response%2A?displayProperty=fullName> property to `true` if any cells in the current row have been modified. This causes the <xref:System.Windows.Forms.DataGridView.CancelRowEdit> event to occur when the user reverts edits to a row. Users can revert edits to a row by pressing ESC twice when a cell is in edit mode or once outside of edit mode. This event can be used for customizing commit scope in virtual mode by setting the <xref:System.Windows.Forms.QuestionEventArgs.Response%2A?displayProperty=fullName> property to the correct value depending on the chosen commit scope.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to handle this event to provide cell-level commit scope, meaning that the user can revert changes to the current cell only. In cell-level commit scope, the row is treated as having uncommitted changes only when the current cell has uncommitted changes, rather than when any cell in the row has uncommitted changes. This example is part of a larger example available in [Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.VirtualMode#160](~/add/codesnippet/cpp/e-system.windows.forms.d_88_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.VirtualMode#160](~/add/codesnippet/visualbasic/e-system.windows.forms.d_88_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.VirtualMode#160](~/add/codesnippet/csharp/e-system.windows.forms.d_88_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDividerDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user double-clicks the divider between two rows.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this event to customize the automatic sizing behavior that occurs when a user double-clicks a row divider.  
  
 The row <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A> property does not extend the area in which a user can double-click. If the height of a divider has been increased through the use of this property, this event occurs when the user double-clicks the boundary between the divider and the adjacent column.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowDividerDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowDividerDoubleClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#342](~/add/codesnippet/csharp/e-system.windows.forms.d_10_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#342](~/add/codesnippet/visualbasic/e-system.windows.forms.d_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowDividerHeightChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowDividerHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowDividerHeightChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridViewRow.DividerHeight%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The divider height is modified by setting the <xref:System.Windows.Forms.DataGridViewRow.DividerHeight%2A> property.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowDividerHeightChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowDividerHeightChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#343](~/add/codesnippet/csharp/e-system.windows.forms.d_2_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#343](~/add/codesnippet/visualbasic/e-system.windows.forms.d_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler RowEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler RowEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row receives input focus but before it becomes the current row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when the <xref:System.Windows.Forms.DataGridView> is initially loaded, as well as when the user selects a row other than the current row.  
  
 This event occurs before the <xref:System.Windows.Forms.DataGridView.CurrentRow%2A> property is updated. To retrieve the index of the newly-entered row, use the <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A?displayProperty=fullName> property within the event handler.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to handle this event to change the <xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A> property of the cells in the current row. In this example, the background color is set in the RowEnter event, then reset to <xref:System.Drawing.Color.Empty> on the <xref:System.Windows.Forms.DataGridView.RowLeave> event. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and ensure that all events are associated with their event handlers.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#200](~/add/codesnippet/csharp/e-system.windows.forms.d_164_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#200](~/add/codesnippet/visualbasic/e-system.windows.forms.d_164_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowErrorTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowErrorTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowErrorTextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A&gt; property of a row changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowErrorTextChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowErrorTextChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#345](~/add/codesnippet/csharp/e-system.windows.forms.d_94_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#345](~/add/codesnippet/visualbasic/e-system.windows.forms.d_94_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowErrorTextNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's error text is needed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowErrorTextNeeded event occurs only when the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property of the <xref:System.Windows.Forms.DataGridView> control is set or its <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is `true`. Handling the RowErrorTextNeeded event is useful when you want to determine the error for a row depending on its state and the values it contains.  
  
 When you handle the RowErrorTextNeeded event and specify error text in the handler, an error glyph appears in the row header unless the <xref:System.Windows.Forms.DataGridView.ShowRowErrors%2A> property is set to `false`. When the user moves the mouse pointer over the error glyph, the error text appears in a ToolTip.  
  
 The RowErrorTextNeeded event also occurs whenever the value of the <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A?displayProperty=fullName> property is retrieved.  
  
 You can use the <xref:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs.RowIndex%2A?displayProperty=fullName> property to determine the state of a row or the values it contains, and use this information to change or modify the <xref:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs.ErrorText%2A?displayProperty=fullName> property. This property is initialized with the value of the row <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> property, which the event value overrides.  
  
 Handle the RowErrorTextNeeded event when working with large amounts of data to avoid the performance penalties of setting the row <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> value for multiple rows. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowErrorTextNeeded event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowErrorTextNeeded event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#346](~/add/codesnippet/csharp/e-system.windows.forms.d_42_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#346](~/add/codesnippet/visualbasic/e-system.windows.forms.d_42_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderCellChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowHeaderCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowHeaderCellChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user changes the contents of a row header cell.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowHeaderCellChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowHeaderCellChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#349](~/add/codesnippet/csharp/e-system.windows.forms.d_1_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#349](~/add/codesnippet/visualbasic/e-system.windows.forms.d_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks within the boundaries of a row header.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates the use of this event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectedCollections#05](~/add/codesnippet/csharp/e-system.windows.forms.d_74_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectedCollections#05](~/add/codesnippet/visualbasic/e-system.windows.forms.d_74_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row header is double-clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowHeaderMouseDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowHeaderMouseDoubleClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#348](~/add/codesnippet/csharp/e-system.windows.forms.d_145_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#348](~/add/codesnippet/visualbasic/e-system.windows.forms.d_145_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewHeaderBorderStyle RowHeadersBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewHeaderBorderStyle RowHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border style of the row header cells.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the RowHeadersBorderStyle property is set to anything other than <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle>, the <xref:System.Windows.Forms.DataGridView.GridColor%2A> property must be a system color.  
  
 You cannot set this property to the <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle> value, which is a read-only value indicating that the border style has been customized through the use of the <xref:System.Windows.Forms.DataGridView.AdvancedRowHeadersBorderStyle%2A> property.  
  
> [!NOTE]
>  If visual styles are enabled for the application through the <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> method and the <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> property is `true`, the row headers are painted using the current theme. In this case, the value of the RowHeadersBorderStyle property is ignored for all row headers except the <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A>, to which the theme is not applied.  
  
   
  
## Examples  
 The following code example illustrates the use of this property.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#030](~/add/codesnippet/csharp/p-system.windows.forms.d_10_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#030](~/add/codesnippet/visualbasic/p-system.windows.forms.d_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> value.</exception>
        <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowHeadersBorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeadersBorderStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyle%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowHeadersBorderStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowHeadersBorderStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#275](~/add/codesnippet/csharp/e-system.windows.forms.d_99_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#275](~/add/codesnippet/visualbasic/e-system.windows.forms.d_99_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle RowHeadersDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle RowHeadersDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default style applied to the row header cells.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that represents the default style applied to the row header cells.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default <xref:System.Windows.Forms.DataGridViewCellStyle> returned by this property has the following initial property values.  
  
|DataGridViewCellStyle property|Default value|  
|------------------------------------|-------------------|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A>|The value of the <xref:System.Drawing.SystemBrushes.Control%2A?displayProperty=fullName> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A>|The value of the <xref:System.Drawing.SystemBrushes.WindowText%2A?displayProperty=fullName> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A>|The value of the <xref:System.Drawing.SystemBrushes.Highlight%2A?displayProperty=fullName> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionForeColor%2A>|The value of the <xref:System.Drawing.SystemBrushes.HighlightText%2A?displayProperty=fullName> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A>|The value of the <xref:System.Windows.Forms.DataGridView.Font%2A> property.|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Alignment%2A>|<xref:System.Windows.Forms.DataGridViewContentAlignment?displayProperty=fullName>|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A>|<xref:System.Windows.Forms.DataGridViewTriState?displayProperty=fullName>|  
  
 These values automatically override the values set through the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property. To force row headers to inherit the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> values, you must set the values in the RowHeadersDefaultCellStyle object to the default values indicated for the <xref:System.Windows.Forms.DataGridViewCellStyle> class.  
  
 For more information about cell style inheritance, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates how to use this property in a <xref:System.Windows.Forms.DataGridView> with custom colors. Note how the <xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A?displayProperty=fullName> property is set to <xref:System.Drawing.Color.Empty?displayProperty=fullName> so that the value is inherited from the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> object.  
  
 This example is part of a larger example provided in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_203_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_203_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowHeadersDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeadersDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when a property of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> property is set to a new value or when the <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowHeadersDefaultCellStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowHeadersDefaultCellStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#276](~/add/codesnippet/csharp/e-system.windows.forms.d_157_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#276](~/add/codesnippet/visualbasic/e-system.windows.forms.d_157_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersVisible">
      <MemberSignature Language="C#" Value="public bool RowHeadersVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RowHeadersVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the column that contains row headers is displayed.</summary>
        <value>
          <see langword="true" /> if the column that contains row headers is displayed; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the RowHeadersVisible property is `false`, a row whose <xref:System.Windows.Forms.DataGridViewBand.Resizable%2A> property is set to `true`can still be resized in the user interface (UI) by clicking the mouse cursor anywhere along the bottom border of the row to be resized.  
  
   
  
## Examples  
 The following code example demonstrates how to set the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.GridColor%2A>, <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, RowHeadersVisible, <xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, and <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> properties. In addition, the code example demonstrates how to set the <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> properties. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_123_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/cpp/p-system.windows.forms.d_123_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/csharp/p-system.windows.forms.d_123_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="false" /> and the &lt;xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A&gt; property is set to <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> or <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidth">
      <MemberSignature Language="C#" Value="public int RowHeadersWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowHeadersWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width, in pixels, of the column that contains the row headers.</summary>
        <value>The width, in pixels, of the column that contains row headers. The default is 43.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RowHeadersWidth property can be used to resize the row header column to a specified width. To adjust the width of this column to fit the contents of the row header cells, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> method.  
  
   
  
## Examples  
 The following code example illustrates how to use the RowHeadersWidth property in a row-painting scenario. In the example, the value of this property is used to calculate the bounds within which a custom background is drawn.  
  
 This code is part of a larger example available in[How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_30_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#20](~/add/codesnippet/csharp/p-system.windows.forms.d_30_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than the minimum width of 4 pixels or is greater than the maximum width of 32768 pixels.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidthChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowHeadersWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeadersWidthChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when value of the &lt;xref:System.Windows.Forms.DataGridView.RowHeadersWidth%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowHeadersWidthChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowHeadersWidthChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#277](~/add/codesnippet/csharp/e-system.windows.forms.d_39_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#277](~/add/codesnippet/visualbasic/e-system.windows.forms.d_39_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidthSizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the width of the row headers is adjustable and whether it can be adjusted by the user or is automatically adjusted to fit the contents of the headers.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value indicating the mode by which the width of the row headers can be adjusted. The default is <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to an automatic sizing mode, the width of the row headers cannot be adjusted by the user.  
  
 To adjust the height of the row headers programmatically, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> method or set the <xref:System.Windows.Forms.DataGridView.RowHeadersWidth%2A> property.  
  
 To set the sizing mode for the column headers, use the <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> property.  
  
 For more information about header sizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridView> control does not support double buffering. If <xref:System.Windows.Forms.Control.DoubleBuffered%2A> is set to `true` in a derived <xref:System.Windows.Forms.DataGridView> control, users will not receive visual feedback when resizing rows, columns, or headers or when reordering columns.  
  
   
  
## Examples  
 The following code example illustrates how to use this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_27_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_27_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidthSizeModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowHeadersWidthSizeModeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowHeadersWidthSizeModeChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#278](~/add/codesnippet/csharp/e-system.windows.forms.d_61_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#278](~/add/codesnippet/visualbasic/e-system.windows.forms.d_61_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeightChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowHeightChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewRow.Height%2A&gt; property for a row changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates the use of this event. This example is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#40](~/add/codesnippet/visualbasic/e-system.windows.forms.d_129_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#40](~/add/codesnippet/csharp/e-system.windows.forms.d_129_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeightInfoNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when information about row height is requested.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is useful for preserving custom row heights after a sorting operation. This is necessary because sorting operations are normally handled by the data source, which does not keep track of the correspondence between rows of data and rows in the control. This event occurs only when the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property has been set or when the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is `true`. In the latter case, you provide your own data store and sorting operations. Handle the <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> event to store updated height information when the user changes a row height. Use RowHeightInfoNeeded to retrieve the stored height information when the control needs it.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowHeightInfoNeeded event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowHeightInfoNeeded event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#351](~/add/codesnippet/csharp/e-system.windows.forms.d_116_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#351](~/add/codesnippet/visualbasic/e-system.windows.forms.d_116_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeightInfoPushed">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user changes the height of a row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised when the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is set to `true` or the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is set to a value other than `null`. This event is used to track and store row height information so that it can be restored after a sorting operation. To restore height information, handle the <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> event. Note that this event occurs only when the user changes the height of a row. If you change the height of a row programmatically, you must store the new height information at the same time.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowHeightInfoPushed event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowHeightInfoPushed event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#352](~/add/codesnippet/csharp/e-system.windows.forms.d_163_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#352](~/add/codesnippet/visualbasic/e-system.windows.forms.d_163_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler RowLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler RowLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row loses input focus and is no longer the current row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to handle this event to change the <xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A> property of the cells in the current row. In this example, the background color is set in the <xref:System.Windows.Forms.DataGridView.RowEnter> event, then reset to <xref:System.Drawing.Color.Empty> on the RowLeave event. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and ensure that all events are associated with their event handlers.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#200](~/add/codesnippet/csharp/e-system.windows.forms.d_102_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#200](~/add/codesnippet/visualbasic/e-system.windows.forms.d_102_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowMinimumHeightChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowMinimumHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowMinimumHeightChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridViewRow.MinimumHeight%2A&gt; property for a row changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowMinimumHeightChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowMinimumHeightChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#354](~/add/codesnippet/csharp/e-system.windows.forms.d_144_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#354](~/add/codesnippet/visualbasic/e-system.windows.forms.d_144_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowPostPaint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowPostPaintEventHandler RowPostPaint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowPostPaintEventHandler RowPostPaint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowPostPaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a <see cref="T:System.Windows.Forms.DataGridViewRow" /> is painted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can handle this event alone or in combination with the <xref:System.Windows.Forms.DataGridView.RowPrePaint> event to customize the appearance of rows in the control. You can paint entire rows yourself, or paint specific parts of rows and use the following methods of the <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs> class to paint other parts:  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.DrawFocus%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintCells%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintCellsBackground%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintCellsContent%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintHeader%2A>  
  
 You can also use the <xref:System.Windows.Forms.VisualStyles.VisualStyleRenderer> class to paint standard controls using the current theme. For more information, see [Rendering Controls with Visual Styles](~/add/includes/ajax-current-ext-md.md). If you are using [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], you also have access to a large library of standard images that you can use with the <xref:System.Windows.Forms.DataGridView> control.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use a handler for the RowPostPaint event to paint textual content that spans the entire row below the normal cell values. This example is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#30](~/add/codesnippet/visualbasic/e-system.windows.forms.d_85_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#30](~/add/codesnippet/csharp/e-system.windows.forms.d_85_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowPrePaint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowPrePaintEventHandler RowPrePaint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowPrePaintEventHandler RowPrePaint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowPrePaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before a <see cref="T:System.Windows.Forms.DataGridViewRow" /> is painted</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can handle this event alone or in combination with the <xref:System.Windows.Forms.DataGridView.RowPostPaint> event to customize the appearance of rows in the control. You can paint entire rows yourself, or paint specific parts of rows and use the following methods of the <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs> class to paint other parts:  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.DrawFocus%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintCells%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintCellsBackground%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintCellsContent%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintHeader%2A>  
  
 You can also use the <xref:System.Windows.Forms.VisualStyles.VisualStyleRenderer> class to paint standard controls using the current theme. For more information, see [Rendering Controls with Visual Styles](~/add/includes/ajax-current-ext-md.md). If you are using [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], you also have access to a large library of standard images that you can use with the <xref:System.Windows.Forms.DataGridView> control.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use a handler for the RowPrePaint event to paint a gradient row background if the row is selected. This example is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#20](~/add/codesnippet/visualbasic/e-system.windows.forms.d_103_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#20](~/add/codesnippet/csharp/e-system.windows.forms.d_103_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRowCollection Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRowCollection Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection that contains all the rows in the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewRowCollection" /> that contains all the rows in the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the Rows collection to manually populate a <xref:System.Windows.Forms.DataGridView> control instead of binding it to a data source. The following example shows you how to manually add and insert rows. This example assumes that you have added four <xref:System.Windows.Forms.DataGridViewTextBoxColumn> instances to the control's <xref:System.Windows.Forms.DataGridView.Columns%2A> collection.  
  
 [Visual Basic]  
  
```  
Me.dataGridView1.Rows.Add("five", "six", "seven", "eight")  
Me.dataGridView1.Rows.Insert(0, "one", "two", "three", "four")  
```  
  
 [C#]  
  
```  
this.dataGridView1.Rows.Add("five", "six", "seven", "eight");this.dataGridView1.Rows.Insert(0, "one", "two", "three", "four");  
```  
  
 For a detailed example that programmatically populates an unbound <xref:System.Windows.Forms.DataGridView> control, see the Example section.  
  
 Rows include style information in addition to cell values. For this reason, you might want to add or insert rows based on existing rows that you have already styled. You can do this using the <xref:System.Windows.Forms.DataGridViewRowCollection.AddCopy%2A>, <xref:System.Windows.Forms.DataGridViewRowCollection.AddCopies%2A>, <xref:System.Windows.Forms.DataGridViewRowCollection.InsertCopy%2A>, and <xref:System.Windows.Forms.DataGridViewRowCollection.InsertCopies%2A> methods.  
  
 You can also use the Rows collection to modify the values in the control or to remove rows. You can modify values or remove rows regardless of whether the control is bound to an external data source. If there is a data source, the changes are made directly to the data source. You may still need to push the data source updates to a remote database, however. For more information, see [How to: Bind Data to the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 The following example shows you how to modify cell values programmatically.  
  
 [Visual Basic]  
  
```  
' Modify the value in the first cell of the second row.  
Me.dataGridView1.Rows[1].Cells[0].Value = "new value"  
  
' The previous line is equivalent to the following line.  
Me.dataGridView1[0, 1].Value = "new value"  
```  
  
 [C#]  
  
```  
// Modify the value in the first cell of the second row.  
this.dataGridView1.Rows[1].Cells[0].Value = "new value";  
  
// The previous line is equivalent to the following line.  
this.dataGridView1[0, 1].Value = "new value";  
```  
  
 In addition to the standard collection capabilities, you can use the Rows collection to retrieve information about rows. Use the <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowState%2A> method to determine the state of a particular row. Use the <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowCount%2A> and <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowsHeight%2A> methods to determine the number of rows or the combined height of rows in a particular state. To retrieve the index of a row with a particular state, use the <xref:System.Windows.Forms.DataGridViewRowCollection.GetFirstRow%2A>, <xref:System.Windows.Forms.DataGridViewRowCollection.GetLastRow%2A>, <xref:System.Windows.Forms.DataGridViewRowCollection.GetNextRow%2A>, and <xref:System.Windows.Forms.DataGridViewRowCollection.GetPreviousRow%2A> methods.  
  
 The following example shows you how to retrieve the index of the first selected row, and then use it to programmatically delete the row.  
  
 [Visual Basic]  
  
```  
Dim rowToDelete As Int32 = Me.dataGridView1.Rows.GetFirstRow( _  
    DataGridViewElementStates.Selected)  
If rowToDelete > -1 Then  
    Me.dataGridView1.Rows.RemoveAt(rowToDelete)  
End If  
```  
  
 [C#]  
  
```  
Int32 rowToDelete = this.dataGridView1.Rows.GetFirstRow(  
    DataGridViewElementStates.Selected);  
if (rowToDelete > -1)  
{  
    this.dataGridView1.Rows.RemoveAt(rowToDelete);  
}  
```  
  
 To improve performance, the <xref:System.Windows.Forms.DataGridViewRowCollection> returned by the Rows property can include shared and unshared rows. Shared rows share memory to reduce the cost of a large record set. If your record set is very large, you should be careful to keep the rows shared as much as possible when accessing the Rows property.  
  
 For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to create an unbound <xref:System.Windows.Forms.DataGridView>; set the <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, and <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> properties; and use the Rows and <xref:System.Windows.Forms.DataGridView.Columns%2A> properties. It also demonstrates how to use a version of the <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> and <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> methods to properly size the column headers and the rows. To run this example, paste the following code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and a button named `Button1`, and then call the `InitializeDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are connected with their event handlers.  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize#2](~/add/codesnippet/cpp/p-system.windows.forms.d_295_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewAutoSize#2](~/add/codesnippet/csharp/p-system.windows.forms.d_295_1.cs)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#2](~/add/codesnippet/visualbasic/p-system.windows.forms.d_295_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowsAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowsAddedEventHandler RowsAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowsAddedEventHandler RowsAdded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowsAddedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a new row is added to the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rows in the control are not automatically sorted when new rows are added. To sort new rows into their correct position, call the <xref:System.Windows.Forms.DataGridView.Sort%2A> method in a RowsAdded event handler.  
  
 When the user adds a new row using the row for new records, the <xref:System.Windows.Forms.DataGridViewRowsAddedEventArgs.RowIndex%2A?displayProperty=fullName> value in the handler for this event is equal to the index of the new location of the row for new records, which is one greater than the row just added. When you add rows programmatically, however, the <xref:System.Windows.Forms.DataGridViewRowsAddedEventArgs.RowIndex%2A> value is the index of the first row added.  
  
 In virtual mode, this event occurs before the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event and can be used to create new records in your data store that you can then populate in the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event handler.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example handles the RowsAdded event to increment the number of rows in a virtual <xref:System.Windows.Forms.DataGridView>. The number of rows is used in the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> handler so it knows when to show a blank cell versus an initialized cell for a new row. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cs[System.Windows.Forms.DataGridView._Virtual#20](~/add/codesnippet/csharp/e-system.windows.forms.d_67_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#20](~/add/codesnippet/cpp/e-system.windows.forms.d_67_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#20](~/add/codesnippet/visualbasic/e-system.windows.forms.d_67_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowsDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle RowsDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle RowsDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default style applied to the row cells of the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to apply to the row cells of the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control displays its cells using the styles indicated by the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property, which inherits styles from other properties of type <xref:System.Windows.Forms.DataGridViewCellStyle>. For cells in all rows, excluding header cells, the styles specified through the RowsDefaultCellStyle property override the styles specified through the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> and <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> properties, and are overridden by the styles specified through the <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName> properties.  
  
 For more information, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 When getting this property, a <xref:System.Windows.Forms.DataGridViewCellStyle> with default values will be created if the property has not already been accessed. This can cause a performance impact when getting this property for many rows. Whenever possible, use a single <xref:System.Windows.Forms.DataGridViewCellStyle> to set this property for multiple rows. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates how to use this property to create a ledger effect in a <xref:System.Windows.Forms.DataGridView> control. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_178_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_178_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowsDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowsDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs when a property of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> property is set to a new value or when the <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowsDefaultCellStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowsDefaultCellStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#279](~/add/codesnippet/csharp/e-system.windows.forms.d_69_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#279](~/add/codesnippet/visualbasic/e-system.windows.forms.d_69_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowsRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowsRemovedEventHandler RowsRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowsRemovedEventHandler RowsRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowsRemovedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row or rows are deleted from the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When rows are deleted from a <xref:System.Windows.Forms.DataGridView> control, the index numbers of subsequent rows are lowered to compensate.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use this event to update the values in a balance column of a <xref:System.Windows.Forms.DataGridView>. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectionSum#30](~/add/codesnippet/csharp/e-system.windows.forms.d_11_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#30](~/add/codesnippet/visualbasic/e-system.windows.forms.d_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowStateChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowStateChangedEventHandler RowStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowStateChangedEventHandler RowStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowStateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row changes state, such as losing or gaining input focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowStateChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowStateChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#359](~/add/codesnippet/csharp/e-system.windows.forms.d_7_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#359](~/add/codesnippet/visualbasic/e-system.windows.forms.d_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRow RowTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRow RowTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the row that represents the template for all the rows in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewRow" /> representing the row template.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sometimes you want greater control over the appearance of <xref:System.Windows.Forms.DataGridView> rows than what is provided by the various <xref:System.Windows.Forms.DataGridView> cell style properties. The RowTemplate property lets you create and initialize a <xref:System.Windows.Forms.DataGridViewRow> for use as a template by all rows, including the row for new records if <xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A> is `true`.  
  
 This is useful when you are setting default values for properties such as row height. For example, you may want to increase the default row height in order to provide extra room beneath ordinary cell content for displaying content that spans multiple columns.  
  
 Setting the row template is necessary when external data is displayed using custom types derived from the <xref:System.Windows.Forms.DataGridViewRow> class. With unbound <xref:System.Windows.Forms.DataGridView> controls, you can programmatically populate the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection with instances of your custom row type. When displaying external data, however, the rows are generated automatically, but they are based on the row template, which you can set to an instance of your custom row type.  
  
 If this property has not been set the first time you retrieve its value, a new <xref:System.Windows.Forms.DataGridViewRow> is created and returned.  
  
   
  
## Examples  
 The following code example illustrates how to use the row template to specify an initial row height and a minimum row height.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.RowTemplate#1](~/add/codesnippet/cpp/p-system.windows.forms.d_81_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.RowTemplate#1](~/add/codesnippet/csharp/p-system.windows.forms.d_81_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.RowTemplate#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_81_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The specified row when setting this property has its &lt;xref:System.Windows.Forms.DataGridViewElement.DataGridView%2A&gt; property set.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowUnshared">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowUnshared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowUnshared" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row's state changes from shared to unshared.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this event during development and testing to help identify code that causes rows to change from a shared to an unshared state. This is useful when scaling the control to display large amounts of data.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RowUnshared event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the RowUnshared event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#360](~/add/codesnippet/csharp/e-system.windows.forms.d_64_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#360](~/add/codesnippet/visualbasic/e-system.windows.forms.d_64_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowValidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler RowValidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler RowValidated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a row has finished validating.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is analogous to the <xref:System.Windows.Forms.Control.Validated> event. Use this event to perform post-processing on a row of values.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code sample uses this event to clear up any error annotations that may have been left behind after validating the row.  
  
 [!code-vb[System.Windows.Forms.DataGridView.RowOperations#10](~/add/codesnippet/visualbasic/e-system.windows.forms.d_132_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.RowOperations#10](~/add/codesnippet/csharp/e-system.windows.forms.d_132_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowValidating">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellCancelEventHandler RowValidating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellCancelEventHandler RowValidating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row is validating.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is analogous to the <xref:System.Windows.Forms.Control.Validating?displayProperty=fullName> event. Use this event to perform validation on all the values of a row. If the row does not pass validation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=fullName> property to `true`. Canceling this event prevents the <xref:System.Windows.Forms.DataGridView.RowValidated>, <xref:System.Windows.Forms.Control.Validating?displayProperty=fullName>, and <xref:System.Windows.Forms.Control.Validated?displayProperty=fullName> events from occurring, and also prevents the user from leaving the invalid row and prevents the row from being saved to an external data source in data bound mode.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example uses RowValidating to check if valid track and release dates are entered.  
  
 [!code-vb[System.Windows.Forms.DataGridView.RowOperations#5](~/add/codesnippet/visualbasic/e-system.windows.forms.d_98_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.RowOperations#5](~/add/codesnippet/csharp/e-system.windows.forms.d_98_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ScrollEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ScrollEventHandler Scroll" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user scrolls through the control contents.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Scroll event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the Scroll event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#363](~/add/codesnippet/csharp/e-system.windows.forms.d_71_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#363](~/add/codesnippet/visualbasic/e-system.windows.forms.d_71_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ScrollBars ScrollBars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ScrollBars ScrollBars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of scroll bars to display for the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.ScrollBars" /> values. The default is <see cref="T:System.Windows.Forms.ScrollBars" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Regardless of the value of this property, scroll bars are shown only when they are needed. Use this property to prevent scroll bars from appearing. This is useful, for example, when you want to provide an alternative user interface (UI) for scrolling.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.ScrollBars" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">The value of this property cannot be set because the <see cref="T:System.Windows.Forms.DataGridView" /> is unable to scroll due to a cell change that cannot be committed or canceled.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectAll">
      <MemberSignature Language="C#" Value="public void SelectAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Selects all the cells in the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Windows.Forms.DataGridView> is in column-selection mode and this method is called, each column's <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> property is set to `true`, and each row's <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> property is set to `false`.  
  
 Conversely, when the <xref:System.Windows.Forms.DataGridView> is in row-selection mode and this method is called, each row's <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> property is set to `true`, and each column's <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> property is set to `false`.  
  
   
  
## Examples  
 The following code example demonstrates the use of the SelectAll method. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and a <xref:System.Windows.Forms.Button> named `selectAllButton`, and ensure all events are associated with their event handlers.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#180](~/add/codesnippet/csharp/m-system.windows.forms.d_34_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#180](~/add/codesnippet/visualbasic/m-system.windows.forms.d_34_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedCells">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectedCellCollection SelectedCells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewSelectedCellCollection SelectedCells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectedCellCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of cells selected by the user.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection" /> that represents the cells selected by the user.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectedCells property is always populated regardless of the <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property value.  
  
 This property contains a read-only snapshot of the selection at the time it is referenced. If you hold onto a copy of this collection, it may differ from the actual, subsequent <xref:System.Windows.Forms.DataGridView> state in which the user may have changed the selection. Therefore, you should not operate on a copy of the collection.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SelectedCells collection to find the sum of the values in the selection. In the example, this collection is iterated through and the valid values are added to the sum, which is displayed in a label. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectionSum#10](~/add/codesnippet/csharp/p-system.windows.forms.d_8_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedColumns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectedColumnCollection SelectedColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewSelectedColumnCollection SelectedColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectedColumnCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of columns selected by the user.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection" /> that represents the columns selected by the user.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property must be set to <xref:System.Windows.Forms.DataGridViewSelectionMode?displayProperty=fullName> or <xref:System.Windows.Forms.DataGridViewSelectionMode?displayProperty=fullName> for the SelectedColumns property to be populated with selected columns.  
  
 This property contains a read-only snapshot of the selection at the time it is referenced. If you hold onto a copy of this collection, it may differ from the actual, subsequent <xref:System.Windows.Forms.DataGridView> state in which the user may have changed the selection. Therefore, you should not operate on a copy of the collection.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SelectedColumns property to get the selected column in a programmatic sort. In this example, this property is used in the <xref:System.Windows.Forms.DataGridView.Sort%2A> method to determine the direction of the sort.  
  
 [!code-cs[System.Windows.Forms.DatagridViewProgrammaticSort#10](~/add/codesnippet/csharp/p-system.windows.forms.d_220_1.cs)]
 [!code-vb[System.Windows.Forms.DatagridViewProgrammaticSort#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_220_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedRows">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectedRowCollection SelectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewSelectedRowCollection SelectedRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectedRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of rows selected by the user.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection" /> that contains the rows selected by the user.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property must be set to <xref:System.Windows.Forms.DataGridViewSelectionMode> or <xref:System.Windows.Forms.DataGridViewSelectionMode> for the SelectedRows property to be populated with selected rows.  
  
 This property contains a read-only snapshot of the selection at the time it is referenced. If you hold onto a copy of this collection, it may differ from the actual, subsequent <xref:System.Windows.Forms.DataGridView> state in which the user may have changed the selection. You should therefore not operate on a copy of the collection.  
  
 To programmatically select a row, set its <xref:System.Windows.Forms.DataGridViewRow.Selected%2A>property to `true`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SelectedRows property in the <xref:System.Windows.Forms.DataGridView.UserDeletingRow> event. In this example, if the first row is contained in the SelectedRows collection, then the deletion is canceled. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectionSum#20](~/add/codesnippet/csharp/p-system.windows.forms.d_228_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_228_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the current selection changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs whenever cells are selected or the selection is canceled, whether programmatically or by user action. For example, this event is useful when you want display the sum of the currently selected cells.  
  
 When you change the value of the <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> property, the SelectionChanged event occurs before the <xref:System.Windows.Forms.DataGridView.CurrentCellChanged> event. Any SelectionChanged event handler accessing the <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> property at this time will get its previous value.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this event. In the example, the form displays the sum of values in the selected cells, and updates the sum when the selection changes.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectionSum#00](~/add/codesnippet/csharp/e-system.windows.forms.d_45_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#00](~/add/codesnippet/visualbasic/e-system.windows.forms.d_45_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewSelectionMode SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating how the cells of the <see cref="T:System.Windows.Forms.DataGridView" /> can be selected.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> values. The default is <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Changing the value of the SelectionMode property clears the current selection.  
  
   
  
## Examples  
 The following code example demonstrates how to set the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.GridColor%2A>, <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, SelectionMode, <xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, and <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> properties. In addition, the code example demonstrates how to set the <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> properties. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/visualbasic/p-system.windows.forms.d_151_1.vb)]
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/cpp/p-system.windows.forms.d_151_1.cpp)]
 [!code-cs[System.Windows.Forms.GridViewUnbound#5](~/add/codesnippet/csharp/p-system.windows.forms.d_151_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> or <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> and the &lt;xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A&gt; property of one or more columns is set to <see cref="T:System.Windows.Forms.DataGridViewColumnSortMode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">The new &lt;xref:System.Windows.Forms.Control.Left%2A&gt; property value of the control.</param>
        <param name="y">The new &lt;xref:System.Windows.Forms.Control.Top%2A&gt; property value of the control.</param>
        <param name="width">The new &lt;xref:System.Windows.Forms.Control.Width%2A&gt; property value of the control.</param>
        <param name="height">The new &lt;xref:System.Windows.Forms.Control.Height%2A&gt; property value of the control.</param>
        <param name="specified">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</param>
        <summary>This member overrides &lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A?displayProperty=fullName&gt;.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">One or both of the width or height values exceeds the maximum value of 8,388,607.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentCellAddressCore">
      <MemberSignature Language="C#" Value="protected virtual bool SetCurrentCellAddressCore (int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool SetCurrentCellAddressCore(int32 columnIndex, int32 rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="setAnchorCellAddress" Type="System.Boolean" />
        <Parameter Name="validateCurrentCell" Type="System.Boolean" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column containing the cell.</param>
        <param name="rowIndex">The index of the row containing the cell.</param>
        <param name="setAnchorCellAddress">
          <see langword="true" /> to make the new current cell the anchor cell for a subsequent multicell selection using the SHIFT key; otherwise, <see langword="false" />.</param>
        <param name="validateCurrentCell">
          <see langword="true" /> to validate the value in the old current cell and cancel the change if validation fails; otherwise, <see langword="false" />.</param>
        <param name="throughMouseClick">
          <see langword="true" /> if the current cell is being set as a result of a mouse click; otherwise, <see langword="false" />.</param>
        <summary>Sets the currently active cell.</summary>
        <returns>
          <see langword="true" /> if the current cell was successfully set; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control uses this method whenever it changes the current cell. This method changes the current cell without changing the selection and optionally without validating the previous cell or changing the selection anchor cell. The anchor cell is the first cell of a block of multiple cells that the user can select by holding down the SHIFT key and clicking the last cell of the block.  
  
 If `rowIndex` and `columnIndex` are both -1, the <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> property returns `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1, and <paramref name="rowIndex" /> is not -1.  
  
 -or-  
  
 <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1, and <paramref name="columnIndex" /> is not -1.</exception>
        <exception cref="T:System.InvalidOperationException">The specified cell has a &lt;xref:System.Windows.Forms.DataGridViewCell.Visible%2A&gt; property value of <see langword="false" />.  
  
 -or-  
  
 This method was called for a reason other than the underlying data source being reset, and another thread is currently executing this method.</exception>
        <exception cref="T:System.InvalidCastException">The new current cell tried to enter edit mode, but its &lt;xref:System.Windows.Forms.DataGridViewCell.EditType%2A&gt; property does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control" /> and implements <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetSelectedCellCore">
      <MemberSignature Language="C#" Value="protected virtual void SetSelectedCellCore (int columnIndex, int rowIndex, bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetSelectedCellCore(int32 columnIndex, int32 rowIndex, bool selected) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column containing the cell.</param>
        <param name="rowIndex">The index of the row containing the cell.</param>
        <param name="selected">
          <see langword="true" /> to select the cell; <see langword="false" /> to cancel the selection of the cell.</param>
        <summary>Changes the selection state of the cell with the specified row and column indexes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control uses this method whenever it changes the selection state of a cell. The selection state changes without regard to the current <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property value, and without changing the <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> property value. This is useful when you want to implement your own selection modes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1.  
  
 -or-  
  
 <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetSelectedColumnCore">
      <MemberSignature Language="C#" Value="protected virtual void SetSelectedColumnCore (int columnIndex, bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetSelectedColumnCore(int32 columnIndex, bool selected) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The index of the column.</param>
        <param name="selected">
          <see langword="true" /> to select the column; <see langword="false" /> to cancel the selection of the column.</param>
        <summary>Changes the selection state of the column with the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control uses this method whenever it changes the selection state of a column. The selection state changes without regard to the current <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property value, and without changing the <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> property value. This is useful when you want to implement your own selection modes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is less than 0 or greater than the number of columns in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetSelectedRowCore">
      <MemberSignature Language="C#" Value="protected virtual void SetSelectedRowCore (int rowIndex, bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetSelectedRowCore(int32 rowIndex, bool selected) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row.</param>
        <param name="selected">
          <see langword="true" /> to select the row; <see langword="false" /> to cancel the selection of the row.</param>
        <summary>Changes the selection state of the row with the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control uses this method whenever it changes the selection state of a row. The selection state changes without regard to the current <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property value, and without changing the <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> property value. This is useful when you want to implement your own selection modes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is less than 0 or greater than the number of rows in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowCellErrors">
      <MemberSignature Language="C#" Value="public bool ShowCellErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowCellErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to show cell errors.</summary>
        <value>
          <see langword="true" /> if a red glyph will appear in a cell that fails validation; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowCellToolTips">
      <MemberSignature Language="C#" Value="public bool ShowCellToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowCellToolTips" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether or not ToolTips will show when the mouse pointer pauses on a cell.</summary>
        <value>
          <see langword="true" /> if cell ToolTips are enabled; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the value of this property is `true` and the mouse pointer is over a cell, the cell displays a ToolTip when one of the following conditions is met:  
  
-   The value of the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is not `null` or the value of the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is `true`, and a handler for the <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> event sets the <xref:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText%2A?displayProperty=fullName> property to a value other than <xref:System.String.Empty?displayProperty=fullName>.  
  
-   The <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> property of the cell has a value other than <xref:System.String.Empty?displayProperty=fullName>. Setting this property has no effect when there is a <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> event handler because getting the value of the property automatically raises the event and returns the ToolTip text specified in the event handler.  
  
-   The cell value is truncated in the cell display. When the value of the cell <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> property value is <xref:System.String.Empty?displayProperty=fullName>, the full value of the truncated cell value is displayed in the ToolTip.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowEditingIcon">
      <MemberSignature Language="C#" Value="public bool ShowEditingIcon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowEditingIcon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether or not the editing glyph is visible in the row header of the cell being edited.</summary>
        <value>
          <see langword="true" /> if the editing glyph is visible; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The row header will display an editing glyph that looks like a pencil when the current cell is in edit mode and the user has made changes to the cell. The editing glyph is colored by using the <xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A> property of the row header cell. The glyph is not rendered if there is not enough space to display it completely. For example, if the row header cell has its <xref:System.Windows.Forms.DataGridViewCell.Value%2A> property set, the glyph is removed if there is not enough room for both the text and glyph.  
  
 The display of the editing glyph is controlled by the value of the <xref:System.Windows.Forms.DataGridView.IsCurrentRowDirty%2A> property in virtual mode. Otherwise, it is controlled by the <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> property.  
  
 The standard glyph is not publicly exposed. To customize the glyph, you can create a custom <xref:System.Windows.Forms.DataGridViewRowHeaderCell> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowRowErrors">
      <MemberSignature Language="C#" Value="public bool ShowRowErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowRowErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether row headers will display error glyphs for each row that contains a data entry error.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Windows.Forms.DataGridViewRow" /> indicates there is an error; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> property indicates if there is an error in one of the cells in a row. If <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> is set to a value other than <xref:System.String.Empty>, then an error glyph (![ErrorProvider icon](~/add/media/vberrorprovidericon.gif "ErrorProvider icon")) is shown in the row header.  
  
 The default width of the row header includes enough room to display the error glyph, whether or not the glyph is displayed. If the row header size is adjusted so that there is not enough space to display the glyph completely, the glyph is not rendered.  
  
 Because row headers can display both text and glyphs, header content is displayed by priority, as follows:  
  
1.  Text displayed in the row header cell.  
  
2.  The editing glyph.  
  
3.  The error glyph.  
  
 For example, if the row width is decreased, the error glyph disappears first, then the standard glyph, then text.  
  
 Advanced users can customize the error glyph by developing a custom <xref:System.Windows.Forms.DataGridViewRowHeaderCell> or <xref:System.Windows.Forms.DataGridViewCell> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(class System.Collections.IComparer comparer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">An implementation of &lt;xref:System.Collections.IComparer&gt; that performs the custom sorting operation.</param>
        <summary>Sorts the contents of the <see cref="T:System.Windows.Forms.DataGridView" /> control using an implementation of the &lt;xref:System.Collections.IComparer&gt; interface.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method allows advanced customization of the sorting feature of the <xref:System.Windows.Forms.DataGridView> class. In order to implement a highly customized sorting operation, you can write an event handler for the <xref:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick> event and call this method with an instance of a class that implements the <xref:System.Collections.IComparer?displayProperty=fullName> interface as a parameter. In this case, you will typically set the <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A?displayProperty=fullName> property to <xref:System.Windows.Forms.DataGridViewColumnSortMode?displayProperty=fullName> to disable automatic sorting and to leave room for a sorting glyph. When sorting by columns set to programmatic sort mode, you must display the sorting glyph yourself by setting the <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=fullName> property.  
  
 This method works only when the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is not set. When you bind the <xref:System.Windows.Forms.DataGridView> control to an external data source, you must use the sorting operations provided by that data source. When you provide your own data source by implementing virtual mode, you must also handle the sorting operations yourself.  
  
 Calling this method automatically sets the <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> property to `null`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Sort method overload in a multiple column sort scenario. In this example, the <xref:System.Collections.IComparer> interface is implemented in the `RowComparer` class.  
  
 [!code-vb[System.Windows.Forms.DataGridViewIComparerSort#10](~/add/codesnippet/visualbasic/m-system.windows.forms.d_76_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewIComparerSort#10](~/add/codesnippet/csharp/m-system.windows.forms.d_76_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comparer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">&lt;xref:System.Windows.Forms.DataGridView.VirtualMode%2A&gt; is set to <see langword="true" />.  
  
 -or-  
  
 &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt; is not <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (System.Windows.Forms.DataGridViewColumn dataGridViewColumn, System.ComponentModel.ListSortDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(class System.Windows.Forms.DataGridViewColumn dataGridViewColumn, valuetype System.ComponentModel.ListSortDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewColumn" Type="System.Windows.Forms.DataGridViewColumn" />
        <Parameter Name="direction" Type="System.ComponentModel.ListSortDirection" />
      </Parameters>
      <Docs>
        <param name="dataGridViewColumn">The column by which to sort the contents of the <see cref="T:System.Windows.Forms.DataGridView" />.</param>
        <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection" /> values.</param>
        <summary>Sorts the contents of the <see cref="T:System.Windows.Forms.DataGridView" /> control in ascending or descending order based on the contents of the specified column.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method sorts the contents of the <xref:System.Windows.Forms.DataGridView> by comparing values in the specified column. By default, the sort operation will use the <xref:System.Collections.Comparer.Compare%2A> method to compare pairs of cells in the column using the <xref:System.Windows.Forms.DataGridViewCell.Value%2A?displayProperty=fullName> property.  
  
 For columns with the <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> property set to <xref:System.Windows.Forms.DataGridViewColumnSortMode?displayProperty=fullName>, the <xref:System.Windows.Forms.DataGridView.SortedColumn%2A> and <xref:System.Windows.Forms.DataGridView.SortOrder%2A> properties are set automatically and the appropriate sorting glyph is displayed. For columns with the <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> property set to <xref:System.Windows.Forms.DataGridViewColumnSortMode?displayProperty=fullName>, you must display the sorting glyph yourself through the <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=fullName> property.  
  
 You can customize the sorting operation used by this method by handling the <xref:System.Windows.Forms.DataGridView.SortCompare> event. This event occurs only when the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property has not been set.  
  
 When the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property has been set, this method works for data-bound columns only. Data-bound columns have had their <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=fullName> property set. This causes the <xref:System.Windows.Forms.DataGridViewColumn.IsDataBound%2A?displayProperty=fullName> property to return `true`.  
  
 If your <xref:System.Windows.Forms.DataGridView> control contains both bound and unbound columns, you must implement virtual mode to maintain the values of the unbound columns when the control is sorted by a bound column. You can do this by setting the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property to `true` and handling the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> event. If the column is editable, you should also handle the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event. For more information about virtual mode, see [How to: Implement Virtual Mode in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md). Sorting by unbound columns when the control is data-bound is not supported.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.DataGridView.Sort%2A> in a programmatic sort.  
  
 [!code-cs[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/add/codesnippet/csharp/5d12d47a-9e5a-497e-b283-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/add/codesnippet/visualbasic/5d12d47a-9e5a-497e-b283-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified column is not part of this <see cref="T:System.Windows.Forms.DataGridView" />.  
  
 -or-  
  
 The &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt; property has been set and the &lt;xref:System.Windows.Forms.DataGridViewColumn.IsDataBound%2A&gt; property of the specified column returns <see langword="false" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataGridViewColumn" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Windows.Forms.DataGridView.VirtualMode%2A&gt; property is set to <see langword="true" /> and the &lt;xref:System.Windows.Forms.DataGridViewColumn.IsDataBound%2A&gt; property of the specified column returns <see langword="false" />.  
  
 -or-  
  
 The object specified by the &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt; property does not implement the <see cref="T:System.ComponentModel.IBindingList" /> interface.  
  
 -or-  
  
 The object specified by the &lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt; property has a &lt;xref:System.ComponentModel.IBindingList.SupportsSorting%2A?displayProperty=fullName&gt; property value of <see langword="false" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortCompare">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewSortCompareEventHandler SortCompare;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewSortCompareEventHandler SortCompare" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSortCompareEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Windows.Forms.DataGridView" /> compares two cell values to perform a sort operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event occurs only when the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is not set and the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property value is `false`.  
  
 This event compares pairs of cells in the column being sorted. It occurs only when the user clicks the header of a column with a <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> property value of <xref:System.Windows.Forms.DataGridViewColumnSortMode>, or when you call the <xref:System.Windows.Forms.DataGridView.Sort%28System.Windows.Forms.DataGridViewColumn%2CSystem.ComponentModel.ListSortDirection%29> overload. When this event occurs for a column with a <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> property value of <xref:System.Windows.Forms.DataGridViewColumnSortMode>, you must display the sorting glyph yourself through the <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=fullName> property.  
  
 You can use this event to sort rows using the cell values in one column or in multiple columns. Use the <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.CellValue1%2A> and <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.CellValue2%2A> properties to compare cell values in the column specified in the <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.Column%2A> property. Use the <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.RowIndex1%2A> and <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.RowIndex2%2A> properties to access values in other columns through the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use the SortCompare in a multiple column sort. This example is part of a larger example provided in [How to: Customize Sorting in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridView.SortCompare#10](~/add/codesnippet/visualbasic/e-system.windows.forms.d_151_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.SortCompare#10](~/add/codesnippet/csharp/e-system.windows.forms.d_151_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public event EventHandler Sorted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Sorted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Windows.Forms.DataGridView" /> control completes a sorting operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event does not occur when the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is set to `true` and the control is sorted by an unbound column.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example illustrates how to ensure that the current cell is visible after sorting. This code works only with an unbound <xref:System.Windows.Forms.DataGridView> control. With a <xref:System.Windows.Forms.DataGridView> control bound to an external data source, the current cell is not automatically persisted when sorting.  
  
 To run this example, paste the following code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`. In C#, you must also connect the Sorted event to the event handler.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc#150](~/add/codesnippet/csharp/e-system.windows.forms.d_146_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#150](~/add/codesnippet/visualbasic/e-system.windows.forms.d_146_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortedColumn">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumn SortedColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewColumn SortedColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the column by which the <see cref="T:System.Windows.Forms.DataGridView" /> contents are currently sorted.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewColumn" /> by which the <see cref="T:System.Windows.Forms.DataGridView" /> contents are currently sorted.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.DataGridView> is not sorted, this property will return `null`.  
  
 When the column indicated by this property has a <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> property value of <xref:System.Windows.Forms.DataGridViewColumnSortMode?displayProperty=fullName>, it will display a sorting glyph based on the value of the <xref:System.Windows.Forms.DataGridView.SortOrder%2A> property.  
  
 When the column has a <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> property value of <xref:System.Windows.Forms.DataGridViewColumnSortMode?displayProperty=fullName>, you must display the sorting glyph yourself through the <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=fullName> property.  
  
> [!NOTE]
>  The value of this property is not meaningful when you sort the control using custom sorting. For more information about custom sorting, see the <xref:System.Windows.Forms.DataGridView.Sort%28System.Collections.IComparer%29> method and the <xref:System.Windows.Forms.DataGridView.SortCompare> event.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SortedColumn property in a programmatic sort.  
  
 [!code-cs[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/add/codesnippet/csharp/p-system.windows.forms.d_287_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_287_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SortOrder">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder SortOrder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder SortOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the items in the <see cref="T:System.Windows.Forms.DataGridView" /> control are sorted in ascending or descending order, or are not sorted.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.SortOrder" /> values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is used to determine which sorting glyph appears when the column specified by the <xref:System.Windows.Forms.DataGridView.SortedColumn%2A> property has a <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> property value of <xref:System.Windows.Forms.DataGridViewColumnSortMode>. When the column has a <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> property value of <xref:System.Windows.Forms.DataGridViewColumnSortMode>, you must display and hide the sorting glyph yourself through the <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A> property. When the column has a <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> property value of <xref:System.Windows.Forms.DataGridViewColumnSortMode>, you can display the sorting glyph, but space is not reserved for it if the column is automatically resized.  
  
> [!NOTE]
>  The value of this property is not meaningful when you sort the control using custom sorting. For more information about custom sorting, see the <xref:System.Windows.Forms.DataGridView.Sort%2A> method and the <xref:System.Windows.Forms.DataGridView.SortCompare> event.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SortOrder property in a programmatic sort.  
  
 [!code-cs[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/add/codesnippet/csharp/p-system.windows.forms.d_248_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_248_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StandardTab">
      <MemberSignature Language="C#" Value="public bool StandardTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StandardTab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the TAB key moves the focus to the next control in the tab order rather than moving focus to the next cell in the control.</summary>
        <value>
          <see langword="true" /> if the TAB key moves the focus to the next control in the tab order; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property to `false` allows the TAB key to move the focus through the grid of cells. The following table describes how the cell focus changes when the given TAB key combinations are pressed.  
  
|Key combination|Result|  
|---------------------|------------|  
|TAB|If the StandardTab property is `false`, the focus moves to the next cell in the row. If the focus is in the last cell in the row, the focus moves to the first cell in the next row. If the focus is in the last cell in the <xref:System.Windows.Forms.DataGridView>, the focus moves to the next control in the tab order.|  
|SHIFT+TAB|If StandardTab is `false`, the focus moves to the previous cell in the row. If the focus is in the first cell in the row, the focus moves to the last cell in the previous row. If the focus is in the first cell in the <xref:System.Windows.Forms.DataGridView>, the focus moves to the previous control in the tab order.|  
|CTRL+TAB|The focus moves to the next control in the tab order.|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control style changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is not relevant to this control.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.ComponentModel.ISupportInitialize.BeginInit%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.DataGridView> instance is cast to an <xref:System.ComponentModel.ISupportInitialize> instance.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This method has already been called for this control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.ComponentModel.ISupportInitialize.EndInit%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.DataGridView> instance is cast to an <xref:System.ComponentModel.ISupportInitialize> instance.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text associated with the control.</summary>
        <value>The text associated with the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not meaningful for this control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGridView.Text%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although the <xref:System.Windows.Forms.DataGridView.Text%2A> property is not meaningful for this control, its value can be changed, thereby causing this event to occur.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TopLeftHeaderCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewHeaderCell TopLeftHeaderCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewHeaderCell TopLeftHeaderCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the header cell located in the upper left corner of the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewHeaderCell" /> located at the upper left corner of the <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property allows you to set a value for the cell, associate a shortcut menu with it, or perform any other operations you can perform on a <xref:System.Windows.Forms.DataGridViewHeaderCell>.  
  
 In applications designed for use with right-to-left languages, the cell represented by this property is typically in the upper-right corner.  
  
   
  
## Examples  
 The following code example uses this property to display a value in the upper-left corner of a <xref:System.Windows.Forms.DataGridView> control. This value labels a child table in a master/detail scenario. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewComboBoxColumn> class overview topic.  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#80](~/add/codesnippet/cpp/p-system.windows.forms.d_60_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#80](~/add/codesnippet/csharp/p-system.windows.forms.d_60_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#80](~/add/codesnippet/visualbasic/p-system.windows.forms.d_60_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateCellErrorText">
      <MemberSignature Language="C#" Value="public void UpdateCellErrorText (int columnIndex, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateCellErrorText(int32 columnIndex, int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The column index of the cell to update, or -1 to indicate a row header cell.</param>
        <param name="rowIndex">The row index of the cell to update, or -1 to indicate a column header cell.</param>
        <summary>Forces the cell at the specified location to update its error text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method when you maintain cell error text yourself by handling the <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> event. Call this method when you change the stored error text for the specified cell. This will invalidate the cell, forcing the <xref:System.Windows.Forms.DataGridView> control to retrieve the updated error text through the <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> event handler.  
  
 Although you can use this method to update errors for header cells, column header cells do not display error glyphs.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is less than -1 or greater than the number of columns in the control minus 1.  
  
 -or-  
  
 <paramref name="rowIndex" /> is less than -1 or greater than the number of rows in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateCellValue">
      <MemberSignature Language="C#" Value="public void UpdateCellValue (int columnIndex, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateCellValue(int32 columnIndex, int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The zero-based column index of the cell with the new value.</param>
        <param name="rowIndex">The zero-based row index of the cell with the new value.</param>
        <summary>Forces the control to update its display of the cell at the specified location based on its new value, applying any automatic sizing modes currently in effect.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method when you maintain cell values in virtual mode and you update a value in your custom data cache outside of a <xref:System.Windows.Forms.DataGridView.CellValuePushed> event handler.  
  
 This method invalidates the cell, forcing the control to retrieve the new value through the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> event handler and apply any automatic sizing modes that are in effect.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is less than zero or greater than the number of columns in the control minus one.  
  
 -or-  
  
 <paramref name="rowIndex" /> is less than zero or greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateRowErrorText">
      <MemberSignature Language="C#" Value="public void UpdateRowErrorText (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRowErrorText(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The zero-based index of the row to update.</param>
        <summary>Forces the row at the given row index to update its error text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful when you maintain row error text yourself by handling the <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> event. Call this method when you change the stored error text for the specified row. This will force the <xref:System.Windows.Forms.DataGridView> control to retrieve the updated text through the <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> event handler.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateRowErrorText">
      <MemberSignature Language="C#" Value="public void UpdateRowErrorText (int rowIndexStart, int rowIndexEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRowErrorText(int32 rowIndexStart, int32 rowIndexEnd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndexStart" Type="System.Int32" />
        <Parameter Name="rowIndexEnd" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndexStart">The zero-based index of the first row in the set of rows to update.</param>
        <param name="rowIndexEnd">The zero-based index of the last row in the set of rows to update.</param>
        <summary>Forces the rows in the given range to update their error text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful when you maintain row error text yourself by handling the <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> event. Call this method when you change the stored error text for the specified rows. This will force the <xref:System.Windows.Forms.DataGridView> control to retrieve the updated text through the <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> event handler.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndexStart" /> is not in the valid range of 0 to the number of rows in the control minus 1.  
  
 -or-  
  
 <paramref name="rowIndexEnd" /> is not in the valid range of 0 to the number of rows in the control minus 1.  
  
 -or-  
  
 <paramref name="rowIndexEnd" /> is less than <paramref name="rowIndexStart" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateRowHeightInfo">
      <MemberSignature Language="C#" Value="public void UpdateRowHeightInfo (int rowIndex, bool updateToEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRowHeightInfo(int32 rowIndex, bool updateToEnd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="updateToEnd" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The zero-based index of the first row to update.</param>
        <param name="updateToEnd">
          <see langword="true" /> to update the specified row and all subsequent rows.</param>
        <summary>Forces the specified row or rows to update their height information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful when you maintain row heights yourself using handlers for the <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> and <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> events. Call this method whenever you change the stored row heights outside of a <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> event handler. This will force the <xref:System.Windows.Forms.DataGridView> control to retrieve the updated height information through the <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> event handler.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is less than 0 and <paramref name="updateToEnd" /> is <see langword="true" />.  
  
 -or-  
  
 <paramref name="rowIndex" /> is less than -1 and <paramref name="updateToEnd" /> is <see langword="false" />.  
  
 -or-  
  
 <paramref name="rowIndex" /> is greater than the highest row index in the &lt;xref:System.Windows.Forms.DataGridView.Rows%2A&gt; collection.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UserAddedRow">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler UserAddedRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler UserAddedRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user has finished adding a row to the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use the UserAddedRow event to update a label displaying the total number of entries in a <xref:System.Windows.Forms.DataGridView>. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectionSum#40](~/add/codesnippet/csharp/e-system.windows.forms.d_92_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#40](~/add/codesnippet/visualbasic/e-system.windows.forms.d_92_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UserDeletedRow">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler UserDeletedRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler UserDeletedRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user has finished deleting a row from the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the UserDeletedRow event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the UserDeletedRow event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#368](~/add/codesnippet/csharp/e-system.windows.forms.d_30_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#368](~/add/codesnippet/visualbasic/e-system.windows.forms.d_30_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UserDeletingRow">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowCancelEventHandler UserDeletingRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowCancelEventHandler UserDeletingRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user deletes a row from the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event can be canceled to prevent a row deletion from being completed.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to use the UserDeletingRow event to cancel the deletion of rows from the <xref:System.Windows.Forms.DataGridView> if the starting balance row is included in the selection. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectionSum#20](~/add/codesnippet/csharp/e-system.windows.forms.d_140_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#20](~/add/codesnippet/visualbasic/e-system.windows.forms.d_140_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UserSetCursor">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Cursor UserSetCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor UserSetCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default or user-specified value of the &lt;xref:System.Windows.Forms.Control.Cursor%2A&gt; property.</summary>
        <value>A <see cref="T:System.Windows.Forms.Cursor" /> representing the normal value of the &lt;xref:System.Windows.Forms.Control.Cursor%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although you can set the value of the <xref:System.Windows.Forms.Control.Cursor%2A> property, its value can change depending on the location of the mouse pointer. Use this property to retrieve the value of the <xref:System.Windows.Forms.Control.Cursor%2A> property in its normal state, which is either its default value, or a value specified in code.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollBar">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.ScrollBar VerticalScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ScrollBar VerticalScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the vertical scroll bar of the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ScrollBar" /> representing the vertical scroll bar.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollingOffset">
      <MemberSignature Language="C#" Value="public int VerticalScrollingOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VerticalScrollingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of pixels by which the control is scrolled vertically.</summary>
        <value>The number of pixels by which the control is scrolled vertically.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether you have provided your own data-management operations for the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Windows.Forms.DataGridView" /> uses data-management operations that you provide; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Virtual mode is designed for use with very large stores of data. When the VirtualMode property is `true`, you create a <xref:System.Windows.Forms.DataGridView> with a set number of rows and columns and then handle the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> event to populate the cells. Virtual mode requires implementation of an underlying data cache to handle the population, editing, and deletion of <xref:System.Windows.Forms.DataGridView> cells based on actions of the user. For more information about implementing virtual mode, see [How to: Implement Virtual Mode in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 You must use virtual mode to maintain the values of unbound columns when the <xref:System.Windows.Forms.DataGridView> control is in bound mode. Sorting by unbound columns in bound mode is not supported.  
  
   
  
## Examples  
 The following code example code uses virtual mode to create a table of positive integers.  
  
 [!code-cs[System.Windows.Forms.DataGridView._Virtual#0](~/add/codesnippet/csharp/p-system.windows.forms.d_377_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#0](~/add/codesnippet/visualbasic/p-system.windows.forms.d_377_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
        <summary>Processes window messages.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information, see the <xref:System.Windows.Forms.Control.WndProc%2A?displayProperty=fullName> method on the base class.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="T:System.Security.Permissions.SecurityAction" />. Permission value: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>