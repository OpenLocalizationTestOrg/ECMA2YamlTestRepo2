<Type Name="NotifyIcon" FullName="System.Windows.Forms.NotifyIcon">
  <TypeSignature Language="C#" Value="public sealed class NotifyIcon : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NotifyIcon extends System.ComponentModel.Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("MouseDoubleClick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.NotifyIconDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies a component that creates an icon in the notification area. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Icons in the notification area are shortcuts to processes that are running in the background of a computer, such as a virus protection program or a volume control. These processes do not come with their own user interfaces. The NotifyIcon class provides a way to program in this functionality. The <xref:System.Windows.Forms.NotifyIcon.Icon%2A> property defines the icon that appears in the notification area. Pop-up menus for an icon are addressed with the <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A> property. The <xref:System.Windows.Forms.NotifyIcon.Text%2A> property assigns ToolTip text. In order for the icon to show up in the notification area, the <xref:System.Windows.Forms.NotifyIcon.Visible%2A> property must be set to `true`.  
  
   
  
## Examples  
 The following code example demonstrates using the NotifyIcon class to display an icon for an application in the notification area. The example demonstrates setting the <xref:System.Windows.Forms.NotifyIcon.Icon%2A>, <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A>, <xref:System.Windows.Forms.NotifyIcon.Text%2A>, and <xref:System.Windows.Forms.NotifyIcon.Visible%2A> properties and handling the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event. A <xref:System.Windows.Forms.ContextMenu> with an **Exit** item on it is assigned to the <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A?displayProperty=fullName> property, which allows the user to close the application. When the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event occurs, the application form is activated by calling the <xref:System.Windows.Forms.Form.Activate%2A?displayProperty=fullName> method.  
  
 [!code-cpp[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/cpp/t-system.windows.forms.n_1_1.cpp)]
 [!code-cs[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/csharp/t-system.windows.forms.n_1_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/visualbasic/t-system.windows.forms.n_1_1.vb)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.UIPermission">to create the NotifyIcon component. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NotifyIcon ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.NotifyIcon" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a new <xref:System.Windows.Forms.NotifyIcon> is created, the <xref:System.Windows.Forms.NotifyIcon.Visible%2A> property is set to `false`. You must set the <xref:System.Windows.Forms.NotifyIcon.Visible%2A> property to `true` in order to use the <xref:System.Windows.Forms.NotifyIcon> you created. This instance will exist until its container releases it to garbage collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NotifyIcon (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">An <see cref="T:System.ComponentModel.IContainer" /> that represents the container for the <see cref="T:System.Windows.Forms.NotifyIcon" /> control.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.NotifyIcon" /> class with the specified container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a new <xref:System.Windows.Forms.NotifyIcon> is created, the <xref:System.Windows.Forms.NotifyIcon.Visible%2A> property is set to `false`. You must set the <xref:System.Windows.Forms.NotifyIcon.Visible%2A> property to `true` in order to use the <xref:System.Windows.Forms.NotifyIcon> you created. This instance will exist until its container releases it to garbage collection.  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Windows.Forms.NotifyIcon> class to display an icon for an application in the notification area. The example demonstrates setting the <xref:System.Windows.Forms.NotifyIcon.Icon%2A>, <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A>, <xref:System.Windows.Forms.NotifyIcon.Text%2A>, and <xref:System.Windows.Forms.NotifyIcon.Visible%2A> properties and handling the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event. A <xref:System.Windows.Forms.ContextMenu> with an **Exit** item on it is assigned to the <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A?displayProperty=fullName> property, which allows the user to close the application. When the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event occurs, the application form is activated by calling the <xref:System.Windows.Forms.Form.Activate%2A?displayProperty=fullName> method.  
  
 [!code-cpp[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/cpp/m-system.windows.forms.n_6_1.cpp)]
 [!code-cs[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/csharp/m-system.windows.forms.n_6_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/visualbasic/m-system.windows.forms.n_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BalloonTipClicked">
      <MemberSignature Language="C#" Value="public event EventHandler BalloonTipClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BalloonTipClicked" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the balloon tip is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BalloonTipClicked event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.NotifyIcon> named `NotifyIcon1`. Then ensure that the event handler is associated with the BalloonTipClicked event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#505](~/add/codesnippet/csharp/e-system.windows.forms.n_9_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#505](~/add/codesnippet/visualbasic/e-system.windows.forms.n_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BalloonTipClosed">
      <MemberSignature Language="C#" Value="public event EventHandler BalloonTipClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BalloonTipClosed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the balloon tip is closed by the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to handle the BalloonTipClosed event.  
  
 [!code-cs[System.Windows.Forms.NotifyIconBalloonTip#4](~/add/codesnippet/csharp/e-system.windows.forms.n_4_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIconBalloonTip#4](~/add/codesnippet/visualbasic/e-system.windows.forms.n_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BalloonTipIcon">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolTipIcon BalloonTipIcon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ToolTipIcon BalloonTipIcon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolTipIcon</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the icon to display on the balloon tip associated with the <see cref="T:System.Windows.Forms.NotifyIcon" />.</summary>
        <value>The <see cref="T:System.Windows.Forms.ToolTipIcon" /> to display on the balloon tip associated with the <see cref="T:System.Windows.Forms.NotifyIcon" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.NotifyIcon.BalloonTipTitle%2A>, <xref:System.Windows.Forms.NotifyIcon.BalloonTipText%2A>, and BalloonTipIcon properties. To run this example, paste the example code into a Windows Form that contains a <xref:System.Windows.Forms.NotifyIcon> named `notifyIcon1`. Call `SetBalloonTip` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  
  
 [!code-cs[System.Windows.Forms.NotifyIconBalloonTip#2](~/add/codesnippet/csharp/p-system.windows.forms.n_7_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIconBalloonTip#2](~/add/codesnippet/visualbasic/p-system.windows.forms.n_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not a <see cref="T:System.Windows.Forms.ToolTipIcon" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BalloonTipShown">
      <MemberSignature Language="C#" Value="public event EventHandler BalloonTipShown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BalloonTipShown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the balloon tip is displayed on the screen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BalloonTipShown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.NotifyIcon> named `NotifyIcon1`. Then ensure that the event handler is associated with the BalloonTipShown event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#507](~/add/codesnippet/csharp/e-system.windows.forms.n_5_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#507](~/add/codesnippet/visualbasic/e-system.windows.forms.n_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BalloonTipText">
      <MemberSignature Language="C#" Value="public string BalloonTipText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BalloonTipText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text to display on the balloon tip associated with the <see cref="T:System.Windows.Forms.NotifyIcon" />.</summary>
        <value>The text to display on the balloon tip associated with the <see cref="T:System.Windows.Forms.NotifyIcon" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.NotifyIcon.BalloonTipTitle%2A>, BalloonTipText, and <xref:System.Windows.Forms.NotifyIcon.BalloonTipIcon%2A> properties. To run this example, paste the example code into a Windows Form that contains a <xref:System.Windows.Forms.NotifyIcon> named `notifyIcon1`. Call `SetBalloonTip` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  
  
 [!code-cs[System.Windows.Forms.NotifyIconBalloonTip#2](~/add/codesnippet/csharp/p-system.windows.forms.n_19_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIconBalloonTip#2](~/add/codesnippet/visualbasic/p-system.windows.forms.n_19_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BalloonTipTitle">
      <MemberSignature Language="C#" Value="public string BalloonTipTitle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BalloonTipTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the title of the balloon tip displayed on the <see cref="T:System.Windows.Forms.NotifyIcon" />.</summary>
        <value>The text to display as the title of the balloon tip.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The title text will display in a bold font near the top of the balloon.  
  
   
  
## Examples  
 The following code example demonstrates how to use the BalloonTipTitle, <xref:System.Windows.Forms.NotifyIcon.BalloonTipText%2A>, and <xref:System.Windows.Forms.NotifyIcon.BalloonTipIcon%2A> properties. To run this example, paste the example code into a Windows Form that contains a <xref:System.Windows.Forms.NotifyIcon> named `notifyIcon1`. Call `SetBalloonTip` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  
  
 [!code-cs[System.Windows.Forms.NotifyIconBalloonTip#2](~/add/codesnippet/csharp/p-system.windows.forms.n_6_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIconBalloonTip#2](~/add/codesnippet/visualbasic/p-system.windows.forms.n_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks the icon in the notification area.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates handling the Click event. This example assumes that you have added the code to a form containing a <xref:System.Windows.Forms.NotifyIcon> object named `NotifyIcon1`.  
  
 [!code-cs[System.Windows.Forms.NotifyIconExample#1](~/add/codesnippet/csharp/e-system.windows.forms.n_3_1.cs)]
 [!code-cpp[System.Windows.Forms.NotifyIconExample#1](~/add/codesnippet/cpp/e-system.windows.forms.n_3_1.cpp)]
 [!code-vb[System.Windows.Forms.NotifyIconExample#1](~/add/codesnippet/visualbasic/e-system.windows.forms.n_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenu ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the shortcut menu for the icon.</summary>
        <value>The <see cref="T:System.Windows.Forms.ContextMenu" /> for the icon. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The menu is shown when the user right-clicks an icon in the notification area of the taskbar. Shortcut menus also are known as pop-up menus.  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Windows.Forms.NotifyIcon> class to display an icon for an application in the notification area. The example demonstrates setting the <xref:System.Windows.Forms.NotifyIcon.Icon%2A>, ContextMenu, <xref:System.Windows.Forms.NotifyIcon.Text%2A>, and <xref:System.Windows.Forms.NotifyIcon.Visible%2A> properties and handling the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event. A <xref:System.Windows.Forms.ContextMenu> with an **Exit** item on it is assigned to the ContextMenu property, which allows the user to close the application. When the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event occurs, the application form is activated by calling the <xref:System.Windows.Forms.Form.Activate%2A?displayProperty=fullName> method.  
  
 [!code-cpp[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/cpp/p-system.windows.forms.n_12_1.cpp)]
 [!code-cs[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/csharp/p-system.windows.forms.n_12_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/visualbasic/p-system.windows.forms.n_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the shortcut menu associated with the <see cref="T:System.Windows.Forms.NotifyIcon" />.</summary>
        <value>The <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associated with the <see cref="T:System.Windows.Forms.NotifyIcon" /></value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user double-clicks the icon in the notification area of the taskbar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Windows.Forms.NotifyIcon> class to display an icon for an application in the notification area. The example demonstrates setting the <xref:System.Windows.Forms.NotifyIcon.Icon%2A>, <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A>, <xref:System.Windows.Forms.NotifyIcon.Text%2A>, and <xref:System.Windows.Forms.NotifyIcon.Visible%2A> properties and handling the DoubleClick event. A <xref:System.Windows.Forms.ContextMenu> with an **Exit** item on it is assigned to the <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A?displayProperty=fullName> property, which allows the user to close the application. When the DoubleClick event occurs, the application form is activated by calling the <xref:System.Windows.Forms.Form.Activate%2A?displayProperty=fullName> method.  
  
 [!code-cpp[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/cpp/e-system.windows.forms.n_7_1.cpp)]
 [!code-cs[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/csharp/e-system.windows.forms.n_7_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/visualbasic/e-system.windows.forms.n_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Drawing.Icon Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Icon Icon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Icon</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the current icon.</summary>
        <value>The <see cref="T:System.Drawing.Icon" /> displayed by the <see cref="T:System.Windows.Forms.NotifyIcon" /> component. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates using the <xref:System.Windows.Forms.NotifyIcon> class to display an icon for an application in the notification area. The example demonstrates setting the Icon, <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A>, <xref:System.Windows.Forms.NotifyIcon.Text%2A>, and <xref:System.Windows.Forms.NotifyIcon.Visible%2A> properties and handling the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event. A <xref:System.Windows.Forms.ContextMenu> with an **Exit** item on it is assigned to the <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A?displayProperty=fullName> property, which allows the user to close the application. When the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event occurs, the application form is activated by calling the <xref:System.Windows.Forms.Form.Activate%2A?displayProperty=fullName> method.  
  
 [!code-cpp[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/cpp/p-system.windows.forms.n_13_1.cpp)]
 [!code-cs[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/csharp/p-system.windows.forms.n_13_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/visualbasic/p-system.windows.forms.n_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks a <see cref="T:System.Windows.Forms.NotifyIcon" /> with the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.NotifyIcon> named `NotifyIcon1`. Then ensure that the event handler is associated with the MouseClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#510](~/add/codesnippet/csharp/e-system.windows.forms.n_1_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#510](~/add/codesnippet/visualbasic/e-system.windows.forms.n_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user double-clicks the <see cref="T:System.Windows.Forms.NotifyIcon" /> with the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.NotifyIcon> named `NotifyIcon1`. Then ensure that the event handler is associated with the MouseDoubleClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#511](~/add/codesnippet/csharp/e-system.windows.forms.n_10_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#511](~/add/codesnippet/visualbasic/e-system.windows.forms.n_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user presses the mouse button while the pointer is over the icon in the notification area of the taskbar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.NotifyIcon> named `NotifyIcon1`. Then ensure that the event handler is associated with the MouseDown event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#512](~/add/codesnippet/csharp/e-system.windows.forms.n_6_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#512](~/add/codesnippet/visualbasic/e-system.windows.forms.n_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseMove" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user moves the mouse while the pointer is over the icon in the notification area of the taskbar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.NotifyIcon> named `NotifyIcon1`. Then ensure that the event handler is associated with the MouseMove event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#513](~/add/codesnippet/csharp/e-system.windows.forms.n_0_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#513](~/add/codesnippet/visualbasic/e-system.windows.forms.n_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseUp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user releases the mouse button while the pointer is over the icon in the notification area of the taskbar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.NotifyIcon> named `NotifyIcon1`. Then ensure that the event handler is associated with the MouseUp event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#514](~/add/codesnippet/csharp/e-system.windows.forms.n_8_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#514](~/add/codesnippet/visualbasic/e-system.windows.forms.n_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowBalloonTip">
      <MemberSignature Language="C#" Value="public void ShowBalloonTip (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowBalloonTip(int32 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">The time period, in milliseconds, the balloon tip should display.  
  
 <block subset="none" type="note">  
 This parameter is deprecated as of Windows Vista. Notification display times are now based on system accessibility settings.  
  
</block></param>
        <summary>Displays a balloon tip in the taskbar for the specified time period.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Minimum and maximum timeout values are enforced by the operating system and are typically 10 and 30 seconds, respectively, however this can vary depending on the operating system. Timeout values that are too large or too small are adjusted to the appropriate minimum or maximum value. In addition, if the user does not appear to be using the computer (no keyboard or mouse events are occurring) then the system does not count this time towards the timeout.  
  
 Only one balloon tip can display on the taskbar at a time. Attempting to display a balloon tip when one is currently displayed on the taskbar causes the `timeout` value to be ignored. The behavior is slightly different depending on the operating system and whether the balloon tip is from another, or the same, application. When the second balloon tip is from another application, the first balloon tip will display for the minimum timeout value before the second appears, regardless of the value of `timeout`. In most cases, if the balloon tips are from the same application, the first balloon tip immediately closes when another call to the <xref:System.Windows.Forms.NotifyIcon.ShowBalloonTip%2A> method is made. In some cases the second balloon will open on top of the first balloon.  
  
 The title text will display in a bold font near the top of the balloon.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ShowBalloonTip method. To run this example, paste the example code into a Windows Form that contains a <xref:System.Windows.Forms.NotifyIcon> named `notifyIcon1`. Call `SetBalloonTip` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  
  
 [!code-cs[System.Windows.Forms.NotifyIconBalloonTip#2](~/add/codesnippet/csharp/m-system.windows.forms.n_5_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIconBalloonTip#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowBalloonTip">
      <MemberSignature Language="C#" Value="public void ShowBalloonTip (int timeout, string tipTitle, string tipText, System.Windows.Forms.ToolTipIcon tipIcon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowBalloonTip(int32 timeout, string tipTitle, string tipText, valuetype System.Windows.Forms.ToolTipIcon tipIcon) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="tipTitle" Type="System.String" />
        <Parameter Name="tipText" Type="System.String" />
        <Parameter Name="tipIcon" Type="System.Windows.Forms.ToolTipIcon" />
      </Parameters>
      <Docs>
        <param name="timeout">The time period, in milliseconds, the balloon tip should display.  
  
 <block subset="none" type="note">  
 This parameter is deprecated as of Windows Vista. Notification display times are now based on system accessibility settings.  
  
</block></param>
        <param name="tipTitle">The title to display on the balloon tip.</param>
        <param name="tipText">The text to display on the balloon tip.</param>
        <param name="tipIcon">One of the <see cref="T:System.Windows.Forms.ToolTipIcon" /> values.</param>
        <summary>Displays a balloon tip with the specified title, text, and icon in the taskbar for the specified time period.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Minimum and maximum timeout values are enforced by the operating system and are typically 10 and 30 seconds, respectively, however this can vary depending on the operating system. Timeout values that are too large or too small are adjusted to the appropriate minimum or maximum value. In addition, if the user does not appear to be using the computer (no keyboard or mouse events are occurring) then the system does not count this time towards the timeout.  
  
 Only one balloon tip can display on the taskbar at a time. Attempting to display a balloon tip when one is currently displayed on the taskbar causes the `timeout` value to be ignored. The behavior is slightly different depending on the operating system and whether the balloon tip is from another, or the same, application. When the second balloon tip is from another application, the first balloon tip will display for the minimum timeout value before the second appears, regardless of the value of `timeout`. In most cases, if the balloon tips are from the same application, the first balloon tip immediately closes when another call to the ShowBalloonTip method is made. In some cases the second balloon will open on top of the first balloon.  
  
 The title text will display in a bold font near the top of the balloon.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ShowBalloonTip method. To run this example, paste the example code into a Windows Form that contains a <xref:System.Windows.Forms.NotifyIcon> named `notifyIcon1`. Associate the `Form1_DoubleClick` method in this example with the form's <xref:System.Windows.Forms.Control.DoubleClick> event.  
  
 [!code-cs[System.Windows.Forms.NotifyIconBalloonTip#1](~/add/codesnippet/csharp/280b6d1d-788c-45bb-847a-_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIconBalloonTip#1](~/add/codesnippet/visualbasic/280b6d1d-788c-45bb-847a-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than 0.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="tipText" /> is <see langword="null" /> or an empty string.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="tipIcon" /> is not a member of <see cref="T:System.Windows.Forms.ToolTipIcon" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for access to application windows. Related enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an object that contains data about the <see cref="T:System.Windows.Forms.NotifyIcon" />.</summary>
        <value>The &lt;xref:System.Object&gt; that contains data about the <see cref="T:System.Windows.Forms.NotifyIcon" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ToolTip text displayed when the mouse pointer rests on a notification area icon.</summary>
        <value>The ToolTip text displayed when the mouse pointer rests on a notification area icon.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the text is `null`, no ToolTip is displayed.  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Windows.Forms.NotifyIcon> class to display an icon for an application in the notification area. The example demonstrates setting the <xref:System.Windows.Forms.NotifyIcon.Icon%2A>, <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A>, Text, and <xref:System.Windows.Forms.NotifyIcon.Visible%2A> properties and handling the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event. A <xref:System.Windows.Forms.ContextMenu> with an **Exit** item on it is assigned to the <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A?displayProperty=fullName> property, which allows the user to close the application. When the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event occurs, the application form is activated by calling the <xref:System.Windows.Forms.Form.Activate%2A?displayProperty=fullName> method.  
  
 [!code-cpp[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/cpp/p-system.windows.forms.n_17_1.cpp)]
 [!code-cs[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/csharp/p-system.windows.forms.n_17_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/visualbasic/p-system.windows.forms.n_17_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ToolTip text is more than 63 characters long.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the icon is visible in the notification area of the taskbar.</summary>
        <value>
          <see langword="true" /> if the icon is visible in the notification area; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Since the default value is `false`, in order for the icon to show up in the notification area, you must set the Visible property to `true`.  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Windows.Forms.NotifyIcon> class to display an icon for an application in the notification area. The example demonstrates setting the <xref:System.Windows.Forms.NotifyIcon.Icon%2A>, <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A>, <xref:System.Windows.Forms.NotifyIcon.Text%2A>, and Visible properties and handling the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event. A <xref:System.Windows.Forms.ContextMenu> with an **Exit** item on it is assigned to the <xref:System.Windows.Forms.NotifyIcon.ContextMenu%2A?displayProperty=fullName> property, which allows the user to close the application. When the <xref:System.Windows.Forms.NotifyIcon.DoubleClick> event occurs, the application form is activated by calling the <xref:System.Windows.Forms.Form.Activate%2A?displayProperty=fullName> method.  
  
 [!code-cpp[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/cpp/p-system.windows.forms.n_5_1.cpp)]
 [!code-cs[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/csharp/p-system.windows.forms.n_5_1.cs)]
 [!code-vb[System.Windows.Forms.NotifyIcon#1](~/add/codesnippet/visualbasic/p-system.windows.forms.n_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>