<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the menu structure of a form. Although <see cref="T:System.Windows.Forms.MenuStrip" /> replaces and adds functionality to the MainMenu control of previous versions, MainMenu is retained for both backward compatibility and future use if you choose.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MainMenu control represents the container for the menu structure of a form. A menu is composed of <xref:System.Windows.Forms.MenuItem> objects that represent the individual menu commands in the menu structure. Each <xref:System.Windows.Forms.MenuItem> can be a command for your application or a parent menu for other submenu items. To bind the MainMenu to the <xref:System.Windows.Forms.Form> that will display it, assign the MainMenu to the <xref:System.Windows.Forms.Form.Menu%2A> property of the <xref:System.Windows.Forms.Form>.  
  
 For applications that will have support for multiple languages, you can use the <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> property to display the text of the menu from right to left to support languages such as Arabic.  
  
 You can create different MainMenu objects to represent different menu structures for your form. If you want to reuse the menu structure contained in a specific MainMenu, you can use its <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> method to create a copy. Once you have a copy of the menu structure, you can make the appropriate modifications for your new menu structure.  
  
> [!NOTE]
>  Cutting and pasting menu items from one form to another in the designer might not work as expected if the form you are pasting into has no menu items defined.  
  
   
  
## Examples  
 The following code example creates a MainMenu, assigns two <xref:System.Windows.Forms.MenuItem> objects to the MainMenu and binds it to a form. This example requires that you have a <xref:System.Windows.Forms.Form> created that is named `Form1`.  
  
 [!code-cs[Classic MainMenu.MainMenu Example#1](~/add/codesnippet/csharp/t-system.windows.forms.m_9_1.cs)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.m_9_1.vb)]
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/add/codesnippet/cpp/t-system.windows.forms.m_9_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.MainMenu" /> class without any specified menu items.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This version of the constructor creates a <xref:System.Windows.Forms.MainMenu> without any specified <xref:System.Windows.Forms.MenuItem> objects. To add menu items to the control use the other version of this constructor that accepts an array of <xref:System.Windows.Forms.MenuItem> objects as its parameter or use the <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> method of the <xref:System.Windows.Forms.Menu.MenuItems%2A> property.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Windows.Forms.MainMenu>, assigns two <xref:System.Windows.Forms.MenuItem> objects to the <xref:System.Windows.Forms.MainMenu> and binds it to a form. This example requires that you have a <xref:System.Windows.Forms.Form> created that is named `Form1`.  
  
 [!code-cs[Classic MainMenu.MainMenu Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_20_1.cs)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_20_1.vb)]
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_20_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">An <see cref="T:System.ComponentModel.IContainer" /> representing the container of the <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.MainMenu" /> class with the specified container.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">An array of <see cref="T:System.Windows.Forms.MenuItem" /> objects that will be added to the <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.MainMenu" /> with a specified set of <see cref="T:System.Windows.Forms.MenuItem" /> objects.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this constructor to assign an array of <xref:System.Windows.Forms.MenuItem> objects to the <xref:System.Windows.Forms.MainMenu> at the time of its creation. After the <xref:System.Windows.Forms.MainMenu> has been created you can add additional <xref:System.Windows.Forms.MenuItem> objects to the <xref:System.Windows.Forms.MainMenu> using the <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> method of the <xref:System.Windows.Forms.Menu.MenuItems%2A> property.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Windows.Forms.MainMenu>, and assigns two <xref:System.Windows.Forms.MenuItem> objects to the <xref:System.Windows.Forms.MainMenu> using this version of the constructor. The example then binds the <xref:System.Windows.Forms.MainMenu> to a <xref:System.Windows.Forms.Form>. This example requires that you have a <xref:System.Windows.Forms.Form> created that is named `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_24_1.cpp)]
 [!code-cs[Classic MainMenu.MainMenu1 Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_24_1.cs)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_24_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new <see cref="T:System.Windows.Forms.MainMenu" /> that is a duplicate of the current <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MainMenu" /> that represents the cloned menu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this method to create a copy of the menu structure stored in a <xref:System.Windows.Forms.MainMenu>. You can use this method to reuse the menu structure stored in a <xref:System.Windows.Forms.MainMenu> as the foundation for a new <xref:System.Windows.Forms.MainMenu>. For example, if you want to create a menu structure that has the same menu items as an existing <xref:System.Windows.Forms.MainMenu> but will also have additional <xref:System.Windows.Forms.MenuItem> objects added to it, you can use the CloneMenu method to create a copy of the original <xref:System.Windows.Forms.MainMenu> and then add the new <xref:System.Windows.Forms.MenuItem> objects to the cloned <xref:System.Windows.Forms.MainMenu>.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.MainMenu.GetForm%2A> method to determine if a <xref:System.Windows.Forms.MainMenu> is currently parented to the form. If the call in the example code to <xref:System.Windows.Forms.MainMenu.GetForm%2A> does not return `null`, the code then clones the menu structure of the <xref:System.Windows.Forms.MainMenu> using the CloneMenu method. The code then sets the <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> property to true on the new copy of the <xref:System.Windows.Forms.MainMenu> to create a <xref:System.Windows.Forms.MainMenu> that can be used for languages that support right to left text. This example requires that you have a <xref:System.Windows.Forms.MainMenu> created that is named `mainMenu1`.  
  
 [!code-cs[Classic MainMenu.GetForm Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_21_1.cs)]
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_21_1.cpp)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_21_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the main menu collapses.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Collapse event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.MainMenu> named `MainMenu1`. Then ensure that the event handler is associated with the Collapse event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#483](~/add/codesnippet/csharp/e-system.windows.forms.m_9_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/add/codesnippet/visualbasic/e-system.windows.forms.m_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new handle to the Menu.</summary>
        <returns>A handle to the menu if the method succeeds; otherwise, <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Disposes of the resources, other than memory, used by the <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call Dispose when you are finished using the <xref:System.Windows.Forms.MainMenu>. The Dispose method leaves the <xref:System.Windows.Forms.MainMenu> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Windows.Forms.MainMenu> so the memory it was occupying can be reclaimed by garbage collection.  
  
> [!NOTE]
>  Always call Dispose before you release your last reference to the <xref:System.Windows.Forms.MainMenu>. Otherwise, the resources the <xref:System.Windows.Forms.MainMenu> is using will not be freed until garbage collection calls the <xref:System.Windows.Forms.MainMenu> object's destructor.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the <see cref="T:System.Windows.Forms.Form" /> that contains this control.</summary>
        <returns>A <see cref="T:System.Windows.Forms.Form" /> that is the container for this control. Returns <see langword="null" /> if the <see cref="T:System.Windows.Forms.MainMenu" /> is not currently hosted on a form.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property enables you to determine if a specific <xref:System.Windows.Forms.MainMenu> is parented to a form. The property is typically used when multiple <xref:System.Windows.Forms.MainMenu> objects are being used on a form and you need to determine which one is currently being used by a form.  
  
   
  
## Examples  
 The following code example uses the GetForm method to determine if a <xref:System.Windows.Forms.MainMenu> is currently parented to the form. If the call in the example code to GetForm does not return `null`, the code then clones the menu structure of the <xref:System.Windows.Forms.MainMenu> using the <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> method. The code then sets the <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> property to true on the new copy of the <xref:System.Windows.Forms.MainMenu> to create a <xref:System.Windows.Forms.MainMenu> that can be used for languages that support right to left text. This example requires that you have a <xref:System.Windows.Forms.MainMenu> created that is named `mainMenu1`.  
  
 [!code-cs[Classic MainMenu.GetForm Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_11_1.cs)]
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_11_1.cpp)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.MainMenu.Collapse" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnCollapse method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the text displayed by the control is displayed from right to left.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property enables your menus to support languages that are written from right to left. When this property is set to `RightToLeft.Yes`, the menu item text will be displayed from right to left instead of the default left to right method.  
  
> [!NOTE]
>  For more information about how enabling right-to-left alignment affects Windows Forms controls, see the <xref:System.Windows.Forms.Control.RightToLeft%2A> property.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.MainMenu.GetForm%2A> method to determine if a <xref:System.Windows.Forms.MainMenu> is currently parented to the form. If the call in the example code to <xref:System.Windows.Forms.MainMenu.GetForm%2A> does not return `null`, the code then clones the menu structure of the <xref:System.Windows.Forms.MainMenu> using the <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> method. The example code then sets the RightToLeft property to `RightToLeft.Yes` on the new copy of the <xref:System.Windows.Forms.MainMenu> to create a <xref:System.Windows.Forms.MainMenu> that can be used for languages that support right to left text. This example requires that you have a <xref:System.Windows.Forms.MainMenu> created that is named `mainMenu1`.  
  
 [!code-cs[Classic MainMenu.RightToLeft Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_36_1.cs)]
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_36_1.cpp)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_36_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned to the property is not a valid member of the <see cref="T:System.Windows.Forms.RightToLeft" /> enumeration.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <returns>A string that represents the current <see cref="T:System.Windows.Forms.MainMenu" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return string includes the type and the string returned by the <xref:System.Windows.Forms.Form.ToString%2A> method if the <xref:System.Windows.Forms.MainMenu> is assigned to a form.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>