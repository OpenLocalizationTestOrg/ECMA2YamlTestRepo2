<Type Name="DataGridViewBand" FullName="System.Windows.Forms.DataGridViewBand">
  <TypeSignature Language="C#" Value="public class DataGridViewBand : System.Windows.Forms.DataGridViewElement, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataGridViewBand extends System.Windows.Forms.DataGridViewElement implements class System.ICloneable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataGridViewElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a linear collection of elements in a <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataGridViewBand class represents <xref:System.Windows.Forms.DataGridViewCell> elements joined together in a band that can be manipulated as a group. Each element is typically an instance of <xref:System.Windows.Forms.DataGridViewCell> or one of its derived classes. Although a <xref:System.Windows.Forms.DataGridViewHeaderCell> is associated with each band, header cells are not considered elements of the band.  
  
 DataGridViewBand is the base class of the <xref:System.Windows.Forms.DataGridViewRow> and <xref:System.Windows.Forms.DataGridViewColumn> classes. There are no public constructors for the DataGridViewBand type, so the only way to access a band is through columns and rows in a <xref:System.Windows.Forms.DataGridView>.  
  
   
  
## Examples  
 The following code example uses a DataGridViewBand to manipulate properties of groups of cells in a <xref:System.Windows.Forms.DataGridView>.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#0](~/add/codesnippet/cpp/t-system.windows.forms.d_123_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#0](~/add/codesnippet/csharp/t-system.windows.forms.d_123_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#0](~/add/codesnippet/visualbasic/t-system.windows.forms.d_123_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an exact copy of this band.</summary>
        <returns>An &lt;xref:System.Object&gt; that represents the cloned <see cref="T:System.Windows.Forms.DataGridViewBand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to duplicate a row or column of cells.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the shortcut menu for the band.</summary>
        <value>The <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associated with the current <see cref="T:System.Windows.Forms.DataGridViewBand" />. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The shortcut menu appears when a user clicks the right mouse button in the band's display area. The display area is a <xref:System.Windows.Forms.DataGridViewColumn> or <xref:System.Windows.Forms.DataGridViewRow> in a <xref:System.Windows.Forms.DataGridView>.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.DataGridViewColumn.ContextMenuStrip%2A> property of a <xref:System.Windows.Forms.DataGridViewColumn> to add functionality for changing a cell's background color. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewColumn> class.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#130](~/add/codesnippet/cpp/p-system.windows.forms.d_172_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#130](~/add/codesnippet/visualbasic/p-system.windows.forms.d_172_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#130](~/add/codesnippet/csharp/p-system.windows.forms.d_172_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultCellStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default cell style of the band.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> associated with the <see cref="T:System.Windows.Forms.DataGridViewBand" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default cell style is applied to cells that do not have an associated style. When getting this property, a <xref:System.Windows.Forms.DataGridViewCellStyle> with default values will be created if the default cell style does not exist.  
  
   
  
## Examples  
 The following code example sets the default cell style for the first column in a <xref:System.Windows.Forms.DataGridView>.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#7](~/add/codesnippet/cpp/p-system.windows.forms.d_279_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#7](~/add/codesnippet/csharp/p-system.windows.forms.d_279_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#7](~/add/codesnippet/visualbasic/p-system.windows.forms.d_279_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultHeaderCellType">
      <MemberSignature Language="C#" Value="public Type DefaultHeaderCellType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DefaultHeaderCellType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the run-time type of the default header cell.</summary>
        <value>A &lt;xref:System.Type&gt; that describes the run-time class of the object used as the default header cell.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property must get or set an instance of the <xref:System.Windows.Forms.DataGridViewHeaderCell> class or one of its derived types. For example, the <xref:System.Windows.Forms.DataGridViewRow> class uses a <xref:System.Windows.Forms.DataGridViewRowHeaderCell> as the default header cell type. Similarly, the <xref:System.Windows.Forms.DataGridViewColumn> class uses a <xref:System.Windows.Forms.DataGridViewColumnHeaderCell>.  
  
 If you are using a custom type derived from <xref:System.Windows.Forms.DataGridViewHeaderCell> in a row or column, the DefaultHeaderCellType property must be set to the custom type.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified value when setting this property is not a &lt;xref:System.Type&gt; representing <see cref="T:System.Windows.Forms.DataGridViewHeaderCell" /> or a derived type.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Displayed">
      <MemberSignature Language="C#" Value="public virtual bool Displayed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Displayed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the band is currently displayed onscreen.</summary>
        <value>
          <see langword="true" /> if the band is currently onscreen; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by the <see cref="T:System.Windows.Forms.DataGridViewBand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call Dispose when you are finished using the <xref:System.Windows.Forms.DataGridViewBand>. The Dispose method leaves the <xref:System.Windows.Forms.DataGridViewBand> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Windows.Forms.DataGridViewBand> so the garbage collector can reclaim the memory that the <xref:System.Windows.Forms.DataGridViewBand> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  Always call Dispose before you release your last reference to the <xref:System.Windows.Forms.DataGridViewBand>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Windows.Forms.DataGridViewBand> object's `Finalize` method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataGridViewBand" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  
  
 When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.DataGridViewBand> references. This method invokes the `Dispose()` method of each referenced object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~DataGridViewBand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources associated with the band.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method overrides <xref:System.Object.Finalize%2A>. Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.  
  
 For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 When called by the garbage collector, this method calls the <xref:System.Windows.Forms.DataGridViewBand.Dispose%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Frozen">
      <MemberSignature Language="C#" Value="public virtual bool Frozen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Frozen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the band will move when a user scrolls through the <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <value>
          <see langword="true" /> if the band cannot be scrolled from view; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property can hold a band of important information in place when a user scrolls through the <xref:System.Windows.Forms.DataGridView>. Bands adjacent to the frozen band will move over the frozen band.  
  
   
  
## Examples  
 The following code example freezes a band of cells in a column and a row. The example also changes the default cell style of the frozen bands to specify which bands are frozen. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewBand> class.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#7](~/add/codesnippet/cpp/p-system.windows.forms.d_216_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#7](~/add/codesnippet/csharp/p-system.windows.forms.d_216_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#7](~/add/codesnippet/visualbasic/p-system.windows.forms.d_216_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasDefaultCellStyle">
      <MemberSignature Language="C#" Value="public bool HasDefaultCellStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A&gt; property has been set.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A&gt; property has been set; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Getting the value of the <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> property automatically instantiates a new <xref:System.Windows.Forms.DataGridViewCellStyle> if the property has not previously been accessed. You must, therefore, use the HasDefaultCellStyle property to determine whether the <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> property is currently set to a <xref:System.Windows.Forms.DataGridViewCellStyle> instance. This is useful to determine which properties of the object returned by the <xref:System.Windows.Forms.DataGridViewBand.InheritedStyle%2A> property represent styles set specifically for the band.  
  
 For more information about cell style inheritance, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderCellCore">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.DataGridViewHeaderCell HeaderCellCore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewHeaderCell HeaderCellCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the header cell of the <see cref="T:System.Windows.Forms.DataGridViewBand" />.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewHeaderCell" /> representing the header cell of the <see cref="T:System.Windows.Forms.DataGridViewBand" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The specified value when setting this property is not a <see cref="T:System.Windows.Forms.DataGridViewRowHeaderCell" /> and this <see cref="T:System.Windows.Forms.DataGridViewBand" /> instance is of type <see cref="T:System.Windows.Forms.DataGridViewRow" />.  
  
 -or-  
  
 The specified value when setting this property is not a <see cref="T:System.Windows.Forms.DataGridViewColumnHeaderCell" /> and this <see cref="T:System.Windows.Forms.DataGridViewBand" /> instance is of type <see cref="T:System.Windows.Forms.DataGridViewColumn" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the relative position of the band within the <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
        <value>The zero-based position of the band in the <see cref="T:System.Windows.Forms.DataGridViewRowCollection" /> or <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" /> that it is contained within. The default is -1, indicating that there is no associated <see cref="T:System.Windows.Forms.DataGridView" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property does not necessarily correspond to the current visual position of the band within the collection. For example, if the user reorders columns in a <xref:System.Windows.Forms.DataGridView> at run time (assuming the <xref:System.Windows.Forms.DataGridView.AllowUserToOrderColumns%2A> property is set to `true`), the value of the Index property of each column will not change. Instead, the column <xref:System.Windows.Forms.DataGridViewColumn.DisplayIndex%2A> values change. Sorting rows, however, does change their Index values.  
  
   
  
## Examples  
 The following code example uses the Index property to set column labels. The band's Index property is accessed through a <xref:System.Windows.Forms.DataGridViewColumn>.  
  
> [!NOTE]
>  If visual styles are enabled, the current theme overrides the display style properties for row and column headers.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#150](~/add/codesnippet/cpp/p-system.windows.forms.d_205_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#150](~/add/codesnippet/visualbasic/p-system.windows.forms.d_205_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#150](~/add/codesnippet/csharp/p-system.windows.forms.d_205_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InheritedStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewCellStyle InheritedStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle InheritedStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the cell style in effect for the current band, taking into account style inheritance.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> associated with the <see cref="T:System.Windows.Forms.DataGridViewBand" />. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The implementation of this property in the <xref:System.Windows.Forms.DataGridViewBand> class always returns `null` because this base class cannot contain elements.  
  
 For more information about style inheritance, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsRow">
      <MemberSignature Language="C#" Value="protected bool IsRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the band represents a row.</summary>
        <value>
          <see langword="true" /> if the band represents a <see cref="T:System.Windows.Forms.DataGridViewRow" />; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataGridViewChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataGridViewChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataGridViewChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the band is associated with a different <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user can edit the band's cells.</summary>
        <value>
          <see langword="true" /> if the user cannot edit the band's cells; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ReadOnly property affects the <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A?displayProperty=fullName> property of each cell in the band. For example, if the ReadOnly property of a <xref:System.Windows.Forms.DataGridViewRow> changes, then the <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A?displayProperty=fullName> property of all cells in the row will change.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ReadOnly property to disable editing for an entire <xref:System.Windows.Forms.DataGridView>. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewBand> class.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#11](~/add/codesnippet/cpp/p-system.windows.forms.d_272_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#11](~/add/codesnippet/csharp/p-system.windows.forms.d_272_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#11](~/add/codesnippet/visualbasic/p-system.windows.forms.d_272_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When setting this property, this <see cref="T:System.Windows.Forms.DataGridViewBand" /> instance is a shared <see cref="T:System.Windows.Forms.DataGridViewRow" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resizable">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewTriState Resizable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewTriState Resizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewTriState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the band can be resized in the user interface (UI).</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DataGridViewTriState" /> values. The default is <see cref="T:System.Windows.Forms.DataGridViewTriState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can prevent users from resizing individual rows or columns by setting their Resizable properties. By default, the Resizable property value is based on the <xref:System.Windows.Forms.DataGridView.AllowUserToResizeColumns%2A> property value for columns and the <xref:System.Windows.Forms.DataGridView.AllowUserToResizeRows%2A> property value for rows. If you explicitly set Resizable to <xref:System.Windows.Forms.DataGridViewTriState> or <xref:System.Windows.Forms.DataGridViewTriState>, however, the control value is ignored. Set Resizable to <xref:System.Windows.Forms.DataGridViewTriState> to restore the inheritance.  
  
 Because <xref:System.Windows.Forms.DataGridViewTriState> restores the value inheritance, the Resizable property will never return a <xref:System.Windows.Forms.DataGridViewTriState> value unless the row or column has not been added to a <xref:System.Windows.Forms.DataGridView> control. If you need to determine whether the Resizable property value of a row or column is inherited, check its <xref:System.Windows.Forms.DataGridViewElement.State%2A> property. If the <xref:System.Windows.Forms.DataGridViewElement.State%2A> value includes the <xref:System.Windows.Forms.DataGridViewElementStates> flag, the Resizable property value is not inherited. If the Resizable property value is <xref:System.Windows.Forms.DataGridViewTriState>, the user will not be able to manually adjust band size.  
  
   
  
## Examples  
 The following code example sets the Resizable property to the default.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.MouseBasedResizing#14](~/add/codesnippet/cpp/p-system.windows.forms.d_251_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.MouseBasedResizing#14](~/add/codesnippet/csharp/p-system.windows.forms.d_251_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.MouseBasedResizing#14](~/add/codesnippet/visualbasic/p-system.windows.forms.d_251_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public virtual bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the band is in a selected user interface (UI) state.</summary>
        <value>
          <see langword="true" /> if the band is selected; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property can be set only if a <xref:System.Windows.Forms.DataGridView> with the <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property enabled is associated with the band.  
  
   
  
## Examples  
 The following code example illustrates the use of this property.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectedCollections#05](~/add/codesnippet/csharp/p-system.windows.forms.d_271_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectedCollections#05](~/add/codesnippet/visualbasic/p-system.windows.forms.d_271_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="true" />, but the band has not been added to a <see cref="T:System.Windows.Forms.DataGridView" /> control.  
  
 -or-  
  
 This property is being set on a shared <see cref="T:System.Windows.Forms.DataGridViewRow" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object that contains data to associate with the band.</summary>
        <value>An &lt;xref:System.Object&gt; that contains information associated with the band. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Tag property can store any object that you want to associate with a band. This property is typically used to store identifying information, such as a string name, a unique identifier (for example, a <xref:System.Guid>), or the index of the band's data in a database.  
  
   
  
## Examples  
 The following code example uses the Tag property to store a color that is later retrieved to set the <xref:System.Windows.Forms.DataGridView.BackColor%2A> property.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#12](~/add/codesnippet/cpp/p-system.windows.forms.d_180_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#12](~/add/codesnippet/csharp/p-system.windows.forms.d_180_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#12](~/add/codesnippet/visualbasic/p-system.windows.forms.d_180_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current band.</summary>
        <returns>A &lt;xref:System.String&gt; that represents the current <see cref="T:System.Windows.Forms.DataGridViewBand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method. The returned string contains the class's name and <xref:System.Windows.Forms.DataGridViewBand.Index%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public virtual bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the band is visible to the user.</summary>
        <value>
          <see langword="true" /> if the band is visible; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property can be used to hide extraneous columns or rows.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Visible property to hide a row. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewBand> class.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#9](~/add/codesnippet/cpp/p-system.windows.forms.d_302_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#9](~/add/codesnippet/csharp/p-system.windows.forms.d_302_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#9](~/add/codesnippet/visualbasic/p-system.windows.forms.d_302_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see langword="false" /> and the band is the row for new records.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>