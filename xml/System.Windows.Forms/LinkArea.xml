<Type Name="LinkArea" FullName="System.Windows.Forms.LinkArea">
  <TypeSignature Language="C#" Value="public struct LinkArea" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit LinkArea extends System.ValueType" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.LinkArea/LinkAreaConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an area within a <see cref="T:System.Windows.Forms.LinkLabel" /> control that represents a hyperlink within the control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 There are two ways to add a hyperlink to the text of a <xref:System.Windows.Forms.LinkLabel> control. You can access the <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> method of the <xref:System.Windows.Forms.LinkLabel.LinkCollection> class through the <xref:System.Windows.Forms.LinkLabel.Links%2A> property of the <xref:System.Windows.Forms.LinkLabel> to add multiple hyperlinks to the control's text. If you only need to add a single hyperlink to the text of the control, you can use the <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> property of the <xref:System.Windows.Forms.LinkLabel>. This property accepts a LinkArea that defines the location of the hyperlink within the control's text. When a hyperlink is specified using the LinkArea property, the link area is then added to the <xref:System.Windows.Forms.LinkLabel.LinkCollection> in the same manner as adding the link using the <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> method of the <xref:System.Windows.Forms.LinkLabel.LinkCollection>.  
  
 The <xref:System.Windows.Forms.LinkArea.Length%2A> property specifies the number of characters within the text of the <xref:System.Windows.Forms.LinkLabel> to include in the link area. The <xref:System.Windows.Forms.LinkArea.Start%2A> property specifies the first character in the control text to include in the hyperlink. If you want to determine whether a specific LinkArea is empty, you can use the <xref:System.Windows.Forms.LinkArea.IsEmpty%2A> property instead of checking the values of the <xref:System.Windows.Forms.LinkArea.Start%2A> and <xref:System.Windows.Forms.LinkArea.Length%2A> properties.  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Windows.Forms.LinkLabel> class, with multiple LinkArea sections defined, to display a label on a form. The example demonstrates setting the <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, and <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> properties to customize the look of the <xref:System.Windows.Forms.LinkLabel>. The first LinkArea is specified using the <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=fullName> property. Additional links are added to the <xref:System.Windows.Forms.LinkLabel> using the <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=fullName> method. The example handles the <xref:System.Windows.Forms.LinkLabel.LinkClicked> event by starting the Web browser for hyperlinks, and displaying a <xref:System.Windows.Forms.MessageBox> for other links.  
  
 [!code-cs[System.Windows.Forms.LinkLabel#1](~/add/codesnippet/csharp/t-system.windows.forms.l_2_1.cs)]
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/add/codesnippet/cpp/t-system.windows.forms.l_2_1.cpp)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/add/codesnippet/visualbasic/t-system.windows.forms.l_2_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkArea (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 start, int32 length) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">The zero-based starting location of the link area within the text of the <see cref="T:System.Windows.Forms.LinkLabel" />.</param>
        <param name="length">The number of characters, after the starting character, to include in the link area.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.LinkArea" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to compare to this <see cref="T:System.Windows.Forms.LinkArea" />.</param>
        <summary>Determines whether this <see cref="T:System.Windows.Forms.LinkArea" /> is equal to the specified object.</summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current <see cref="T:System.Windows.Forms.LinkArea" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Windows.Forms.LinkArea" /> is empty.</summary>
        <value>
          <see langword="true" /> if the specified start and length return an empty link area; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this property to determine whether a valid link area has been specified in this object instead of evaluating the values of the <xref:System.Windows.Forms.LinkArea.Length%2A> and <xref:System.Windows.Forms.LinkArea.Start%2A> properties.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of characters in the link area.</summary>
        <value>The number of characters, including spaces, in the link area.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To specify text from the <xref:System.Windows.Forms.LinkLabel> to display as a link, set the <xref:System.Windows.Forms.LinkArea.Start%2A> property to the location in the text to start creating the link. After the <xref:System.Windows.Forms.LinkArea.Start%2A> property is set, set the value of the Length property to the number of characters, including the character position specified in the <xref:System.Windows.Forms.LinkArea.Start%2A> property, that you want to make the link text. For example, if you want to make the first word of the text "The quick brown fox" a link, you set the <xref:System.Windows.Forms.LinkArea.Start%2A> property to zero (0) and the Length property to three (3).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.Forms.LinkArea linkArea1, System.Windows.Forms.LinkArea linkArea2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Forms.LinkArea linkArea1, valuetype System.Windows.Forms.LinkArea linkArea2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkArea1" Type="System.Windows.Forms.LinkArea" />
        <Parameter Name="linkArea2" Type="System.Windows.Forms.LinkArea" />
      </Parameters>
      <Docs>
        <param name="linkArea1">A <see cref="T:System.Windows.Forms.LinkArea" /> to compare.</param>
        <param name="linkArea2">A <see cref="T:System.Windows.Forms.LinkArea" /> to compare.</param>
        <summary>Returns a value indicating whether two instances of the <see cref="T:System.Windows.Forms.LinkArea" /> class are equal.</summary>
        <returns>
          <see langword="true" /> if two instances of the <see cref="T:System.Windows.Forms.LinkArea" /> class are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.Forms.LinkArea linkArea1, System.Windows.Forms.LinkArea linkArea2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Forms.LinkArea linkArea1, valuetype System.Windows.Forms.LinkArea linkArea2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkArea1" Type="System.Windows.Forms.LinkArea" />
        <Parameter Name="linkArea2" Type="System.Windows.Forms.LinkArea" />
      </Parameters>
      <Docs>
        <param name="linkArea1">A <see cref="T:System.Windows.Forms.LinkArea" /> to compare.</param>
        <param name="linkArea2">A <see cref="T:System.Windows.Forms.LinkArea" /> to compare.</param>
        <summary>Returns a value indicating whether two instances of the <see cref="T:System.Windows.Forms.LinkArea" /> class are not equal.</summary>
        <returns>
          <see langword="true" /> if two instances of the <see cref="T:System.Windows.Forms.LinkArea" /> class are not equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public int Start { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Start" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the starting location of the link area within the text of the <see cref="T:System.Windows.Forms.LinkLabel" />.</summary>
        <value>The location within the text of the <see cref="T:System.Windows.Forms.LinkLabel" /> control where the link starts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To specify text from the <xref:System.Windows.Forms.LinkLabel> to display as a link, set the Start property to the location in the text to start creating the link. After the Start property is set, set the value of the <xref:System.Windows.Forms.LinkArea.Length%2A> property to the number of characters, including the character position specified in the Start property, that you want to make the link text. For example, if you want to make the first word of the text "The quick brown fox" a link, you set the Start property to zero (0) and the <xref:System.Windows.Forms.LinkArea.Length%2A> property to three (3).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the fully qualified type name of this instance.</summary>
        <returns>A &lt;xref:System.String&gt; containing a fully qualified type name.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>