<Type Name="Control" FullName="System.Windows.Forms.Control">
  <TypeSignature Language="C#" Value="public class Control : System.ComponentModel.Component, IDisposable, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IDropTarget, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Control extends System.ComponentModel.Component implements class System.ComponentModel.IComponent, class System.ComponentModel.ISynchronizeInvoke, class System.IDisposable, class System.Windows.Forms.IBindableComponent, class System.Windows.Forms.IDropTarget, class System.Windows.Forms.IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISynchronizeInvoke</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IDropTarget</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the base class for controls, which are components with visual representation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To create your own control class, inherit from the <xref:System.Windows.Forms.UserControl>, Control classes, or from the other Windows Forms provided controls. For more information about authoring custom controls, see [Developing Custom Windows Forms Controls with the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 The Control class implements very basic functionality required by classes that display information to the user. It handles user input through the keyboard and pointing devices. It handles message routing and security. It defines the bounds of a control (its position and size), although it does not implement painting. It provides a window handle (`hWnd`).  
  
 Windows Forms controls use ambient properties so child controls can appear like their surrounding environment. An *ambient property* is a control property that, if not set, is retrieved from the parent control. If the control does not have a <xref:System.Windows.Forms.Control.Parent%2A>, and the property is not set, the control attempts to determine the value of the ambient property through the <xref:System.Windows.Forms.Control.Site%2A> property. If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <xref:System.Windows.Forms.AmbientProperties>, the control uses its own default values. Typically, an ambient property represents a characteristic of a control, such as <xref:System.Windows.Forms.Control.BackColor%2A>, that is communicated to a child control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. Ambient properties provided by the Controlclass include: <xref:System.Windows.Forms.Control.Cursor%2A>, <xref:System.Windows.Forms.Control.Font%2A>, <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.ForeColor%2A>, and <xref:System.Windows.Forms.Control.RightToLeft%2A>.  
  
> [!NOTE]
>  To make your Windows Forms application support visual styles, be sure to set the <xref:System.Windows.Forms.FlatStyle> property to `System` and include a manifest with your executable. A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file. For an example of a manifest, see the Example section of the <xref:System.Windows.Forms.FlatStyle> enumeration. For more information about using visual styles, see[Visual Styles](http://msdn.microsoft.com/library/windows/desktop/bb773187.aspx).  
  
 Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities. Sometimes you will want to provide additional information to accessibility client applications. There are two ways of providing this additional information. You can set the <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleDescription%2A>, <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> property values, which will be reported to accessibility client applications. This method is typically used to provide limited accessibility information for existing controls. Alternatively, you can write your own class deriving from the <xref:System.Windows.Forms.AccessibleObject> or <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes, providing as much accessibility information as needed.  
  
> [!NOTE]
>  To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.  
  
> [!NOTE]
>  Do not add data bindings for a Control in its constructor. Doing so will cause errors in code generation and can cause unwanted behavior.  
  
 The majority of the controls in the <xref:System.Windows.Forms> namespace use the underlying Windows common control as a base to build on. For more information about the Windows common controls, see[General Control Reference](http://msdn.microsoft.com/library/windows/desktop/bb775497.aspx).  
  
 To identify Windows Forms controls from a separate process, use a standard `SendMessage` call to pass the WM_GETCONTROLNAME message. WM_GETCONTROLNAME is independent of the language and Windows hierarchy. For more information, see the "Recommended Solution for Windows Forms" topic in[Automating Windows Forms](http://msdn.microsoft.com/library/ms996405.aspx).  
  
 Use the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property to synchronize access to the control from multiple threads. For more information about multithreaded Windows Forms controls, see [How to: Make Thread-Safe Calls to Windows Forms Controls](~/add/includes/ajax-current-ext-md.md)  
  
 ]]></format>
    </remarks>
    <threadsafe>Only the following members are thread safe: &lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;, &lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;, &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;, &lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;, and &lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt; if the handle for the control has already been created. Calling &lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt; before the control's handle has been created on a background thread can cause illegal cross thread calls.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with default settings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text displayed by the control.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  
  
 This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</param>
        <param name="text">The text displayed by the control.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  
  
 This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value. The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The text displayed by the control.</param>
        <param name="left">The &lt;xref:System.Drawing.Point.X%2A&gt; position of the control, in pixels, from the left edge of the control's container. The value is assigned to the &lt;xref:System.Windows.Forms.Control.Left%2A&gt; property.</param>
        <param name="top">The &lt;xref:System.Drawing.Point.Y%2A&gt; position of the control, in pixels, from the top edge of the control's container. The value is assigned to the &lt;xref:System.Windows.Forms.Control.Top%2A&gt; property.</param>
        <param name="width">The width of the control, in pixels. The value is assigned to the &lt;xref:System.Windows.Forms.Control.Width%2A&gt; property.</param>
        <param name="height">The height of the control, in pixels. The value is assigned to the &lt;xref:System.Windows.Forms.Control.Height%2A&gt; property.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text, size, and location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  
  
 This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A>property value to the `text` parameter value. The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.  
  
> [!NOTE]
>  To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parent">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</param>
        <param name="text">The text displayed by the control.</param>
        <param name="left">The &lt;xref:System.Drawing.Point.X%2A&gt; position of the control, in pixels, from the left edge of the control's container. The value is assigned to the &lt;xref:System.Windows.Forms.Control.Left%2A&gt; property.</param>
        <param name="top">The &lt;xref:System.Drawing.Point.Y%2A&gt; position of the control, in pixels, from the top edge of the control's container. The value is assigned to the &lt;xref:System.Windows.Forms.Control.Top%2A&gt; property.</param>
        <param name="width">The width of the control, in pixels. The value is assigned to the &lt;xref:System.Windows.Forms.Control.Width%2A&gt; property.</param>
        <param name="height">The height of the control, in pixels. The value is assigned to the &lt;xref:System.Windows.Forms.Control.Height%2A&gt; property.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text, size, and location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  
  
 This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value. The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>. The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.  
  
> [!NOTE]
>  To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 childID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</param>
        <param name="childID">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</param>
        <summary>Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You must call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=fullName> method for each <xref:System.Windows.Forms.AccessibleEvents> the accessibility client applications are to be notified of. The <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method is typically called when a property is set or from within an event handler. For example, you might call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method and pass in an <xref:System.Windows.Forms.AccessibleEvents> value of `Hide` from within the event handler for the <xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=fullName> event.  
  
   
  
## Examples  
 The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information. The control plots two curves along with a legend. The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control. Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  
  
 This code excerpt demonstrates calling the AccessibilityNotifyClients method. See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.  
  
 [!code-vb[System.Windows.Forms.AccessibleObject#5](~/add/codesnippet/visualbasic/af0c391d-8e12-4af6-b124-_1.vb)]
 [!code-cs[System.Windows.Forms.AccessibleObject#5](~/add/codesnippet/csharp/af0c391d-8e12-4af6-b124-_1.cs)]
 [!code-cpp[System.Windows.Forms.AccessibleObject#5](~/add/codesnippet/cpp/af0c391d-8e12-4af6-b124-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 objectID, int32 childID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="objectID" Type="System.Int32" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</param>
        <param name="objectID">The identifier of the <see cref="T:System.Windows.Forms.AccessibleObject" />.</param>
        <param name="childID">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</param>
        <summary>Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control .</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</summary>
        <value>The <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To control the instance returned from this method, override the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.  
  
 If no <xref:System.Windows.Forms.AccessibleObject> is currently assigned to the control, a new instance of one is created.  
  
> [!NOTE]
>  To get or set the AccessibilityObject property, you must add a reference to the `Accessibility` assembly installed with the[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)].  
  
 For more information about accessible objects, see [Active Accessibility](http://msdn.microsoft.com/library/windows/desktop/dd373592.aspx).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDefaultActionDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDefaultActionDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDefaultActionDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default action description of the control for use by accessibility client applications.</summary>
        <value>The default action description of the control for use by accessibility client applications.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An object's AccessibleDefaultActionDescription property describes the object's primary method of manipulation from the user's viewpoint. This property should be a verb or a short verb phrase.  
  
> [!NOTE]
>  Not all objects have default actions, and some objects might have a default action that is related to its <xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=fullName> property, such as in the following examples:  
  
-   A selected check box has a default action of "Uncheck" and a value of "Checked."  
  
-   A cleared check box has a default action of "Check" and a value of "Unchecked."  
  
-   A button labeled "Print" has a default action of "Press," with no value.  
  
-   A label or a text box control that shows "Printer" has no default action, but would have a value of "Printer."  
  
 For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the description of the control used by accessibility client applications.</summary>
        <value>The description of the control used by accessibility client applications. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An object's AccessibleDescription property provides a textual description about an object's visual appearance. The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.  
  
 The AccessibleDescription property is needed if the description is not obvious, or if it is redundant based on the object's <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleRole%2A>, <xref:System.Windows.Forms.AccessibleObject.State%2A>, and <xref:System.Windows.Forms.AccessibleObject.Value%2A> properties. For example, a button with "OK" would not need additional information, but a button that shows a picture of a cactus would. The <xref:System.Windows.Forms.Control.AccessibleName%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> (and perhaps <xref:System.Windows.Forms.AccessibleObject.Help%2A>) properties for the cactus button would describe its purpose, but the AccessibleDescription property would convey information that is less tangible, such as "A button that shows a picture of a cactus."  
  
 For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).  
  
   
  
## Examples  
 The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and AccessibleDescription properties, because the <xref:System.Windows.Forms.Control.Text%2A> property is `null`. This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.  
  
 [!code-cs[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/csharp/p-system.windows.forms.c_91_1.cs)]
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/cpp/p-system.windows.forms.c_91_1.cpp)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_91_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessibleName">
      <MemberSignature Language="C#" Value="public string AccessibleName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the control used by accessibility client applications.</summary>
        <value>The name of the control used by accessibility client applications. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AccessibleName property is a label that briefly describes and identifies the object within its container, such as the text in a <xref:System.Windows.Forms.Button>, the name of a <xref:System.Windows.Forms.MenuItem>, or a label displayed next to a <xref:System.Windows.Forms.TextBox> control.  
  
 For more information about properties of accessible objects, see the "[Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).  
  
   
  
## Examples  
 The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the AccessibleName and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties since the <xref:System.Windows.Forms.Control.Text%2A> property is `null`. This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.  
  
 [!code-cs[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/csharp/p-system.windows.forms.c_35_1.cs)]
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/cpp/p-system.windows.forms.c_35_1.cpp)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_35_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessibleRole">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AccessibleRole AccessibleRole" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleRole</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the accessible role of the control</summary>
        <value>One of the values of <see cref="T:System.Windows.Forms.AccessibleRole" />. The default is <see langword="Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AccessibleRole property describes what kind of user interface element an object is. If the control's role cannot be determined, the AccessibleRole property is set to `Default`.  
  
 For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="T:System.Windows.Forms.AccessibleRole" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public virtual bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control can accept data that the user drags onto it.</summary>
        <value>
          <see langword="true" /> if drag-and-drop operations are allowed in the control; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data. Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.  
  
 [!code-cs[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/csharp/p-system.windows.forms.c_93_1.cs)]
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/cpp/p-system.windows.forms.c_93_1.cpp)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_93_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for unrestricted Clipboard access to set this property to <see langword="true" />. Associated enumeration: the <see langword="AllClipboard" /> value of <see cref="T:System.Security.Permissions.UIPermissionClipboard" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Anchor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.AnchorStyles Anchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AnchorStyles Anchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AnchorStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</summary>
        <value>A bitwise combination of the <see cref="T:System.Windows.Forms.AnchorStyles" /> values. The default is <see langword="Top" /> and <see langword="Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Anchor property to define how a control is automatically resized as its parent control is resized. Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.  
  
 You can anchor a control to one or more edges of its container. For example, if you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> whose Anchor property value is set to `Top` and `Bottom`, the <xref:System.Windows.Forms.Button> is stretched to maintain the anchored distance to the top and bottom edges of the <xref:System.Windows.Forms.Form> as the <xref:System.Windows.Forms.Control.Height%2A> of the <xref:System.Windows.Forms.Form> is increased.  
  
> [!NOTE]
>  The Anchor and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive. Only one can be set at a time, and the last one set takes precedence.  
  
   
  
## Examples  
 The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>. The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  
  
 [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_119_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_119_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_119_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoScrollOffset">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Point AutoScrollOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point AutoScrollOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Point), "0, 0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets where this control is scrolled to in &lt;xref:System.Windows.Forms.ScrollableControl.ScrollControlIntoView%2A&gt;.</summary>
        <value>A <see cref="T:System.Drawing.Point" /> specifying the scroll location. The default is the upper-left corner of the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public virtual bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is not relevant for this class.</summary>
        <value>
          <see langword="true" /> if enabled; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoSizeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This event is not relevant for this class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-501)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color for the control.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the background color of the control. The default is the value of the &lt;xref:System.Windows.Forms.Control.DefaultBackColor%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BackColor property does not support transparent colors unless the `SupportsTransparentBackColor` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=fullName> is set to `true`.  
  
 The BackColor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same BackColor as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.  
  
   
  
## Examples  
 The following code example sets the BackColor and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.  
  
 [!code-cs[Windows.Forms.Control Properties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_44_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_44_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_44_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.Control.BackColor%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.BackColor%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form>that contains a <xref:System.Windows.Forms.TextBox>.  
  
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_47_1.vb)]
 [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_47_1.cs)]
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_47_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background image displayed in the control.</summary>
        <value>An <see cref="T:System.Drawing.Image" /> that represents the image to display in the background of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Use the BackgroundImage property to place a graphic image onto a control.  
  
> [!NOTE]
>  Images with translucent or transparent colors are not supported by Windows Forms controls as background images.  
>   
>  This property is not supported on child controls whose <xref:System.Windows.Forms.Form.RightToLeftLayout%2A> property is `true`.  
  
   
  
## Examples  
 The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the BackgroundImage and resizes the button to the same size as the <xref:System.Drawing.Image>. The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  
  
 [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_34_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_34_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_34_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  
  
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_46_1.vb)]
 [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_46_1.cs)]
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_46_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout" /> enumeration.</summary>
        <value>One of the values of <see cref="T:System.Windows.Forms.ImageLayout" /> (<see cref="T:System.Windows.Forms.ImageLayout" /> , <see cref="T:System.Windows.Forms.ImageLayout" />, <see cref="T:System.Windows.Forms.ImageLayout" />, <see cref="T:System.Windows.Forms.ImageLayout" />, or <see cref="T:System.Windows.Forms.ImageLayout" />). <see cref="T:System.Windows.Forms.ImageLayout" /> is the default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the BackgroundImageLayout property to specify the position and behavior of an image you have placed onto a control. BackgroundImageLayout takes effect only if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is set.  
  
 You can increase performance for large images if you set BackgroundImageLayout to something other than <xref:System.Windows.Forms.ImageLayout>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified enumeration value does not exist.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property changes either programmatically or by user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BackgroundImageLayoutChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the BackgroundImageLayoutChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#9](~/add/codesnippet/csharp/e-system.windows.forms.c_5_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#9](~/add/codesnippet/visualbasic/e-system.windows.forms.c_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Delegate method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method">A delegate to a method that takes no parameters.</param>
        <summary>Executes the specified delegate asynchronously on the thread that the control's underlying handle was created on.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that represents the result of the BeginInvoke operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread, even the thread that owns the control's handle. If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, BeginInvoke will throw an exception. Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.  
  
 You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required. <xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.  
  
> [!NOTE]
>  Most methods on a control can only be called from the thread where the control was created. In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, BeginInvoke, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread. The invoke methods always invoke their callbacks on the control's thread.  
  
> [!NOTE]
>  An exception might be thrown if the thread that should process the message is no longer active.  
  
   
  
## Examples  
 The following code example demonstrates a use of the BeginInvoke method.  
  
 [!code-cpp[Control_BeginInvoke#2](~/add/codesnippet/cpp/m-system.windows.forms.c_68_1.cpp)]
 [!code-vb[Control_BeginInvoke#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_68_1.vb)]
 [!code-cs[Control_BeginInvoke#2](~/add/codesnippet/csharp/m-system.windows.forms.c_68_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No appropriate window handle can be found.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">A delegate to a method that takes parameters of the same number and type that are contained in the `args` parameter.</param>
        <param name="args">An array of objects to pass as arguments to the given method. This can be <see langword="null" /> if no arguments are needed.</param>
        <summary>Executes the specified delegate asynchronously with the specified arguments, on the thread that the control's underlying handle was created on.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that represents the result of the &lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt; operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread, even the thread that owns the control's handle. If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception. Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.  
  
 You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required. <xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.  
  
> [!NOTE]
>  Most methods on a control can only be called from the thread where the control was created. In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread. The invoke methods always invoke their callbacks on the control's thread.  
  
> [!NOTE]
>  An exception might be thrown if the thread that should process the message is no longer active.  
  
   
  
## Examples  
 The following code example demonstrates a use of the BeginInvoke method.  
  
 [!code-cpp[Control_BeginInvoke#1](~/add/codesnippet/cpp/m-system.windows.forms.c_33_1.cpp)]
 [!code-vb[Control_BeginInvoke#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_33_1.vb)]
 [!code-cs[Control_BeginInvoke#1](~/add/codesnippet/csharp/m-system.windows.forms.c_33_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No appropriate window handle can be found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.BindingContext> of a <xref:System.Windows.Forms.Control> is used to return a single<xref:System.Windows.Forms.BindingManagerBase> for all data-bound controls contained by the <xref:System.Windows.Forms.Control>. The <xref:System.Windows.Forms.BindingManagerBase> keeps all controls that are bound to the same data source synchronized. For example, setting the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property of the <xref:System.Windows.Forms.BindingManagerBase> specifies the item in the underlying list that all data-bound controls point to.  
  
 For more information about creating a new <xref:System.Windows.Forms.BindingContext> and assigning it to the BindingContext property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A>.  
  
   
  
## Examples  
 The following code example creates four <xref:System.Windows.Forms.Binding> objects to bind five controls, a <xref:System.Windows.Forms.DateTimePicker> and four <xref:System.Windows.Forms.TextBox> controls, to several data sources. The <xref:System.Windows.Forms.BindingContext> is then used to get the <xref:System.Windows.Forms.BindingManagerBase> for each data source.  
  
 [!code-cpp[Classic BindingContext Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_109_1.cpp)]
 [!code-cs[Classic BindingContext Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_109_1.cs)]
 [!code-vb[Classic BindingContext Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_109_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="T:System.Windows.Forms.BindingContext" /> property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To add a new <xref:System.Windows.Forms.BindingContext> to the <xref:System.Windows.Forms.Control> through the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A> constructor.  
  
 This event is raised if the <xref:System.Windows.Forms.Control.BindingContext%2A> property is changed is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example adds an <xref:System.EventHandler> delegate to the BindingContextChanged event of a <xref:System.Windows.Forms.TextBox> control.  
  
 [!code-vb[Classic Control.BindingContextChanged Example#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_1_1.vb)]
 [!code-cs[Classic Control.BindingContextChanged Example#1](~/add/codesnippet/csharp/e-system.windows.forms.c_1_1.cs)]
 [!code-cpp[Classic Control.BindingContextChanged Example#1](~/add/codesnippet/cpp/e-system.windows.forms.c_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public int Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</summary>
        <value>An &lt;xref:System.Int32&gt; representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property is equal to the sum of the <xref:System.Windows.Forms.Control.Top%2A> property value, and the <xref:System.Windows.Forms.Control.Height%2A> property value.  
  
 The Bottom property is a read-only property. You can manipulate this property value by changing the value of the <xref:System.Windows.Forms.Control.Top%2A> or <xref:System.Windows.Forms.Control.Height%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.  
  
   
  
## Examples  
 The following code example uses the Bottom property to define the lower limit of a <xref:System.Windows.Forms.TextBox> control relative to the client area of the container.  
  
 [!code-cpp[Control.KeyUp#1](~/add/codesnippet/cpp/p-system.windows.forms.c_53_1.cpp)]
 [!code-vb[Control.KeyUp#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_53_1.vb)]
 [!code-cs[Control.KeyUp#1](~/add/codesnippet/csharp/p-system.windows.forms.c_53_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control.</summary>
        <value>A <see cref="T:System.Drawing.Rectangle" /> in pixels relative to the parent control that represents the size and location of the control including its nonclient elements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The bounds of the control include the nonclient elements such as scroll bars, borders, title bars, and menus. The <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method is called to set the Bounds property. The Boundsproperty is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that your code is executed when the Bounds property is set.  
  
   
  
## Examples  
 The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  
  
 [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_114_1.cs)]
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_114_1.cpp)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_114_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BringToFront">
      <MemberSignature Language="C#" Value="public void BringToFront ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringToFront() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Brings the control to the front of the z-order.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The control is moved to the front of the z-order. If the control is a child of another control, the child control is moved to the front of the z-order. BringToFront does not make a control a top-level control, and it does not raise the <xref:System.Windows.Forms.Control.Paint> event.  
  
   
  
## Examples  
 The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its BringToFront method. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.  
  
 [!code-cs[Windows.Forms.Control Members4#1](~/add/codesnippet/csharp/m-system.windows.forms.c_59_1.cs)]
 [!code-vb[Windows.Forms.Control Members4#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_59_1.vb)]
 [!code-cpp[Windows.Forms.Control Members4#1](~/add/codesnippet/cpp/m-system.windows.forms.c_59_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected virtual bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt; property can be set to an active value, to enable IME support.</summary>
        <value>
          <see langword="true" /> in all cases.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Derived classes can override this property to return `false` if IME is not supported.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanFocus">
      <MemberSignature Language="C#" Value="public bool CanFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control can receive focus.</summary>
        <value>
          <see langword="true" /> if the control can receive focus; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In order for a control to receive input focus, the control must have a handle assigned to it, and the <xref:System.Windows.Forms.Control.Visible%2A> and <xref:System.Windows.Forms.Control.Enabled%2A> properties must both be set to `true` for both the control and all its parent controls, and the control must be a form or the control's outermost parent must be a form.  
  
   
  
## Examples  
 The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/add/codesnippet/cpp/p-system.windows.forms.c_18_1.cpp)]
 [!code-cs[Windows.Forms.ControlMembers6#1](~/add/codesnippet/csharp/p-system.windows.forms.c_18_1.cs)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanRaiseEvents">
      <MemberSignature Language="C#" Value="protected override bool CanRaiseEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRaiseEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if events can be raised on the control.</summary>
        <value>
          <see langword="true" /> if the control is hosted as an ActiveX control whose events are not frozen; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If this control is being hosted as an ActiveX control, this property will return `false` if the ActiveX control has its events frozen.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanSelect">
      <MemberSignature Language="C#" Value="public bool CanSelect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control can be selected.</summary>
        <value>
          <see langword="true" /> if the control can be selected; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns `true` if the `Selectable` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=fullName> is set to `true`, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.  
  
 The Windows Forms controls in the following list are not selectable and will return a value of `false` for the CanSelect property. Controls derived from these controls are also not selectable.  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)  
  
   
  
## Examples  
 The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.  
  
 [!code-cpp[Windows.Forms.ControlMembers6#2](~/add/codesnippet/cpp/p-system.windows.forms.c_67_1.cpp)]
 [!code-cs[Windows.Forms.ControlMembers6#2](~/add/codesnippet/csharp/p-system.windows.forms.c_67_1.cs)]
 [!code-vb[Windows.Forms.ControlMembers6#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_67_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public bool Capture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Capture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control has captured the mouse.</summary>
        <value>
          <see langword="true" /> if the control has captured the mouse; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders. The mouse is typically only captured during drag operations.  
  
 Only the foreground window can capture the mouse. When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window. Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.  
  
 When the mouse is captured, shortcut keys should not work.  
  
   
  
## Examples  
 The following code example demonstrates the Capture property. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.Label> named label1 and two <xref:System.Windows.Forms.ListBox> controls named listbox1 and listbox2. Ensure the form and controls' <xref:System.Windows.Forms.Control.MouseDown> event is associated with the method in this example.  
  
 [!code-vb[System.Windows.Forms.ControlCapture#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_104_1.vb)]
 [!code-cpp[System.Windows.Forms.ControlCapture#1](~/add/codesnippet/cpp/p-system.windows.forms.c_104_1.cpp)]
 [!code-cs[System.Windows.Forms.ControlCapture#1](~/add/codesnippet/csharp/p-system.windows.forms.c_104_1.cs)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to set this property value. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</summary>
        <value>
          <see langword="true" /> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the CausesValidation property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  
  
 The CausesValidation property value is typically set to `false` for controls such as a Help button.  
  
   
  
## Examples  
 The following code example uses the derived class<xref:System.Windows.Forms.TextBox> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled. One of the buttons on the form has its CausesValidation property set to `false`. Clicking or setting focus to this button does not trigger validation. This example requires that a <xref:System.Windows.Forms.TextBox>, an <xref:System.Windows.Forms.ErrorProvider> control, and a <xref:System.Windows.Forms.Button> have been created on a form.  
  
 [!code-cs[Control.Validating#2](~/add/codesnippet/csharp/p-system.windows.forms.c_66_1.cs)]
 [!code-cpp[Control.Validating#2](~/add/codesnippet/cpp/p-system.windows.forms.c_66_1.cpp)]
 [!code-vb[Control.Validating#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_66_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CausesValidationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CausesValidationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CausesValidationChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangeUICues">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.UICuesEventHandler ChangeUICues;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.UICuesEventHandler ChangeUICues" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UICuesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the focus or keyboard user interface (UI) cues change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ChangeUICues event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the ChangeUICues event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#67](~/add/codesnippet/csharp/e-system.windows.forms.c_50_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#67](~/add/codesnippet/visualbasic/e-system.windows.forms.c_50_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CheckForIllegalCrossThreadCalls">
      <MemberSignature Language="C#" Value="public static bool CheckForIllegalCrossThreadCalls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CheckForIllegalCrossThreadCalls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to catch calls on the wrong thread that access a control's &lt;xref:System.Windows.Forms.Control.Handle%2A&gt; property when an application is being debugged.</summary>
        <value>
          <see langword="true" /> if calls on the wrong thread are caught; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a thread other than the creating thread of a control tries to access one of that control's methods or properties, it often leads to unpredictable results. A common invalid thread activity is a call on the wrong thread that accesses the control's <xref:System.Windows.Forms.Control.Handle%2A> property. Set CheckForIllegalCrossThreadCalls to `true` to find and diagnose this thread activity more easily while debugging.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Click event passes an <xref:System.EventArgs> to its event handler, so it only indicates that a click has occurred. If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <xref:System.Windows.Forms.Control.MouseClick> event. However, the <xref:System.Windows.Forms.Control.MouseClick> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.  
  
 A double-click is determined by the mouse settings of the user's operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks. The Click event is raised every time a control is double-clicked. For example, if you have event handlers for the Click and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the Click and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called. If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the Click event might be raised twice.  
  
 You must set the `StandardClick` value of<xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: Click, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows the Click event in an event handler.  
  
 [!code-cpp[Control.FindForm#1](~/add/codesnippet/cpp/e-system.windows.forms.c_21_1.cpp)]
 [!code-vb[Control.FindForm#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_21_1.vb)]
 [!code-cs[Control.FindForm#1](~/add/codesnippet/csharp/e-system.windows.forms.c_21_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rectangle that represents the client area of the control.</summary>
        <value>A <see cref="T:System.Drawing.Rectangle" /> that represents the client area of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.  
  
 Because client coordinates are relative to the upper-left corner of the client area of the control, the coordinates of the upper-left corner of the rectangle returned by this property are (0,0). You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.  
  
 For more information about drawing on controls, see [Rendering a Windows Forms Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example enables auto-scrolling for a form, resizes the form, and ensures that a button remains visible after the form is resized. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> named `button2` on it.  
  
 [!code-cpp[Windows.Forms.Control Member5#2](~/add/codesnippet/cpp/p-system.windows.forms.c_86_1.cpp)]
 [!code-cs[Windows.Forms.Control Member5#2](~/add/codesnippet/csharp/p-system.windows.forms.c_86_1.cs)]
 [!code-vb[Windows.Forms.Control Member5#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_86_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size ClientSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ClientSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height and width of the client area of the control.</summary>
        <value>A <see cref="T:System.Drawing.Size" /> that represents the dimensions of the client area of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus. The <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method is called to set the ClientSizeproperty. The ClientSize property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that your code is executed when the ClientSize property is set.  
  
 The <xref:System.Drawing.Size.Width%2A?displayProperty=fullName> and <xref:System.Drawing.Size.Height%2A?displayProperty=fullName> properties represent the width and height of the client area of the control. You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control.  
  
 For more information about drawing on controls, see [Rendering a Windows Forms Control](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  You cannot bind application settings to this property. For more information on application settings, see [Application Settings Overview](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example resizes the specified control so the control will accommodate its formatted text. The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text. The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control. To make the padding appear equal, align the text with the <xref:System.Drawing.ContentAlignment?displayProperty=fullName> value, if your control supports it.  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/add/codesnippet/cpp/p-system.windows.forms.c_30_1.cpp)]
 [!code-cs[Windows.Forms.Control Member5#1](~/add/codesnippet/csharp/p-system.windows.forms.c_30_1.cs)]
 [!code-vb[Windows.Forms.Control Member5#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_30_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ClientSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ClientSizeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ClientSizeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the ClientSizeChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#12](~/add/codesnippet/csharp/e-system.windows.forms.c_7_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#12](~/add/codesnippet/visualbasic/e-system.windows.forms.c_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CompanyName">
      <MemberSignature Language="C#" Value="public string CompanyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompanyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Description("ControlCompanyNameDescr")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the company or creator of the application containing the control.</summary>
        <value>The company name or creator of the application containing the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CompanyName property is a read-only property. To change the value of this property, set the <xref:System.Reflection.AssemblyCompanyAttribute.Company%2A> property value of the <xref:System.Reflection.AssemblyCompanyAttribute>. The following line of C# code sets the CompanyName property.  
  
```c#  
[assembly: AssemblyCompany("Microsoft")]  
```  
  
> [!NOTE]
>  It is strongly recommended that you provide the company name, product name, and product version for your app.  
  
   
  
## Examples  
 The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>. This example requires that the CompanyName, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.  
  
 [!code-cs[Windows.Forms.Control Properties3#1](~/add/codesnippet/csharp/p-system.windows.forms.c_12_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties3#1](~/add/codesnippet/cpp/p-system.windows.forms.c_12_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.Control ctl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.Control ctl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="ctl">The <see cref="T:System.Windows.Forms.Control" /> to evaluate.</param>
        <summary>Retrieves a value indicating whether the specified control is a child of the control.</summary>
        <returns>
          <see langword="true" /> if the specified control is a child of the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.  
  
 [!code-cs[Windows.Forms.Control Members4#1](~/add/codesnippet/csharp/m-system.windows.forms.c_78_1.cs)]
 [!code-vb[Windows.Forms.Control Members4#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_78_1.vb)]
 [!code-cpp[Windows.Forms.Control Members4#1](~/add/codesnippet/cpp/m-system.windows.forms.c_78_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContainsFocus">
      <MemberSignature Language="C#" Value="public bool ContainsFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</summary>
        <value>
          <see langword="true" /> if the control or one of its child controls currently has the input focus; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this property to determine whether a control or any of the controls contained within it has the input focus. To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <xref:System.Windows.Forms.Control.Focused%2A> property. To give a control the input focus, use the <xref:System.Windows.Forms.Control.Focus%2A> or <xref:System.Windows.Forms.Control.Select%2A> methods.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenu ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the shortcut menu associated with the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ContextMenu" /> that represents the shortcut menu associated with the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use a shortcut menus to give context-specific menu options to users when they right-click on the control.  
  
   
  
## Examples  
 The following code example displays the <xref:System.Windows.Forms.ContextMenu> assigned to a <xref:System.Windows.Forms.TreeView> when the right mouse button is clicked and released. This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> on it. It is also required that the <xref:System.Windows.Forms.TreeView> has a <xref:System.Windows.Forms.ContextMenu> assigned to its ContextMenu property.  
  
 [!code-cs[Windows.Forms.Control Properties2#5](~/add/codesnippet/csharp/p-system.windows.forms.c_108_1.cs)]
 [!code-vb[Windows.Forms.Control Properties2#5](~/add/codesnippet/visualbasic/p-system.windows.forms.c_108_1.vb)]
 [!code-cpp[Windows.Forms.Control Properties2#5](~/add/codesnippet/cpp/p-system.windows.forms.c_108_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.Control.ContextMenu%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.ContextMenu%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example displays a message when a change occurs to the shortcut menu.  
  
 [!code-cpp[Control_ContextMenu_CreateGraphics#2](~/add/codesnippet/cpp/e-system.windows.forms.c_6_1.cpp)]
 [!code-cs[Control_ContextMenu_CreateGraphics#2](~/add/codesnippet/csharp/e-system.windows.forms.c_6_1.cs)]
 [!code-vb[Control_ContextMenu_CreateGraphics#2](~/add/codesnippet/visualbasic/e-system.windows.forms.c_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associated with this control.</summary>
        <value>The <see cref="T:System.Windows.Forms.ContextMenuStrip" /> for this control, or <see langword="null" /> if there is no <see cref="T:System.Windows.Forms.ContextMenuStrip" />. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a <xref:System.Windows.Forms.ContextMenu> has also been assigned to the control, the <xref:System.Windows.Forms.ContextMenu> takes precedence over the <xref:System.Windows.Forms.ContextMenuStrip>.  
  
   
  
## Examples  
 The following code example demonstrates how to add three <xref:System.Windows.Forms.ToolStripMenuItem> objects to a <xref:System.Windows.Forms.ContextMenuStrip>. In addition it demonstrates setting the ContextMenuStrip property of the form.  
  
 [!code-vb[System.Windows.Forms.Control.ContextMenuStrip#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_48_1.vb)]
 [!code-cs[System.Windows.Forms.Control.ContextMenuStrip#1](~/add/codesnippet/csharp/p-system.windows.forms.c_48_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuStripChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.Control.ContextMenuStrip%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ContextMenuStripChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the ContextMenuStripChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#14](~/add/codesnippet/csharp/e-system.windows.forms.c_61_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#14](~/add/codesnippet/visualbasic/e-system.windows.forms.c_61_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlAdded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a new control is added to the &lt;xref:System.Windows.Forms.Control.ControlCollection&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses ControlAdded to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.  
  
 [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/e-system.windows.forms.c_66_1.cpp)]
 [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_66_1.vb)]
 [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/e-system.windows.forms.c_66_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a control is removed from the &lt;xref:System.Windows.Forms.Control.ControlCollection&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses ControlRemoved to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.  
  
 [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/e-system.windows.forms.c_8_1.cpp)]
 [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_8_1.vb)]
 [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/e-system.windows.forms.c_8_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control/ControlCollection Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of controls contained within the control.</summary>
        <value>A &lt;xref:System.Windows.Forms.Control.ControlCollection&gt; representing the collection of controls contained within the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.Control> can act as a parent to a collection of controls. For example, when several controls are added to a <xref:System.Windows.Forms.Form>, each of the controls is a member of the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the Controls property of the form, which is derived from the <xref:System.Windows.Forms.Control> class.  
  
 You can manipulate the controls in the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the Controls property by using the methods available in the <xref:System.Windows.Forms.Control.ControlCollection> class.  
  
 When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added. After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method. Doing so will increase the performance of applications with many controls.  
  
 Use the Controls property to iterate through all controls of a form, including nested controls. Use the <xref:System.Windows.Forms.Control.GetNextControl%2A> method to retrieve the previous or next child control in the tab order. Use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property to get or set the active control of a container control.  
  
   
  
## Examples  
 The following code example removes a <xref:System.Windows.Forms.Control> from the <xref:System.Windows.Forms.Control.ControlCollection> of the derived class <xref:System.Windows.Forms.Panel> if it is a member of the collection. The example requires that you have created a <xref:System.Windows.Forms.Panel>, a <xref:System.Windows.Forms.Button>, and at least one <xref:System.Windows.Forms.RadioButton> control on a <xref:System.Windows.Forms.Form>. The <xref:System.Windows.Forms.RadioButton> control(s) are added to the <xref:System.Windows.Forms.Panel> control, and the <xref:System.Windows.Forms.Panel> control added to the <xref:System.Windows.Forms.Form>. When the button is clicked, the radio button named `removeButton` is removed from the <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cs[ControlCollection#4](~/add/codesnippet/csharp/p-system.windows.forms.c_41_1.cs)]
 [!code-vb[ControlCollection#4](~/add/codesnippet/visualbasic/p-system.windows.forms.c_41_1.vb)]
 [!code-cpp[ControlCollection#4](~/add/codesnippet/cpp/p-system.windows.forms.c_41_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new accessibility object for the control.</summary>
        <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you do not explicitly call the CreateAccessibilityInstance method, it will be called when the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property is referenced.  
  
> [!NOTE]
>  To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)].  
  
   
  
## Examples  
 The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information. The control plots two curves along with a legend. The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the CreateAccessibilityInstance method to provide custom accessible information for the chart control. Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  
  
 This code excerpt demonstrates overriding the CreateAccessibilityInstance method. See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.  
  
 [!code-vb[System.Windows.Forms.AccessibleObject#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_3_1.vb)]
 [!code-cs[System.Windows.Forms.AccessibleObject#2](~/add/codesnippet/csharp/m-system.windows.forms.c_3_1.cs)]
 [!code-cpp[System.Windows.Forms.AccessibleObject#2](~/add/codesnippet/cpp/m-system.windows.forms.c_3_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControl">
      <MemberSignature Language="C#" Value="public void CreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateControl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces the creation of the visible control, including the creation of the handle and any visible child controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateControl method forces a handle to be created for the control and its child controls. This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control's constructor does not create the <xref:System.Windows.Forms.Control.Handle%2A>.  
  
 CreateControl does not create a control handle if the control's <xref:System.Windows.Forms.Control.Visible%2A> property is `false`. You can either call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method or access the <xref:System.Windows.Forms.Control.Handle%2A> property to create the control's handle regardless of the control's visibility, but in this case, no window handles are created for the control's children.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the control collection for the control.</summary>
        <returns>A new instance of &lt;xref:System.Windows.Forms.Control.ControlCollection&gt; assigned to the control.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public bool Created { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Created" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control has been created.</summary>
        <value>
          <see langword="true" /> if the control has been created; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Created property returns `true` if the <xref:System.Windows.Forms.Control> was successfully created even though the control's handle might not have been created or recreated yet.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateGraphics() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the <see cref="T:System.Drawing.Graphics" /> for the control.</summary>
        <returns>The <see cref="T:System.Drawing.Graphics" /> for the control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Drawing.Graphics> object that you retrieve through the CreateGraphics method should not normally be retained after the current Windows message has been processed, because anything painted with that object will be erased with the next WM_PAINT message. Therefore you cannot cache the <xref:System.Drawing.Graphics> object for reuse, except to use non-visual methods like <xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=fullName>. Instead, you must call CreateGraphics every time that you want to use the <xref:System.Drawing.Graphics> object, and then call <xref:System.Drawing.Graphics.Dispose%2A> when you are finished using it. For more information about Windows messages, see <xref:System.Windows.Forms.Control.WndProc%2A>.  
  
 By design, CreateGraphics sets ownership to the calling thread, and fails if it is called on other threads.  
  
> [!NOTE]
>  In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and CreateGraphics if the handle for the control has already been created. Calling CreateGraphics before the control's handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.  
  
   
  
## Examples  
 The following code example resizes the specified control so the control will accommodate its formatted text. The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text. The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control. To make the padding appear equal, align the text with the `MiddleCenter` value of <xref:System.Drawing.ContentAlignment?displayProperty=fullName> if your control supports it.  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/add/codesnippet/cpp/m-system.windows.forms.c_91_1.cpp)]
 [!code-cs[Windows.Forms.Control Member5#1](~/add/codesnippet/csharp/m-system.windows.forms.c_91_1.cs)]
 [!code-vb[Windows.Forms.Control Member5#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_91_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for safe subwindows to call this method. Associated enumeration: <see langword="SafeSubWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected virtual void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CreateHandle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a handle for the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically should not call the CreateHandle method directly. The preferred method is to call the <xref:System.Windows.Forms.Control.CreateControl%2A> method, which forces a handle to be created for the control and its child controls when the control is created.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The object is in a disposed state.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the required creation parameters when the control handle is created.</summary>
        <value>A <see cref="T:System.Windows.Forms.CreateParams" /> that contains the required creation parameters when the handle to the control is created.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateParams property should not be overridden and used to adjust the properties of your derived control. Properties such as the <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=fullName>, <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=fullName> should be set by the corresponding properties in your control such as <xref:System.Windows.Forms.Control.Text%2A?displayProperty=fullName>, <xref:System.Windows.Forms.Control.Width%2A?displayProperty=fullName> and <xref:System.Windows.Forms.Control.Height%2A?displayProperty=fullName>. The <xref:System.Windows.Forms.CreateParams> should only be extended when you are wrapping a standard Windows control class or to set styles not provided by the Windows Forms namespace. For more information about creating control parameters, see the `CreateWindow` and `CreateWindowEx` functions and the [CREATESTRUCT](http://msdn.microsoft.com/library/windows/desktop/ms632603.aspx)structure documentation.  
  
   
  
## Examples  
 The following code example extends the CreateParams property of a <xref:System.Windows.Forms.Button> derived class. The <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=fullName> property is changed, which causes the button to display an <xref:System.Drawing.Icon> rather than an <xref:System.Drawing.Image>. This example requires that you have a class that inherits from the <xref:System.Windows.Forms.Button> class.  
  
 [!code-cs[CreateParams#3](~/add/codesnippet/csharp/p-system.windows.forms.c_71_1.cs)]
 [!code-cpp[CreateParams#3](~/add/codesnippet/cpp/p-system.windows.forms.c_71_1.cpp)]
 [!code-vb[CreateParams#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_71_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code when getting the property value. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cursor that is displayed when the mouse pointer is over the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.Cursor" /> that represents the cursor to display when the mouse pointer is over the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Assign a <xref:System.Windows.Forms.Cursor> to the Cursor property of the control to change the cursor displayed when the mouse pointer is over the control. To temporarily change the mouse cursor for all controls on your application set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=fullName> property. Typically you would set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=fullName> property to a wait cursor when populating a <xref:System.Windows.Forms.ComboBox> or saving or loading a file.  
  
 The Cursor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.  
  
   
  
## Examples  
 The following code example fills a <xref:System.Windows.Forms.ComboBox> with the user's available logical drives. The example also sets the combo box's <xref:System.Windows.Forms.Cursor> property so the <xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=fullName> cursor is displayed when the mouse pointer is over the drop-down button. This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ComboBox> on it.  
  
 [!code-cs[Windows.Forms.Control Properties2#1](~/add/codesnippet/csharp/p-system.windows.forms.c_26_1.cs)]
 [!code-vb[Windows.Forms.Control Properties2#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_26_1.vb)]
 [!code-cpp[Windows.Forms.Control Properties2#1](~/add/codesnippet/cpp/p-system.windows.forms.c_26_1.cpp)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for safe subwindows to set this property value. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CursorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CursorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CursorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.Control.Cursor%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.Cursor%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates changing the mouse cursor using the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=fullName> property, the <xref:System.Windows.Forms.Cursor> class, and the <xref:System.Windows.Forms.Cursors> class. The example creates a form that contains a <xref:System.Windows.Forms.ComboBox> control, a <xref:System.Windows.Forms.Panel> control, and a <xref:System.Windows.Forms.ListView> control. The<xref:System.Windows.Forms.ComboBox> contains all cursors provided by the <xref:System.Windows.Forms.Cursors> class. When the user selects a mouse cursor in the <xref:System.Windows.Forms.ComboBox>, the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=fullName> property is set to the selected cursor, which updates the cursor for the <xref:System.Windows.Forms.Panel>. The <xref:System.Windows.Forms.ListView> is updated every time the CursorChanged event occurs.  
  
 [!code-cpp[System.Windows.Forms.Cursors#1](~/add/codesnippet/cpp/e-system.windows.forms.c_56_1.cpp)]
 [!code-vb[System.Windows.Forms.Cursors#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_56_1.vb)]
 [!code-cs[System.Windows.Forms.Cursors#1](~/add/codesnippet/csharp/e-system.windows.forms.c_56_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data bindings for the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ControlBindingsCollection" /> that contains the <see cref="T:System.Windows.Forms.Binding" /> objects for the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DataBindings property to access the <xref:System.Windows.Forms.ControlBindingsCollection>. By adding <xref:System.Windows.Forms.Binding> objects to the collection, you can bind any property of a control to the property of an object.  
  
   
  
## Examples  
 The following code example adds <xref:System.Windows.Forms.Binding> objects to the <xref:System.Windows.Forms.ControlBindingsCollection> of five controls: four <xref:System.Windows.Forms.TextBox> controls and a <xref:System.Windows.Forms.DateTimePicker> control. The <xref:System.Windows.Forms.ControlBindingsCollection> is accessed through the DataBindings property of the <xref:System.Windows.Forms.Control> class.  
  
 [!code-cpp[Classic Control.DataBindings Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_117_1.cpp)]
 [!code-cs[Classic Control.DataBindings Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_117_1.cs)]
 [!code-vb[Classic Control.DataBindings Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_117_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultBackColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultBackColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default background color of the control.</summary>
        <value>The default background <see cref="T:System.Drawing.Color" /> of the control. The default is &lt;xref:System.Drawing.SystemColors.Control%2A?displayProperty=fullName&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is the default <xref:System.Windows.Forms.Control.BackColor%2A> property value of a generic top-level control. Derived classes can have different defaults.  
  
   
  
## Examples  
 The following code example demonstrates how to use the DefaultBackColor, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1. Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_52_1.cpp)]
 [!code-cs[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_52_1.cs)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_52_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultCursor">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Cursor DefaultCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor DefaultCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default cursor for the control.</summary>
        <value>An object of type <see cref="T:System.Windows.Forms.Cursor" /> representing the current default cursor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override DefaultCursor to configure a default cursor for your control. This is more efficient than setting the cursor in the control's constructor, and gives automatic support for certain cursor-related designer functions.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font DefaultFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Font DefaultFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default font of the control.</summary>
        <value>The default <see cref="T:System.Drawing.Font" /> of the control. The value returned will vary depending on the user's operating system the local culture setting of their system.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table describes the value returned by DefaultFont depending on the operating system and local culture.  
  
|System/and or Culture|Font|  
|----------------------------|----------|  
|Windows NT 4x, Japanese version|MS UI Gothic, 9 point.|  
|Arabic Windows|Tahoma, 8 point.|  
|Other operating system/culture|MS Shell Dlg logical font, typically Microsoft San Serif 8 point.|  
  
 MS Shell Dlg maps to a font set in the system registry.  
  
 If the previous fonts are not installed, the default font is Tahoma, 8 point. If Tahoma, 8 point, is not installed, DefaultFontreturns the value of the <xref:System.Drawing.FontFamily.GenericSansSerif%2A> property  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, DefaultFont, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1. Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_29_1.cpp)]
 [!code-cs[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_29_1.cs)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_29_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The default font or the regional alternative fonts are not installed on the client computer.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultForeColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultForeColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default foreground color of the control.</summary>
        <value>The default foreground <see cref="T:System.Drawing.Color" /> of the control. The default is &lt;xref:System.Drawing.SystemColors.ControlText%2A?displayProperty=fullName&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is the default <xref:System.Windows.Forms.Control.ForeColor%2A> property value of a nonparented control. Derived classes can have different defaults.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and DefaultForeColor members. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1. Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_49_1.cpp)]
 [!code-cs[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_49_1.cs)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_49_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultImeMode">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode DefaultImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode DefaultImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default Input Method Editor (IME) mode supported by the control.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.ImeMode" /> values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An Input Method Editor (IME) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.  
  
 As implemented in the <xref:System.Windows.Forms.Control> class, this property always returns the <xref:System.Windows.Forms.ImeMode?displayProperty=fullName> value. The <xref:System.Windows.Forms.ImeMode> value specifies that the IME mode is inherited from the parent control.  
  
   
  
## Examples  
 The following code example overrides the DefaultImeMode property to turn off the Input Method Editor.  
  
 [!code-cs[Windows.Forms.Control Properties2#4](~/add/codesnippet/csharp/p-system.windows.forms.c_7_1.cs)]
 [!code-vb[Windows.Forms.Control Properties2#4](~/add/codesnippet/visualbasic/p-system.windows.forms.c_7_1.vb)]
 [!code-cpp[Windows.Forms.Control Properties2#4](~/add/codesnippet/cpp/p-system.windows.forms.c_7_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultMargin">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultMargin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the space, in pixels, that is specified by default between controls.</summary>
        <value>A <see cref="T:System.Windows.Forms.Padding" /> that represents the default space between controls.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMaximumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the length and height, in pixels, that is specified as the default maximum size of a control.</summary>
        <value>A &lt;xref:System.Drawing.Point.%23ctor%2A&gt; representing the size of the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultMinimumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMinimumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the length and height, in pixels, that is specified as the default minimum size of a control.</summary>
        <value>A <see cref="T:System.Drawing.Size" /> representing the size of the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultPadding">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultPadding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the internal spacing, in pixels, of the contents of a control.</summary>
        <value>A <see cref="T:System.Windows.Forms.Padding" /> that represents the internal spacing of the contents of a control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default size of the control.</summary>
        <value>The default <see cref="T:System.Drawing.Size" /> of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DefaultSize property represents the <xref:System.Drawing.Size> of the control when it is initially created. You can adjust the size of the control by setting its <xref:System.Windows.Forms.Control.Size%2A> property value.  
  
> [!NOTE]
>  To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor. The preferred method is to override the DefaultSize property.  
  
> [!NOTE]
>  On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.  
  
   
  
## Examples  
 The following code example overrides the DefaultSize property, and makes the default size of the form 500 pixels square.  
  
 [!code-cs[Windows.Forms.Control Properties2#3](~/add/codesnippet/csharp/p-system.windows.forms.c_10_1.cs)]
 [!code-vb[Windows.Forms.Control Properties2#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_10_1.vb)]
 [!code-cpp[Windows.Forms.Control Properties2#3](~/add/codesnippet/cpp/p-system.windows.forms.c_10_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="protected virtual void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DefWndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
        <summary>Sends the specified message to the default window procedure.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about processing Windows messages, see the [WindowProc function](http://go.microsoft.com/fwlink/?LinkId=181565).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="protected virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Destroys the handle associated with the control.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisplayRectangle">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle DisplayRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle DisplayRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rectangle that represents the display area of the control.</summary>
        <value>A <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DisplayRectangle property returns the client rectangle of the display area of the control. For the base control class, this is equal to the client rectangle. However, inheriting controls might want to change this if their client area differs from their display area. The display rectangle is the smallest <xref:System.Drawing.Rectangle> that encloses a control and is used to lay out controls.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  
  
 When the `disposing`parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.Control> references. This method invokes the `Dispose()` method of each referenced object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public bool Disposing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Disposing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing.</summary>
        <value>
          <see langword="true" /> if the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property returns `true`, the base<xref:System.Windows.Forms.Control> class is in the process of disposing. After the control is disposed of, it can no longer be referenced as a valid Windows control. Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection. When a control is disposed of, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dock">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DockStyle Dock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DockStyle Dock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DockStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DockStyle" /> values. The default is <see cref="T:System.Windows.Forms.DockStyle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Dock property to define how a control is automatically resized as its parent control is resized. For example, setting Dock to <xref:System.Windows.Forms.DockStyle?displayProperty=fullName> causes the control to align itself with the left edges of its parent control and to resize as the parent control is resized. Controls are docked in their Z-order, which is the visual layering of controls on a form along the form's Z-axis (depth).  
  
 A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.  
  
 Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the the edges of its container.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.Control.Anchor%2A> and Dock properties are mutually exclusive. Only one can be set at a time, and the last one set takes precedence.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties. The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box. Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.  
  
 [!code-cs[Windows.Forms.Control Properties#2](~/add/codesnippet/csharp/p-system.windows.forms.c_24_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#2](~/add/codesnippet/cpp/p-system.windows.forms.c_24_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_24_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DockChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DockChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DockChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.Control.Dock%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.Dock%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes(*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  
  
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_62_1.vb)]
 [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_62_1.cs)]
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_62_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DoDragDrop">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects DoDragDrop (object data, System.Windows.Forms.DragDropEffects allowedEffects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DragDropEffects DoDragDrop(object data, valuetype System.Windows.Forms.DragDropEffects allowedEffects) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="allowedEffects" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">The data to drag.</param>
        <param name="allowedEffects">One of the <see cref="T:System.Windows.Forms.DragDropEffects" /> values.</param>
        <summary>Begins a drag-and-drop operation.</summary>
        <returns>A value from the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration that represents the final effect that was performed during the drag-and-drop operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `allowedEffects` parameter determines which drag operations can occur. If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<xref:System.String>, <xref:System.Drawing.Bitmap>, or <xref:System.Drawing.Imaging.Metafile>), or an object that implements <xref:System.Runtime.Serialization.ISerializable> or <xref:System.Windows.Forms.IDataObject>.  
  
 The following describes how and when events related to drag-and-drop operations are raised.  
  
 The DoDragDrop method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
-   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.  
  
-   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.  
  
 If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
> [!NOTE]
>  The DoDragDrop method catches all exceptions and rethrows only the following security or critical exceptions:  
  
-   SecurityException  
  
-   NullReferenceException  
  
-   StackOverflowException  
  
-   OutOfMemoryException  
  
-   ThreadAbortException  
  
-   ExecutionEngineException  
  
-   IndexOutOfRangeException  
  
-   AccessViolationException  
  
   
  
## Examples  
 The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the DoDragDrop method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  
  
 The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#1](~/add/codesnippet/cpp/47e0feba-eeb5-4e2f-9c6b-_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#1](~/add/codesnippet/visualbasic/47e0feba-eeb5-4e2f-9c6b-_1.vb)]
 [!code-cs[System.Windows.Forms.Control.DoDragDrop#1](~/add/codesnippet/csharp/47e0feba-eeb5-4e2f-9c6b-_1.cs)]  
  
 The following code example shows how to use the <xref:System.Windows.Forms.DragDropEffects> enumeration to specify how data should be transferred between the controls involved in a drag-and-drop operation. This example requires that your form includes a <xref:System.Windows.Forms.RichTextBox> control and a <xref:System.Windows.Forms.ListBox> control and that the <xref:System.Windows.Forms.ListBox> control is populated with a list of valid file names. When the user drags a file name onto the <xref:System.Windows.Forms.RichTextBox> control, the control's <xref:System.Windows.Forms.Control.DragEnter> event is raised. Within the event handler, the <xref:System.Windows.Forms.DragEventArgs.Effect%2A> property of the <xref:System.Windows.Forms.DragEventArgs> is initialized to <xref:System.Windows.Forms.DragDropEffects> to indicate that the data referenced by the file path should be copied to the <xref:System.Windows.Forms.RichTextBox> control.  
  
 [!code-cs[RichTextDragDrop#1](~/add/codesnippet/csharp/47e0feba-eeb5-4e2f-9c6b-_2.cs)]
 [!code-vb[RichTextDragDrop#1](~/add/codesnippet/visualbasic/47e0feba-eeb5-4e2f-9c6b-_2.vb)]
 [!code-cpp[RichTextDragDrop#1](~/add/codesnippet/cpp/47e0feba-eeb5-4e2f-9c6b-_2.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected virtual bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</summary>
        <value>
          <see langword="true" /> if the surface of the control should be drawn using double buffering; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface. Buffered graphics require that the updated graphics data is first written to a buffer. The data in the graphics buffer is then quickly written to displayed surface memory. The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.  
  
> [!NOTE]
>  DoubleBuffered is not a bindable property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is double-clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A double-click is determined by the mouse settings of the user's operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks. The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked. For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and DoubleClick events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and DoubleClick events are raised when the form is double-clicked and both methods are called. If a control is double-clicked and that control does not support the DoubleClick event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.  
  
 You must set the `StandardDoubleClick` and `StandardClick` values of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised. These values might already be set to `true` if you are inheriting from existing Windows Forms controls.  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, DoubleClick, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the DoubleClick event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.  
  
 [!code-cs[Control.DoubleClick#1](~/add/codesnippet/csharp/e-system.windows.forms.c_33_1.cs)]
 [!code-vb[Control.DoubleClick#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_33_1.vb)]
 [!code-cpp[Control.DoubleClick#1](~/add/codesnippet/cpp/e-system.windows.forms.c_33_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragDrop" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a drag-and-drop operation is completed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates. The following line of [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)] code converts the properties to a client <xref:System.Drawing.Point>.  
  
```  
Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
```  
  
> [!NOTE]
>  In versions earlier than [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and DragDrop events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised. However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and DragDrop events are not raised again.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 This code excerpt demonstrates using the DragDrop event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#5](~/add/codesnippet/cpp/e-system.windows.forms.c_72_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#5](~/add/codesnippet/visualbasic/e-system.windows.forms.c_72_1.vb)]
 [!code-cs[System.Windows.Forms.Control.DoDragDrop#5](~/add/codesnippet/csharp/e-system.windows.forms.c_72_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an object is dragged into the control's bounds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DragEnter event is raised when the user first drags the mouse cursor over the control during a drag-and-drop operation.  
  
> [!NOTE]
>  In versions earlier than [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with DragEnter and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised. However, when you close and reopen the solution, the DragEnter and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.  
  
 The following describes how and when events related to drag-and-drop operations are raised.  
  
 The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
-   If the mouse enters another control, the DragEnter for that control is raised.  
  
-   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.  
  
 If there is a change in the keyboard or mouse button state, the<xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates. The following line of [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)] code converts the properties to a client <xref:System.Drawing.Point>.  
  
    ```  
    Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
    ```  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  
  
 The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 This code excerpt demonstrates using the DragEnter event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#7](~/add/codesnippet/cpp/e-system.windows.forms.c_48_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#7](~/add/codesnippet/visualbasic/e-system.windows.forms.c_48_1.vb)]
 [!code-cs[System.Windows.Forms.Control.DoDragDrop#7](~/add/codesnippet/csharp/e-system.windows.forms.c_48_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DragLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an object is dragged out of the control's bounds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DragLeave event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.  
  
 The following describes how and when events related to drag-and-drop operations are raised.  
  
 The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the DragLeave event is raised.  
  
-   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.  
  
-   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.  
  
 If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the DragLeave event is raised.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  
  
 The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 This code excerpt demonstrates using the DragLeave event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#8](~/add/codesnippet/cpp/e-system.windows.forms.c_10_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#8](~/add/codesnippet/visualbasic/e-system.windows.forms.c_10_1.vb)]
 [!code-cs[System.Windows.Forms.Control.DoDragDrop#8](~/add/codesnippet/csharp/e-system.windows.forms.c_10_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragOver" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an object is dragged over the control's bounds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DragOver event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.  
  
 The following describes how and when events related to drag-and-drop operations are raised.  
  
 The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
-   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.  
  
-   If the mouse moves but stays within the same control, the DragOver event is raised.  
  
 If there is a change in the keyboard or mouse button state, the<xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> value is `Continue`, the DragOver event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The DragOver and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates. The following line of C# code converts the properties to a client <xref:System.Drawing.Point>:  
    >   
    >  Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  
  
 The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the DragOver event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 This code excerpt demonstrates using the DragOver event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/e-system.windows.forms.c_17_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/e-system.windows.forms.c_17_1.vb)]
 [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/e-system.windows.forms.c_17_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DrawToBitmap">
      <MemberSignature Language="C#" Value="public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawToBitmap(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Rectangle targetBounds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" />
        <Parameter Name="targetBounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to be drawn to.</param>
        <param name="targetBounds">The bounds within which the control is rendered.</param>
        <summary>Supports rendering to the specified bitmap.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DrawToBitmap method is not supported for ActiveX controls. You can override the <xref:System.Windows.Forms.Control.OnPrint%2A> event and provide custom printing logic if required.  
  
 The DrawToBitmap method has the following limitations:  
  
-   An <xref:System.ArgumentException> might be thrown for large bitmaps. The maximum allowable size varies by machine.  
  
-   DrawToBitmap does not support the `Ink` controls for the Windows XP Tablet PC Edition 2005 operating system.  
  
-   DrawToBitmap does not draw a child <xref:System.Windows.Forms.TextBox> if the <xref:System.Windows.Forms.Control.Visible%2A> property of the <xref:System.Windows.Forms.TextBox> is set to `false`.  
  
-   Controls inside containers are rendered in reverse order.  
  
-   DrawToBitmap is not fully functional for the <xref:System.Windows.Forms.RichTextBox>; only the border of a bitmap is drawn.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-514)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control can respond to user interaction.</summary>
        <value>
          <see langword="true" /> if the control can respond to user interaction; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 With the Enabled property, you can enable or disable controls at run time. For example, you can disable controls that do not apply to the current state of the application. You can also disable a control to restrict its use. For example, a button can be disabled to prevent the user from clicking it. If a control is disabled, it cannot be selected.  
  
> [!IMPORTANT]
>  Setting the Enabled property to `false` does not disable the application's control box or prevent the application window from receiving the focus.  
  
 When a container control has its enabled property set to `false`, all its contained controls are disabled, as well. For example, if the user clicks on any of the controls contained in a disabled <xref:System.Windows.Forms.GroupBox> control, no events are raised.  
  
> [!NOTE]
>  When a scrollable control is disabled, the scroll bars are also disabled. For example, a disabled multiline textbox is unable to scroll to display all the lines of text.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties. The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box. Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the Enabled property to `false`, which causes all controls contained within the group box to be disabled.  
  
 [!code-cs[Windows.Forms.Control Properties#2](~/add/codesnippet/csharp/p-system.windows.forms.c_68_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#2](~/add/codesnippet/cpp/p-system.windows.forms.c_68_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_68_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnabledChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnabledChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.Enabled%2A&gt; property value has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.Enabled%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses two <xref:System.Windows.Forms.RadioButton> controls to demonstrate the EnabledChanged event. Clicking one button changes the value of the <xref:System.Windows.Forms.Control.Enabled%2A> property of the other button to `false` and displays a <xref:System.Windows.Forms.MessageBox>.  
  
 [!code-vb[System.Windows.Forms.Control.EnabledChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_32_1.vb)]
 [!code-cs[System.Windows.Forms.Control.EnabledChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.c_32_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">The &lt;xref:System.IAsyncResult&gt; that represents a specific invoke asynchronous operation, returned when calling &lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;.</param>
        <summary>Retrieves the return value of the asynchronous operation represented by the &lt;xref:System.IAsyncResult&gt; passed.</summary>
        <returns>The &lt;xref:System.Object&gt; generated by the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the asynchronous operation has not been completed, this function will block until the result is available.  
  
> [!NOTE]
>  In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, EndInvoke, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult" /> parameter value is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="asyncResult" /> object was not created by a preceding call of the &lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt; method from the same control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public event EventHandler Enter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Enter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is entered.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  
  
1.  Enter  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  
  
1.  Enter  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  
  
> [!NOTE]
>  The Enter and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class. The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events. The Enter and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached. For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control. When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the Enter event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.  
  
> [!CAUTION]
>  Do not attempt to set focus from within the Enter, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section and the "Message Deadlocks" section of the[About Messages and Message Queues](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)topic.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the Enter event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.  
  
 [!code-cs[Control.Enter#1](~/add/codesnippet/csharp/e-system.windows.forms.c_20_1.cs)]
 [!code-cpp[Control.Enter#1](~/add/codesnippet/cpp/e-system.windows.forms.c_20_1.cpp)]
 [!code-vb[Control.Enter#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_20_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FindForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form FindForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form FindForm() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the form that the control is on.</summary>
        <returns>The <see cref="T:System.Windows.Forms.Form" /> that the control is on.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The control's <xref:System.Windows.Forms.Control.Parent%2A> property value might not be the same as the <xref:System.Windows.Forms.Form> returned by FindForm method. For example, if a <xref:System.Windows.Forms.RadioButton> control is contained within a <xref:System.Windows.Forms.GroupBox> control, and the <xref:System.Windows.Forms.GroupBox> is on a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.RadioButton> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.GroupBox> and the <xref:System.Windows.Forms.GroupBox> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.Form>.  
  
   
  
## Examples  
 The following code example finds the form that contains the specified button.  
  
 [!code-cpp[Control.FindForm#1](~/add/codesnippet/cpp/m-system.windows.forms.c_24_1.cpp)]
 [!code-vb[Control.FindForm#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_24_1.vb)]
 [!code-cs[Control.FindForm#1](~/add/codesnippet/csharp/m-system.windows.forms.c_24_1.cs)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Focus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets input focus to the control.</summary>
        <returns>
          <see langword="true" /> if the input focus request was successful; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Focus method returns `true` if the control successfully received input focus. The control can have the input focus while not displaying any visual cues of having the focus. This behavior is primarily observed by the nonselectable controls listed below, or any controls derived from them.  
  
 A control can be selected and receive input focus if all the following are true: the `Selectable` value of <xref:System.Windows.Forms.ControlStyles> is set to `true`, it is contained in another control, and all its parent controls are both visible and enabled.  
  
 The Windows Forms controls in the following list are not selectable. Controls derived from these controls are also not selectable.  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)  
  
> [!NOTE]
>  Focus is a low-level method intended primarily for custom control authors. Instead, application programmers should use the <xref:System.Windows.Forms.Control.Select%2A> method or the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property for child controls, or the <xref:System.Windows.Forms.Form.Activate%2A> method for forms.  
  
   
  
## Examples  
 The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/add/codesnippet/cpp/m-system.windows.forms.c_82_1.cpp)]
 [!code-cs[Windows.Forms.ControlMembers6#1](~/add/codesnippet/csharp/m-system.windows.forms.c_82_1.cs)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_82_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public virtual bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control has input focus.</summary>
        <value>
          <see langword="true" /> if the control has focus; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example disables a <xref:System.Windows.Forms.MenuItem> if a <xref:System.Windows.Forms.TextBox> does not have focus. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TextBox> named `textBox1` and two <xref:System.Windows.Forms.MenuItem> objects named `menuItemEdit` and `menuItemEditInsertCustomerInfo`.  
  
 [!code-cs[Windows.FOrms.Control Members2#4](~/add/codesnippet/csharp/p-system.windows.forms.c_105_1.cs)]
 [!code-cpp[Windows.FOrms.Control Members2#4](~/add/codesnippet/cpp/p-system.windows.forms.c_105_1.cpp)]
 [!code-vb[Windows.FOrms.Control Members2#4](~/add/codesnippet/visualbasic/p-system.windows.forms.c_105_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the font of the text displayed by the control.</summary>
        <value>The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control. The default is the value of the &lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Font property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.  
  
 Because the <xref:System.Drawing.Font> is immutable (meaning that you cannot adjust any of its properties), you can only assign the Font property a new <xref:System.Drawing.Font>. However, you can base the new font on the existing font.  
  
 [Visual Basic, C#]  
  
 The following is an example of how to adjust the existing font to make it bold:  
  
```c#  
myControl.Font = new Font(myControl.Font,   
    myControl.Font.Style | FontStyle.Bold);  
```  
  
```vb#  
MyControl.Font = New Font(MyControl.Font, _   
    MyControl.Font.Style Or FontStyle.Bold)  
```  
  
   
  
## Examples  
 The following code example displays a <xref:System.Windows.Forms.FontDialog> to the user and changes the <xref:System.Drawing.Font> of a <xref:System.Windows.Forms.DateTimePicker> control. This example requires that you have a <xref:System.Windows.Forms.Form> with <xref:System.Windows.Forms.Button> and a <xref:System.Windows.Forms.DateTimePicker> on it.  
  
 [!code-cpp[Control_Font#1](~/add/codesnippet/cpp/p-system.windows.forms.c_116_1.cpp)]
 [!code-cs[Control_Font#1](~/add/codesnippet/csharp/p-system.windows.forms.c_116_1.cs)]
 [!code-vb[Control_Font#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_116_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FontChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FontChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.Font%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.Font%2A> property is changed by either a programmatic modification or through interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the FontChanged event.  
  
 [!code-cs[System.Windows.Forms.Control.FontChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.c_35_1.cs)]
 [!code-vb[System.Windows.Forms.Control.FontChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_35_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FontHeight">
      <MemberSignature Language="C#" Value="protected int FontHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FontHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the font of the control.</summary>
        <value>The height of the <see cref="T:System.Drawing.Font" /> of the control in pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The FontHeight property should not be set to any value other than the control's <xref:System.Drawing.Font.Height%2A?displayProperty=fullName> value, or -1. Setting FontHeight to -1 has the effect of clearing the cached height value, and the value is recalculated the next time the property is referenced.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-513)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color of the control.</summary>
        <value>The foreground <see cref="T:System.Drawing.Color" /> of the control. The default is the value of the &lt;xref:System.Windows.Forms.Control.DefaultForeColor%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ForeColor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.  
  
   
  
## Examples  
 The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and ForeColor of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.  
  
 [!code-cs[Windows.Forms.Control Properties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_23_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_23_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_23_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ForeColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.ForeColor%2A> property is changed by either a programmatic modification or through interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  
  
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_43_1.vb)]
 [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_43_1.cs)]
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_43_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromChildHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromChildHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromChildHandle(native int handle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">The window handle (<see langword="HWND" />) to search for.</param>
        <summary>Retrieves the control that contains the specified handle.</summary>
        <returns>The <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method searches up the window handle parent chain until it finds a handle that is associated with a control. This method is more reliable than the <xref:System.Windows.Forms.Control.FromHandle%2A> method, because it correctly returns controls that own more than one handle.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromHandle(native int handle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">The window handle (<see langword="HWND" />) to search for.</param>
        <summary>Returns the control that is currently associated with the specified handle.</summary>
        <returns>A <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Forms.Control.FromChildHandle%2A> method if you need to return controls that own more than one handle.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityObjectById">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject GetAccessibilityObjectById(int32 objectId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="objectId">An <see langword="Int32" /> that identifies the <see cref="T:System.Windows.Forms.AccessibleObject" /> to retrieve.</param>
        <summary>Retrieves the specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</summary>
        <returns>The specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.AutoSizeMode GetAutoSizeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.AutoSizeMode GetAutoSizeMode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoSizeMode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a value indicating how a control will behave when its &lt;xref:System.Windows.Forms.Control.AutoSize%2A&gt; property is enabled.</summary>
        <returns>One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control. Coordinates are expressed relative to the upper-left corner of the control's client area.</param>
        <summary>Retrieves the child control that is located at the specified coordinates.</summary>
        <returns>A <see cref="T:System.Windows.Forms.Control" /> that represents the control that is located at the specified point.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If there is no child control at the specified point, the GetChildAtPoint method returns `null`.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method if the control returned is not a child of the control. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt, valuetype System.Windows.Forms.GetChildAtPointSkip skipValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="skipValue" Type="System.Windows.Forms.GetChildAtPointSkip" />
      </Parameters>
      <Docs>
        <param name="pt">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control. Coordinates are expressed relative to the upper-left corner of the control's client area.</param>
        <param name="skipValue">One of the values of <see cref="T:System.Windows.Forms.GetChildAtPointSkip" />, determining whether to ignore child controls of a certain type.</param>
        <summary>Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type.</summary>
        <returns>The child <see cref="T:System.Windows.Forms.Control" /> at the specified coordinates.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetContainerControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IContainerControl GetContainerControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.IContainerControl GetContainerControl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IContainerControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next <see cref="T:System.Windows.Forms.ContainerControl" /> up the control's chain of parent controls.</summary>
        <returns>An <see cref="T:System.Windows.Forms.IContainerControl" />, that represents the parent of the <see cref="T:System.Windows.Forms.Control" />.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNextControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetNextControl (System.Windows.Forms.Control ctl, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetNextControl(class System.Windows.Forms.Control ctl, bool forward) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl">The <see cref="T:System.Windows.Forms.Control" /> to start the search with.</param>
        <param name="forward">
          <see langword="true" /> to search forward in the tab order; <see langword="false" /> to search backward.</param>
        <summary>Retrieves the next control forward or back in the tab order of child controls.</summary>
        <returns>The next <see cref="T:System.Windows.Forms.Control" /> in the tab order.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetNextControl method is dependent on tab order. To iterate through all controls of a form, including nested controls, use the <xref:System.Windows.Forms.Control.Controls%2A> property. To get or set the active control of a container control, use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size GetPreferredSize (System.Drawing.Size proposedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.Size GetPreferredSize(valuetype System.Drawing.Size proposedSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="proposedSize">The custom-sized area for a control.</param>
        <summary>Retrieves the size of a rectangular area into which a control can be fitted.</summary>
        <returns>An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The behavior of GetPreferredSize differs by control. The <xref:System.Windows.Forms.Control.LayoutEngine%2A> might be unable to assign the returned size to the control. You can return a size larger than the constraints indicated in the `proposedSize` parameter, but `proposedSize` should decrease as the constraint decreases. For example, `GetPreferredSize(new Size(100, 0))` should not be wider than `GetPreferredSize(new Size(200, 0))`. The exception is a `proposedSize` of 0 or `Size.Empty`, which are defined as unconstrained.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="bounds">A <see cref="T:System.Drawing.Rectangle" /> that specifies the area for which to retrieve the display bounds.</param>
        <param name="factor">The height and width of the control's bounds.</param>
        <param name="specified">One of the values of <see cref="T:System.Windows.Forms.BoundsSpecified" /> that specifies the bounds of the control to use when defining its size and position.</param>
        <summary>Retrieves the bounds within which the control is scaled.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> representing the bounds within which the control is scaled.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is a helper method that is called by <xref:System.Windows.Forms.Control.ScaleControl%2A> to retrieve the bounds within which the control is scaled. You can override this method to reuse the <xref:System.Windows.Forms.Control.ScaleControl%2A> scaling logic, but you must supply your own bounds. The default implementation returns scaled bounds that take into account the `specified` bounds, whether the control is top level, whether the control is fixed width or auto size, and any adornments the control might have.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetStyle">
      <MemberSignature Language="C#" Value="protected bool GetStyle (System.Windows.Forms.ControlStyles flag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetStyle(valuetype System.Windows.Forms.ControlStyles flag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
      </Parameters>
      <Docs>
        <param name="flag">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to return the value from.</param>
        <summary>Retrieves the value of the specified control style bit for the control.</summary>
        <returns>
          <see langword="true" /> if the specified control style bit is set to <see langword="true" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control style bit flags are used to categorize supported behavior. A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit and the Boolean value to set the bit to. To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the GetStyle method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.  
  
   
  
## Examples  
 The following code example returns the value of the double-buffering related style bits for a <xref:System.Windows.Forms.Form>. This example returns `true` only if all the style bits are set to `true`.  
  
 [!code-cpp[Windows.Forms.ControlMembers6#4](~/add/codesnippet/cpp/m-system.windows.forms.c_115_1.cpp)]
 [!code-cs[Windows.Forms.ControlMembers6#4](~/add/codesnippet/csharp/m-system.windows.forms.c_115_1.cs)]
 [!code-vb[Windows.Forms.ControlMembers6#4](~/add/codesnippet/visualbasic/m-system.windows.forms.c_115_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTopLevel">
      <MemberSignature Language="C#" Value="protected bool GetTopLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetTopLevel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines if the control is a top-level control.</summary>
        <returns>
          <see langword="true" /> if the control is a top-level control; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during a drag operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GiveFeedback event is raised when a drag-and-drop operation is started. With the GiveFeedback event, the source of a drag event can modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.  
  
 The following describes how and when events related to drag-and-drop operations are raised.  
  
 The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the GiveFeedback event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
-   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.  
  
-   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.  
  
 If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the GiveFeedback event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.Control.DragOver> and GiveFeedback events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  
  
 The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the GiveFeedback event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox`where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 This code excerpt demonstrates using the GiveFeedback event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/add/codesnippet/cpp/e-system.windows.forms.c_55_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/add/codesnippet/visualbasic/e-system.windows.forms.c_55_1.vb)]
 [!code-cs[System.Windows.Forms.Control.DoDragDrop#3](~/add/codesnippet/csharp/e-system.windows.forms.c_55_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event EventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GotFocus" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control receives focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  GotFocus  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  GotFocus  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  
  
 **Note** The GotFocus and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages. Typically, the GotFocus and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls. Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events. For more information about the GotFocus and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_SETFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx)and[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topics.  
  
> [!CAUTION]
>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, GotFocus, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the GotFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the GotFocus event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#47](~/add/codesnippet/csharp/e-system.windows.forms.c_49_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#47](~/add/codesnippet/visualbasic/e-system.windows.forms.c_49_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-515)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the window handle that the control is bound to.</summary>
        <value>An &lt;xref:System.IntPtr&gt; that contains the window handle (<see langword="HWND" />) of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the Handle property is a Windows `HWND`. If the handle has not yet been created, referencing this property will force the handle to be created.  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=fullName> and the Handle property. To run the example paste the following code in a form. Add two buttons named `Button1` and `Button2` to the form and ensure all events are connected to their event handlers.  
  
 [!code-vb[System.Windows.Forms.ControlPaint1#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_25_1.vb)]
 [!code-cpp[System.Windows.Forms.ControlPaint1#2](~/add/codesnippet/cpp/p-system.windows.forms.c_25_1.cpp)]
 [!code-cs[System.Windows.Forms.ControlPaint1#2](~/add/codesnippet/csharp/p-system.windows.forms.c_25_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HandleCreated">
      <MemberSignature Language="C#" Value="public event EventHandler HandleCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a handle is created for the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A handle is created when the <xref:System.Windows.Forms.Control> is displayed for the first time. For example, if a <xref:System.Windows.Forms.Control> is created that has <xref:System.Windows.Forms.Control.Visible%2A> set to `false`, the HandleCreated event will not be raised until <xref:System.Windows.Forms.Control.Visible%2A> is set to `true`.  
  
 For more information about handling events, see[Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the HandleCreated event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button>or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the HandleCreated event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#37](~/add/codesnippet/csharp/e-system.windows.forms.c_70_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#37](~/add/codesnippet/visualbasic/e-system.windows.forms.c_70_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HandleDestroyed">
      <MemberSignature Language="C#" Value="public event EventHandler HandleDestroyed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleDestroyed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control's handle is in the process of being destroyed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 During the HandleDestroyed event, the control is still a valid Windows control and the <xref:System.Windows.Forms.Control.Handle%2A> can be recreated by calling the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the HandleDestroyed event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the HandleDestroyed event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#38](~/add/codesnippet/csharp/e-system.windows.forms.c_52_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#38](~/add/codesnippet/visualbasic/e-system.windows.forms.c_52_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control contains one or more child controls.</summary>
        <value>
          <see langword="true" /> if the control contains one or more child controls; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.Control.Controls%2A> collection has a <xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A> greater than zero, the HasChildren property will return `true`. Accessing the HasChildren property does not force the creation of a <xref:System.Windows.Forms.Control.ControlCollection> if the control has no children, so referencing this property can provide a performance benefit when walking a tree of controls.  
  
   
  
## Examples  
 The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.  
  
 [!code-cs[Windows.Forms.Control Properties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_113_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_113_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_113_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the control.</summary>
        <value>The height of the control in pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Changes made to the Height and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.  
  
> [!NOTE]
>  The minimum height for the derived control <xref:System.Windows.Forms.Splitter> is one pixel. The default height for the <xref:System.Windows.Forms.Splitter> control is three pixels. Setting the height of the <xref:System.Windows.Forms.Splitter> control to a value less than one will reset the property value to the default height.  
  
   
  
## Examples  
 The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  
  
 [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_95_1.cs)]
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_95_1.cpp)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_95_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HelpRequested">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HelpEventHandler HelpRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HelpEventHandler HelpRequested" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user requests help for a control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The HelpRequested event is commonly raised when the user presses the F1 key or an associated context-sensitive help button is clicked.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates handling the HelpRequested event to display custom Help content on a form containing four address fields. The HelpRequested event is raised either by pressing the F1 key with the focus in an address field, or by the using the context-sensitive Help button and clicking the Help cursor on an address field. The <xref:System.Windows.Forms.HelpEventArgs.Handled%2A> property is set to true to indicate that the `HelpRequested` event is handled. The example also demonstrates storing the Help text in the <xref:System.Windows.Forms.Control.Tag%2A?displayProperty=fullName> property.  
  
 [!code-cpp[System.Windows.Forms.HelpEventHandler#1](~/add/codesnippet/cpp/e-system.windows.forms.c_45_1.cpp)]
 [!code-vb[System.Windows.Forms.HelpEventHandler#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_45_1.vb)]
 [!code-cs[System.Windows.Forms.HelpEventHandler#1](~/add/codesnippet/csharp/e-system.windows.forms.c_45_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Conceals the control from the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hiding the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `false`. After the Hide method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `false` until the <xref:System.Windows.Forms.Control.Show%2A> method is called.  
  
   
  
## Examples  
 The following code example hides a button if the CTRL key is pressed when the button is clicked. This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.  
  
 [!code-cs[Windows.Forms.Control Members4#2](~/add/codesnippet/csharp/m-system.windows.forms.c_42_1.cs)]
 [!code-vb[Windows.Forms.Control Members4#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_42_1.vb)]
 [!code-cpp[Windows.Forms.Control Members4#2](~/add/codesnippet/cpp/m-system.windows.forms.c_42_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ImeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImeMode ImeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the Input Method Editor (IME) mode of the control.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.ImeMode" /> values. The default is <see cref="T:System.Windows.Forms.ImeMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An IME is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard. The ImeMode property is typically set to <xref:System.Windows.Forms.ImeMode?displayProperty=fullName> for a <xref:System.Windows.Forms.TextBox> control that is intended to only enter numeric values. The ImeMode property value is set to <xref:System.Windows.Forms.ImeMode?displayProperty=fullName> for the <xref:System.Windows.Forms.Form> class.  
  
 Most classes that do not directly support Input Method Editors, or allow direct input from an IME, will set the value of this property to <xref:System.Windows.Forms.ImeMode>.  
  
> [!IMPORTANT]
>  The user can interactively change the ImeMode unless it has been programmatically set to <xref:System.Windows.Forms.ImeMode?displayProperty=fullName>. In this case, the user will not be able to use the IME.  
>   
>  The ImeMode property is ignored on Windows 8 when the global input mode is in effect. For more info, see[Switch Text Input Changed from Per-Thread to Per-User](http://go.microsoft.com/fwlink/?LinkID=256509).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The assigned value is not one of the <see cref="T:System.Windows.Forms.ImeMode" /> enumeration values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ImeModeBase">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode ImeModeBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeModeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the IME mode of a control.</summary>
        <value>The IME mode of the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ImeModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ImeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt; property has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.ImeMode%2A> property is changed by either a programmatic modification or through interaction.  
  
 Controls that do not support Input Method Managers will never raise this event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  
  
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_3_1.vb)]
 [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_3_1.cs)]
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_3_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InitLayout">
      <MemberSignature Language="C#" Value="protected virtual void InitLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after the control has been added to another container.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InitLayout method is called immediately after adding a control to a container. The InitLayout method enables a control to initialize its layout state based on its container. For example, you would typically apply anchoring and docking to the control in the InitLayout method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the entire surface of the control and causes the control to be redrawn.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region.  
  
   
  
## Examples  
 The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data. Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.  
  
 [!code-cs[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/csharp/m-system.windows.forms.c_72_1.cs)]
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/cpp/m-system.windows.forms.c_72_1.cpp)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_72_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(bool invalidateChildren) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidateChildren">
          <see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</param>
        <summary>Invalidates a specific region of the control and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rc">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</param>
        <summary>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">The <see cref="T:System.Drawing.Region" /> to invalidate.</param>
        <summary>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the Invalidate method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the Invalidate method. When this method is called with no parameters, the entire client area is added to the update region.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc, bool invalidateChildren) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rc">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</param>
        <param name="invalidateChildren">
          <see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</param>
        <summary>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region, bool invalidateChildren) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="region">The <see cref="T:System.Drawing.Region" /> to invalidate.</param>
        <param name="invalidateChildren">
          <see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</param>
        <summary>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invalidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.InvalidateEventHandler Invalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.InvalidateEventHandler Invalidated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InvalidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a control's display requires redrawing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Invalidated event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the Invalidated event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#40](~/add/codesnippet/csharp/e-system.windows.forms.c_31_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#40](~/add/codesnippet/visualbasic/e-system.windows.forms.c_31_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method">A delegate that contains a method to be called in the control's thread context.</param>
        <summary>Executes the specified delegate on the thread that owns the control's underlying window handle.</summary>
        <returns>The return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegates are similar to function pointers in C or C++ languages. Delegates encapsulate a reference to a method inside a delegate object. The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time. Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.  
  
 The Invoke method searches up the control's parent chain until it finds a control or form that has a window handle if the current control's underlying window handle does not exist yet. If no appropriate handle can be found, the Invoke method will throw an exception. Exceptions that are raised during the call will be propagated back to the caller.  
  
> [!NOTE]
>  In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: Invoke, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.  
  
 The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=fullName>. The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list. A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.  
  
> [!NOTE]
>  An exception might be thrown if the thread that should process the message is no longer active.  
  
   
  
## Examples  
 The following code example shows controls that contain a delegate. The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form. When the user clicks on the button, `Invoke` runs the delegate.  
  
 [!code-cpp[Control_Invoke2#1](~/add/codesnippet/cpp/m-system.windows.forms.c_18_1.cpp)]
 [!code-cs[Control_Invoke2#1](~/add/codesnippet/csharp/m-system.windows.forms.c_18_1.cs)]
 [!code-vb[Control_Invoke2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">A delegate to a method that takes parameters of the same number and type that are contained in the `args` parameter.</param>
        <param name="args">An array of objects to pass as arguments to the specified method. This parameter can be <see langword="null" /> if the method takes no arguments.</param>
        <summary>Executes the specified delegate, on the thread that owns the control's underlying window handle, with the specified list of arguments.</summary>
        <returns>An &lt;xref:System.Object&gt; that contains the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegates are similar to function pointers in C or C++ languages. Delegates encapsulate a reference to a method inside a delegate object. The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time. Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.  
  
 If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, this method throws an exception. Exceptions that are raised during the call will be propagated back to the caller.  
  
> [!NOTE]
>  In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.  
  
 The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=fullName>. The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list. A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.  
  
> [!NOTE]
>  An exception might be thrown if the thread that should process the message is no longer active.  
  
   
  
## Examples  
 The following code example shows controls that contain a delegate. The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form, using the specified arguments. When the user clicks on the button, `Invoke` runs the delegate.  
  
 [!code-cs[Control_Invoke1#1](~/add/codesnippet/csharp/m-system.windows.forms.c_114_1.cs)]
 [!code-vb[Control_Invoke1#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_114_1.vb)]
 [!code-cpp[Control_Invoke1#1](~/add/codesnippet/cpp/m-system.windows.forms.c_114_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokeGotFocus">
      <MemberSignature Language="C#" Value="protected void InvokeGotFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeGotFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event for the specified control.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokeLostFocus">
      <MemberSignature Language="C#" Value="protected void InvokeLostFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeLostFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event for the specified control.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokeOnClick">
      <MemberSignature Language="C#" Value="protected void InvokeOnClick (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeOnClick(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Click" /> event to.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event for the specified control.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokePaint">
      <MemberSignature Language="C#" Value="protected void InvokePaint (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaint(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</param>
        <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event for the specified control.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokePaintBackground">
      <MemberSignature Language="C#" Value="protected void InvokePaintBackground (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaintBackground(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</param>
        <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see langword="PaintBackground" /> event for the specified control.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on.</summary>
        <value>
          <see langword="true" /> if the control's &lt;xref:System.Windows.Forms.Control.Handle%2A&gt; was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controls in Windows Forms are bound to a specific thread and are not thread safe. Therefore, if you are calling a control's method from a different thread, you must use one of the control's invoke methods to marshal the call to the proper thread. This property can be used to determine if you must call an invoke method, which can be useful if you do not know what thread owns a control.  
  
> [!NOTE]
>  In addition to the InvokeRequired property, there are four methods on a control that are thread safe to call: <xref:System.Windows.Forms.Control.Invoke%2A>,<xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A> and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of these invoke methods when calling from a different thread.  
  
 If the control's handle does not yet exist, InvokeRequired searches up the control's parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, the InvokeRequired method returns `false`.  
  
 This means that InvokeRequiredcan return `false` if <xref:System.Windows.Forms.Control.Invoke%2A> is not required (the call occurs on the same thread), or if the control was created on a different thread but the control's handle has not yet been created.  
  
 In the case where the control's handle has not yet been created, you should not simply call properties, methods, or events on the control. This might cause the control's handle to be created on the background thread, isolating the control on a thread without a message pump and making the application unstable.  
  
 You can protect against this case by also checking the value of <xref:System.Windows.Forms.Control.IsHandleCreated%2A> when InvokeRequired returns `false` on a background thread. If the control handle has not yet been created, you must wait until it has been created before calling <xref:System.Windows.Forms.Control.Invoke%2A> or <xref:System.Windows.Forms.Control.BeginInvoke%2A>. Typically, this happens only if a background thread is created in the constructor of the primary form for the application (as in `Application.Run(new MainForm())`, before the form has been shown or `Application.Run` has been called.  
  
 One solution is to wait until the form's handle has been created before starting the background thread. Either force handle creation by calling the <xref:System.Windows.Forms.Control.Handle%2A> property, or wait until the <xref:System.Windows.Forms.Form.Load> event to start the background process.  
  
 An even better solution is to use the `SynchronizationContext` returned by <xref:System.Threading.SynchronizationContext> rather than a control for cross-thread marshaling.  
  
> [!NOTE]
>  An exception might be thrown if the thread that should process the message is no longer active.  
  
 For more information about multithreaded Windows Forms controls, see [How to: Use a Background Thread to Search for Files](~/add/includes/ajax-current-ext-md.md) and [How to: Make Thread-Safe Calls to Windows Forms Controls](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAccessible">
      <MemberSignature Language="C#" Value="public bool IsAccessible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control is visible to accessibility applications.</summary>
        <value>
          <see langword="true" /> if the control is visible to accessibility applications; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control has been disposed of.</summary>
        <value>
          <see langword="true" /> if the control has been disposed of; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property returns `true`, the control is disposed of and can no longer be referenced as a valid Windows control. Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection. When a control is disposed, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsHandleCreated">
      <MemberSignature Language="C#" Value="public bool IsHandleCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHandleCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control has a handle associated with it.</summary>
        <value>
          <see langword="true" /> if a handle has been assigned to the control; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the IsHandleCreated property to determine whether <xref:System.Windows.Forms.Control.CreateHandle%2A> has been called.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputChar(char charCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">The character to test.</param>
        <summary>Determines if a character is an input character that the control recognizes.</summary>
        <returns>
          <see langword="true" /> if the character should be sent directly to the control and not preprocessed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call the IsInputChar method to determine whether the character specified by the `charCode` parameter is an input character that the control wants. This method is called during window message preprocessing to determine whether the specified input character should be preprocessed or sent directly to the control. If IsInputChar returns `true`, the specified character is sent directly to the control. If IsInputChar returns `false`, the specified character is preprocessed and only sent to the control if it is not consumed by the preprocessing phase. The preprocessing of a character includes checking whether the character is a mnemonic of another control.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
        <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
        <returns>
          <see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call the IsInputKey method to determine whether the key specified by the `keyData` parameter is an input key that the control wants. This method is called during window message preprocessing to determine whether the specified input key should be preprocessed or sent directly to the control. If IsInputKey returns `true`, the specified key is sent directly to the control. If IsInputKey returns `false`, the specified key is preprocessed and only sent to the control if it is not consumed by the preprocessing phase. Keys that are preprocessed include the TAB, RETURN, ESC, and the UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW keys.  
  
   
  
## Examples  
 The following code example shows you how to override the IsInputKey method for a <xref:System.Windows.Forms.TextBox> control. In this example, the `TabTextBox` class handles the TAB key. When the `TabTextBox` has the focus and the user presses the TAB key four spaces are added at the text insertion point, replacing any selected text. By default, the <xref:System.Windows.Forms.TextBox> control handles the TAB key by moving the input focus to the next control. In this case, the keypress never reaches the <xref:System.Windows.Forms.Control.OnKeyDown%2A> method override. To prevent this default behavior, the IsInputKey method override returns `true` when the user presses the TAB key. For all other keypresses, the IsInputKey method override returns the result of calling the base-class version of the method.  
  
 [!code-vb[System.Windows.Forms.Control.IsInputKey#0](~/add/codesnippet/visualbasic/m-system.windows.forms.c_106_1.vb)]
 [!code-cs[System.Windows.Forms.Control.IsInputKey#0](~/add/codesnippet/csharp/m-system.windows.forms.c_106_1.cs)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsKeyLocked">
      <MemberSignature Language="C#" Value="public static bool IsKeyLocked (System.Windows.Forms.Keys keyVal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyLocked(valuetype System.Windows.Forms.Keys keyVal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyVal" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyVal">The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <see cref="T:System.Windows.Forms.Keys" /> enumeration.</param>
        <summary>Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.</summary>
        <returns>
          <see langword="true" /> if the specified key or keys are in effect; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the IsKeyLocked property to determine whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK keys are on, whether individually or in combination.  
  
   
  
## Examples  
 The following code example displays a message box indicating whether the specified key (the Caps Lock key in this case) is in effect.  
  
 [!code-vb[ControlIsKeyLocked#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_2_1.vb)]
 [!code-cpp[ControlIsKeyLocked#1](~/add/codesnippet/cpp/m-system.windows.forms.c_2_1.cpp)]
 [!code-cs[ControlIsKeyLocked#1](~/add/codesnippet/csharp/m-system.windows.forms.c_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <paramref name="keyVal" /> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsMirrored">
      <MemberSignature Language="C#" Value="public bool IsMirrored { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMirrored" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control is mirrored.</summary>
        <value>
          <see langword="true" /> if the control is mirrored; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A mirrored control displays both layout and text from right to left. For more information, see [How to: Create Mirrored Windows Forms and Controls](http://msdn.microsoft.com/en-us/7c5c4ecc-9bfb-4508-8383-753e306719b1).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsMnemonic">
      <MemberSignature Language="C#" Value="public static bool IsMnemonic (char charCode, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMnemonic(char charCode, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="charCode">The character to test.</param>
        <param name="text">The string to search.</param>
        <summary>Determines if the specified character is the mnemonic character assigned to the control in the specified string.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="charCode" /> character is the mnemonic character assigned to the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The mnemonic character is the character immediately following the first instance of "&" in a <xref:System.String>.  
  
   
  
## Examples  
 The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior. The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and IsMnemonic properties. To run this example paste the following code after a form class, in the same file. Add a button of type `MnemonicButton` to the form.  
  
 [!code-cs[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/csharp/m-system.windows.forms.c_70_1.cs)]
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/cpp/m-system.windows.forms.c_70_1.cpp)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_70_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a key is pressed while the control has focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Key events occur in the following order:  
  
1.  KeyDown  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`. Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically. To have these keys raise the KeyDown event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form. The code for the override of the <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`. Instead of overriding the <xref:System.Windows.Forms.Control.IsInputKey%2A> method, you can handle the <xref:System.Windows.Forms.Control.PreviewKeyDown> event and set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>property to `true`. For a code example, see the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the KeyDown event to determine the type of character entered into the control.  
  
 [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_14_1.vb)]
 [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/e-system.windows.forms.c_14_1.cpp)]
 [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/e-system.windows.forms.c_14_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyPressEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyPressEventHandler KeyPress" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyPressEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a character. space or backspace key is pressed while the control has focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Key events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  KeyPress  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 The KeyPress event is not raised by non-character keys other than space and backspace; however, the non-character keys do raise the <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> events.  
  
 Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.  
  
 To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName> property in your form's KeyPress event-handling method to `true`.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the KeyPress event to prevent characters from entering the control.  
  
 [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_4_1.vb)]
 [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/e-system.windows.forms.c_4_1.cpp)]
 [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/e-system.windows.forms.c_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyUp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a key is released while the control has focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Key events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  KeyUp  
  
 To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`. Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically. To have these keys raise the KeyUp event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form. The code for the override of <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the KeyUp event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.  
  
 [!code-cpp[Control.KeyUp#1](~/add/codesnippet/cpp/e-system.windows.forms.c_40_1.cpp)]
 [!code-vb[Control.KeyUp#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_40_1.vb)]
 [!code-cs[Control.KeyUp#1](~/add/codesnippet/csharp/e-system.windows.forms.c_40_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LayoutEventHandler Layout;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LayoutEventHandler Layout" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LayoutEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a control should reposition its child controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Layout event occurs when child controls are added or removed, when the bounds of the control changes, and when other changes occur that can affect the layout of the control. The layout event can be suppressed using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods. Suspending layout enables you to perform multiple actions on a control without having to perform a layout for each change. For example, if you resize and move a control, each operation would raise a Layout event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the Layout event. This will keep the form centered as the user resizes it. This example requires that you have created a <xref:System.Windows.Forms.Form> control.  
  
 [!code-cs[Control.Layout#1](~/add/codesnippet/csharp/e-system.windows.forms.c_22_1.cs)]
 [!code-vb[Control.Layout#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_22_1.vb)]
 [!code-cpp[Control.Layout#1](~/add/codesnippet/cpp/e-system.windows.forms.c_22_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LayoutEngine">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Layout.LayoutEngine LayoutEngine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Layout.LayoutEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a cached instance of the control's layout engine.</summary>
        <value>The <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> for the control's contents.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LayoutEngine property gets the layout engine for the control's children rather than for the control itself.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public event EventHandler Leave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Leave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the input focus leaves the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  Leave  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  Leave  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.Control.Enter> and Leave events are suppressed by the <xref:System.Windows.Forms.Form> class. The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events. The <xref:System.Windows.Forms.Control.Enter> and Leave events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached. For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control. When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the Leave event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.  
  
> [!CAUTION]
>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, Leave, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the Leave event to reset a control to its former state.  
  
 [!code-cs[Control.Enter#1](~/add/codesnippet/csharp/e-system.windows.forms.c_39_1.cs)]
 [!code-cpp[Control.Enter#1](~/add/codesnippet/cpp/e-system.windows.forms.c_39_1.cpp)]
 [!code-vb[Control.Enter#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_39_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public int Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</summary>
        <value>An &lt;xref:System.Int32&gt; representing the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Left property value is equivalent to the <xref:System.Drawing.Point.X%2A?displayProperty=fullName> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.  
  
 Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and Left property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.  
  
   
  
## Examples  
 The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  
  
 [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_103_1.cs)]
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_103_1.cpp)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_103_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</summary>
        <value>The <see cref="T:System.Drawing.Point" /> that represents the upper-left corner of the control relative to the upper-left corner of its container.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the <xref:System.Drawing.Point> class is a value type (`Structure` in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], `struct` in [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)]), it is returned by value, meaning accessing the property returns a copy of the upper-left point of the control. So, adjusting the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Drawing.Point> returned from this property will not affect the <xref:System.Windows.Forms.Control.Left%2A>, <xref:System.Windows.Forms.Control.Right%2A>, <xref:System.Windows.Forms.Control.Top%2A>, or <xref:System.Windows.Forms.Control.Bottom%2A> property values of the control. To adjust these properties set each property value individually, or set the Location property with a new <xref:System.Drawing.Point>.  
  
 If the <xref:System.Windows.Forms.Control> is a <xref:System.Windows.Forms.Form>, the Location property value represents the upper-left corner of the <xref:System.Windows.Forms.Form> in screen coordinates.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties. The example creates a <xref:System.Windows.Forms.TextBox>and sets its Location within the group box. Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.  
  
 [!code-cs[Windows.Forms.Control Properties#2](~/add/codesnippet/csharp/p-system.windows.forms.c_94_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#2](~/add/codesnippet/cpp/p-system.windows.forms.c_94_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_94_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.Location%2A&gt; property value has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.Location%2A> property is changed by either a programmatic modification or through interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example raises the LocationChanged event on a <xref:System.Windows.Forms.StatusStrip> when the form is resized.  
  
 [!code-cs[System.Windows.Forms.LocationChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.c_69_1.cs)]
 [!code-vb[System.Windows.Forms.LocationChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_69_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event EventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LostFocus" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control loses focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  LostFocus  
  
 When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  LostFocus  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  
  
 If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.Control.GotFocus> and LostFocus events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages. Typically, the <xref:System.Windows.Forms.Control.GotFocus> and LostFocus events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls. Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events. For more information about the <xref:System.Windows.Forms.Control.GotFocus> and LostFocus events, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) and [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topics.  
  
> [!CAUTION]
>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, LostFocus, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates validating the text for TextBox1. It also demonstrates handling the LostFocus event by setting the <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=fullName> property to the text in TextBox1. The code example used the <xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=fullName> method to check for an error before opening the file dialog box. To run this example, paste the following code into a form containing a <xref:System.Windows.Forms.TextBox> named `TextBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, a <xref:System.Windows.Forms.Button> named `Button1`, and an <xref:System.Windows.Forms.ErrorProvider> named `ErrorProvider1`. Ensure all events are associated with their event handlers.  
  
 [!code-cs[System.Windows.Forms.FileDialog#2](~/add/codesnippet/csharp/e-system.windows.forms.c_78_1.cs)]
 [!code-cpp[System.Windows.Forms.FileDialog#2](~/add/codesnippet/cpp/e-system.windows.forms.c_78_1.cpp)]
 [!code-vb[System.Windows.Forms.FileDialog#2](~/add/codesnippet/visualbasic/e-system.windows.forms.c_78_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the space between controls.</summary>
        <value>A <see cref="T:System.Windows.Forms.Padding" /> representing the space between controls.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controls receive default values for Margin that are reasonably close to Windows user interface guidelines. Some adjustments might still be necessary for particular applications.  
  
> [!NOTE]
>  Setting the Margin property on a docked control has no effect on the distance of the control from the the edges of its container.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MarginChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MarginChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MarginChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control's margin changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MarginChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the MarginChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#21](~/add/codesnippet/csharp/e-system.windows.forms.c_67_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#21](~/add/codesnippet/visualbasic/e-system.windows.forms.c_67_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaximumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MaximumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(typeof(System.Drawing.Size), "0, 0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size that is the upper limit that &lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt; can specify.</summary>
        <value>An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinimumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MinimumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size that is the lower limit that &lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt; can specify.</summary>
        <value>An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ModifierKeys">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Keys ModifierKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.Keys ModifierKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.</summary>
        <value>A bitwise combination of the <see cref="T:System.Windows.Forms.Keys" /> values. The default is <see cref="T:System.Windows.Forms.Keys" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example hides a button when the CTRL key is pressed while the button is clicked. This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.  
  
 [!code-cs[Windows.Forms.Control Members4#2](~/add/codesnippet/csharp/p-system.windows.forms.c_1_1.cs)]
 [!code-vb[Windows.Forms.Control Members4#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_1_1.vb)]
 [!code-cpp[Windows.Forms.Control Members4#2](~/add/codesnippet/cpp/p-system.windows.forms.c_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseButtons">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.MouseButtons MouseButtons { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.MouseButtons MouseButtons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseButtons</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating which of the mouse buttons is in a pressed state.</summary>
        <value>A bitwise combination of the <see cref="T:System.Windows.Forms.MouseButtons" /> enumeration values. The default is <see cref="T:System.Windows.Forms.MouseButtons" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, MouseButtons, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=fullName>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=fullName> members. To run the example, paste the following code in a form called Form1 containing several controls. This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.  
  
 [!code-cs[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/csharp/p-system.windows.forms.c_50_1.cs)]
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/cpp/p-system.windows.forms.c_50_1.cpp)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_50_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseCaptureChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MouseCaptureChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseCaptureChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control loses mouse capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In rare scenarios, you might need to detect unexpected input. For example, consider the following scenarios.  
  
-   During a mouse operation, the user opens the Start menu by pressing the Windows key or CTRL+ESC.  
  
-   During a mouse operation, the user switches to another program by pressing ALT+TAB.  
  
-   During a mouse operation, another program displays a window or a message box that takes focus away from the current application.  
  
 Mouse operations can include clicking and holding the mouse on a form or a control, or performing a mouse drag operation. If you have to detect when a form or a control loses mouse capture for these and related unexpected scenarios, you can use the MouseCaptureChanged event.  
  
   
  
## Examples  
 The following code example demonstrates the MouseCaptureChanged event for a <xref:System.Windows.Forms.Button> control.  
  
 [!code-cs[System.Windows.Forms.Control.MouseCaptureChanged#1](~/add/codesnippet/csharp/mousecapturechanged/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.MouseCaptureChanged#1](~/add/codesnippet/visualbasic/mousecapturechanged/form1.vb#1)]  
  
 To test this example, run it in the debugger by pressing F5. Open the **Output** window in Visual Studio so that you can see when events are raised. Click the <xref:System.Windows.Forms.Button> and notice the following output.  
  
 `button1_MouseDown`  
  
 `button1_MouseUp`  
  
 `button1_MouseCaptureChanged`  
  
 Now, click and hold the left mouse button on the <xref:System.Windows.Forms.Button> control. While still clicking the mouse, press ALT+TAB to switch to another program. Notice that the MouseCaptureChanged event is raised enabling you to potentially handle this scenario. Depending on your actions, the <xref:System.Windows.Forms.Control.MouseUp> event might not be raised. You can also try this test with the Windows key or CTRL+ESC.  
  
 `button1_MouseDown`  
  
 `button1_MouseCaptureChanged`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is clicked by the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Depressing a mouse button when the cursor is over a control typically raises the following series of events from the control:  
  
1.  <xref:System.Windows.Forms.Control.MouseDown> event.  
  
2.  <xref:System.Windows.Forms.Control.Click> event.  
  
3.  MouseClick event.  
  
4.  <xref:System.Windows.Forms.Control.MouseUp> event.  
  
 For this to occur, the various events cannot be disabled in the control's class.  
  
 Two single clicks that occur close enough in time, as determined by the mouse settings of the user's operating system, will generate a <xref:System.Windows.Forms.Control.MouseDoubleClick> event instead of the second MouseClick event.  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.Control.Click> events are logically higher-level events of a control. They are often raised by other actions, such as pressing the ENTER key when the control has focus.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the MouseClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#54](~/add/codesnippet/csharp/e-system.windows.forms.c_15_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/add/codesnippet/visualbasic/e-system.windows.forms.c_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is double clicked by the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MouseDoubleClick event occurs when the user depresses a mouse button twice in quick succession when the cursor is over the control. The time interval that separates two single clicks from a double-click is determined by the mouse settings of the user's operating system.  
  
 The following series of events is raised by the control when such a user action takes place:  
  
1.  <xref:System.Windows.Forms.Control.MouseDown> event.  
  
2.  <xref:System.Windows.Forms.Control.Click> event.  
  
3.  <xref:System.Windows.Forms.Control.MouseClick> event.  
  
4.  <xref:System.Windows.Forms.Control.MouseUp> event.  
  
5.  <xref:System.Windows.Forms.Control.MouseDown> event.  
  
6.  <xref:System.Windows.Forms.Control.DoubleClick> event.  
  
7.  MouseDoubleClick event.  
  
8.  <xref:System.Windows.Forms.Control.MouseUp> event.  
  
 For this to occur, the various events cannot be disabled in the control's class.  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.Control.DoubleClick> events are logically higher-level events of a control. They may be raised by other user actions, such as shortcut key combinations.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the MouseDoubleClick event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#55](~/add/codesnippet/csharp/e-system.windows.forms.c_0_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#55](~/add/codesnippet/visualbasic/e-system.windows.forms.c_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer is over the control and a mouse button is pressed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mouse events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / MouseDown / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, MouseDown, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and MouseDown events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_13_1.cpp)]
 [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_13_1.cs)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event EventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer enters the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mouse events occur in the following order:  
  
1.  MouseEnter  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, MouseEnter, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_2_1.cpp)]
 [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_2_1.cs)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseHover">
      <MemberSignature Language="C#" Value="public event EventHandler MouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseHover" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer rests on the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A typical use of MouseHover is to display a tool tip when the mouse pauses on a control within a specified area around the control (the "hover rectangle"). The pause required for this event to be raised is specified in milliseconds by the <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> property.  
  
 The MouseHover event is defined and detected in connection with the <xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A> and <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> properties.  
  
 Mouse events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  MouseHover / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, MouseHover, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like MouseHover, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_53_1.cpp)]
 [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_53_1.cs)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_53_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event EventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer leaves the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mouse events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  MouseLeave  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, MouseLeave and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_27_1.cpp)]
 [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_27_1.cs)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_27_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseMove" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer is moved over the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typical uses of MouseMove are to change the control's color or to paint a raised rectangle around the control.  
  
 Mouse events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  MouseMove  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and MouseMove. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each MouseMove and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_80_1.cpp)]
 [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_80_1.cs)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_80_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MousePosition">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point MousePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Point MousePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the position of the mouse cursor in screen coordinates.</summary>
        <value>A <see cref="T:System.Drawing.Point" /> that contains the coordinates of the mouse cursor relative to the upper-left corner of the screen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MousePosition property returns a <xref:System.Drawing.Point> that represents the mouse cursor position at the time the property was referenced. The coordinates indicate the position on the screen, not relative to the control, and are returned regardless of whether the cursor is positioned over the control. The coordinates of the upper-left corner of the screen are 0,0.  
  
 The MousePosition property is identical to the <xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=fullName> property.  
  
   
  
## Examples  
 The following code example puts a <xref:System.Windows.Forms.TreeNode> label into an editable state when the user presses ALT+E while the mouse cursor is over the tree node. After the user is done editing the label, the labels cannot be edited again until the ALT+E key combination is pressed again. This example requires that you have a <xref:System.Windows.Forms.TreeView> on a <xref:System.Windows.Forms.Form>. The tree view should also have at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeView.Nodes%2A> collection.  
  
 [!code-cs[Windows.Forms.Control Members4#3](~/add/codesnippet/csharp/p-system.windows.forms.c_64_1.cs)]
 [!code-vb[Windows.Forms.Control Members4#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_64_1.vb)]
 [!code-cpp[Windows.Forms.Control Members4#3](~/add/codesnippet/cpp/p-system.windows.forms.c_64_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseUp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse pointer is over the control and a mouse button is released.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mouse events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  MouseUp  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, MouseUp, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_42_1.cpp)]
 [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_42_1.cs)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_42_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseWheel" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse wheel moves while the control has focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When handling the MouseWheel event it is important to follow the user interface (UI) standards associated with the mouse wheel. The <xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=fullName> property value indicates the amount the mouse wheel has been moved. The UI should scroll when the accumulated delta is plus or minus 120. The UI should scroll the number of logical lines returned by the <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=fullName> property for every delta value reached. You can also scroll more smoothly in smaller that 120 unit increments, however the ratio should remain constant, that is <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=fullName> lines scrolled per 120 delta units of wheel movement.  
  
 For more information about handling mouse wheel messages, see the[WM_MOUSEWHEEL](http://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx)topic.  
  
 Mouse events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / MouseWheel  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the MouseWheel event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_38_1.cpp)]
 [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_38_1.cs)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_38_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public event EventHandler Move;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Move" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is moved.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the Move event to display the location of the form in screen coordinates on the caption bar of the form.  
  
 [!code-cpp[Control.Move#1](~/add/codesnippet/cpp/e-system.windows.forms.c_23_1.cpp)]
 [!code-vb[Control.Move#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_23_1.vb)]
 [!code-cs[Control.Move#1](~/add/codesnippet/csharp/e-system.windows.forms.c_23_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the control.</summary>
        <value>The name of the control. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Name property can be used at run time to evaluate the object by name rather than type and programmatic name. Because the Name property returns a <xref:System.String> type, it can be evaluated in case-style logic statements (`Select` statement in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], `switch` statement in [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)] and [!INCLUDE[vcprvc](~/add/includes/vcprvc-md.md)]).  
  
   
  
## Examples  
 The following code example displays the Name of a control in a <xref:System.Windows.Forms.MessageBox> when the control is added or removed from a form.  
  
 [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/p-system.windows.forms.c_14_1.cpp)]
 [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_14_1.vb)]
 [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/p-system.windows.forms.c_14_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NotifyInvalidate">
      <MemberSignature Language="C#" Value="protected virtual void NotifyInvalidate (System.Drawing.Rectangle invalidatedArea);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void NotifyInvalidate(valuetype System.Drawing.Rectangle invalidatedArea) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidatedArea" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="invalidatedArea">A <see cref="T:System.Drawing.Rectangle" /> representing the area to invalidate.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event with a specified region of the control to invalidate.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnAutoSizeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnBackColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_30_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_30_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_30_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnBackgroundImageChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_60_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_60_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_60_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnBackgroundImageLayoutChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnBindingContextChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCausesValidationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCausesValidationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCausesValidationChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnCausesValidationChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_17_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_17_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_17_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected virtual void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.UICuesEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnChangeUICues method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates overriding the OnClick method in a derived class. To run the example, paste the following code after a form class, in the same file. Add a textbox of type `SingleClickTextBox` to the form.  
  
 [!code-cs[System.Windows.Forms.ControlOnClick#1](~/add/codesnippet/csharp/m-system.windows.forms.c_15_1.cs)]
 [!code-vb[System.Windows.Forms.ControlOnClick#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_15_1.vb)]
 [!code-cpp[System.Windows.Forms.ControlOnClick#1](~/add/codesnippet/cpp/m-system.windows.forms.c_15_1.cpp)]  
  
 The following code example shows one of the many uses of the <xref:System.Windows.Forms.Control.Click> event and event handler.  
  
 [!code-cpp[Control.FindForm#1](~/add/codesnippet/cpp/m-system.windows.forms.c_15_2.cpp)]
 [!code-vb[Control.FindForm#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_15_2.vb)]
 [!code-cs[Control.FindForm#1](~/add/codesnippet/csharp/m-system.windows.forms.c_15_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnClientSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnClientSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClientSizeChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnClientSizeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnContextMenuChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_6_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_6_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuStripChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuStripChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnContextMenuStripChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnControlAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnControlAdded (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlAdded(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Called when a child control is added to the control.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnControlAdded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.  
  
 [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/0fc8c7fb-6974-4f10-8201-_1.cpp)]
 [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/0fc8c7fb-6974-4f10-8201-_1.vb)]
 [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/0fc8c7fb-6974-4f10-8201-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnControlRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnControlRemoved (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlRemoved(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Called when a child control is removed from the control.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnControlRemoved method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.  
  
 [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/ab705c0a-755a-4539-b414-_1.cpp)]
 [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/ab705c0a-755a-4539-b414-_1.vb)]
 [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/ab705c0a-755a-4539-b414-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCreateControl">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCreateControl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raises the &lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnCreateControl method is called when the control is first created.  
  
 The OnCreateControl method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCursorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnCursorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_103_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_103_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_103_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDockChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDockChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDockChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DockChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnDockChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_25_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_25_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_25_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnDoubleClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoubleClick(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.  
  
 [!code-cs[Control.DoubleClick#1](~/add/codesnippet/csharp/m-system.windows.forms.c_63_1.cs)]
 [!code-vb[Control.DoubleClick#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_63_1.vb)]
 [!code-cpp[Control.DoubleClick#1](~/add/codesnippet/cpp/m-system.windows.forms.c_63_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDrop (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDrop(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnDragDrop method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnDragEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnDragLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnDragOver method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnEnabledChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Enter" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.  
  
 [!code-cs[Control.Enter#1](~/add/codesnippet/csharp/m-system.windows.forms.c_46_1.cs)]
 [!code-cpp[Control.Enter#1](~/add/codesnippet/cpp/m-system.windows.forms.c_46_1.cpp)]
 [!code-vb[Control.Enter#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_46_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnFontChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_104_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_104_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_104_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnForeColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_23_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_23_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_23_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs gfbevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.GiveFeedbackEventArgs gfbevent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gfbevent" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="gfbevent">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnGiveFeedback method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnGotFocus method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnHandleCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnHandleDestroyed method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequested">
      <MemberSignature Language="C#" Value="protected virtual void OnHelpRequested (System.Windows.Forms.HelpEventArgs hevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHelpRequested(class System.Windows.Forms.HelpEventArgs hevent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hevent" Type="System.Windows.Forms.HelpEventArgs" />
      </Parameters>
      <Docs>
        <param name="hevent">A <see cref="T:System.Windows.Forms.HelpEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HelpRequested" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnHelpRequested method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnImeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnImeModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnImeModeChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnImeModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_49_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_49_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_49_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInvalidated">
      <MemberSignature Language="C#" Value="protected virtual void OnInvalidated (System.Windows.Forms.InvalidateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInvalidated(class System.Windows.Forms.InvalidateEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.InvalidateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.InvalidateEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnInvalidated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnKeyDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.  
  
 [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_108_1.vb)]
 [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/m-system.windows.forms.c_108_1.cpp)]
 [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/m-system.windows.forms.c_108_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnKeyPress method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.  
  
 [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/5902b2b7-dc18-40a0-9d7e-_1.vb)]
 [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/5902b2b7-dc18-40a0-9d7e-_1.cpp)]
 [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/5902b2b7-dc18-40a0-9d7e-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnKeyUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.  
  
 [!code-cpp[Control.KeyUp#1](~/add/codesnippet/cpp/m-system.windows.forms.c_112_1.cpp)]
 [!code-vb[Control.KeyUp#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_112_1.vb)]
 [!code-cs[Control.KeyUp#1](~/add/codesnippet/csharp/m-system.windows.forms.c_112_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected virtual void OnLayout (System.Windows.Forms.LayoutEventArgs levent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs levent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levent" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="levent">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnLayout method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.  
  
 [!code-cs[Control.Enter#1](~/add/codesnippet/csharp/m-system.windows.forms.c_21_1.cs)]
 [!code-cpp[Control.Enter#1](~/add/codesnippet/cpp/m-system.windows.forms.c_21_1.cpp)]
 [!code-vb[Control.Enter#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_21_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.LocationChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnLocationChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName* `Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_36_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_36_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_36_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnLostFocus method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMarginChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMarginChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMarginChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MarginChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMarginChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseCaptureChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseCaptureChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseCaptureChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseCaptureChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseHover" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseHover method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to override the OnMouseHover and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class. To run the example, paste the following code in a new form and paste this class, forming the same file, after the form. Add a button of type `FunButton` to the form.  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/cpp/m-system.windows.forms.c_74_1.cpp)]
 [!code-cs[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/csharp/m-system.windows.forms.c_74_1.cs)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_74_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseMove method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and OnMouseMove methods in a derived class. To run the example, paste the following code in a new form and paste this class, forming the same file, after the form. Add a button of type `FunButton` to the form.  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/cpp/m-system.windows.forms.c_107_1.cpp)]
 [!code-cs[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/csharp/m-system.windows.forms.c_107_1.cs)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_107_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMouseWheel method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMove (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMove(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Move" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnMove method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.  
  
 [!code-cpp[Control.Move#1](~/add/codesnippet/cpp/m-system.windows.forms.c_73_1.cpp)]
 [!code-vb[Control.Move#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_73_1.vb)]
 [!code-cs[Control.Move#1](~/add/codesnippet/csharp/m-system.windows.forms.c_73_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnNotifyMessage">
      <MemberSignature Language="C#" Value="protected virtual void OnNotifyMessage (System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNotifyMessage(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" /> that represents the Windows message.</param>
        <summary>Notifies the control of Windows messages.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnNotifyMessage method is called if the control's `EnableNotifyMessage` style bit is set in <xref:System.Windows.Forms.ControlStyles>. The `EnableNotifyMessage` style in <xref:System.Windows.Forms.ControlStyles> enables the control to be notified when the <xref:System.Windows.Forms.Control.WndProc%2A> method receives a Windows message. With this method, semi-trusted controls can listen for Windows messages without enabling them to modify the message.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPaddingChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPaddingChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaddingChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.PaddingChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnPaddingChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnPaint method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on which it is dropped. The OnPaint method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data. Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.  
  
 [!code-cs[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/csharp/m-system.windows.forms.c_57_1.cs)]
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/cpp/m-system.windows.forms.c_57_1.cpp)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_57_1.vb)]  
  
 [!code-cs[Control.Paint#1](~/add/codesnippet/csharp/m-system.windows.forms.c_57_2.cs)]
 [!code-cpp[Control.Paint#1](~/add/codesnippet/cpp/m-system.windows.forms.c_57_2.cpp)]
 [!code-vb[Control.Paint#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_57_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintBackground (System.Windows.Forms.PaintEventArgs pevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs pevent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pevent" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</param>
        <summary>Paints the background of the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnPaintBackground method enables derived classes to handle Windows background erase requests.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event when the &lt;xref:System.Windows.Forms.Control.BackColor%2A&gt; property value of the control's container changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentBackColorChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_5_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_5_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event when the &lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt; property value of the control's container changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentBackgroundImageChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed`that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_44_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_44_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_44_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event when the &lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt; property value of the control's container changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentBindingContextChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed`that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_26_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_26_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_26_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_38_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_38_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_38_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentCursorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentCursorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event when the &lt;xref:System.Windows.Forms.Control.Enabled%2A&gt; property value of the control's container changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentEnabledChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_93_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_93_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_93_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentFontChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event when the &lt;xref:System.Windows.Forms.Control.Font%2A&gt; property value of the control's container changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentFontChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_48_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_48_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_48_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event when the &lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt; property value of the control's container changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentForeColorChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_113_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_113_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_113_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event when the &lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt; property value of the control's container changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentRightToLeftChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_62_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_62_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_62_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event when the &lt;xref:System.Windows.Forms.Control.Visible%2A&gt; property value of the control's container changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnParentVisibleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_41_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_41_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_41_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Forms.PreviewKeyDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Forms.PreviewKeyDownEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PreviewKeyDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnPreviewKeyDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPrint">
      <MemberSignature Language="C#" Value="protected virtual void OnPrint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `UserPaint` bit of the <xref:System.Windows.Forms.ControlStyles> is set, you can override OnPrint to do layered painting. See <xref:System.Windows.Forms.Control.SetStyle%2A> for more information.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs qcdevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.QueryContinueDragEventArgs qcdevent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qcdevent" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="qcdevent">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After dragging has begun, this method is called repeatedly by the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] until the drag operation is either canceled or completed.  
  
> [!NOTE]
>  Override this method if you want to change the point at which dragging is canceled or at which a drop occurs.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnQueryContinueDrag method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRegionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRegionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRegionChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.RegionChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnRegionChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected virtual void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnResize method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnRightToLeftChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_52_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_52_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_52_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSizeChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnSizeChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.StyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnStyleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnSystemColorsChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnTabIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabIndexChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnTabIndexChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnTabStopChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabStopChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabStopChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.TabStopChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnTabStopChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_13_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_13_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.TextChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnTextChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_88_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_88_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_88_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnValidated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidated(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Validated" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnValidated method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.ComponentModel.CancelEventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Validating" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnValidating method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 The OnVisibleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_11_1.cpp)]
 [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_11_1.cs)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets padding within the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.Padding" /> representing the control's internal spacing characteristics.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For containers such as <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TabControl>, the Padding property gets or sets their respective <xref:System.Windows.Forms.Control.DisplayRectangle%2A> properties. The <xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=fullName> property is equal to its Padding property.  
  
 Controls receive default values for Padding that are reasonably close to Windows user interface guidelines. Some adjustments might still be necessary for particular applications.  
  
 All controls that implement <xref:System.Windows.Forms.Control.GetPreferredSize%2A> are enlarged by the amount in Padding when <xref:System.Windows.Forms.Control.AutoSize%2A> is `true`.  
  
 The following controls do not use Padding:  
  
-   Controls that do not implement <xref:System.Windows.Forms.Control.AutoSize%2A> through <xref:System.Windows.Forms.Control.GetPreferredSize%2A>  
  
-   Custom controls that directly inherit from <xref:System.Windows.Forms.Control>  
  
-   <xref:System.Windows.Forms.AxHost>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DataGridView>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MaskedTextBox>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.PropertyGrid>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.SplitContainer>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TextBoxBase>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
-   <xref:System.Windows.Forms.WebBrowser>  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control's padding changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the PaddingChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the PaddingChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#41](~/add/codesnippet/csharp/e-system.windows.forms.c_29_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#41](~/add/codesnippet/visualbasic/e-system.windows.forms.c_29_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is redrawn.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Paint event is raised when the control is redrawn. It passes an instance of <xref:System.Windows.Forms.PaintEventArgs> to the method(s) that handles the Paint event.  
  
 When creating a new custom control or an inherited control with a different visual appearance, you must provide code to render the control by overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> method. For more information, see [Overriding the OnPaint Method](~/add/includes/ajax-current-ext-md.md) and [Custom Control Painting and Rendering](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example creates a <xref:System.Windows.Forms.PictureBox> control on the form and uses the Paint event to draw to it.  
  
 [!code-cs[Control.Paint#1](~/add/codesnippet/csharp/e-system.windows.forms.c_26_1.cs)]
 [!code-cpp[Control.Paint#1](~/add/codesnippet/cpp/e-system.windows.forms.c_26_1.cpp)]
 [!code-vb[Control.Paint#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_26_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the parent container of the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.Control" /> that represents the parent or container control of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting the Parent property value to `null` removes the control from the <xref:System.Windows.Forms.Control.ControlCollection> of its current parent control.  
  
   
  
## Examples  
 The following code example uses the Parent property and the <xref:System.Windows.Forms.Control.FindForm%2A> method to set properties on the parent control of a button and its form.  
  
 [!code-cpp[Control.FindForm#1](~/add/codesnippet/cpp/p-system.windows.forms.c_75_1.cpp)]
 [!code-vb[Control.FindForm#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_75_1.vb)]
 [!code-cs[Control.FindForm#1](~/add/codesnippet/csharp/p-system.windows.forms.c_75_1.cs)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to get this property value. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParentChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ParentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ParentChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.Parent%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.Parent%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces the control to apply layout logic to all its child controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the PerformLayout method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.  
  
 The <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created are set to `null` if no values were provided when the PerformLayout method was called.  
  
   
  
## Examples  
 The following code example demonstrates how to use the PerformLayout method. It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised. In this example, the `Click` event handler for `Button1` explicitly calls PerformLayout. The `Click` event handler for `Button2` implicitly calls PerformLayout. PerformLayout is also called when the form is loaded. `Button3` returns the control to the state it was in when loaded. In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.  
  
 This is a complete example. To run the example, paste the following code in a blank form.  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/cpp/m-system.windows.forms.c_101_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_101_1.vb)]
 [!code-cs[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/csharp/m-system.windows.forms.c_101_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout (System.Windows.Forms.Control affectedControl, string affectedProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout(class System.Windows.Forms.Control affectedControl, string affectedProperty) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affectedControl" Type="System.Windows.Forms.Control" />
        <Parameter Name="affectedProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="affectedControl">A <see cref="T:System.Windows.Forms.Control" /> that represents the most recently changed control.</param>
        <param name="affectedProperty">The name of the most recently changed property on the control.</param>
        <summary>Forces the control to apply layout logic to all its child controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.  
  
 The `affectedControl` and `affectedProperty` parameters can both be set to `null`. Doing so causes the <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created to be set to `null`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method. It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised. In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>. The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>. <xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded. `Button3` returns the control to the state it was in when loaded. In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.  
  
 This is a complete example. To run the example, paste the following code in a blank form.  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/cpp/dd503f2e-2328-4789-9d52-_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/visualbasic/dd503f2e-2328-4789-9d52-_1.vb)]
 [!code-cs[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/csharp/dd503f2e-2328-4789-9d52-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PointToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToClient (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToClient(valuetype System.Drawing.Point p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">The screen coordinate <see cref="T:System.Drawing.Point" /> to convert.</param>
        <summary>Computes the location of the specified screen point into client coordinates.</summary>
        <returns>A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in client coordinates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data. Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> values are screen coordinates, the example uses the PointToClient method to convert them to client coordinates.  
  
 [!code-cs[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/csharp/m-system.windows.forms.c_84_1.cs)]
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/cpp/m-system.windows.forms.c_84_1.cpp)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_84_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PointToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToScreen (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToScreen(valuetype System.Drawing.Point p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">The client coordinate <see cref="T:System.Drawing.Point" /> to convert.</param>
        <summary>Computes the location of the specified client point into screen coordinates.</summary>
        <returns>A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in screen coordinates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, PointToScreen, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=fullName>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=fullName> members. To run the example, paste the following code in a form called Form1 containing several controls. This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.  
  
 [!code-cs[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/csharp/m-system.windows.forms.c_35_1.cs)]
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/cpp/m-system.windows.forms.c_35_1.cpp)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_35_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PreferredSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size PreferredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size PreferredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the size of a rectangular area into which the control can fit.</summary>
        <value>A <see cref="T:System.Drawing.Size" /> containing the height and width, in pixels.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PreProcessControlMessage">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.PreProcessControlState PreProcessControlMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.PreProcessControlState PreProcessControlMessage(valuetype System.Windows.Forms.Message msg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreProcessControlState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg">A <see cref="T:System.Windows.Forms.Message" /> that represents the message to process.</param>
        <summary>Preprocesses keyboard or input messages within the message loop before they are dispatched.</summary>
        <returns>One of the <see cref="T:System.Windows.Forms.PreProcessControlState" /> values, depending on whether &lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt; is <see langword="true" /> or <see langword="false" /> and whether &lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt; or &lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt; are <see langword="true" /> or <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PreProcessMessage">
      <MemberSignature Language="C#" Value="public virtual bool PreProcessMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PreProcessMessage(valuetype System.Windows.Forms.Message msg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the message to process. The possible values are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</param>
        <summary>Preprocesses keyboard or input messages within the message loop before they are dispatched.</summary>
        <returns>
          <see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 PreProcessMessage is called by the application's message loop to preprocess input messages before they are dispatched. Possible values for the `msg` parameter are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.  
  
 When overriding PreProcessMessage, a control should return `true` to indicate that it has processed the message. For messages that are not processed by the control, the result of `base.PreProcessMessage` should be returned. Controls will typically override one of the more specialized methods such as <xref:System.Windows.Forms.Control.IsInputChar%2A>, <xref:System.Windows.Forms.Control.IsInputKey%2A>, <xref:System.Windows.Forms.Control.ProcessCmdKey%2A>, <xref:System.Windows.Forms.Control.ProcessDialogChar%2A>, or <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> instead of overriding PreProcessMessage.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for the immediate caller to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreviewKeyDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event when a key is pressed while focus is on this control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Some key presses, such as the TAB, RETURN, ESC, and arrow keys, are typically ignored by some controls because they are not considered input key presses. For example, by default, a <xref:System.Windows.Controls.Button> control ignores the arrow keys. Pressing the arrow keys typically causes the focus to move to the previous or next control. The arrow keys are considered navigation keys and pressing these keys typically do not raise the <xref:System.Windows.Forms.Control.KeyDown> event for a<xref:System.Windows.Controls.Button>. However, pressing the arrow keys for a <xref:System.Windows.Controls.Button> does raise the PreviewKeyDown event. By handling the PreviewKeyDown event for a <xref:System.Windows.Controls.Button> and setting the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`, you can raise the <xref:System.Windows.Forms.Control.KeyDown> event when the arrow keys are pressed. However, if you handle the arrow keys, the focus will no longer move to the previous or next control.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates a <xref:System.Windows.Forms.Button> that includes a <xref:System.Windows.Forms.ContextMenuStrip>. When the <xref:System.Windows.Forms.Button> has the focus and you press the UP ARROW or DOWN ARROW keys, the <xref:System.Windows.Forms.ContextMenuStrip> appears. The PreviewKeyDown event handler detects when the UP ARROW or DOWN ARROW keys are pressed and sets the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`. This raises the <xref:System.Windows.Forms.Control.KeyDown> event so that you can display the <xref:System.Windows.Forms.ContextMenuStrip>. You should not put any logic in the PreviewKeyDown event handler, other than to set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property. Instead, you should put your logic in the <xref:System.Windows.Forms.Control.KeyDown> event handler.  
  
 [!code-cs[System.Windows.Forms.Control.PreviewKeyDown#1](~/add/codesnippet/csharp/e-system.windows.forms.c_64_1.cs)]
 [!code-vb[System.Windows.Forms.Control.PreviewKeyDown#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_64_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
        <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
        <summary>Processes a command key.</summary>
        <returns>
          <see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called during message preprocessing to handle command keys. Command keys are keys that always take precedence over regular input keys. Examples of command keys include accelerators and menu shortcuts. The method must return `true` to indicate that it has processed the command key, or `false` to indicate that the key is not a command key. This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.  
  
 The ProcessCmdKey method first determines whether the control has a <xref:System.Windows.Forms.ContextMenu>, and if so, enables the <xref:System.Windows.Forms.ContextMenu> to process the command key. If the command key is not a menu shortcut and the control has a parent, the key is passed to the parent's ProcessCmdKey method. The net effect is that command keys are "bubbled" up the control hierarchy. In addition to the key the user pressed, the key data also indicates which, if any, modifier keys were pressed at the same time as the key. Modifier keys include the SHIFT, CTRL, and ALT keys.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller and inheriting classes to call this method. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogChar">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogChar(char charCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">The character to process.</param>
        <summary>Processes a dialog character.</summary>
        <returns>
          <see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called during message preprocessing to handle dialog characters, such as control mnemonics. This method is called only if the <xref:System.Windows.Forms.Control.IsInputChar%2A> method indicates that the control is not processing the character. The ProcessDialogChar method simply sends the character to the parent's ProcessDialogChar method, or returns `false` if the control has no parent. The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog characters. This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
        <summary>Processes a dialog key.</summary>
        <returns>
          <see langword="true" /> if the key was processed by the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called during message preprocessing to handle dialog characters, such as TAB, RETURN, ESC, and arrow keys. This method is called only if the <xref:System.Windows.Forms.Control.IsInputKey%2A> method indicates that the control is not processing the key. The ProcessDialogKey simply sends the character to the parent's ProcessDialogKey method, or returns `false`if the control has no parent. The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys. This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyEventArgs">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyEventArgs(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
        <summary>Processes a key message and generates the appropriate control events.</summary>
        <returns>
          <see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called when a control receives a keyboard message. The method is responsible for generating the appropriate key events for the message by calling the <xref:System.Windows.Forms.Control.OnKeyPress%2A>, <xref:System.Windows.Forms.Control.OnKeyDown%2A>, or <xref:System.Windows.Forms.Control.OnKeyUp%2A> methods. The `m` parameter contains the window message that must be processed. Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IME_CHAR.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
        <summary>Processes a keyboard message.</summary>
        <returns>
          <see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called when a control receives a keyboard message. The method first determines whether the control has a parent; if so, it calls the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method. If the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method does not process the message then the <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A> method is called to generate the appropriate keyboard events. The `m` parameter contains the window message that must be processed. Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
        <summary>Previews a keyboard message.</summary>
        <returns>
          <see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by a child control when the child control receives a keyboard message. The child control calls this method before generating any keyboard events for the message. If this method returns `true`, the child control considers the message processed and does not generate any keyboard events. The `m` parameter contains the window message to preview. Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP. The ProcessKeyPreview method simply sends the character to the parent's ProcessKeyPreview method, or returns `false` if the control has no parent. The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">The character to process.</param>
        <summary>Processes a mnemonic character.</summary>
        <returns>
          <see langword="true" /> if the character was processed as a mnemonic by the control; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called to give a control the opportunity to process a mnemonic character. The method should determine whether the control is in a state to process mnemonics and if whether the given character represents a mnemonic. If so, the method should perform the action associated with the mnemonic and return `true`. If not, the method should return `false`. Implementations of this method often use the <xref:System.Windows.Forms.Control.IsMnemonic%2A> method to determine whether the given character matches a mnemonic in the control's text.  
  
 For example:  
  
```c#  
if (CanSelect && IsMnemonic(charCode, MyControl.Text) {  
      // Perform action associated with mnemonic.  
       }  
```  
  
 This default implementation of the ProcessMnemonic method simply returns `false` to indicate that the control has no mnemonic.  
  
   
  
## Examples  
 The following code example demonstrates an extension of the button class that overrides the ProcessMnemonic method to exhibit custom behavior. The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties. To run this example paste the following code after a form class, in the same file. Add a button of type `MnemonicButton` to the form.  
  
 [!code-cs[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/csharp/m-system.windows.forms.c_47_1.cs)]
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/cpp/m-system.windows.forms.c_47_1.cpp)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_47_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProductName">
      <MemberSignature Language="C#" Value="public string ProductName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the product name of the assembly containing the control.</summary>
        <value>The product name of the assembly containing the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ProductName property is a read-only property. To change the value of this property, set the <xref:System.Reflection.AssemblyProductAttribute.Product%2A> property value of the <xref:System.Reflection.AssemblyProductAttribute>. The following line of C# code sets the ProductName property.  
  
```  
[assembly: AssemblyProduct("MyApplication")]  
```  
  
> [!NOTE]
>  It is strongly recommended that you provide the company name, product name, and product version. Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=fullName> that make it easier to write applications that comply with the "Certified for Windows" program. For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.  
  
   
  
## Examples  
 The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>. This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, ProductName and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.  
  
 [!code-cs[Windows.Forms.Control Properties3#1](~/add/codesnippet/csharp/p-system.windows.forms.c_78_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties3#1](~/add/codesnippet/cpp/p-system.windows.forms.c_78_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_78_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProductVersion">
      <MemberSignature Language="C#" Value="public string ProductVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the version of the assembly containing the control.</summary>
        <value>The file version of the assembly containing the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ProductVersion property is a read-only property. To change the value of this property, set the <xref:System.Reflection.AssemblyVersionAttribute.Version%2A> property value of the <xref:System.Reflection.AssemblyVersionAttribute>. The following line of C# code sets the ProductVersion property.  
  
```  
[assembly: AssemblyVersion("1.0.1")]  
```  
  
> [!NOTE]
>  It is strongly recommended that you provide the company name, product name, and product version. Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=fullName> that make it easier to write applications that comply with the "Certified for Windows" program. For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.  
  
   
  
## Examples  
 The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>. This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and ProductVersion have been set.  
  
 [!code-cs[Windows.Forms.Control Properties3#1](~/add/codesnippet/csharp/p-system.windows.forms.c_45_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties3#1](~/add/codesnippet/cpp/p-system.windows.forms.c_45_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_45_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PropagatingImeMode">
      <MemberSignature Language="C#" Value="protected static System.Windows.Forms.ImeMode PropagatingImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.ImeMode PropagatingImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that represents a propagating IME mode.</summary>
        <value>An object that represents a propagating IME mode.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="QueryAccessibilityHelp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryAccessibilityHelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when <see cref="T:System.Windows.Forms.AccessibleObject" /> is providing help to accessibility applications.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You should use the <xref:System.Windows.Forms.HelpProvider> class to enable users to invoke help on your accessible object by pressing the F1 key. Using the <xref:System.Windows.Forms.HelpProvider> provides you with complete information in the <xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>. For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information. The control plots two curves along with a legend. The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control. Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  
  
 This code excerpt demonstrates handling the QueryAccessibilityHelp event. See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.  
  
 [!code-vb[System.Windows.Forms.AccessibleObject#3](~/add/codesnippet/visualbasic/e-system.windows.forms.c_11_1.vb)]
 [!code-cs[System.Windows.Forms.AccessibleObject#3](~/add/codesnippet/csharp/e-system.windows.forms.c_11_1.cs)]
 [!code-cpp[System.Windows.Forms.AccessibleObject#3](~/add/codesnippet/cpp/e-system.windows.forms.c_11_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The QueryContinueDrag event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation. The QueryContinueDrag event enables the drag source to determine whether the drag-and-drop operation should be canceled.  
  
 The following describes how and when events related to drag-and-drop operations are raised.  
  
 The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
-   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.  
  
-   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.  
  
 If there is a change in the keyboard or mouse button state, theQueryContinueDrag event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
 By default, the QueryContinueDrag event sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Cancel` in <xref:System.Windows.Forms.DragAction> if the ESC key was pressed and sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Drop` in <xref:System.Windows.Forms.DragAction> if the left, middle, or right mouse button is pressed.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  
  
 The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files,`3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the QueryContinueDrag event handler.  
  
 This code excerpt demonstrates using the QueryContinueDrag event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#6](~/add/codesnippet/cpp/e-system.windows.forms.c_75_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#6](~/add/codesnippet/visualbasic/e-system.windows.forms.c_75_1.vb)]
 [!code-cs[System.Windows.Forms.Control.DoDragDrop#6](~/add/codesnippet/csharp/e-system.windows.forms.c_75_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaiseDragEvent">
      <MemberSignature Language="C#" Value="protected void RaiseDragEvent (object key, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseDragEvent(object key, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="key">The event to raise.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
        <summary>Raises the appropriate drag event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaiseKeyEvent">
      <MemberSignature Language="C#" Value="protected void RaiseKeyEvent (object key, System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseKeyEvent(object key, class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="key">The event to raise.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <summary>Raises the appropriate key event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaiseMouseEvent">
      <MemberSignature Language="C#" Value="protected void RaiseMouseEvent (object key, System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseMouseEvent(object key, class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="key">The event to raise.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the appropriate mouse event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaisePaintEvent">
      <MemberSignature Language="C#" Value="protected void RaisePaintEvent (object key, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaisePaintEvent(object key, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="key">The event to raise.</param>
        <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        <summary>Raises the appropriate paint event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RecreateHandle">
      <MemberSignature Language="C#" Value="protected void RecreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RecreateHandle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces the re-creation of the handle for the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RecreateHandle method is called whenever parameters are needed for a new control, but using a call from <xref:System.Windows.Forms.Control.UpdateStyles%2A> to <xref:System.Windows.Forms.Control.CreateParams%2A> is insufficient. This method also calls <xref:System.Windows.Forms.Control.DestroyHandle%2A> and<xref:System.Windows.Forms.Control.CreateHandle%2A> and sets <xref:System.Windows.Forms.Control.RecreatingHandle%2A> to `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RecreatingHandle">
      <MemberSignature Language="C#" Value="public bool RecreatingHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecreatingHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control is currently re-creating its handle.</summary>
        <value>
          <see langword="true" /> if the control is currently re-creating its handle; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RecreatingHandle property returns `true` if the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is still running on the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RectangleToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToClient (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToClient(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r">The screen coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</param>
        <summary>Computes the size and location of the specified screen rectangle in client coordinates.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="r" />, in client coordinates.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RectangleToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToScreen (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToScreen(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r">The client coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</param>
        <summary>Computes the size and location of the specified client rectangle in screen coordinates.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="p" />, in screen coordinates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, RectangleToScreen, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=fullName>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=fullName> members. To run the example, paste the following code in a form called **Form1** containing several controls. This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.  
  
 [!code-cs[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/csharp/m-system.windows.forms.c_86_1.cs)]
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/cpp/m-system.windows.forms.c_86_1.cpp)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_86_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReflectMessage">
      <MemberSignature Language="C#" Value="protected static bool ReflectMessage (IntPtr hWnd, ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool ReflectMessage(native int hWnd, valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="hWnd">An &lt;xref:System.IntPtr&gt; representing the handle of the control to reflect the message to.</param>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" /> representing the Windows message to reflect.</param>
        <summary>Reflects the specified message to the control that is bound to the specified handle.</summary>
        <returns>
          <see langword="true" /> if the message was reflected; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ReflectMessage method is an infrastructure method and typically should not be called from your code.  
  
 If the `hWnd` parameter does not represent a valid control, the ReflectMessage method returns `false`.  
  
 Because Windows messages are returned to the top-level window, the ReflectMessage method is used to propagate the return message to the control that sent the message.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public virtual void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces the control to invalidate its client area and immediately redraw itself and any child controls.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Region { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the window region associated with the control.</summary>
        <value>The window <see cref="T:System.Drawing.Region" /> associated with the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The window region is a collection of pixels within the window where the operating system permits drawing. The operating system does not display any portion of a window that lies outside of the window region. The coordinates of a control's region are relative to the upper-left corner of the control, not the client area of the control.  
  
> [!NOTE]
>  The collection of pixels contained with the region can be noncontiguous.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Region property by creating a round button. To run the example, paste the following code in a form containing a button called `roundButton`. This example requires that the <xref:System.Windows.Forms.Control.Paint> event is connected to the event handler defined in the example.  
  
 [!code-cs[System.Windows.Forms.Control.Region#1](~/add/codesnippet/csharp/p-system.windows.forms.c_106_1.cs)]
 [!code-cpp[System.Windows.Forms.Control.Region#1](~/add/codesnippet/cpp/p-system.windows.forms.c_106_1.cpp)]
 [!code-vb[System.Windows.Forms.Control.Region#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_106_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to set this property value. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RegionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RegionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.Control.Region%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RegionChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the RegionChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#22](~/add/codesnippet/csharp/e-system.windows.forms.c_18_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#22](~/add/codesnippet/visualbasic/e-system.windows.forms.c_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderRightToLeft">
      <MemberSignature Language="C#" Value="protected bool RenderRightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property has been deprecated. Please use RightToLeft instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is now obsolete.</summary>
        <value>
          <see langword="true" /> if the control is rendered from right to left; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public virtual void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.Control.BackColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetBindings">
      <MemberSignature Language="C#" Value="public void ResetBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetBindings() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes a control bound to the <see cref="T:System.Windows.Forms.BindingSource" /> to reread all the items in the list and refresh their displayed values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetCursor">
      <MemberSignature Language="C#" Value="public virtual void ResetCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetCursor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.Control.Cursor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetFont">
      <MemberSignature Language="C#" Value="public virtual void ResetFont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetFont() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.Control.Font%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public virtual void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetForeColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetImeMode">
      <MemberSignature Language="C#" Value="public void ResetImeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetImeMode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetMouseEventArgs">
      <MemberSignature Language="C#" Value="protected void ResetMouseEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ResetMouseEventArgs() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the control to handle the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetRightToLeft">
      <MemberSignature Language="C#" Value="public virtual void ResetRightToLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetRightToLeft() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetText">
      <MemberSignature Language="C#" Value="public virtual void ResetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.Control.Text%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.Control> or creating your own control incorporating the <xref:System.Windows.Forms.Control>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event EventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Resize" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is resized.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To determine the <xref:System.Windows.Forms.Control.Size%2A> of the resized control, you can cast the `sender` parameter of the registered <xref:System.Windows.Forms.ControlEventHandler> method  to a <xref:System.Windows.Forms.Control> and get its <xref:System.Windows.Forms.Control.Size%2A> property (or <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> properties individually).  
  
 To handle custom layouts, use the <xref:System.Windows.Forms.Control.Layout> event instead of the Resize event. The <xref:System.Windows.Forms.Control.Layout> event is raised in response to a Resize event, but also in response to other changes that affect the layout of the control.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example handles the Resize event of a <xref:System.Windows.Forms.Form>. When the form is resized, the event handler ensures that the form stays square (its <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> remain equal). To run this example, make sure and associate this event-handling method with the form’s Resize event.  
  
 [!code-vb[WinForms.Control.Resize#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_12_1.vb)]
 [!code-cpp[WinForms.Control.Resize#1](~/add/codesnippet/cpp/e-system.windows.forms.c_12_1.cpp)]
 [!code-cs[WinForms.Control.Resize#1](~/add/codesnippet/csharp/e-system.windows.forms.c_12_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResizeRedraw">
      <MemberSignature Language="C#" Value="protected bool ResizeRedraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResizeRedraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control redraws itself when resized.</summary>
        <value>
          <see langword="true" /> if the control redraws itself when resized; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ResizeRedraw property value is equivalent to the return value of the <xref:System.Windows.Forms.Control.GetStyle%2A> method when passing in the <xref:System.Windows.Forms.ControlStyles?displayProperty=fullName> value as a parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resumes usual layout logic.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the ResumeLayout method forces an immediate layout if there are any pending layout requests.  
  
 The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and ResumeLayout methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control. For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the ResumeLayout method to enable the changes to take effect.  
  
 There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for ResumeLayout to be successfully called.  
  
   
  
## Examples  
 The following code example adds two buttons to a form. The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and ResumeLayout methods.  
  
 [!code-cs[Windows.Forms.Control Members2#2](~/add/codesnippet/csharp/m-system.windows.forms.c_34_1.cs)]
 [!code-cpp[Windows.Forms.Control Members2#2](~/add/codesnippet/cpp/m-system.windows.forms.c_34_1.cpp)]
 [!code-vb[Windows.Forms.Control Members2#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_34_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout (bool performLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout(bool performLayout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="performLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="performLayout">
          <see langword="true" /> to execute pending layout requests; otherwise, <see langword="false" />.</param>
        <summary>Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests. When the `performLayout` parameter is set to `true`, an immediate layout occurs if there are any pending layout requests.  
  
 The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control. For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.  
  
 There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.  
  
> [!NOTE]
>  When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added. After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method. This will increase the performance of applications with many controls.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public int Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</summary>
        <value>An &lt;xref:System.Int32&gt; representing the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the Right property is equal to the sum of the <xref:System.Windows.Forms.Control.Left%2A> property value and the <xref:System.Windows.Forms.Control.Width%2A> property value.  
  
 The Right property is read-only. You can change this property value indirectly by changing the value of the <xref:System.Windows.Forms.Control.Left%2A> or <xref:System.Windows.Forms.Control.Width%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.  
  
   
  
## Examples  
 The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  
  
 [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_70_1.cs)]
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_70_1.cpp)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_70_1.vb)]  
  
 [!code-cpp[Control.KeyUp#1](~/add/codesnippet/cpp/p-system.windows.forms.c_70_2.cpp)]
 [!code-vb[Control.KeyUp#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_70_2.vb)]
 [!code-cs[Control.KeyUp#1](~/add/codesnippet/csharp/p-system.windows.forms.c_70_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.RightToLeft" /> values. The default is <see cref="T:System.Windows.Forms.RightToLeft" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RightToLeft property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.  
  
 The RightToLeft property is used for international applications where the language is written from right to left, such as Hebrew or Arabic. When this property is set to <xref:System.Windows.Forms.RightToLeft?displayProperty=fullName>, control elements that include text are displayed from right to left.  
  
> [!NOTE]
>  If the value of the RightToLeft property is changed at run time, only raw text without formatting is preserved.  
  
 The following are a few examples of how control elements are affected by the RightToLeft property value of <xref:System.Windows.Forms.RightToLeft?displayProperty=fullName> :  
  
-   Vertical scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.Panel>, multiline <xref:System.Windows.Forms.TextBox>, and <xref:System.Windows.Forms.RichTextBox>).  
  
-   Horizontal scroll bars start with the scroll box (thumb) right-aligned.  
  
-   The check box element alignment, controlled by the `CheckAlign` property, is reversed for <xref:System.Windows.Forms.CheckBox> and <xref:System.Windows.Forms.RadioButton> controls.  
  
-   Items in list box, combo box, and up-down controls are right aligned.  
  
-   Up and down buttons are left-aligned on <xref:System.Windows.Forms.NumericUpDown> and <xref:System.Windows.Forms.DomainUpDown> controls.  
  
-   Menus (<xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.MenuItem>, and <xref:System.Windows.Forms.ContextMenu>) are displayed right-aligned.  
  
-   The alignment of toolbar buttons on a <xref:System.Windows.Forms.ToolBar> control or the alignment of text on a <xref:System.Windows.Forms.ToolBarButton> is not affected by the RightToLeft property.  
  
-   <xref:System.Windows.Forms.AxHost> supports right-to-left alignment; however, the effect on an ActiveX control depends on the extent to which the control author implemented support for right-to-left display.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The assigned value is not one of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RightToLeftChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  
  
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_63_1.vb)]
 [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_63_1.cs)]
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_63_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Drawing.ContentAlignment RtlTranslateAlignment (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateAlignment(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</param>
        <summary>Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</summary>
        <returns>One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</param>
        <summary>Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</summary>
        <returns>One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</param>
        <summary>Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</summary>
        <returns>One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateContent">
      <MemberSignature Language="C#" Value="protected System.Drawing.ContentAlignment RtlTranslateContent (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateContent(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</param>
        <summary>Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</summary>
        <returns>One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateHorizontal">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</param>
        <summary>Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</summary>
        <returns>One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateLeftRight">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</param>
        <summary>Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</summary>
        <returns>One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (System.Drawing.SizeF factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(valuetype System.Drawing.SizeF factor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="factor">A <see cref="T:System.Drawing.SizeF" /> containing the horizontal and vertical scaling factors.</param>
        <summary>Scales the control and all child controls by the specified scaling factor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Scale method scales the control by the specified scaling `factor`. It also recursively scales all child controls if the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`. Internally, this method calls <xref:System.Windows.Forms.Control.ScaleControl%2A> to scale each control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float ratio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 ratio) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ratio" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="ratio">The ratio to use for scaling.</param>
        <summary>Scales the control and any child controls.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 dx, float32 dy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">The horizontal scaling factor.</param>
        <param name="dy">The vertical scaling factor.</param>
        <summary>Scales the entire control and any child controls.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScaleChildren">
      <MemberSignature Language="C#" Value="protected virtual bool ScaleChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScaleChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that determines the scaling of child controls.</summary>
        <value>
          <see langword="true" /> if child controls will be scaled when the &lt;xref:System.Windows.Forms.Control.Scale%2A&gt; method on this control is called; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the ScaleChildren property is `true`, then the <xref:System.Windows.Forms.Control.Scale%2A> method will recursively call the <xref:System.Windows.Forms.Control.ScaleControl%2A> method of each of its child controls.  
  
 The default implementation of ScaleChildren always returns `true`. Derived classes can override ScaleChildren to return `false` to indicate that scaling should not be performed on their children.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected virtual void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor">The factor by which the height and width of the control will be scaled.</param>
        <param name="specified">A <see cref="T:System.Windows.Forms.BoundsSpecified" /> value that specifies the bounds of the control to use when defining its size and position.</param>
        <summary>Scales a control's location, size, padding and margin.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the control is top level, this will not scale the control's location. This does not scale children or the size of automatically sized controls. You can omit scaling in any direction by changing the value of the `specified` parameter.  
  
   
  
## Examples  
 <xref:System.Windows.Forms.BoundsSpecified>  
  
 <xref:System.Windows.Forms.Control.Scale%2A>  
  
 <xref:System.Windows.Forms.Control.GetScaledBounds%2A>  
  
 <xref:System.Windows.Forms.Control.SetBoundsCore%2A>  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScaleCore">
      <MemberSignature Language="C#" Value="protected virtual void ScaleCore (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleCore(float32 dx, float32 dy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">The horizontal scaling factor.</param>
        <param name="dy">The vertical scaling factor.</param>
        <summary>This method is not relevant for this class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Activates the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Select method activates the control if the control's `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.  
  
 The Windows Forms controls in the following list are not selectable. Controls derived from controls in the list will also not be selectable.  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)  
  
   
  
## Examples  
 The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.  
  
 [!code-cpp[Windows.Forms.ControlMembers6#2](~/add/codesnippet/cpp/m-system.windows.forms.c_92_1.cpp)]
 [!code-cs[Windows.Forms.ControlMembers6#2](~/add/codesnippet/csharp/m-system.windows.forms.c_92_1.cs)]
 [!code-vb[Windows.Forms.ControlMembers6#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_92_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected virtual void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed">
          <see langword="true" /> to specify the direction of the control to select; otherwise, <see langword="false" />.</param>
        <param name="forward">
          <see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</param>
        <summary>Activates a child control. Optionally specifies the direction in the tab order to select the control from.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `directed` and `forward` parameters are used by container-style controls. When the `directed` parameter is set to `true`, the `forward` parameter is evaluated to determine which control to select. When `forward` is set to `true`, the next control in the tab order is selected; when `false`, the previous control in the tab order is selected.  
  
 The <xref:System.Windows.Forms.Control.Select%2A> method activates the control if the control's `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.  
  
 The Windows Forms controls in the following list are not selectable. Controls derived from controls in the list will also not be selectable.  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectNextControl">
      <MemberSignature Language="C#" Value="public bool SelectNextControl (System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SelectNextControl(class System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
        <Parameter Name="tabStopOnly" Type="System.Boolean" />
        <Parameter Name="nested" Type="System.Boolean" />
        <Parameter Name="wrap" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl">The <see cref="T:System.Windows.Forms.Control" /> at which to start the search.</param>
        <param name="forward">
          <see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</param>
        <param name="tabStopOnly">
          <see langword="true" /> to ignore the controls with the &lt;xref:System.Windows.Forms.Control.TabStop%2A&gt; property set to <see langword="false" />; otherwise, <see langword="false" />.</param>
        <param name="nested">
          <see langword="true" /> to include nested (children of child controls) child controls; otherwise, <see langword="false" />.</param>
        <param name="wrap">
          <see langword="true" /> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <see langword="false" />.</param>
        <summary>Activates the next control.</summary>
        <returns>
          <see langword="true" /> if a control was activated; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectNextControl method activates the next control in the tab order if the control's `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.  
  
 The Windows Forms controls in the following list are not selectable. Controls derived from controls in the list will also not be selectable.  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)  
  
 When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or SelectNextControl methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  
  
   
  
## Examples  
 The following code exampleshows theSelectNextControl method being used in a form that has some controls. Each time that you click the form, the next control is activated. The <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property gets the currently active control in the container control.  
  
 [!code-cs[System.Windows.Forms.Control.SelectNextControl#1](~/add/codesnippet/csharp/b0a604e4-0b0f-4d7f-842c-_1.cs)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#1](~/add/codesnippet/visualbasic/b0a604e4-0b0f-4d7f-842c-_1.vb)]  
  
 The following code example shows the SelectNextControl method being used in a form that has a <xref:System.Windows.Forms.Button> and some other controls. When you click the <xref:System.Windows.Forms.Button>, the next control after the <xref:System.Windows.Forms.Button> is activated. Notice that you have to get the parent of the <xref:System.Windows.Forms.Button> control. Since <xref:System.Windows.Forms.Button> is not a container, calling SelectNextControl directly on the <xref:System.Windows.Forms.Button> would not change the activation.  
  
 [!code-cs[System.Windows.Forms.Control.SelectNextControl#2](~/add/codesnippet/csharp/b0a604e4-0b0f-4d7f-842c-_2.cs)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#2](~/add/codesnippet/visualbasic/b0a604e4-0b0f-4d7f-842c-_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SendToBack">
      <MemberSignature Language="C#" Value="public void SendToBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendToBack() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sends the control to the back of the z-order.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The control is moved to the back of the z-order. If the control is a child of another control, the child control is moved to the back of the z-order. If the control is a top-level control, this method will not work correctly unless the control is active. A top-level control is a control, such as a <xref:System.Windows.Forms.Form>, that is not a child of another control. An active control is a visible control that has input focus. To use the SendToBack method with an inactive, top-level control, first call the <xref:System.Windows.Forms.Control.BringToFront%2A> method on the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected void SetAutoSizeMode (System.Windows.Forms.AutoSizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetAutoSizeMode(valuetype System.Windows.Forms.AutoSizeMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.AutoSizeMode" />
      </Parameters>
      <Docs>
        <param name="mode">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</param>
        <summary>Sets a value indicating how a control will behave when its &lt;xref:System.Windows.Forms.Control.AutoSize%2A&gt; property is enabled.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The new &lt;xref:System.Windows.Forms.Control.Left%2A&gt; property value of the control.</param>
        <param name="y">The new &lt;xref:System.Windows.Forms.Control.Top%2A&gt; property value of the control.</param>
        <param name="width">The new &lt;xref:System.Windows.Forms.Control.Width%2A&gt; property value of the control.</param>
        <param name="height">The new &lt;xref:System.Windows.Forms.Control.Height%2A&gt; property value of the control.</param>
        <summary>Sets the bounds of the control to the specified location and size.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">The new &lt;xref:System.Windows.Forms.Control.Left%2A&gt; property value of the control.</param>
        <param name="y">The new &lt;xref:System.Windows.Forms.Control.Top%2A&gt; property value of the control.</param>
        <param name="width">The new &lt;xref:System.Windows.Forms.Control.Width%2A&gt; property value of the control.</param>
        <param name="height">The new &lt;xref:System.Windows.Forms.Control.Height%2A&gt; property value of the control.</param>
        <param name="specified">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values. For any parameter not specified, the current value will be used.</param>
        <summary>Sets the specified bounds of the control to the specified location and size.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event. This will keep the form centered as the user resizes it. This example requires that you have created a <xref:System.Windows.Forms.Form> control.  
  
 [!code-cs[Control.Layout#1](~/add/codesnippet/csharp/f057e785-da4d-4281-b958-_1.cs)]
 [!code-vb[Control.Layout#1](~/add/codesnippet/visualbasic/f057e785-da4d-4281-b958-_1.vb)]
 [!code-cpp[Control.Layout#1](~/add/codesnippet/cpp/f057e785-da4d-4281-b958-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected virtual void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">The new &lt;xref:System.Windows.Forms.Control.Left%2A&gt; property value of the control.</param>
        <param name="y">The new &lt;xref:System.Windows.Forms.Control.Top%2A&gt; property value of the control.</param>
        <param name="width">The new &lt;xref:System.Windows.Forms.Control.Width%2A&gt; property value of the control.</param>
        <param name="height">The new &lt;xref:System.Windows.Forms.Control.Height%2A&gt; property value of the control.</param>
        <param name="specified">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</param>
        <summary>Performs the work of setting the specified bounds of this control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, the parameters that correspond to the bounds not included in the `specified` parameter are passed in with their current values. For example, the <xref:System.Windows.Forms.Control.Height%2A>, <xref:System.Windows.Forms.Control.Width%2A>, or the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Windows.Forms.Control.Location%2A> property can be passed in with a reference to the current instance of the control. However all values passed in are honored and applied to the control.  
  
 The `boundsSpecified` parameter represents the elements of the controls <xref:System.Windows.Forms.Control.Bounds%2A> changed by your application. For example, if you change the <xref:System.Windows.Forms.Control.Size%2A> of the control, the `boundsSpecified` parameter value is the `Size` value of <xref:System.Windows.Forms.BoundsSpecified>. However, if the <xref:System.Windows.Forms.Control.Size%2A> is adjusted in response to the <xref:System.Windows.Forms.Control.Dock%2A> property being set, the `boundsSpecified` parameter value is the `None` value of <xref:System.Windows.Forms.BoundsSpecified>.  
  
> [!NOTE]
>  On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.  
  
   
  
## Examples  
 The following code example overrides the SetBoundsCore method to ensure that the control remains a fixed size. This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.  
  
 [!code-cs[Windows.Forms.Control_Methods#1](~/add/codesnippet/csharp/603eafb5-3583-44bd-962b-_1.cs)]
 [!code-cpp[Windows.Forms.Control_Methods#1](~/add/codesnippet/cpp/603eafb5-3583-44bd-962b-_1.cpp)]
 [!code-vb[Windows.Forms.Control_Methods#1](~/add/codesnippet/visualbasic/603eafb5-3583-44bd-962b-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetClientSizeCore">
      <MemberSignature Language="C#" Value="protected virtual void SetClientSizeCore (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetClientSizeCore(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The client area width, in pixels.</param>
        <param name="y">The client area height, in pixels.</param>
        <summary>Sets the size of the client area of the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The client area starts at the (0, 0) location and extends to the (`x`, `y`) location.  
  
 Typically, you should not set the <xref:System.Windows.Forms.Control.ClientSize%2A> of the control.  
  
   
  
## Examples  
 The following code example overrides the SetClientSizeCore method to ensure that the control remains square. This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.  
  
 [!code-cs[Windows.Forms.Control_Methods#2](~/add/codesnippet/csharp/m-system.windows.forms.c_54_1.cs)]
 [!code-cpp[Windows.Forms.Control_Methods#2](~/add/codesnippet/cpp/m-system.windows.forms.c_54_1.cpp)]
 [!code-vb[Windows.Forms.Control_Methods#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_54_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetStyle">
      <MemberSignature Language="C#" Value="protected void SetStyle (System.Windows.Forms.ControlStyles flag, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetStyle(valuetype System.Windows.Forms.ControlStyles flag, bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flag">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to set.</param>
        <param name="value">
          <see langword="true" /> to apply the specified style to the control; otherwise, <see langword="false" />.</param>
        <summary>Sets a specified <see cref="T:System.Windows.Forms.ControlStyles" /> flag to either <see langword="true" /> or <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control style bit flags are used to categorize supported behavior. A control can enable a style by calling the SetStyle method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit (or bits) and the Boolean value to set the bit(s) to. To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.  
  
> [!CAUTION]
>  Setting the control style bits can substantially change the behavior of the control. Review the <xref:System.Windows.Forms.ControlStyles> enumeration documentation to understand the effects of changing the control style bits before calling the SetStyle method.  
  
   
  
## Examples  
 The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/add/codesnippet/cpp/2751760d-2ebd-4c65-9243-_1.cpp)]
 [!code-cs[Windows.Forms.ControlMembers6#3](~/add/codesnippet/csharp/2751760d-2ebd-4c65-9243-_1.cs)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/add/codesnippet/visualbasic/2751760d-2ebd-4c65-9243-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetTopLevel">
      <MemberSignature Language="C#" Value="protected void SetTopLevel (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetTopLevel(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see langword="true" /> to set the control as the top-level control; otherwise, <see langword="false" />.</param>
        <summary>Sets the control as the top-level control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you call the SetTopLevel method of a <xref:System.Windows.Forms.Form> and pass in a value of `false`, the form will not be visible until you call SetTopLevelagain, passing in a value of `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <paramref name="value" /> parameter is set to <see langword="true" /> and the control is an ActiveX control.</exception>
        <exception cref="T:System.Exception">The &lt;xref:System.Windows.Forms.Control.GetTopLevel%2A&gt; return value is not equal to the <paramref name="value" /> parameter and the &lt;xref:System.Windows.Forms.Control.Parent%2A&gt; property is not <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">to set the control as a top-level control if it is of any type other than <see cref="T:System.Windows.Forms.Form" />. This permission is only demanded if the <paramref name="value" /> parameter is <see langword="true" /> and the control is not an ActiveX control. Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetVisibleCore">
      <MemberSignature Language="C#" Value="protected virtual void SetVisibleCore (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetVisibleCore(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see langword="true" /> to make the control visible; otherwise, <see langword="false" />.</param>
        <summary>Sets the control to the specified visible state.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You would typically override this method to change the visibility behavior of the control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Displays the control to the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Showing the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `true`. After the Show method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `true` until the <xref:System.Windows.Forms.Control.Hide%2A> method is called.  
  
   
  
## Examples  
 The following code example displays an about dialog box and temporarily draws a blue square on its surface. This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `AboutDialog`.  
  
 [!code-cs[Windows.Forms.Control Members2#1](~/add/codesnippet/csharp/m-system.windows.forms.c_27_1.cs)]
 [!code-cpp[Windows.Forms.Control Members2#1](~/add/codesnippet/cpp/m-system.windows.forms.c_27_1.cpp)]
 [!code-vb[Windows.Forms.Control Members2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_27_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowFocusCues">
      <MemberSignature Language="C#" Value="protected virtual bool ShowFocusCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFocusCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the control should display focus rectangles.</summary>
        <value>
          <see langword="true" /> if the control should display focus rectangles; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about this feature, see the[WM_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx),[WM_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), and the [WM_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)topics.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowKeyboardCues">
      <MemberSignature Language="C#" Value="protected virtual bool ShowKeyboardCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowKeyboardCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators.</summary>
        <value>
          <see langword="true" /> if the keyboard accelerators are visible; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In controls created in the Windows Forms designer, keyboard accelerators are visible by default.  
  
 For more information about this feature, see the[WM_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx),[WM_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), and the [WM_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)topics.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the site of the control.</summary>
        <value>The <see cref="T:System.ComponentModel.ISite" /> associated with the <see cref="T:System.Windows.Forms.Control" />, if any.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height and width of the control.</summary>
        <value>The <see cref="T:System.Drawing.Size" /> that represents the height and width of the control in pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the <xref:System.Drawing.Size> class is a value type (`Structure` in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], `struct` in [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)]), it is returned by value, meaning accessing the property returns a copy of the size of the control. So, adjusting the <xref:System.Drawing.Size.Width%2A> or <xref:System.Drawing.Size.Height%2A> properties of the <xref:System.Drawing.Size> returned from this property will not affect the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control. To adjust the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control, you must set the control's <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> property, or set the Size property with a new <xref:System.Drawing.Size>.  
  
> [!NOTE]
>  To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.  
  
> [!NOTE]
>  On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.  
  
   
  
## Examples  
 The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the<xref:System.Drawing.Image>. The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  
  
 [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_76_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_76_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_76_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SizeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.Size%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 It is preferable to use the <xref:System.Windows.Forms.Control.Layout> event to handle custom layouts. The <xref:System.Windows.Forms.Control.Layout> event is raised in response to <xref:System.Windows.Forms.Control.Resize> events, but also in other conditions when layout might need to be applied.  
  
 This event is raised if the <xref:System.Windows.Forms.Control.Size%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the SizeChanged event. An instance of a <xref:System.Windows.Forms.Button> control has been provided that can be scaled both horizontally and vertically. A <xref:System.Windows.Forms.NumericUpDown> instance provides the horizontal and vertical scale value. The <xref:System.Windows.Forms.Button> instance named **OK** is used to set the scale values for the <xref:System.Windows.Forms.Button> control instance. Whenever the size of the control changes, the event handler associated with the SizeChanged event of the control is called. This event handler displays a message box indicating that the size of the control has changed.  
  
 [!code-cs[Control_Scale1#2](~/add/codesnippet/csharp/e-system.windows.forms.c_24_1.cs)]
 [!code-cpp[Control_Scale1#2](~/add/codesnippet/cpp/e-system.windows.forms.c_24_1.cpp)]
 [!code-vb[Control_Scale1#2](~/add/codesnippet/visualbasic/e-system.windows.forms.c_24_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SizeFromClientSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size SizeFromClientSize (System.Drawing.Size clientSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size SizeFromClientSize(valuetype System.Drawing.Size clientSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="clientSize">A <see cref="T:System.Drawing.Size" /> value representing the height and width of the control's client area.</param>
        <summary>Determines the size of the entire control from the height and width of its client area.</summary>
        <returns>A <see cref="T:System.Drawing.Size" /> value representing the height and width of the entire control.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control style changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The StyleChanged event occurs when <xref:System.Windows.Forms.ControlStyles> flags have been added or changed.  
  
 This event is raised if the control style is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the StyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the StyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#68](~/add/codesnippet/csharp/e-system.windows.forms.c_25_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#68](~/add/codesnippet/visualbasic/e-system.windows.forms.c_25_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuspendLayout">
      <MemberSignature Language="C#" Value="public void SuspendLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SuspendLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Temporarily suspends the layout logic for the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The layout logic of the control is suspended until the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method is called.  
  
 The SuspendLayout and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control. For example, you would typically call the SuspendLayout method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.  
  
 There must be no pending calls to SuspendLayout for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.  
  
> [!NOTE]
>  When adding several controls to a parent control, it is recommended that you call the SuspendLayout method before initializing the controls to be added. After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method. This will increase the performance of applications with many controls.  
  
   
  
## Examples  
 The following code example adds two buttons to a form. The example transactions the addition of the buttons by using the SuspendLayout and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.  
  
 [!code-cs[Windows.Forms.Control Members2#2](~/add/codesnippet/csharp/m-system.windows.forms.c_14_1.cs)]
 [!code-cpp[Windows.Forms.Control Members2#2](~/add/codesnippet/cpp/m-system.windows.forms.c_14_1.cpp)]
 [!code-vb[Windows.Forms.Control Members2#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragDrop">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragDrop (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragDrop(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragEnter">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragEnter (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragEnter(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragLeave">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragOver">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragOver (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragOver(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SystemColorsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SystemColorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SystemColorsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the system colors change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Drawing.SystemColors> is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the SystemColorsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the SystemColorsChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#69](~/add/codesnippet/csharp/e-system.windows.forms.c_57_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#69](~/add/codesnippet/visualbasic/e-system.windows.forms.c_57_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tab order of the control within its container.</summary>
        <value>The index value of the control within the set of controls within its container. The controls in the container are included in the tab order.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A tab index can consist of any valid integer greater than or equal to zero, lower numbers being earlier in the tab order. If more than one control on the same parent control has the same tab index, the z-order of the controls determines the order to cycle through the controls.  
  
 For a control to be included in the tab order, its <xref:System.Windows.Forms.Control.TabStop%2A> property must be set to `true`.  
  
   
  
## Examples  
 The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>. The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the TabIndex property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  
  
 [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_102_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_102_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_102_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TabIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.TabIndex%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the TabIndexChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the TabIndexChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#25](~/add/codesnippet/csharp/e-system.windows.forms.c_79_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#25](~/add/codesnippet/visualbasic/e-system.windows.forms.c_79_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-516)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</summary>
        <value>
          <see langword="true" /> if the user can give the focus to the control using the TAB key; otherwise, <see langword="false" />. The default is <see langword="true" />.  
  
 <block subset="none" type="note">  
 This property will always return <see langword="true" /> for an instance of the <see cref="T:System.Windows.Forms.Form" /> class.  
  
</block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the user presses the TAB key, the input focus is set to the next control in the tab order. Controls with the TabStop property value of `false` are not included in the collection of controls in the tab order. The tab order can be manipulated by setting the control's <xref:System.Windows.Forms.Control.TabIndex%2A> property value.  
  
   
  
## Examples  
 The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>. The example then sets the TabStop to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  
  
 [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_74_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_74_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_74_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TabStopChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabStopChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabStopChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.TabStop%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.TabStop%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the TabStopChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the TabStopChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#26](~/add/codesnippet/csharp/e-system.windows.forms.c_83_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#26](~/add/codesnippet/visualbasic/e-system.windows.forms.c_83_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object that contains data about the control.</summary>
        <value>An &lt;xref:System.Object&gt; that contains data about the control. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Any type derived from the <xref:System.Object> class can be assigned to this property. If the Tag property is set through the Windows Forms designer, only text can be assigned.  
  
 A common use for the Tag property is to store data that is closely associated with the control. For example, if you have a control that displays information about a customer, you might store a <xref:System.Data.DataSet> that contains the customer's order history in that control's Tag property so the data can be accessed quickly.  
  
   
  
## Examples  
 The following code example displays a form and stores a `Customer` in its Tag property. This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `CustomerForm` and that you have defined a `Customer`.  
  
 [!code-cs[Windows.Forms.Control Members2#3](~/add/codesnippet/csharp/p-system.windows.forms.c_59_1.cs)]
 [!code-cpp[Windows.Forms.Control Members2#3](~/add/codesnippet/cpp/p-system.windows.forms.c_59_1.cpp)]
 [!code-vb[Windows.Forms.Control Members2#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_59_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-517)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text associated with this control.</summary>
        <value>The text associated with this control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Text property of the control is used differently by each derived class. For example the Text property of a <xref:System.Windows.Forms.Form> is displayed in the title bar at the top of the form, is fairly small in character count, and usually displays the application or document name. However, the Text property of a <xref:System.Windows.Forms.RichTextBox> can be large and can include numerous nonvisual characters used to format the text. For example, the text displayed in a <xref:System.Windows.Forms.RichTextBox> can be formatted by adjusting the <xref:System.Drawing.Font> properties, or by the addition of spaces or tab characters to align the text.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties. The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box. Next, it sets the Text property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.  
  
 [!code-cs[Windows.Forms.Control Properties#2](~/add/codesnippet/csharp/p-system.windows.forms.c_89_1.cs)]
 [!code-cpp[Windows.Forms.Control Properties#2](~/add/codesnippet/cpp/p-system.windows.forms.c_89_1.cpp)]
 [!code-vb[Windows.Forms.Control Properties#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_89_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.Text%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.Text%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  
  
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_19_1.vb)]
 [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_19_1.cs)]
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_19_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container's client area.</summary>
        <value>An &lt;xref:System.Int32&gt; representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Top property value is equivalent to the <xref:System.Drawing.Point.Y%2A?displayProperty=fullName> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.  
  
 Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and Top property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.  
  
   
  
## Examples  
 The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  
  
 [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_77_1.cs)]
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_77_1.cpp)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_77_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TopLevelControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control TopLevelControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control TopLevelControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent control that is not parented by another Windows Forms control. Typically, this is the outermost <see cref="T:System.Windows.Forms.Form" /> that the control is contained in.</summary>
        <value>The <see cref="T:System.Windows.Forms.Control" /> that represents the top-level control that contains the current control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The top-level control is defined as the parent control that is not parented by another Windows Forms control. Typically, this is the outermost <xref:System.Windows.Forms.Form> that the control is contained in. For example, if the control is contained on an MDI child <xref:System.Windows.Forms.Form>, then the top-level control is the Multiple Document Interface (MDI) parent <xref:System.Windows.Forms.Form>. If the control is not parented on a <xref:System.Windows.Forms.Form>, this property will return `null`.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to get this property value. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Update() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the control to redraw the invalidated regions within its client area.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Executes any pending requests for painting.  
  
 There are two ways to repaint a form and its contents:  
  
-   You can use one of the overloads of the <xref:System.Windows.Forms.Control.Invalidate%2A> method with the Update method.  
  
-   You can call the <xref:System.Windows.Forms.Control.Refresh%2A> method, which forces the control to redraw itself and all its children. This is equivalent to setting the <xref:System.Windows.Forms.Control.Invalidate%2A> method to `true` and using it with Update.  
  
 The <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted or repainted. The Update method governs when the painting or repainting occurs. If you use the <xref:System.Windows.Forms.Control.Invalidate%2A> and Update methods together rather than calling <xref:System.Windows.Forms.Control.Refresh%2A>, what gets repainted depends on which overload of <xref:System.Windows.Forms.Control.Invalidate%2A> you use. The Update method just forces the control to be painted immediately, but the <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted when you call the Update method.  
  
 For more information, see the[WM_PAINT](http://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx)topic.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void UpdateBounds() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the bounds of the control with the current size and location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised. Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The &lt;xref:System.Drawing.Point.X%2A&gt; coordinate of the control.</param>
        <param name="y">The &lt;xref:System.Drawing.Point.Y%2A&gt; coordinate of the control.</param>
        <param name="width">The &lt;xref:System.Drawing.Size.Width%2A&gt; of the control.</param>
        <param name="height">The &lt;xref:System.Drawing.Size.Height%2A&gt; of the control.</param>
        <summary>Updates the bounds of the control with the specified size and location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the new <xref:System.Windows.Forms.Control.Size%2A> of the control if different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised. Likewise, is the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height, int32 clientWidth, int32 clientHeight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="clientWidth" Type="System.Int32" />
        <Parameter Name="clientHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The &lt;xref:System.Drawing.Point.X%2A&gt; coordinate of the control.</param>
        <param name="y">The &lt;xref:System.Drawing.Point.Y%2A&gt; coordinate of the control.</param>
        <param name="width">The &lt;xref:System.Drawing.Size.Width%2A&gt; of the control.</param>
        <param name="height">The &lt;xref:System.Drawing.Size.Height%2A&gt; of the control.</param>
        <param name="clientWidth">The client &lt;xref:System.Drawing.Size.Width%2A&gt; of the control.</param>
        <param name="clientHeight">The client &lt;xref:System.Drawing.Size.Height%2A&gt; of the control.</param>
        <summary>Updates the bounds of the control with the specified size, location, and client size.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised. Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateStyles">
      <MemberSignature Language="C#" Value="protected void UpdateStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateStyles() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces the assigned styles to be reapplied to the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method calls the <xref:System.Windows.Forms.Control.CreateParams%2A> method to get the styles to apply. The styles assigned to the <xref:System.Windows.Forms.CreateParams.Style%2A> and <xref:System.Windows.Forms.CreateParams.ExStyle%2A> properties of the <xref:System.Windows.Forms.CreateParams> assigned to the control's <xref:System.Windows.Forms.Control.CreateParams%2A> property are reapplied. The control is repainted to reflect the style changes if necessary.  
  
 The UpdateStyles method has no effect if the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property value is `false`.  
  
   
  
## Examples  
 The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/add/codesnippet/cpp/m-system.windows.forms.c_39_1.cpp)]
 [!code-cs[Windows.Forms.ControlMembers6#3](~/add/codesnippet/csharp/m-system.windows.forms.c_39_1.cs)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/add/codesnippet/visualbasic/m-system.windows.forms.c_39_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateZOrder">
      <MemberSignature Language="C#" Value="protected void UpdateZOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateZOrder() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the control in its parent's z-order.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UpdateZOrder method updates the position of the control in its parent control's z-order. For example, if this control is a newly created control that was added to a <xref:System.Windows.Forms.Control.ControlCollection>, the z-order is updated with the new control added to the back.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UseWaitCursor">
      <MemberSignature Language="C#" Value="public bool UseWaitCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseWaitCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.</summary>
        <value>
          <see langword="true" /> to use the wait cursor for the current control and all child controls; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use a wait cursor whenever you perform an operation that takes a noticeable amount of time.However, note that operations that block the UI thread will also block acursor change.Therefore, this property should only be used when performing time-consuming operations in another thread. To change the cursor globally and immediately, seethe <xref:System.Windows.Forms.Cursor.Current%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Validated">
      <MemberSignature Language="C#" Value="public event EventHandler Validated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Validated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is finished validating.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  Validated  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  Validated  
  
 If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and Validated events are suppressed.  
  
 If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.  
  
> [!CAUTION]
>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or Validated event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)topic, and the "Message Deadlocks" section of the [About Messages and Message Queues](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx) topic.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled. This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.  
  
 [!code-cs[Control.Validating#1](~/add/codesnippet/csharp/e-system.windows.forms.c_81_1.cs)]
 [!code-cpp[Control.Validating#1](~/add/codesnippet/cpp/e-system.windows.forms.c_81_1.cpp)]
 [!code-vb[Control.Validating#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_81_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Validating">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Validating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Validating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the control is validating.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A>or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  Validating  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  Validating  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the Validating and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  
  
 If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the Validating event delegate, all events that would usually occur after the Validating event are suppressed.  
  
> [!CAUTION]
>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, Validating, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section, and the "Message Deadlocks" section of the "About Messages and Message Queues" topic in the MSDN library at http://msdn.microsoft.com/library.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled. This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.  
  
 [!code-cs[Control.Validating#1](~/add/codesnippet/csharp/e-system.windows.forms.c_41_1.cs)]
 [!code-cpp[Control.Validating#1](~/add/codesnippet/cpp/e-system.windows.forms.c_41_1.cpp)]
 [!code-vb[Control.Validating#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_41_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control and all its child controls are displayed.</summary>
        <value>
          <see langword="true" /> if the control and all its child controls are displayed; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Note that even if `Visible` is set to `true`, the control might not be visible to the user if it is obscured behind other controls.  
  
   
  
## Examples  
 The following code example uses the derived classes <xref:System.Windows.Forms.VScrollBar> and <xref:System.Windows.Forms.HScrollBar> and sets their Visible property values, based on the size of an <xref:System.Drawing.Image> being displayed in a <xref:System.Windows.Forms.PictureBox> control. This example requires that a <xref:System.Windows.Forms.PictureBox> has been created on a form and that <xref:System.Windows.Forms.HScrollBar> and <xref:System.Windows.Forms.VScrollBar> controls have been created on the <xref:System.Windows.Forms.PictureBox>. This code should be called when the image is loaded into the picture box and by the <xref:System.Windows.Forms.Control.Resize> event of the form.  
  
 [!code-cpp[Classic Control.Visible Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_101_1.cpp)]
 [!code-vb[Classic Control.Visible Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_101_1.vb)]
 [!code-cs[Classic Control.Visible Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_101_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VisibleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler VisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler VisibleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.Control.Visible%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised if the <xref:System.Windows.Forms.Control.Visible%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example raises the VisibleChanged event when the <xref:System.Windows.Forms.Control.Visible%2A> property value of the <xref:System.Windows.Forms.Label> control has changed.  
  
 [!code-vb[Control_VisibleChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_58_1.vb)]
 [!code-cpp[Control_VisibleChanged#1](~/add/codesnippet/cpp/e-system.windows.forms.c_58_1.cpp)]
 [!code-cs[Control_VisibleChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.c_58_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the control.</summary>
        <value>The width of the control in pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Changes made to the Width and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.  
  
   
  
## Examples  
 The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  
  
 [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_100_1.cs)]
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_100_1.cpp)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_100_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WindowTarget">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IWindowTarget WindowTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IWindowTarget WindowTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IWindowTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is not relevant for this class.</summary>
        <value>The NativeWindow contained within the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is not relevant for this class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
        <summary>Processes Windows messages.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 All messages are sent to the WndProc method after getting filtered through the <xref:System.Windows.Forms.Control.PreProcessMessage%2A> method.  
  
 The WndProc method corresponds exactly to the Windows `WindowProc` function. For more information about processing Windows messages, see the [WindowProc function](http://go.microsoft.com/fwlink/?LinkId=181565).  
  
   
  
## Examples  
 The following code example demonstrates overriding the WndProc method to handle operating system messages identified in the <xref:System.Windows.Forms.Message> structure. The[WM_ACTIVATEAPP](http://msdn.microsoft.com/en-us/library/windows/desktop/ms632614\(v=vs.85\).aspx)operating system message is handled in this example to know when another application is becoming active. See the following topics to understand the available <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName>, <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=fullName> values. Actual constant values can be found in the Windows.h header file.  
  
 [!code-cs[System.Windows.Forms.Control.WndProc#1](~/add/codesnippet/csharp/m-system.windows.forms.c_79_1.cs)]
 [!code-vb[System.Windows.Forms.Control.WndProc#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_79_1.vb)]
 [!code-cpp[System.Windows.Forms.Control.WndProc#1](~/add/codesnippet/cpp/m-system.windows.forms.c_79_1.cpp)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>