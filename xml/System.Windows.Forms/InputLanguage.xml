<Type Name="InputLanguage" FullName="System.Windows.Forms.InputLanguage">
  <TypeSignature Language="C#" Value="public sealed class InputLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InputLanguage extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides methods and fields to manage the input language. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An input language is a culture/keyboard layout pair that determines how the physical keys on a keyboard map or plot to characters in a language. The input language is based on a Windows input locale identifier, such as that returned by the Platform SDK function, `GetKeyboardLayout`. The input locale identifier is also called a handle to a keyboard layout (HKL) value.  
  
 Use the `static` methods provided to find all installed mappings of the system and to change the input language for a thread or process. Call <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> to get the current input language. Call <xref:System.Windows.Forms.InputLanguage.DefaultInputLanguage%2A> for the default input language. Call <xref:System.Windows.Forms.InputLanguage.InstalledInputLanguages%2A> to get all the installed languages in this system. After you have a list of all the installed languages, use <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> to change the current input language to a different language.  
  
   
  
## Examples  
 The following code example gets a list of installed languages. The example requires that `textBox1` has been instantiated and that `textBox1.MultiLine` has been set to `true`.  
  
 [!code-cpp[Classic InputLanguage Example#1](~/add/codesnippet/cpp/t-system.windows.forms.i_2_1.cpp)]
 [!code-vb[Classic InputLanguage Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.i_2_1.vb)]
 [!code-cs[Classic InputLanguage Example#1](~/add/codesnippet/csharp/t-system.windows.forms.i_2_1.cs)]  
  
 The next example sets the default input language as the current input language. The example requires that `textBox1` has been instantiated and that `textBox1.MultiLine` has been set to `true`.  
  
 [!code-cpp[Classic InputLanguage Example#2](~/add/codesnippet/cpp/t-system.windows.forms.i_2_2.cpp)]
 [!code-vb[Classic InputLanguage Example#2](~/add/codesnippet/visualbasic/t-system.windows.forms.i_2_2.vb)]
 [!code-cs[Classic InputLanguage Example#2](~/add/codesnippet/csharp/t-system.windows.forms.i_2_2.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the culture of the current input language.</summary>
        <value>A &lt;xref:System.Globalization.CultureInfo&gt; that represents the culture of the current input language.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example gets the <xref:System.Windows.Forms.InputLanguage> for the current input language. A text box displays this input language and the name of the input language.  
  
 This code assumes that `textBox1` has been instantiated.  
  
 [!code-cpp[Classic InputLanguage.Culture Example#1](~/add/codesnippet/cpp/p-system.windows.forms.i_11_1.cpp)]
 [!code-cs[Classic InputLanguage.Culture Example#1](~/add/codesnippet/csharp/p-system.windows.forms.i_11_1.cs)]
 [!code-vb[Classic InputLanguage.Culture Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.i_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage CurrentInputLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage CurrentInputLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the input language for the current thread.</summary>
        <value>An <see cref="T:System.Windows.Forms.InputLanguage" /> that represents the input language for the current thread.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example gets and displays the name of the current input language. This code assumes that `textBox1` has been instantiated.  
  
 [!code-cpp[Classic InputLanguage.CurrentInputLanguage Example#1](~/add/codesnippet/cpp/p-system.windows.forms.i_10_1.cpp)]
 [!code-cs[Classic InputLanguage.CurrentInputLanguage Example#1](~/add/codesnippet/csharp/p-system.windows.forms.i_10_1.cs)]
 [!code-vb[Classic InputLanguage.CurrentInputLanguage Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.i_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The input language is not recognized by the system.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage DefaultInputLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage DefaultInputLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default input language for the system.</summary>
        <value>An <see cref="T:System.Windows.Forms.InputLanguage" /> representing the default input language for the system.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example gets the default input language and prints its name in a text box. This code assumes that `textBox1` has been instantiated.  
  
 [!code-cpp[Classic InputLanguage.DefaultInputLanguage Example#1](~/add/codesnippet/cpp/p-system.windows.forms.i_19_1.cpp)]
 [!code-cs[Classic InputLanguage.DefaultInputLanguage Example#1](~/add/codesnippet/csharp/p-system.windows.forms.i_19_1.cs)]
 [!code-vb[Classic InputLanguage.DefaultInputLanguage Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.i_19_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The language to test for equality.</param>
        <summary>Specifies whether two input languages are equal.</summary>
        <returns>
          <see langword="true" /> if the two languages are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromCulture">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage FromCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.InputLanguage FromCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">The &lt;xref:System.Globalization.CultureInfo&gt; that specifies the culture to convert from.</param>
        <summary>Returns the input language associated with the specified culture.</summary>
        <returns>An <see cref="T:System.Windows.Forms.InputLanguage" /> that represents the previously selected input language.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FromCulture method selects from among installed keyboards. Specifically, this method performs the following operations:  
  
1.  Gets the LCID associated with `culture`.  
  
2.  Gets the full list of available input language identifiers (HKLs) from the `GetKeyboardLayoutList` function.  
  
3.  Finds the HKL that corresponds to the LCID from `culture`, if one is present.  
  
4.  Returns the installed keyboard associated with that HKL.  
  
5.  If no keyboard is found, returns `null`.  
  
> [!NOTE]
>  The FromCulture method never tries to load or install an additional keyboard if one has not already been installed for `culture`. Use the Platform SDK function, `LoadKeyboardLayout`, to install an additional keyboard.  
  
   
  
## Examples  
 The following code example sets the default input language as the current input language.  
  
 First, <xref:System.Windows.Forms.InputLanguage.DefaultInputLanguage%2A> is called to get the system default language. Next, <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> is called to get the current input language. The results are printed in a text box. Then, calling <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> with the default input language changes the current input language to the default. The new current input language is displayed in a text box.  
  
 This code assumes that `textBox1` has been instantiated.  
  
 [!code-cs[Classic InputLanguage.FromCulture Example#1](~/add/codesnippet/csharp/91c45c32-452b-417e-9efa-_1.cs)]
 [!code-cpp[Classic InputLanguage.FromCulture Example#1](~/add/codesnippet/cpp/91c45c32-452b-417e-9efa-_1.cpp)]
 [!code-vb[Classic InputLanguage.FromCulture Example#1](~/add/codesnippet/visualbasic/91c45c32-452b-417e-9efa-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this input language.</summary>
        <returns>The hash code for this input language.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the handle for the input language.</summary>
        <value>An &lt;xref:System.IntPtr&gt; that represents the handle of this input language.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example gets the current input language. Then it calls Handle to get the handle and prints the results in a text box. The example requires that `textBox1` has been instantiated.  
  
 [!code-vb[Classic InputLanguage.Handle Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.i_27_1.vb)]
 [!code-cpp[Classic InputLanguage.Handle Example#1](~/add/codesnippet/cpp/p-system.windows.forms.i_27_1.cpp)]
 [!code-cs[Classic InputLanguage.Handle Example#1](~/add/codesnippet/csharp/p-system.windows.forms.i_27_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstalledInputLanguages">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguageCollection InstalledInputLanguages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguageCollection InstalledInputLanguages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguageCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a list of all installed input languages.</summary>
        <value>An array of <see cref="T:System.Windows.Forms.InputLanguage" /> objects that represent the input languages installed on the computer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example retrieves all the input languages installed on the computer and displays their names. The code calls InstalledInputLanguages to get the installed languages. A text box displays the list of language names.  
  
 This code assumes that `textBox1` has been instantiated and that `textBox1.MultiLine` has been set to `true`.  
  
 [!code-vb[Classic InputLanguage.InstalledInputLanguages Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.i_25_1.vb)]
 [!code-cpp[Classic InputLanguage.InstalledInputLanguages Example#1](~/add/codesnippet/cpp/p-system.windows.forms.i_25_1.cpp)]
 [!code-cs[Classic InputLanguage.InstalledInputLanguages Example#1](~/add/codesnippet/csharp/p-system.windows.forms.i_25_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LayoutName">
      <MemberSignature Language="C#" Value="public string LayoutName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LayoutName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the current keyboard layout as it appears in the regional settings of the operating system on the computer.</summary>
        <value>The name of the layout.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example gets the culture associated with the current input language and displays the culture name.  
  
 First, <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> is called to get the current input language. Then, <xref:System.Windows.Forms.InputLanguage.Culture%2A> is called to get the culture information for this input language. Finally, <xref:System.Globalization.CultureInfo.EnglishName%2A> is retrieved and displayed in a text box.  
  
 [!code-cs[Classic InputLanguage.LayoutName Example#1](~/add/codesnippet/csharp/p-system.windows.forms.i_30_1.cs)]
 [!code-cpp[Classic InputLanguage.LayoutName Example#1](~/add/codesnippet/cpp/p-system.windows.forms.i_30_1.cpp)]
 [!code-vb[Classic InputLanguage.LayoutName Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.i_30_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>