<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the logical window that contains one or more instances of <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HtmlWindow should not be confused with the concept of a window in Windows Forms or the Win32 API; there is no `HWND` or similar Windows resource that corresponds directly to an instance of HtmlWindow. Rather, HtmlWindow provides high-level descriptions of a document's location on a user's screen, as well as methods for interacting with users by way of prompts and dialog boxes. HtmlWindow acts as a logical container for a Web page's documents and its metadata, such as the document's location and the capabilities of the Web browser.  
  
 A Web page consists of a single document, or a `FRAMESET` containing one or more `FRAME` elements, each of which hosts its own document. Web developers use framesets to show logically related pages side by side (for example, a content page next to a navigation page). When a page consists of a single document, you can access it through the <xref:System.Windows.Forms.HtmlWindow.Document%2A> property of HtmlWindow; if the page uses frames, you can access their documents through the <xref:System.Windows.Forms.HtmlWindow.Frames%2A> collection, which consists of one or more HtmlWindow objects.  
  
 When your host the <xref:System.Windows.Forms.WebBrowser> control in a Windows Forms application, you can choose to interact with the user using standard Windows Forms classes, such as <xref:System.Windows.Forms.Form> or <xref:System.Windows.Forms.MessageBox>, or you can use methods on HtmlWindow defined for this purpose. The <xref:System.Windows.Forms.HtmlWindow.Alert%2A> method presents a simple dialog box with custom text and an **OK** button; <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> presents a line of custom text and a text input field to the user; and <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> presents a dialog box with a line of custom text and **OK** and **Cancel** buttons.  
  
 You can use HtmlWindow to open new windows containing new documents. <xref:System.Windows.Forms.HtmlWindow.Open%2A> loads the specified URL into the named window, creating it if it does not already exist, while <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> always opens its URL in a newly created window.  
  
   
  
## Examples  
 The following code example contains two methods. The first opens a URL in a window named `displayWindow`, which it creates with a status bar displayed. The second opens another URL in the same window, but specifies that only the location bar should be displayed. Notice that the dimensions of the window and the controls that are displayed depends on which URL is opened first. The code example requires that your form contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#13)]
 [!code-cs[System.Windows.Forms.HtmlWindow#13](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#13)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The &lt;xref:System.String&gt; to display in the message box.</param>
        <summary>Displays a message box.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.MessageBox> class offers a more powerful version of the Alert method.  
  
 Although Alert accepts Unicode text as input, the Internet Explorer script prompt will not display non-Latin language text appropriately on Windows 95, Windows 98, Windows ME or Windows NT due to operating system limitations. For more information, see [INFO: Internet Explorer Script Prompts and MBCS/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">The name of the event you want to handle.</param>
        <param name="eventHandler">A reference to the managed code that handles the event.</param>
        <summary>Adds an event handler for the named HTML DOM event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You should not attach an event to an HTML document or one of its objects until the document has completed loading. The earliest you should call this method is in the <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> event of the <xref:System.Windows.Forms.WebBrowser> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the window.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> property to determine if the window is already closed. If the window is already closed, this method will have no effect.  
  
 When you create new windows using <xref:System.Windows.Forms.HtmlWindow.Open%2A> or <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, Close causes the HTML Document Object Model to open a new instance of Internet Explorer. If you do not call Close on all of the windows you have created, this instance of Internet Explorer will remain running even after your application closes.  
  
   
  
## Examples  
 The following code example opens a window, and closes it if the user has not used it in the past five minutes. The code example was written under the assumption that your form has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, a <xref:System.Windows.Forms.Button> named `Button1`, and a <xref:System.Windows.Forms.Timer> class named `Timer1`. To run this example successfully, change the first argument supplied to <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> to a valid URL.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#9)]
 [!code-cs[System.Windows.Forms.HtmlWindow#9](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#9)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The text to display to the user.</param>
        <summary>Displays a dialog box with a message and buttons to solicit a yes/no response.</summary>
        <returns>
          <see langword="true" /> if the user clicked **Yes**; <see langword="false" /> if the user clicked **No** or closed the dialog box.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Confirm displays a modal dialog box; the user will not be able to access the underlying HTML page without first closing this dialog box.  
  
 Although Confirm accepts Unicode text as input, the Internet Explorer script prompt will not display non-Latin language text appropriately on Windows 95, Windows 98, Windows ME or Windows NT due to operating system limitations. For more information, see [INFO: Internet Explorer Script Prompts and MBCS/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
   
  
## Examples  
 Copy the following HTML and save it into a form called orderForm.htm:  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<FORM name="NewOrderForm">`  
  
 `Select Part Type:`  
  
 `<SELECT name="PartType">`  
  
 `<OPTION>AZ-3700`  
  
 `<OPTION>AZ-3701`  
  
 `<OPTION>AZ-3702`  
  
 `<SELECT><br>`  
  
 `Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2"><br>`  
  
 `Building/Desk:`  
  
 `<INPUT type="text" name="PartBuilding" size="2" maxsize="2"> /`  
  
 `<INPUT type="text" name="PartDesk" size="2" maxsize="2"><p>`  
  
 `<INPUT type="submit" value="Transmit Order">`  
  
 `</FORM>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 The following code example displays a Confirm dialog box when the user submits `NewOrderForm`.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#10)]
 [!code-cs[System.Windows.Forms.HtmlWindow#10](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#10)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">The name of the event you want to handle.</param>
        <param name="eventHandler">A reference to the managed code that handles the event.</param>
        <summary>Removes the named event handler.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the HTML document contained within the window.</summary>
        <value>A valid instance of <see cref="T:System.Windows.Forms.HtmlDocument" />, if a document is loaded. If this window contains a `FRAMESET`, or no document is currently loaded, it will return <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you will access the Document through the <xref:System.Windows.Forms.WebBrowser.Document%2A> property of the <xref:System.Windows.Forms.WebBrowser> control. Use this property when you need to access a document within a `FRAME` using the <xref:System.Windows.Forms.HtmlWindow.Frames%2A> collection.  
  
   
  
## Examples  
 The following code example inspects each document within a page containing frames and creates a table of all of the outgoing hyperlinks from each page for future inspection.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#2)]
 [!code-cs[System.Windows.Forms.HtmlWindow#2](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the unmanaged interface wrapped by this class.</summary>
        <value>An object that can be cast to an <see langword="IHTMLWindow2" />, <see langword="IHTMLWindow3" />, or <see langword="IHTMLWindow4 " />pointer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the underlying unmanaged interface pointers to the Document Object Model (DOM) to execute methods not exposed by <xref:System.Windows.Forms.HtmlWindow>.  
  
 You must add a referenced to the unmanaged MSHTML.dll in order to use DomWindow. For more information, see [Importing a Type Library as an Assembly](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example obtains an `IHTMLWindow2` pointer from a document's window and displays a new document in a modal window.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#3)]
 [!code-cs[System.Windows.Forms.HtmlWindow#3](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to test.</param>
        <summary>Tests the object for equality against the current object.</summary>
        <returns>
          <see langword="true" /> if the objects are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when script running inside of the window encounters a run-time error.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML pages can contain script code, usually written in JScript or VBScript, that executes when a page is loaded. Error occurs whenever a script encounters a run-time error. Because script code is late-bound, which means that calls against the object are not resolved until run-time, errors can include everything from referencing a null object to calling an undefined property or method.  
  
 You can set the <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> property of <xref:System.Windows.Forms.HtmlElementErrorEventArgs> to true in order to prevent the native error dialog box in Internet Explorer from displaying.  
  
 For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx).  
  
   
  
## Examples  
 The following code example traps the error that results when a script on an HTML page attempts to access an object that is not defined in the document. The page must be fully loaded before the Error event handler is attached, otherwise the example will not work.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#16)]
 [!code-cs[System.Windows.Forms.HtmlWindow#16](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#16)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Puts the focus on the current window.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If another window held the focus before Focus was called, that window will lose the focus.  
  
 Do not call focus on an element inside of a window until the window's <xref:System.Windows.Forms.HtmlWindow.Load> event has been raised.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to each of the `FRAME` elements defined within the Web page.</summary>
        <value>An <see cref="T:System.Windows.Forms.HtmlWindowCollection" /> of a document's `FRAME` and `IFRAME` objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `FRAME` is a set of windows defined within a `FRAMESET`. `FRAME`s enable hosting multiple documents within a single document. Each `FRAME` is defined as possessing a certain row and column width, and is position on the page in relation to the other `FRAME`s defined within the `FRAMESET`; the position of a `FRAME` is fixed, although a user may sometimes use the mouse cursor to grow or shrink the `FRAME`. An `IFRAME` is similar to a frame, but it need not be anchored in a fixed position.  
  
 Frames will contain one instance of <xref:System.Windows.Forms.HtmlWindow> for each `FRAME` or `IFRAME` defined within a Web page.  
  
   
  
## Examples  
 The following code example inspects each document within a page containing frames and creates a table of all of the outgoing hyperlinks from each page for future inspection.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#2)]
 [!code-cs[System.Windows.Forms.HtmlWindow#2](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for a particular type.</summary>
        <returns>A hash code for the current <see cref="T:System.Windows.Forms.HtmlWindow" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the current window obtains user input focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GotFocus will occur for:  
  
-   The first window in a `FRAMESET` when the `FRAMESET` first loads.  
  
-   The `FRAME` that last had focus when the window containing the <xref:System.Windows.Forms.WebBrowser> control is brought to the foreground.  
  
-   A `FRAME` clicked by the user, but only if the user's click does not put focus on an element within the window.  
  
 You cannot cancel the default action for the GotFocus event, or prevent it from bubbling. For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the GotFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlWindow> named `HtmlWindow1`. Then ensure that the event handler is associated with the GotFocus event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#452](~/add/codesnippet/csharp/e-system.windows.forms.h_19_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/add/codesnippet/visualbasic/e-system.windows.forms.h_19_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object containing the user's most recently visited URLs.</summary>
        <value>The <see cref="T:System.Windows.Forms.HtmlHistory" /> for the current window.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 History contains all URLs navigated to within the current window, which is referred to as the *navigation stack*, and provides methods for navigating back to those documents.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this window is open or closed.</summary>
        <value>
          <see langword="true" /> if the window is still open on the screen; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.HtmlWindow> has been closed by the user or by way of a call to the <xref:System.Windows.Forms.HtmlWindow.Close%2A> method, attempting to navigate to a new URL or access the window's document will result in an error. Use this property to determine whether it is safe to call properties and methods on the current window object.  
  
   
  
## Examples  
 The following code example opens a window, and closes it if the user has not used it in the past five minutes. The code example requires that your form has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, a <xref:System.Windows.Forms.Button> named `Button1`, and a <xref:System.Windows.Forms.Timer> class named `Timer1`.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#8)]
 [!code-cs[System.Windows.Forms.HtmlWindow#8](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#8)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the window's document and all of its elements have finished initializing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Load event works similarly to the <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> event on the <xref:System.Windows.Forms.WebBrowser> control: it signals that it is safe to access HTML elements inside of the document.  
  
 You cannot cancel the default action for the Load event.  
  
 For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Load event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlWindow> named `HtmlWindow1`. Then ensure that the event handler is associated with the Load event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#453](~/add/codesnippet/csharp/e-system.windows.forms.h_34_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/add/codesnippet/visualbasic/e-system.windows.forms.h_34_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when user input focus has left the window.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LostFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlWindow> named `HtmlWindow1`. Then ensure that the event handler is associated with the LostFocus event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#454](~/add/codesnippet/csharp/e-system.windows.forms.h_30_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/add/codesnippet/visualbasic/e-system.windows.forms.h_30_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">The x- and y-coordinates of the window's upper-left corner.</param>
        <summary>Moves the window to the specified coordinates on the screen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot use MoveTo to move a window off of the visible edge of the screen; this method is also available through script on a Web page, and allowing untrusted script to render windows invisible is not considered secure.  
  
 MoveTo will raise an <xref:System.UnauthorizedAccessException> if the window you are trying to move and its parent window have different top-level domains. For example, if you are hosting the <xref:System.Windows.Forms.WebBrowser> control pointing to a.adatum.com, create a new window using <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> to display b.adatum.com. In this case, both windows are considered to be part of the same top-level domain, and the exception is not thrown. However, if you call <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> to display www,microsoft.com, the two windows now have different top-level domains, and the <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> operation will cause the exception to throw.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">The code trying to execute this operation does not have permission to manipulate this window. See the Remarks section for details.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate of the window's upper-left corner.</param>
        <param name="y">The y-coordinate of the window's upper-left corner.</param>
        <summary>Moves the window to the specified coordinates on the screen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot use <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> to move a window off of the visible edge of the screen; this method is also available through script on a Web page, and allowing untrusted script to render windows invisible is not considered secure.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> will raise an <xref:System.UnauthorizedAccessException> if the window you are trying to move and its parent window have different top-level domains. For example, if you are hosting the <xref:System.Windows.Forms.WebBrowser> control and it is pointing to a.adatum.com, you create a new window using <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> to display b.adatum.com. In this case, both windows are considered to be part of the same top-level domain, and the exception is not thrown. However, if you call <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> to display www,microsoft.com, the two windows now have different top-level domains, and the MoveTo operation will cause the exception to throw.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">The code trying to execute this operation does not have permission to manipulate this window. See the Remarks section for details.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the window.</summary>
        <value>A &lt;xref:System.String&gt; representing the name.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">The resource to display, described by a Uniform Resource Locator.</param>
        <summary>Displays or downloads the new content located at the specified URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `url` parameter points to an HTML page, the page currently displayed in the window will be destroyed and replaced with the new page; any references your application holds to managed DOM objects in the old page will not be valid. If `url` points to a resource that cannot be displayed by Internet Explorer, the user will be presented with a dialog box asking whether to open the resource outside of the application, save it to disk, or cancel the download operation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">The location, specified as a &lt;xref:System.Uri&gt;, of the document or object to display in the current window.</param>
        <summary>Displays a new document in the current window.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">The first <see cref="T:System.Windows.Forms.HtmlWindow" /> object.</param>
        <param name="right">The second <see cref="T:System.Windows.Forms.HtmlWindow" /> object.</param>
        <summary>Tests the two <see cref="T:System.Windows.Forms.HtmlWindow" /> objects for equality.</summary>
        <returns>
          <see langword="true" /> if both parameters are <see langword="null" />, or if both elements have the same underlying COM interface; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The equality operator tests the `IUnknown` pointers of the underlying COM objects wrapped by the supplied <xref:System.Windows.Forms.HtmlWindow> classes.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">The first <see cref="T:System.Windows.Forms.HtmlWindow" /> object.</param>
        <param name="right">The second <see cref="T:System.Windows.Forms.HtmlWindow" /> object.</param>
        <summary>Tests two <see langword="HtmlWindow" /> objects for inequality.</summary>
        <returns>
          <see langword="true" /> if one but not both of the objects is <see langword="null" />, or the underlying COM pointers do not match; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">The Uniform Resource Locator that describes the location of the file to load.</param>
        <param name="target">The name of the window in which to open the resource. This may be a developer-supplied name, or one of the following special values:  
  
 `_blank`: Opens `url` in a new window. Works the same as a call to &lt;xref:System.Windows.Forms.HtmlWindow.OpenNew%2A&gt;.  
  
 `_media`: Opens `url` in the Media bar.  
  
 `_parent`: Opens `url` in the window that created the current window.  
  
 `_search`: Opens `url` in the Search bar.  
  
 `_self`: Opens `url` in the current window.  
  
 `_top`: If called against a window belonging to a `FRAME` element, opens `url` in the window hosting its `FRAMESET`. Otherwise, acts the same as `_self`.</param>
        <param name="windowOptions">A comma-delimited string consisting of zero or more of the following options in the form `name=value`. Except for the `left`, `top`, `height`, and `width` options, which take arbitrary integers, each option accepts `yes` or <see langword="1" />, and `no` or <see langword="0" />, as valid values.  
  
 `channelmode`: Used with the deprecated channels technology of Internet Explorer 4.0. Default is `no`.  
  
 `directories`: Whether the window should display directory navigation buttons. Default is `yes`.  
  
 `height`: The height of the window's client area, in pixels. The minimum is 100; attempts to open a window smaller than this will cause the window to open according to the Internet Explorer defaults.  
  
 `left`: The left (x-coordinate) position of the window, relative to the upper-left corner of the user's screen, in pixels. Must be a positive integer.  
  
 `location`: Whether to display the Address bar, which enables users to navigate the window to a new URL. Default is `yes`.  
  
 `menubar`: Whether to display menus on the new window. Default is `yes`.  
  
 `resizable`: Whether the window can be resized by the user. Default is `yes`.  
  
 `scrollbars`: Whether the window has horizontal and vertical scroll bars. Default is `yes`.  
  
 `status`: Whether the window has a status bar at the bottom. Default is `yes`.  
  
 `titlebar`: Whether the title of the current page is displayed. Setting this option to `no` has no effect within a managed application; the title bar will always appear.  
  
 `toolbar`: Whether toolbar buttons such as **Back**, **Forward**, and **Stop** are visible. Default is `yes`.  
  
 `top`: The top (y-coordinate) position of the window, relative to the upper-left corner of the user's screen, in pixels. Must be a positive integer.  
  
 `width`: The width of the window's client area, in pixels. The minimum is 100; attempts to open a window smaller than this will cause the window to open according to the Internet Explorer defaults.</param>
        <param name="replaceEntry">Whether `url` replaces the current window's URL in the navigation history. This will effect the operation of methods on the <see cref="T:System.Windows.Forms.HtmlHistory" /> class.</param>
        <summary>Displays a file in the named window.</summary>
        <returns>An <see cref="T:System.Windows.Forms.HtmlWindow" /> representing the new window, or the previously created window named by the <paramref name="target" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `target` parameter can name a window that was created as the result of a previous call to Open. The parameter may also point to a window opened by clicking on a hyperlink (`A` element) or a `FORM` element that uses the `TARGET` attribute to open its URL in a new window. The following HTML code will open a new window named `orderWindow` when the user clicks it:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 If you supply any options for the `windowOptions` parameter, any option not included is automatically disabled. In other words, if you only specify by way of `windowOptions` that you want a status bar, then the menu bar, toolbar, title, scroll bars, and so on will not be displayed unless you explicitly enable them by way of `windowOptions`.  
  
 If the file referenced by `url` is an HTML file, text file, or other file type that can be hosted inside of Internet Explorer, it will be displayed in the named window. If the file cannot be displayed inside of Internet Explorer, and the window named by target does not already exist, then the window will open only long enough for Internet Explorer to download the resource; it will close immediately afterwards.  
  
 When you create new windows using Open or <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, it causes the HTML Document Object Model to open a new instance of Internet Explorer. If you do not call <xref:System.Windows.Forms.HtmlWindow.Close%2A> on all of the windows you have created, this instance of Internet Explorer will remain running even after your application has quit.  
  
 If you use Open to load a URL in an existing window, `windowOptions` will be ignored; the window will retain the dimensions, appearance, and screen location first given it by the initial call to Open.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">The Uniform Resource Locator that describes the location of the file to load.</param>
        <param name="target">The name of the window in which to open the resource. This can be a developer-supplied name, or one of the following special values:  
  
 `_blank`: Opens `url` in a new window. Works the same as a call to &lt;xref:System.Windows.Forms.HtmlWindow.OpenNew%2A&gt;.  
  
 `_media`: Opens `url` in the Media bar.  
  
 `_parent`: Opens `url` in the window that created the current window.  
  
 `_search`: Opens `url` in the Search bar.  
  
 `_self`: Opens `url` in the current window.  
  
 `_top`: If called against a window belonging to a `FRAME` element, opens `url` in the window hosting its `FRAMESET`. Otherwise, acts the same as `_self`.</param>
        <param name="windowOptions">A comma-delimited string consisting of zero or more of the following options in the form `name=value`. Except for the `left`, `top`, `height`, and `width` options, which take arbitrary integers, each option accepts `yes` or <see langword="1" />, and `no` or <see langword="0" />, as valid values.  
  
 `channelmode`: Used with the deprecated channels technology of Internet Explorer 4.0. Default is `no`.  
  
 `directories`: Whether the window should display directory navigation buttons. Default is `yes`.  
  
 `height`: The height of the window's client area, in pixels. The minimum is 100; attempts to open a window smaller than this will cause the window to open according to The Internet Explorer defaults.  
  
 `left`: The left (x-coordinate) position of the window, relative to the upper-left corner of the user's screen, in pixels. Must be a positive integer.  
  
 `location`: Whether to display the Address bar, which enables users to navigate the window to a new URL. Default is `yes`.  
  
 `menubar`: Whether to display menus on the new window. Default is `yes`.  
  
 `resizable`: Whether the window can be resized by the user. Default is `yes`.  
  
 `scrollbars`: Whether the window has horizontal and vertical scroll bars. Default is `yes`.  
  
 `status`: Whether the window has a status bar at the bottom. Default is `yes`.  
  
 `titlebar`: Whether the title of the current page is displayed. Setting this option to `no` has no effect within a managed application; the title bar will always appear.  
  
 `toolbar`: Whether toolbar buttons such as **Back**, **Forward**, and **Stop** are visible. Default is `yes`.  
  
 `top`: The top (y-coordinate) position of the window, relative to the upper-left corner of the user's screen, in pixels. Must be a positive integer.  
  
 `width`: The width of the window's client area, in pixels. The minimum is 100; attempts to open a window smaller than this will cause the window to open according to The Internet Explorer defaults.</param>
        <param name="replaceEntry">Whether `url` replaces the current window's URL in the navigation history. This will effect the operation of methods on the <see cref="T:System.Windows.Forms.HtmlHistory" /> class.</param>
        <summary>Displays a file in the named window.</summary>
        <returns>An <see cref="T:System.Windows.Forms.HtmlWindow" /> representing the new window, or the previously created window named by the <paramref name="target" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `target` parameter can name a window that was created as the result of a previous call to Open. The parameter may also point to a window opened by clicking on a hyperlink (`A` element) or a `FORM` element that uses the `TARGET` attribute to open its URL in a new window. The following HTML code will open a new window named `orderWindow` when the user clicks it:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 If you supply any options for the `windowOptions` parameter, any option not included is automatically disabled. In other words, if you only specify by way of `windowOptions` that you want a status bar, then the menu bar, toolbar, title, scroll bars, and so on will not be displayed unless you explicitly enable them by way of `windowOptions`.  
  
 If the file referenced by `url` is an HTML file, text file, or other file type that can be hosted inside of Internet Explorer, it will be displayed in the named window. If the file cannot be displayed inside of Internet Explorer, and the window named by target does not already exist, then the window will open only long enough for Internet Explorer to download the resource; it will close immediately afterwards.  
  
 When you create new windows using Open or <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, it causes the HTML Document Object Model to open a new instance of Internet Explorer. If you do not call <xref:System.Windows.Forms.HtmlWindow.Close%2A> on all of the windows you have created, this instance of Internet Explorer will remain running even after your application has quit.  
  
 If you use Open to load a URL in an existing window, `windowOptions` will be ignored; the window will retain the dimensions, appearance, and screen location first given it by the initial call to Open .  
  
   
  
## Examples  
 The following code example contains two methods:  
  
-   The first opens a URL in a window named `displayWindow`, which it creates with a status bar displayed.  
  
-   The second opens another URL in the same window, but specifies that only the location bar should be displayed.  
  
 Notice that the dimensions of the window and the controls that are displayed depends on which URL is opened first. The code example requires that your form contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#13)]
 [!code-cs[System.Windows.Forms.HtmlWindow#13](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#13)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the window that opened the current window.</summary>
        <value>The <see cref="T:System.Windows.Forms.HtmlWindow" /> that was created by a call to the &lt;xref:System.Windows.Forms.HtmlWindow.Open%2A&gt; or &lt;xref:System.Windows.Forms.HtmlWindow.OpenNew%2A&gt; methods. If the window was not created using one of these methods, this property returns <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">The Uniform Resource Locator that describes the location of the file to load.</param>
        <param name="windowOptions">A comma-delimited string consisting of zero or more of the following options in the form `name=value`. See &lt;xref:System.Windows.Forms.HtmlWindow.Open%2A&gt; for a full description of the valid options.</param>
        <summary>Displays a file in a new window.</summary>
        <returns>An <see cref="T:System.Windows.Forms.HtmlWindow" /> representing the new window.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the file referenced by `url` is an HTML file, text file, or other file type that can be hosted inside of Internet Explorer, it will be displayed in a new window. If the file cannot be displayed inside of Internet Explorer, then the window will open only long enough for Internet Explorer to download the resource; it will close immediately afterwards.  
  
 When you create new windows using <xref:System.Windows.Forms.HtmlWindow.Open%2A> or OpenNew, it causes the HTML Document Object Model to open a new instance of Internet Explorer. If you do not call <xref:System.Windows.Forms.HtmlWindow.Close%2A> on all of the windows you have created, this instance of Internet Explorer will remain running even after your application has quit.  
  
 If you want to load a document into a previously opened window, see the <xref:System.Windows.Forms.HtmlWindow.Open%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">The Uniform Resource Locator that describes the location of the file to load.</param>
        <param name="windowOptions">A comma-delimited string consisting of zero or more of the following options in the form `name=value`. See &lt;xref:System.Windows.Forms.HtmlWindow.Open%2A&gt; for a full description of the valid options.</param>
        <summary>Displays a file in a new window.</summary>
        <returns>An <see cref="T:System.Windows.Forms.HtmlWindow" /> representing the new window.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the file referenced by `url` is an HTML file, text file, or other file type that can be hosted inside of Internet Explorer, it will be displayed in a new window. If the file cannot be displayed inside of Internet Explorer, then the window will open only long enough for Internet Explorer to download the resource; it will close immediately afterwards.  
  
 When you create new windows using <xref:System.Windows.Forms.HtmlWindow.Open%2A> or OpenNew, it causes the HTML Document Object Model to open a new instance of Internet Explorer. If you do not call <xref:System.Windows.Forms.HtmlWindow.Close%2A> on all of the windows you have created, this instance of Internet Explorer will remain running even after your application has quit.  
  
 If you want to load a document into a previously opened window, see the <xref:System.Windows.Forms.HtmlWindow.Open%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the window which resides above the current one in a page containing frames.</summary>
        <value>The <see cref="T:System.Windows.Forms.HtmlWindow" /> that owns the current window. If the current window is not a `FRAME`, or is not embedded inside of a `FRAME`, it returns <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a document containing frames, each `FRAME` within a `FRAMESET` acts as a separate child window on the page. The parent of each `FRAME` is the `FRAMESET` which contains the `FRAME`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the position of the window's client area on the screen.</summary>
        <value>A <see cref="T:System.Drawing.Point" /> describing the x -and y-coordinates of the top-left corner of the screen, in pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Control.Location%2A> property of the <xref:System.Windows.Forms.WebBrowser> control will return the position of the control relative to the upper-left corner of the form. By contrast, Position will return the location of the document's display area relative to the top-left corner of the user's monitor.  
  
   
  
## Examples  
 The following code example opens a new window directly over the <xref:System.Windows.Forms.WebBrowser> control on the form. The code example requires that your form contains an instance of the <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#5)]
 [!code-cs[System.Windows.Forms.HtmlWindow#5](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to display to the user.</param>
        <param name="defaultInputValue">The default value displayed in the text box.</param>
        <summary>Shows a dialog box that displays a message and a text box to the user.</summary>
        <returns>A &lt;xref:System.String&gt; representing the text entered by the user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prompt provides a quick, easy way to obtain simple text input from the user.  
  
 Although Prompt accepts Unicode text as input, the Internet Explorer script prompt will not display non-Latin language text appropriately on Windows 95, Windows 98, Windows ME or Windows NT due to operating system limitations. For more information, see [INFO: Internet Explorer Script Prompts and MBCS/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Takes focus off of the current window.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When called on a `FRAME` window in a `FRAMESET`, RemoveFocus will cause that window to lose focus, but it will not automatically set focus on another window.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user uses the mouse to change the dimensions of the window.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Resize event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlWindow> named `HtmlWindow1`. Then ensure that the event handler is associated with the Resize event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#455](~/add/codesnippet/csharp/e-system.windows.forms.h_25_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/add/codesnippet/visualbasic/e-system.windows.forms.h_25_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">A <see cref="T:System.Drawing.Size" /> describing the desired width and height of the window, in pixels. Must be 100 pixels or more in both dimensions.</param>
        <summary>Changes the size of the window to the specified dimensions.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example opens a new window, and resizes it to fill the available screen area.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#15)]
 [!code-cs[System.Windows.Forms.HtmlWindow#15](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">The window you are trying to resize is in a different domain than its parent window. This restriction is part of cross-frame scripting security; for more information, see [About Cross-Frame Scripting and Security](http://msdn.microsoft.com/library/ms533028.aspx).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Describes the desired width of the window, in pixels. Must be 100 pixels or more.</param>
        <param name="height">Describes the desired height of the window, in pixels. Must be 100 pixels or more.</param>
        <summary>Changes the size of the window to the specified dimensions.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">The window you are trying to resize is in a different domain than its parent window. This restriction is part of cross-frame scripting security; for more information, see [About Cross-Frame Scripting and Security](http://msdn.microsoft.com/library/ms533028.aspx).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user scrolls through the window to view off-screen text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Scroll event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlWindow> named `HtmlWindow1`. Then ensure that the event handler is associated with the Scroll event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#456](~/add/codesnippet/csharp/e-system.windows.forms.h_8_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/add/codesnippet/visualbasic/e-system.windows.forms.h_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">The x- and y-coordinates, relative to the top-left corner of the current window, toward which the page should scroll.</param>
        <summary>Moves the window to the specified coordinates.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ScrollTo will cause the document to scroll so that the specified coordinate on the document is located in the upper-left corner of the document's window. If the document is not long or wide enough for this to happen, ScrollTo will scroll through the document as far as possible in the specified direction.  
  
   
  
## Examples  
 The following code example scrolls through the document to the coordinate position clicked by the user.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#15)]
 [!code-cs[System.Windows.Forms.HtmlWindow#15](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate, relative to the top-left corner of the current window, toward which the page should scroll.</param>
        <param name="y">The y-coordinate, relative to the top-left corner of the current window, toward which the page should scroll.</param>
        <summary>Scrolls the window to the designated position.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> will cause the document to scroll so that the specified coordinate on the document is located in the upper-left corner of the document's window. If the document is not long or wide enough for this to happen, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> will scroll through the document as far as possible in the specified direction.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size of the current window.</summary>
        <value>A <see cref="T:System.Drawing.Size" /> describing the size of the window in pixels.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text displayed in the status bar of a window.</summary>
        <value>A &lt;xref:System.String&gt; containing the current status text.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.WebBrowser> control does not display a status bar. Any new window that you open with the <xref:System.Windows.Forms.HtmlWindow.Open%2A> or <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> methods, however, will display a status bar by default.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the current page is unloading, and a new page is about to be displayed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Unload event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlWindow> named `HtmlWindow1`. Then ensure that the event handler is associated with the Unload event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#457](~/add/codesnippet/csharp/e-system.windows.forms.h_7_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/add/codesnippet/visualbasic/e-system.windows.forms.h_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the URL corresponding to the current item displayed in the window.</summary>
        <value>A &lt;xref:System.Uri&gt; describing the URL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is read-only. To navigate the window to a new document, use the <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the frame element corresponding to this window.</summary>
        <value>An <see cref="T:System.Windows.Forms.HtmlElement" /> corresponding to this window's `FRAME` element. If this window is not a frame, it returns <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you retrieve a `FRAME` element from the <xref:System.Windows.Forms.HtmlWindow.Frames%2A> collection, it returns an <xref:System.Windows.Forms.HtmlWindow>. Call WindowFrameElement on this object if you need to access attributes of the underlying `FRAME` element, such as the `SRC` attribute.  
  
   
  
## Examples  
 The following code example compares the `SRC` attribute of frames in a `FRAMESET` to the current location. If they are different, the frames are reset to their original URLs.  
  
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/add/codesnippet/visualbasic/HtmlWindowProject/Form1.vb#8)]
 [!code-cs[System.Windows.Forms.HtmlWindow#8](~/add/codesnippet/csharp/HtmlWindowProjectCSharp/Form1.cs#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">You cannot access a `FRAME` elements or the `FRAME`'s document if the `FRAME` is in a different zone than the `FRAMESET` that contains it. For a full explanation, see [About Cross-Frame Scripting and Security](http://msdn.microsoft.com/library/ms533028.aspx).</permission>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>