<Type Name="GridColumnStylesCollection" FullName="System.Windows.Forms.GridColumnStylesCollection">
  <TypeSignature Language="C#" Value="public class GridColumnStylesCollection : System.Windows.Forms.BaseCollection, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GridColumnStylesCollection extends System.Windows.Forms.BaseCollection implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.BaseCollection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> objects in the <see cref="T:System.Windows.Forms.DataGrid" /> control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 On the <xref:System.Windows.Forms.DataGridTableStyle>, you access the GridColumnStylesCollection through the <xref:System.Windows.Forms.DataGridTableStyle.GridColumnStyles%2A> property.  
  
 The GridColumnStylesCollection uses standard <xref:System.Windows.Forms.GridColumnStylesCollection.Add%2A> and <xref:System.Windows.Forms.GridColumnStylesCollection.Remove%2A> methods to manipulate the collection.  
  
 Use the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine if a specific property value exists in the collection. Additionally, use the <xref:System.Windows.Forms.GridColumnStylesCollection.IndexOf%2A> method to determine the index of any <xref:System.Windows.Forms.DataGridColumnStyle> object within the collection.  
  
> [!CAUTION]
>  Always create <xref:System.Windows.Forms.DataGridColumnStyle> objects and add them to the GridColumnStylesCollection before adding <xref:System.Windows.Forms.DataGridTableStyle> objects to the <xref:System.Windows.Forms.GridTableStylesCollection>. When you add an empty <xref:System.Windows.Forms.DataGridTableStyle> with a valid <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> value to the collection, <xref:System.Windows.Forms.DataGridColumnStyle> objects are automatically generated for you. Consequently, an exception will be thrown if you try to add new <xref:System.Windows.Forms.DataGridColumnStyle> objects with duplicate <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> values to the GridColumnStylesCollection.  
  
   
  
## Examples  
 The following code example prints information about each <xref:System.Windows.Forms.DataGridColumnStyle> in a GridColumnStylesCollection.  
  
 [!code-cs[Classic GridColumnStylesCollection Example#1](~/add/codesnippet/csharp/t-system.windows.forms.g_3_1.cs)]
 [!code-cpp[Classic GridColumnStylesCollection Example#1](~/add/codesnippet/cpp/t-system.windows.forms.g_3_1.cpp)]
 [!code-vb[Classic GridColumnStylesCollection Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.g_3_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.DataGridColumnStyle column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.DataGridColumnStyle column) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Windows.Forms.DataGridColumnStyle" />
      </Parameters>
      <Docs>
        <param name="column">The <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to add.</param>
        <summary>Adds a column style to the collection.</summary>
        <returns>The index of the new <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates several <xref:System.Windows.Forms.DataGridColumnStyle> objects and adds each to the <xref:System.Windows.Forms.GridColumnStylesCollection> of two <xref:System.Windows.Forms.DataGridTableStyle> objects.  
  
 [!code-cs[GridTableStylesCollectionExamples#1](~/add/codesnippet/csharp/82b509cc-fc81-49c3-89ae-_1.cs)]
 [!code-cpp[GridTableStylesCollectionExamples#1](~/add/codesnippet/cpp/82b509cc-fc81-49c3-89ae-_1.cpp)]
 [!code-vb[GridTableStylesCollectionExamples#1](~/add/codesnippet/visualbasic/82b509cc-fc81-49c3-89ae-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Windows.Forms.DataGridColumnStyle[] columns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Windows.Forms.DataGridColumnStyle[] columns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columns" Type="System.Windows.Forms.DataGridColumnStyle[]" />
      </Parameters>
      <Docs>
        <param name="columns">An array of <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> objects to add to the collection.</param>
        <summary>Adds an array of column style objects to the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates an array of <xref:System.Windows.Forms.DataGridColumnStyle> objects, and uses the AddRange method to add the array to the <xref:System.Windows.Forms.GridColumnStylesCollection>.  
  
 [!code-cs[Classic GridColumnStylesCollection.AddRange Example#1](~/add/codesnippet/csharp/5c4dfe6e-a27d-4a86-8339-_1.cs)]
 [!code-cpp[Classic GridColumnStylesCollection.AddRange Example#1](~/add/codesnippet/cpp/5c4dfe6e-a27d-4a86-8339-_1.cpp)]
 [!code-vb[Classic GridColumnStylesCollection.AddRange Example#1](~/add/codesnippet/visualbasic/5c4dfe6e-a27d-4a86-8339-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the collection of <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> objects.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cpp[GridColumnStylesCollection_Members#1](~/add/codesnippet/cpp/m-system.windows.forms.g_0_1.cpp)]
 [!code-cs[GridColumnStylesCollection_Members#1](~/add/codesnippet/csharp/m-system.windows.forms.g_0_1.cs)]
 [!code-vb[GridColumnStylesCollection_Members#1](~/add/codesnippet/visualbasic/m-system.windows.forms.g_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CollectionChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CollectionChangeEventHandler CollectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CollectionChangeEventHandler CollectionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CollectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a change is made to the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example adds a handler for the CollectionChanged event.  
  
 [!code-cs[Classic GridColumnStylesCollection.CollectionChanged Example#1](~/add/codesnippet/csharp/e-system.windows.forms.g_2_1.cs)]
 [!code-cpp[Classic GridColumnStylesCollection.CollectionChanged Example#1](~/add/codesnippet/cpp/e-system.windows.forms.g_2_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.ComponentModel.PropertyDescriptor propertyDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.ComponentModel.PropertyDescriptor propertyDescriptor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDescriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="propertyDescriptor">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> associated with the desired <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</param>
        <summary>Gets a value indicating whether the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" /> contains a <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> associated with the specified <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
        <returns>
          <see langword="true" /> if the collection contains the <see cref="T:System.Windows.Forms.DataGridColumnStyle" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To get a <xref:System.ComponentModel.PropertyDescriptorCollection>, use the <xref:System.Windows.Forms.BindingManagerBase.GetItemProperties%2A> method of the <xref:System.Windows.Forms.BindingManagerBase> class. Pass the <xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A> of the <xref:System.Windows.Forms.DataGridColumnStyle> to the <xref:System.ComponentModel.PropertyDescriptorCollection.Item%2A> property of the <xref:System.ComponentModel.PropertyDescriptorCollection> to return the <xref:System.ComponentModel.PropertyDescriptor> for a specific column.  
  
 Use the Contains method to determine if a particular <xref:System.Windows.Forms.DataGridColumnStyle> exists before invoking the <xref:System.Windows.Forms.GridColumnStylesCollection.Remove%2A> method to remove the item. If you need to know the index of a particular <xref:System.Windows.Forms.DataGridColumnStyle>, use the <xref:System.Windows.Forms.GridColumnStylesCollection.IndexOf%2A> method.  
  
   
  
## Examples  
 The following code example uses the Contains method to determine if a <xref:System.Windows.Forms.GridColumnStylesCollection> contains a <xref:System.Windows.Forms.DataGridColumnStyle> associated with a specified <xref:System.ComponentModel.PropertyDescriptor>.  
  
 [!code-vb[Classic GridColumnStylesCollection.Contains Example#1](~/add/codesnippet/visualbasic/c5a25c4f-7664-430e-85c9-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A&gt; of the desired <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</param>
        <summary>Gets a value indicating whether the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" /> contains the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> with the specified name.</summary>
        <returns>
          <see langword="true" /> if the collection contains the <see cref="T:System.Windows.Forms.DataGridColumnStyle" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The caption of a <xref:System.Windows.Forms.DataGridColumnStyle> is set with the <xref:System.Windows.Forms.DataGridColumnStyle.HeaderText%2A> property.  
  
 Use the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine if a particular <xref:System.Windows.Forms.DataGridColumnStyle> exists before invoking the <xref:System.Windows.Forms.GridColumnStylesCollection.Remove%2A> method to remove the item. If you need to know the index of a particular <xref:System.Windows.Forms.DataGridColumnStyle>, use the <xref:System.Windows.Forms.GridColumnStylesCollection.IndexOf%2A> method.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine if a <xref:System.Windows.Forms.DataGridColumnStyle> with a given <xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A> exists in the <xref:System.Windows.Forms.GridColumnStylesCollection>.  
  
 [!code-vb[Classic GridColumnStylesCollection.Contains2 Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.g_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.DataGridColumnStyle column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.DataGridColumnStyle column) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Windows.Forms.DataGridColumnStyle" />
      </Parameters>
      <Docs>
        <param name="column">The desired <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</param>
        <summary>Gets a value indicating whether the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" /> contains the specified <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</summary>
        <returns>
          <see langword="true" /> if the collection contains the <see cref="T:System.Windows.Forms.DataGridColumnStyle" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine if a particular <xref:System.Windows.Forms.DataGridColumnStyle> exists before invoking the <xref:System.Windows.Forms.GridColumnStylesCollection.Remove%2A> method to remove the item. If you need to know the index of a particular <xref:System.Windows.Forms.DataGridColumnStyle>, use the <xref:System.Windows.Forms.GridColumnStylesCollection.IndexOf%2A> method.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine if a <xref:System.Windows.Forms.GridColumnStylesCollection> contains a specific <xref:System.Windows.Forms.DataGridColumnStyle>.  
  
 [!code-vb[Classic GridColumnStylesCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/2f73832c-d51d-498a-b8a3-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.DataGridColumnStyle element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.DataGridColumnStyle element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.Forms.DataGridColumnStyle" />
      </Parameters>
      <Docs>
        <param name="element">The <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to find.</param>
        <summary>Gets the index of a specified <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</summary>
        <returns>The zero-based index of the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> within the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" /> or -1 if no corresponding <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> exists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine if a specific <xref:System.Windows.Forms.DataGridColumnStyle> exists. If so, and you need the index of the element within the collection, use the IndexOf method.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine if a given <xref:System.Windows.Forms.DataGridColumnStyle> exists in a <xref:System.Windows.Forms.GridColumnStylesCollection>. If so, the IndexOf method returns the index of the <xref:System.Windows.Forms.DataGridColumnStyle>, and the <xref:System.Windows.Forms.GridColumnStylesCollection.Remove%2A> method is invoked with the index to remove the element from the collection.  
  
 [!code-vb[Classic GridColumnStylesCollection.IndexOf Example#1](~/add/codesnippet/visualbasic/31eca3b2-8584-43a8-9b85-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridColumnStyle this[System.ComponentModel.PropertyDescriptor propertyDesciptor] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridColumnStyle Item(class System.ComponentModel.PropertyDescriptor)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridColumnStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDesciptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="propertyDesciptor">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> associated with the <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</param>
        <summary>Gets the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> associated with the specified <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> associated the specified <see cref="T:System.ComponentModel.PropertyDescriptor" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each <xref:System.Windows.Forms.DataGridColumnStyle> is created using a <xref:System.ComponentModel.PropertyDescriptor>. The <xref:System.ComponentModel.PropertyDescriptor> can be returned using the <xref:System.Windows.Forms.DataGridColumnStyle.PropertyDescriptor%2A> property.  
  
 To get the <xref:System.ComponentModel.PropertyDescriptorCollection> for a specific data source, use the <xref:System.Windows.Forms.BindingManagerBase.GetItemProperties%2A> method of the <xref:System.Windows.Forms.BindingManagerBase> class. Pass the <xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A> to the <xref:System.ComponentModel.PropertyDescriptorCollection.Item%2A> property of the <xref:System.ComponentModel.PropertyDescriptorCollection> to return a <xref:System.ComponentModel.PropertyDescriptor> for a specific column.  
  
   
  
## Examples  
 The following code example gets a <xref:System.Data.DataColumn> from a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>, and then passes it as an argument to the <xref:System.Windows.Forms.GridColumnStylesCollection.Add%2A> method.  
  
 [!code-vb[Classic GridColumnStylesCollection.this2 Example#1](~/add/codesnippet/visualbasic/141ca614-6c3b-4abb-aa20-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridColumnStyle this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridColumnStyle Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridColumnStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to return.</param>
        <summary>Gets the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> at a specified index.</summary>
        <value>The specified <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Forms.GridColumnStylesCollection.IndexOf%2A> method to determine the index of any element in the collection.  
  
   
  
## Examples  
 The following code example gets the <xref:System.Windows.Forms.DataGridColumnStyle> using the Item property.  
  
 [!code-vb[Classic GridColumnStylesCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.g_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridColumnStyle this[string columnName] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridColumnStyle Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridColumnStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">The &lt;xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A&gt; of the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to retrieve.</param>
        <summary>Gets the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> with the specified name.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> with the specified column header.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The column header of a <xref:System.Windows.Forms.DataGridColumnStyle> can be set explicitly by setting the <xref:System.Windows.Forms.DataGridColumnStyle.HeaderText%2A> property. By default, the <xref:System.Windows.Forms.DataGridColumnStyle.HeaderText%2A> is set using uses <xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A> property value.  
  
 The comparison between column headers and the value to look for is not case-sensitive.  
  
   
  
## Examples  
 The following code example returns the <xref:System.Windows.Forms.DataGridColumnStyle> named in the <xref:System.Windows.Forms.GridColumnStylesCollection.Item%2A> property.  
  
 [!code-vb[Classic GridColumnStylesCollection.this1 Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.g_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="protected override System.Collections.ArrayList List { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList List" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the list of items in the collection.</summary>
        <value>An <see cref="T:System.Collections.ArrayList" /> containing the collection items.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCollectionChanged">
      <MemberSignature Language="C#" Value="protected void OnCollectionChanged (System.ComponentModel.CollectionChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnCollectionChanged(class System.ComponentModel.CollectionChangeEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CollectionChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> that contains the event data event.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.GridColumnStylesCollection.CollectionChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.DataGridColumnStyle column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.DataGridColumnStyle column) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Windows.Forms.DataGridColumnStyle" />
      </Parameters>
      <Docs>
        <param name="column">The <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to remove from the collection.</param>
        <summary>Removes the specified <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> from the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine whether the <xref:System.Windows.Forms.DataGridColumnStyle> exists in the collection.  
  
   
  
## Examples  
 The following code example removes a <xref:System.Windows.Forms.DataGridColumnStyle> from a <xref:System.Windows.Forms.GridColumnStylesCollection>.  
  
 [!code-cs[GridColumnStylesCollection_RemoveAt#1](~/add/codesnippet/csharp/d192c9c7-7672-4ceb-94df-_1.cs)]
 [!code-vb[GridColumnStylesCollection_RemoveAt#1](~/add/codesnippet/visualbasic/d192c9c7-7672-4ceb-94df-_1.vb)]
 [!code-cpp[GridColumnStylesCollection_RemoveAt#1](~/add/codesnippet/cpp/d192c9c7-7672-4ceb-94df-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to remove.</param>
        <summary>Removes the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> with the specified index from the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine whether the <xref:System.Windows.Forms.DataGridColumnStyle> exists in the collection.  
  
 Use the <xref:System.Windows.Forms.GridColumnStylesCollection.IndexOf%2A> method to determine the index of any element in the collection.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.GridColumnStylesCollection.Contains%2A> method to determine if a given <xref:System.Windows.Forms.DataGridColumnStyle> exists in a <xref:System.Windows.Forms.GridColumnStylesCollection>. If so, the <xref:System.Windows.Forms.GridColumnStylesCollection.IndexOf%2A> method returns the index of the <xref:System.Windows.Forms.DataGridColumnStyle>, and the <xref:System.Windows.Forms.GridColumnStylesCollection.Remove%2A> method is invoked with the index to remove the element from the collection.  
  
 [!code-vb[Classic GridColumnStylesCollection.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.g_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetPropertyDescriptors">
      <MemberSignature Language="C#" Value="public void ResetPropertyDescriptors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetPropertyDescriptors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> for each column style in the collection to <see langword="null" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[GridColumnStylesCollection_ResetPropertyDescriptor#1](~/add/codesnippet/csharp/m-system.windows.forms.g_1_1.cs)]
 [!code-vb[GridColumnStylesCollection_ResetPropertyDescriptor#1](~/add/codesnippet/visualbasic/m-system.windows.forms.g_1_1.vb)]
 [!code-cpp[GridColumnStylesCollection_ResetPropertyDescriptor#1](~/add/codesnippet/cpp/m-system.windows.forms.g_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from collection. The array must have zero-based indexing.</param>
        <param name="index">The zero-based index in the array at which copying begins.</param>
        <summary>Copies the collection to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" /> is greater than the available space from <paramref name="index" /> to the end of <paramref name="array" />.</exception>
        <exception cref="T:System.InvalidCastException">The type of the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" /> cannot be cast automatically to the type of <paramref name="array" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of elements contained in the collection.</summary>
        <value>The number of elements contained in the collection.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" /> is synchronized (thread safe).</summary>
        <value>
          <see langword="false" /> in all cases.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" />.</summary>
        <value>The object used to synchronize access to the collection.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator for the collection.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerator&gt; for the collection.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to be added to the collection. The value can be <see langword="null" />.</param>
        <summary>Adds an object to the collection.</summary>
        <returns>The index at which the value has been added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> cannot be cast to a <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the collection of <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> objects.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to locate in the collection. The value can be <see langword="null" />.</param>
        <summary>Determines whether an element is in the collection.</summary>
        <returns>
          <see langword="true" /> if the element is in the collection; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to locate in the collection. The value can be <see langword="null" />.</param>
        <summary>Returns the zero-based index of the first occurrence of the specified object in the collection.</summary>
        <returns>The zero-based index of the first occurrence of the <paramref name="value" /> parameter within the collection, if found; otherwise, -1.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which `value` should be inserted.</param>
        <param name="value">The object to insert into the collection.</param>
        <summary>This method is not supported by this control.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the collection has a fixed size.</summary>
        <value>
          <see langword="false" /> in all cases.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the collection is read-only.</summary>
        <value>
          <see langword="false" /> in all cases.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the element to get.</param>
        <summary>Gets the element at the specified index.</summary>
        <value>The element at the specified index.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">An operation attempts to set this property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to remove from the collection.</param>
        <summary>Removes the specified <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> from the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> cannot be cast to a <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to remove.</param>
        <summary>Removes the <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> at the specified index from the <see cref="T:System.Windows.Forms.GridColumnStylesCollection" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>