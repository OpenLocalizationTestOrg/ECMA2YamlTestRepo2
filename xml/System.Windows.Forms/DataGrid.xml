<Type Name="DataGrid" FullName="System.Windows.Forms.DataGrid">
  <TypeSignature Language="C#" Value="public class DataGrid : System.Windows.Forms.Control, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IDataGridEditingService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataGrid extends System.Windows.Forms.Control implements class System.ComponentModel.ISupportInitialize, class System.Windows.Forms.IDataGridEditingService" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IDataGridEditingService</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ComplexBindingProperties("DataSource", "DataMember")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Navigate")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataSource")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.DataGridDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Displays ADO.NET data in a scrollable grid. The <see cref="T:System.Windows.Forms.DataGridView" /> control replaces and adds functionality to the DataGrid control; however, the DataGrid control is retained for both backward compatibility and future use, if you choose.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataGrid displays Web-like links to child tables. You can click on a link to navigate to the child table. When a child table is displayed, a back button appears in the caption that can be clicked to navigate back to the parent table. The data from the parent rows is displayed below the caption and above the column headers. You can hide the parent row information by clicking the button to the right of the back button.  
  
 To display a table in the DataGrid at run time, use the <xref:System.Windows.Forms.DataGrid.SetDataBinding%2A> method to set the <xref:System.Windows.Forms.DataGrid.DataSource%2A> and <xref:System.Windows.Forms.DataGrid.DataMember%2A> properties to a valid data source. The following data sources are valid:  
  
-   A <xref:System.Data.DataTable>  
  
-   A <xref:System.Data.DataView>  
  
-   A <xref:System.Data.DataSet>  
  
-   A <xref:System.Data.DataViewManager>  
  
-   A single dimension array  
  
-   Any component that implements the <xref:System.ComponentModel.IListSource> interface  
  
-   Any component that implements the <xref:System.Collections.IList> interface  
  
 For more information about the <xref:System.Data.DataSet> class, see [DataSets, DataTables, and DataViews](~/add/includes/ajax-current-ext-md.md).  
  
 You can create a grid that enables users to edit data but prevents them from adding new rows by using a <xref:System.Data.DataView> as the data source and setting the <xref:System.Data.DataView.AllowNew%2A> property to `false`.  
  
 Data sources are further managed by <xref:System.Windows.Forms.BindingManagerBase> objects. For each table in a data source, a <xref:System.Windows.Forms.BindingManagerBase> can be returned from the form's <xref:System.Windows.Forms.BindingContext>. For example, you can determine the number of rows contained by a data source by returning the associated <xref:System.Windows.Forms.BindingManagerBase> object's <xref:System.Windows.Forms.BindingManagerBase.Count%2A> property.  
  
 To validate data, use the underlying objects that represent data and their events. For example, if the data comes from a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>, use the <xref:System.Data.DataTable.ColumnChanging> and <xref:System.Data.DataTable.RowChanging> events.  
  
> [!NOTE]
>  Because the number of columns can be customized (by adding or deleting members of the <xref:System.Windows.Forms.GridColumnStylesCollection>) and the rows can be sorted by column, the <xref:System.Windows.Forms.DataGridCell.RowNumber%2A> and <xref:System.Windows.Forms.DataGridCell.ColumnNumber%2A> property values cannot be guaranteed to correspond to <xref:System.Data.DataRow> and <xref:System.Data.DataColumn> indexes in a <xref:System.Data.DataTable>. Therefore you should avoid using those properties in the <xref:System.Windows.Forms.Control.Validating> event to validate data.  
  
 To determine which cell is selected, use the <xref:System.Windows.Forms.DataGrid.CurrentCell%2A> property. Change the value of any cell by using the <xref:System.Windows.Forms.DataGrid.Item%2A> property, which can take either the row and column indexes of the cell, or a single <xref:System.Windows.Forms.DataGridCell>. Monitor the <xref:System.Windows.Forms.DataGrid.CurrentCellChanged> event to detect when the user selects another cell.  
  
 To determine which part of the control the user clicked, use the <xref:System.Windows.Forms.DataGrid.HitTest%2A> method in the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.DataGrid.HitTest%2A> method returns a <xref:System.Windows.Forms.DataGrid.HitTestInfo> object, which contains the row and column of a clicked area.  
  
 To manage the appearance of the control at run time, several properties for setting the color and caption attributes are available, including the <xref:System.Windows.Forms.DataGrid.CaptionForeColor%2A>, <xref:System.Windows.Forms.DataGrid.CaptionBackColor%2A>, <xref:System.Windows.Forms.DataGrid.CaptionFont%2A>, and so on.  
  
 The appearance of the displayed grid (or grids) can be further modified by creating <xref:System.Windows.Forms.DataGridTableStyle> objects and adding them to the <xref:System.Windows.Forms.GridTableStylesCollection>, which is accessed through the <xref:System.Windows.Forms.DataGrid.TableStyles%2A> property. For example, if the <xref:System.Windows.Forms.DataGrid.DataSource%2A> is set to a <xref:System.Data.DataSet> containing three <xref:System.Data.DataTable> objects, you can add three <xref:System.Windows.Forms.DataGridTableStyle> objects to the collection, one for each table. To synchronize each <xref:System.Windows.Forms.DataGridTableStyle> object with a <xref:System.Data.DataTable>, set the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> of the <xref:System.Windows.Forms.DataGridTableStyle> to the <xref:System.Data.DataTable.TableName%2A> of the <xref:System.Data.DataTable>. For more information about binding to an array of objects, see the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A?displayProperty=fullName> property.  
  
 To create a customized view of a table, create an instance of a <xref:System.Windows.Forms.DataGridTextBoxColumn> or <xref:System.Windows.Forms.DataGridBoolColumn> class and add the object to the <xref:System.Windows.Forms.GridTableStylesCollection> accessed through the <xref:System.Windows.Forms.DataGrid.TableStyles%2A> property. Both classes inherit from <xref:System.Windows.Forms.DataGridColumnStyle>. For each column style, set the <xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A> to the <xref:System.Data.DataColumn.ColumnName%2A> of a column that you want to show in the grid. To hide a column, set its <xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A> to something other than a valid <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 To format the text of a column, set the <xref:System.Windows.Forms.DataGridTextBoxColumn.Format%2A> property of the <xref:System.Windows.Forms.DataGridTextBoxColumn> to one of the values found in [Formatting Types](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
 To bind the DataGrid to a strongly typed array of objects, the object type must contain public properties. To create a <xref:System.Windows.Forms.DataGridTableStyle> that displays the array, set the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A?displayProperty=fullName> property to `typename[]` where `typename` is replaced by the name of the object type. Also note that the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> property is case-sensitive; the type name must be matched exactly. See the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> property for an example.  
  
 You can also bind the DataGrid to an <xref:System.Collections.ArrayList>. A feature of the <xref:System.Collections.ArrayList> is that it can contain objects of multiple types, but the DataGrid can only bind to such a list when all items in the list are of the same type as the first item. This means that all objects must either be of the same type, or they must inherit from the same class as the first item in the list. For example, if the first item in a list is a <xref:System.Windows.Forms.Control>, the second item could be a <xref:System.Windows.Forms.TextBox> (which inherits from <xref:System.Windows.Forms.Control>). If, on the other hand, the first item is a <xref:System.Windows.Forms.TextBox>, the second object cannot be a <xref:System.Windows.Forms.Control>. Further, the <xref:System.Collections.ArrayList> must have items in it when it is bound. An empty <xref:System.Collections.ArrayList> will result in an empty grid. In addition, the objects in the <xref:System.Collections.ArrayList> must contain public properties. When binding to an <xref:System.Collections.ArrayList>, set the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> of the <xref:System.Windows.Forms.DataGridTableStyle> to "ArrayList" (the type name).  
  
 For each <xref:System.Windows.Forms.DataGridTableStyle>, you can set color and caption attributes that override the settings for the DataGrid control. However, if those properties are not set, the settings for the control are used by default. The following properties can be overridden by <xref:System.Windows.Forms.DataGridTableStyle> properties:  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.AllowSorting%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.AlternatingBackColor%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.BackColor%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.ColumnHeadersVisible%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.ForeColor%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.GridLineColor%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.GridLineStyle%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.HeaderBackColor%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.HeaderFont%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.HeaderForeColor%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.LinkColor%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.PreferredColumnWidth%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.PreferredRowHeight%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.ReadOnly%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.RowHeadersVisible%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.RowHeaderWidth%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.SelectionBackColor%2A>  
  
-   <xref:System.Windows.Forms.DataGridTableStyle.SelectionForeColor%2A>  
  
 To customize the appearance of individual columns, add <xref:System.Windows.Forms.DataGridColumnStyle> objects to the <xref:System.Windows.Forms.GridColumnStylesCollection>, which is accessed through the <xref:System.Windows.Forms.DataGridTableStyle.GridColumnStyles%2A> property of each <xref:System.Windows.Forms.DataGridTableStyle>. To synchronize each <xref:System.Windows.Forms.DataGridColumnStyle> with a <xref:System.Data.DataColumn> in the <xref:System.Data.DataTable>, set the <xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A> to the <xref:System.Data.DataColumn.ColumnName%2A> of a <xref:System.Data.DataColumn>. When constructing a <xref:System.Windows.Forms.DataGridColumnStyle>, you can also set a formatting string that specifies how the column displays data. For example, you can specify that the column use a short-date format to display dates contained in the table.  
  
> [!CAUTION]
>  Always create <xref:System.Windows.Forms.DataGridColumnStyle> objects and add them to the <xref:System.Windows.Forms.GridColumnStylesCollection> before adding <xref:System.Windows.Forms.DataGridTableStyle> objects to the <xref:System.Windows.Forms.GridTableStylesCollection>. When you add an empty <xref:System.Windows.Forms.DataGridTableStyle> with a valid <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> value to the collection, <xref:System.Windows.Forms.DataGridColumnStyle> objects are automatically generated for you. Consequently, an exception will be thrown if you try to add new <xref:System.Windows.Forms.DataGridColumnStyle> objects with duplicate <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> values to the <xref:System.Windows.Forms.GridColumnStylesCollection>.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridView> control replaces and adds functionality to the DataGrid control; however, the DataGrid control is retained for both backward compatibility and future use, if you choose. For more information, see [Differences Between the Windows Forms DataGridView and DataGrid Controls](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example creates a Windows form, a <xref:System.Data.DataSet> containing two <xref:System.Data.DataTable> objects, and a <xref:System.Data.DataRelation> that relates the two tables. To display the data, a DataGrid control is then bound to the <xref:System.Data.DataSet> through the <xref:System.Windows.Forms.DataGrid.SetDataBinding%2A> method. A button on the form changes the appearance of the grid by creating two <xref:System.Windows.Forms.DataGridTableStyle> objects and setting the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> of each object to a <xref:System.Data.DataTable.TableName%2A> of one of the <xref:System.Data.DataTable> objects. The example also contains code in the <xref:System.Windows.Forms.Control.MouseUp> event that uses the <xref:System.Windows.Forms.DataGrid.HitTest%2A> method to print the column, row, and part of the grid that has been clicked.  
  
 [!code-cs[Classic DataGrid Example#1](~/add/codesnippet/csharp/t-system.windows.forms.d_100_1.cs)]
 [!code-vb[Classic DataGrid Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.d_100_1.vb)]
 [!code-cpp[Classic DataGrid Example#1](~/add/codesnippet/cpp/t-system.windows.forms.d_100_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataGrid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGrid" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To populate a newly created <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control, set the <xref:System.Windows.Forms.DataGrid.DataSource%2A> property to a valid source, such as a <xref:System.Data.DataView>, <xref:System.Data.DataSet>, or <xref:System.Data.DataViewManager>.  
  
   
  
## Examples  
 The following code example creates a new <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> and uses the <xref:System.Windows.Forms.DataGrid.SetDataBinding%2A> method to set the <xref:System.Windows.Forms.DataGrid.DataSource%2A> and <xref:System.Windows.Forms.DataGrid.DataMember%2A> properties.  
  
 [!code-vb[Classic DataGrid.DataGrid Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowNavigation">
      <MemberSignature Language="C#" Value="public bool AllowNavigation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowNavigation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether navigation is allowed.</summary>
        <value>
          <see langword="true" /> if navigation is allowed; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If this property is set to `false`, links to child tables are not shown.  
  
   
  
## Examples  
 The following code example toggles the AllowNavigation property between the `true` and `false`.  
  
 [!code-cpp[DataGrid_AllowNavigationChanged#1](~/add/codesnippet/cpp/p-system.windows.forms.d_344_1.cpp)]
 [!code-cs[DataGrid_AllowNavigationChanged#1](~/add/codesnippet/csharp/p-system.windows.forms.d_344_1.cs)]
 [!code-vb[DataGrid_AllowNavigationChanged#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_344_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowNavigationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowNavigationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowNavigationChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGrid.AllowNavigation%2A&gt; property has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.DataGrid.AllowNavigation%2A> property is set to `false`, then no links to child tables are shown.  
  
   
  
## Examples  
 The following code example resets the <xref:System.Windows.Forms.DataGrid.AllowNavigation%2A> property and raises the AllowNavigationChanged event.  
  
 [!code-cpp[DataGrid_AllowNavigationChanged#1](~/add/codesnippet/cpp/e-system.windows.forms.d_112_1.cpp)]
 [!code-cs[DataGrid_AllowNavigationChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.d_112_1.cs)]
 [!code-vb[DataGrid_AllowNavigationChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.d_112_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AllowSorting">
      <MemberSignature Language="C#" Value="public bool AllowSorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the grid can be resorted by clicking on a column header.</summary>
        <value>
          <see langword="true" /> if columns can be sorted; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is overridden by the <xref:System.Windows.Forms.DataGridTableStyle.AllowSorting%2A?displayProperty=fullName> property if there is a <xref:System.Windows.Forms.DataGridTableStyle> currently in effect for the control.  
  
 If sorting is allowed, clicking on a column header will sort the table data by that column.  
  
 You can also sort using an expression for a <xref:System.Data.DataColumn>. See <xref:System.Data.DataColumn.Expression%2A> for details on creating a sort expression.  
  
 If the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> is bound to a <xref:System.Data.DataView>, you can set a custom sort for the table using the <xref:System.Data.DataView> class's <xref:System.Data.DataView.Sort%2A> property. Similarly, if the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> is bound to a <xref:System.Data.DataViewManager>, each table in the <xref:System.Data.DataViewManager> can have a custom sort by setting the <xref:System.Data.DataViewManager.DataViewSettings%2A> class's <xref:System.Data.DataViewSetting.Sort%2A> property.  
  
   
  
## Examples  
 The following code example toggles the AllowSorting property.  
  
 [!code-vb[Classic DataGrid.AllowSorting Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_314_1.vb)]
 [!code-cs[Classic DataGrid.AllowSorting Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_314_1.cs)]
 [!code-cpp[Classic DataGrid.AllowSorting Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_314_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlternatingBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color AlternatingBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color AlternatingBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of odd-numbered rows of the grid.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the alternating background color. The default is the system color for windows (&lt;xref:System.Drawing.SystemColors.Window%2A&gt;).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, both the <xref:System.Windows.Forms.DataGrid.BackColor%2A> and the AlternatingBackColor properties are set to the same color. Setting the <xref:System.Windows.Forms.DataGrid.BackColor%2A> property affects only even-numbered rows, while setting the AlternatingBackColor affects only odd-numbered rows.  
  
   
  
## Examples  
 The following code example sets the AlternatingBackColor to a <xref:System.Drawing.Color> value.  
  
 [!code-vb[Classic DataGrid.AlternatingBackColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_307_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackButtonClick">
      <MemberSignature Language="C#" Value="public event EventHandler BackButtonClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackButtonClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see langword="Back" /> button on a child table is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Back` button becomes visible when a child table is displayed. Clicking the button will cause the grid to display the parent table.  
  
   
  
## Examples  
 The following code example adds an event handler for the BackButtonClick event.  
  
 [!code-cs[DataGrid_BackgroundColorChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.d_75_1.cs)]
 [!code-vb[DataGrid_BackgroundColorChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.d_75_1.vb)]
 [!code-cpp[DataGrid_BackgroundColorChanged#1](~/add/codesnippet/cpp/e-system.windows.forms.d_75_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of even-numbered rows of the grid.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the color of rows in the grid. The default is the system color for windows (&lt;xref:System.Drawing.SystemColors.Window%2A&gt;).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Whereas the BackColor property determines the color of rows in the grid, the <xref:System.Windows.Forms.DataGrid.BackgroundColor%2A> determines the color of the nonrow area, which is only visible when the grid is scrolled to the bottom, or if only a few rows are contained in the grid.  
  
 By default, both the BackColor and the <xref:System.Windows.Forms.DataGrid.AlternatingBackColor%2A> properties are set to the same color. Setting the BackColor property affects only even-numbered rows, while setting the <xref:System.Windows.Forms.DataGrid.AlternatingBackColor%2A> affects only odd-numbered rows.  
  
   
  
## Examples  
 The following code example sets both the BackColor and <xref:System.Windows.Forms.DataGrid.BackgroundColor%2A> properties to different values.  
  
 [!code-cpp[Classic DataGrid.BackColor Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_201_1.cpp)]
 [!code-cs[Classic DataGrid.BackColor Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_201_1.cs)]
 [!code-vb[Classic DataGrid.BackColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_201_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of the non-row area of the grid.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the color of the grid's background. The default is the &lt;xref:System.Drawing.SystemColors.AppWorkspace%2A&gt; color.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BackgroundColor determines the color of the nonrow area of the grid, which is only visible when no table is displayed by the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>, or if the grid is scrolled to the bottom, or if only a few rows are contained in the grid.  
  
   
  
## Examples  
 The following code example sets the <xref:System.Windows.Forms.DataGrid.BackColor%2A>, and BackgroundColor properties.  
  
 [!code-cpp[Classic DataGrid.BackgroundColor Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_211_1.cpp)]
 [!code-cs[Classic DataGrid.BackgroundColor Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_211_1.cs)]
 [!code-vb[Classic DataGrid.BackgroundColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_211_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGrid.BackgroundColor%2A&gt; has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example changes the <xref:System.Windows.Forms.DataGrid.BackgroundColor%2A> property value from yellow to red and raises the BackgroundColorChanged event.  
  
 [!code-cs[DataGrid_BackgroundColorChanged#2](~/add/codesnippet/csharp/e-system.windows.forms.d_63_1.cs)]
 [!code-vb[DataGrid_BackgroundColorChanged#2](~/add/codesnippet/visualbasic/e-system.windows.forms.d_63_1.vb)]
 [!code-cpp[DataGrid_BackgroundColorChanged#2](~/add/codesnippet/cpp/e-system.windows.forms.d_63_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is not meaningful for this control.</summary>
        <value>The background image associated with the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGrid.BackgroundImage%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGrid.BackgroundImage%2A> property is not meaningful for this control, although you can change its value and handle the BackgroundImageChanged event to detect the change.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is not meaningful for this control.</summary>
        <value>An <see cref="T:System.Windows.Forms.ImageLayout" /> value.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGrid.BackgroundImageLayout%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGrid.BackgroundImageLayout%2A> property is not meaningful for this control, although you can change its value and handle the BackgroundImageLayoutChanged event to detect the change.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public bool BeginEdit (System.Windows.Forms.DataGridColumnStyle gridColumn, int rowNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BeginEdit(class System.Windows.Forms.DataGridColumnStyle gridColumn, int32 rowNumber) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gridColumn" Type="System.Windows.Forms.DataGridColumnStyle" />
        <Parameter Name="rowNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gridColumn">A <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to edit.</param>
        <param name="rowNumber">The number of the row to edit.</param>
        <summary>Attempts to put the grid into a state where editing is allowed.</summary>
        <returns>
          <see langword="true" /> if the method is successful; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The grid will deny edit requests if the user already started typing into a cell. In that case, the BeginEdit method will return `false`.  
  
   
  
## Examples  
 The following code example uses the BeginEdit method to test if editing is possible before changing a specified column and row.  
  
 [!code-cs[Classic DataGrid.BeginEdit Example#1](~/add/codesnippet/csharp/31e6fab5-fd31-496d-aadd-_1.cs)]
 [!code-cpp[Classic DataGrid.BeginEdit Example#1](~/add/codesnippet/cpp/31e6fab5-fd31-496d-aadd-_1.cpp)]
 [!code-vb[Classic DataGrid.BeginEdit Example#1](~/add/codesnippet/visualbasic/31e6fab5-fd31-496d-aadd-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins the initialization of a <see cref="T:System.Windows.Forms.DataGrid" /> that is used on a form or used by another component. The initialization occurs at run time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Visual Studio design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Windows.Forms.DataGrid.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.Windows.Forms.DataGrid.EndInit%2A> methods prevents the control from being used before it is fully initialized.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the grid's border style.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.BorderStyle" /> enumeration values. The default is <see langword="FixedSingle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example sets the style of the grid's border.  
  
 [!code-vb[Classic DataGrid.BorderStyle Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_401_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BorderStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGrid.BorderStyle%2A&gt; has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Possible values include `None`, `FixedSingle`, and `Fixed3D`.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BorderStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGrid> named `DataGrid1`. Then ensure that the event handler is associated with the BorderStyleChanged event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#194](~/add/codesnippet/csharp/e-system.windows.forms.d_153_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#194](~/add/codesnippet/visualbasic/e-system.windows.forms.d_153_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelEditing">
      <MemberSignature Language="C#" Value="protected virtual void CancelEditing ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CancelEditing() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the current edit operation and rolls back all changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CaptionBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color CaptionBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color CaptionBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of the caption area.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the caption's background color. The default is &lt;xref:System.Drawing.SystemColors.ActiveCaption%2A&gt; color.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example sets the CaptionBackColor property of the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control.  
  
 [!code-vb[Classic DataGrid.CaptionBackColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_67_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CaptionFont">
      <MemberSignature Language="C#" Value="public System.Drawing.Font CaptionFont { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font CaptionFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the font of the grid's caption.</summary>
        <value>A <see cref="T:System.Drawing.Font" /> that represents the caption's font.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Font> encapsulates a Windows font and provides the methods for manipulating that font.  
  
   
  
## Examples  
 The following code example sets the caption's font using a <xref:System.Drawing.Font> object.  
  
 [!code-vb[Classic DataGrid.CaptionFont Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_138_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CaptionForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color CaptionForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color CaptionForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color of the caption area.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the foreground color of the caption area. The default is &lt;xref:System.Drawing.SystemColors.ActiveCaptionText%2A&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example sets the CaptionForeColor property of the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control.  
  
 [!code-vb[Classic DataGrid.CaptionForeColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_333_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CaptionText">
      <MemberSignature Language="C#" Value="public string CaptionText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CaptionText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text of the grid's window caption.</summary>
        <value>A string to be displayed as the window caption of the grid. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example sets the caption of a <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 [!code-cs[Classic DataGrid.CaptionText Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_428_1.cs)]
 [!code-cpp[Classic DataGrid.CaptionText Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_428_1.cpp)]
 [!code-vb[Classic DataGrid.CaptionText Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_428_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CaptionVisible">
      <MemberSignature Language="C#" Value="public bool CaptionVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaptionVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the grid's caption is visible.</summary>
        <value>
          <see langword="true" /> if the caption is visible; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If CaptionVisible is `false`, the **Back** button, **ParentRow** button, and caption will not be seen. Because navigation is limited, links to child tables will also not be visible and <xref:System.Windows.Forms.DataGrid.AllowNavigation%2A> will be set to `None`.  
  
   
  
## Examples  
 The following code example toggles the CaptionVisible property.  
  
 [!code-vb[Classic DataGrid.CaptionVisible Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_376_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CaptionVisibleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CaptionVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CaptionVisibleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGrid.CaptionVisible%2A&gt; property has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this event.  
  
 [!code-cs[DataGrid_CaptionVisibleChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.d_38_1.cs)]
 [!code-cpp[DataGrid_CaptionVisibleChanged#1](~/add/codesnippet/cpp/e-system.windows.forms.d_38_1.cpp)]
 [!code-vb[DataGrid_CaptionVisibleChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.d_38_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public void Collapse (int row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Collapse(int32 row) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="row">The number of the row to collapse. If set to -1, all rows are collapsed.</param>
        <summary>Collapses child relations, if any exist for all rows, or for a specified row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Forms.DataGrid.IsExpanded%2A> method to determine if a row is expanded.  
  
   
  
## Examples  
 The following code example collapses all rows in the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control.  
  
 [!code-vb[Classic DataGrid.Collapse Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_48_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersVisible">
      <MemberSignature Language="C#" Value="public bool ColumnHeadersVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ColumnHeadersVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the column headers of a table are visible.</summary>
        <value>
          <see langword="true" /> if the column headers are visible; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example toggles the ColumnHeadersVisible property.  
  
 [!code-vb[Classic DataGrid.ColumnHeadersVisible Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_387_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnStartedEditing">
      <MemberSignature Language="C#" Value="protected virtual void ColumnStartedEditing (System.Drawing.Rectangle bounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ColumnStartedEditing(valuetype System.Drawing.Rectangle bounds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="bounds">The <see cref="T:System.Drawing.Rectangle" /> that defines the location of the edited column.</param>
        <summary>Informs the <see cref="T:System.Windows.Forms.DataGrid" /> control when the user begins to edit the column at the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When called, the <xref:System.Windows.Forms.IDataGridColumnStyleEditingNotificationService.ColumnStartedEditing%2A> method enables the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control to show a pencil in the row header.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnStartedEditing">
      <MemberSignature Language="C#" Value="protected virtual void ColumnStartedEditing (System.Windows.Forms.Control editingControl);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ColumnStartedEditing(class System.Windows.Forms.Control editingControl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editingControl" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="editingControl">The <see cref="T:System.Windows.Forms.Control" /> used to edit the column.</param>
        <summary>Informs the <see cref="T:System.Windows.Forms.DataGrid" /> control when the user begins to edit a column using the specified control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When called, the <xref:System.Windows.Forms.IDataGridColumnStyleEditingNotificationService.ColumnStartedEditing%2A> method enables the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control to show a pencil in the row header.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Constructs a new instance of the accessibility object for this control.</summary>
        <returns>The &lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt; for this control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Derived classes should not call the base class's <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.  
  
 Only the following properties of the <xref:System.Windows.Forms.AccessibleObject> should be set:  
  
-   <xref:System.Windows.Forms.AccessibleObject.Role%2A>  
  
-   <xref:System.Windows.Forms.AccessibleObject.Description%2A>  
  
-   <xref:System.Windows.Forms.AccessibleObject.Name%2A>  
  
 All other properties are handled by the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> itself.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateGridColumn">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.DataGridColumnStyle CreateGridColumn (System.ComponentModel.PropertyDescriptor prop);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.DataGridColumnStyle CreateGridColumn(class System.ComponentModel.PropertyDescriptor prop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridColumnStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prop" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to use for creating the grid column style.</param>
        <summary>Creates a new <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> with the specified <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
        <returns>The new <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateGridColumn">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.DataGridColumnStyle CreateGridColumn (System.ComponentModel.PropertyDescriptor prop, bool isDefault);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.DataGridColumnStyle CreateGridColumn(class System.ComponentModel.PropertyDescriptor prop, bool isDefault) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridColumnStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prop" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="isDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to use for creating the grid column style.</param>
        <param name="isDefault">
          <see langword="true" /> to set the column style as the default; otherwise, <see langword="false" />.</param>
        <summary>Creates a <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> using the specified <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
        <returns>The new <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridCell CurrentCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridCell CurrentCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets which cell has the focus. Not available at design time.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridCell" /> with the focus.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting the CurrentCell property will cause the grid to scroll and show the cell if it is not already visible.  
  
   
  
## Examples  
 The following code example shows how to set and get the current cell.  
  
 [!code-cs[Classic DataGrid.CurrentCell Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_75_1.cs)]
 [!code-vb[Classic DataGrid.CurrentCell Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_75_1.vb)]
 [!code-cpp[Classic DataGrid.CurrentCell Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_75_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCellChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentCellChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGrid.CurrentCell%2A&gt; property has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To determine the current cell, use the <xref:System.Windows.Forms.DataGrid.CurrentCell%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_CaptionVisibleChanged#2](~/add/codesnippet/csharp/e-system.windows.forms.d_31_1.cs)]
 [!code-cpp[DataGrid_CaptionVisibleChanged#2](~/add/codesnippet/cpp/e-system.windows.forms.d_31_1.cpp)]
 [!code-vb[DataGrid_CaptionVisibleChanged#2](~/add/codesnippet/visualbasic/e-system.windows.forms.d_31_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentRowIndex">
      <MemberSignature Language="C#" Value="public int CurrentRowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets index of the row that currently has focus.</summary>
        <value>The zero-based index of the current row.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting the CurrentRowIndex property to a value other than its current value scrolls the control so that the specified row is in view.  
  
 The CurrentRowIndex property enables you to iterate through a parent table's rows even if you are viewing the child table rows. For example, if you are viewing a child table, incrementing the CurrentRowIndex will cause the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> to display the next set of records in the child table that are linked to the parent table.  
  
 If the user is viewing a parent table, or a table with no child relations, then the property returns the zero-based index of the current row.  
  
   
  
## Examples  
 The following code example returns the CurrentRowIndex.  
  
 [!code-cs[Classic DataGrid.CurrentRowIndex Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_429_1.cs)]
 [!code-cpp[Classic DataGrid.CurrentRowIndex Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_429_1.cpp)]
 [!code-vb[Classic DataGrid.CurrentRowIndex Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_429_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">There is no <see cref="T:System.Windows.Forms.CurrencyManager" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is not meaningful for this control.</summary>
        <value>The type of cursor to display as the mouse pointer moves over the object.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CursorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CursorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CursorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGrid.Cursor%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGrid.Cursor%2A> property is not meaningful for this control, although you can change its value and handle the CursorChanged event to detect the change.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataMember">
      <MemberSignature Language="C#" Value="public string DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the specific list in a &lt;xref:System.Windows.Forms.DataGrid.DataSource%2A&gt; for which the <see cref="T:System.Windows.Forms.DataGrid" /> control displays a grid.</summary>
        <value>A list in a &lt;xref:System.Windows.Forms.DataGrid.DataSource%2A&gt;. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a <xref:System.Windows.Forms.DataGrid.DataSource%2A> contains multiple sources of data, you should set the DataMember to one of the sources. For example, if the <xref:System.Windows.Forms.DataGrid.DataSource%2A> is a <xref:System.Data.DataSet> or <xref:System.Data.DataViewManager> that contains three tables named `Customers`, `Orders`, and `OrderDetails`, you must specify one of the tables to bind to. If the <xref:System.Data.DataSet> or <xref:System.Data.DataViewManager> contains only one <xref:System.Data.DataTable>, you should set the DataMember to the <xref:System.Data.DataTable.TableName%2A> of that <xref:System.Data.DataTable>.  
  
 If the <xref:System.Windows.Forms.DataGrid.DataSource%2A> is set to a <xref:System.Data.DataSet> that contains <xref:System.Data.DataRelation> objects, parent tables will appear with a plus sign (+) in each row header. Clicking the plus sign causes a node to appear that contains links to child tables. For example, if a <xref:System.Data.DataSet> contains two <xref:System.Data.DataTable> objects named `Customers` and `Orders`, setting the DataMember to the `Customers` table causes the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> to display a parent table with a plus sign visible on each row header. If the DataMember is set to `Orders`, however, the row headers will be blank.  
  
 If the <xref:System.Windows.Forms.DataGrid.DataSource%2A> is a <xref:System.Data.DataTable>, <xref:System.Data.DataView>, collection, or array, setting the DataMember property throws an exception.  
  
> [!NOTE]
>  At run time, you must use the <xref:System.Windows.Forms.DataGrid.SetDataBinding%2A> method to reset the <xref:System.Windows.Forms.DataGrid.DataSource%2A> property. However, the DataMember property alone can be reset at any time to a valid table name.  
  
   
  
## Examples  
 The following code example sets the <xref:System.Windows.Forms.DataGrid.DataSource%2A> and DataMember properties of a <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control.  
  
 [!code-cs[Classic DataGrid.DataMember Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_264_1.cs)]
 [!code-vb[Classic DataGrid.DataMember Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_264_1.vb)]
 [!code-cpp[Classic DataGrid.DataMember Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_264_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AttributeProvider(typeof(System.ComponentModel.IListSource))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data source that the grid is displaying data for.</summary>
        <value>An object that functions as a data source.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 At run time, use the <xref:System.Windows.Forms.DataGrid.SetDataBinding%2A> method to set the DataSource and <xref:System.Windows.Forms.DataGrid.DataMember%2A> properties.  
  
 The following data sources are valid:  
  
-   A <xref:System.Data.DataTable>  
  
-   A <xref:System.Data.DataView>  
  
-   A <xref:System.Data.DataSet>  
  
-   A <xref:System.Data.DataViewManager>  
  
-   Any component that implements the <xref:System.ComponentModel.IListSource> interface  
  
-   Any component that implements the <xref:System.Collections.IList> interface  
  
 See the <xref:System.Windows.Forms.Binding> class overview for more information on data sources.  
  
 If the DataSource reference contains more than one table, you must set the <xref:System.Windows.Forms.DataGrid.DataMember%2A> property a string that specifies the table to bind to. For example, if the DataSource is a <xref:System.Data.DataSet> or <xref:System.Data.DataViewManager> that contains three tables named `Customers`, `Orders`, and `OrderDetails`, you must specify the table to bind to.  
  
 Setting the DataSource to an object that does not implement the <xref:System.Collections.IList> interface or an <xref:System.ComponentModel.IListSource> will cause the grid to throw an exception.  
  
 You can create a grid that enables users to edit data but prevents them from adding new rows by using a <xref:System.Data.DataView> as the data source and setting the <xref:System.Data.DataView.AddNew%2A> property to `false`.  
  
 To bind the <xref:System.Windows.Forms.DataGrid> to a strongly typed array of objects, the object type must contain public properties. To create a <xref:System.Windows.Forms.DataGridTableStyle> that displays the array, set the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A?displayProperty=fullName> property to `typename` where `typename` is replaced by the name of the object type. Also note that the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> property is case-sensitive; the type name must be matched exactly. See the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> property for an example.  
  
 You can also bind the <xref:System.Windows.Forms.DataGrid> to an <xref:System.Collections.ArrayList>. A feature of the <xref:System.Collections.ArrayList> is that it can contain objects of multiple types, but the <xref:System.Windows.Forms.DataGrid> can only bind to such a list when all items in the list are of the same type as the first item. This means that all objects must either be of the same type, or they must inherit from the same class as the first item in the list. For example, if the first item in a list is a <xref:System.Windows.Forms.Control>, the second item could be a <xref:System.Windows.Forms.TextBox> (which inherits from <xref:System.Windows.Forms.Control>). If, on the other hand, the first item is a <xref:System.Windows.Forms.TextBox>, the second object cannot be a <xref:System.Windows.Forms.Control>. Further, the <xref:System.Collections.ArrayList> must have items in it when it is bound. An empty <xref:System.Collections.ArrayList> will result in an empty grid. In addition, the objects in the <xref:System.Collections.ArrayList> must contain public properties. When binding to an <xref:System.Collections.ArrayList>, set the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> of the <xref:System.Windows.Forms.DataGridTableStyle> to "ArrayList" (the type name).  
  
   
  
## Examples  
 The following code example shows how to set the DataSource, and when needed, the <xref:System.Windows.Forms.DataGrid.DataMember%2A>, to bind a <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> to both a <xref:System.Data.DataView> and a <xref:System.Data.DataSet>. The example also shows how to return data sources from the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 [!code-cs[Classic DataGrid.DataSource Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_43_1.cs)]
 [!code-vb[Classic DataGrid.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_43_1.vb)]
 [!code-cpp[Classic DataGrid.DataSource Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_43_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGrid.DataSource%2A&gt; property value has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataSourceChanged event occurs when the <xref:System.Windows.Forms.DataGrid.DataMember%2A> value changes, or when the <xref:System.Windows.Forms.BindingContext> of the <xref:System.Windows.Forms.DataGrid> changes.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[Classic DataGrid.DataSourceChanged Example#1](~/add/codesnippet/csharp/e-system.windows.forms.d_155_1.cs)]
 [!code-vb[Classic DataGrid.DataSourceChanged Example#1](~/add/codesnippet/visualbasic/e-system.windows.forms.d_155_1.vb)]
 [!code-cpp[Classic DataGrid.DataSourceChanged Example#1](~/add/codesnippet/cpp/e-system.windows.forms.d_155_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default size of the control.</summary>
        <value>The default size of the control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Disposes of the resources (other than memory) used by the <see cref="T:System.Windows.Forms.DataGrid" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call Dispose when you are finished using the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. The Dispose method leaves the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> so the memory it was occupying can be reclaimed by garbage collection.  
  
   
  
## Examples  
 The following code example uses the Dispose method to free resources.  
  
 [!code-vb[Classic DataGrid.Dispose Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_45_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public bool EndEdit (System.Windows.Forms.DataGridColumnStyle gridColumn, int rowNumber, bool shouldAbort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndEdit(class System.Windows.Forms.DataGridColumnStyle gridColumn, int32 rowNumber, bool shouldAbort) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gridColumn" Type="System.Windows.Forms.DataGridColumnStyle" />
        <Parameter Name="rowNumber" Type="System.Int32" />
        <Parameter Name="shouldAbort" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="gridColumn">The <see cref="T:System.Windows.Forms.DataGridColumnStyle" /> to cease editing.</param>
        <param name="rowNumber">The number of the row to cease editing.</param>
        <param name="shouldAbort">Set to <see langword="true" /> if the current operation should be stopped.</param>
        <summary>Requests an end to an edit operation taking place on the <see cref="T:System.Windows.Forms.DataGrid" /> control.</summary>
        <returns>
          <see langword="true" /> if the editing operation ceases; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The EndEdit method returns `false` if the user is not editing (typing into) a cell.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.DataGrid.BeginEdit%2A> and EndEdit methods to edit a value in a grid displayed by the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control.  
  
 [!code-cs[Classic DataGrid.EndEdit Example#1](~/add/codesnippet/csharp/b58809b7-9026-42a9-8ac6-_1.cs)]
 [!code-cpp[Classic DataGrid.EndEdit Example#1](~/add/codesnippet/cpp/b58809b7-9026-42a9-8ac6-_1.cpp)]
 [!code-vb[Classic DataGrid.EndEdit Example#1](~/add/codesnippet/visualbasic/b58809b7-9026-42a9-8ac6-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the initialization of a <see cref="T:System.Windows.Forms.DataGrid" /> that is used on a form or used by another component. The initialization occurs at run time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Visual Studio design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Windows.Forms.DataGrid.BeginInit%2A> method starts the initialization. Using the <xref:System.Windows.Forms.DataGrid.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Expand">
      <MemberSignature Language="C#" Value="public void Expand (int row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expand(int32 row) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="row">The number of the row to expand. If set to -1, all rows are expanded.</param>
        <summary>Displays child relations, if any exist, for all rows or a specific row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-vb[Classic DataGrid.Expand Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FirstVisibleColumn">
      <MemberSignature Language="C#" Value="public int FirstVisibleColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstVisibleColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index of the first visible column in a grid.</summary>
        <value>The index of a <see cref="T:System.Windows.Forms.DataGridColumnStyle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A column is considered visible even if it is partially concealed.  
  
 If a particular column is not visible, set the <xref:System.Windows.Forms.DataGrid.CurrentCell%2A> property to the cell that should be visible.  
  
   
  
## Examples  
 The following code example scrolls the grid if the first visible column is greater than five.  
  
 [!code-vb[Classic DataGrid.FirstVisibleColumn Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_82_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FlatMode">
      <MemberSignature Language="C#" Value="public bool FlatMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FlatMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the grid displays in flat mode.</summary>
        <value>
          <see langword="true" /> if the grid is displayed flat; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example examines the FlatMode property and notifies the user of its status.  
  
 [!code-cs[MyDataGridClass_FlatMode_ReadOnly#1](~/add/codesnippet/csharp/p-system.windows.forms.d_355_1.cs)]
 [!code-cpp[MyDataGridClass_FlatMode_ReadOnly#1](~/add/codesnippet/cpp/p-system.windows.forms.d_355_1.cpp)]
 [!code-vb[MyDataGridClass_FlatMode_ReadOnly#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_355_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FlatModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FlatModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FlatModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGrid.FlatMode%2A&gt; has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[MyDataGridClass_FlatMode_ReadOnly#2](~/add/codesnippet/csharp/e-system.windows.forms.d_82_1.cs)]
 [!code-cpp[MyDataGridClass_FlatMode_ReadOnly#2](~/add/codesnippet/cpp/e-system.windows.forms.d_82_1.cpp)]
 [!code-vb[MyDataGridClass_FlatMode_ReadOnly#2](~/add/codesnippet/visualbasic/e-system.windows.forms.d_82_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color (typically the color of the text) property of the <see cref="T:System.Windows.Forms.DataGrid" /> control.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the foreground color. The default is &lt;xref:System.Drawing.SystemBrushes.WindowText%2A&gt; color.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/p-system.windows.forms.d_111_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/p-system.windows.forms.d_111_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/p-system.windows.forms.d_111_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCellBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetCellBounds (System.Windows.Forms.DataGridCell dgc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetCellBounds(valuetype System.Windows.Forms.DataGridCell dgc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgc" Type="System.Windows.Forms.DataGridCell" />
      </Parameters>
      <Docs>
        <param name="dgc">The <see cref="T:System.Windows.Forms.DataGridCell" /> to look up.</param>
        <summary>Gets the <see cref="T:System.Drawing.Rectangle" /> of the cell specified by <see cref="T:System.Windows.Forms.DataGridCell" />.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that defines the current cell's corners.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.DataGrid.GetCellBounds%2A> method to return a <xref:System.Drawing.Rectangle> of a specified cell.  
  
 [!code-cs[Classic DataGrid.GetCellBounds1 Example#1](~/add/codesnippet/csharp/m-system.windows.forms.d_104_1.cs)]
 [!code-cpp[Classic DataGrid.GetCellBounds1 Example#1](~/add/codesnippet/cpp/m-system.windows.forms.d_104_1.cpp)]
 [!code-vb[Classic DataGrid.GetCellBounds1 Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_104_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCellBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetCellBounds (int row, int col);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetCellBounds(int32 row, int32 col) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Int32" />
        <Parameter Name="col" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="row">The number of the cell's row.</param>
        <param name="col">The number of the cell's column.</param>
        <summary>Gets the <see cref="T:System.Drawing.Rectangle" /> of the cell specified by row and column number.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that defines the current cell's corners.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To retrieve the cell bounds for the currently selected cell, use <xref:System.Windows.Forms.DataGrid.GetCurrentCellBounds%2A>.  
  
   
  
## Examples  
 The following code example uses the GetCellBounds method to return a <xref:System.Drawing.Rectangle> of a specified cell.  
  
 [!code-cs[Classic DataGrid.GetCellBounds Example#1](~/add/codesnippet/csharp/m-system.windows.forms.d_63_1.cs)]
 [!code-cpp[Classic DataGrid.GetCellBounds Example#1](~/add/codesnippet/cpp/m-system.windows.forms.d_63_1.cpp)]
 [!code-vb[Classic DataGrid.GetCellBounds Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_63_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentCellBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetCurrentCellBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetCurrentCellBounds() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Rectangle" /> that specifies the four corners of the selected cell.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that defines the current cell's corners.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To retrieve the cell bounds for a cell other than the current cell, use <xref:System.Windows.Forms.DataGrid.GetCellBounds%2A>.  
  
   
  
## Examples  
 The following code example gets the <xref:System.Drawing.Rectangle> of the selected cell.  
  
 [!code-cs[Classic DataGrid.GetCurrentCellBounds Example#1](~/add/codesnippet/csharp/m-system.windows.forms.d_107_1.cs)]
 [!code-cpp[Classic DataGrid.GetCurrentCellBounds Example#1](~/add/codesnippet/cpp/m-system.windows.forms.d_107_1.cpp)]
 [!code-vb[Classic DataGrid.GetCurrentCellBounds Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_107_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetOutputTextDelimiter">
      <MemberSignature Language="C#" Value="protected virtual string GetOutputTextDelimiter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetOutputTextDelimiter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the string that is the delimiter between columns when row contents are copied to the Clipboard.</summary>
        <returns>The string value "\t", which represents a tab used to separate columns in a row.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridHScrolled">
      <MemberSignature Language="C#" Value="protected virtual void GridHScrolled (object sender, System.Windows.Forms.ScrollEventArgs se);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GridHScrolled(object sender, class System.Windows.Forms.ScrollEventArgs se) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="se" Type="System.Windows.Forms.ScrollEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">An &lt;xref:System.Object&gt; that contains data about the control.</param>
        <param name="se">A <see cref="T:System.Windows.Forms.ScrollEventArgs" /> that contains the event data.</param>
        <summary>Listens for the scroll event of the horizontal scroll bar.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridLineColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GridLineColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color GridLineColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of the grid lines.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the color of the grid lines. The default is the system color for controls (&lt;xref:System.Drawing.SystemColors.Control%2A&gt;).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No grid line is displayed if the <xref:System.Windows.Forms.DataGrid.GridLineStyle%2A> property is set to `DataGridLineStyle.None`.  
  
   
  
## Examples  
 The following code example sets the color of the grid's lines using a value passed to the method.  
  
 [!code-cs[Classic DataGrid.GridLineColor Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_256_1.cs)]
 [!code-vb[Classic DataGrid.GridLineColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_256_1.vb)]
 [!code-cpp[Classic DataGrid.GridLineColor Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_256_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The value is not set.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridLineStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridLineStyle GridLineStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridLineStyle GridLineStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridLineStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the line style of the grid.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DataGridLineStyle" /> values. The default is <see langword="Solid" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example changes the GridLineStyle property to show no lines.  
  
 [!code-vb[Classic DataGrid.GridLineStyle Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_125_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GridVScrolled">
      <MemberSignature Language="C#" Value="protected virtual void GridVScrolled (object sender, System.Windows.Forms.ScrollEventArgs se);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GridVScrolled(object sender, class System.Windows.Forms.ScrollEventArgs se) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="se" Type="System.Windows.Forms.ScrollEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">An &lt;xref:System.Object&gt; that contains data about the control.</param>
        <param name="se">A <see cref="T:System.Windows.Forms.ScrollEventArgs" /> that contains the event data.</param>
        <summary>Listens for the scroll event of the vertical scroll bar.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color HeaderBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color HeaderBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of all row and column headers.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the background color of row and column headers. The default is the system color for controls, &lt;xref:System.Drawing.SystemColors.Control%2A&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example sets the background color of column headers using a value passed to the method.  
  
 [!code-vb[Classic DataGrid.HeaderBackColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_406_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">While trying to set the property, a <see langword="Color.Empty" /> was passed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderFont">
      <MemberSignature Language="C#" Value="public System.Drawing.Font HeaderFont { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font HeaderFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the font used for column headers.</summary>
        <value>The <see cref="T:System.Drawing.Font" /> that represents the header text.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method only if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>, or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color HeaderForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color HeaderForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color of headers.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the foreground color of the grid's column headers, including the column header text and the plus/minus glyphs. The default is &lt;xref:System.Drawing.SystemColors.ControlText%2A&gt; color.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example sets the foreground color of the grid's column headers.  
  
 [!code-vb[Classic DataGrid.HeaderForeColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_135_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGrid.HitTestInfo HitTest (System.Drawing.Point position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.DataGrid/HitTestInfo HitTest(valuetype System.Drawing.Point position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGrid+HitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="position">A <see cref="T:System.Drawing.Point" /> that represents single x,y coordinate.</param>
        <summary>Gets information, such as row and column number of a clicked point on the grid, about the grid using a specific <see cref="T:System.Drawing.Point" />.</summary>
        <returns>A &lt;xref:System.Windows.Forms.DataGrid.HitTestInfo&gt; that contains specific information about the grid.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGrid.HitTestInfo>, in conjunction with the <xref:System.Windows.Forms.DataGrid.HitTest%2A> method of the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control, is used to determine which part of a <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control the user has clicked. The <xref:System.Windows.Forms.DataGrid.HitTestInfo> contains the row, column, and part of the grid that was clicked. Additionally, the <xref:System.Windows.Forms.DataGrid.HitTestInfo.Type%2A> property returns a <xref:System.Windows.Forms.DataGrid.HitTestType> enumeration.  
  
 The <xref:System.Windows.Forms.DataGrid.HitTest%2A> method takes an x and y argument supplied by the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control's <xref:System.Windows.Forms.Control.DragDrop>, <xref:System.Windows.Forms.Control.DragEnter>, <xref:System.Windows.Forms.Control.DragOver>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, <xref:System.Windows.Forms.Control.MouseUp> and <xref:System.Windows.Forms.Control.MouseWheel> events.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Windows.Forms.DataGrid.HitTest%2A> method in occurs when a user clicks on a grid.  
  
 [!code-vb[Classic DataGrid.HitTest1 Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_40_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGrid.HitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.DataGrid/HitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGrid+HitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The horizontal position of the coordinate.</param>
        <param name="y">The vertical position of the coordinate.</param>
        <summary>Gets information, such as row and column number of a clicked point on the grid, using the x and y coordinate passed to the method.</summary>
        <returns>A &lt;xref:System.Windows.Forms.DataGrid.HitTestInfo&gt; that contains information about the clicked part of the grid.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGrid.HitTestInfo>, in conjunction with the HitTest method of the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control, is used to determine which part of a <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control the user has clicked. The <xref:System.Windows.Forms.DataGrid.HitTestInfo> contains the row, column, and part of the grid that was clicked. Additionally, the <xref:System.Windows.Forms.DataGrid.HitTestInfo.Type%2A> property returns a <xref:System.Windows.Forms.DataGrid.HitTestType> enumeration.  
  
 The HitTest method takes an x and y argument supplied by the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control's <xref:System.Windows.Forms.Control.DragDrop>, <xref:System.Windows.Forms.Control.DragEnter>, <xref:System.Windows.Forms.Control.DragOver>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, <xref:System.Windows.Forms.Control.MouseUp> and <xref:System.Windows.Forms.Control.MouseWheel> events.  
  
   
  
## Examples  
 The following code example uses the HitTest method in an event that occurs when the user clicks in the grid.  
  
 [!code-vb[Classic DataGrid.HitTest Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizScrollBar">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.ScrollBar HorizScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ScrollBar HorizScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the horizontal scroll bar for the grid.</summary>
        <value>The <see cref="T:System.Windows.Forms.ScrollBar" /> for the grid.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsExpanded">
      <MemberSignature Language="C#" Value="public bool IsExpanded (int rowNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsExpanded(int32 rowNumber) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowNumber">The number of the row in question.</param>
        <summary>Gets a value that indicates whether the node of a specified row is expanded or collapsed.</summary>
        <returns>
          <see langword="true" /> if the node is expanded; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example tests each row in the grid, and prints the row number of expanded rows.  
  
 [!code-vb[Classic DataGrid.IsExpanded Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_82_1.vb)]
 [!code-cpp[Classic DataGrid.IsExpanded Example#1](~/add/codesnippet/cpp/m-system.windows.forms.d_82_1.cpp)]
 [!code-cs[Classic DataGrid.IsExpanded Example#1](~/add/codesnippet/csharp/m-system.windows.forms.d_82_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSelected">
      <MemberSignature Language="C#" Value="public bool IsSelected (int row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSelected(int32 row) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="row">The number of the row you are interested in.</param>
        <summary>Gets a value indicating whether a specified row is selected.</summary>
        <returns>
          <see langword="true" /> if the row is selected; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method with the <xref:System.Windows.Forms.DataGrid.Select%2A>, <xref:System.Windows.Forms.DataGrid.UnSelect%2A>, and <xref:System.Windows.Forms.DataGrid.ResetSelection%2A> methods to manipulate the selection state of a particular row.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cpp[MyDataGridClass_ResetHeaderBackColor#5](~/add/codesnippet/cpp/m-system.windows.forms.d_69_1.cpp)]
 [!code-cs[MyDataGridClass_ResetHeaderBackColor#5](~/add/codesnippet/csharp/m-system.windows.forms.d_69_1.cs)]
 [!code-vb[MyDataGridClass_ResetHeaderBackColor#5](~/add/codesnippet/visualbasic/m-system.windows.forms.d_69_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[System.Windows.Forms.DataGridCell cell] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(valuetype System.Windows.Forms.DataGridCell)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Windows.Forms.DataGridCell" />
      </Parameters>
      <Docs>
        <param name="cell">A <see cref="T:System.Windows.Forms.DataGridCell" /> that represents a cell in the grid.</param>
        <summary>Gets or sets the value of a specified <see cref="T:System.Windows.Forms.DataGridCell" />.</summary>
        <value>The value, typed as &lt;xref:System.Object&gt;, of the cell.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property changes the position of the <xref:System.Data.DataView> to the specified row.  
  
   
  
## Examples  
 The following code example sets and gets the value of a cell by declaring a <xref:System.Windows.Forms.DataGridCell> variable, setting its <xref:System.Windows.Forms.DataGridCell.RowNumber%2A> and <xref:System.Windows.Forms.DataGridCell.ColumnNumber%2A> values, then first changing, then returning, the value of the given cell.  
  
 [!code-cpp[Classic DataGrid.this1 Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_421_1.cpp)]
 [!code-vb[Classic DataGrid.this1 Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_421_1.vb)]
 [!code-cs[Classic DataGrid.this1 Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_421_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int rowIndex, int columnIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32, int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The zero-based index of the row containing the value.</param>
        <param name="columnIndex">The zero-based index of the column containing the value.</param>
        <summary>Gets or sets the value of the cell at the specified the row and column.</summary>
        <value>The value, typed as &lt;xref:System.Object&gt;, of the cell.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property changes the position of the <xref:System.Data.DataView> to the specified row.  
  
   
  
## Examples  
 The following code example prints the value contained by the cell at the specified row and index.  
  
 [!code-cpp[Classic DataGrid.this Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_388_1.cpp)]
 [!code-vb[Classic DataGrid.this Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_388_1.vb)]
 [!code-cs[Classic DataGrid.this Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_388_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">While getting or setting, the <paramref name="rowIndex" /> is out of range.  
  
 While getting or setting, the <paramref name="columnIndex" /> is out of range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of the text that you can click to navigate to a child table.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the color of text that is clicked to navigate to a child table. The default is &lt;xref:System.Drawing.SystemColors.HotTrack%2A&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method only if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>, or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LinkHoverColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkHoverColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkHoverColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is not meaningful for this control.</summary>
        <value>The color displayed when hovering over link text.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ListManager">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.CurrencyManager ListManager { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CurrencyManager ListManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CurrencyManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Windows.Forms.CurrencyManager" /> for this <see cref="T:System.Windows.Forms.DataGrid" /> control.</summary>
        <value>The <see cref="T:System.Windows.Forms.CurrencyManager" /> for this <see cref="T:System.Windows.Forms.DataGrid" /> control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.NavigateEventHandler Navigate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.NavigateEventHandler Navigate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NavigateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user navigates to a new table.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Navigate event to reset individual column properties, such as width, as appropriate to the table.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cpp[DataGrid_AllowNavigationChanged#2](~/add/codesnippet/cpp/e-system.windows.forms.d_57_1.cpp)]
 [!code-cs[DataGrid_AllowNavigationChanged#2](~/add/codesnippet/csharp/e-system.windows.forms.d_57_1.cs)]
 [!code-vb[DataGrid_AllowNavigationChanged#2](~/add/codesnippet/visualbasic/e-system.windows.forms.d_57_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NavigateBack">
      <MemberSignature Language="C#" Value="public void NavigateBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NavigateBack() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Navigates back to the table previously displayed in the grid.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the grid has no parent rows, no change occurs.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-vb[Classic DataGrid.NavigateBack Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_27_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NavigateTo">
      <MemberSignature Language="C#" Value="public void NavigateTo (int rowNumber, string relationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NavigateTo(int32 rowNumber, string relationName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowNumber" Type="System.Int32" />
        <Parameter Name="relationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rowNumber">The number of the row to navigate to.</param>
        <param name="relationName">The name of the child relation to navigate to.</param>
        <summary>Navigates to the table specified by row and relation name.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example navigates to the specified row number, in the table specified by child relationship name.  
  
 [!code-cs[Classic DataGrid.NavigateTo Example#1](~/add/codesnippet/csharp/m-system.windows.forms.d_5_1.cs)]
 [!code-vb[Classic DataGrid.NavigateTo Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnAllowNavigationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowNavigationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowNavigationChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.AllowNavigationChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBackButtonClicked">
      <MemberSignature Language="C#" Value="protected void OnBackButtonClicked (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnBackButtonClicked(object sender, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">An &lt;xref:System.Object&gt; that contains data about the control.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains data about the event.</param>
        <summary>Listens for the caption's back button clicked event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnBackColorChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.BackgroundColorChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected override void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnBindingContextChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.BorderStyleChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCaptionVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCaptionVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCaptionVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.CaptionVisibleChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentCellChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentCellChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.CurrentCellChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.DataSourceChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnDataSourceChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected override void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Enter" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnFlatModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnFlatModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFlatModeChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.FlatModeChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnFontChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnForeColorChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the &lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt; event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnHandleCreated method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; containing the event data.</param>
        <summary>Raises the &lt;xref:System.Windows.Forms.Control.DestroyHandle%2A&gt; event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnHandleDestroyed method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs ke);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs ke) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ke" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="ke">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that provides data about the &lt;xref:System.Windows.Forms.Control.OnKeyDown%2A&gt; event.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnKeyDown method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs kpe);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs kpe) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kpe" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="kpe">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains data about the &lt;xref:System.Windows.Forms.Control.OnKeyPress%2A&gt; event</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnKeyPress method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected override void OnLayout (System.Windows.Forms.LayoutEventArgs levent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs levent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levent" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="levent">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event, which repositions controls and updates scroll bars.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnLayout method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected override void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnLeave method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains data about the &lt;xref:System.Windows.Forms.Control.OnMouseDown%2A&gt; event.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-vb[DataGrid.OnMouseDown#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_1_1.vb)]
 [!code-cpp[DataGrid.OnMouseDown#1](~/add/codesnippet/cpp/m-system.windows.forms.d_1_1.cpp)]
 [!code-cs[DataGrid.OnMouseDown#1](~/add/codesnippet/csharp/m-system.windows.forms.d_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains data about the &lt;xref:System.Windows.Forms.Control.OnMouseLeave%2A&gt; event.</param>
        <summary>Creates the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains data about the &lt;xref:System.Windows.Forms.Control.OnMouseMove%2A&gt; event.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains data about the &lt;xref:System.Windows.Forms.Control.OnMouseUp%2A&gt; event.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected override void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains data about the &lt;xref:System.Windows.Forms.Control.OnMouseUp%2A&gt; event.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnNavigate">
      <MemberSignature Language="C#" Value="protected void OnNavigate (System.Windows.Forms.NavigateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnNavigate(class System.Windows.Forms.NavigateEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.NavigateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.NavigateEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.Navigate" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected override void OnPaint (System.Windows.Forms.PaintEventArgs pe);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs pe) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pe" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pe">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> which contains data about the event.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected override void OnPaintBackground (System.Windows.Forms.PaintEventArgs ebe);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs ebe) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ebe" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="ebe">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</param>
        <summary>Overrides &lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A?displayProperty=fullName&gt; to prevent painting the background of the <see cref="T:System.Windows.Forms.DataGrid" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> is a complex control, this override is implemented to have no action. Therefore, calling this method will have no effect.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentRowsLabelStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentRowsLabelStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentRowsLabelStyleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.ParentRowsLabelStyleChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnParentRowsLabelStyleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnParentRowsVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentRowsVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentRowsVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.ParentRowsVisibleChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnReadOnlyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnReadOnlyChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnReadOnlyChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.ReadOnlyChanged" /> event</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnReadOnlyChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderClick">
      <MemberSignature Language="C#" Value="protected void OnRowHeaderClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnRowHeaderClick(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.RowHeaderClick" /> event.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">You must have the <see cref="T:System.Security.Permissions.UIPermission" /> for safe subwindows to set this property.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnScroll">
      <MemberSignature Language="C#" Value="protected void OnScroll (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnScroll(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.Scroll" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnShowParentDetailsButtonClicked">
      <MemberSignature Language="C#" Value="protected void OnShowParentDetailsButtonClicked (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnShowParentDetailsButtonClicked(object sender, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">The source of the event.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.DataGrid.ShowParentDetailsButtonClick" /> event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParentRowsBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ParentRowsBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ParentRowsBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of parent rows.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the color of parent rows. The default is the &lt;xref:System.Drawing.SystemColors.Control%2A&gt; color.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example sets the ParentRowsBackColor property to a new color.  
  
 [!code-vb[Classic DataGrid.ParentRowsBackColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_362_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParentRowsForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ParentRowsForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ParentRowsForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color of parent rows.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the foreground color of parent rows. The default is the &lt;xref:System.Drawing.SystemColors.WindowText%2A&gt; color.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example sets the ParentRowsForeColor property to a new color.  
  
 [!code-vb[Classic DataGrid.ParentRowsForeColor Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_91_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParentRowsLabelStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridParentRowsLabelStyle ParentRowsLabelStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridParentRowsLabelStyle ParentRowsLabelStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridParentRowsLabelStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the way parent row labels are displayed.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DataGridParentRowsLabelStyle" /> values. The default is <see langword="Both" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example cycles through the possible values for the ParentRowsLabelStyle property.  
  
 [!code-vb[Classic DataGrid.ParentRowsLabelStyle Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_50_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The enumerator was not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParentRowsLabelStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ParentRowsLabelStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ParentRowsLabelStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the label style of the parent row is changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ParentRowsLabelStyleChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.d_72_1.cs)]
 [!code-vb[DataGrid_ParentRowsLabelStyleChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.d_72_1.vb)]
 [!code-cpp[DataGrid_ParentRowsLabelStyleChanged#1](~/add/codesnippet/cpp/e-system.windows.forms.d_72_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParentRowsVisible">
      <MemberSignature Language="C#" Value="public bool ParentRowsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ParentRowsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the parent rows of a table are visible.</summary>
        <value>
          <see langword="true" /> if the parent rows are visible; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example toggles the ParentRowsVisible property.  
  
 [!code-vb[Classic DataGrid.ParentRowsVisible Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_382_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParentRowsVisibleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ParentRowsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ParentRowsVisibleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGrid.ParentRowsVisible%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ParentRowsLabelStyleChanged#2](~/add/codesnippet/csharp/e-system.windows.forms.d_33_1.cs)]
 [!code-vb[DataGrid_ParentRowsLabelStyleChanged#2](~/add/codesnippet/visualbasic/e-system.windows.forms.d_33_1.vb)]
 [!code-cpp[DataGrid_ParentRowsLabelStyleChanged#2](~/add/codesnippet/cpp/e-system.windows.forms.d_33_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PreferredColumnWidth">
      <MemberSignature Language="C#" Value="public int PreferredColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(75)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default width of the grid columns in pixels.</summary>
        <value>The default width (in pixels) of columns in the grid.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set this property before resetting the <xref:System.Windows.Forms.DataGrid.DataSource%2A> and <xref:System.Windows.Forms.DataGrid.DataMember%2A> properties (either separately, or through the <xref:System.Windows.Forms.DataGrid.SetDataBinding%2A> method), or the property will have no effect.  
  
 The property cannot be set to a value less than 0.  
  
   
  
## Examples  
 The following code example sets the default column widths to a value passed to the method.  
  
 [!code-vb[Classic DataGrid.PreferredColumnWidth Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_102_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The property value is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PreferredRowHeight">
      <MemberSignature Language="C#" Value="public int PreferredRowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredRowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the preferred row height for the <see cref="T:System.Windows.Forms.DataGrid" /> control.</summary>
        <value>The height of a row.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set this property before resetting the <xref:System.Windows.Forms.DataGrid.DataSource%2A> and <xref:System.Windows.Forms.DataGrid.DataMember%2A> properties (either separately, or through the <xref:System.Windows.Forms.DataGrid.SetDataBinding%2A> method), or the property will have no effect.  
  
   
  
## Examples  
 The following code example first sets a new font, and sets the PreferredRowHeight to the same height as the new font.  
  
 [!code-cs[Classic DataGrid.PreferredRowHeight Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_270_1.cs)]
 [!code-cpp[Classic DataGrid.PreferredRowHeight Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_270_1.cpp)]
 [!code-vb[Classic DataGrid.PreferredRowHeight Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_270_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A <see cref="T:System.Windows.Forms.Keys" /> that contains data about the pressed key.</param>
        <summary>Gets or sets a value that indicates whether a key should be processed further.</summary>
        <returns>
          <see langword="true" />, the key should be processed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The method overrides the <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> method to implement keyboard navigation of the grid.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessGridKey">
      <MemberSignature Language="C#" Value="protected bool ProcessGridKey (System.Windows.Forms.KeyEventArgs ke);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessGridKey(class System.Windows.Forms.KeyEventArgs ke) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ke" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="ke">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains data about the key up or key down event.</param>
        <summary>Processes keys for grid navigation.</summary>
        <returns>
          <see langword="true" />, if the key was processed; otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected override bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" /> that contains data about the event. The parameter is passed by reference.</param>
        <summary>Previews a keyboard message and returns a value indicating if the key was consumed.</summary>
        <returns>
          <see langword="true" />, if the key was consumed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by a child control when the child control receives a keyboard message. The child control calls this method before generating any keyboard events for the message. If this method returns `true`, the child control considers the message consumed and does not generate any keyboard events.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProcessTabKey">
      <MemberSignature Language="C#" Value="protected bool ProcessTabKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessTabKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A <see cref="T:System.Windows.Forms.Keys" /> that contains data about which the pressed key.</param>
        <summary>Gets a value indicating whether the Tab key should be processed.</summary>
        <returns>
          <see langword="true" /> if the TAB key should be processed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for drawing UI. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the grid is in read-only mode.</summary>
        <value>
          <see langword="true" /> if the grid is in read-only mode; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In read-only mode, the grid can be scrolled, nodes can be expanded or collapsed, and so on. However, no additions, edits, or deletes can take place.  
  
 The <xref:System.Windows.Forms.DataGridColumnStyle> also has a <xref:System.Windows.Forms.DataGridColumnStyle.ReadOnly%2A> property that can be set to true to prevent data from being edited, on a column-by-column basis.  
  
 The ReadOnly can be set to true if you want to prohibit the user from editing the data directly in the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. For example, you might want to let users to see all columns in a table, but allow them to edit specific fields only through <xref:System.Windows.Forms.TextBox> controls on a different form.  
  
   
  
## Examples  
 The following code example toggles the ReadOnly property.  
  
 [!code-vb[Classic DataGrid.ReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_298_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ReadOnlyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ReadOnlyChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;xref:System.Windows.Forms.DataGrid.ReadOnly%2A&gt; property value changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[MyDataGridClass_FlatMode_ReadOnly#2](~/add/codesnippet/csharp/e-system.windows.forms.d_134_1.cs)]
 [!code-cpp[MyDataGridClass_FlatMode_ReadOnly#2](~/add/codesnippet/cpp/e-system.windows.forms.d_134_1.cpp)]
 [!code-vb[MyDataGridClass_FlatMode_ReadOnly#2](~/add/codesnippet/visualbasic/e-system.windows.forms.d_134_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetAlternatingBackColor">
      <MemberSignature Language="C#" Value="public void ResetAlternatingBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAlternatingBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.AlternatingBackColor%2A&gt; property to its default color.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. You can use the <xref:System.Windows.Forms.DataGrid.ShouldSerializeAlternatingBackColor%2A> method to determine whether the property value has changed from its default.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/m-system.windows.forms.d_66_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/m-system.windows.forms.d_66_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/m-system.windows.forms.d_66_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public override void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.BackColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/m-system.windows.forms.d_29_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/m-system.windows.forms.d_29_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/m-system.windows.forms.d_29_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public override void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetForeColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.ForeColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/m-system.windows.forms.d_106_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/m-system.windows.forms.d_106_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/m-system.windows.forms.d_106_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetGridLineColor">
      <MemberSignature Language="C#" Value="public void ResetGridLineColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetGridLineColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.GridLineColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. You can use the <xref:System.Windows.Forms.DataGrid.ShouldSerializeGridLineColor%2A> method to determine whether the property value has changed from its default.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/m-system.windows.forms.d_18_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/m-system.windows.forms.d_18_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/m-system.windows.forms.d_18_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetHeaderBackColor">
      <MemberSignature Language="C#" Value="public void ResetHeaderBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetHeaderBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.HeaderBackColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. You can use the <xref:System.Windows.Forms.DataGrid.ShouldSerializeHeaderBackColor%2A> method to determine whether the property value has changed from its default.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cpp[MyDataGridClass_ResetHeaderBackColor#1](~/add/codesnippet/cpp/m-system.windows.forms.d_61_1.cpp)]
 [!code-cs[MyDataGridClass_ResetHeaderBackColor#1](~/add/codesnippet/csharp/m-system.windows.forms.d_61_1.cs)]
 [!code-vb[MyDataGridClass_ResetHeaderBackColor#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_61_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetHeaderFont">
      <MemberSignature Language="C#" Value="public void ResetHeaderFont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetHeaderFont() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.HeaderFont%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. You can use the <xref:System.Windows.Forms.DataGrid.ShouldSerializeHeaderFont%2A> method to determine whether the property value has changed from its default.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cpp[MyDataGridClass_ResetHeaderBackColor#3](~/add/codesnippet/cpp/m-system.windows.forms.d_10_1.cpp)]
 [!code-cs[MyDataGridClass_ResetHeaderBackColor#3](~/add/codesnippet/csharp/m-system.windows.forms.d_10_1.cs)]
 [!code-vb[MyDataGridClass_ResetHeaderBackColor#3](~/add/codesnippet/visualbasic/m-system.windows.forms.d_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetHeaderForeColor">
      <MemberSignature Language="C#" Value="public void ResetHeaderForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetHeaderForeColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.HeaderForeColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. You can use the <xref:System.Windows.Forms.DataGrid.ShouldSerializeHeaderForeColor%2A> method to determine whether the property value has changed from its default.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cpp[MyDataGridClass_ResetHeaderBackColor#2](~/add/codesnippet/cpp/m-system.windows.forms.d_65_1.cpp)]
 [!code-cs[MyDataGridClass_ResetHeaderBackColor#2](~/add/codesnippet/csharp/m-system.windows.forms.d_65_1.cs)]
 [!code-vb[MyDataGridClass_ResetHeaderBackColor#2](~/add/codesnippet/visualbasic/m-system.windows.forms.d_65_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetLinkColor">
      <MemberSignature Language="C#" Value="public void ResetLinkColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetLinkColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.LinkColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/m-system.windows.forms.d_49_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/m-system.windows.forms.d_49_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/m-system.windows.forms.d_49_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetLinkHoverColor">
      <MemberSignature Language="C#" Value="public void ResetLinkHoverColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetLinkHoverColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.LinkHoverColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. You can use the <xref:System.Windows.Forms.DataGrid.ShouldSerializeLinkHoverColor%2A> method to determine whether the property value has changed from its default.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetSelection">
      <MemberSignature Language="C#" Value="protected void ResetSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ResetSelection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Turns off selection for all rows that are selected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method with the <xref:System.Windows.Forms.DataGrid.IsSelected%2A>, <xref:System.Windows.Forms.DataGrid.Select%2A>, and <xref:System.Windows.Forms.DataGrid.UnSelect%2A> methods to manipulate the selection state of a particular row.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetSelectionBackColor">
      <MemberSignature Language="C#" Value="public void ResetSelectionBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetSelectionBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.SelectionBackColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. You can use the <xref:System.Windows.Forms.DataGrid.ShouldSerializeSelectionBackColor%2A> method to determine whether the property value has changed from its default.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/m-system.windows.forms.d_44_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/m-system.windows.forms.d_44_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/m-system.windows.forms.d_44_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetSelectionForeColor">
      <MemberSignature Language="C#" Value="public void ResetSelectionForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetSelectionForeColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Windows.Forms.DataGrid.SelectionForeColor%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>. You can use the <xref:System.Windows.Forms.DataGrid.ShouldSerializeSelectionForeColor%2A> method to determine whether the property value has changed from its default.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/m-system.windows.forms.d_46_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/m-system.windows.forms.d_46_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/m-system.windows.forms.d_46_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderClick">
      <MemberSignature Language="C#" Value="protected event EventHandler RowHeaderClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeaderClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a row header is clicked.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersVisible">
      <MemberSignature Language="C#" Value="public bool RowHeadersVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RowHeadersVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether row headers are visible.</summary>
        <value>
          <see langword="true" /> if row headers are visible; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderWidth">
      <MemberSignature Language="C#" Value="public int RowHeaderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowHeaderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(35)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of row headers.</summary>
        <value>The width of row headers in the <see cref="T:System.Windows.Forms.DataGrid" />. The default is 35.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cpp[MyDataGridClass_ResetHeaderBackColor#6](~/add/codesnippet/cpp/p-system.windows.forms.d_427_1.cpp)]
 [!code-cs[MyDataGridClass_ResetHeaderBackColor#6](~/add/codesnippet/csharp/p-system.windows.forms.d_427_1.cs)]
 [!code-vb[MyDataGridClass_ResetHeaderBackColor#6](~/add/codesnippet/visualbasic/p-system.windows.forms.d_427_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event EventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Scroll" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user scrolls the <see cref="T:System.Windows.Forms.DataGrid" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_CaptionVisibleChanged#3](~/add/codesnippet/csharp/e-system.windows.forms.d_105_1.cs)]
 [!code-cpp[DataGrid_CaptionVisibleChanged#3](~/add/codesnippet/cpp/e-system.windows.forms.d_105_1.cpp)]
 [!code-vb[DataGrid_CaptionVisibleChanged#3](~/add/codesnippet/visualbasic/e-system.windows.forms.d_105_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (int row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select(int32 row) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="row">The index of the row to select.</param>
        <summary>Selects a specified row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method with the <xref:System.Windows.Forms.DataGrid.IsSelected%2A>, <xref:System.Windows.Forms.DataGrid.UnSelect%2A>, and <xref:System.Windows.Forms.DataGrid.ResetSelection%2A> methods to manipulate the selection state of a particular row.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cpp[MyDataGridClass_ResetHeaderBackColor#4](~/add/codesnippet/cpp/m-system.windows.forms.d_84_1.cpp)]
 [!code-cs[MyDataGridClass_ResetHeaderBackColor#4](~/add/codesnippet/csharp/m-system.windows.forms.d_84_1.cs)]
 [!code-vb[MyDataGridClass_ResetHeaderBackColor#4](~/add/codesnippet/visualbasic/m-system.windows.forms.d_84_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectionBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of selected rows.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> that represents the background color of selected rows. The default is the &lt;xref:System.Drawing.SystemBrushes.ActiveCaption%2A&gt; color.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/p-system.windows.forms.d_183_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/p-system.windows.forms.d_183_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/p-system.windows.forms.d_183_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectionForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or set the foreground color of selected rows.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> representing the foreground color of selected rows. The default is the &lt;xref:System.Drawing.SystemBrushes.ActiveCaptionText%2A&gt; color.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_ColorMembers#2](~/add/codesnippet/csharp/p-system.windows.forms.d_164_1.cs)]
 [!code-vb[DataGrid_ColorMembers#2](~/add/codesnippet/visualbasic/p-system.windows.forms.d_164_1.vb)]
 [!code-cpp[DataGrid_ColorMembers#2](~/add/codesnippet/cpp/p-system.windows.forms.d_164_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetDataBinding">
      <MemberSignature Language="C#" Value="public void SetDataBinding (object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDataBinding(object dataSource, string dataMember) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSource">The data source for the <see cref="T:System.Windows.Forms.DataGrid" /> control.</param>
        <param name="dataMember">The &lt;xref:System.Windows.Forms.DataGrid.DataMember%2A&gt; string that specifies the table to bind to within the object returned by the &lt;xref:System.Windows.Forms.DataGrid.DataSource%2A&gt; property.</param>
        <summary>Sets the &lt;xref:System.Windows.Forms.DataGrid.DataSource%2A&gt; and &lt;xref:System.Windows.Forms.DataGrid.DataMember%2A&gt; properties at run time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You must use the SetDataBinding method at run time to reset the <xref:System.Windows.Forms.DataGrid.DataSource%2A> property.  
  
 See the <xref:System.Windows.Forms.DataGrid.DataSource%2A> property for more details about setting a valid data source.  
  
 You can create a grid that enables users to edit data but prevents them from adding new rows by using a <xref:System.Data.DataView> as the data source and setting the <xref:System.Data.DataView.AllowNew%2A> property to `false`. When the <xref:System.Windows.Forms.DataGrid.DataSource%2A> is a <xref:System.Data.DataView> or <xref:System.Data.DataTable>, set the <xref:System.Windows.Forms.DataGrid.DataMember%2A> to an empty string ("").  
  
   
  
## Examples  
 The following code example sets the <xref:System.Windows.Forms.DataGrid.DataSource%2A> and <xref:System.Windows.Forms.DataGrid.DataMember%2A> to a <xref:System.Data.DataSet>, and a <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>, respectively.  
  
 [!code-cs[Classic DataGrid.SetDataBinding Example#1](~/add/codesnippet/csharp/m-system.windows.forms.d_56_1.cs)]
 [!code-vb[Classic DataGrid.SetDataBinding Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_56_1.vb)]
 [!code-cpp[Classic DataGrid.SetDataBinding Example#1](~/add/codesnippet/cpp/m-system.windows.forms.d_56_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">One or more of the arguments are invalid.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="dataSource" /> argument is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeAlternatingBackColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeAlternatingBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeAlternatingBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.AlternatingBackColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeBackgroundColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeBackgroundColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeBackgroundColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.BackgroundColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCaptionBackColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeCaptionBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeCaptionBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Windows.Forms.DataGrid.CaptionBackColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method only if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>, or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCaptionForeColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeCaptionForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeCaptionForeColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Windows.Forms.DataGrid.CaptionForeColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method only if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>, or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeGridLineColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeGridLineColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeGridLineColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.GridLineColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeHeaderBackColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeHeaderBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeHeaderBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.HeaderBackColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeHeaderFont">
      <MemberSignature Language="C#" Value="protected bool ShouldSerializeHeaderFont ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ShouldSerializeHeaderFont() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.HeaderFont%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeHeaderForeColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeHeaderForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeHeaderForeColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.HeaderForeColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeLinkHoverColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeLinkHoverColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeLinkHoverColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.LinkHoverColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeParentRowsBackColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeParentRowsBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeParentRowsBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.ParentRowsBackColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method only if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>, or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeParentRowsForeColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeParentRowsForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeParentRowsForeColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.ParentRowsForeColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method only if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>, or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializePreferredRowHeight">
      <MemberSignature Language="C#" Value="protected bool ShouldSerializePreferredRowHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ShouldSerializePreferredRowHeight() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.PreferredRowHeight%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSelectionBackColor">
      <MemberSignature Language="C#" Value="protected bool ShouldSerializeSelectionBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ShouldSerializeSelectionBackColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.SelectionBackColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSelectionForeColor">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeSelectionForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeSelectionForeColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Forms.DataGrid.SelectionForeColor%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> or creating your own control incorporating the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowParentDetailsButtonClick">
      <MemberSignature Language="C#" Value="public event EventHandler ShowParentDetailsButtonClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShowParentDetailsButtonClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see langword="ShowParentDetails" /> button is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cpp[DataGrid_ShowParentDetailsButtonClick#1](~/add/codesnippet/cpp/e-system.windows.forms.d_117_1.cpp)]
 [!code-vb[DataGrid_ShowParentDetailsButtonClick#1](~/add/codesnippet/visualbasic/e-system.windows.forms.d_117_1.vb)]
 [!code-cs[DataGrid_ShowParentDetailsButtonClick#1](~/add/codesnippet/csharp/e-system.windows.forms.d_117_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the site of the control.</summary>
        <value>The <see cref="T:System.ComponentModel.ISite" /> associated with the Control, if any.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SubObjectsSiteChange">
      <MemberSignature Language="C#" Value="public void SubObjectsSiteChange (bool site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SubObjectsSiteChange(bool site) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="site" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="site">
          <see langword="true" /> to add the <see cref="T:System.Windows.Forms.DataGridTableStyle" /> objects to a container; <see langword="false" /> to remove them.</param>
        <summary>Adds or removes the <see cref="T:System.Windows.Forms.DataGridTableStyle" /> objects from the container that is associated with the <see cref="T:System.Windows.Forms.DataGrid" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TableStyles">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.GridTableStylesCollection TableStyles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.GridTableStylesCollection TableStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GridTableStylesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of <see cref="T:System.Windows.Forms.DataGridTableStyle" /> objects for the grid.</summary>
        <value>A <see cref="T:System.Windows.Forms.GridTableStylesCollection" /> that represents the collection of <see cref="T:System.Windows.Forms.DataGridTableStyle" /> objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Forms.GridTableStylesCollection> retrieved through the TableStyles property to create customized views of each table displayed by the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control.  
  
 By default, the collection returned by TableStyles property does not contain any <xref:System.Windows.Forms.DataGridTableStyle> objects. To create a set of customized views:  
  
1.  Create a <xref:System.Windows.Forms.DataGridTableStyle>.  
  
2.  Set the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> of the grid table object to the <xref:System.Data.DataTable.TableName%2A> of the <xref:System.Data.DataTable>.  
  
3.  Add <xref:System.Windows.Forms.DataGridColumnStyle> objects, one for each grid column you want to show, to the <xref:System.Windows.Forms.GridColumnStylesCollection> returned by the <xref:System.Windows.Forms.DataGridTableStyle.GridColumnStyles%2A> property.  
  
4.  Set the <xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A> of each <xref:System.Windows.Forms.DataGridColumnStyle> to the <xref:System.Data.DataColumn.ColumnName%2A> of a <xref:System.Data.DataColumn>.  
  
5.  Add the <xref:System.Windows.Forms.DataGridTableStyle> object to the collection returned by TableStyles property.  
  
> [!CAUTION]
>  Always create <xref:System.Windows.Forms.DataGridColumnStyle> objects and add them to the <xref:System.Windows.Forms.GridColumnStylesCollection> before adding <xref:System.Windows.Forms.DataGridTableStyle> objects to the <xref:System.Windows.Forms.GridTableStylesCollection>. When you add an empty <xref:System.Windows.Forms.DataGridTableStyle> with a valid <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> value to the collection, <xref:System.Windows.Forms.DataGridColumnStyle> objects are automatically generated for you. Consequently, an exception will be thrown if you try to add new <xref:System.Windows.Forms.DataGridColumnStyle> objects with duplicate <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> values to the <xref:System.Windows.Forms.GridColumnStylesCollection>.  
  
   
  
## Examples  
 The following code example creates one <xref:System.Windows.Forms.DataGridTableStyle> for each <xref:System.Data.DataTable> found in a <xref:System.Data.DataSet>, and sets the <xref:System.Windows.Forms.DataGridTableStyle.MappingName%2A> of the <xref:System.Windows.Forms.DataGridTableStyle> to the <xref:System.Data.DataTable.TableName%2A> of the <xref:System.Data.DataTable>. The <xref:System.Windows.Forms.DataGridTableStyle> is then added to the <xref:System.Windows.Forms.GridTableStylesCollection> returned by the TableStyles property. The example also prints the <xref:System.Windows.Forms.DataGridColumnStyle.MappingName%2A> of each <xref:System.Windows.Forms.DataGridColumnStyle> in the <xref:System.Windows.Forms.GridColumnStylesCollection> returned by the <xref:System.Windows.Forms.DataGridTableStyle.GridColumnStyles%2A> property of each <xref:System.Windows.Forms.DataGridTableStyle> in the <xref:System.Windows.Forms.GridTableStylesCollection>.  
  
 [!code-cs[Classic DataGrid.TableStyles Example#1](~/add/codesnippet/csharp/p-system.windows.forms.d_103_1.cs)]
 [!code-vb[Classic DataGrid.TableStyles Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_103_1.vb)]
 [!code-cpp[Classic DataGrid.TableStyles Example#1](~/add/codesnippet/cpp/p-system.windows.forms.d_103_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is not meaningful for this control.</summary>
        <value>The text associated with this control.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the &lt;xref:System.Windows.Forms.DataGrid.Text%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGrid.Text%2A> property is not meaningful for this control, although you can change its value and handle the TextChanged event to detect the change.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UnSelect">
      <MemberSignature Language="C#" Value="public void UnSelect (int row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnSelect(int32 row) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="row">The index of the row to deselect.</param>
        <summary>Unselects a specified row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method with the <xref:System.Windows.Forms.DataGrid.IsSelected%2A>, <xref:System.Windows.Forms.DataGrid.Select%2A>, and <xref:System.Windows.Forms.DataGrid.ResetSelection%2A> methods to manipulate the selection state of a particular row.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member.  
  
 [!code-cs[DataGrid_UnSelect#1](~/add/codesnippet/csharp/m-system.windows.forms.d_109_1.cs)]
 [!code-vb[DataGrid_UnSelect#1](~/add/codesnippet/visualbasic/m-system.windows.forms.d_109_1.vb)]
 [!code-cpp[DataGrid_UnSelect#1](~/add/codesnippet/cpp/m-system.windows.forms.d_109_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VertScrollBar">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.ScrollBar VertScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ScrollBar VertScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the vertical scroll bar of the control.</summary>
        <value>The vertical <see cref="T:System.Windows.Forms.ScrollBar" /> of the grid.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VisibleColumnCount">
      <MemberSignature Language="C#" Value="public int VisibleColumnCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisibleColumnCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of visible columns.</summary>
        <value>The number of columns visible in the viewport. The viewport is the rectangular area through which the grid is visible. The size of the viewport depends on the size of the <see cref="T:System.Windows.Forms.DataGrid" /> control; if you allow users to resize the control, the viewport will also be affected.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The number of visible columns can change depending on their width. For example, if a default width for all columns is set, but the width of a new column is set twice as large, the number of visible columns can be reduced by at least one.  
  
   
  
## Examples  
 The following code example returns the number of visible columns.  
  
 [!code-vb[Classic DataGrid.VisibleColumnCount Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_55_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VisibleRowCount">
      <MemberSignature Language="C#" Value="public int VisibleRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisibleRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of rows visible.</summary>
        <value>The number of rows visible in the viewport. The viewport is the rectangular area through which the grid is visible. The size of the viewport depends on the size of the <see cref="T:System.Windows.Forms.DataGrid" /> control; if you allow users to resize the control, the viewport will also be affected.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The number of visible rows can be changed at run time if the user is allowed to resize the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control.  
  
   
  
## Examples  
 The following code example returns the number of rows visible in a <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control.  
  
 [!code-vb[Classic DataGrid.VisibleRowCount Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.d_35_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>