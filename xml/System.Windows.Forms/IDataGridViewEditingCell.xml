<Type Name="IDataGridViewEditingCell" FullName="System.Windows.Forms.IDataGridViewEditingCell">
  <TypeSignature Language="C#" Value="public interface IDataGridViewEditingCell" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataGridViewEditingCell" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Defines common functionality for a cell that allows the manipulation of its value.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This interface is implemented by classes such as <xref:System.Windows.Forms.DataGridViewCheckBoxCell> that derive from <xref:System.Windows.Forms.DataGridViewCell> and provide a user interface (UI) for specifying values without hosting an editing control. The UI in this case is displayed regardless of whether the cell is in edit mode.  
  
 Other cell types, such as <xref:System.Windows.Forms.DataGridViewButtonCell>, provide a UI but do not store user-specified values. In this case, the cell type does not implement IDataGridViewEditingCell or host an editing control.  
  
 Cell types that display an editing control when the cell is in edit mode, such as <xref:System.Windows.Forms.DataGridViewTextBoxCell>, do not implement IDataGridViewEditingCell but instead provide a companion class that implements <xref:System.Windows.Forms.IDataGridViewEditingControl>. For example, <xref:System.Windows.Forms.DataGridViewTextBoxCell> provides a <xref:System.Windows.Forms.DataGridViewTextBoxEditingControl> that derives from the <xref:System.Windows.Forms.TextBox> control and implements <xref:System.Windows.Forms.IDataGridViewEditingControl>. In this case, the cell <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> property is set to a <xref:System.Type> object representing the editing control type. For information about implementing <xref:System.Windows.Forms.IDataGridViewEditingControl>, see [How to: Host Controls in Windows Forms DataGridView Cells](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="EditingCellFormattedValue">
      <MemberSignature Language="C#" Value="public object EditingCellFormattedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object EditingCellFormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the formatted value of the cell.</summary>
        <value>An &lt;xref:System.Object?displayProperty=fullName&gt; that contains the cell's value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The formatted value represents the value as it is displayed in the cell's user interface. The formatted value may be different in absolute value and even data type than the actual value contained in the cell.  
  
 Implementations of this property typically return a value retrieved by calling the <xref:System.Windows.Forms.IDataGridViewEditingCell.GetEditingCellFormattedValue%2A> method and passing in the <xref:System.Windows.Forms.DataGridViewDataErrorContexts> value.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditingCellValueChanged">
      <MemberSignature Language="C#" Value="public bool EditingCellValueChanged { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EditingCellValueChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the value of the cell has changed.</summary>
        <value>
          <see langword="true" /> if the value of the cell has changed; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is set to `true` to indicate that the cell value has been modified and that its user interface (UI) may need to be updated to reflect this change in value. The owning cell or table should reset this property to `false` after an update.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEditingCellFormattedValue">
      <MemberSignature Language="C#" Value="public object GetEditingCellFormattedValue (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEditingCellFormattedValue(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values that specifies the context in which the data is needed.</param>
        <summary>Retrieves the formatted value of the cell.</summary>
        <returns>An &lt;xref:System.Object&gt; that represents the formatted version of the cell contents.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The formatted value represents the value as it is displayed in the cell's user interface. The formatted value may be different in absolute value and even data type than the actual value contained in the cell.  
  
 To set the formatted value of the cell, use the <xref:System.Windows.Forms.IDataGridViewEditingCell.EditingCellFormattedValue%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrepareEditingCellForEdit">
      <MemberSignature Language="C#" Value="public void PrepareEditingCellForEdit (bool selectAll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareEditingCellForEdit(bool selectAll) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectAll">
          <see langword="true" /> to select the cell contents; otherwise, <see langword="false" />.</param>
        <summary>Prepares the currently selected cell for editing</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The purpose of this method is to prepare the cell and its contents for editing. For example, you might want to put the insertion point at the end of the cell contents, or change how the contents are aligned.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>