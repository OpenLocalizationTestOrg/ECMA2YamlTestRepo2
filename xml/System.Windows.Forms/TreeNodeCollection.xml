<Type Name="TreeNodeCollection" FullName="System.Windows.Forms.TreeNodeCollection">
  <TypeSignature Language="C#" Value="public class TreeNodeCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a collection of <see cref="T:System.Windows.Forms.TreeNode" /> objects.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, and <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> methods enable you to add and remove individual tree nodes from the collection.  
  
> [!NOTE]
>  Enumerating the collection and removing nodes is not supported.  
  
 You can also use the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods to add or remove all the tree nodes from the collection.  
  
 Classes cannot inherit from the TreeNodeCollection class.  
  
   
  
## Examples  
 The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/t-system.windows.forms.t_6_1.vb)]
 [!code-cs[TreeView#1](~/add/codesnippet/csharp/t-system.windows.forms.t_6_1.cs)]
 [!code-cpp[TreeView#1](~/add/codesnippet/cpp/t-system.windows.forms.t_6_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The label text displayed by the <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Adds a new tree node with the specified label text to the end of the current tree node collection.</summary>
        <returns>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the tree node being added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
 To remove a <xref:System.Windows.Forms.TreeNode> that you previously added, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.  
  
   
  
## Examples  
 The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_56_1.vb)]
 [!code-cs[TreeView#1](~/add/codesnippet/csharp/m-system.windows.forms.t_56_1.cs)]
 [!code-cpp[TreeView#1](~/add/codesnippet/cpp/m-system.windows.forms.t_56_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to add to the collection.</param>
        <summary>Adds a previously created tree node to the end of the tree node collection.</summary>
        <returns>The zero-based index value of the <see cref="T:System.Windows.Forms.TreeNode" /> added to the tree node collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This version of the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> method allows you to add previously created <xref:System.Windows.Forms.TreeNode> objects to the end of the tree node collection.  
  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
 To remove a <xref:System.Windows.Forms.TreeNode> that you previously added, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.  
  
> [!NOTE]
>  A <xref:System.Windows.Forms.TreeNode> can be assigned to only one <xref:System.Windows.Forms.TreeView> control at a time. To add the tree node to a new tree view control, you must remove it from the other tree view first or clone it.  
  
   
  
## Examples  
 The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_22_1.vb)]
 [!code-cs[TreeView#1](~/add/codesnippet/csharp/m-system.windows.forms.t_22_1.cs)]
 [!code-cpp[TreeView#1](~/add/codesnippet/cpp/m-system.windows.forms.t_22_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="node" /> is currently assigned to another <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <summary>Creates a new tree node with the specified key and text, and adds it to the collection.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <param name="imageIndex">The index of the image to display in the tree node.</param>
        <summary>Creates a tree node with the specified key, text, and image, and adds it to the collection.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The `imageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 The tree node is added to the end of the collection. You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <param name="imageKey">The image to display in the tree node.</param>
        <summary>Creates a tree node with the specified key, text, and image, and adds it to the collection.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The tree node is added to the end of the collection. You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
 The `imageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <param name="imageIndex">The index of the image to display in the tree node.</param>
        <param name="selectedImageIndex">The index of the image to be displayed in the tree node when it is in a selected state.</param>
        <summary>Creates a tree node with the specified key, text, and images, and adds it to the collection.</summary>
        <returns>The tree node that was added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The tree node is added to the end of the collection. You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
 The `imageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 The `selectedImageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <param name="imageKey">The key of the image to display in the tree node.</param>
        <param name="selectedImageKey">The key of the image to display when the node is in a selected state.</param>
        <summary>Creates a tree node with the specified key, text, and images, and adds it to the collection.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The tree node is added to the end of the collection. You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
 The `imageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 The `selectedImageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.TreeNode[] nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.TreeNode[] nodes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="nodes">An array of <see cref="T:System.Windows.Forms.TreeNode" /> objects representing the tree nodes to add to the collection.</param>
        <summary>Adds an array of previously created tree nodes to the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode> objects contained in the `nodes` array are appended to the end of the collection.  
  
 You can use the AddRange method to quickly add a group of previously created <xref:System.Windows.Forms.TreeNode> objects to the collection instead of manually adding each <xref:System.Windows.Forms.TreeNode> to the collection using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> method.  
  
 To remove a <xref:System.Windows.Forms.TreeNode> that you previously added, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.  
  
   
  
## Examples  
 The following code example copies the <xref:System.Windows.Forms.TreeNodeCollection> from a <xref:System.Windows.Forms.TreeView> to a temporary <xref:System.Array>, and then adds the contents of the array to another <xref:System.Windows.Forms.TreeView> using the AddRange method. The <xref:System.Windows.Forms.TreeNodeCollection> from the source <xref:System.Windows.Forms.TreeView> is cleared using the <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> method. This example requires that you have two <xref:System.Windows.Forms.TreeView> controls, one with a collection of <xref:System.Windows.Forms.TreeNode> objects.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/add/codesnippet/cpp/ef635824-b7a0-4e6a-bbd4-_1.cpp)]
 [!code-vb[TreeNodeCollection_Clear#1](~/add/codesnippet/visualbasic/ef635824-b7a0-4e6a-bbd4-_1.vb)]
 [!code-cs[TreeNodeCollection_Clear#1](~/add/codesnippet/csharp/ef635824-b7a0-4e6a-bbd4-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nodes" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="nodes" /> is the child of another <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all tree nodes from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this method to clear the entire collection of tree nodes from a tree view.  
  
 To remove an individual tree node from the collection, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> or <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> methods.  
  
 To add new <xref:System.Windows.Forms.TreeNode> objects to the collection, use the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
   
  
## Examples  
 The following code example copies the <xref:System.Windows.Forms.TreeNodeCollection> from a <xref:System.Windows.Forms.TreeView> to a temporary <xref:System.Array>, and then adds the contents of the array to another <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> method. The <xref:System.Windows.Forms.TreeNodeCollection> from the source <xref:System.Windows.Forms.TreeView> is cleared using the Clear method. This example requires that you have two <xref:System.Windows.Forms.TreeView> controls, one with a collection of <xref:System.Windows.Forms.TreeNode> objects.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/add/codesnippet/cpp/m-system.windows.forms.t_20_1.cpp)]
 [!code-vb[TreeNodeCollection_Clear#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_20_1.vb)]
 [!code-cs[TreeNodeCollection_Clear#1](~/add/codesnippet/csharp/m-system.windows.forms.t_20_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to locate in the collection.</param>
        <summary>Determines whether the specified tree node is a member of the collection.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Windows.Forms.TreeNode" /> is a member of the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables you to determine whether a <xref:System.Windows.Forms.TreeNode> is a member of the collection before attempting to perform operations on the <xref:System.Windows.Forms.TreeNode>. You can use this method to confirm that a <xref:System.Windows.Forms.TreeNode> has been added to or is still a member of the collection.  
  
 The amount of time this method takes is proportional to the size of the node collection, so you may want to avoid using it with large collections.  
  
 This method checks for reference equality only. You cannot use it to determine whether an equivalent but different node is in the collection.  
  
> [!NOTE]
>  One implication of the reference-equality requirement is that you cannot customize the behavior of this method for derived <xref:System.Windows.Forms.TreeNode> types by overriding the <xref:System.Object.Equals%2A> method of the <xref:System.Windows.Forms.TreeNode> class.  
  
   
  
## Examples  
 The following code example determines if a specified <xref:System.Windows.Forms.TreeNode> is within a <xref:System.Windows.Forms.TreeNodeCollection>, and then enumerates the collection. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains a <xref:System.Windows.Forms.TreeNode> named `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/cpp/049b6658-8822-4453-9f89-_1.cpp)]
 [!code-cs[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/csharp/049b6658-8822-4453-9f89-_1.cs)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/visualbasic/049b6658-8822-4453-9f89-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.TreeNode" /> to search for.</param>
        <summary>Determines whether the collection contains a tree node with the specified key.</summary>
        <returns>
          <see langword="true" /> to indicate the collection contains a <see cref="T:System.Windows.Forms.TreeNode" /> with the specified key; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The key comparison is not case-sensitive. If the `key` parameter is `null` or an empty string, the <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> property returns `false`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">The destination array.</param>
        <param name="index">The index in the destination array at which storing begins.</param>
        <summary>Copies the entire collection into an existing array at a specified location within the array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example displays the number of <xref:System.Windows.Forms.TreeNode> objects in a <xref:System.Windows.Forms.TreeNodeCollection>, copies the contents of the collection to an <xref:System.Object> array, and displays a list of the tree nodes in a <xref:System.Windows.Forms.Label> control. This example requires that you have a <xref:System.Windows.Forms.TreeView> with at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeNodeCollection>, and a <xref:System.Windows.Forms.Label> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-cs[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/csharp/m-system.windows.forms.t_31_1.cs)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_31_1.vb)]
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/cpp/m-system.windows.forms.t_31_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the total number of <see cref="T:System.Windows.Forms.TreeNode" /> objects in the collection.</summary>
        <value>The total number of <see cref="T:System.Windows.Forms.TreeNode" /> objects in the collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Count property holds the number of <xref:System.Windows.Forms.TreeNode> objects assigned to the collection. You can use the Count property value as the upper bounds of a loop to iterate through a collection.  
  
> [!NOTE]
>  Because the index value of a collection is a zero-based index, you must subtract one from the looping variable. If you do not account for this, you will exceed the upper bounds of the collection and throw an <xref:System.IndexOutOfRangeException> exception.  
  
   
  
## Examples  
 The following code example displays the number of <xref:System.Windows.Forms.TreeNode> objects in a <xref:System.Windows.Forms.TreeNodeCollection>, copies the contents of the collection to an <xref:System.Object> array, and displays a list of the tree nodes in a <xref:System.Windows.Forms.Label> control. This example requires that you have a <xref:System.Windows.Forms.TreeView> with at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeNodeCollection>, and a <xref:System.Windows.Forms.Label> control on a <xref:System.Windows.Forms.Form>.  
  
 [!code-cs[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/csharp/p-system.windows.forms.t_28_1.cs)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_28_1.vb)]
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/cpp/p-system.windows.forms.t_28_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">The name of the tree node to search for.</param>
        <param name="searchAllChildren">
          <see langword="true" /> to search child nodes of tree nodes; otherwise, <see langword="false" />.</param>
        <summary>Finds the tree nodes with specified key, optionally searching subnodes.</summary>
        <returns>An array of <see cref="T:System.Windows.Forms.TreeNode" /> objects whose &lt;xref:System.Windows.Forms.TreeNode.Name%2A&gt; property matches the specified key.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The key comparison is not case-sensitive. If the `key` parameter is `null` or an empty string, or there are no matches, the <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> property returns an empty array`.`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that can be used to iterate through the tree node collection.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerator&gt; that represents the tree node collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example determines if a specified <xref:System.Windows.Forms.TreeNode> is within a <xref:System.Windows.Forms.TreeNodeCollection>, and then enumerates the collection. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains a <xref:System.Windows.Forms.TreeNode> named `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/cpp/m-system.windows.forms.t_51_1.cpp)]
 [!code-cs[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/csharp/m-system.windows.forms.t_51_1.cs)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_51_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to locate in the collection.</param>
        <summary>Returns the index of the specified tree node in the collection.</summary>
        <returns>The zero-based index of the item found in the tree node collection; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The amount of time this method takes is proportional to the size of the node collection, so you may want to avoid using it with large collections.  
  
 This method checks for reference equality only. You cannot use it to retrieve the index of an equivalent but different node in the collection.  
  
> [!NOTE]
>  One implication of the reference-equality requirement is that you cannot customize the behavior of this method for derived <xref:System.Windows.Forms.TreeNode> types by overriding the <xref:System.Object.Equals%2A> method of the <xref:System.Windows.Forms.TreeNode> class.  
  
   
  
## Examples  
 The following code example determines if a specified <xref:System.Windows.Forms.TreeNode> is within a <xref:System.Windows.Forms.TreeNodeCollection>, and then enumerates the collection. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains a <xref:System.Windows.Forms.TreeNode> named `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#2](~/add/codesnippet/cpp/m-system.windows.forms.t_27_1.cpp)]
 [!code-cs[TreeNodeCollection_Contains_GetEnumerator#2](~/add/codesnippet/csharp/m-system.windows.forms.t_27_1.cs)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#2](~/add/codesnippet/visualbasic/m-system.windows.forms.t_27_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the tree node to search for.</param>
        <summary>Returns the index of the first occurrence of a tree node with the specified key.</summary>
        <returns>The zero-based index of the first occurrence of a tree node with the specified key, if found; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If IndexOfKey is called successively, the last returned index will be checked for a key match first, and if there is no match, the search starts at the beginning of the collection.  
  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The key comparison is not case-sensitive. If `key` is `null` or an empty string, the <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> property returns -1.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The location within the collection to insert the node.</param>
        <param name="text">The text to display in the tree node.</param>
        <summary>Creates a tree node with the specified text and inserts it at the specified index.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was inserted in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.  
  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location within the collection to insert the tree node.</param>
        <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to insert into the collection.</param>
        <summary>Inserts an existing tree node into the tree node collection at the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.Sorted%2A?displayProperty=fullName> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view, and the <xref:System.Windows.Forms.TreeView> resorted.  
  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.  
  
 To remove a <xref:System.Windows.Forms.TreeNode> that you previously added, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.  
  
> [!NOTE]
>  A <xref:System.Windows.Forms.TreeNode> can be assigned to only one <xref:System.Windows.Forms.TreeView> control at a time. To add the tree node to a new tree view control, you must remove it from the other tree view first or clone it.  
  
   
  
## Examples  
 The following code example removes the selected tree node from one <xref:System.Windows.Forms.TreeView> and adds it to another if both tree node collections are not read-only. When a <xref:System.Windows.Forms.Button> is clicked, the <xref:System.Windows.Forms.TreeNode> represented by the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName> property is deleted from one <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> method and added to the other <xref:System.Windows.Forms.TreeView> using the Insert method. This example requires that you have a <xref:System.Windows.Forms.Form> that contains two <xref:System.Windows.Forms.TreeView> controls and a <xref:System.Windows.Forms.Button>. The <xref:System.Windows.Forms.TreeView> controls should be named `treeView1` and `treeView2`.  
  
 [!code-vb[TreeNodeCollection#1](~/add/codesnippet/visualbasic/13281f08-0181-4942-9ff8-_1.vb)]
 [!code-cpp[TreeNodeCollection#1](~/add/codesnippet/cpp/13281f08-0181-4942-9ff8-_1.cpp)]
 [!code-cs[TreeNodeCollection#1](~/add/codesnippet/csharp/13281f08-0181-4942-9ff8-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="node" /> is currently assigned to another <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The location within the collection to insert the node.</param>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <summary>Creates a tree node with the specified text and key, and inserts it into the collection.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was inserted in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.  
  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.  
  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The location within the collection to insert the node.</param>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <param name="imageIndex">The index of the image to display in the tree node.</param>
        <summary>Creates a tree node with the specified key, text, and image, and inserts it into the collection at the specified index.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was inserted in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.  
  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.  
  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The `imageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The location within the collection to insert the node.</param>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <param name="imageKey">The key of the image to display in the tree node.</param>
        <summary>Creates a tree node with the specified key, text, and image, and inserts it into the collection at the specified index.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was inserted in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.  
  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.  
  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The `imageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The location within the collection to insert the node.</param>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <param name="imageIndex">The index of the image to display in the tree node.</param>
        <param name="selectedImageIndex">The index of the image to display in the tree node when it is in a selected state.</param>
        <summary>Creates a tree node with the specified key, text, and images, and inserts it into the collection at the specified index.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was inserted in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.  
  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.  
  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The `imageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 The `selectedimageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The location within the collection to insert the node.</param>
        <param name="key">The name of the tree node.</param>
        <param name="text">The text to display in the tree node.</param>
        <param name="imageKey">The key of the image to display in the tree node.</param>
        <param name="selectedImageKey">The key of the image to display in the tree node when it is in a selected state.</param>
        <summary>Creates a tree node with the specified key, text, and images, and inserts it into the collection at the specified index.</summary>
        <returns>The <see cref="T:System.Windows.Forms.TreeNode" /> that was inserted in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.  
  
 You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.  
  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The `imageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 The `selectedimageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the collection is read-only.</summary>
        <value>
          <see langword="true" /> if the collection is read-only; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example removes the selected tree node from one <xref:System.Windows.Forms.TreeView> and adds it to another if both tree node collections are not read-only. When a <xref:System.Windows.Forms.Button> is clicked, the <xref:System.Windows.Forms.TreeNode> represented by the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName> property is deleted from one <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> method and added to the other <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> method. This example requires that you have a <xref:System.Windows.Forms.Form> that contains two <xref:System.Windows.Forms.TreeView> controls and a <xref:System.Windows.Forms.Button>. The <xref:System.Windows.Forms.TreeView> controls should be named `treeView1` and `treeView2`.  
  
 [!code-vb[TreeNodeCollection#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_284_1.vb)]
 [!code-cpp[TreeNodeCollection#1](~/add/codesnippet/cpp/p-system.windows.forms.t_284_1.cpp)]
 [!code-cs[TreeNodeCollection#1](~/add/codesnippet/csharp/p-system.windows.forms.t_284_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location of the <see cref="T:System.Windows.Forms.TreeNode" /> in the collection.</param>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.TreeNode" /> at the specified indexed location in the collection.</summary>
        <value>The <see cref="T:System.Windows.Forms.TreeNode" /> at the specified indexed location in the collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To assign <xref:System.Windows.Forms.TreeNode> objects to a specific location, or to retrieve them from the <xref:System.Windows.Forms.TreeNodeCollection>, you can reference the collection object with a specific index value. The index value of the <xref:System.Windows.Forms.TreeNodeCollection> is a zero-based index.  
  
   
  
## Examples  
 The following code example removes the first <xref:System.Windows.Forms.TreeNode> from a <xref:System.Windows.Forms.TreeView> if its <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=fullName> property is set to "Node0". When a <xref:System.Windows.Forms.Button> is clicked, the first <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeView> is deleted using the <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> method. This example requires that you have created a <xref:System.Windows.Forms.TreeView> and a <xref:System.Windows.Forms.Button> on a <xref:System.Windows.Forms.Form>. The first <xref:System.Windows.Forms.TreeNode> in your <xref:System.Windows.Forms.TreeView> should have a text property of "Node0."  
  
 [!code-vb[TreeNodeCollection#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_118_1.vb)]
 [!code-cpp[TreeNodeCollection#2](~/add/codesnippet/cpp/p-system.windows.forms.t_118_1.cpp)]
 [!code-cs[TreeNodeCollection#2](~/add/codesnippet/csharp/p-system.windows.forms.t_118_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> value is less than 0 or is greater than the number of tree nodes in the collection.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.TreeNode" /> to retrieve from the collection.</param>
        <summary>Gets the tree node with the specified key from the collection.</summary>
        <value>The <see cref="T:System.Windows.Forms.TreeNode" /> with the specified key.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 The key comparison is not case-sensitive. If the `key` parameter is `null` or an empty string, the Item property returns `null`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to remove.</param>
        <summary>Removes the specified tree node from the tree node collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a <xref:System.Windows.Forms.TreeNode> is removed from the tree node collection, all subsequent tree nodes are moved up one position in the collection.  
  
 You can also remove a <xref:System.Windows.Forms.TreeNode> that you previously added by using the <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.  
  
> [!NOTE]
>  Enumerating the collection and removing nodes is not supported.  
  
 To add new <xref:System.Windows.Forms.TreeNode> objects to the collection, use the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
   
  
## Examples  
 The following code example removes the selected tree node from one <xref:System.Windows.Forms.TreeView> and adds it to another if both tree node collections are not read-only. When a <xref:System.Windows.Forms.Button> is clicked, the <xref:System.Windows.Forms.TreeNode> represented by the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName> property is deleted from one <xref:System.Windows.Forms.TreeView> using the Remove method and added to the other <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> method. This example requires that you have a <xref:System.Windows.Forms.Form> that contains two <xref:System.Windows.Forms.TreeView> controls and a <xref:System.Windows.Forms.Button>. The <xref:System.Windows.Forms.TreeView> controls should be named `treeView1` and `treeView2`.  
  
 [!code-vb[TreeNodeCollection#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_35_1.vb)]
 [!code-cpp[TreeNodeCollection#1](~/add/codesnippet/cpp/m-system.windows.forms.t_35_1.cpp)]
 [!code-cs[TreeNodeCollection#1](~/add/codesnippet/csharp/m-system.windows.forms.t_35_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the <see cref="T:System.Windows.Forms.TreeNode" /> to remove.</param>
        <summary>Removes a tree node from the tree node collection at a specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a <xref:System.Windows.Forms.TreeNode> is removed from the tree node collection, all subsequent tree nodes are moved up one position in the collection.  
  
 You can also remove a <xref:System.Windows.Forms.TreeNode> that you previously added by using the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.  
  
> [!NOTE]
>  Enumerating the collection and removing nodes is not supported.  
  
 To add new <xref:System.Windows.Forms.TreeNode> objects to the collection, use the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.  
  
   
  
## Examples  
 The following code example removes the first <xref:System.Windows.Forms.TreeNode> from a <xref:System.Windows.Forms.TreeView> if its <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=fullName> property is set to "Node0". When a <xref:System.Windows.Forms.Button> is clicked, the first <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeView> is deleted using the RemoveAt method. This example requires that you have created a <xref:System.Windows.Forms.TreeView> and a <xref:System.Windows.Forms.Button> on a <xref:System.Windows.Forms.Form>. The first <xref:System.Windows.Forms.TreeNode> in your <xref:System.Windows.Forms.TreeView> should have a text property of "Node0."  
  
 [!code-vb[TreeNodeCollection#2](~/add/codesnippet/visualbasic/m-system.windows.forms.t_69_1.vb)]
 [!code-cpp[TreeNodeCollection#2](~/add/codesnippet/cpp/m-system.windows.forms.t_69_1.cpp)]
 [!code-cs[TreeNodeCollection#2](~/add/codesnippet/csharp/m-system.windows.forms.t_69_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the tree node to remove from the collection.</param>
        <summary>Removes the tree node with the specified key from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
        <value>
          <see langword="false" /> in all cases.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the collection.</summary>
        <value>An object that can be used to synchronize access to the <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">The object to add to the tree node collection.</param>
        <summary>Adds an object to the end of the tree node collection.</summary>
        <returns>The zero-based index value of the <see cref="T:System.Windows.Forms.TreeNode" /> that was added to the tree node collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `node` is not a <xref:System.Windows.Forms.TreeNodeCollection>, the IList.Add method will use the string returned by the <xref:System.Windows.Forms.TreeNode.ToString%2A> method of the <xref:System.Windows.Forms.TreeNode> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="node" /> is currently assigned to another <see cref="T:System.Windows.Forms.TreeView" /> control.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="node" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">The object to find in the collection.</param>
        <summary>Determines whether the specified tree node is a member of the collection.</summary>
        <returns>
          <see langword="true" /> if <paramref name="node" /> is a member of the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `node` is not a <xref:System.Windows.Forms.TreeNode>, the IList.Contains method returns `false`. Therefore, you cannot pass in a string to determine if the collection contains a node that has the value of the string as its <xref:System.Windows.Forms.TreeNode.Text%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to locate in the collection.</param>
        <summary>Returns the index of the specified tree node in the collection.</summary>
        <returns>The zero-based index of the item found in the tree node collection; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `node` is not a <xref:System.Windows.Forms.TreeNode>, the IList.IndexOf method returns -1. Therefore, you cannot pass in a string to find the node that has the value of the string as its <xref:System.Windows.Forms.TreeNode.Text%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location within the collection to insert the tree node.</param>
        <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to insert into the collection.</param>
        <summary>Inserts an existing tree node in the tree node collection at the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Web.UI.WebControls.TreeView> is sorted again.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="node" /> is currently assigned to another <see cref="T:System.Windows.Forms.TreeView" />.  
  
 -or-  
  
 <paramref name="node" /> is not a <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the tree node collection has a fixed size.</summary>
        <value>
          <see langword="false" /> in all cases.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which to get or set the item.</param>
        <summary>Gets or sets the tree node at the specified index in the collection.</summary>
        <value>The <see cref="T:System.Windows.Forms.TreeNode" /> at the specified index in the <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The value set is not a <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to remove from the collection.</param>
        <summary>Removes the specified tree node from the tree node collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot pass in a string to remove the node that has the value of the string as its <xref:System.Windows.Forms.TreeNode.Text%2A> property.  
  
 When a <xref:System.Windows.Forms.TreeNode> is removed from the tree node collection, all subsequent tree nodes are moved up one position in the collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>