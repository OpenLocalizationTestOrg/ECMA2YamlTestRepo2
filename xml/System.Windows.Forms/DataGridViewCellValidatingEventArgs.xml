<Type Name="DataGridViewCellValidatingEventArgs" FullName="System.Windows.Forms.DataGridViewCellValidatingEventArgs">
  <TypeSignature Language="C#" Value="public class DataGridViewCellValidatingEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataGridViewCellValidatingEventArgs extends System.ComponentModel.CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for the <see cref="E:System.Windows.Forms.DataGridView.CellValidating" /> event of a <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView.CellValidating?displayProperty=fullName> event lets you cancel changes to the current cell when the new value is not valid. Use the <xref:System.Windows.Forms.DataGridViewCellValidatingEventArgs.FormattedValue%2A> property to determine the current value. To determine the state of the current cell, use the <xref:System.Windows.Forms.DataGridViewCellValidatingEventArgs.RowIndex%2A> and <xref:System.Windows.Forms.DataGridViewCellValidatingEventArgs.ColumnIndex%2A> properties to access the cell through the <xref:System.Windows.Forms.DataGridView.Rows%2A?displayProperty=fullName> collection. To cancel the change, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`.  
  
 When this event is canceled in data-bound mode, the new value is not pushed to the underlying data source. When this event is canceled in virtual mode, the <xref:System.Windows.Forms.DataGridView.CellValuePushed?displayProperty=fullName> event will not be raised.  
  
   
  
## Examples  
 The following code example handles the <xref:System.Windows.Forms.DataGridView.CellValidating> event to ensure that only positive integers are entered by the user. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cs[System.Windows.Forms.DataGridView._Virtual#40](~/add/codesnippet/csharp/t-system.windows.forms.d_44_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#40](~/add/codesnippet/cpp/t-system.windows.forms.d_44_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#40](~/add/codesnippet/visualbasic/t-system.windows.forms.d_44_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ColumnIndex">
      <MemberSignature Language="C#" Value="public int ColumnIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the column index of the cell that needs to be validated.</summary>
        <value>A zero-based integer that specifies the column index of the cell that needs to be validated.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of this property. This example is part of a larger example available in [How to: Validate Data in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewDataValidation#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_186_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewDataValidation#20](~/add/codesnippet/csharp/p-system.windows.forms.d_186_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FormattedValue">
      <MemberSignature Language="C#" Value="public object FormattedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the formatted contents of the cell that needs to be validated.</summary>
        <value>A reference to the formatted value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text entered by the user through the user interface (UI) becomes the FormattedValue property value. This is the value that you can validate before it is parsed into the cell <xref:System.Windows.Forms.DataGridViewCell.Value%2A> property value.  
  
   
  
## Examples  
 The following code example handles the <xref:System.Windows.Forms.DataGridView.CellValidating> event to ensure that only positive integers are entered by the user. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cs[System.Windows.Forms.DataGridView._Virtual#40](~/add/codesnippet/csharp/p-system.windows.forms.d_167_1.cs)]
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#40](~/add/codesnippet/cpp/p-system.windows.forms.d_167_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#40](~/add/codesnippet/visualbasic/p-system.windows.forms.d_167_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowIndex">
      <MemberSignature Language="C#" Value="public int RowIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the row index of the cell that needs to be validated.</summary>
        <value>A zero-based integer that specifies the row index of the cell that needs to be validated.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of this property. This example is part of a larger example available in [How to: Validate Data in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewDataValidation#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_410_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewDataValidation#20](~/add/codesnippet/csharp/p-system.windows.forms.d_410_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>