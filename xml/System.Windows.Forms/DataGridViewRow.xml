<Type Name="DataGridViewRow" FullName="System.Windows.Forms.DataGridViewRow">
  <TypeSignature Language="C#" Value="public class DataGridViewRow : System.Windows.Forms.DataGridViewBand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataGridViewRow extends System.Windows.Forms.DataGridViewBand" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataGridViewBand</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataGridViewRowConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a row in a <see cref="T:System.Windows.Forms.DataGridView" /> control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataGridViewRow class represents a row in a <xref:System.Windows.Forms.DataGridView> control. You can retrieve rows through the <xref:System.Windows.Forms.DataGridView.Rows%2A> and <xref:System.Windows.Forms.DataGridView.SelectedRows%2A> collections of the control.  
  
 Unlike a <xref:System.Windows.Forms.DataGridViewColumn>, a DataGridViewRow physically contains a collection of all of the cells in that row. You can access this collection through the <xref:System.Windows.Forms.DataGridViewRow.Cells%2A> property.  
  
 The DataGridViewRow class is used to access the individual cell elements, as well as to adjust the appearance and behavior of the row user interface (UI), such as height and cell style. Typically, you will want all rows or most rows in the control to share the same characteristics. To set cell styles for all rows in the control, set the properties of the object returned by the <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A?displayProperty=fullName> property. To set styles for alternating rows, use the <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A?displayProperty=fullName> property. For more information about cell styles, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md). You can also use the <xref:System.Windows.Forms.DataGridView.RowTemplate%2A?displayProperty=fullName> property to define a row that will be used as a basis for all rows added to the control.  
  
 The <xref:System.Windows.Forms.DataGridView> control will share DataGridViewRow objects across multiple data rows whenever possible to avoid performance penalties. Unless you are working with large amounts of data and experiencing performance issues, you can typically ignore row sharing. A shared row is indicated by an <xref:System.Windows.Forms.DataGridViewBand.Index%2A> property value of -1. Some members of the DataGridViewRow class cannot be used with shared rows, but you can unshare a row by accessing it through the <xref:System.Windows.Forms.DataGridViewRowCollection.Item%2A?displayProperty=fullName> property. Rows can also become unshared in other ways. To access a row without unsharing it, use the <xref:System.Windows.Forms.DataGridViewRowCollection.SharedRow%2A?displayProperty=fullName> method. When working with large amounts of data, you should be aware of how rows are shared and unshared to avoid performance penalties. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates the use of this type. This example is part of a larger example available in [How to: Manipulate Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#209](~/add/codesnippet/cpp/t-system.windows.forms.d_15_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#209](~/add/codesnippet/csharp/t-system.windows.forms.d_15_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#209](~/add/codesnippet/visualbasic/t-system.windows.forms.d_15_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataGridViewRow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataGridViewRow" /> class without using a template.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor initializes the row in its blank state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;xref:System.Windows.Forms.DataGridViewRow.DataGridViewRowAccessibleObject&gt; assigned to the <see cref="T:System.Windows.Forms.DataGridViewRow" />.</summary>
        <value>The &lt;xref:System.Windows.Forms.DataGridViewRow.DataGridViewRowAccessibleObject&gt; assigned to the <see cref="T:System.Windows.Forms.DataGridViewRow" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To control the instance returned from this method, override the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.  
  
 If no <xref:System.Windows.Forms.AccessibleObject> is currently assigned to the control, a new instance of one is created.  
  
> [!NOTE]
>  To get or set the AccessibilityObject property, you must add a reference to the `Accessibility` assembly installed with the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)].  
  
 For more information about accessible objects, see the "Active Accessibility" section of the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AdjustRowHeaderBorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustRowHeaderBorderStyle (System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedRow, bool isLastVisibleRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustRowHeaderBorderStyle(class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedRow, bool isLastVisibleRow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewAdvancedBorderStyleInput" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="dataGridViewAdvancedBorderStylePlaceholder" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="singleVerticalBorderAdded" Type="System.Boolean" />
        <Parameter Name="singleHorizontalBorderAdded" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
        <Parameter Name="isLastVisibleRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataGridViewAdvancedBorderStyleInput">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the row header border style to modify.</param>
        <param name="dataGridViewAdvancedBorderStylePlaceholder">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that is used to store intermediate changes to the row header border style.</param>
        <param name="singleVerticalBorderAdded">
          <see langword="true" /> to add a single vertical border to the result; otherwise, <see langword="false" />.</param>
        <param name="singleHorizontalBorderAdded">
          <see langword="true" /> to add a single horizontal border to the result; otherwise, <see langword="false" />.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" /> if the row is the first row displayed in the <see cref="T:System.Windows.Forms.DataGridView" />; otherwise, <see langword="false" />.</param>
        <param name="isLastVisibleRow">
          <see langword="true" /> if the row is the last row in the <see cref="T:System.Windows.Forms.DataGridView" /> that has its &lt;xref:System.Windows.Forms.DataGridViewRow.Visible%2A&gt; property set to <see langword="true" />; otherwise, <see langword="false" />.</param>
        <summary>Modifies an input row header border style according to the specified criteria.</summary>
        <returns>A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> that represents the new border style used.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control internally calls the AdjustRowHeaderBorderStyle method to determine the appearance of the borders for the row header cells. The <xref:System.Windows.Forms.DataGridView> control typically uses the value of the <xref:System.Windows.Forms.DataGridView.AdvancedRowHeadersBorderStyle%2A> property for the `dataGridViewAdvancedBorderStyleInput` parameter.  
  
   
  
## Examples  
 The following code example demonstrates how to override the AdjustRowHeaderBorderStyle method to customize the borders of the row header cells. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> class.  
  
 [!code-cs[System.Windows.Forms.DataGridViewAdvancedBorderStyle#30](~/add/codesnippet/csharp/0ec944f1-da7c-4fd0-b31e-_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle#30](~/add/codesnippet/visualbasic/0ec944f1-da7c-4fd0-b31e-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Cells">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellCollection Cells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellCollection Cells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of cells that populate the row.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewCellCollection" /> that contains all of the cells in the row.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the row does not contain any cells when this property is accessed, a new empty <xref:System.Windows.Forms.DataGridViewCellCollection> will be created by a call to the <xref:System.Windows.Forms.DataGridViewRow.CreateCellsInstance%2A> method.  
  
   
  
## Examples  
 The following code example uses the Cells property to set the value of a cell in the row. This code example is part of a larger code example provided in [How to: Manipulate Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/add/codesnippet/cpp/p-system.windows.forms.d_219_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#211](~/add/codesnippet/csharp/p-system.windows.forms.d_219_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#211](~/add/codesnippet/visualbasic/p-system.windows.forms.d_219_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an exact copy of this row.</summary>
        <returns>An &lt;xref:System.Object&gt; that represents the cloned <see cref="T:System.Windows.Forms.DataGridViewRow" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Clone method copies the row and its property values, but does not copy the cell values that the row contains. For information about how to copy cell values when cloning a row, see the example section.  
  
 Override the Clone method whenever you derive from <xref:System.Windows.Forms.DataGridViewRow> and add new properties to the derived class.  
  
   
  
## Examples  
 The following example demonstrates how to use the Clone method to copy a row, and then populate the copy with the cell values from the original row.  
  
 [!code-cs[System.Windows.Forms.DataGridViewMisc2#60](~/add/codesnippet/csharp/m-system.windows.forms.d_75_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#60](~/add/codesnippet/visualbasic/m-system.windows.forms.d_75_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the shortcut menu for the row.</summary>
        <value>The <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associated with the current <see cref="T:System.Windows.Forms.DataGridViewRow" />. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property indicates the shortcut menu that is displayed when the user right-clicks the row unless the <xref:System.Windows.Forms.DataGridView> control <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> event or the row ContextMenuStrip property overrides the shortcut menu for the specific cell that was clicked.  
  
 When the <xref:System.Windows.Forms.DataGridView> control <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is set or its <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is `true`, getting the value of the ContextMenuStrip property raises the <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> event of the control and returns the value of the <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs.ContextMenuStrip%2A?displayProperty=fullName> property as specified in the event handler. If there are no handlers for the event, getting the value of the ContextMenuStrip property returns the previously specified value or its default value of `null`.  
  
 Handling the <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> event is primarily useful when working with large amounts of data to avoid performance penalties when setting the row ContextMenuStrip value for multiple rows. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 Changing this property raises the <xref:System.Windows.Forms.DataGridView.RowContextMenuStripChanged> event on the owning <xref:System.Windows.Forms.DataGridView>, if one exists.  
  
 If the current row is shared, use the <xref:System.Windows.Forms.DataGridViewRow.GetContextMenuStrip%2A> method rather than getting the value of this property.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.DataGridViewColumn.ContextMenuStrip%2A?displayProperty=fullName> property, which is nearly identical to the ContextMenuStrip property of the <xref:System.Windows.Forms.DataGridViewRow> class. This code example is part of a larger code example provided in the <xref:System.Windows.Forms.DataGridViewColumn> class.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#130](~/add/codesnippet/cpp/p-system.windows.forms.d_358_1.cpp)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#130](~/add/codesnippet/visualbasic/p-system.windows.forms.d_358_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#130](~/add/codesnippet/csharp/p-system.windows.forms.d_358_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When getting the value of this property, the row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new accessible object for the <see cref="T:System.Windows.Forms.DataGridViewRow" />.</summary>
        <returns>A new &lt;xref:System.Windows.Forms.DataGridViewRow.DataGridViewRowAccessibleObject&gt; for the <see cref="T:System.Windows.Forms.DataGridViewRow" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you do not explicitly call the CreateAccessibilityInstance method, it will be called when the <xref:System.Windows.Forms.DataGridViewRow.AccessibilityObject%2A> property is referenced.  
  
> [!NOTE]
>  To get or set <xref:System.Windows.Forms.DataGridViewRow.AccessibilityObject%2A>, you must add a reference to the `Accessibility` assembly installed with the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)].  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateCells">
      <MemberSignature Language="C#" Value="public void CreateCells (System.Windows.Forms.DataGridView dataGridView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateCells(class System.Windows.Forms.DataGridView dataGridView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridView" Type="System.Windows.Forms.DataGridView" />
      </Parameters>
      <Docs>
        <param name="dataGridView">A <see cref="T:System.Windows.Forms.DataGridView" /> that acts as a template for cell styles.</param>
        <summary>Clears the existing cells and sets their template according to the supplied <see cref="T:System.Windows.Forms.DataGridView" /> template.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method clears the row's <xref:System.Windows.Forms.DataGridViewCellCollection> and reinitializes it with the <xref:System.Windows.Forms.DataGridViewColumn.CellTemplate%2A> property of each column of the `dataGridView` parameter. As a result, the row adopts the appearance and behavior of a row from the `dataGridView` parameter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataGridView" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A row that already belongs to the <see cref="T:System.Windows.Forms.DataGridView" /> was added.  
  
 -or-  
  
 A column that has no cell template was added.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateCells">
      <MemberSignature Language="C#" Value="public void CreateCells (System.Windows.Forms.DataGridView dataGridView, object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateCells(class System.Windows.Forms.DataGridView dataGridView, object[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridView" Type="System.Windows.Forms.DataGridView" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataGridView">A <see cref="T:System.Windows.Forms.DataGridView" /> that acts as a template for cell styles.</param>
        <param name="values">An array of objects that initialize the reset cells.</param>
        <summary>Clears the existing cells and sets their template and values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method clears the row's <xref:System.Windows.Forms.DataGridViewCellCollection> and reinitializes it with the <xref:System.Windows.Forms.DataGridViewColumn.CellTemplate%2A> property of each column of the `dataGridView` parameter. As a result, the row adopts the appearance and behavior of a row from the `dataGridView` parameter.  
  
 If there are more elements in the `values` array than cells to be initialized, the extra elements will be ignored. If there are fewer elements than required, the remaining unmatched cells will retain their default initial values.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Either of the parameters is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A row that already belongs to the <see cref="T:System.Windows.Forms.DataGridView" /> was added.  
  
 -or-  
  
 A column that has no cell template was added.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateCellsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.DataGridViewCellCollection CreateCellsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.DataGridViewCellCollection CreateCellsInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Constructs a new collection of cells based on this row.</summary>
        <returns>The newly created <see cref="T:System.Windows.Forms.DataGridViewCellCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method creates an empty <xref:System.Windows.Forms.DataGridViewCellCollection> with the <xref:System.Windows.Forms.BaseCollection.Count%2A> property set to 0.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataBoundItem">
      <MemberSignature Language="C#" Value="public object DataBoundItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataBoundItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data-bound object that populated the row.</summary>
        <value>The data-bound &lt;xref:System.Object&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Accessing data-bound objects directly through row objects is useful when you do not have direct access to the data source containing the objects. It is also convenient when you want to manipulate objects bound to selected rows or to rows passed as arguments to event handlers.  
  
   
  
## Examples  
 The following code example demonstrates how to use the DataBoundItem property to access a business object bound to a row. This code example is part of a larger example provided in [How to: Access Objects Bound to Windows Forms DataGridView Rows](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[System.Windows.Forms.DataGridViewObjectBinding#10](~/add/codesnippet/csharp/p-system.windows.forms.d_113_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewObjectBinding#10](~/add/codesnippet/visualbasic/p-system.windows.forms.d_113_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultCellStyle">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default styles for the row, which are used to render cells in the row unless the styles are overridden.</summary>
        <value>The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> to be applied as the default style.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control displays its cells using the styles indicated by the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property, which inherits styles from other properties of type <xref:System.Windows.Forms.DataGridViewCellStyle>. For cells in this row, the styles specified through the DefaultCellStyle property override the styles specified through the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A?displayProperty=fullName>, <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName>, <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A?displayProperty=fullName> properties, but are overridden by the styles specified through the <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName> property.  
  
 For more information, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 When getting this property, a <xref:System.Windows.Forms.DataGridViewCellStyle> with default values will be created if the property has not already been accessed. This can cause a performance impact when getting this property for many rows. Whenever possible, use a single <xref:System.Windows.Forms.DataGridViewCellStyle> to set this property for multiple rows. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates how to use this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/visualbasic/p-system.windows.forms.d_104_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewStyleDemo#20](~/add/codesnippet/csharp/p-system.windows.forms.d_104_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When setting this property, the row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Displayed">
      <MemberSignature Language="C#" Value="public override bool Displayed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Displayed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this row is displayed on the screen.</summary>
        <value>
          <see langword="true" /> if the row is currently displayed on the screen; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DividerHeight">
      <MemberSignature Language="C#" Value="public int DividerHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DividerHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height, in pixels, of the row divider.</summary>
        <value>The height, in pixels, of the divider (the row's bottom margin).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is useful to provide a visual boundary between frozen rows and rows that can scroll. The extra edge is part of the current row, although it will take on the foreground color of the associated <xref:System.Windows.Forms.DataGridView>. The extra edge does not extend the area in which users can double-click to automatically resize a row. To resize a row, the user must double-click on the boundary between the divider and the adjacent row.  
  
   
  
## Examples  
 The following code example modifies the height of a row's divider to provide emphasis.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#210](~/add/codesnippet/cpp/p-system.windows.forms.d_375_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#210](~/add/codesnippet/csharp/p-system.windows.forms.d_375_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#210](~/add/codesnippet/visualbasic/p-system.windows.forms.d_375_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When setting this property, the row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DrawFocus">
      <MemberSignature Language="C#" Value="protected virtual void DrawFocus (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle bounds, int rowIndex, System.Windows.Forms.DataGridViewElementStates rowState, System.Windows.Forms.DataGridViewCellStyle cellStyle, bool cellsPaintSelectionBackground);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void DrawFocus(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle bounds, int32 rowIndex, valuetype System.Windows.Forms.DataGridViewElementStates rowState, class System.Windows.Forms.DataGridViewCellStyle cellStyle, bool cellsPaintSelectionBackground) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowState" Type="System.Windows.Forms.DataGridViewElementStates" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="cellsPaintSelectionBackground" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the <see cref="T:System.Windows.Forms.DataGridViewRow" />.</param>
        <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be painted.</param>
        <param name="bounds">A <see cref="T:System.Drawing.Rectangle" /> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewRow" /> that is being painted.</param>
        <param name="rowIndex">The row index of the cell that is being painted.</param>
        <param name="rowState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values that specifies the state of the row.</param>
        <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> used to paint the focus rectangle.</param>
        <param name="cellsPaintSelectionBackground">
          <see langword="true" /> to use the &lt;xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A&gt; property of `cellStyle` as the color of the focus rectangle; <see langword="false" /> to use the &lt;xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A&gt; property of `cellStyle` as the color of the focus rectangle.</param>
        <summary>Draws a focus rectangle around the specified bounds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `rowIndex` parameter is not used in the base-class implementation of the DrawFocus method, although it can be used when overriding this method in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row has not been added to a <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="cellStyle" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ErrorText">
      <MemberSignature Language="C#" Value="public string ErrorText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the error message text for row-level errors.</summary>
        <value>A &lt;xref:System.String&gt; containing the error message.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to provide an error message for row-level errors. The specified message is displayed in a ToolTip when the user moves the mouse pointer over the error icon shown in the row header.  
  
 Starting with the .NET Framework 4.5.2, the error icon is resized according to the system DPI setting when the app.config file contains the following entry:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
  
```  
  
 If this row is associated with a <xref:System.Windows.Forms.DataGridView> control, setting this property will raise the <xref:System.Windows.Forms.DataGridView.RowErrorTextChanged> event.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ErrorText property in a <xref:System.Windows.Forms.DataGridView.DataError> event handler. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewComboBoxColumn> class overview.  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#50](~/add/codesnippet/cpp/p-system.windows.forms.d_253_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#50](~/add/codesnippet/csharp/p-system.windows.forms.d_253_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#50](~/add/codesnippet/visualbasic/p-system.windows.forms.d_253_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When getting the value of this property, the row is a shared row in a <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Frozen">
      <MemberSignature Language="C#" Value="public override bool Frozen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Frozen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the row is frozen.</summary>
        <value>
          <see langword="true" /> if the row is frozen; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property lets you keep one or several rows of important information in place when a user scrolls through the <xref:System.Windows.Forms.DataGridView>. All rows above the frozen row are also frozen.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.DataGridViewBand.Frozen%2A?displayProperty=fullName> property, which is nearly identical to the Frozen property of the <xref:System.Windows.Forms.DataGridViewRow> class. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewBand> class.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#7](~/add/codesnippet/cpp/p-system.windows.forms.d_323_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#7](~/add/codesnippet/csharp/p-system.windows.forms.d_323_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#7](~/add/codesnippet/visualbasic/p-system.windows.forms.d_323_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetContextMenuStrip">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ContextMenuStrip GetContextMenuStrip (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ContextMenuStrip GetContextMenuStrip(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the current row.</param>
        <summary>Gets the shortcut menu for the row.</summary>
        <returns>A <see cref="T:System.Windows.Forms.ContextMenuStrip" /> that belongs to the <see cref="T:System.Windows.Forms.DataGridViewRow" /> at the specified index.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pass the GetContextMenuStrip method the indexer you used to retrieve the <xref:System.Windows.Forms.DataGridViewRow>. Do not use the <xref:System.Windows.Forms.DataGridViewBand.Index%2A> property for the `rowIndex` parameter. If the row is shared, <xref:System.Windows.Forms.DataGridViewBand.Index%2A> is -1, which is an invalid value for `rowIndex`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="rowIndex" /> is -1.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> is less than zero or greater than or equal to the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetErrorText">
      <MemberSignature Language="C#" Value="public string GetErrorText (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetErrorText(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row that contains the error.</param>
        <summary>Gets the error text for the row at the specified index.</summary>
        <returns>A string that describes the error of the row at the specified index.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pass the GetErrorText method the index you used to retrieve the <xref:System.Windows.Forms.DataGridViewRow>. Do not use the <xref:System.Windows.Forms.DataGridViewBand.Index%2A> property for the `rowIndex` parameter. If the row is shared, <xref:System.Windows.Forms.DataGridViewBand.Index%2A> is -1, which is an invalid value for `rowIndex`. For more information about row sharing, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row belongs to a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The row belongs to a <see cref="T:System.Windows.Forms.DataGridView" /> control and <paramref name="rowIndex" /> is less than zero or greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetPreferredHeight">
      <MemberSignature Language="C#" Value="public virtual int GetPreferredHeight (int rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPreferredHeight(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row whose preferred height is calculated.</param>
        <param name="autoSizeRowMode">A <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> that specifies an automatic sizing mode.</param>
        <param name="fixedWidth">
          <see langword="true" /> to calculate the preferred height for a fixed cell width; otherwise, <see langword="false" />.</param>
        <summary>Calculates the ideal height of the specified row based on the specified criteria.</summary>
        <returns>The ideal height of the row, in pixels.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is used by the content-based automatic sizing feature of the <xref:System.Windows.Forms.DataGridView> control to determine the ideal height of a row. The `rowIndex` value lets you specify the actual row index of a shared row. (Shared rows have <xref:System.Windows.Forms.DataGridViewBand.Index%2A> property values of -1.)  
  
 A `fixedWidth` parameter value of `false` calculates the row height based on calculated column widths that will achieve ideal cell height-to-width ratios.  
  
 For cell contents to wrap onto multiple lines, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState>.  
  
 For more information about automatic sizing, see [Sizing Options in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the GetPreferredHeight method to determine the new padding for a row that has been resized. This code example is part of a larger example provided in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#40](~/add/codesnippet/visualbasic/8a25382c-4c2a-40eb-ae44-_1.vb)]
 [!code-cs[System.Windows.Forms.DataGridViewRowPainting#40](~/add/codesnippet/csharp/8a25382c-4c2a-40eb-ae44-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowMode" /> is not a valid <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> value.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="rowIndex" /> is not in the valid range of 0 to the number of rows in the control minus 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetState">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewElementStates GetState (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Forms.DataGridViewElementStates GetState(int32 rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewElementStates</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">The index of the row.</param>
        <summary>Returns a value indicating the current state of the row.</summary>
        <returns>A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values indicating the row state.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful to determine the state of a shared row. Shared rows have <xref:System.Windows.Forms.DataGridViewBand.Index%2A> values of -1, which prevents you from using the <xref:System.Windows.Forms.DataGridViewRow.State%2A> property with shared rows. To use this method, pass in the actual row index. You can retrieve the actual index of a shared row by calling the <xref:System.Windows.Forms.DataGridViewRowCollection.IndexOf%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The row has been added to a <see cref="T:System.Windows.Forms.DataGridView" /> control, but the <paramref name="rowIndex" /> value is not in the valid range of 0 to the number of rows in the control minus 1.</exception>
        <exception cref="T:System.ArgumentException">The row is not a shared row, but the <paramref name="rowIndex" /> value does not match the row's &lt;xref:System.Windows.Forms.DataGridViewBand.Index%2A&gt; property value.  
  
 -or-  
  
 The row has not been added to a <see cref="T:System.Windows.Forms.DataGridView" /> control, but the <paramref name="rowIndex" /> value does not match the row's &lt;xref:System.Windows.Forms.DataGridViewBand.Index%2A&gt; property value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRowHeaderCell HeaderCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRowHeaderCell HeaderCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeaderCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the row's header cell.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewRowHeaderCell" /> that represents the header cell of row.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The header cell of a row is typically used to display a row label. Users can also click the row header to select the row if the <xref:System.Windows.Forms.DataGridView.SelectionMode%2A?displayProperty=fullName> property is set to <xref:System.Windows.Forms.DataGridViewSelectionMode?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example uses the HeaderCell property to label row headers.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#209](~/add/codesnippet/cpp/p-system.windows.forms.d_378_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#209](~/add/codesnippet/csharp/p-system.windows.forms.d_378_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#209](~/add/codesnippet/visualbasic/p-system.windows.forms.d_378_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(22)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the current height of the row.</summary>
        <value>The height, in pixels, of the row. The default is the height of the default font plus 9 pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To set the minimum height for a row, use the <xref:System.Windows.Forms.DataGridViewRow.MinimumHeight%2A> property.  
  
   
  
## Examples  
 The following code example uses the Height property to set the height of the first row. This code example is part of a larger code example provided in [How to: Manipulate Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#208](~/add/codesnippet/cpp/p-system.windows.forms.d_288_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#208](~/add/codesnippet/csharp/p-system.windows.forms.d_288_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#208](~/add/codesnippet/visualbasic/p-system.windows.forms.d_288_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When setting this property, the row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InheritedStyle">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.DataGridViewCellStyle InheritedStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle InheritedStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the cell style in effect for the row.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> that specifies the formatting and style information for the cells in the row.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is useful to determine which cell styles are applied to all cells in a row regardless of any column styles that are also applied to the cells. The row InheritedStyle property inherits its values from the following properties:  
  
-   <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A>  
  
-   <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A?displayProperty=fullName> (for rows with odd index number)  
  
-   <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A?displayProperty=fullName>  
  
 For more information about cell style inheritance, see [Cell Styles in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNewRow">
      <MemberSignature Language="C#" Value="public bool IsNewRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNewRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the row is the row for new records.</summary>
        <value>
          <see langword="true" /> if the row is the last row in the <see cref="T:System.Windows.Forms.DataGridView" />, which is used for the entry of a new row of data; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the row for new records is in the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection, use the IsNewRow property to determine whether a row is the row for new records or is a populated row.  
  
 A row stops being the new row when data entry into the row begins.  
  
   
  
## Examples  
 The following code example uses the IsNewRow property to prevent attempts to set the label of the row for new records.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#209](~/add/codesnippet/cpp/p-system.windows.forms.d_391_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#209](~/add/codesnippet/csharp/p-system.windows.forms.d_391_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#209](~/add/codesnippet/visualbasic/p-system.windows.forms.d_391_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinimumHeight">
      <MemberSignature Language="C#" Value="public int MinimumHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum height of the row.</summary>
        <value>The minimum row height in pixels, ranging from 2 to &lt;xref:System.Int32?displayProperty=fullName&gt;. The default is 3.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MinimumHeight property maintains the display of the row by setting a limit to how far the user can resize the row's height through the user interface (UI).  
  
   
  
## Examples  
 The following code example uses the MinimumHeight property to set the minimum height of the second row. This code example is part of a larger code example provided in [How to: Manipulate Rows in the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#207](~/add/codesnippet/cpp/p-system.windows.forms.d_418_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#207](~/add/codesnippet/csharp/p-system.windows.forms.d_418_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#207](~/add/codesnippet/visualbasic/p-system.windows.forms.d_418_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When setting this property, the row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 2.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="protected virtual void Paint (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle rowBounds, int rowIndex, System.Windows.Forms.DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Paint(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle rowBounds, int32 rowIndex, valuetype System.Windows.Forms.DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="rowBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowState" Type="System.Windows.Forms.DataGridViewElementStates" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
        <Parameter Name="isLastVisibleRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the <see cref="T:System.Windows.Forms.DataGridViewRow" />.</param>
        <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be painted.</param>
        <param name="rowBounds">A <see cref="T:System.Drawing.Rectangle" /> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewRow" /> that is being painted.</param>
        <param name="rowIndex">The row index of the cell that is being painted.</param>
        <param name="rowState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values that specifies the state of the row.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" /> to indicate whether the current row is the first row displayed in the <see cref="T:System.Windows.Forms.DataGridView" />; otherwise, <see langword="false" />.</param>
        <param name="isLastVisibleRow">
          <see langword="true" /> to indicate whether the current row is the last row in the <see cref="T:System.Windows.Forms.DataGridView" /> that has the &lt;xref:System.Windows.Forms.DataGridViewRow.Visible%2A&gt; property set to <see langword="true" />; otherwise, <see langword="false" />.</param>
        <summary>Paints the current row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control calls this method to paint the row.  
  
 Calling this method raises the <xref:System.Windows.Forms.DataGridView.RowPrePaint?displayProperty=fullName> event. If a handler for the event does not set the <xref:System.ComponentModel.HandledEventArgs.Handled%2A?displayProperty=fullName> property to `true`, this method also calls the <xref:System.Windows.Forms.DataGridViewRow.PaintHeader%2A> and <xref:System.Windows.Forms.DataGridViewRow.PaintCells%2A> methods and raises the <xref:System.Windows.Forms.DataGridView.RowPostPaint?displayProperty=fullName> event.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row has not been added to a <see cref="T:System.Windows.Forms.DataGridView" /> control.  
  
 -or-  
  
 The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and <paramref name="rowIndex" /> is less than zero or greater than the number of rows in the control minus one.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaintCells">
      <MemberSignature Language="C#" Value="protected virtual void PaintCells (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle rowBounds, int rowIndex, System.Windows.Forms.DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, System.Windows.Forms.DataGridViewPaintParts paintParts);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void PaintCells(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle rowBounds, int32 rowIndex, valuetype System.Windows.Forms.DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, valuetype System.Windows.Forms.DataGridViewPaintParts paintParts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="rowBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowState" Type="System.Windows.Forms.DataGridViewElementStates" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
        <Parameter Name="isLastVisibleRow" Type="System.Boolean" />
        <Parameter Name="paintParts" Type="System.Windows.Forms.DataGridViewPaintParts" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the <see cref="T:System.Windows.Forms.DataGridViewRow" />.</param>
        <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be painted.</param>
        <param name="rowBounds">A <see cref="T:System.Drawing.Rectangle" /> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewRow" /> that is being painted.</param>
        <param name="rowIndex">The row index of the cell that is being painted.</param>
        <param name="rowState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values that specifies the state of the row.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" /> to indicate whether the current row is the first row displayed in the <see cref="T:System.Windows.Forms.DataGridView" />; otherwise, <see langword="false" />.</param>
        <param name="isLastVisibleRow">
          <see langword="true" /> to indicate whether the current row is the last row in the <see cref="T:System.Windows.Forms.DataGridView" /> that has the &lt;xref:System.Windows.Forms.DataGridViewRow.Visible%2A&gt; property set to <see langword="true" />; otherwise, <see langword="false" />.</param>
        <param name="paintParts">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewPaintParts" /> values indicating the parts of the cells to paint.</param>
        <summary>Paints the cells in the current row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control calls this method to paint the cells in the row except when a handler for the <xref:System.Windows.Forms.DataGridView.RowPrePaint?displayProperty=fullName> event sets the <xref:System.ComponentModel.HandledEventArgs.Handled%2A?displayProperty=fullName> property to `true`. For more information, see <xref:System.Windows.Forms.DataGridViewRow.Paint%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row has not been added to a <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="paintParts" /> in not a valid bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewPaintParts" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaintHeader">
      <MemberSignature Language="C#" Value="protected virtual void PaintHeader (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle rowBounds, int rowIndex, System.Windows.Forms.DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, System.Windows.Forms.DataGridViewPaintParts paintParts);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void PaintHeader(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle rowBounds, int32 rowIndex, valuetype System.Windows.Forms.DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, valuetype System.Windows.Forms.DataGridViewPaintParts paintParts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="rowBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowState" Type="System.Windows.Forms.DataGridViewElementStates" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
        <Parameter Name="isLastVisibleRow" Type="System.Boolean" />
        <Parameter Name="paintParts" Type="System.Windows.Forms.DataGridViewPaintParts" />
      </Parameters>
      <Docs>
        <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the <see cref="T:System.Windows.Forms.DataGridViewRow" />.</param>
        <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView" /> that needs to be painted.</param>
        <param name="rowBounds">A <see cref="T:System.Drawing.Rectangle" /> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewRow" /> that is being painted.</param>
        <param name="rowIndex">The row index of the cell that is being painted.</param>
        <param name="rowState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values that specifies the state of the row.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" /> to indicate that the current row is the first row displayed in the <see cref="T:System.Windows.Forms.DataGridView" />; otherwise, <see langword="false" />.</param>
        <param name="isLastVisibleRow">
          <see langword="true" /> to indicate that the current row is the last row in the <see cref="T:System.Windows.Forms.DataGridView" /> that has the &lt;xref:System.Windows.Forms.DataGridViewRow.Visible%2A&gt; property set to <see langword="true" />; otherwise, <see langword="false" />.</param>
        <param name="paintParts">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewPaintParts" /> values indicating the parts of the cells to paint.</param>
        <summary>Paints the header cell of the current row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.DataGridView> control calls this method to paint the row header except when a handler for the <xref:System.Windows.Forms.DataGridView.RowPrePaint?displayProperty=fullName> event sets the <xref:System.ComponentModel.HandledEventArgs.Handled%2A?displayProperty=fullName> property to `true`. For more information, see <xref:System.Windows.Forms.DataGridViewRow.Paint%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row has not been added to a <see cref="T:System.Windows.Forms.DataGridView" /> control.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="paintParts" /> in not a valid bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewPaintParts" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public override bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the row is read-only.</summary>
        <value>
          <see langword="true" /> if the row is read-only; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ReadOnly property affects the <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A?displayProperty=fullName> property of each cell in the row.  
  
 Setting this property has no effect if the value of the <xref:System.Windows.Forms.DataGridView.ReadOnly%2A?displayProperty=fullName> property is `true`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.DataGridViewBand.ReadOnly%2A?displayProperty=fullName> property, which is nearly identical to the ReadOnly property of the <xref:System.Windows.Forms.DataGridViewRow> class. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewBand> class.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#11](~/add/codesnippet/cpp/p-system.windows.forms.d_234_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#11](~/add/codesnippet/csharp/p-system.windows.forms.d_234_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#11](~/add/codesnippet/visualbasic/p-system.windows.forms.d_234_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resizable">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.DataGridViewTriState Resizable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewTriState Resizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewTriState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether users can resize the row or indicating that the behavior is inherited from the &lt;xref:System.Windows.Forms.DataGridView.AllowUserToResizeRows%2A?displayProperty=fullName&gt; property.</summary>
        <value>A <see cref="T:System.Windows.Forms.DataGridViewTriState" /> value that indicates whether the row can be resized or whether it can be resized only when the &lt;xref:System.Windows.Forms.DataGridView.AllowUserToResizeRows%2A?displayProperty=fullName&gt; property is set to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot use this property with a shared row. For more information about shared rows, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
 If the Resizable property is <xref:System.Windows.Forms.DataGridViewTriState>, the user will not be able to manually adjust the row height.  
  
 By default, the Resizable property value is based on the <xref:System.Windows.Forms.DataGridView.AllowUserToResizeRows%2A?displayProperty=fullName> property value. If you explicitly set Resizable to <xref:System.Windows.Forms.DataGridViewTriState> or <xref:System.Windows.Forms.DataGridViewTriState>, however, the control value is ignored. Set Resizable to <xref:System.Windows.Forms.DataGridViewTriState> to restore the value-inheritance behavior.  
  
 Because <xref:System.Windows.Forms.DataGridViewTriState> restores the value inheritance, the Resizable property will never return a <xref:System.Windows.Forms.DataGridViewTriState> value unless the row has not been added to a <xref:System.Windows.Forms.DataGridView> control. If you need to determine whether the Resizable property value of a row is inherited or has been specified explicitly, check its <xref:System.Windows.Forms.DataGridViewElement.State%2A> property. If the <xref:System.Windows.Forms.DataGridViewElement.State%2A> value includes the <xref:System.Windows.Forms.DataGridViewElementStates> flag, the Resizable property value is not inherited.  
  
   
  
## Examples  
 The following code example illustrates the use of this property.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.MouseBasedResizing#15](~/add/codesnippet/cpp/p-system.windows.forms.d_196_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.MouseBasedResizing#15](~/add/codesnippet/csharp/p-system.windows.forms.d_196_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.MouseBasedResizing#15](~/add/codesnippet/visualbasic/p-system.windows.forms.d_196_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public override bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the row is selected.</summary>
        <value>
          <see langword="true" /> if the row is selected; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot use this property with a shared row. For more information about shared rows, see [Best Practices for Scaling the Windows Forms DataGridView Control](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example illustrates the use of this property.  
  
 [!code-cs[System.Windows.Forms.DataGridViewSelectedCollections#05](~/add/codesnippet/csharp/p-system.windows.forms.d_6_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectedCollections#05](~/add/codesnippet/visualbasic/p-system.windows.forms.d_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetValues">
      <MemberSignature Language="C#" Value="public bool SetValues (object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SetValues(object[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values">One or more objects that represent the cell values in the row.  
  
 -or-  
  
 An &lt;xref:System.Array&gt; of &lt;xref:System.Object&gt; values.</param>
        <summary>Sets the values of the row's cells.</summary>
        <returns>
          <see langword="true" /> if all values have been set; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `values` parameter represents a variable number of arguments used to populate cell values in the row. These values can be passed to this method as multiple, individual arguments or as members of a single <xref:System.Array>. Because the values are expected to be instances of type <xref:System.Object>, however, if you pass in an array of value-type values (such as <xref:System.Int32> values), this method will treat the array as a single object and assign it to a single cell. To avoid this behavior, you must cast a value-type array to an <xref:System.Object> array or pass in multiple values as multiple arguments.  
  
 If there are more values in the `values` list than there are cells to be initialized, this method ignores the extra values and returns `false`. This method also returns `false` if any of the specified values cannot be set.  
  
 If there are fewer values than there are cells, the remaining unmatched cells retain their current values.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="values" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">This method is called when the associated <see cref="T:System.Windows.Forms.DataGridView" /> is operating in virtual mode.  
  
 -or-  
  
 This row is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.DataGridViewElementStates State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewElementStates State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewElementStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current state of the row.</summary>
        <value>A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> values indicating the row state.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot use this property with shared rows because shared rows do not store their state locally. To get the state of a shared row, use the <xref:System.Windows.Forms.DataGridViewRow.GetState%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a human-readable string that describes the row.</summary>
        <returns>A &lt;xref:System.String&gt; that describes this row.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This overridden version of the ToString method supplies the class name and the <xref:System.Windows.Forms.DataGridViewBand.Index%2A> information for this instance of the <xref:System.Windows.Forms.DataGridViewRow> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the row is visible.</summary>
        <value>
          <see langword="true" /> if the row is visible; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to hide a row from view while keeping the row in the <xref:System.Windows.Forms.DataGridView>. To completely remove a row, use the <xref:System.Windows.Forms.DataGridViewRowCollection.Remove%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.DataGridViewBand.Visible%2A?displayProperty=fullName> property, which is nearly identical to the Visible property of the <xref:System.Windows.Forms.DataGridViewRow> class. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewBand> class.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#9](~/add/codesnippet/cpp/p-system.windows.forms.d_260_1.cpp)]
 [!code-cs[System.Windows.Forms.DataGridView.ButtonDemos#9](~/add/codesnippet/csharp/p-system.windows.forms.d_260_1.cs)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#9](~/add/codesnippet/visualbasic/p-system.windows.forms.d_260_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The row is in a <see cref="T:System.Windows.Forms.DataGridView" /> control and is a shared row.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>