<Type Name="IButtonControl" FullName="System.Windows.Forms.IButtonControl">
  <TypeSignature Language="C#" Value="public interface IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IButtonControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Allows a control to act like a button on a form.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An example of where this interface might be implemented is default and cancel button processing. Default buttons are notified when an unprocessed ENTER key is entered for a form, just like a dialog box would be closed. Similarly, cancel buttons are notified whenever an unprocessed ESC key is entered on a form, much like a dialog box would be dismissed.  
  
   
  
## Examples  
 The following example inherits from the <xref:System.Windows.Forms.ButtonBase> class and implements the IButtonControl interface. Implementation is added to the <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> property and the <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> and <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> methods.  
  
 [!code-vb[IButtonControl Implementation#1](~/add/codesnippet/visualbasic/t-system.windows.forms.i_15_1.vb)]
 [!code-cpp[IButtonControl Implementation#1](~/add/codesnippet/cpp/t-system.windows.forms.i_15_1.cpp)]
 [!code-cs[IButtonControl Implementation#1](~/add/codesnippet/csharp/t-system.windows.forms.i_15_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DialogResult DialogResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value returned to the parent form when the button is clicked.</summary>
        <value>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a form is shown as a dialog box using the <xref:System.Windows.Forms.Form.ShowDialog%2A> method and one of its buttons is clicked, the button's DialogResult value is assigned to the form's <xref:System.Windows.Forms.Form.DialogResult%2A> property.  
  
   
  
## Examples  
 The following example inherits from the <xref:System.Windows.Forms.ButtonBase> class and implements the <xref:System.Windows.Forms.IButtonControl> interface. Implementation is added to the DialogResult property and the <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> and <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> methods.  
  
 [!code-vb[IButtonControl Implementation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.i_17_1.vb)]
 [!code-cpp[IButtonControl Implementation#1](~/add/codesnippet/cpp/p-system.windows.forms.i_17_1.cpp)]
 [!code-cs[IButtonControl Implementation#1](~/add/codesnippet/csharp/p-system.windows.forms.i_17_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NotifyDefault">
      <MemberSignature Language="C#" Value="public void NotifyDefault (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyDefault(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see langword="true" /> if the control should behave as a default button; otherwise <see langword="false" />.</param>
        <summary>Notifies a control that it is the default button so that its appearance and behavior is adjusted accordingly.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by a parent form to make a control the default button. Default buttons are set to have an extra thick border.  
  
   
  
## Examples  
 The following example inherits from the <xref:System.Windows.Forms.ButtonBase> class and implements the <xref:System.Windows.Forms.IButtonControl> interface. Implementation is added to the <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> property and the NotifyDefault and <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> methods.  
  
 [!code-vb[IButtonControl Implementation#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_6_1.vb)]
 [!code-cpp[IButtonControl Implementation#1](~/add/codesnippet/cpp/m-system.windows.forms.i_6_1.cpp)]
 [!code-cs[IButtonControl Implementation#1](~/add/codesnippet/csharp/m-system.windows.forms.i_6_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformClick() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a <see cref="E:System.Windows.Forms.Control.Click" /> event for the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called for the button that has focus, or for the default button (if no other button has focus) when the user presses the ENTER key. This method is also called when the user presses the ESC key if the button is set as the cancel button.  
  
   
  
## Examples  
 The following example inherits from the <xref:System.Windows.Forms.ButtonBase> class and implements the <xref:System.Windows.Forms.IButtonControl> interface. Implementation is added to the <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> property and the <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> and PerformClick methods.  
  
 [!code-vb[IButtonControl Implementation#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_5_1.vb)]
 [!code-cpp[IButtonControl Implementation#1](~/add/codesnippet/cpp/m-system.windows.forms.i_5_1.cpp)]
 [!code-cs[IButtonControl Implementation#1](~/add/codesnippet/csharp/m-system.windows.forms.i_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>