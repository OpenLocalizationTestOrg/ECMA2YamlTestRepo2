<Type Name="ZipArchiveEntry" FullName="System.IO.Compression.ZipArchiveEntry">
  <TypeSignature Language="C#" Value="public class ZipArchiveEntry" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ZipArchiveEntry extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a compressed file within a zip archive.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A zip archive contains an entry for each compressed file. The ZipArchiveEntry class enables you to examine the properties of an entry, and open or delete the entry. When you open an entry, you can modify the compressed file by writing to the stream for that compressed file.  
  
 The methods for manipulating zip archives and their file entries are spread across three classes: <xref:System.IO.Compression.ZipFile>, <xref:System.IO.Compression.ZipArchive> and ZipArchiveEntry.  
  
|To…|Use…|  
|---------|----------|  
|Create a zip archive from a directory|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=fullName>|  
|Extract the contents of a zip archive to a directory|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=fullName>|  
|Add new files to an existing zip archive|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=fullName>|  
|Retrieve an file in a zip archive|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=fullName>|  
|Retrieve all of the files in a zip archive|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=fullName>|  
|To open a stream to an individual file contained in a zip archive|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=fullName>|  
|Delete a file from a zip archive|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=fullName>|  
  
 If you reference the `System.IO.Compression.FileSystem` assembly in your project, you can access two extension methods for the ZipArchiveEntry class. Those methods are <xref:System.IO.Compression.ZipFileExtensions.ExtractToFile%28System.IO.Compression.ZipArchiveEntry%2CSystem.String%29> and <xref:System.IO.Compression.ZipFileExtensions.ExtractToFile%28System.IO.Compression.ZipArchiveEntry%2CSystem.String%2CSystem.Boolean%29>, and they enable you to decompress the contents of the entry to a file. The `System.IO.Compression.FileSystem` assembly is not available in [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]. In [!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)] apps, you can decompress the contents of an archive by using <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, or you can use the [!INCLUDE[wrt](~/add/includes/wrt-md.md)] types [Compressor](http://go.microsoft.com/fwlink/p/?LinkId=246357) and [Decompressor](http://go.microsoft.com/fwlink/?LinkId=246358) to compress and decompress files.  
  
   
  
## Examples  
 The first example shows how to create a new entry in a zip archive and write to it.  
  
 [!code-cs[System.IO.Compression.ZipArchiveMode#1](~/add/codesnippet/csharp/t-system.io.compression._4_1.cs)]
 [!code-vb[System.IO.Compression.ZipArchiveMode#1](~/add/codesnippet/visualbasic/t-system.io.compression._4_1.vb)]  
  
 The second example shows how to use the <xref:System.IO.Compression.ZipFileExtensions.ExtractToFile%28System.IO.Compression.ZipArchiveEntry%2CSystem.String%29> extension method. You must reference the `System.IO.Compression.FileSystem` assembly in your project for the code to execute.  
  
 [!code-cs[System.IO.Compression.ZipArchive#1](~/add/codesnippet/csharp/t-system.io.compression._4_2.cs)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/add/codesnippet/visualbasic/t-system.io.compression._4_2.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Archive">
      <MemberSignature Language="C#" Value="public System.IO.Compression.ZipArchive Archive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Compression.ZipArchive Archive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the zip archive that the entry belongs to.</summary>
        <value>The zip archive that the entry belongs to, or <see langword="null" /> if the entry has been deleted.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CompressedLength">
      <MemberSignature Language="C#" Value="public long CompressedLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 CompressedLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the compressed size of the entry in the zip archive.</summary>
        <value>The compressed size of the entry in the zip archive.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property cannot be retrieved when the mode is set to <xref:System.IO.Compression.ZipArchiveMode>, or the mode is set to <xref:System.IO.Compression.ZipArchiveMode> and the entry has been opened.  
  
   
  
## Examples  
 The following example shows how to retrieve entries in a zip archive, and evaluate the properties of the entries. It uses the <xref:System.IO.Compression.ZipArchiveEntry.Name%2A> property to display the name of the entry, and the <xref:System.IO.Compression.ZipArchiveEntry.Length%2A> and CompressedLength properties to calculate how much the file was compressed.  
  
 [!code-cs[System.IO.Compression.ZipArchiveEntry#1](~/add/codesnippet/csharp/p-system.io.compression._2_1.cs)]
 [!code-vb[System.IO.Compression.ZipArchiveEntry#1](~/add/codesnippet/visualbasic/p-system.io.compression._2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The value of the property is not available because the entry has been modified.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deletes the entry from the zip archive.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">The entry is already open for reading or writing.</exception>
        <exception cref="T:System.NotSupportedException">The zip archive for this entry was opened in a mode other than <see cref="T:System.IO.Compression.ZipArchiveMode" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The zip archive for this entry has been disposed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the relative path of the entry in the zip archive.</summary>
        <value>The relative path of the entry in the zip archive.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FullName property contains the relative path, including the subdirectory hierarchy, of an entry in a zip archive. (In contrast, the <xref:System.IO.Compression.ZipArchiveEntry.Name%2A> property contains only the name of the entry and does not include the subdirectory hierarchy.) For example, if you create two entries in a zip archive by using the <xref:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile%2A> method and provide `NewEntry.txt` as the name for the first entry and `AddedFolder\\NewEntry.txt` for the second entry, both entries will have `NewEntry.txt` in the <xref:System.IO.Compression.ZipArchiveEntry.Name%2A> property. The first entry will also have `NewEntry.txt` in the FullName property, but the second entry will have `AddedFolder\\NewEntry.txt` in the FullName property.  
  
 You can specify any string as the path of an entry, including strings that specify invalid and absolute paths. Therefore, the FullName property might contain a value that is not correctly formatted. An invalid or absolute path might result in an exception when you extract the contents of the zip archive.  
  
   
  
## Examples  
 The following example shows how to iterate through the contents of a .zip file, and extract files that contain the .txt extension.  
  
 [!code-cs[System.IO.Compression.ZipArchive#1](~/add/codesnippet/csharp/p-system.io.compression._0_1.cs)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/add/codesnippet/visualbasic/p-system.io.compression._0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LastWriteTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset LastWriteTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset LastWriteTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the last time the entry in the zip archive was changed.</summary>
        <value>The last time the entry in the zip archive was changed.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you create a new entry from an existing file by calling the <xref:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile%2A> method, the LastWriteTime property for the entry is automatically set to the last time the file was modified. When you create a new entry programmatically by calling the <xref:System.IO.Compression.ZipArchive.CreateEntry%2A> method, the LastWriteTime property for the entry is automatically set to the time of execution. If you modify the entry, you must explicitly set the LastWriteTime property if you want the value to reflect the time of the latest change.  
  
 When you set this property, the <xref:System.DateTimeOffset> value is converted to a timestamp format that is specific to zip archives. This format supports a resolution of two seconds. The earliest permitted value is 1980 January 1 0:00:00 (midnight). The latest permitted value is 2107 December 31 23:59:58 (one second before midnight). If the value for the last write time is not valid, the property returns a default value of 1980 January 1 0:00:00 (midnight).  
  
   
  
## Examples  
 The following example shows how to open an entry in a zip archive, modify it, and set the LastWriteTime property to the current time.  
  
 [!code-cs[System.IO.Compression.ZipArchiveEntry#2](~/add/codesnippet/csharp/p-system.io.compression._3_1.cs)]
 [!code-vb[System.IO.Compression.ZipArchiveEntry#2](~/add/codesnippet/visualbasic/p-system.io.compression._3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The attempt to set this property failed, because the zip archive for the entry is in <see cref="T:System.IO.Compression.ZipArchiveMode" /> mode.</exception>
        <exception cref="T:System.IO.IOException">The archive mode is set to <see cref="T:System.IO.Compression.ZipArchiveMode" />.  
  
 \- or -  
  
 The archive mode is set to <see cref="T:System.IO.Compression.ZipArchiveMode" /> and the entry has been opened.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">An attempt was made to set this property to a value that is either earlier than 1980 January 1 0:00:00 (midnight) or later than 2107 December 31 23:59:58 (one second before midnight).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the uncompressed size of the entry in the zip archive.</summary>
        <value>The uncompressed size of the entry in the zip archive.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property cannot be retrieved when the mode is set to <xref:System.IO.Compression.ZipArchiveMode>, or the mode is set to <xref:System.IO.Compression.ZipArchiveMode> and the entry has been opened.  
  
   
  
## Examples  
 The following example shows how to retrieve entries from a zip archive, and evaluate the properties of the entries. It uses the <xref:System.IO.Compression.ZipArchiveEntry.Name%2A> property to display the name of the entry, and the Length and <xref:System.IO.Compression.ZipArchiveEntry.CompressedLength%2A> properties to calculate how much the file was compressed.  
  
 [!code-cs[System.IO.Compression.ZipArchiveEntry#1](~/add/codesnippet/csharp/p-system.io.compression._1_1.cs)]
 [!code-vb[System.IO.Compression.ZipArchiveEntry#1](~/add/codesnippet/visualbasic/p-system.io.compression._1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The value of the property is not available because the entry has been modified.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the file name of the entry in the zip archive.</summary>
        <value>The file name of the entry in the zip archive.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Name property contains the portion of the <xref:System.IO.Compression.ZipArchiveEntry.FullName%2A> property that follows the final directory separator character (\\), and does not include the subdirectory hierarchy. For example, if you create two entries in a zip archive by using the <xref:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile%2A> method and provide `NewEntry.txt` as the name for the first entry and `AddedFolder\\NewEntry.txt` for the second entry, both entries will have `NewEntry.txt` in the Name property. The first entry will also have `NewEntry.txt` in the <xref:System.IO.Compression.ZipArchiveEntry.FullName%2A> property, but the second entry will have `AddedFolder\\NewEntry.txt` in the <xref:System.IO.Compression.ZipArchiveEntry.FullName%2A> property.  
  
   
  
## Examples  
 The following example shows how to retrieve entries from a zip archive and evaluate the properties of the entries. It uses the Name property to display the name of the entry, and the <xref:System.IO.Compression.ZipArchiveEntry.Length%2A> and <xref:System.IO.Compression.ZipArchiveEntry.CompressedLength%2A> properties to calculate how much the file was compressed.  
  
 [!code-cs[System.IO.Compression.ZipArchiveEntry#1](~/add/codesnippet/csharp/p-system.io.compression._4_1.cs)]
 [!code-vb[System.IO.Compression.ZipArchiveEntry#1](~/add/codesnippet/visualbasic/p-system.io.compression._4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream Open() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opens the entry from the zip archive.</summary>
        <returns>The stream that represents the contents of the entry.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use this method to access the stream for an entry in a zip archive. After retrieving the stream, you can read from or write to the stream. When you write to the stream, the modifications you make to the entry will appear in the zip archive.  
  
   
  
## Examples  
 The following example shows how to create a new entry, open it with the Open method, and write to the stream.  
  
 [!code-cs[System.IO.Compression.ZipArchiveMode#1](~/add/codesnippet/csharp/m-system.io.compression._0_1.cs)]
 [!code-vb[System.IO.Compression.ZipArchiveMode#1](~/add/codesnippet/visualbasic/m-system.io.compression._0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">The entry is already currently open for writing.  
  
 -or-  
  
 The entry has been deleted from the archive.  
  
 -or-  
  
 The archive for this entry was opened with the <see cref="T:System.IO.Compression.ZipArchiveMode" /> mode, and this entry has already been written to.</exception>
        <exception cref="T:System.IO.InvalidDataException">The entry is either missing from the archive or is corrupt and cannot be read.  
  
 -or-  
  
 The entry has been compressed by using a compression method that is not supported.</exception>
        <exception cref="T:System.ObjectDisposedException">The zip archive for this entry has been disposed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the relative path of the entry in the zip archive.</summary>
        <returns>The relative path of the entry, which is the value stored in the &lt;xref:System.IO.Compression.ZipArchiveEntry.FullName%2A&gt; property.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>