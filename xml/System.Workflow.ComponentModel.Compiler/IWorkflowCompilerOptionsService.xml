<Type Name="IWorkflowCompilerOptionsService" FullName="System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService">
  <TypeSignature Language="C#" Value="public interface IWorkflowCompilerOptionsService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWorkflowCompilerOptionsService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the interface implemented by the environment hosting the workflow designer and compiler to provide environment-specific compilation information during the validation and compilation processes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CheckTypes">
      <MemberSignature Language="C#" Value="public bool CheckTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether types are checked.</summary>
        <value>
          <see langword="true" /> if types are checked, otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 During the validation phase of workflow compilation, a workflow source document is rejected if the CheckTypes property is `true` and the workflow or the companion rules file directly references any .NET Framework types not present on a list of authorized types. The list of authorized types is an XML document where each entry indicates an `Assembly`, a `Namespace`, a `TypeName`, and an `Authorized` {`true` or `false`} indicator. This class corresponds to an entry on the list. Also note that wildcard character designations are allowed, to include or exclude complete namespaces. For example, using `Type=”System.*”` includes all types in <xref:System>, including types contained in child namespaces.  
  
 The use of a list of authorized types is controlled by the <xref:System.Workflow.ComponentModel.Compiler.WorkflowCompiler> option **/checktypes** or by using the CheckTypes property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the programming language used by the environment, such as Visual Studio, when compiling the workflow.</summary>
        <value>The name of the programming language used by the development environment.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows an implementation of the `Language` property. This example is from the Tracking Profile Designer SDK sample. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Tracking Profile Designer Sample](http://msdn.microsoft.com/en-us/a280199c-3000-4148-ac63-cb5aaeac07c8).  
  
 [!code-cs[WF_Samples#123](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#123)]
 [!code-vb[WF_Samples#123](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#123)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RootNamespace">
      <MemberSignature Language="C#" Value="public string RootNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RootNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the root namespace set for the project.</summary>
        <value>The name of the root namespace.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is used in Visual Basic compilation environment to pass the root namespace of the project to the compiler.  
  
   
  
## Examples  
 The following example shows an implementation of the `RootNamespace` property. This example is from the Tracking Profile Designer SDK sample. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Tracking Profile Designer Sample](http://msdn.microsoft.com/en-us/a280199c-3000-4148-ac63-cb5aaeac07c8).  
  
 [!code-cs[Wf_samples#122](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#122)]
 [!code-vb[Wf_samples#122](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#122)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>