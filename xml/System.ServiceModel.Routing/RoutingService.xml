<Type Name="RoutingService" FullName="System.ServiceModel.Routing.RoutingService">
  <TypeSignature Language="C#" Value="public sealed class RoutingService : IDisposable, System.ServiceModel.Routing.IDuplexSessionRouter, System.ServiceModel.Routing.IRequestReplyRouter, System.ServiceModel.Routing.ISimplexDatagramRouter, System.ServiceModel.Routing.ISimplexSessionRouter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RoutingService extends System.Object implements class System.IDisposable, class System.ServiceModel.Routing.IDuplexSessionRouter, class System.ServiceModel.Routing.IRequestReplyRouter, class System.ServiceModel.Routing.ISimplexDatagramRouter, class System.ServiceModel.Routing.ISimplexSessionRouter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Routing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.Routing.IDuplexSessionRouter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.Routing.IRequestReplyRouter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.Routing.ISimplexDatagramRouter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.Routing.ISimplexSessionRouter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ServiceModel.Activation.AspNetCompatibilityRequirements(RequirementsMode=System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ServiceModel.ServiceBehavior(AddressFilterMode=System.ServiceModel.AddressFilterMode.Any, InstanceContextMode=System.ServiceModel.InstanceContextMode.PerSession, UseSynchronizationContext=false, ValidateMustUnderstand=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the routing service, which is responsible for routing messages between endpoints based on filter criteria.</summary>
    <remarks>To be added.</remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage">
      <MemberSignature Language="C#" Value="IAsyncResult IDuplexSessionRouter.BeginProcessMessage (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IAsyncResult System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationBehavior(Impersonation=System.ServiceModel.ImpersonationOption.Allowed)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">The &lt;xref:System.ServiceModel.Channels.Message&gt; to be processed.</param>
        <param name="callback">An &lt;xref:System.AsyncCallback&gt; delegate that is invoked when the message processing has completed.</param>
        <param name="state">A user-defined state object that is passed to the callback procedure.</param>
        <summary>Begins the asynchronous processing of the message.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll or wait for results, or both; this value is also needed when invoking &lt;xref:System.ServiceModel.Routing.RoutingService.System%23ServiceModel%23Routing%23IDuplexSessionRouter%23EndProcessMessage%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on using the IDuplexSessionRouter contract, see <xref:System.ServiceModel.Routing.IDuplexSessionRouter>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage">
      <MemberSignature Language="C#" Value="void IDuplexSessionRouter.EndProcessMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(class System.IAsyncResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The &lt;xref:System.IAsyncResult&gt; returned by the call to &lt;xref:System.ServiceModel.Routing.RoutingService.System%23ServiceModel%23Routing%23IDuplexSessionRouter%23BeginProcessMessage%2A&gt;</param>
        <summary>Completes the asynchronous execution of message processing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on using the IDuplexSessionRouter contract, see <xref:System.ServiceModel.Routing.IDuplexSessionRouter>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest">
      <MemberSignature Language="C#" Value="IAsyncResult IRequestReplyRouter.BeginProcessRequest (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IAsyncResult System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationBehavior(Impersonation=System.ServiceModel.ImpersonationOption.Allowed)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">The &lt;xref:System.ServiceModel.Channels.Message&gt; to be processed.</param>
        <param name="callback">An &lt;xref:System.AsyncCallback&gt; delegate that is invoked when the message processing has completed.</param>
        <param name="state">A user-defined state object that is passed to the callback procedure.</param>
        <summary>Initiates the asynchronous processing of the message.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll or wait for results, or both; this value is also needed when invoking &lt;xref:System.ServiceModel.Routing.RoutingService.System%23ServiceModel%23Routing%23IRequestReplyRouter%23EndProcessRequest%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on using the IRequestReplyRouter contract, see <xref:System.ServiceModel.Routing.IRequestReplyRouter>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest">
      <MemberSignature Language="C#" Value="System.ServiceModel.Channels.Message IRequestReplyRouter.EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ServiceModel.Channels.Message System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The &lt;xref:System.IAsyncResult&gt; returned by the call to &lt;xref:System.ServiceModel.Routing.RoutingService.System%23ServiceModel%23Routing%23IRequestReplyRouter%23BeginProcessRequest%2A&gt;</param>
        <summary>Finishes asynchronous execution of message processing.</summary>
        <returns>A &lt;xref:System.ServiceModel.Channels.Message&gt; that contains the reply.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on using the IRequestReplyRouter contract, see <xref:System.ServiceModel.Routing.IRequestReplyRouter>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage">
      <MemberSignature Language="C#" Value="IAsyncResult ISimplexDatagramRouter.BeginProcessMessage (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IAsyncResult System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationBehavior(Impersonation=System.ServiceModel.ImpersonationOption.Allowed)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">The &lt;xref:System.ServiceModel.Channels.Message&gt; to be processed.</param>
        <param name="callback">An &lt;xref:System.AsyncCallback&gt; delegate that is invoked when the message processing has completed.</param>
        <param name="state">A user-defined state object that is passed to the callback procedure.</param>
        <summary>Initiates the asynchronous processing of the message.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll or wait for results, or both; this value is also needed when invoking &lt;xref:System.ServiceModel.Routing.RoutingService.System%23ServiceModel%23Routing%23ISimplexDatagramRouter%23EndProcessMessage%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on using the ISimplexDatagramRouter contract, see <xref:System.ServiceModel.Routing.ISimplexDatagramRouter>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage">
      <MemberSignature Language="C#" Value="void ISimplexDatagramRouter.EndProcessMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage(class System.IAsyncResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The &lt;xref:System.IAsyncResult&gt; returned by the call to &lt;xref:System.ServiceModel.Routing.RoutingService.System%23ServiceModel%23Routing%23ISimplexDatagramRouter%23BeginProcessMessage%2A&gt;.</param>
        <summary>Finishes asynchronous execution of message processing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on using the ISimplexDatagramRouter contract, see <xref:System.ServiceModel.Routing.ISimplexDatagramRouter>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage">
      <MemberSignature Language="C#" Value="IAsyncResult ISimplexSessionRouter.BeginProcessMessage (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IAsyncResult System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceModel.OperationBehavior(Impersonation=System.ServiceModel.ImpersonationOption.Allowed)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">The &lt;xref:System.ServiceModel.Channels.Message&gt; to be processed.</param>
        <param name="callback">An &lt;xref:System.AsyncCallback&gt; delegate that is invoked when the message processing has completed.</param>
        <param name="state">A user-defined state object that is passed to the callback procedure.</param>
        <summary>Initiates the asynchronous processing of the message.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll or wait for results, or both; this value is also needed when invoking &lt;xref:System.ServiceModel.Routing.RoutingService.System%23ServiceModel%23Routing%23ISimplexSessionRouter%23EndProcessMessage%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on using the ISimplexSessionRouter contract, see <xref:System.ServiceModel.Routing.ISimplexSessionRouter>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage">
      <MemberSignature Language="C#" Value="void ISimplexSessionRouter.EndProcessMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage(class System.IAsyncResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The &lt;xref:System.IAsyncResult&gt; returned by the call to &lt;xref:System.ServiceModel.Routing.RoutingService.System%23ServiceModel%23Routing%23ISimplexSessionRouter%23BeginProcessMessage%2A&gt;.</param>
        <summary>Finishes asynchronous execution of message processing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on using the ISimplexSessionRouter contract, see <xref:System.ServiceModel.Routing.ISimplexSessionRouter>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>