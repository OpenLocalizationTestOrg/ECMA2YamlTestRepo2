<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a file object in a virtual file or resource space.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The VirtualFile class is the base class for objects that represent files in a virtual file system. Typically, you would implement a descendent of the VirtualFile class for each <xref:System.Web.Hosting.VirtualPathProvider> object descendent in your Web application.  
  
   
  
## Examples  
 The following code example is a VirtualFile class implementation that combines information stored in a <xref:System.Data.DataSet> object with a template file to return HTML data. This code example works with the code examples for the <xref:System.Web.Hosting.VirtualPathProvider> and <xref:System.Web.Hosting.VirtualDirectory> classes to provide virtual resources from a data store that is loaded into a <xref:System.Data.DataSet> object. For the complete instructions for compiling and running the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview.  
  
 This example has three parts: the VirtualFile class implementation, an XML data file used to populate the <xref:System.Data.DataSet> object, and the page template file.  
  
 The first code example is an implementation of the VirtualFile class. Its constructor uses a method on a custom <xref:System.Web.Hosting.VirtualPathProvider> object to return a <xref:System.Data.DataSet> object. It then searches the <xref:System.Data.DataSet> object to retrieve the information associated with the virtual file path provided. In the <xref:System.Web.Hosting.VirtualFile.Open%2A> method, it combines the information from the <xref:System.Data.DataSet> object with a template file and returns the combination as a <xref:System.IO.Stream> object.  
  
 [!code-cs[System.Web.Hosting.VirtualPathProvider#40](~/add/codesnippet/csharp/t-system.web.hosting.vir_2_1.cs)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/add/codesnippet/visualbasic/t-system.web.hosting.vir_2_1.vb)]  
  
 The second example is the XML data file used to populate the <xref:System.Data.DataSet> object returned by the custom <xref:System.Web.Hosting.VirtualPathProvider> object. This XML data is used to demonstrate using the <xref:System.Web.Hosting.VirtualPathProvider>, VirtualFile, and <xref:System.Web.Hosting.VirtualDirectory> classes to retrieve data from external data, and is not intended to represent a production-quality data store.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 The third example is the text file used as a template for the virtual file. Placeholders in the file are represented by text between percent (%) marks, such as `%file%` and `%content%`. Timestamps are used to monitor changes to cached virtual file data.  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">The virtual path to the resource represented by this instance.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Hosting.VirtualFile" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example is an implementation of the VirtualFile constructor that retrieves virtual file information from a <xref:System.Data.DataSet> object provided by a custom <xref:System.Web.Hosting.VirtualPathProvider> object. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualFile> class overview.  
  
 [!code-cs[System.Web.Hosting.VirtualPathProvider#41](~/add/codesnippet/csharp/m-system.web.hosting.vir_2_1.cs)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates that this is a virtual resource that should be treated as a file.</summary>
        <value>Always <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, returns a read-only stream to the virtual resource.</summary>
        <returns>A read-only stream to the virtual file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Open method returns a stream containing the data treated as a file by the <xref:System.Web.Hosting.VirtualPathProvider> class. The stream is read-only and is seekable (the <xref:System.IO.Stream.CanSeek%2A> property is true).  
  
   
  
## Examples  
 The following code example is an implementation of the Open method that combines virtual-file-specific information with a template file and then returns the combination. The template file is cached to reduce the overhead of reading the file system multiple times to retrieve the template file. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualFile> class overview.  
  
 [!code-cs[System.Web.Hosting.VirtualPathProvider#42](~/add/codesnippet/csharp/m-system.web.hosting.vir_7_1.cs)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>