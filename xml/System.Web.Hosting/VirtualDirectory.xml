<Type Name="VirtualDirectory" FullName="System.Web.Hosting.VirtualDirectory">
  <TypeSignature Language="C#" Value="public abstract class VirtualDirectory : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualDirectory extends System.Web.Hosting.VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a directory object in a virtual file or resource space.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The VirtualDirectory class is the base class for objects that represent directories in a virtual file system. Typically, you would implement a descendent of the VirtualDirectory class for each <xref:System.Web.Hosting.VirtualPathProvider> class descendent in your Web application.  
  
   
  
## Examples  
 The following code example is a VirtualDirectory class implementation that returns virtual directory information stored in a <xref:System.Data.DataSet> object. This code works with the code examples for the <xref:System.Web.Hosting.VirtualPathProvider> and <xref:System.Web.Hosting.VirtualFile> classes to provide virtual resources from a data store that is loaded into a <xref:System.Data.DataSet> object. For the complete instructions for compiling and running the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview.  
  
 This example has two parts, the VirtualDirectory class implementation and the XML data file used to populate the <xref:System.Data.DataSet> object.  
  
 The first code example is an implementation of the VirtualDirectory class. In the constructor it uses a method on a custom <xref:System.Web.Hosting.VirtualPathProvider> object to return a <xref:System.Data.DataSet> object. It then searches the <xref:System.Data.DataSet> object to retrieve the directory information associated with the virtual path provided.  
  
 [!code-vb[System.Web.Hosting.VirtualPathProvider#30](~/add/codesnippet/visualbasic/t-system.web.hosting.vir_0_1.vb)]
 [!code-cs[System.Web.Hosting.VirtualPathProvider#30](~/add/codesnippet/csharp/t-system.web.hosting.vir_0_1.cs)]  
  
 The second example is the XML data file used to populate the <xref:System.Data.DataSet> object returned by the custom <xref:System.Web.Hosting.VirtualPathProvider> object. This XML data is used to demonstrate using the <xref:System.Web.Hosting.VirtualPathProvider>, <xref:System.Web.Hosting.VirtualFile>, and VirtualDirectory classes to retrieve data from external data, and is not intended to represent a production-quality data store.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
  <resource type="dir"   
    path="/vrDir"   
    parentPath=""   
    content="">  
    <resource type="file"   
      path="/vrDir/Level1FileA.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileA." >  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level1FileB.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileB.">  
    </resource>  
    <resource type="dir"   
      path="/vrDir/Level2DirA"   
      parentPath="/vrDir"   
      content="">  
        <resource type="file"   
          path="/vrDir/Level2DirA/Level2FileA.vrf"   
          parentPath="/vrDir/Level2DirA"   
          content="This is the content of file Level2FileA." >  
        </resource>  
        <resource type="file"   
          path="/vrDir/Level2DirA/Level2FileB.vrf"  
          parentPath="/vrDir/Level2DirA"   
          content="This is the content of file Level2FileB.">  
        </resource>  
    </resource>  
    <resource type="dir"   
      path="/vrDir/Level2DirB"   
      parentPath="/vrDir"   
      content="">  
      <resource type="file"   
        path="/vrDir/Level2DirB/Level2FileA.vrf"   
        parentPath="/vrDir/Level2DirB"   
        content="This is the content of file Level2FileA." >  
      </resource>  
      <resource type="file"   
        path="/vrDir/Level2DirB/Level2FileB.vrf"  
        parentPath="/vrDir/Level2DirB"   
        content="This is the content of file Level2FileB.">  
       </resource>  
    </resource>  
  </resource>  
```  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualDirectory (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">The virtual path to the resource represented by this instance.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Hosting.VirtualDirectory" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example is an implementation of the VirtualDirectory constructor that retrieves virtual file information from a <xref:System.Data.DataSet> object provided by a custom <xref:System.Web.Hosting.VirtualPathProvider> object. It includes the `GetData` method used to populate the <xref:System.Web.Hosting.VirtualDirectory> instance. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualDirectory> class overview.  
  
 [!code-vb[System.Web.Hosting.VirtualPathProvider#31](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_1_1.vb)]
 [!code-cs[System.Web.Hosting.VirtualPathProvider#31](~/add/codesnippet/csharp/m-system.web.hosting.vir_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public abstract System.Collections.IEnumerable Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerable Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a list of the files and subdirectories contained in this virtual directory.</summary>
        <value>An object implementing the &lt;xref:System.Collections.IEnumerable&gt; interface containing <see cref="T:System.Web.Hosting.VirtualFile" /> and <see cref="T:System.Web.Hosting.VirtualDirectory" /> objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Children property contains both <xref:System.Web.Hosting.VirtualFile> and <xref:System.Web.Hosting.VirtualDirectory> objects that represent the files and directories contained in this virtual directory. To return only the <xref:System.Web.Hosting.VirtualFile> objects, use the <xref:System.Web.Hosting.VirtualDirectory.Files%2A> property. To return only the <xref:System.Web.Hosting.VirtualDirectory> objects, use the <xref:System.Web.Hosting.VirtualDirectory.Directories%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Directories">
      <MemberSignature Language="C#" Value="public abstract System.Collections.IEnumerable Directories { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerable Directories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a list of all the subdirectories contained in this directory.</summary>
        <value>An object implementing the &lt;xref:System.Collections.IEnumerable&gt; interface containing <see cref="T:System.Web.Hosting.VirtualDirectory" /> objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Directories property contains <xref:System.Web.Hosting.VirtualDirectory> objects that represent the directories contained in this virtual directory. To return the <xref:System.Web.Hosting.VirtualFile> objects, use the <xref:System.Web.Hosting.VirtualDirectory.Files%2A> property. To return both <xref:System.Web.Hosting.VirtualFile> and <xref:System.Web.Hosting.VirtualDirectory> objects, use the <xref:System.Web.Hosting.VirtualDirectory.Children%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Files">
      <MemberSignature Language="C#" Value="public abstract System.Collections.IEnumerable Files { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerable Files" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a list of all files contained in this directory.</summary>
        <value>An object implementing the &lt;xref:System.Collections.IEnumerable&gt; interface containing <see cref="T:System.Web.Hosting.VirtualFile" /> objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Files property contains <xref:System.Web.Hosting.VirtualFile> objects that represent the files contained in this virtual directory. To return the <xref:System.Web.Hosting.VirtualDirectory> objects, use the <xref:System.Web.Hosting.VirtualDirectory.Directories%2A> property. To return both <xref:System.Web.Hosting.VirtualFile> and <xref:System.Web.Hosting.VirtualDirectory> objects, use the <xref:System.Web.Hosting.VirtualDirectory.Children%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates that this is a virtual resource that should be treated as a directory.</summary>
        <value>Always <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>