<Type Name="LongValidatorAttribute" FullName="System.Configuration.LongValidatorAttribute">
  <TypeSignature Language="C#" Value="public sealed class LongValidatorAttribute : System.Configuration.ConfigurationValidatorAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LongValidatorAttribute extends System.Configuration.ConfigurationValidatorAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Declaratively instructs the .NET Framework to perform long-integer validation on a configuration property. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the LongValidatorAttribute attribute to decorate a configuration property. This is to instruct the .NET Framework to validate the property using a <xref:System.Configuration.LongValidator> object and pass to it the value of the decorating parameters.  
  
 You can apply the LongValidatorAttribute attribute to property types only.  
  
   
  
## Examples  
 The following example shows how to decorate the properties of a custom <xref:System.Configuration.ConfigurationSection> object using the LongValidatorAttribute attribute.  
  
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#7](~/add/codesnippet/visualbasic/t-system.configuration.l_0_1.vb)]
 [!code-cs[System.Configuration.ConfigurationValidatorAttributes#7](~/add/codesnippet/csharp/t-system.configuration.l_0_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LongValidatorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidatorAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use this constructor in the attributed model to ensure that the value assigned to the related property is a long integer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExcludeRange">
      <MemberSignature Language="C#" Value="public bool ExcludeRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExcludeRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to include or exclude the integers in the range defined by the &lt;xref:System.Configuration.LongValidatorAttribute.MinValue%2A&gt; and &lt;xref:System.Configuration.LongValidatorAttribute.MaxValue%2A&gt; property values.</summary>
        <value>
          <see langword="true" /> if the value must be excluded; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The range is inclusive of the <xref:System.Configuration.LongValidatorAttribute.MinValue%2A> and <xref:System.Configuration.LongValidatorAttribute.MaxValue%2A> property values. When the ExcludeRange property value is `false`, the allowed values are outside the range.  
  
   
  
## Examples  
 The following example shows how to use the <xref:System.Configuration.IntegerValidatorAttribute.ExcludeRange%2A> property.  
  
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#7](~/add/codesnippet/visualbasic/p-system.configuration.l_0_1.vb)]
 [!code-cs[System.Configuration.ConfigurationValidatorAttributes#7](~/add/codesnippet/csharp/p-system.configuration.l_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public long MaxValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum value allowed for the property.</summary>
        <value>A long integer that indicates the allowed maximum value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MaxValue property value is included in the allowed range.  
  
   
  
## Examples  
 The following example shows how to use the MaxValue property.  
  
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#7](~/add/codesnippet/visualbasic/p-system.configuration.l_1_1.vb)]
 [!code-cs[System.Configuration.ConfigurationValidatorAttributes#7](~/add/codesnippet/csharp/p-system.configuration.l_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than &lt;xref:System.Configuration.LongValidatorAttribute.MinValue%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public long MinValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MinValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum value allowed for the property.</summary>
        <value>An integer that indicates the allowed minimum value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MinValue property value is included in the allowed range.  
  
   
  
## Examples  
 The following example shows how to use the MinValue property.  
  
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#7](~/add/codesnippet/visualbasic/p-system.configuration.l_2_1.vb)]
 [!code-cs[System.Configuration.ConfigurationValidatorAttributes#7](~/add/codesnippet/csharp/p-system.configuration.l_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The selected value is greater than &lt;xref:System.Configuration.LongValidatorAttribute.MaxValue%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValidatorInstance">
      <MemberSignature Language="C#" Value="public override System.Configuration.ConfigurationValidatorBase ValidatorInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationValidatorBase ValidatorInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationValidatorBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an instance of the <see cref="T:System.Configuration.LongValidator" /> class.</summary>
        <value>The <see cref="T:System.Configuration.ConfigurationValidatorBase" /> validator instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the ValidatorInstance property value to perform string validation by calling its <xref:System.Configuration.LongValidator.Validate%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>