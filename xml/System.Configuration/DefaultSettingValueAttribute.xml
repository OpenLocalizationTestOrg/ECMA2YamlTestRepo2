<Type Name="DefaultSettingValueAttribute" FullName="System.Configuration.DefaultSettingValueAttribute">
  <TypeSignature Language="C#" Value="public sealed class DefaultSettingValueAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DefaultSettingValueAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the default value for an application settings property.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  DefaultSettingValueAttribute can only be applied to individual settings properties; it is invalid to apply this attribute to an entire application settings class.  
  
 Different settings providers may have different requirements or limitations on the use of the DefaultSettingValueAttribute. For example, the <xref:System.Configuration.LocalFileSettingsProvider> does not require this attribute, and will override any value provided by this attribute if there are any values—default or user-modified— already present in the data store.  
  
 DefaultSettingValueAttribute requires that the default value can be represented as a string. As a result, settings using XML serialization cannot have a default value specified by means of this attribute. Some providers may choose to support multiple serialization schemes which can be specified at compile time using the <xref:System.Configuration.SettingsSerializeAsAttribute>.  
  
> [!CAUTION]
>  The default values specified by this attribute are stored as plain text in the resultant compiled .exe or .dll file. Therefore these default values are inherently insecure.  
  
   
  
## Examples  
 The following code example demonstrates the use of the DefaultSettingValueAttribute applied to three of the four properties of the `FormSettings` wrapper class, which is derived from the <xref:System.Configuration.ApplicationSettingsBase> class. This class is used to persist the location, size, background color, and text of form. The first three of these form properties have default values associated with them.  
  
 The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.  
  
 [!code-cpp[AppSettingsSample#9](~/add/codesnippet/cpp/t-system.configuration.d_1.cpp)]
 [!code-cs[AppSettingsSample#9](~/add/codesnippet/csharp/t-system.configuration.d_1.cs)]
 [!code-vb[AppSettingsSample#9](~/add/codesnippet/visualbasic/AppSettingsSample/Form1.vb#9)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultSettingValueAttribute (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A &lt;xref:System.String&gt; that represents the default value for the property.</param>
        <summary>Initializes an instance of the <see cref="T:System.Configuration.DefaultSettingValueAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The supplied string must be a value that is compatible with the available serialization mechanism associated with the property type. For example, if the property is of type <xref:System.Drawing.Color>, then a `value` of `"Azure"` would be valid.  
  
> [!CAUTION]
>  The default values specified by this attribute are stored as plain text in the resultant compiled .exe or .dll file. Therefore these default values are inherently insecure.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default value for the application settings property.</summary>
        <value>A &lt;xref:System.String&gt; that represents the default value for the property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Value property is set in the <xref:System.Configuration.DefaultSettingValueAttribute.%23ctor%2A> constructor.  
  
 Setting providers may support multiple serialization schemes that can be specified with the <xref:System.Configuration.SettingsSerializeAsAttribute>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>