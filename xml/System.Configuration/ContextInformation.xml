<Type Name="ContextInformation" FullName="System.Configuration.ContextInformation">
  <TypeSignature Language="C#" Value="public sealed class ContextInformation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ContextInformation extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Encapsulates the context information that is associated with a <see cref="T:System.Configuration.ConfigurationElement" /> object. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ContextInformation object provides environment details related to an element of the configuration. For instance, you can use the <xref:System.Configuration.ContextInformation.IsMachineLevel%2A> property to determine whether a <xref:System.Configuration.ConfigurationElement> was set in Machine.config, or you can determine which hierarchy a <xref:System.Configuration.ConfigurationElement> belongs to by using the <xref:System.Configuration.ContextInformation.HostingContext%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ContextInformation type.  
  
 [!code-vb[System.Configuration.ContextInformation#1](~/add/codesnippet/visualbasic/t-system.configuration.c_0_1.vb)]
 [!code-cs[System.Configuration.ContextInformation#1](~/add/codesnippet/csharp/t-system.configuration.c_0_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="GetSection">
      <MemberSignature Language="C#" Value="public object GetSection (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetSection(string sectionName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sectionName">The name of the configuration section.</param>
        <summary>Provides an object containing configuration-section information based on the specified section name.</summary>
        <returns>An object containing the specified section within the configuration.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When specifying a section within the configuration, note that the name of the configuration section is case-sensitive.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HostingContext">
      <MemberSignature Language="C#" Value="public object HostingContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HostingContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the context of the environment where the configuration property is being evaluated.</summary>
        <value>An object specifying the environment where the configuration property is being evaluated.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The possible HostingContext value is <xref:System.Web.Configuration.WebContext>, <xref:System.Configuration.ExeContext>, or `null`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the HostingContext property.  
  
 [!code-vb[System.Configuration.ContextInformation#3](~/add/codesnippet/visualbasic/p-system.configuration.c_46_1.vb)]
 [!code-cs[System.Configuration.ContextInformation#3](~/add/codesnippet/csharp/p-system.configuration.c_46_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsMachineLevel">
      <MemberSignature Language="C#" Value="public bool IsMachineLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMachineLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value specifying whether the configuration property is being evaluated at the machine configuration level.</summary>
        <value>
          <see langword="true" /> if the configuration property is being evaluated at the machine configuration level; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the returned value of IsMachineLevel is `false`, use the <xref:System.Configuration.ContextInformation.HostingContext%2A> property to determine the level within the configuration hierarchy.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Configuration.ContextInformation.HostingContext%2A> property.  
  
 [!code-vb[System.Configuration.ContextInformation#2](~/add/codesnippet/visualbasic/p-system.configuration.c_7_1.vb)]
 [!code-cs[System.Configuration.ContextInformation#2](~/add/codesnippet/csharp/p-system.configuration.c_7_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>