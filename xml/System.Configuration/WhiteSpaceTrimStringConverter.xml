<Type Name="WhiteSpaceTrimStringConverter" FullName="System.Configuration.WhiteSpaceTrimStringConverter">
  <TypeSignature Language="C#" Value="public sealed class WhiteSpaceTrimStringConverter : System.Configuration.ConfigurationConverterBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WhiteSpaceTrimStringConverter extends System.Configuration.ConfigurationConverterBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationConverterBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Converts a string to its canonical format.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This WhiteSpaceTrimStringConverter object converts between a configuration string value and its canonical representation. Canonical representation means that all white spaces are trimmed from the beginning and end of a string value.  
  
   
  
## Examples  
 The following code example shows how to apply WhiteSpaceTrimStringConverter to a custom string property `FileName`.  
  
 [!code-cs[System.Configuration.ConfigurationConvertersCustomSection#0](~/add/codesnippet/csharp/t-system.configuration.w_1.cs)]
 [!code-vb[System.Configuration.ConfigurationConvertersCustomSection#0](~/add/codesnippet/visualbasic/t-system.configuration.w_1.vb)]  
  
 The following is a configuration excerpt used by the previous example.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<configuration>  
  
  <configSections>  
    <section name="CustomSection"   
      type="Samples.AspNet.CustomSection,   
      ConfigurationConverters,   
      Version=1.0.0.0, Culture=neutral,   
      PublicKeyToken=null"   
      allowDefinition="Everywhere"   
      allowExeDefinition="MachineToApplication"   
      restartOnExternalChanges="true" />  
  </configSections>  
  
  <CustomSection fileName="default.txt" maxIdleTime="90" timeDelay="infinite" cdStr="str0, str1" permission="Read" maxUsers="Infinite"/>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WhiteSpaceTrimStringConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.WhiteSpaceTrimStringConverter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normally, you use the converter types provided by the system. The only time you need to use the WhiteSpaceTrimStringConverter constructor is when you create your own conversion type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext ctx, System.Globalization.CultureInfo ci, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext ctx, class System.Globalization.CultureInfo ci, object data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
        <param name="ci">The &lt;xref:System.Globalization.CultureInfo&gt; object used during conversion.</param>
        <param name="data">The &lt;xref:System.String&gt; object to convert.</param>
        <summary>Converts a &lt;xref:System.String&gt; to canonical form.</summary>
        <returns>An object representing the converted value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The system uses the ConvertFrom method when reading from a configuration file to convert a <xref:System.String> value to its canonical form.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext ctx, System.Globalization.CultureInfo ci, object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext ctx, class System.Globalization.CultureInfo ci, object value, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
        <param name="ci">The &lt;xref:System.Globalization.CultureInfo&gt; object used during conversion.</param>
        <param name="value">The value to convert to.</param>
        <param name="type">The type to convert to.</param>
        <summary>Converts a &lt;xref:System.String&gt; to canonical form.</summary>
        <returns>An object representing the converted value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The system uses the ConvertTo method when writing to a configuration file to convert a <xref:System.String> value to its canonical form.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>