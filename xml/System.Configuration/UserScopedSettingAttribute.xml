<Type Name="UserScopedSettingAttribute" FullName="System.Configuration.UserScopedSettingAttribute">
  <TypeSignature Language="C#" Value="public sealed class UserScopedSettingAttribute : System.Configuration.SettingAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UserScopedSettingAttribute extends System.Configuration.SettingAttribute" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.SettingAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies that an application settings group or property contains distinct values for each user of an application. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Application settings properties have a scope that is based either at the application or the user level. As the categories imply, application-scoped properties present uniform values to all users of the application, whereas user-scoped properties have dedicated values for each user of the application.  
  
 The UserScopedSettingAttribute indicates that a property should be considered a user level setting, and that appropriate storage decisions should be made accordingly by the settings provider.  
  
 A scope attribute is required for each application settings property. If a property is not applied with either a <xref:System.Configuration.ApplicationScopedSettingAttribute> or UserScopedSettingAttribute, the property is ignored by the settings providerâ€”it is not serialized. It is invalid, however, to apply both attributes to the same settings property. Such an attempt will cause a <xref:System.Configuration.ConfigurationErrorsException> to be thrown.  
  
   
  
## Examples  
 The following code example demonstrates the use of the UserScopedSettingAttribute applied to all four properties of the `FormSettings` wrapper class, which is derived from the <xref:System.Configuration.ApplicationSettingsBase> class. This class is used to persist the location, size, background color, and text of form. The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.  
  
 [!code-cpp[AppSettingsSample#9](~/add/codesnippet/cpp/t-system.configuration.u_1.cpp)]
 [!code-cs[AppSettingsSample#9](~/add/codesnippet/csharp/t-system.configuration.u_1.cs)]
 [!code-vb[AppSettingsSample#9](~/add/codesnippet/visualbasic/AppSettingsSample/Form1.vb#9)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UserScopedSettingAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.UserScopedSettingAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each application settings property must be applied with a single scope attribute in order for it to be recognized and serialized by the settings provider.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>