<Type Name="JulianCalendar" FullName="System.Globalization.JulianCalendar">
  <TypeSignature Language="C#" Value="public class JulianCalendar : System.Globalization.Calendar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit JulianCalendar extends System.Globalization.Calendar" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Globalization.Calendar</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the Julian calendar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In 45 B.C., Julius Caesar ordered a calendar reform, which resulted in the calendar called the Julian calendar. The Julian calendar is the predecessor of the Gregorian calendar.  
  
> [!NOTE]
>  For information about using the <xref:System.Globalization.HebrewCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).  
  
 The JulianCalendar class recognizes only the current era.  
  
 Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. A common year has 365 days and a leap year has 366 days.  
  
 Like the Gregorian calendar, the Julian calendar has 12 months with 28 to 31 days each: January (31 days), February (28 or 29 days), March (31 days), April (30 days), May (31 days), June (30 days), July (31 days), August (31 days), September (30 days), October (31 days), November (30 days), and December (31 days). February has 29 days during leap years and 28 during common years.  
  
 The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to the 19th day of December in the year 2000 A.D. in the Julian calendar.  
  
 Currently, the JulianCalendar is not used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class. Therefore, the JulianCalendar class can be used only to calculate dates in the Julian calendar.  
  
 Each <xref:System.Globalization.CultureInfo> object supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JulianCalendar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Globalization.JulianCalendar" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public override DateTime AddMonths (DateTime time, int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to which to add months.</param>
        <param name="months">The number of months to add.</param>
        <summary>Returns a &lt;xref:System.DateTime&gt; that is the specified number of months away from the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>The &lt;xref:System.DateTime&gt; that results from adding the specified number of months to the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  
  
 For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.  
  
 If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  
  
 The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  
  
 [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.j_20_1.vb)]
 [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.j_20_1.cs)]  
  
   
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  
  
 [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_20_2.vb)]
 [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_20_2.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_20_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting &lt;xref:System.DateTime&gt; is outside the supported range.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="months" /> is less than -120000.  
  
 -or-  
  
 <paramref name="months" /> is greater than 120000.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public override DateTime AddYears (DateTime time, int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to which to add years.</param>
        <param name="years">The number of years to add.</param>
        <summary>Returns a &lt;xref:System.DateTime&gt; that is the specified number of years away from the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>The &lt;xref:System.DateTime&gt; that results from adding the specified number of years to the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  
  
 For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date is the 28th day of February in the following year.  
  
 If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  
  
 The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  
  
 [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.j_19_1.vb)]
 [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.j_19_1.cs)]  
  
   
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  
  
 [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_19_2.vb)]
 [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_19_2.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_19_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting &lt;xref:System.DateTime&gt; is outside the supported range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlgorithmType">
      <MemberSignature Language="C#" Value="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
        <value>Always returns <see cref="T:System.Globalization.CalendarAlgorithmType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  
  
 [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.j_6_1.cs)]
 [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.j_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Eras">
      <MemberSignature Language="C#" Value="public override int[] Eras { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] Eras" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the list of eras in the <see cref="T:System.Globalization.JulianCalendar" />.</summary>
        <value>An array of integers that represents the eras in the <see cref="T:System.Globalization.JulianCalendar" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Globalization.JulianCalendar> class recognizes only the current era. This property always returns an array with only one element.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfMonth">
      <MemberSignature Language="C#" Value="public override int GetDayOfMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfMonth(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the day of the month in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer from 1 to 31 that represents the day of the month in <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  
  
 [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_8_1.vb)]
 [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_8_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_8_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfWeek">
      <MemberSignature Language="C#" Value="public override DayOfWeek GetDayOfWeek (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the day of the week in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>A &lt;xref:System.DayOfWeek&gt; value that represents the day of the week in <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.DayOfWeek> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.  
  
   
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  
  
 [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_6_1.vb)]
 [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_6_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_6_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfYear">
      <MemberSignature Language="C#" Value="public override int GetDayOfYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfYear(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the day of the year in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer from 1 to 366 that represents the day of the year in <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year. The total is the same value as that returned by <xref:System.Globalization.JulianCalendar.GetDaysInYear%2A>.  
  
   
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  
  
 [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_0_1.vb)]
 [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_0_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDaysInMonth">
      <MemberSignature Language="C#" Value="public override int GetDaysInMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
        <returns>The number of days in the specified month in the specified year in the specified era.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year.  
  
   
  
## Examples  
 The following example calls GetDaysInMonth for the second month in each of five years in each era.  
  
 [!code-cpp[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/44fd8236-349c-466d-b6f3-_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/44fd8236-349c-466d-b6f3-_1.cs)]
 [!code-vb[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/44fd8236-349c-466d-b6f3-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="month" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDaysInYear">
      <MemberSignature Language="C#" Value="public override int GetDaysInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInYear(int32 year, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Returns the number of days in the specified year in the specified era.</summary>
        <returns>The number of days in the specified year in the specified era.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns 365 or 366, depending on whether `year` is a leap year.  
  
   
  
## Examples  
 The following example calls GetDaysInYear for five years in each era.  
  
 [!code-cs[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_11_1.cs)]
 [!code-cpp[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_11_1.cpp)]
 [!code-vb[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="year" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public override int GetEra (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetEra(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the era in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer that represents the era in <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Globalization.JulianCalendar> class recognizes only the current era.  
  
   
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  
  
 [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_1_1.vb)]
 [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_1_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetLeapMonth">
      <MemberSignature Language="C#" Value="public override int GetLeapMonth (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLeapMonth(int32 year, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Calculates the leap month for a specified year and era.</summary>
        <returns>A positive integer that indicates the leap month in the specified year and era. Alternatively, this method returns zero if the calendar does not support a leap month, or if <paramref name="year" /> and <paramref name="era" /> do not specify a leap year.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMonth">
      <MemberSignature Language="C#" Value="public override int GetMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonth(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the month in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer from 1 to 12 that represents the month in <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  
  
 [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_15_1.vb)]
 [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_15_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_15_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMonthsInYear">
      <MemberSignature Language="C#" Value="public override int GetMonthsInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonthsInYear(int32 year, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Returns the number of months in the specified year in the specified era.</summary>
        <returns>The number of months in the specified year in the specified era.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example calls GetMonthsInYear for five years in each era.  
  
 [!code-vb[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_7_1.vb)]
 [!code-cpp[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_7_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_7_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="year" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetYear">
      <MemberSignature Language="C#" Value="public override int GetYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetYear(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the year in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer that represents the year in <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  
  
 [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_12_1.vb)]
 [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_12_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_12_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsLeapDay">
      <MemberSignature Language="C#" Value="public override bool IsLeapDay (int year, int month, int day, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="day">An integer from 1 to 31 that represents the day.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Determines whether the specified date in the specified era is a leap day.</summary>
        <returns>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  
  
 A leap day is a day that occurs only in a leap year. In the Julian calendar, the 29th day of February is the only leap day.  
  
   
  
## Examples  
 The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  
  
 [!code-cs[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/csharp/dc155d8f-dfc5-4b2c-b5d1-_1.cs)]
 [!code-cpp[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/cpp/dc155d8f-dfc5-4b2c-b5d1-_1.cpp)]
 [!code-vb[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/dc155d8f-dfc5-4b2c-b5d1-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="month" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="day" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsLeapMonth">
      <MemberSignature Language="C#" Value="public override bool IsLeapMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
        <returns>This method always returns <see langword="false" />, unless overridden by a derived class.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  
  
 A leap month is an entire month that occurs only in a leap year. The Julian calendar does not have any leap months.  
  
   
  
## Examples  
 The following example calls IsLeapMonth for all the months in five years in the current era.  
  
 [!code-vb[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/ba7f2b6b-4831-427c-a7c2-_1.vb)]
 [!code-cs[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/ba7f2b6b-4831-427c-a7c2-_1.cs)]
 [!code-cpp[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/ba7f2b6b-4831-427c-a7c2-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="month" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public override bool IsLeapYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapYear(int32 year, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Determines whether the specified year in the specified era is a leap year.</summary>
        <returns>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  
  
   
  
## Examples  
 The following example calls IsLeapYear for five years in each of the eras.  
  
 [!code-cpp[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.j_3_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.j_3_1.cs)]
 [!code-vb[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="JulianEra">
      <MemberSignature Language="C#" Value="public static readonly int JulianEra;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 JulianEra" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the current era. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Globalization.JulianCalendar> class recognizes only the current era. This field always returns 1.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MaxSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MaxSupportedDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.JulianCalendar" /> class.</summary>
        <value>The latest date and time supported by the <see cref="T:System.Globalization.JulianCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example gets the minimum value and the maximum value of the calendar.  
  
 [!code-cpp[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_2_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_2_1.cs)]
 [!code-vb[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MinSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MinSupportedDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.JulianCalendar" /> class.</summary>
        <value>The earliest date and time supported by the <see cref="T:System.Globalization.JulianCalendar" /> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example gets the minimum value and the maximum value of the calendar.  
  
 [!code-cpp[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_3_1.cpp)]
 [!code-cs[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_3_1.cs)]
 [!code-vb[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="day">An integer from 1 to 31 that represents the day.</param>
        <param name="hour">An integer from 0 to 23 that represents the hour.</param>
        <param name="minute">An integer from 0 to 59 that represents the minute.</param>
        <param name="second">An integer from 0 to 59 that represents the second.</param>
        <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Returns a &lt;xref:System.DateTime&gt; that is set to the specified date and time in the specified era.</summary>
        <returns>The &lt;xref:System.DateTime&gt; that is set to the specified date and time in the current era.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="month" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="day" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="hour" /> is less than zero or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than zero or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than zero or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than zero or greater than 999.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToFourDigitYear">
      <MemberSignature Language="C#" Value="public override int ToFourDigitYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ToFourDigitYear(int32 year) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">A two-digit or four-digit integer that represents the year to convert.</param>
        <summary>Converts the specified year to a four-digit year by using the &lt;xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A&gt; property to determine the appropriate century.</summary>
        <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the specified `year` within that 100-year range. For example, if <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  
  
 ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TwoDigitYearMax">
      <MemberSignature Language="C#" Value="public override int TwoDigitYearMax { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TwoDigitYearMax" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
        <value>The last year of a 100-year range that can be represented by a 2-digit year.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  
  
 The <xref:System.Globalization.JulianCalendar> class does not detect changes in the system settings.  
  
 The application can set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 99.  
  
 -or-  
  
 The value specified in a set operation is greater than <see langword="MaxSupportedDateTime.Year" />.</exception>
        <exception cref="T:System.InvalidOperationException">In a set operation, the current instance is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>