<Type Name="CultureTypes" FullName="System.Globalization.CultureTypes">
  <TypeSignature Language="C#" Value="public enum CultureTypes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed CultureTypes extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the types of culture lists that can be retrieved using the &lt;xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=fullName&gt; method.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 These culture type values are returned by the <xref:System.Globalization.CultureInfo.CultureTypes%2A?displayProperty=fullName> property, and also serve as a filter that limits the cultures returned by the <xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=fullName> method. For more information on cultures, see <xref:System.Globalization.CultureInfo>.  
  
 Generally, your application should enumerate all cultures, using the AllCultures value. This allows enumeration of custom cultures, as well as the other culture types.  
  
 Note that the FrameworkCultures and WindowsOnlyCultures members have been deprecated.  
  
   
  
## Examples  
 The following example demonstrates the CultureTypes enumeration and the <xref:System.Globalization.CultureInfo.CultureTypes%2A> property.  
  
 [!code-cs[System.Globalization.CultureTypes#1](~/add/codesnippet/csharp/t-system.globalization.c_1_1.cs)]
 [!code-cpp[System.Globalization.CultureTypes#1](~/add/codesnippet/cpp/t-system.globalization.c_1_1.cpp)]
 [!code-vb[System.Globalization.CultureTypes#1](~/add/codesnippet/visualbasic/t-system.globalization.c_1_1.vb)]  
  
 The following example displays several properties of the neutral cultures.  
  
 [!code-cs[System.Globalization.CultureInfo.GetCultures#1](~/add/codesnippet/csharp/t-system.globalization.c_1_2.cs)]
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/add/codesnippet/cpp/t-system.globalization.c_1_2.cpp)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/add/codesnippet/visualbasic/t-system.globalization.c_1_2.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="AllCultures">
      <MemberSignature Language="C#" Value="AllCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes AllCultures = int32(7)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>All cultures that ship with the .NET Framework, including neutral and specific cultures, cultures installed in the Windows operating system, and custom cultures created by the user.  
  
 AllCultures is a composite field that includes the NeutralCultures, SpecificCultures, and InstalledWin32Cultures values.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FrameworkCultures">
      <MemberSignature Language="C#" Value="FrameworkCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes FrameworkCultures = int32(64)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated.  Please use other values in CultureTypes.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is deprecated; using this value with &lt;xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=fullName&gt; returns neutral and specific cultures shipped with the .NET Framework 2.0.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstalledWin32Cultures">
      <MemberSignature Language="C#" Value="InstalledWin32Cultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes InstalledWin32Cultures = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>All cultures that are installed in the Windows operating system. Note that not all cultures supported by the .NET Framework are installed in the operating system.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NeutralCultures">
      <MemberSignature Language="C#" Value="NeutralCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes NeutralCultures = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cultures that are associated with a language but are not specific to a country/region. The names of .NET Framework cultures consist of the lowercase two-letter code derived from ISO 639-1. For example: "en" (English) is a neutral culture.</summary>
        <threadsafe />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Custom cultures can have any user-specified name, not just a two-letter code.  
  
 The invariant culture is included in the array of cultures returned by the <xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=fullName> method that specifies this value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplacementCultures">
      <MemberSignature Language="C#" Value="ReplacementCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes ReplacementCultures = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Custom cultures created by the user that replace cultures shipped with the .NET Framework.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpecificCultures">
      <MemberSignature Language="C#" Value="SpecificCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes SpecificCultures = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cultures that are specific to a country/region. The names of these cultures follow RFC 4646 (Windows Vista and later). The format is "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;", where &lt;languagecode2&gt; is a lowercase two-letter code derived from ISO 639-1 and &lt;country/regioncode2&gt; is an uppercase two-letter code derived from ISO 3166. For example, "en-US" for English (United States) is a specific culture.</summary>
        <threadsafe />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Custom cultures can have any user-specified name, not just a standard-compliant name.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserCustomCulture">
      <MemberSignature Language="C#" Value="UserCustomCulture" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes UserCustomCulture = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Custom cultures created by the user.</summary>
        <threadsafe />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Windows versions prior to Windows 10, the UserCustomCulture value is assigned to custom cultures created by the developer. In Windows 10, the UserCustomCulture value is also assigned to system cultures that are not backed by a complete set of cultural data and that do not have unique local identifiers. (All cultures of type UserCustomCulture share a <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=fullName> value of `LOCALE_CUSTOM_UNSPECIFIED` (0x1000, or 4096). As a result, code such as  
  
 [!code-vb[System.Globalization.CultureTypes#2](~/add/codesnippet/visualbasic/t-system.globalization.c_1_3.vb)]
 [!code-cs[System.Globalization.CultureTypes#2](~/add/codesnippet/csharp/t-system.globalization.c_1_3.cs)]  
  
 or  
  
 [!code-vb[System.Globalization.CultureTypes#3](~/add/codesnippet/visualbasic/t-system.globalization.c_1_4.vb)]
 [!code-cs[System.Globalization.CultureTypes#3](~/add/codesnippet/csharp/t-system.globalization.c_1_4.cs)]  
  
 will return different sets of cultures on different Windows versions.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsOnlyCultures">
      <MemberSignature Language="C#" Value="WindowsOnlyCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes WindowsOnlyCultures = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated.  Please use other values in CultureTypes.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is deprecated. If it is used as an argument to the &lt;xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=fullName&gt; method, the method returns an empty array.</summary>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>