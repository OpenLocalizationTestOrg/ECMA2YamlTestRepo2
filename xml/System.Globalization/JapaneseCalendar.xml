<Type Name="JapaneseCalendar" FullName="System.Globalization.JapaneseCalendar">
  <TypeSignature Language="C#" Value="public class JapaneseCalendar : System.Globalization.Calendar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit JapaneseCalendar extends System.Globalization.Calendar" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Globalization.Calendar</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the Japanese calendar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Japanese calendar, which is also known as the Wareki calendar, works exactly like the Gregorian calendar, except that the year and era are different.  
  
> [!NOTE]
>  For information about using the JapaneseCalendar class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).  
  
 The Japanese calendar recognizes one era for every emperor's reign. The current era is the Heisei era, which began in the Gregorian calendar year 1989. The era name is typically displayed before the year. For example, the Gregorian calendar year 2001 is the Japanese calendar year Heisei 13. Note that the first year of an era is called "Gannen." Therefore, the Gregorian calendar year 1989 was the Japanese calendar year Heisei Gannen.  
  
 This class assigns numbers to the eras as follows:  
  
|GetEra value|Era Name|Era Abbreviation|Gregorian Dates|  
|------------------|--------------|----------------------|---------------------|  
|4|平成 (Heisei)|平 (H, h)|January 8, 1989 to present|  
|3|昭和 (Showa)|昭 (S, s)|December 25, 1926 to January 7, 1989|  
|2|大正 (Taisho)|大 (T, t)|July 30, 1912 to December 24, 1926|  
|1|明治 (Meiji)|明 (M, m)|September 8, 1868 to July 29, 1912|  
  
 This class handles dates from September 8 in the year Meiji 1 (in the Gregorian calendar, September 8, 1868). Although the Japanese calendar was switched from a lunar calendar to a solar calendar in the year Meiji 6 (1873 of the Gregorian calendar), this implementation is based on the solar calendar only.  
  
 Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  
  
 The Japanese calendar has 12 months with 28 to 31 days each:  
  
|GetMonth value|Month|English|Days in common years|Days in leap years|  
|--------------------|-----------|-------------|--------------------------|------------------------|  
|1|1月 (Ichigatsu)|January|31|31|  
|2|2月 (Nigatsu)|February|28|29|  
|3|3月 (Sangatsu)|March|31|31|  
|4|4月 (Shigatsu)|April|30|30|  
|5|5月 (Gogatsu)|May|31|31|  
|6|6月 (Rokugatsu)|June|30|30|  
|7|7月 (Shichigatsu)|July|31|31|  
|8|8月 (Hachigatsu)|August|31|31|  
|9|9月 (Kugatsu)|September|30|30|  
|10|10月 (Juugatsu)|October|31|31|  
|11|11月 (Juuichigatsu)|November|30|30|  
|12|12月 (Juunigatsu)|December|31|31|  
  
 Nigatsu, which is equivalent to the Gregorian calendar month of February, has 29 days during leap years and 28 during common years.  
  
 The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to the first day of Ichigatsu in the year Heisei 13 in the Japanese calendar.  
  
 If the application is using the JapaneseCalendar class, <xref:System.DateTime.Parse%2A?displayProperty=fullName> recognizes the era abbreviations in front of the year. The abbreviation is either the single-character case-insensitive Latin alphabet abbreviation or the single-character Kanji abbreviation.  
  
 Each <xref:System.Globalization.CultureInfo> object supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JapaneseCalendar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Globalization.JapaneseCalendar" /> class.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TypeInitializationException">Unable to initialize a <see cref="T:System.Globalization.JapaneseCalendar" /> object because of missing culture information.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public override DateTime AddMonths (DateTime time, int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to which to add months.</param>
        <param name="months">The number of months to add.</param>
        <summary>Returns a &lt;xref:System.DateTime&gt; that is the specified number of months away from the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>The &lt;xref:System.DateTime&gt; that results from adding the specified number of months to the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. The era part of the resulting <xref:System.DateTime> is affected if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  
  
 For example, if the specified month is Juugatsu (October), which has 31 days, the specified day is the 31st day of that month, and `months` is 6, the resulting year is one more than the specified year, the resulting month is Shigatsu (April), and the resulting day is the 30th day, which is the last day in Shigatsu (April).  
  
 If `months` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  
  
 The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  
  
 [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.j_17_1.vb)]
 [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.j_17_1.cs)]  
  
   
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_17_2.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_17_2.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_17_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting &lt;xref:System.DateTime&gt; is outside the supported range.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="months" /> is less than -120000.  
  
 -or-  
  
 <paramref name="months" /> is greater than 120000.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public override DateTime AddYears (DateTime time, int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to which to add years.</param>
        <param name="years">The number of years to add.</param>
        <summary>Returns a &lt;xref:System.DateTime&gt; that is the specified number of years away from the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>The &lt;xref:System.DateTime&gt; that results from adding the specified number of years to the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. The era part of the resulting <xref:System.DateTime> is affected if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  
  
 For example, Nigatsu (February) has 28 days except during leap years when it has 29 days. If the specified date is the 29th day of Nigatsu (February) in a leap year and the value of `years` is 1, the resulting date will be the 28th day of Nigatsu (February) in the following year.  
  
 If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  
  
 The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  
  
 [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.j_14_1.vb)]
 [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.j_14_1.cs)]  
  
   
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_14_2.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_14_2.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_14_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting &lt;xref:System.DateTime&gt; is outside the supported range.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="time" /> is outside the supported range of the <see cref="T:System.Globalization.JapaneseCalendar" /> type.  
  
 -or-  
  
 <paramref name="years" /> is less than -10,000 or greater than 10,000.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlgorithmType">
      <MemberSignature Language="C#" Value="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
        <value>Always returns <see cref="T:System.Globalization.CalendarAlgorithmType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  
  
 [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.j_5_1.cs)]
 [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.j_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Eras">
      <MemberSignature Language="C#" Value="public override int[] Eras { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] Eras" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the list of eras in the <see cref="T:System.Globalization.JapaneseCalendar" />.</summary>
        <value>An array of integers that represents the eras in the <see cref="T:System.Globalization.JapaneseCalendar" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Japanese calendar recognizes one era for every emperor's reign. The current era is the Heisei era, which began in the Gregorian calendar year 1989. The era name is typically displayed before the year. For example, the Gregorian calendar year 2001 is the Japanese calendar year Heisei 13. Note that the first year of an era is called "Gannen." Therefore, the Gregorian calendar year 1989 was the Japanese calendar year Heisei Gannen.  
  
 This class assigns numbers to the eras as follows:  
  
|GetEra value|Era Name|Era Abbreviation|Gregorian Dates|  
|------------------|--------------|----------------------|---------------------|  
|4|平成 (Heisei)|平 (H, h)|January 8, 1989 to present|  
|3|昭和 (Showa)|昭 (S, s)|December 25, 1926 to January 7, 1989|  
|2|大正 (Taisho)|大 (T, t)|July 30, 1912 to December 24, 1926|  
|1|明治 (Meiji)|明 (M, m)|September 8, 1868 to July 29, 1912|  
  
 This class handles dates from September 8 in the year Meiji 1 (January 1, 1868 of the Gregorian calendar). Although the Japanese calendar was switched from a lunar calendar to a solar calendar in the year Meiji 6 (1873 of the Gregorian calendar), this implementation is based on the solar calendar only.  
  
> [!NOTE]
>  Should additional eras be added in the future, applications may encounter more than the expected four eras for the Japanese calendar. Applications should be tested to ensure that they continue to work in such an event; see [Era Handling for the Japanese Calendar](http://go.microsoft.com/fwlink/p/?LinkId=239618).  
  
   
  
## Examples  
 The following example displays the values contained in the Eras property.  
  
 [!code-cs[System.Globalization.JapaneseCalendar.Eras#1](~/add/codesnippet/csharp/p-system.globalization.j_4_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar.Eras#1](~/add/codesnippet/visualbasic/p-system.globalization.j_4_1.vb)]
 [!code-cpp[System.Globalization.JapaneseCalendar.Eras#1](~/add/codesnippet/cpp/p-system.globalization.j_4_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfMonth">
      <MemberSignature Language="C#" Value="public override int GetDayOfMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfMonth(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the day of the month in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer from 1 to 31 that represents the day of the month in the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_13_1.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_13_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfWeek">
      <MemberSignature Language="C#" Value="public override DayOfWeek GetDayOfWeek (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the day of the week in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>A &lt;xref:System.DayOfWeek&gt; value that represents the day of the week in the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.DayOfWeek> values are as follows:  
  
|DayOfWeek value|which indicates|  
|---------------------|---------------------|  
|Sunday|日曜日 (Nichiyoubi)|  
|Monday|月曜日 (Getsuyoubi)|  
|Tuesday|火曜日 (Kayoubi)|  
|Wednesday|水曜日 (Suiyoubi)|  
|Thursday|木曜日 (Mokuyoubi)|  
|Friday|金曜日 (Kinyoubi)|  
|Saturday|土曜日 (Doyoubi)|  
  
   
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_9_1.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_9_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfYear">
      <MemberSignature Language="C#" Value="public override int GetDayOfYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfYear(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the day of the year in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer from 1 to 366 that represents the day of the year in the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value as that returned by <xref:System.Globalization.JapaneseCalendar.GetDaysInYear%2A>.  
  
   
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_5_1.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_5_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDaysInMonth">
      <MemberSignature Language="C#" Value="public override int GetDaysInMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
        <returns>The number of days in the specified month in the specified year in the specified era.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, this method returns 28 or 29 for Nigatsu (February, `month` = 2), depending on whether `year` is a leap year.  
  
   
  
## Examples  
 The following code example calls GetDaysInMonth for the second month in each of five years in each era.  
  
 [!code-vb[System.Globalization.JapaneseCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/50a0d95d-a5e5-49bd-9864-_1.vb)]
 [!code-cpp[System.Globalization.JapaneseCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/50a0d95d-a5e5-49bd-9864-_1.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/50a0d95d-a5e5-49bd-9864-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="month" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDaysInYear">
      <MemberSignature Language="C#" Value="public override int GetDaysInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInYear(int32 year, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Returns the number of days in the specified year in the specified era.</summary>
        <returns>The number of days in the specified year in the specified era.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, this method returns 365 or 366, depending on whether `year` is a leap year.  
  
   
  
## Examples  
 The following example calls GetDaysInYear for five years in each era.  
  
 [!code-cs[System.Globalization.JapaneseCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_4_1.cs)]
 [!code-cpp[System.Globalization.JapaneseCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_4_1.cpp)]
 [!code-vb[System.Globalization.JapaneseCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public override int GetEra (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetEra(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the era in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer that represents the era in the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Japanese calendar recognizes one era for every emperor's reign. The current era is the Heisei era, which began in the Gregorian calendar year 1989. The era name is typically displayed before the year. For example, the Gregorian calendar year 2001 is the Japanese calendar year Heisei 13. Note that the first year of an era is called "Gannen." Therefore, the Gregorian calendar year 1989 was the Japanese calendar year Heisei Gannen.  
  
 This class assigns numbers to the eras as follows:  
  
|GetEra value|Era Name|Era Abbreviation|Gregorian Dates|  
|------------------|--------------|----------------------|---------------------|  
|4|平成 (Heisei)|平 (H, h)|January 8, 1989 to present|  
|3|昭和 (Showa)|昭 (S, s)|December 25, 1926 to January 7, 1989|  
|2|大正 (Taisho)|大 (T, t)|July 30, 1912 to December 24, 1926|  
|1|明治 (Meiji)|明 (M, m)|September 8, 1868 to July 29, 1912|  
  
 Ordinarily, the <xref:System.Globalization.JapaneseCalendar> class supports dates from September 8 in the year Meiji 1 (September 8, 1868 of the Gregorian calendar), which is the value of the <xref:System.Globalization.JapaneseCalendar.MinSupportedDateTime%2A> property. However, the GetEra method successfully returns the era for dates from January 1 through September 7 in the year Meiji 1 (January 1, 1868 through September 7, 1868 in the Gregorian calendar). For dates earlier than January 1, 1868 in the Gregorian calendar, the method throws an <xref:System.ArgumentOutOfRangeException> exception.  
  
   
  
## Examples  
 The following example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_10_1.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_10_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting &lt;xref:System.DateTime&gt; is outside the supported range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetLeapMonth">
      <MemberSignature Language="C#" Value="public override int GetLeapMonth (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLeapMonth(int32 year, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">A year.</param>
        <param name="era">An era.</param>
        <summary>Calculates the leap month for a specified year and era.</summary>
        <returns>The return value is always 0 because the <see cref="T:System.Globalization.JapaneseCalendar" /> type does not support the notion of a leap month.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMonth">
      <MemberSignature Language="C#" Value="public override int GetMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonth(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the month in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer from 1 to 12 that represents the month in the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_18_1.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_18_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMonthsInYear">
      <MemberSignature Language="C#" Value="public override int GetMonthsInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonthsInYear(int32 year, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Returns the number of months in the specified year in the specified era.</summary>
        <returns>The return value is always 12.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example calls GetMonthsInYear for five years in each era.  
  
 [!code-cs[System.Globalization.JapaneseCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/0687c0ba-842c-4e70-872b-_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/0687c0ba-842c-4e70-872b-_1.vb)]
 [!code-cpp[System.Globalization.JapaneseCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/0687c0ba-842c-4e70-872b-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetWeekOfYear">
      <MemberSignature Language="C#" Value="public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetWeekOfYear(valuetype System.DateTime time, valuetype System.Globalization.CalendarWeekRule rule, valuetype System.DayOfWeek firstDayOfWeek) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="rule" Type="System.Globalization.CalendarWeekRule" />
        <Parameter Name="firstDayOfWeek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <param name="rule">One of the &lt;xref:System.Globalization.CalendarWeekRule&gt; values that defines a calendar week.</param>
        <param name="firstDayOfWeek">One of the &lt;xref:System.DayOfWeek&gt; values that represents the first day of the week.</param>
        <summary>Returns the week of the year that includes the date in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>A 1-based integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to determine the number of weeks in the year by setting the `time` parameter to the last day of the year.  
  
 The <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property contains culture-specific values that can be used for the `rule` and `firstDayOfWeek` parameters.  
  
 The <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.DayOfWeek> value that represents the first day of the week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.  
  
 The <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.Globalization.CalendarWeekRule> value that defines a calendar week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.  
  
 For example, in <xref:System.Globalization.GregorianCalendar>, the <xref:System.Globalization.Calendar.GetWeekOfYear%2A> method for January 1 returns 1.  
  
   
  
## Examples  
 The following code example shows how the result of <xref:System.Globalization.Calendar.GetWeekOfYear%2A> varies depending on the <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> and <xref:System.Globalization.CalendarWeekRule> values used. If the specified date is the last day of the year, <xref:System.Globalization.Calendar.GetWeekOfYear%2A> returns the total number of weeks in that year.  
  
 [!code-cs[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/csharp/ef15d25f-af8b-4734-b15e-_1.cs)]
 [!code-vb[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/visualbasic/ef15d25f-af8b-4734-b15e-_1.vb)]
 [!code-cpp[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/cpp/ef15d25f-af8b-4734-b15e-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="rule" /> is not a valid &lt;xref:System.Globalization.CalendarWeekRule&gt; value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetYear">
      <MemberSignature Language="C#" Value="public override int GetYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetYear(valuetype System.DateTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">The &lt;xref:System.DateTime&gt; to read.</param>
        <summary>Returns the year in the specified &lt;xref:System.DateTime&gt;.</summary>
        <returns>An integer that represents the year in the specified &lt;xref:System.DateTime&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_16_1.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_16_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsLeapDay">
      <MemberSignature Language="C#" Value="public override bool IsLeapDay (int year, int month, int day, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="day">An integer from 1 to 31 that represents the day.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Determines whether the specified date in the specified era is a leap day.</summary>
        <returns>
          <see langword="true" />, if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  
  
 A leap day is a day that occurs only in a leap year. For example, the 29th day of Nigatsu (February) is the only leap day.  
  
   
  
## Examples  
 The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  
  
 [!code-cs[System.Globalization.JapaneseCalendar.IsLeapDay#1](~/add/codesnippet/csharp/98bd79da-f987-41c7-8e4e-_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/98bd79da-f987-41c7-8e4e-_1.vb)]
 [!code-cpp[System.Globalization.JapaneseCalendar.IsLeapDay#1](~/add/codesnippet/cpp/98bd79da-f987-41c7-8e4e-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="month" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="day" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsLeapMonth">
      <MemberSignature Language="C#" Value="public override bool IsLeapMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
        <returns>This method always returns <see langword="false" />, unless overridden by a derived class.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  
  
 A leap month is an entire month that occurs only in a leap year. The Japanese calendar does not have any leap months.  
  
   
  
## Examples  
 The following example calls IsLeapMonth for all the months in five years in the current era.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/6e9c4cc5-e550-476d-bf72-_1.cpp)]
 [!code-cs[System.Globalization.JapaneseCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/6e9c4cc5-e550-476d-bf72-_1.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/6e9c4cc5-e550-476d-bf72-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="month" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public override bool IsLeapYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapYear(int32 year, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Determines whether the specified year in the specified era is a leap year.</summary>
        <returns>
          <see langword="true" />, if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  
  
   
  
## Examples  
 The following example calls IsLeapYear for five years in each of the eras.  
  
 [!code-cs[System.Globalization.JapaneseCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.j_2_1.cs)]
 [!code-cpp[System.Globalization.JapaneseCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.j_2_1.cpp)]
 [!code-vb[System.Globalization.JapaneseCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MaxSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MaxSupportedDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the latest date and time supported by the current <see cref="T:System.Globalization.JapaneseCalendar" /> object.</summary>
        <value>The latest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example gets the minimum value and the maximum value of the calendar.  
  
 [!code-cs[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_0_1.cs)]
 [!code-cpp[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_0_1.cpp)]
 [!code-vb[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MinSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MinSupportedDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the earliest date and time supported by the current <see cref="T:System.Globalization.JapaneseCalendar" /> object.</summary>
        <value>The earliest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type, which is equivalent to the first moment of September 8, 1868 C.E. in the Gregorian calendar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The earliest date supported by the <xref:System.Globalization.JapaneseCalendar> class is September 8, 1868 C.E., in the first year of the Meiji era. Ordinarily, date and time operations that use the <xref:System.Globalization.JapaneseCalendar> class throw an <xref:System.ArgumentOutOfRangeException> exception for dates before this date. However, some members, such as the <xref:System.Globalization.JapaneseCalendar.GetEra%2A> method, support dates from January 1, 1868 through September 7 in the year Meiji 1.  
  
   
  
## Examples  
 The following example gets the earliest and latest dates supported by the calendar.  
  
 [!code-cs[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_1_1.cs)]
 [!code-cpp[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_1_1.cpp)]
 [!code-vb[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer that represents the year.</param>
        <param name="month">An integer from 1 to 12 that represents the month.</param>
        <param name="day">An integer from 1 to 31 that represents the day.</param>
        <param name="hour">An integer from 0 to 23 that represents the hour.</param>
        <param name="minute">An integer from 0 to 59 that represents the minute.</param>
        <param name="second">An integer from 0 to 59 that represents the second.</param>
        <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
        <param name="era">An integer that represents the era.</param>
        <summary>Returns a &lt;xref:System.DateTime&gt; that is set to the specified date and time in the specified era.</summary>
        <returns>The &lt;xref:System.DateTime&gt; that is set to the specified date and time in the current era.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ToDateTime method is useful because it can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="month" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="day" /> is outside the range supported by the calendar.  
  
 -or-  
  
 <paramref name="hour" /> is less than zero or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than zero or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than zero or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than zero or greater than 999.  
  
 -or-  
  
 <paramref name="era" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToFourDigitYear">
      <MemberSignature Language="C#" Value="public override int ToFourDigitYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ToFourDigitYear(int32 year) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">An integer (usually two digits) that represents the year to convert.</param>
        <summary>Converts the specified year to a four-digit year by using the &lt;xref:System.Globalization.JapaneseCalendar.TwoDigitYearMax%2A&gt; property to determine the appropriate century.</summary>
        <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method implements <xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>.  
  
 Because the year in the Japanese calendar is typically less than four digits long, this implementation always returns the value of the `year` parameter.  
  
 ToFourDigitYear supports either a two-digit year or a four-digit year. However, a valid year is generally represented as two digits (less than 100). Passing a two-digit year value causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.JapaneseCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit value, or if it supplies zero or a negative value, ToFourDigitYear throws an exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is outside the range supported by the calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TwoDigitYearMax">
      <MemberSignature Language="C#" Value="public override int TwoDigitYearMax { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TwoDigitYearMax" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
        <value>The last year of a 100-year range that can be represented by a 2-digit year.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property implements <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>.  
  
 Because the year in the Japanese calendar is typically less than four digits long, this implementation returns 99 by default and does not affect the return value of <xref:System.Globalization.JapaneseCalendar.ToFourDigitYear%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 99.  
  
 -or-  
  
 The value specified in a set operation is greater than 8011 (or <see langword="MaxSupportedDateTime.Year" />).</exception>
        <exception cref="T:System.InvalidOperationException">In a set operation, the current instance is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>