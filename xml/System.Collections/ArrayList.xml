<Type Name="ArrayList" FullName="System.Collections.ArrayList">
  <TypeSignature Language="C#" Value="public class ArrayList : ICloneable, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ArrayList extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.ICloneable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implements the &lt;xref:System.Collections.IList&gt; interface using an array whose size is dynamically increased as required.  
  
 To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 The ArrayList class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:  
  
-   For a heterogeneous collection of objects, use the `List<Object>` (in C#) or `List(Of Object)` (in Visual Basic) type.  
  
-   For a homogeneous collection of objects, use the <xref:System.Collections.Generic.List%601> class.  
  
 See the "Performance Considerations" section in the <xref:System.Collections.Generic.List%601> reference topic for a discussion of the relative performance of these classes.  
  
 The ArrayList is not guaranteed to be sorted.  You must sort the ArrayList by calling its <xref:System.Collections.ArrayList.Sort%2A> method prior to performing operations (such as <xref:System.Collections.ArrayList.BinarySearch%2A>) that require the ArrayList to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the <xref:System.Collections.Generic.SortedSet%601> class.  
  
 The capacity of an ArrayList is the number of elements the ArrayList can hold. As elements are added to an ArrayList, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly.  
  
 For very large ArrayList objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  
  
 Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  
  
 The ArrayList collection accepts `null` as a valid value. It also allows duplicate elements.  
  
 Using multidimensional arrays as elements in an ArrayList collection is not supported.  
  
   
  
## Examples  
 The following code example shows how to create and initialize an ArrayList and how to display its values.  
  
 [!code-cpp[Classic ArrayList Example#1](~/add/codesnippet/cpp/t-system.collections.arr_1.cpp)]
 [!code-cs[Classic ArrayList Example#1](~/add/codesnippet/csharp/t-system.collections.arr_1.cs)]
 [!code-vb[Classic ArrayList Example#1](~/add/codesnippet/visualbasic/t-system.collections.arr_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.  
  
 An ArrayList can support multiple readers concurrently, as long as the collection is not modified. To guarantee the thread safety of the ArrayList, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.ArrayList.Synchronized%2A&gt; method.  
  
 Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Collections.ArrayList" /> class that is empty and has the default initial capacity.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  
  
 If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  
  
 This constructor is an O(1) operation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayList (System.Collections.ICollection c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection c) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c">The &lt;xref:System.Collections.ICollection&gt; whose elements are copied to the new list.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Collections.ArrayList" /> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  
  
 If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  
  
 The elements are copied onto the <xref:System.Collections.ArrayList> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.  
  
 This constructor is an O(`n`) operation, where `n` is the number of elements in `c`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="c" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">The number of elements that the new list can initially store.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Collections.ArrayList" /> class that is empty and has the specified initial capacity.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  
  
 If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  
  
 This constructor is an O(`n`) operation, where `n` is `capacity`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Adapter">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList Adapter (System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList Adapter(class System.Collections.IList list) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="list">The &lt;xref:System.Collections.IList&gt; to wrap.</param>
        <summary>Creates an <see cref="T:System.Collections.ArrayList" /> wrapper for a specific &lt;xref:System.Collections.IList&gt;.</summary>
        <returns>The <see cref="T:System.Collections.ArrayList" /> wrapper around the &lt;xref:System.Collections.IList&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Adapter does not copy the contents of <xref:System.Collections.IList>. Instead, it only creates an <xref:System.Collections.ArrayList> wrapper around <xref:System.Collections.IList>; therefore, changes to the <xref:System.Collections.IList> also affect the <xref:System.Collections.ArrayList>.  
  
 The <xref:System.Collections.ArrayList> class provides generic <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A> and <xref:System.Collections.ArrayList.Sort%2A> methods. This wrapper can be a means to use those methods on <xref:System.Collections.IList>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <xref:System.Collections.IList>.  
  
 This method is an O(1) operation.  
  
## Version Compatibility  
 In the .NET Framework version 1.0 and 1.1, calling the <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> method overload on the <xref:System.Collections.ArrayList> wrapper returned an enumerator that treated the second argument as an upper bound rather than as a count. In the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to be added to the end of the <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <summary>Adds an object to the end of the <see cref="T:System.Collections.ArrayList" />.</summary>
        <returns>The <see cref="T:System.Collections.ArrayList" /> index at which the <paramref name="value" /> has been added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  
  
 If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  
  
 If <xref:System.Collections.ArrayList.Count%2A> is less than <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_4_1.cs)]
 [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_4_1.vb)]
 [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_4_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.ArrayList" /> has a fixed size.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Collections.ICollection c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Collections.ICollection c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c">The &lt;xref:System.Collections.ICollection&gt; whose elements should be added to the end of the <see cref="T:System.Collections.ArrayList" />. The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />.</param>
        <summary>Adds the elements of an &lt;xref:System.Collections.ICollection&gt; to the end of the <see cref="T:System.Collections.ArrayList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  
  
 The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.  
  
 If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  
  
 If the <xref:System.Collections.ArrayList> can accommodate the new elements without increasing the <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O(`n`) operation, where `n` is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_0_1.cs)]
 [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_0_1.vb)]
 [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="c" /> is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.ArrayList" /> has a fixed size.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public virtual int BinarySearch (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BinarySearch(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to locate. The value can be <see langword="null" />.</param>
        <summary>Searches the entire sorted <see cref="T:System.Collections.ArrayList" /> for an element using the default comparer and returns the zero-based index of the element.</summary>
        <returns>The zero-based index of <paramref name="value" /> in the sorted <see cref="T:System.Collections.ArrayList" />, if <paramref name="value" /> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value" /> or, if there is no larger element, the bitwise complement of &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter and each element of the <xref:System.Collections.ArrayList> must implement the <xref:System.IComparable> interface, which is used for comparisons. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  
  
 Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.  
  
 If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  
  
 If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.  
  
 This method is an O(log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  
  
 [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_13_1.cpp)]
 [!code-cs[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_13_1.cs)]
 [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Neither <paramref name="value" /> nor the elements of <see cref="T:System.Collections.ArrayList" /> implement the &lt;xref:System.IComparable&gt; interface.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="value" /> is not of the same type as the elements of the <see cref="T:System.Collections.ArrayList" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public virtual int BinarySearch (object value, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BinarySearch(object value, class System.Collections.IComparer comparer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to locate. The value can be <see langword="null" />.</param>
        <param name="comparer">The &lt;xref:System.Collections.IComparer&gt; implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the default comparer that is the &lt;xref:System.IComparable&gt; implementation of each element.</param>
        <summary>Searches the entire sorted <see cref="T:System.Collections.ArrayList" /> for an element using the specified comparer and returns the zero-based index of the element.</summary>
        <returns>The zero-based index of <paramref name="value" /> in the sorted <see cref="T:System.Collections.ArrayList" />, if <paramref name="value" /> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value" /> or, if there is no larger element, the bitwise complement of &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  
  
 If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  
  
 If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  
  
 Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.  
  
 If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  
  
 If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.  
  
 This method is an O(log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  
  
 [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/cpp/51ebb232-4223-422e-9ecb-_1.cpp)]
 [!code-cs[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/csharp/51ebb232-4223-422e-9ecb-_1.cs)]
 [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/visualbasic/51ebb232-4223-422e-9ecb-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="comparer" /> is <see langword="null" /> and neither <paramref name="value" /> nor the elements of <see cref="T:System.Collections.ArrayList" /> implement the &lt;xref:System.IComparable&gt; interface.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> is <see langword="null" /> and <paramref name="value" /> is not of the same type as the elements of the <see cref="T:System.Collections.ArrayList" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BinarySearch(int32 index, int32 count, object value, class System.Collections.IComparer comparer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based starting index of the range to search.</param>
        <param name="count">The length of the range to search.</param>
        <param name="value">The &lt;xref:System.Object&gt; to locate. The value can be <see langword="null" />.</param>
        <param name="comparer">The &lt;xref:System.Collections.IComparer&gt; implementation to use when comparing elements.  
  
 -or-  
  
 <see langword="null" /> to use the default comparer that is the &lt;xref:System.IComparable&gt; implementation of each element.</param>
        <summary>Searches a range of elements in the sorted <see cref="T:System.Collections.ArrayList" /> for an element using the specified comparer and returns the zero-based index of the element.</summary>
        <returns>The zero-based index of <paramref name="value" /> in the sorted <see cref="T:System.Collections.ArrayList" />, if <paramref name="value" /> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <paramref name="value" /> or, if there is no larger element, the bitwise complement of &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  
  
 If `comparer` is provided, the elements of the <xref:System.Collections.ArrayList> are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  
  
 If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of the <xref:System.Collections.ArrayList> must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  
  
 Comparing `null` with any type is allowed and does not generate an exception when using <xref:System.IComparable>. When sorting, `null` is considered to be less than any other object.  
  
 If the <xref:System.Collections.ArrayList> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  
  
 If the <xref:System.Collections.ArrayList> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.ArrayList>, this index should be used as the insertion point to maintain the sort order.  
  
 This method is an O(log `n`) operation, where `n` is `count`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="T:System.Collections.ArrayList" />.  
  
 -or-  
  
 <paramref name="comparer" /> is <see langword="null" /> and neither <paramref name="value" /> nor the elements of <see cref="T:System.Collections.ArrayList" /> implement the &lt;xref:System.IComparable&gt; interface.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> is <see langword="null" /> and <paramref name="value" /> is not of the same type as the elements of the <see cref="T:System.Collections.ArrayList" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public virtual int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of elements that the <see cref="T:System.Collections.ArrayList" /> can contain.</summary>
        <value>The number of elements that the <see cref="T:System.Collections.ArrayList" /> can contain.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Capacity is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.  
  
 Capacity is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  
  
 The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the Capacity property explicitly. When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  
  
 Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Capacity is set to a value that is less than &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</exception>
        <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all elements from the <see cref="T:System.Collections.ArrayList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ArrayList.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  
  
 <xref:System.Collections.ArrayList.Capacity%2A> remains unchanged.  To reset the capacity of the <xref:System.Collections.ArrayList>, call <xref:System.Collections.ArrayList.TrimToSize%2A> or set the <xref:System.Collections.ArrayList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_18_1.cs)]
 [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_18_1.cpp)]
 [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.ArrayList" /> has a fixed size.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a shallow copy of the <see cref="T:System.Collections.ArrayList" />.</summary>
        <returns>A shallow copy of the <see cref="T:System.Collections.ArrayList" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  
  
 In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">The &lt;xref:System.Object&gt; to locate in the <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <summary>Determines whether an element is in the <see cref="T:System.Collections.ArrayList" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.ArrayList" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
 This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  
  
 Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList" />. The &lt;xref:System.Array&gt; must have zero-based indexing.</param>
        <summary>Copies the entire <see cref="T:System.Collections.ArrayList" /> to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the beginning of the target array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified array must be of a compatible type.  
  
 This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  
  
 The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  
  
 [!code-cs[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.arr_6_1.cs)]
 [!code-vb[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_6_1.vb)]
 [!code-cpp[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.arr_6_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ArrayList" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.</exception>
        <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ArrayList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList" />. The &lt;xref:System.Array&gt; must have zero-based indexing.</param>
        <param name="arrayIndex">The zero-based index in `array` at which copying begins.</param>
        <summary>Copies the entire <see cref="T:System.Collections.ArrayList" /> to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified array must be of a compatible type.  
  
 This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  
  
 The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  
  
 [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_27_1.cpp)]
 [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_27_1.cs)]
 [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_27_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ArrayList" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
        <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ArrayList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (int index, Array array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(int32 index, class System.Array array, int32 arrayIndex, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index in the source <see cref="T:System.Collections.ArrayList" /> at which copying begins.</param>
        <param name="array">The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList" />. The &lt;xref:System.Array&gt; must have zero-based indexing.</param>
        <param name="arrayIndex">The zero-based index in `array` at which copying begins.</param>
        <param name="count">The number of elements to copy.</param>
        <summary>Copies a range of elements from the <see cref="T:System.Collections.ArrayList" /> to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified array must be of a compatible type.  
  
 This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  
  
 The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  
  
 This method is an O(`n`) operation, where `n` is `count`.  
  
   
  
## Examples  
 The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  
  
 [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/971aa346-8de3-42af-8cd4-_1.cpp)]
 [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/971aa346-8de3-42af-8cd4-_1.cs)]
 [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/971aa346-8de3-42af-8cd4-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="arrayIndex" /> is less than zero.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than the &lt;xref:System.Collections.ArrayList.Count%2A&gt; of the source <see cref="T:System.Collections.ArrayList" />.  
  
 -or-  
  
 The number of elements from <paramref name="index" /> to the end of the source <see cref="T:System.Collections.ArrayList" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
        <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ArrayList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of elements actually contained in the <see cref="T:System.Collections.ArrayList" />.</summary>
        <value>The number of elements actually contained in the <see cref="T:System.Collections.ArrayList" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. Count is the number of elements that are actually in the <xref:System.Collections.ArrayList>.  
  
 <xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to Count. If Count exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  
  
 Retrieving the value of this property is an O(1) operation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FixedSize">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList FixedSize(class System.Collections.ArrayList list) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="list">The <see cref="T:System.Collections.ArrayList" /> to wrap.</param>
        <summary>Returns an <see cref="T:System.Collections.ArrayList" /> wrapper with a fixed size.</summary>
        <returns>An <see cref="T:System.Collections.ArrayList" /> wrapper with a fixed size.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.ArrayList>. The elements can still be modified or replaced.  
  
 A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  
  
 This method is an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/m-system.collections.arr_12_1.cs)]
 [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_12_1.vb)]
 [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/m-system.collections.arr_12_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FixedSize">
      <MemberSignature Language="C#" Value="public static System.Collections.IList FixedSize (System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList FixedSize(class System.Collections.IList list) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="list">The &lt;xref:System.Collections.IList&gt; to wrap.</param>
        <summary>Returns an &lt;xref:System.Collections.IList&gt; wrapper with a fixed size.</summary>
        <returns>An &lt;xref:System.Collections.IList&gt; wrapper with a fixed size.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This wrapper can be used to prevent additions to and deletions from the original <xref:System.Collections.IList>. The elements can still be modified or replaced.  
  
 A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  
  
 This method is an O(1) operation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator for the entire <see cref="T:System.Collections.ArrayList" />.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerator&gt; for the entire <see cref="T:System.Collections.ArrayList" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  
  
 Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  
  
 Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  
  
 <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  
  
 If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
 An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  
  
 The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  
  
 This method is an O(1) operation.  
  
   
  
## Examples  
 The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_2_1.cs)]
 [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator(int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based starting index of the <see cref="T:System.Collections.ArrayList" /> section that the enumerator should refer to.</param>
        <param name="count">The number of elements in the <see cref="T:System.Collections.ArrayList" /> section that the enumerator should refer to.</param>
        <summary>Returns an enumerator for a range of elements in the <see cref="T:System.Collections.ArrayList" />.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerator&gt; for the specified range of elements in the <see cref="T:System.Collections.ArrayList" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `foreach` statement of the C# language (`for each` in Visual C++, `For Each` Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  
  
 Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  
  
 Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  
  
 <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  
  
 If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
 An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  
  
 The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  
  
 This method is an O(1) operation.  
  
## Version Compatibility  
 In the .NET Framework versions 1.0 and 1.1, the enumerator for an <xref:System.Collections.ArrayList> wrapper returned by the <xref:System.Collections.ArrayList.Adapter%2A> method treated the second argument as an upper bound rather than as a count. In the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] the second argument is correctly treated as a count.  
  
   
  
## Examples  
 The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_10_1.cs)]
 [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.ArrayList" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ArrayList GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ArrayList GetRange(int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based <see cref="T:System.Collections.ArrayList" /> index at which the range starts.</param>
        <param name="count">The number of elements in the range.</param>
        <summary>Returns an <see cref="T:System.Collections.ArrayList" /> which represents a subset of the elements in the source <see cref="T:System.Collections.ArrayList" />.</summary>
        <returns>An <see cref="T:System.Collections.ArrayList" /> which represents a subset of the elements in the source <see cref="T:System.Collections.ArrayList" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method does not create copies of the elements. The new <xref:System.Collections.ArrayList> is only a view window into the source <xref:System.Collections.ArrayList>. However, all subsequent changes to the source <xref:System.Collections.ArrayList> must be done through this view window <xref:System.Collections.ArrayList>. If changes are made directly to the source <xref:System.Collections.ArrayList>, the view window <xref:System.Collections.ArrayList> is invalidated and any operations on it will return an <xref:System.InvalidOperationException>.  
  
 This method is an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/m-system.collections.arr_7_1.cs)]
 [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/m-system.collections.arr_7_1.cpp)]
 [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.ArrayList" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to locate in the <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <summary>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ArrayList" />.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Collections.ArrayList" />, if found; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Collections.ArrayList> is searched forward starting at the first element and ending at the last element.  
  
 This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
 This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  
  
 Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.  
  
   
  
## Examples  
 The following code example shows how to determine the index of the first occurrence of a specified element.  
  
 [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_28_1.cpp)]
 [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_28_1.cs)]
 [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_28_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (object value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value, int32 startIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to locate in the <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
        <summary>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList" /> that extends from the specified index to the last element.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in the <see cref="T:System.Collections.ArrayList" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Collections.ArrayList> is searched forward starting at `startIndex` and ending at the last element.  
  
 This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of the <xref:System.Collections.ArrayList>.  
  
 This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  
  
 Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.  
  
   
  
## Examples  
 The following code example shows how to determine the index of the first occurrence of a specified element.  
  
 [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_22_1.cpp)]
 [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_22_1.cs)]
 [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_22_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.ArrayList" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (object value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value, int32 startIndex, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to locate in the <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList" /> that starts at the specified index and contains the specified number of elements.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in the <see cref="T:System.Collections.ArrayList" /> that starts at <paramref name="startIndex" /> and contains <paramref name="count" /> number of elements, if found; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Collections.ArrayList> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.  
  
 This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is `count`.  
  
 This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  
  
 Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.  
  
   
  
## Examples  
 The following code example shows how to determine the index of the first occurrence of a specified element.  
  
 [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_19_1.cpp)]
 [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_19_1.cs)]
 [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_19_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.ArrayList" />.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.ArrayList" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which `value` should be inserted.</param>
        <param name="value">The &lt;xref:System.Object&gt; to insert. The value can be <see langword="null" />.</param>
        <summary>Inserts an element into the <see cref="T:System.Collections.ArrayList" /> at the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  
  
 If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  
  
 If `index` is equal to <xref:System.Collections.ArrayList.Count%2A>, `value` is added to the end of <xref:System.Collections.ArrayList>.  
  
 In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/m-system.collections.arr_15_1.cs)]
 [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_15_1.vb)]
 [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/m-system.collections.arr_15_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is greater than &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.ArrayList" /> has a fixed size.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public virtual void InsertRange (int index, System.Collections.ICollection c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertRange(int32 index, class System.Collections.ICollection c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which the new elements should be inserted.</param>
        <param name="c">The &lt;xref:System.Collections.ICollection&gt; whose elements should be inserted into the <see cref="T:System.Collections.ArrayList" />. The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />.</param>
        <summary>Inserts the elements of a collection into the <see cref="T:System.Collections.ArrayList" /> at the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  
  
 If the new <xref:System.Collections.ArrayList.Count%2A> (the current <xref:System.Collections.ArrayList.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  
  
 If `index` is equal to <xref:System.Collections.ArrayList.Count%2A>, the elements are added to the end of <xref:System.Collections.ArrayList>.  
  
 The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.  
  
 In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  
  
 This method is an O(`n` + `m`) operation, where `n` is the number of elements to be added and `m` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/2b051d32-7260-4f65-b4d6-_1.cs)]
 [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/2b051d32-7260-4f65-b4d6-_1.vb)]
 [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/2b051d32-7260-4f65-b4d6-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="c" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is greater than &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.ArrayList" /> has a fixed size.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Collections.ArrayList" /> has a fixed size.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Collections.ArrayList" /> has a fixed size; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  
  
 A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  
  
 Retrieving the value of this property is an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/p-system.collections.arr_2_1.cs)]
 [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_2_1.vb)]
 [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/p-system.collections.arr_2_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Collections.ArrayList" /> is read-only.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Collections.ArrayList" /> is read-only; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  
  
 A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  
  
 Retrieving the value of this property is an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  
  
 [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/p-system.collections.arr_3_1.cs)]
 [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/p-system.collections.arr_3_1.cpp)]
 [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ArrayList" /> is synchronized (thread safe).</summary>
        <value>
          <see langword="true" /> if access to the <see cref="T:System.Collections.ArrayList" /> is synchronized (thread safe); otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through the wrapper returned by the <xref:System.Collections.ArrayList.Synchronized%2A> method.  
  
 Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  
  
   
  
## Examples  
 The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_0_1.cpp)]
 [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_0_1.vb)]
 [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_0_1.cs)]  
  
 Retrieving the value of this property is an O(1) operation.  
  
 The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  
  
 [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_0_2.vb)]
 [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.arr_0_2.cpp)]
 [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.arr_0_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the element to get or set.</param>
        <summary>Gets or sets the element at the specified index.</summary>
        <value>The element at the specified index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Item returns an <xref:System.Object>, so you may need to cast the returned value to the original type in order to manipulate it. It is important to note that <xref:System.Collections.ArrayList> is not a strongly-typed collection. For a strongly-typed alternative, see <xref:System.Collections.Generic.List%601>.  
  
 <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  
  
 This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  
  
 The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  
  
 Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.  
  
   
  
## Examples  
 The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  
  
 [!code-cpp[System.Collections.ArrayList.Item#1](~/add/codesnippet/cpp/p-system.collections.arr_1_1.cpp)]
 [!code-cs[System.Collections.ArrayList.Item#1](~/add/codesnippet/csharp/p-system.collections.arr_1_1.cs)]
 [!code-vb[System.Collections.ArrayList.Item#1](~/add/codesnippet/visualbasic/p-system.collections.arr_1_1.vb)]  
  
 The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  
  
 [!code-cpp[System.Collections.ArrayList.Item#2](~/add/codesnippet/cpp/p-system.collections.arr_1_2.cpp)]
 [!code-vb[System.Collections.ArrayList.Item#2](~/add/codesnippet/visualbasic/p-system.collections.arr_1_2.vb)]
 [!code-cs[System.Collections.ArrayList.Item#2](~/add/codesnippet/csharp/p-system.collections.arr_1_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to locate in the <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <summary>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.ArrayList" />.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire the <see cref="T:System.Collections.ArrayList" />, if found; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Collections.ArrayList> is searched backward starting at the last element and ending at the first element.  
  
 This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
 Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.  
  
   
  
## Examples  
 The following code example shows how to determine the index of the last occurrence of a specified element.  
  
 [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_14_1.cpp)]
 [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_14_1.cs)]
 [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (object value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(object value, int32 startIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to locate in the <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <summary>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList" /> that extends from the first element to the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in the <see cref="T:System.Collections.ArrayList" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Collections.ArrayList> is searched backward starting at `startIndex` and ending at the first element.  
  
 This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is the number of elements from the beginning of the <xref:System.Collections.ArrayList> to `startIndex`.  
  
 This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  
  
 Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.  
  
   
  
## Examples  
 The following code example shows how to determine the index of the last occurrence of a specified element.  
  
 [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_26_1.cpp)]
 [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_26_1.cs)]
 [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_26_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.ArrayList" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (object value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(object value, int32 startIndex, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to locate in the <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.ArrayList" /> that contains the specified number of elements and ends at the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in the <see cref="T:System.Collections.ArrayList" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="startIndex" />, if found; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Collections.ArrayList> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.  
  
 This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is `count`.  
  
 This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  
  
 Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.  
  
   
  
## Examples  
 The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  
  
 [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/62fe9219-7086-43ad-b565-_1.cpp)]
 [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/62fe9219-7086-43ad-b565-_1.cs)]
 [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/62fe9219-7086-43ad-b565-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.ArrayList" />.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.  
  
 -or-  
  
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.ArrayList" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList ReadOnly(class System.Collections.ArrayList list) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="list">The <see cref="T:System.Collections.ArrayList" /> to wrap.</param>
        <summary>Returns a read-only <see cref="T:System.Collections.ArrayList" /> wrapper.</summary>
        <returns>A read-only <see cref="T:System.Collections.ArrayList" /> wrapper around <paramref name="list" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To prevent any modifications to `list`, expose `list` only through this wrapper.  
  
 A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.  
  
 This method is an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  
  
 [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_9_1.cs)]
 [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_9_1.cpp)]
 [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Collections.IList ReadOnly (System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList ReadOnly(class System.Collections.IList list) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="list">The &lt;xref:System.Collections.IList&gt; to wrap.</param>
        <summary>Returns a read-only &lt;xref:System.Collections.IList&gt; wrapper.</summary>
        <returns>A read-only &lt;xref:System.Collections.IList&gt; wrapper around <paramref name="list" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To prevent any modifications to `list`, expose `list` only through this wrapper.  
  
 A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.  
  
 This method is an O(1) operation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The &lt;xref:System.Object&gt; to remove from the <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ArrayList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Collections.ArrayList> does not contain the specified object, the <xref:System.Collections.ArrayList> remains unchanged. No exception is thrown.  
  
 This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
 This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  
  
 In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  
  
   
  
## Examples  
 The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  
  
 [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_5_1.cpp)]
 [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_5_1.vb)]
 [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.ArrayList" /> has a fixed size.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the element to remove.</param>
        <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ArrayList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After the element is removed, the size of the collection is adjusted and the value of the <xref:System.Collections.ArrayList.Count%2A> property is decreased by one.  
  
 In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  
  
 [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_24_1.cpp)]
 [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_24_1.vb)]
 [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_24_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is equal to or greater than &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.ArrayList" /> has a fixed size.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public virtual void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based starting index of the range of elements to remove.</param>
        <param name="count">The number of elements to remove.</param>
        <summary>Removes a range of elements from the <see cref="T:System.Collections.ArrayList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  
  
 [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_21_1.cpp)]
 [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_21_1.vb)]
 [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_21_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.ArrayList" />.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.ArrayList" /> has a fixed size.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Repeat">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList Repeat (object value, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList Repeat(object value, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;xref:System.Object&gt; to copy multiple times in the new <see cref="T:System.Collections.ArrayList" />. The value can be <see langword="null" />.</param>
        <param name="count">The number of times `value` should be copied.</param>
        <summary>Returns an <see cref="T:System.Collections.ArrayList" /> whose elements are copies of the specified value.</summary>
        <returns>An <see cref="T:System.Collections.ArrayList" /> with <paramref name="count" /> number of elements, all of which are copies of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  
  
 This method is an O(`n`) operation, where `n` is `count`.  
  
   
  
## Examples  
 The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  
  
 [!code-cpp[Classic ArrayList.Repeat Example#1](~/add/codesnippet/cpp/m-system.collections.arr_1_1.cpp)]
 [!code-cs[Classic ArrayList.Repeat Example#1](~/add/codesnippet/csharp/m-system.collections.arr_1_1.cs)]
 [!code-vb[Classic ArrayList.Repeat Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public virtual void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reverse() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reverses the order of the elements in the entire <see cref="T:System.Collections.ArrayList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements, such that the element at <xref:System.Collections.ArrayList> [i], where i is any index within the range, moves to <xref:System.Collections.ArrayList> [j], where j equals `index` + `index` + `count` - i - 1.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.Reverse Example#1](~/add/codesnippet/csharp/m-system.collections.arr_20_1.cs)]
 [!code-cpp[Classic ArrayList.Reverse Example#1](~/add/codesnippet/cpp/m-system.collections.arr_20_1.cpp)]
 [!code-vb[Classic ArrayList.Reverse Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_20_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public virtual void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based starting index of the range to reverse.</param>
        <param name="count">The number of elements in the range to reverse.</param>
        <summary>Reverses the order of the elements in the specified range.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements, such that the element at <xref:System.Collections.ArrayList> [i], where i is any index within the range, moves to <xref:System.Collections.ArrayList> [j], where j equals `index` + `index` + `count` - i - 1.  
  
 This method is an O(`n`) operation, where `n` is `count`.  
  
   
  
## Examples  
 The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  
  
 [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_3_1.cpp)]
 [!code-cs[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_3_1.cs)]
 [!code-vb[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.ArrayList" />.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetRange">
      <MemberSignature Language="C#" Value="public virtual void SetRange (int index, System.Collections.ICollection c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRange(int32 index, class System.Collections.ICollection c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based <see cref="T:System.Collections.ArrayList" /> index at which to start copying the elements of `c`.</param>
        <param name="c">The &lt;xref:System.Collections.ICollection&gt; whose elements to copy to the <see cref="T:System.Collections.ArrayList" />. The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />.</param>
        <summary>Copies the elements of a collection over a range of elements in the <see cref="T:System.Collections.ArrayList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  
  
 The order of the elements in the <xref:System.Collections.ICollection> is preserved in the <xref:System.Collections.ArrayList>.  
  
 This method is an O(`n` + 1) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/23e2a8fa-8e09-46ee-8256-_1.cs)]
 [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/23e2a8fa-8e09-46ee-8256-_1.cpp)]
 [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/23e2a8fa-8e09-46ee-8256-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> plus the number of elements in <paramref name="c" /> is greater than &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="c" /> is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sorts the elements in the entire <see cref="T:System.Collections.ArrayList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which uses the QuickSort algorithm. The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a "less than or equal to" comparison operation determines which of two elements should occur first in the final sorted list. However, if two elements are equal, their original order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface to use with the other overloads of this method.  
  
 On average, this method is an O(`n` log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>; in the worst case it is an O(`n`^2) operation.  
  
   
  
## Examples  
 The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.Sort Example#1](~/add/codesnippet/csharp/m-system.collections.arr_11_1.cs)]
 [!code-vb[Classic ArrayList.Sort Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_11_1.vb)]
 [!code-cpp[Classic ArrayList.Sort Example#1](~/add/codesnippet/cpp/m-system.collections.arr_11_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(class System.Collections.IComparer comparer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">The &lt;xref:System.Collections.IComparer&gt; implementation to use when comparing elements.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the &lt;xref:System.IComparable&gt; implementation of each element.</param>
        <summary>Sorts the elements in the entire <see cref="T:System.Collections.ArrayList" /> using the specified comparer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Sort method to  sort a list of objects with a custom comparer that implements the <xref:System.Collections.IComparer> interface. If you pass `null` for `comparer`, this method uses the <xref:System.IComparable> implementation of each element. In this case, you must make sure that the objects contained in the list implement the <xref:System.Collections.IComparer> interface or an exception will occur.  
  
 In addition, using the <xref:System.IComparable> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface.  
  
 On average, this method is an O(`n` log `n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>; in the worst case it is an O(`n`^2) operation.  
  
   
  
## Examples  
 The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  
  
 [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/cpp/m-system.collections.arr_16_1.cpp)]
 [!code-cs[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/csharp/m-system.collections.arr_16_1.cs)]
 [!code-vb[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/visualbasic/m-system.collections.arr_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.</exception>
        <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
        <exception cref="T:System.ArgumentException">
          <see langword="null" /> is passed for <paramref name="comparer" />, and the elements in the list do not implement &lt;xref:System.IComparable&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (int index, int count, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(int32 index, int32 count, class System.Collections.IComparer comparer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based starting index of the range to sort.</param>
        <param name="count">The length of the range to sort.</param>
        <param name="comparer">The &lt;xref:System.Collections.IComparer&gt; implementation to use when comparing elements.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the &lt;xref:System.IComparable&gt; implementation of each element.</param>
        <summary>Sorts the elements in a range of elements in <see cref="T:System.Collections.ArrayList" /> using the specified comparer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `comparer` is set to `null`, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref:System.Collections.IComparer> interface.  
  
 On average, this method is an O(`n` log `n`) operation, where `n` is `count`; in the worst case it is an O(n^2) operation.  
  
   
  
## Examples  
 The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  
  
 [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/cpp/b0a7df76-2f5d-45d4-bb7a-_1.cpp)]
 [!code-cs[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/csharp/b0a7df76-2f5d-45d4-bb7a-_1.cs)]
 [!code-vb[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/visualbasic/b0a7df76-2f5d-45d4-bb7a-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.ArrayList" />.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.</exception>
        <exception cref="T:System.InvalidOperationException">An error occurred while comparing two elements.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList Synchronized(class System.Collections.ArrayList list) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="list">The <see cref="T:System.Collections.ArrayList" /> to synchronize.</param>
        <summary>Returns an <see cref="T:System.Collections.ArrayList" /> wrapper that is synchronized (thread safe).</summary>
        <returns>An <see cref="T:System.Collections.ArrayList" /> wrapper that is synchronized (thread safe).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper.  
  
 Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  
  
   
  
## Examples  
 The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_25_1.cpp)]
 [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_25_1.vb)]
 [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_25_1.cs)]  
  
 This method is an O(1) operation.  
  
 The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  
  
 [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_25_2.vb)]
 [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.arr_25_2.cpp)]
 [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.arr_25_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.IList Synchronized (System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList Synchronized(class System.Collections.IList list) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="list">The &lt;xref:System.Collections.IList&gt; to synchronize.</param>
        <summary>Returns an &lt;xref:System.Collections.IList&gt; wrapper that is synchronized (thread safe).</summary>
        <returns>An &lt;xref:System.Collections.IList&gt; wrapper that is synchronized (thread safe).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To guarantee the thread safety of the <xref:System.Collections.ArrayList>, all operations must be done through this wrapper.  
  
 Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  
  
   
  
## Examples  
 The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_23_1.cpp)]
 [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_23_1.vb)]
 [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_23_1.cs)]  
  
 This method is an O(1) operation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ArrayList" />.</summary>
        <value>An object that can be used to synchronize access to the <see cref="T:System.Collections.ArrayList" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To create a synchronized version of the <xref:System.Collections.ArrayList>, use the <xref:System.Collections.ArrayList.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.ArrayList> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.ArrayList>, not directly on the <xref:System.Collections.ArrayList>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ArrayList> object.  
  
 Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  
  
   
  
## Examples  
 The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_4_1.cpp)]
 [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_4_1.vb)]
 [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_4_1.cs)]  
  
 Retrieving the value of this property is an O(1) operation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual object[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] ToArray() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Copies the elements of the <see cref="T:System.Collections.ArrayList" /> to a new &lt;xref:System.Object&gt; array.</summary>
        <returns>An &lt;xref:System.Object&gt; array containing copies of the elements of the <see cref="T:System.Collections.ArrayList" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual Array ToArray (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array ToArray(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The element &lt;xref:System.Type&gt; of the destination array to create and copy elements to.</param>
        <summary>Copies the elements of the <see cref="T:System.Collections.ArrayList" /> to a new array of the specified element type.</summary>
        <returns>An array of the specified element type containing copies of the elements of the <see cref="T:System.Collections.ArrayList" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 All of the objects in the <xref:System.Collections.ArrayList> object will be cast to the <xref:System.Type> specified in the `type` parameter.  
  
 The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  
  
 [!code-cs[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/csharp/m-system.collections.arr_17_1.cs)]
 [!code-cpp[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/cpp/m-system.collections.arr_17_1.cpp)]
 [!code-vb[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/visualbasic/m-system.collections.arr_17_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ArrayList" /> cannot be cast automatically to the specified type.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.ArrayList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.  
  
 To reset a <xref:System.Collections.ArrayList> to its initial state, call the <xref:System.Collections.ArrayList.Clear%2A> method before calling TrimToSize. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  
  
 [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_8_1.cs)]
 [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_8_1.cpp)]
 [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.ArrayList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.ArrayList" /> has a fixed size.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>