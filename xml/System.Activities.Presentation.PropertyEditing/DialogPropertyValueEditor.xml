<Type Name="DialogPropertyValueEditor" FullName="System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor">
  <TypeSignature Language="C#" Value="public class DialogPropertyValueEditor : System.Activities.Presentation.PropertyEditing.PropertyValueEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DialogPropertyValueEditor extends System.Activities.Presentation.PropertyEditing.PropertyValueEditor" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.Presentation.PropertyEditing.PropertyValueEditor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Container for all dialog-editing logic for &lt;xref:System.Activities.Presentation.PropertyEditing.PropertyContainer.PropertyEntry%2A&gt; objects.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DialogPropertyValueEditor class to show an inline editor that can have an associated dialog box editor.  
  
 The DialogPropertyValueEditor class can hold either a <xref:System.Windows.DataTemplate> for a dialog box editor or custom logic that is called when the dialog box is invoked.  
  
 Use the <xref:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton> in your <xref:System.Windows.DataTemplate> to invoke your custom DialogPropertyValueEditor class.  
  
 You can provide a <xref:System.Windows.DataTemplate> which is shown in a host dialog box, or you can override the <xref:Systems.Windows.Forms.ShowDialog> method, which enables the reuse of existing or system dialog boxes.  
  
 The following list shows the rules for determining whether the <xref:System.Windows.DataTemplate> or <xref:Systems.Windows.Forms.ShowDialog> method is used.  
  
 If the <xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate%2A> property is not a [!INCLUDE[null](~/add/includes/null-md.md)] reference (Nothing in Visual Basic), that <xref:System.Windows.DataTemplate> is hosted in a host-specific dialog box, which provides host styling. The <xref:Systems.Windows.Forms.ShowDialog> is not called.  
  
 If the <xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate%2A> property is a [!INCLUDE[null](~/add/includes/null-md.md)] reference (Nothing in Visual Basic), the virtual <xref:Systems.Windows.Forms.ShowDialog> method is called and you can override this method to show any dialog box.  
  
   
  
## Examples  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogPropertyValueEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor" /> class with no specific templates.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogPropertyValueEditor (System.Windows.DataTemplate dialogEditorTemplate, System.Windows.DataTemplate inlineEditorTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DataTemplate dialogEditorTemplate, class System.Windows.DataTemplate inlineEditorTemplate) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dialogEditorTemplate" Type="System.Windows.DataTemplate" />
        <Parameter Name="inlineEditorTemplate" Type="System.Windows.DataTemplate" />
      </Parameters>
      <Docs>
        <param name="dialogEditorTemplate">A &lt;xref:System.Window.DataTemplate&gt; that is hosted in a host-specific dialog chrome and has its &lt;xref:System.Activities.ActivityContext.DataContext%2A&gt; set to the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> that corresponds to the property being edited.</param>
        <param name="inlineEditorTemplate">A <see cref="T:System.Windows.DataTemplate" /> that is used for the inline editor user interface. If used, its &lt;xref:System.Activities.ActivityContext.DataContext%2A&gt; is set to the <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> that corresponds to the property being edited.</param>
        <summary>Creates a new instance of the &lt;xref:System.Activities.Design.PropertyEditing.DialogPropertyValueEditor&gt; class with the specified dialog editor and inline editor templates.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DialogEditorTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate DialogEditorTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate DialogEditorTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.DataTemplate" /> that is hosted by a host-specific dialog and has its &lt;xref:System.Activities.ActivityContext.DataContext%2A&gt; set to a &lt;xref:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue%2A&gt;.</summary>
        <value>The <see cref="T:System.Windows.DataTemplate" /> object that is hosted by a host-specific dialog.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If this property returns `null`, the <xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.ShowDialog%2A> method is called instead.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public virtual void ShowDialog (System.Activities.Presentation.PropertyEditing.PropertyValue propertyValue, System.Windows.IInputElement commandSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowDialog(class System.Activities.Presentation.PropertyEditing.PropertyValue propertyValue, class System.Windows.IInputElement commandSource) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyValue" Type="System.Activities.Presentation.PropertyEditing.PropertyValue" />
        <Parameter Name="commandSource" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="propertyValue">The &lt;xref:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue%2A&gt; for the property being edited.</param>
        <param name="commandSource">The &lt;xref:System.Windows.IinputElement&gt; that can be used as a source for execution of <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands" />.</param>
        <summary>Called when the &lt;xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate%2A&gt; is null and a dialog has been invoked by the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Since the commands get handled by the host and since custom dialogs are not going to be part of that visual tree, the `commandSource` exposes an <xref:System.Windows.IInputElement> that is part of the host's visual tree and that, therefore, can be used to execute property editing commands in such a way that they are handled correctly. Overriding this method enables you to implement any custom dialog logic, such as invoking existing system dialogs.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>