<Type Name="OuterGlowBitmapEffect" FullName="System.Windows.Media.Effects.OuterGlowBitmapEffect">
  <TypeSignature Language="C#" Value="public sealed class OuterGlowBitmapEffect : System.Windows.Media.Effects.BitmapEffect" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed OuterGlowBitmapEffect extends System.Windows.Media.Effects.BitmapEffect" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Effects.BitmapEffect</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Creates a halo of color around objects or areas of color.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] bitmap effects are software rendered. Any object that applies an effect will also be rendered in software. Bitmap effects should not be applied to large visuals or animations because this can degrade performance.  
  
 OuterGlowBitmapEffect is one of several effects that are shipped with the [!INCLUDE[TLA2#tla_lhsdk](~/add/includes/tla2sharptla-lhsdk-md.md)]. Other effects include:  
  
-   <xref:System.Windows.Media.Effects.BlurBitmapEffect>  
  
-   <xref:System.Windows.Media.Effects.DropShadowBitmapEffect>  
  
-   <xref:System.Windows.Media.Effects.EmbossBitmapEffect>  
  
-   <xref:System.Windows.Media.Effects.BevelBitmapEffect>  
  
 The following illustration shows an OuterGlowBitmapEffect applied to a visual object (in this case applied to a <xref:System.Windows.Controls.TextBox>).  
  
 ![Screenshot: OuterGlowBitmapEffect bitmap effect](~/add/media/effects-outerglowsimple.png "Screenshot: OuterGlowBitmapEffect bitmap effect")  
  
 The following illustrations show the effect of several basic properties of OuterGlowBitmapEffect.  
  
-   The <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSize%2A> property specifies the size of the halo glow:  
  
 ![Screenshot: OuterGlowBitmapEffect bitmap effect](~/add/media/effects-outerglowglowsize.png "Screenshot: OuterGlowBitmapEffect bitmap effect")  
  
-   The <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.Noise%2A> property specifies the level of noise in the glow:  
  
 ![Screenshot: Compare Noise property values](~/add/media/effects-outerglownoise.png "Screenshot: Compare Noise property values")  
  
-   The <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.Opacity%2A> property specifies how transparent the glow is:  
  
 ![Screenshot: Compare glow opacity property values](~/add/media/effects-outerglowopacity.png "Screenshot: Compare glow opacity property values")  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.UIPermission">for creating an instance of the OuterGlowBitmapEffect class. Associated enumerations: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OuterGlowBitmapEffect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.OuterGlowBitmapEffect Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Effects.OuterGlowBitmapEffect Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.OuterGlowBitmapEffect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
        <returns>A modifiable clone of the current object. The cloned object's &lt;xref:System.Windows.Freezable.IsFrozen%2A&gt; property will be <see langword="false" /> even if the source's &lt;xref:System.Windows.Freezable.IsFrozen%2A&gt; property was <see langword="true." /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.  
  
 For more information, see <xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.OuterGlowBitmapEffect CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Effects.OuterGlowBitmapEffect CloneCurrentValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.OuterGlowBitmapEffect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
        <returns>A modifiable clone of the current object. The cloned object's &lt;xref:System.Windows.Freezable.IsFrozen%2A&gt; property will be <see langword="false" /> even if the source's &lt;xref:System.Windows.Freezable.IsFrozen%2A&gt; property was <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.  
  
 For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUnmanagedEffect">
      <MemberSignature Language="C#" Value="protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.SafeHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlowColor">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Color GlowColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Color GlowColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Gets or sets the color of the halo glow.</summary>
        <value>The color of the halo glow. The default is white.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_GlowColor"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColorProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GlowColorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty GlowColorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty GlowColorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Identifies the &lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColor%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GlowSize">
      <MemberSignature Language="C#" Value="public double GlowSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 GlowSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Gets or sets the thickness of the halo glow.</summary>
        <value>The thickness of the halo glow, in [!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]. The valid range of values is from 1 through 199. The default is 20.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following illustration demonstrates the effect of this property.  
  
 ![Screenshot: OuterGlowBitmapEffect bitmap effect](~/add/media/effects-outerglowglowsize.png "Screenshot: OuterGlowBitmapEffect bitmap effect")  
  
<a name="dependencyPropertyInfo_GlowSize"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSizeProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GlowSizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty GlowSizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty GlowSizeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Identifies the &lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSize%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Noise">
      <MemberSignature Language="C#" Value="public double Noise { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Noise" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Gets or sets the graininess of the halo glow.</summary>
        <value>The graininess (noise level) of the halo glow. The valid range of values is from 0.0 through 1.0, with 0.0 specifying no noise and 1.0 specifying maximum noise. A value of 0.5 indicates 50 percent noise, a value of 0.75 indicates 75 percent noise, and so on. The default value is 0.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following illustration demonstrates the effect of this property.  
  
 ![Screenshot: Compare Noise property values](~/add/media/effects-outerglownoise.png "Screenshot: Compare Noise property values")  
  
<a name="dependencyPropertyInfo_Noise"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.NoiseProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NoiseProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NoiseProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NoiseProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Identifies the &lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.Noise%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Gets or sets the degree of opacity of the halo glow.</summary>
        <value>The opacity level of the glow. A value of 0 indicates that the halo glow is completely transparent, while a value of 1 indicates that the glow is completely opaque. A value of 0.5 indicates the glow is 50 percent opaque, a value of 0.725 indicates the glow is 72.5 percent opaque, and so on. Values less than 0 are treated as 0, while values greater than 1 are treated as 1. The default is 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following illustration demonstrates the effect of this property:  
  
 ![Screenshot: Compare glow opacity property values](~/add/media/effects-outerglowopacity.png "Screenshot: Compare glow opacity property values")  
  
 Opacity can also be specified using the alpha value of <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColor%2A>.  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.OpacityProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>**Note: This API is now obsolete.** The non-obsolete alternative is <see cref="T:System.Windows.Media.Effects.BlurEffect" />. Identifies the &lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect.Opacity%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateUnmanagedPropertyState">
      <MemberSignature Language="C#" Value="protected override void UpdateUnmanagedPropertyState (System.Runtime.InteropServices.SafeHandle unmanagedEffect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UpdateUnmanagedPropertyState(class System.Runtime.InteropServices.SafeHandle unmanagedEffect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedEffect" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="unmanagedEffect">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>