<Type Name="ShaderEffect" FullName="System.Windows.Media.Effects.ShaderEffect">
  <TypeSignature Language="C#" Value="public abstract class ShaderEffect : System.Windows.Media.Effects.Effect" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ShaderEffect extends System.Windows.Media.Effects.Effect" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Effects.Effect</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a custom bitmap effect by using a <see cref="T:System.Windows.Media.Effects.PixelShader" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Derive from the ShaderEffect class to implement a custom effect based on a single pixel shader.  
  
 The following steps show how to create a custom effect.  
  
1.  Load a <xref:System.Windows.Media.Effects.PixelShader> from precompiled High Level Shading Language (HLSL) bytecode.  
  
2.  Define dependency properties that represent the parameters of the effect and the <xref:System.Windows.Media.Brush>-based surface inputs. Use one of the <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> overloads to associate these inputs with register numbers that are referenced in the HLSL bytecode.  
  
 The number of samplers is limited to 4.  
  
 The following restrictions apply when using a PS 3.0 shader.  
  
-   When a PS 3.0 shader is assigned, the number of samplers increases to 8. Assign the PS 3.0 shader before other shaders to enable registering 8 samplers.  
  
-   The full shader constant register limit of 224 for floats is used. For more information, see [ps_3_0](http://go.microsoft.com/fwlink/?LinkId=166292).  
  
-   The following data types are supported in PS 3.0 shaders only. An exception is thrown if these are used in lower shader versions.  
  
    -   `int` and types convertible to `int`: `uint`, `byte`, `sbyte`, `long`, `ulong`, `short`, `ushort`, `char`  
  
    -   `bool`  
  
-   If a valid PS 3.0 shader is loaded on a computer that does not have hardware support for PS 3.0, the shader is ignored. If the shader is invalid, no exception is thrown.  
  
-   If a computer has more than one video card, the behavior is defined by the least capable video card. For example, if the computer has two video cards, one of which supports PS 3.0 and one of which does not, the behavior is the same as if the computer does not support PS 3.0.  
  
-   If a computer supports rendering PS 3.0 in hardware, but an invalid PS 3.0 shader is assigned, the <xref:System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered> event is raised. An example of an invalid PS 3.0 shader is one compiled with the `ps_3_sw` flag. The ShaderEffect class accepts only PS 3.0 shaders that are compiled with the `ps_3_0` flag passed to fxc.exe. For more information, see [Effect-Compiler Tool](http://go.microsoft.com/fwlink/?LinkId=166293).  
  
> [!NOTE]
>  PS 2.0 shaders run when rendering in software. However, even if PS 3.0 is supported by the system's hardware, PS 3.0 shaders do not run during software rendering.  
  
   
  
## Examples  
 The following code example shows how to derive from the ShaderEffect class.  
  
 [!code-cs[System.Windows.Media.Effects.ShaderEffect#1](~/add/codesnippet/csharp/ShaderEffectDemo/ThresholdEffect.cs#1)]  
  
 The following code example shows a shader that corresponds to the previous ShaderEffect class.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 The following XAML shows how to use the custom shader effect.  
  
 [!code-xml[System.Windows.Media.Effects.ShaderEffect#1000](~/add/codesnippet/xaml/ShaderEffectDemo/Window1.xaml#1000)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.UIPermission">for full access to UI resources. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ShaderEffect ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.ShaderEffect" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.ShaderEffect Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Effects.ShaderEffect Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.ShaderEffect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.ShaderEffect" /> object, making deep copies of this object's values. When copying this object's dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.</summary>
        <returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone's &lt;xref:System.Windows.Freezable.IsFrozen%2A&gt; property is <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Clone method can be used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects. For convenience, this method shadows the inherited <xref:System.Windows.Freezable.Clone%2A> method to provide a strongly typed implementation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">The object to clone.</param>
        <summary>Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.ShaderEffect CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Effects.ShaderEffect CloneCurrentValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.ShaderEffect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.ShaderEffect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are copied.</summary>
        <returns>A modifiable clone of the current object. The cloned object's &lt;xref:System.Windows.Freezable.IsFrozen%2A&gt; property will be <see langword="false" /> even if the source's &lt;xref:System.Windows.Freezable.IsFrozen%2A&gt; property was <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version with a strongly typed implementation.  
  
 For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to be cloned.</param>
        <summary>Makes the instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using current property values.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class.</summary>
        <returns>The new instance.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DdxUvDdyUvRegisterIndex">
      <MemberSignature Language="C#" Value="protected int DdxUvDdyUvRegisterIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DdxUvDdyUvRegisterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates the shader register to use for the partial derivatives of the texture coordinates with respect to screen space.</summary>
        <value>The index of the register that contains the partial derivatives.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DdxUvDdyUvRegisterIndex property to specify the shader register that contains the partial derivatives of the texture coordinates with respect to screen space. For example, if DdxUvDdyUvRegisterIndex is set to 4, the shader register c4 is used. Register c4 contains four float fields. The following High Level Shading Language (HLSL) code shows how this register is used. The `nextPixelUV` value represents the next pixel to the right.  
  
```  
float4 ddxUvDdyUv : register(c4);  
SamplerState  sampler : register(S0);  
...  
float2 nextPixelUV;  
nextPixelUV.u = ddxUvDdyUv.x + u;  
nextPixelUV.v = ddxUvDdyUv.y + v;  
  
tex2D(sampler, nextPixelUV);  
```  
  
 The following table shows how the register specified for DdxUvDdyUvRegisterIndex is filled.  
  
|Register Constant|Derivative Value|  
|-----------------------|----------------------|  
|x component|ddx(u)|  
|y component|ddx(v)|  
|z component|ddy(u)|  
|w component|ddy(v)|  
  
 Texture coordinates are denoted as `(u, v)`. `ddx(u)` is the constant partial derivative of the texture coordinate component `u` with respect to the screen-space x-coordinate. `ddy(u)` is the partial derivative of the texture coordinate `u` with respect to the screen-space y-coordinate. Similarly, `ddx(v)` and `ddy(v)` are the corresponding screen-space derivatives for the texture coordinate component `v`.  
  
> [!NOTE]
>  HLSL has the ddx and ddy instructions to calculate these values, but these instructions are not available on all PixelShader 2.0 hardware.  
  
 You may think of these constants in the following way. If you step 1 pixel to the right in screen space (in the x direction), then `ddx(u)` is the amount that `u` changes in texture space, and `ddx(v)` is the amount that `v` changes in texture space. If the effect is axis-aligned when it is rendered, then `ddx(v)` is 0. If the effect is rotated when it is rendered, then `ddx(v)` is non-zero.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An attempt was made to set the DdxUvDdyUvRegisterIndex property more than one time or after initial processing of the effect.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">The instance to copy.</param>
        <summary>Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to copy and freeze.</param>
        <summary>Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If the object has animated dependency properties, their current animated values are copied.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaddingBottom">
      <MemberSignature Language="C#" Value="protected double PaddingBottom { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 PaddingBottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating that the effect's output texture is larger than its input texture along the bottom edge.</summary>
        <value>The padding along the bottom edge of the effect.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The provided value is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaddingLeft">
      <MemberSignature Language="C#" Value="protected double PaddingLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 PaddingLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating that the effect's output texture is larger than its input texture along the left edge.</summary>
        <value>The padding along the left edge of the effect.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The provided value is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaddingRight">
      <MemberSignature Language="C#" Value="protected double PaddingRight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 PaddingRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating that the effect's output texture is larger than its input texture along the right edge.</summary>
        <value>The padding along the right edge of the effect.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The provided value is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PaddingTop">
      <MemberSignature Language="C#" Value="protected double PaddingTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 PaddingTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating that the effect's output texture is larger than its input texture along the top edge.</summary>
        <value>The padding along the top edge of the effect.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The provided value is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PixelShader">
      <MemberSignature Language="C#" Value="protected System.Windows.Media.Effects.PixelShader PixelShader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.PixelShader PixelShader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.PixelShader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.PixelShader" /> to use for the effect.</summary>
        <value>The <see cref="T:System.Windows.Media.Effects.PixelShader" /> for the effect.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_PixelShader"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PixelShaderConstantCallback">
      <MemberSignature Language="C#" Value="protected static System.Windows.PropertyChangedCallback PixelShaderConstantCallback (int floatRegisterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.PropertyChangedCallback PixelShaderConstantCallback(int32 floatRegisterIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyChangedCallback</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="floatRegisterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="floatRegisterIndex">The index of the shader register associated with the dependency property.</param>
        <summary>Associates a dependency property value with a pixel shader's float constant register.</summary>
        <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> delegate that associates a dependency property and the shader constant register specified by <paramref name="floatRegisterIndex" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the PixelShaderConstantCallback method when you register a dependency property for a shader constant. The PixelShaderConstantCallback method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader constant register specified by `floatRegisterIndex`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The dependency property is an unknown type.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="floatRegisterIndex" /> is greater than or equal to 32, or <paramref name="floatRegisterIndex" /> is less than 0.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PixelShaderProperty">
      <MemberSignature Language="C#" Value="protected static readonly System.Windows.DependencyProperty PixelShaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly class System.Windows.DependencyProperty PixelShaderProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Media.Effects.ShaderEffect.PixelShader%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PixelShaderSamplerCallback">
      <MemberSignature Language="C#" Value="protected static System.Windows.PropertyChangedCallback PixelShaderSamplerCallback (int samplerRegisterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.PropertyChangedCallback PixelShaderSamplerCallback(int32 samplerRegisterIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyChangedCallback</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplerRegisterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
        <summary>Associates a dependency property value with a pixel shader's sampler register.</summary>
        <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> delegate that associates a dependency property and the shader sampler register specified by <paramref name="samplerRegisterIndex" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the PixelShaderSamplerCallback method when you register a <xref:System.Windows.Media.Brush>-valued dependency property for a shader sampler. The PixelShaderSamplerCallback method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by `samplerRegisterIndex`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PixelShaderSamplerCallback">
      <MemberSignature Language="C#" Value="protected static System.Windows.PropertyChangedCallback PixelShaderSamplerCallback (int samplerRegisterIndex, System.Windows.Media.Effects.SamplingMode samplingMode);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.PropertyChangedCallback PixelShaderSamplerCallback(int32 samplerRegisterIndex, valuetype System.Windows.Media.Effects.SamplingMode samplingMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyChangedCallback</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplerRegisterIndex" Type="System.Int32" />
        <Parameter Name="samplingMode" Type="System.Windows.Media.Effects.SamplingMode" />
      </Parameters>
      <Docs>
        <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
        <param name="samplingMode">The <see cref="T:System.Windows.Media.Effects.SamplingMode" /> for the shader sampler.</param>
        <summary>Associates a dependency property value with a pixel shader's sampler register and a <see cref="T:System.Windows.Media.Effects.SamplingMode" />.</summary>
        <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> delegate that associates a dependency property and the shader sampler register specified by <paramref name="samplerRegisterIndex" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> method when you register a <xref:System.Windows.Media.Brush>-valued dependency property for a shader sampler. The <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by `samplerRegisterIndex`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterPixelShaderSamplerProperty">
      <MemberSignature Language="C#" Value="protected static System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty (string dpName, Type ownerType, int samplerRegisterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty(string dpName, class System.Type ownerType, int32 samplerRegisterIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dpName" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="samplerRegisterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dpName">The name of the dependency property.</param>
        <param name="ownerType">The type of the effect that has the dependency property.</param>
        <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
        <summary>Associates a dependency property with a shader sampler register.</summary>
        <returns>A dependency property associated with the shader sampler specified by <paramref name="samplerRegisterIndex" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterPixelShaderSamplerProperty">
      <MemberSignature Language="C#" Value="protected static System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty (string dpName, Type ownerType, int samplerRegisterIndex, System.Windows.Media.Effects.SamplingMode samplingMode);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty(string dpName, class System.Type ownerType, int32 samplerRegisterIndex, valuetype System.Windows.Media.Effects.SamplingMode samplingMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dpName" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="samplerRegisterIndex" Type="System.Int32" />
        <Parameter Name="samplingMode" Type="System.Windows.Media.Effects.SamplingMode" />
      </Parameters>
      <Docs>
        <param name="dpName">The name of the dependency property.</param>
        <param name="ownerType">The type of the effect that has the dependency property.</param>
        <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
        <param name="samplingMode">The <see cref="T:System.Windows.Media.Effects.SamplingMode" /> for the shader sampler.</param>
        <summary>Associates a dependency property with a shader sampler register and a <see cref="T:System.Windows.Media.Effects.SamplingMode" />.</summary>
        <returns>A dependency property associated with the shader sampler specified by <paramref name="samplerRegisterIndex" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateShaderValue">
      <MemberSignature Language="C#" Value="protected void UpdateShaderValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateShaderValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">The dependency property to be updated.</param>
        <summary>Notifies the effect that the shader constant or sampler corresponding to the specified dependency property should be updated.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>