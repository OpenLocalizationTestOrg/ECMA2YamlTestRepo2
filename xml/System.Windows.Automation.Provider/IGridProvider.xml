<Type Name="IGridProvider" FullName="System.Windows.Automation.Provider.IGridProvider">
  <TypeSignature Language="C#" Value="public interface IGridProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IGridProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("b17d6187-0907-464b-a168-0ef17a1572b1")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exposes methods and properties to support UI Automation client access to controls that act as containers for a collection of child elements. The children of this element must implement <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> and be organized in a two-dimensional logical coordinate system that can be traversed (that is, a UI Automation client can move to adjacent controls) by using the keyboard.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.GridPattern> control pattern.  
  
 IGridProvider does not enable active manipulation of a grid; <xref:System.Windows.Automation.Provider.ITransformProvider> must be implemented to enable this functionality.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public int ColumnCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the total number of columns in a grid.</summary>
        <value>The total number of columns in a grid.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hidden rows and columns, depending on the provider implementation, can be loaded in the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree and will therefore be reflected in the <xref:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount%2A> and <xref:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount%2A> properties. If the hidden rows and columns have not yet been loaded they will not be counted.  
  
   
  
## Examples  
 The following example code returns the property value.  
  
 [!code-vb[UIAMiscPatternProviders_snip#102](~/add/codesnippet/visualbasic/patternproviders/customgrid.vb#102)]
 [!code-cs[UIAMiscPatternProviders_snip#102](~/add/codesnippet/csharp/PatternProviders/CustomGrid.cs#102)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetItem">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple GetItem (int row, int column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple GetItem(int32 row, int32 column) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Int32" />
        <Parameter Name="column" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="row">The ordinal number of the row of interest.</param>
        <param name="column">The ordinal number of the column of interest.</param>
        <summary>Retrieves the UI Automation provider for the specified cell.</summary>
        <returns>The UI Automation provider for the specified cell.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Grid coordinates are zero-based with the upper left (or upper right cell depending on locale) having coordinates (0,0).  
  
-   If a cell is empty a UI Automation provider must still be returned in order to support the <xref:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid%2A> property for that cell. This is possible when the layout of child elements in the grid is similar to a ragged array.  
  
 ![Windows Explorer view showing ragged layout.](~/add/media/uia-gridpattern-ragged-array.PNG "Windows Explorer view showing ragged layout.")  
Example of a Grid Control with Empty Coordinates  
  
-   Hidden rows and columns, depending on the provider implementation, can be loaded in the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree and will therefore be reflected in the <xref:System.Windows.Automation.Provider.IGridProvider.RowCount%2A> and <xref:System.Windows.Automation.Provider.IGridProvider.ColumnCount%2A> properties. If the hidden rows and columns have not yet been loaded they should not be counted.  
  
   
  
## Examples  
 The following code is an example implementation of this method that returns an object representing the item at the specified location.  
  
 [!code-vb[UIAMiscPatternProviders_snip#101](~/add/codesnippet/visualbasic/patternproviders/customgrid.vb#101)]
 [!code-cs[UIAMiscPatternProviders_snip#101](~/add/codesnippet/csharp/PatternProviders/CustomGrid.cs#101)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowCount">
      <MemberSignature Language="C#" Value="public int RowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the total number of rows in a grid.</summary>
        <value>The total number of rows in a grid.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hidden rows and columns, depending on the provider implementation, can be loaded in the logical tree and will therefore be reflected in the <xref:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount%2A> and <xref:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount%2A> properties. If the hidden rows and columns have not yet been loaded they will not be counted.  
  
   
  
## Examples  
 The following example code returns the property value.  
  
 [!code-vb[UIAMiscPatternProviders_snip#103](~/add/codesnippet/visualbasic/patternproviders/customgrid.vb#103)]
 [!code-cs[UIAMiscPatternProviders_snip#103](~/add/codesnippet/csharp/PatternProviders/CustomGrid.cs#103)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>