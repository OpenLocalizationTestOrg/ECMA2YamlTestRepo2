<Type Name="IRawElementProviderSimple" FullName="System.Windows.Automation.Provider.IRawElementProviderSimple">
  <TypeSignature Language="C#" Value="public interface IRawElementProviderSimple" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRawElementProviderSimple" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("d6dd68d1-86fd-4332-8666-9abedea2d24c")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides methods and properties that expose basic information about a UI element.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This interface can be implemented on UI Automation providers for simple elements such as buttons. It can also be implemented on providers that contribute additional properties or control patterns, or override existing properties or control patterns, on an element that already has a default provider.  
  
 Providers for complex elements must implement <xref:System.Windows.Automation.Provider.IRawElementProviderFragment> or <xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot>.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="GetPatternProvider">
      <MemberSignature Language="C#" Value="public object GetPatternProvider (int patternId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetPatternProvider(int32 patternId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patternId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="patternId">Identifier of the pattern.</param>
        <summary>Retrieves an object that provides support for a control pattern on a [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] element.</summary>
        <returns>Object that implements the pattern interface, or <see langword="null" /> if the pattern is not supported.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows an implementation of GetPatternProvider for a provider that supports only <xref:System.Windows.Automation.InvokePattern>.  
  
 [!code-cs[UIAProvider_snip#101](~/add/codesnippet/csharp/UIAProvider/FragmentRoot.cs#101)]
 [!code-vb[UIAProvider_snip#101](~/add/codesnippet/visualbasic/UIAProviderVB/FragmentRoot.vb#101)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValue">
      <MemberSignature Language="C#" Value="public object GetPropertyValue (int propertyId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetPropertyValue(int32 propertyId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyId">The property identifier.</param>
        <summary>Retrieves the value of a property supported by the UI Automation provider.</summary>
        <returns>The property value, or a <see langword="null" /> if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A provider should return <xref:System.Windows.Automation.AutomationElementIdentifiers.NotSupported> only if it is explicitly hiding the property value and the request is not to be passed through to other providers.  
  
   
  
## Examples  
 The following code example shows an implementation of GetPropertyValue for a custom button control.  
  
 [!code-cs[UIAProvider_snip#102](~/add/codesnippet/csharp/UIAProvider/FragmentRoot.cs#102)]
 [!code-vb[UIAProvider_snip#102](~/add/codesnippet/visualbasic/UIAProviderVB/FragmentRoot.vb#102)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HostRawElementProvider">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple HostRawElementProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Provider.IRawElementProviderSimple HostRawElementProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a base provider for this element.</summary>
        <value>The base provider, or <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is the UI Automation provider for the window of a custom control. [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] uses this provider in combination with your provider implementation for a control hosted in a window. For example, the run-time identifier of the element is obtained from the host provider.  
  
 A host provider must be returned in any of the following cases:  
  
-   This element is the root of a fragment.  
  
-   The element is a simple element such as a pushbutton.  
  
-   The provider is a repositioning placeholder.  
  
 In other cases, the property should return `null`.  
  
   
  
## Examples  
 The following example code shows an implementation of HostRawElementProvider for a fragment root that is hosted in a Windows form.  
  
 [!code-cs[UIAProvider_snip#103](~/add/codesnippet/csharp/UIAProvider/FragmentRoot.cs#103)]
 [!code-vb[UIAProvider_snip#103](~/add/codesnippet/visualbasic/UIAProviderVB/FragmentRoot.vb#103)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProviderOptions">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ProviderOptions ProviderOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.Provider.ProviderOptions ProviderOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ProviderOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider.</summary>
        <value>Either <see cref="T:System.Windows.Automation.Provider.ProviderOptions" /> or <see cref="T:System.Windows.Automation.Provider.ProviderOptions" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] treats different types of providers differently. For example, events from server-side providers are broadcast to all listening UI Automation client processes, but events from client-side providers remain in that client process.  
  
   
  
## Examples  
 The following example code shows an implementation of ProviderOptions for a server-side UI Automation provider.  
  
 [!code-cs[UIAProvider_snip#104](~/add/codesnippet/csharp/UIAProvider/FragmentRoot.cs#104)]
 [!code-vb[UIAProvider_snip#104](~/add/codesnippet/visualbasic/UIAProviderVB/FragmentRoot.vb#104)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>