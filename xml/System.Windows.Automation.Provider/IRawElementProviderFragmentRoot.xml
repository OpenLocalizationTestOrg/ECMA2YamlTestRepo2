<Type Name="IRawElementProviderFragmentRoot" FullName="System.Windows.Automation.Provider.IRawElementProviderFragmentRoot">
  <TypeSignature Language="C#" Value="public interface IRawElementProviderFragmentRoot : System.Windows.Automation.Provider.IRawElementProviderFragment" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRawElementProviderFragmentRoot implements class System.Windows.Automation.Provider.IRawElementProviderFragment, class System.Windows.Automation.Provider.IRawElementProviderSimple" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Automation.Provider.IRawElementProviderFragment</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("620ce2a5-ab8f-40a9-86cb-de3c75599b58")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exposes methods and properties on the root element in a fragment.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This interface is implemented by a root element within a framework; for example, a list box within a window. Other elements in the same fragment, such as list items, implement the <xref:System.Windows.Automation.Provider.IRawElementProviderFragment> interface.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ElementProviderFromPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragment ElementProviderFromPoint (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderFragment ElementProviderFromPoint(float64 x, float64 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">The X coordinate,.</param>
        <param name="y">The Y coordinate.</param>
        <summary>Retrieves the element in this fragment that is at the specified point.</summary>
        <returns>The provider for the child element at the specified point, if one exists, or the root provider if the point is on this element but not on any child element. Otherwise returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the point is on an element in another framework that is hosted by this fragment, the method returns the element that hosts that fragment.  
  
 The returned provider should correspond to the element that would receive mouse input at the specified point.  
  
   
  
## Examples  
 The following code example shows one possible implementation of this method for a non-scrolling list box. The index of the list item at the specified point is calculated using the height of each item, and the item at that point is returned. If no item exists at that point (for example, it is a blank area of the list box, the method returns a null reference (`Nothing`).  
  
 [!code-cs[UIAFragmentProvider_snip#106](~/add/codesnippet/csharp/UIAFragmentProvider_snip.ElementProvider/ListFragment.cs#106)]
 [!code-vb[UIAFragmentProvider_snip#106](~/add/codesnippet/visualbasic/UIAFragmentProviderVB/ListFragment.vb#106)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFocus">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragment GetFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderFragment GetFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the element in this fragment that has the input focus.</summary>
        <returns>The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference (<see langword="Nothing" /> in Visual Basic).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the focus is on an element in another framework that is hosted by this fragment, the method returns the element that hosts that fragment.  
  
   
  
## Examples  
 The following code example shows one possible implementation of this method for a list box. It returns the currently selected item in the list.  
  
 [!code-cs[UIAFragmentProvider_snip#107](~/add/codesnippet/csharp/UIAFragmentProvider_snip.ElementProvider/ListFragment.cs#107)]
 [!code-vb[UIAFragmentProvider_snip#107](~/add/codesnippet/visualbasic/UIAFragmentProviderVB/ListFragment.vb#107)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>