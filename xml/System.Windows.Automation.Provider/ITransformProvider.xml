<Type Name="ITransformProvider" FullName="System.Windows.Automation.Provider.ITransformProvider">
  <TypeSignature Language="C#" Value="public interface ITransformProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITransformProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("6829ddc4-4f91-4ffa-b86f-bd3e2987cb4c")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exposes methods and properties to support UI Automation client access to controls that can be moved, resized, or rotated within a two-dimensional space.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TransformPattern> control pattern.  
  
 Support for this control pattern is not limited to objects on the desktop. This control pattern must also be implemented by the children of a container object as long as the children can be moved, resized, or rotated freely within the boundaries of the container.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CanMove">
      <MemberSignature Language="C#" Value="public bool CanMove { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanMove" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that specifies whether the control can be moved.</summary>
        <value>
          <see langword="true" /> if the element can be moved; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows an implementation of this method for a control that can be moved.  
  
 [!code-vb[UIAITransformProvider_snip#CanMove](~/add/codesnippet/visualbasic/uiaitransformprovider_snip/transformfragment.vb#canmove)]
 [!code-cs[UIAITransformProvider_snip#CanMove](~/add/codesnippet/csharp/UIAITransformProvider_snip/TransformFragment.cs#canmove)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanResize">
      <MemberSignature Language="C#" Value="public bool CanResize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that specifies whether the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] element can be resized.</summary>
        <value>
          <see langword="true" /> if the element can be resized; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows an implementation of this method for a control that can be resized.  
  
 [!code-vb[UIAITransformProvider_snip#CanResize](~/add/codesnippet/visualbasic/uiaitransformprovider_snip/transformfragment.vb#canresize)]
 [!code-cs[UIAITransformProvider_snip#CanResize](~/add/codesnippet/csharp/UIAITransformProvider_snip/TransformFragment.cs#canresize)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanRotate">
      <MemberSignature Language="C#" Value="public bool CanRotate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRotate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that specifies whether the control can be rotated.</summary>
        <value>
          <see langword="true" /> if the element can be rotated; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows an implementation of this method for a control that cannot be rotated.  
  
 [!code-vb[UIAITransformProvider_snip#CanRotate](~/add/codesnippet/visualbasic/uiaitransformprovider_snip/transformfragment.vb#canrotate)]
 [!code-cs[UIAITransformProvider_snip#CanRotate](~/add/codesnippet/csharp/UIAITransformProvider_snip/TransformFragment.cs#canrotate)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public void Move (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Move(float64 x, float64 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">Absolute screen coordinates of the left side of the control.</param>
        <param name="y">Absolute screen coordinates of the top of the control.</param>
        <summary>Moves the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An object cannot be moved, resized, or rotated such that its resulting screen location would be completely outside the coordinates of its container and inaccessible to keyboard or mouse. For example, when a top-level window is moved completely off-screen or a child object is moved outside the boundaries of the container's viewport. In these cases the object is placed as close to the requested screen coordinates as possible with the top or left coordinates overridden to be within the container boundaries.  
  
   
  
## Examples  
 The following example shows one possible implementation of this method for a custom control that can be moved.  
  
 [!code-vb[UIAITransformProvider_snip#Move](~/add/codesnippet/visualbasic/uiaitransformprovider_snip/transformfragment.vb#move)]
 [!code-cs[UIAITransformProvider_snip#Move](~/add/codesnippet/csharp/UIAITransformProvider_snip/TransformFragment.cs#move)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">If the &lt;xref:System.Windows.Automation.Provider.ITransformProvider.CanMove%2A&gt; property is false.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public void Resize (double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resize(float64 width, float64 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="width">The new width of the window, in pixels.</param>
        <param name="height">The new height of the window, in pixels.</param>
        <summary>Resizes the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When called on a control that supports split panes, this method can have the side effect of resizing other contiguous panes.  
  
 An object cannot be moved, resized, or rotated such that its resulting screen location would be completely outside the coordinates of its container and inaccessible to keyboard or mouse. For example, when a top-level window is moved completely off-screen or a child object is moved outside the boundaries of the container's viewport. In these cases the object is placed as close to the requested screen coordinates as possible with the top or left coordinates overridden to be within the container boundaries.  
  
   
  
## Examples  
 The following example shows one possible implementation of this method for a custom control that can be resized.  
  
 [!code-vb[UIAITransformProvider_snip#Resize](~/add/codesnippet/visualbasic/uiaitransformprovider_snip/transformfragment.vb#resize)]
 [!code-cs[UIAITransformProvider_snip#Resize](~/add/codesnippet/csharp/UIAITransformProvider_snip/TransformFragment.cs#resize)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">If the &lt;xref:System.Windows.Automation.Provider.ITransformProvider.CanResize%2A&gt; property is false.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (double degrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rotate(float64 degrees) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="degrees">The number of degrees to rotate the control. A positive number rotates clockwise; a negative number rotates counterclockwise.</param>
        <summary>Rotates the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An object cannot be moved, resized or rotated such that its resulting screen location would be completely outside the coordinates of its container and inaccessible to keyboard or mouse. For example, when a top-level window is moved completely off-screen or a child object is moved outside the boundaries of the container's viewport. In these cases the object is placed as close to the requested screen coordinates as possible with the top or left coordinates overridden to be within the container boundaries.  
  
   
  
## Examples  
 The following example shows one possible implementation of this method for a custom control that cannot be rotated.  
  
 [!code-vb[UIAITransformProvider_snip#Rotate](~/add/codesnippet/visualbasic/uiaitransformprovider_snip/transformfragment.vb#rotate)]
 [!code-cs[UIAITransformProvider_snip#Rotate](~/add/codesnippet/csharp/UIAITransformProvider_snip/TransformFragment.cs#rotate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">If the &lt;xref:System.Windows.Automation.Provider.ITransformProvider.CanRotate%2A&gt; property is false.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>