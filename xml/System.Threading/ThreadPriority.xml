<Type Name="ThreadPriority" FullName="System.Threading.ThreadPriority">
  <TypeSignature Language="C#" Value="public enum ThreadPriority" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed ThreadPriority extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the scheduling priority of a <see cref="T:System.Threading.Thread" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ThreadPriority defines the set of all possible values for a thread priority. Thread priorities specify the relative priority of one thread versus another.  
  
 Every thread has an assigned priority. Threads created within the runtime are initially assigned the `Normal` priority, while threads created outside the runtime retain their previous priority when they enter the runtime. You can get and set the priority of a thread by accessing its <xref:System.Threading.Thread.Priority%2A> property.  
  
 Threads are scheduled for execution based on their priority. The scheduling algorithm used to determine the order of thread execution varies with each operating system. The operating system can also adjust the thread priority dynamically as the user interface's focus is moved between the foreground and the background.  
  
 The priority of a thread does not affect the thread's state; the state of the thread must be <xref:System.Threading.ThreadState> before the operating system can schedule it.  
  
   
  
## Examples  
 The following code example shows the result of changing the priority of a thread. Three threads are created, the priority of one thread is set to BelowNormal, and the priority of a second is set to AboveNormal. Each thread increments a variable in a `while` loop and runs for a set time.  
  
 [!code-cs[System.Threading.ThreadPriority#1](~/add/codesnippet/csharp/t-system.threading.threa_2_1.cs)]
 [!code-vb[System.Threading.ThreadPriority#1](~/add/codesnippet/visualbasic/t-system.threading.threa_2_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="AboveNormal">
      <MemberSignature Language="C#" Value="AboveNormal" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.ThreadPriority AboveNormal = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled after threads with <see langword="Highest" /> priority and before those with <see langword="Normal" /> priority.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BelowNormal">
      <MemberSignature Language="C#" Value="BelowNormal" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.ThreadPriority BelowNormal = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled after threads with <see langword="Normal" /> priority and before those with <see langword="Lowest" /> priority.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Highest">
      <MemberSignature Language="C#" Value="Highest" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.ThreadPriority Highest = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled before threads with any other priority.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Lowest">
      <MemberSignature Language="C#" Value="Lowest" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.ThreadPriority Lowest = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled after threads with any other priority.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Normal">
      <MemberSignature Language="C#" Value="Normal" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.ThreadPriority Normal = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled after threads with <see langword="AboveNormal" /> priority and before those with <see langword="BelowNormal" /> priority. Threads have <see langword="Normal" /> priority by default.</summary>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>