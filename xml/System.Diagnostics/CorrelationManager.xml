<Type Name="CorrelationManager" FullName="System.Diagnostics.CorrelationManager">
  <TypeSignature Language="C#" Value="public class CorrelationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CorrelationManager extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Correlates traces that are part of a logical transaction.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Traces generated from a single logical operation can be tagged with an operation-unique identity, in order to distinguish them from traces from a different logical operation. For example, it may be useful to group correlated traces by ASP.NET request. The CorrelationManager class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity.  
  
 Logical operations can also be nested. The <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property exposes the stack of nested logical operation identities. Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity off the stack.  
  
> [!NOTE]
>  Logical operation identities are objects, allowing the use of a type for a logical operation identity.  
  
   
  
## Examples  
 The following code example demonstrates the use of the CorrelationManager class by identifying the logical operation associated with a traced event. Two logical operations are started, one in the main thread and the other in a worker thread. An error event is logged in both logical operations.  
  
 [!code-cpp[System.Diagnostics.CorrelationManager#1](~/add/codesnippet/cpp/t-system.diagnostics.cor_1.cpp)]
 [!code-cs[System.Diagnostics.CorrelationManager#1](~/add/codesnippet/csharp/t-system.diagnostics.cor_1.cs)]
 [!code-vb[System.Diagnostics.CorrelationManager#1](~/add/codesnippet/visualbasic/t-system.diagnostics.cor_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ActivityId">
      <MemberSignature Language="C#" Value="public Guid ActivityId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ActivityId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the identity for a global activity.</summary>
        <value>A &lt;xref:System.Guid&gt; structure that identifies the global activity.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ActivityId property gets and sets the global activity identity in the <xref:System.Runtime.Remoting.Messaging.CallContext> for the thread. The ActivityId is used for trace transfer operations in trace listeners that override the <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method, such as the <xref:System.Diagnostics.XmlWriterTraceListener> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LogicalOperationStack">
      <MemberSignature Language="C#" Value="public System.Collections.Stack LogicalOperationStack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Stack LogicalOperationStack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Stack</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the logical operation stack from the call context.</summary>
        <value>A <see cref="T:System.Collections.Stack" /> object that represents the logical operation stack for the call context.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the LogicalOperationStack property's stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity from the stack.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StartLogicalOperation">
      <MemberSignature Language="C#" Value="public void StartLogicalOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartLogicalOperation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts a logical operation on a thread.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The logical operation is started using an automatically generated GUID for a logical operation identifier.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StartLogicalOperation">
      <MemberSignature Language="C#" Value="public void StartLogicalOperation (object operationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartLogicalOperation(object operationId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationId">An object identifying the operation.</param>
        <summary>Starts a logical operation with the specified identity on a thread.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `operationId` parameter can be any object, such as a <xref:System.String> that allows the operation to be identified for tracing purposes. The object represented by `operationId` is added to the <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates the use of the StartLogicalOperation method by initializing a logical operation to be associated with the main thread. For the complete code example, see the <xref:System.Diagnostics.CorrelationManager> class.  
  
 [!code-cs[System.Diagnostics.CorrelationManager#2](~/add/codesnippet/csharp/m-system.diagnostics.cor_1.cs)]
 [!code-vb[System.Diagnostics.CorrelationManager#2](~/add/codesnippet/visualbasic/m-system.diagnostics.cor_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="operationId" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StopLogicalOperation">
      <MemberSignature Language="C#" Value="public void StopLogicalOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopLogicalOperation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the current logical operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The logical operation is halted and the logical operation identity is removed from the <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A&gt; property is an empty stack.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>