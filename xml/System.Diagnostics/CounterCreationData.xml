<Type Name="CounterCreationData" FullName="System.Diagnostics.CounterCreationData">
  <TypeSignature Language="C#" Value="public class CounterCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CounterCreationData extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.CounterCreationDataConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the counter type, name, and Help string for a custom counter.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the CounterCreationData class to define custom counters. This example creates counters that display how many items are processed in an operation. The example initializes the counters, collects information from them, and then calculates and displays the results to the console.  
  
 [!code-cpp[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/cpp/t-system.diagnostics.cou_0_1.cpp)]
 [!code-cs[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/csharp/t-system.diagnostics.cou_0_1.cs)]
 [!code-vb[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/visualbasic/t-system.diagnostics.cou_0_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CounterCreationData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterCreationData" /> class, to a counter of type <see langword="NumberOfItems32" />, and with empty name and help strings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to create an empty instance of the <xref:System.Diagnostics.CounterCreationData> class. Because the example does not pass in any parameters, the <xref:System.Diagnostics.CounterCreationData.CounterHelp%2A>, <xref:System.Diagnostics.CounterCreationData.CounterName%2A>, and <xref:System.Diagnostics.CounterCreationData.CounterType%2A> properties are not specified and must be defined later.  
  
 [!code-cs[Diagnostics_CounterCreationData#3](~/add/codesnippet/csharp/m-system.diagnostics.cou_1.cs)]
 [!code-cpp[Diagnostics_CounterCreationData#3](~/add/codesnippet/cpp/m-system.diagnostics.cou_1.cpp)]
 [!code-vb[Diagnostics_CounterCreationData#3](~/add/codesnippet/visualbasic/m-system.diagnostics.cou_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CounterCreationData (string counterName, string counterHelp, System.Diagnostics.PerformanceCounterType counterType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string counterName, string counterHelp, valuetype System.Diagnostics.PerformanceCounterType counterType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="counterHelp" Type="System.String" />
        <Parameter Name="counterType" Type="System.Diagnostics.PerformanceCounterType" />
      </Parameters>
      <Docs>
        <param name="counterName">The name of the counter, which must be unique within its category.</param>
        <param name="counterHelp">The text that describes the counter's behavior.</param>
        <param name="counterType">A <see cref="T:System.Diagnostics.PerformanceCounterType" /> that identifies the counter's behavior.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterCreationData" /> class, to a counter of the specified type, using the specified counter name and Help strings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to create an instance of the <xref:System.Diagnostics.CounterCreationData> class, and pass in parameters to set the <xref:System.Diagnostics.CounterCreationData.CounterHelp%2A>, <xref:System.Diagnostics.CounterCreationData.CounterName%2A> and <xref:System.Diagnostics.CounterCreationData.CounterType%2A> properties of the object when it is initialized.  
  
 [!code-cs[Diagnostics_CounterCreationData#2](~/add/codesnippet/csharp/7c8fb331-3ac7-406c-8053-_1.cs)]
 [!code-cpp[Diagnostics_CounterCreationData#2](~/add/codesnippet/cpp/7c8fb331-3ac7-406c-8053-_1.cpp)]
 [!code-vb[Diagnostics_CounterCreationData#2](~/add/codesnippet/visualbasic/7c8fb331-3ac7-406c-8053-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">You have specified a value for <paramref name="counterType" /> that is not a member of the <see cref="T:System.Diagnostics.PerformanceCounterType" /> enumeration.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="counterHelp" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CounterHelp">
      <MemberSignature Language="C#" Value="public string CounterHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CounterHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("CounterHelp")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom counter's description.</summary>
        <value>The text that describes the counter's behavior.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to get and set the CounterHelp property. This example creates two counters and sets their CounterHelp property by using different techniques. When the first counter is initialized, the CounterHelp data is passed to the constructor, whereas the second counter sets the property explicitly.  
  
 [!code-cs[Diagnostics_CounterCreationData#5](~/add/codesnippet/csharp/p-system.diagnostics.cou_9_1.cs)]
 [!code-cpp[Diagnostics_CounterCreationData#5](~/add/codesnippet/cpp/p-system.diagnostics.cou_9_1.cpp)]
 [!code-vb[Diagnostics_CounterCreationData#5](~/add/codesnippet/visualbasic/p-system.diagnostics.cou_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The specified value is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CounterName">
      <MemberSignature Language="C#" Value="public string CounterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CounterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("CounterName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the custom counter.</summary>
        <value>A name for the counter, which is unique in its category.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to get and set the CounterName property. This example creates two counters and sets their CounterName property by using different techniques. When the first counter is initialized, the CounterName data is passed to the constructor, whereas the second counter sets the property explicitly.  
  
 [!code-cs[Diagnostics_CounterCreationData#4](~/add/codesnippet/csharp/p-system.diagnostics.cou_5_1.cs)]
 [!code-cpp[Diagnostics_CounterCreationData#4](~/add/codesnippet/cpp/p-system.diagnostics.cou_5_1.cpp)]
 [!code-vb[Diagnostics_CounterCreationData#4](~/add/codesnippet/visualbasic/p-system.diagnostics.cou_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The specified value is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The specified value is not between 1 and 80 characters long or contains double quotes, control characters or leading or trailing spaces.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CounterType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceCounterType CounterType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.PerformanceCounterType CounterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("CounterType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the performance counter type of the custom counter.</summary>
        <value>A <see cref="T:System.Diagnostics.PerformanceCounterType" /> that defines the behavior of the performance counter.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to get and set the CounterType property. This example creates two counters and sets their CounterType property by using different techniques. When the first counter is initialized, the CounterType data is passed to the constructor, whereas the second counter sets the property explicitly.  
  
 [!code-cs[Diagnostics_CounterCreationData#6](~/add/codesnippet/csharp/p-system.diagnostics.cou_7_1.cs)]
 [!code-cpp[Diagnostics_CounterCreationData#6](~/add/codesnippet/cpp/p-system.diagnostics.cou_7_1.cpp)]
 [!code-vb[Diagnostics_CounterCreationData#6](~/add/codesnippet/visualbasic/p-system.diagnostics.cou_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">You have specified a type that is not a member of the <see cref="T:System.Diagnostics.PerformanceCounterType" /> enumeration.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>