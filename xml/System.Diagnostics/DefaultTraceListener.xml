<Type Name="DefaultTraceListener" FullName="System.Diagnostics.DefaultTraceListener">
  <TypeSignature Language="C#" Value="public class DefaultTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultTraceListener extends System.Diagnostics.TraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the default output methods and behavior for tracing.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An instance of this class is automatically added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> and <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collections. Explicitly adding a second DefaultTraceListener causes duplicate messages in the debugger output window and duplicate message boxes for asserts.  
  
 By default, the <xref:System.Diagnostics.DefaultTraceListener.Write%2A> and <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> methods emit the message to the Win32 `OutputDebugString` function and to the <xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName> method. For information about the `OutputDebugString` function, see the Platform SDK or MSDN.  
  
 The <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> method, by default, displays a message box when the application is running in a user interface mode; it also emits the message using <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A>.  
  
> [!NOTE]
>  The display of the message box for <xref:System.Diagnostics.Debug.Assert%2A> and <xref:System.Diagnostics.Debug.Fail%2A> method calls depends on the presence of the DefaultTraceListener. If the DefaultTraceListener is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The DefaultTraceListener can be removed by the [\<clear> element](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), by the [\<remove> element](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  
  
-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.  
  
-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.  
  
 To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted similar to the following example:  
  
```  
<configuration>  
<system.diagnostics>  
  <trace autoflush="false" indentsize="4">  
    <listeners>  
      <remove name="Default" />  
      <add name="myListener"  type="System.Diagnostics.TextWriterTraceListener"    initializeData="c:\myListener.log" />  
    </listeners>  
  </trace>  
</system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 The following code example calculates binomial coefficients, which are values used in probability and statistics. This example uses a DefaultTraceListener to trace results and log errors. It creates a new DefaultTraceListener, adds it to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection, and sets the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> property to the log file specified in the command-line arguments.  
  
 If an error is detected while processing the input parameter, or if the `CalcBinomial` function throws an exception, the <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> method logs and displays an error message. If the <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> property is `false`, the error message is also written to the console. When the result is calculated successfully, the <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> and <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> methods write the results to the log file.  
  
 The <xref:System.Diagnostics.DefaultTraceListener.Fail%2A>, <xref:System.Diagnostics.DefaultTraceListener.Write%2A>, and <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> methods cause trace information to be written only to the DefaultTraceListener. To write trace information to all listeners in the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection, use the <xref:System.Diagnostics.Trace.Fail%2A>, <xref:System.Diagnostics.Trace.Write%2A>, and <xref:System.Diagnostics.Trace.WriteLine%2A> methods of the <xref:System.Diagnostics.Trace> class.  
  
 [!code-cs[System.Diagnostics.DefaultTraceListener#11](~/add/codesnippet/csharp/t-system.diagnostics.def_1.cs)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#11](~/add/codesnippet/visualbasic/t-system.diagnostics.def_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe>This class is thread safe.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DefaultTraceListener" /> class with "Default" as its &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example removes the <xref:System.Diagnostics.DefaultTraceListener> provided by the application from the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection and then creates a new <xref:System.Diagnostics.DefaultTraceListener> and adds it to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection.  
  
 [!code-cs[System.Diagnostics.DefaultTraceListener#3](~/add/codesnippet/csharp/m-system.diagnostics.def_4_1.cs)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#3](~/add/codesnippet/visualbasic/m-system.diagnostics.def_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AssertUiEnabled">
      <MemberSignature Language="C#" Value="public bool AssertUiEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AssertUiEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the application is running in user-interface mode.</summary>
        <value>
          <see langword="true" /> if user-interface mode is enabled; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example calls a function that calls the <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> method to log an error message if the function throws an exception. If the AssertUiEnabled property is `false`, the method also writes the error message to the console.  
  
 [!code-cs[System.Diagnostics.DefaultTraceListener#8](~/add/codesnippet/csharp/p-system.diagnostics.def_1_1.cs)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/add/codesnippet/visualbasic/p-system.diagnostics.def_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to emit or display.</param>
        <summary>Emits or displays a message and a stack trace for an assertion that always fails.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, this method sends the `message` parameter and a stack trace to a message box (when the application runs in user-interface mode) and to the <xref:System.Diagnostics.DefaultTraceListener> instance.  
  
   
  
## Examples  
 The following code example writes an error message to a <xref:System.Diagnostics.DefaultTraceListener> using the Fail method. The method also writes the message to the console if a user interface is not available.  
  
 [!code-cs[System.Diagnostics.DefaultTraceListener#6](~/add/codesnippet/csharp/m-system.diagnostics.def_2_1.cs)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#6](~/add/codesnippet/visualbasic/m-system.diagnostics.def_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to emit or display.</param>
        <param name="detailMessage">The detailed message to emit or display.</param>
        <summary>Emits or displays detailed messages and a stack trace for an assertion that always fails.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, this method sends the `message` parameter, the `detailMessage` parameter, and a stack trace to a message box (when the application runs in user-interface mode) and to the <xref:System.Diagnostics.DefaultTraceListener> instance.  
  
   
  
## Examples  
 The following code example calls a function that calls the Fail method to log a detailed error message if the function throws an exception. The method writes the message to the console if a user interface is not available.  
  
 [!code-cs[System.Diagnostics.DefaultTraceListener#8](~/add/codesnippet/csharp/m-system.diagnostics.def_0_1.cs)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/add/codesnippet/visualbasic/m-system.diagnostics.def_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LogFileName">
      <MemberSignature Language="C#" Value="public string LogFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of a log file to write trace or debug messages to.</summary>
        <value>The name of a log file to write trace or debug messages to.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates a new <xref:System.Diagnostics.DefaultTraceListener>, adds it to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection, and sets the LogFileName property to the log file specified in the command-line arguments.  
  
 [!code-cs[System.Diagnostics.DefaultTraceListener#4](~/add/codesnippet/csharp/p-system.diagnostics.def_0_1.cs)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#4](~/add/codesnippet/visualbasic/p-system.diagnostics.def_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to write to <see langword="OutputDebugString" /> and &lt;xref:System.Diagnostics.Debugger.Log%2A&gt;.</param>
        <summary>Writes the output to the <see langword="OutputDebugString" /> function and to the &lt;xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For information about the Win32 `OutputDebugString` debugging function, see "OutputDebugString" in the Platform SDK or MSDN.  
  
   
  
## Examples  
 The following code example formats the results of a function and uses the Write method to write the first part of the message to a <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/add/codesnippet/visualbasic/m-system.diagnostics.def_3_1.vb)]
 [!code-cs[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/add/codesnippet/csharp/m-system.diagnostics.def_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to write to <see langword="OutputDebugString" /> and &lt;xref:System.Diagnostics.Debugger.Log%2A&gt;.</param>
        <summary>Writes the output to the <see langword="OutputDebugString" /> function and to the &lt;xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName&gt; method, followed by a carriage return and line feed (\r\n).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator is a carriage return followed by a line feed (\r\n).  
  
 For information about the Win32 `OutputDebugString` debugging function, see the Platform SDK or MSDN.  
  
 This method sets the <xref:System.Diagnostics.TraceListener.NeedIndent%2A> property to `true`.  
  
   
  
## Examples  
 The following code example formats the results of a function and uses the WriteLine method to write the last part of the message to a <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/add/codesnippet/visualbasic/m-system.diagnostics.def_1_1.vb)]
 [!code-cs[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/add/codesnippet/csharp/m-system.diagnostics.def_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>