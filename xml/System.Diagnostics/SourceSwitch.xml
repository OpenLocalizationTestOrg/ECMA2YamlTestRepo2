<Type Name="SourceSwitch" FullName="System.Diagnostics.SourceSwitch">
  <TypeSignature Language="C#" Value="public class SourceSwitch : System.Diagnostics.Switch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SourceSwitch extends System.Diagnostics.Switch" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Switch</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a multilevel switch to control tracing and debug output without recompiling your code.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Diagnostics.TraceSource.Switch%2A> property of the <xref:System.Diagnostics.TraceSource> class is a SourceSwitch object. The SourceSwitch class provides a <xref:System.Diagnostics.SourceSwitch.Level%2A> property to test the event level of the switch. The <xref:System.Diagnostics.SourceSwitch.Level%2A> property gets or sets the switch's <xref:System.Diagnostics.TraceLevel> value.  
  
 You can set the event level of a SourceSwitch through the application configuration file and then use the configured SourceSwitch level in your application. Alternatively, you can create a SourceSwitch in your code and set the level directly, to instrument a specific section of code.  
  
 To configure a SourceSwitch, edit the configuration file that corresponds to the name of your application. Within this file, you can set a switch's value or clear all the switches previously set by the application. The configuration file should be formatted as shown in the following example.  
  
```  
<switches>  
  <add name="SourceSwitch" value="Verbose"></add>  
</switches>  
```  
  
 The switch is used to check whether a trace should be propagated or ignored. Each <xref:System.Diagnostics.TraceSource> trace method calls the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method before calling the listeners. If the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method returns `false`, the trace is ignored and the trace method exits. If the <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> method returns `true`, the trace is passed to the listeners.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SourceSwitch (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the source.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.SourceSwitch" /> class, specifying the name of the source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `name` parameter is used to set the value of the <xref:System.Diagnostics.Switch.DisplayName%2A> property.  
  
 To set the level of your <xref:System.Diagnostics.SourceSwitch>, edit the configuration file that corresponds to the name of your application. Within this file, you can add a switch and set its value, remove a switch, or clear all the switches previously set by the application. To add a source switch, the configuration file should be formatted as shown in the following example.  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="SourceSwitch" value="Verbose" ></add>  
    </switches>  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SourceSwitch (string displayName, string defaultSwitchValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, string defaultSwitchValue) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="defaultSwitchValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">The name of the source switch.</param>
        <param name="defaultSwitchValue">The default value for the switch.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.SourceSwitch" /> class, specifying the display name and the default value for the source switch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `displayName` parameter is used to set the value of the <xref:System.Diagnostics.Switch.DisplayName%2A> property; the `defaultSwitchValue` parameter is saved as a field and used to initialize the <xref:System.Diagnostics.Switch.Value%2A> property on first reference.  
  
> [!NOTE]
>  If the switch is defined in a configuration file and the `value` attribute is specified, the configuration file value takes precedence and the `defaultSwitchValue` is ignored.  
  
 To set the level of your <xref:System.Diagnostics.SourceSwitch>, edit the configuration file that corresponds to the name of your application. Within this file, you can add a switch and set its value, remove a switch, or clear all the switches previously set by the application. To add a source switch, the configuration file should be formatted as shown in the following example.  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="SourceSwitch" value="Verbose" ></add>  
    </switches>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 The following code example creates a <xref:System.Diagnostics.SourceSwitch> with the name "SourceSwitch" and a default value of <xref:System.Diagnostics.SourceLevels>. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  
  
 [!code-cs[System.Diagnostics.TraceSource#7](~/add/codesnippet/csharp/m-system.diagnostics.sou_0_1.cs)]
 [!code-vb[System.Diagnostics.TraceSource#7](~/add/codesnippet/visualbasic/m-system.diagnostics.sou_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Level">
      <MemberSignature Language="C#" Value="public System.Diagnostics.SourceLevels Level { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.SourceLevels Level" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SourceLevels</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the level of the switch.</summary>
        <value>One of the <see cref="T:System.Diagnostics.SourceLevels" /> values that represents the event level of the switch.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property gets its value from the <xref:System.Diagnostics.Switch.SwitchSetting%2A> property. Setting this property also modifies the <xref:System.Diagnostics.Switch.SwitchSetting%2A> property.  
  
> [!NOTE]
>  For extensibility, the Level property can be set to any integer, rather than being limited to a <xref:System.Diagnostics.SourceLevels> enumeration value.  
  
   
  
## Examples  
 The following code example displays the value of the Level property for a source switch. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  
  
 [!code-cs[System.Diagnostics.TraceSource#8](~/add/codesnippet/csharp/p-system.diagnostics.sou_1.cs)]
 [!code-vb[System.Diagnostics.TraceSource#8](~/add/codesnippet/visualbasic/p-system.diagnostics.sou_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for operating with unmanaged code. Demand value <see cref="T:System.Security.Permissions.SecurityAction" />; Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnValueChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValueChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked when the value of the &lt;xref:System.Diagnostics.Switch.Value%2A&gt; property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnValueChanged method converts the new value of the <xref:System.Diagnostics.Switch.Value%2A> property to the integer representation of the matching field in the <xref:System.Diagnostics.SourceLevels> enumeration, and then uses this integer to set the <xref:System.Diagnostics.Switch.SwitchSetting%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The new value of &lt;xref:System.Diagnostics.Switch.Value%2A&gt; is not one of the <see cref="T:System.Diagnostics.SourceLevels" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldTrace">
      <MemberSignature Language="C#" Value="public bool ShouldTrace (System.Diagnostics.TraceEventType eventType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldTrace(valuetype System.Diagnostics.TraceEventType eventType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
        <summary>Determines if trace listeners should be called, based on the trace event type.</summary>
        <returns>
          <see langword="True" /> if the trace listeners should be called; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the `Trace` methods in the <xref:System.Diagnostics.TraceSource> class to determine whether listeners should be called to write a trace.  
  
> [!NOTE]
>  Application code should not call this method; it is intended to be called only by methods in the <xref:System.Diagnostics.TraceSource> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>