<Type Name="AddInController" FullName="System.AddIn.Hosting.AddInController">
  <TypeSignature Language="C#" Value="public sealed class AddInController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInController extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides access to an add-in for a variety of tasks.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this class to perform the following tasks:  
  
-   Use the <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> property to obtain an <xref:System.AddIn.Hosting.AddInEnvironment> object for an add-in. Then use that object to activate other add-ins in the same application domain and process as the original add-in.  
  
-   Use the <xref:System.AddIn.Hosting.AddInController.AppDomain%2A> property to obtain an <xref:System.AppDomain> object for an add-in. Then use that object to activate other add-ins in the same application domain as the original add-in. Note that because of limitations in cross-process remoting, this scenario will not work with add-ins that are activated in a separate process.  
  
-   Use the <xref:System.AddIn.Hosting.AddInController.Token%2A> property to obtain an <xref:System.AddIn.Hosting.AddInToken> object that represents an add-in.  
  
-   Shut down an add-in with the <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> method.  
  
 To obtain the controller for an add-in, call the <xref:System.AddIn.Hosting.AddInController.GetAddInController%2A> method and pass an instance of the add-in as its parameter.  
  
   
  
## Examples  
 The following example activates an add-in within the same environment as a previously activated add-in by using an AddInController object.  
  
 [!code-vb[AddInP3Host#8](~/add/codesnippet/visualbasic/addinp3hostvb/p3host.vb#8)]
 [!code-cs[AddInP3Host#8](~/add/codesnippet/csharp/addinP3Host/P3Host.cs#8)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="AddInEnvironment">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInEnvironment AddInEnvironment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInEnvironment AddInEnvironment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInEnvironment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> object.</summary>
        <value>An object that can be used to activate other add-ins in the same environment as the original add-in.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to get the <xref:System.AddIn.Hosting.AddInEnvironment> object for an add-in. Then use that object to activate other add-ins in the same application domain and process as the original add-in.  
  
   
  
## Examples  
 The following example activates a second add-in within the same environment as the first add-in.  
  
 [!code-vb[AddInP3Host#8](~/add/codesnippet/visualbasic/addinp3hostvb/p3host.vb#8)]
 [!code-cs[AddInP3Host#8](~/add/codesnippet/csharp/addinP3Host/P3Host.cs#8)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppDomain">
      <MemberSignature Language="C#" Value="public AppDomain AppDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomain AppDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the application domain that contains an add-in.</summary>
        <value>The application domain of the add-in.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to obtain an add-in's <xref:System.AppDomain> object and to activate other add-ins in the same application domain.  
  
   
  
## Examples  
 The following example activates a second add-in in the same application domain as the first add-in.  
  
 [!code-vb[AddInP3Host#9](~/add/codesnippet/visualbasic/addinp3hostvb/p3host.vb#9)]
 [!code-cs[AddInP3Host#9](~/add/codesnippet/csharp/addinP3Host/P3Host.cs#9)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAddInController">
      <MemberSignature Language="C#" Value="public static System.AddIn.Hosting.AddInController GetAddInController (object addIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Hosting.AddInController GetAddInController(object addIn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addIn" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="addIn">The host view of the add-in.</param>
        <summary>Obtains the controller for an add-in.</summary>
        <returns>The controller for the add-in.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.AddIn.Hosting.AddInToken.Activate%2A> methods return an object that represents the host's view of the add-in.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disables an add-in.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method breaks the communication pipeline between an add-in and its host. If the add-in was activated in an automatically generated application domain by using the <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> or <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.Security.PermissionSet%29> methods, the Shutdown method also unloads the application domain.  
  
 If the add-in was loaded into its own application domain, the Shutdown method also unloads the application domain.  
  
 If the add-in was loaded into an existing application domain, the host and pipeline segments will no longer have any references to that add-in. In this case, the add-in will be eligible to be reclaimed by garbage collection.  
  
 You can also use this class to shut down an add-in that is activated in an external process.  
  
   
  
## Examples  
 The following example obtains the <xref:System.AddIn.Hosting.AddInController> object for a host view named `manager` and then shuts down the add-in.  
  
 [!code-vb[AddInCollectionPipelineHost#6](~/add/codesnippet/visualbasic/ListAdaptersHost/Program.vb#6)]
 [!code-cs[AddInCollectionPipelineHost#6](~/add/codesnippet/csharp/ListAdaptersHost/Program.cs#6)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInToken Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the token that represents the add-in.</summary>
        <value>An object that represents the add-in.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you use this property to obtain a token to activate an add-in at a later time.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>