<Type Name="Globals" FullName="Microsoft.VisualBasic.Globals">
  <TypeSignature Language="C#" Value="public sealed class Globals" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Globals extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The <see langword="Globals" /> module contains script engine functions.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This module supports the Visual Basic language keywords and runtime library members that provide information about the runtime currently in use.  
  
   
  
## Examples  
 The following example uses the `ScriptEngineMajorVersion` property and related properties to return a string describing the current runtime information:  
  
```  
Function getRuntimeInfo() As String  
    Dim runtime As String = ScriptEngine & " Version "  
    runtime &= CStr(ScriptEngineMajorVersion) & "."  
    runtime &= CStr(ScriptEngineMinorVersion) & "."  
    runtime &= CStr(ScriptEngineBuildVersion)  
    ' Return the current runtime information.  
    Return runtime  
End Function  
```  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ScriptEngine">
      <MemberSignature Language="C#" Value="public static string ScriptEngine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ScriptEngine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a <see langword="String" /> representing the runtime currently in use.</summary>
        <value>Returns a <see langword="String" /> representing the runtime currently in use.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `ScriptEngine` property returns the string "VB".  
  
 You can use `ScriptEngine` when your application is running as a standalone program, in a script, or in a host application.  
  
   
  
## Examples  
 The following example uses the `ScriptEngine` property and related properties to return a string describing the current run-time information:  
  
 [!code-vb[VbVbalrScriptEngineProperties#1](~/add/codesnippet/visualbasic/VbVbalrScriptEngineProperties/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScriptEngineBuildVersion">
      <MemberSignature Language="C#" Value="public static int ScriptEngineBuildVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ScriptEngineBuildVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an <see langword="Integer" /> containing the build version number of the runtime currently in use.</summary>
        <value>Returns an <see langword="Integer" /> containing the build version number of the runtime currently in use.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned value corresponds directly to the version information contained in the DLL for the current runtime.  
  
 You can use `ScriptEngineBuildVersion` when your application is running as a standalone program, in a script, or in a host application.  
  
   
  
## Examples  
 The following example uses the `ScriptEngineBuildVersion` property and related properties to return a string describing the current run-time information:  
  
 [!code-vb[VbVbalrScriptEngineProperties#1](~/add/codesnippet/visualbasic/VbVbalrScriptEngineProperties/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScriptEngineMajorVersion">
      <MemberSignature Language="C#" Value="public static int ScriptEngineMajorVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ScriptEngineMajorVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an <see langword="Integer" /> containing the major version number of the runtime currently in use.</summary>
        <value>Returns an <see langword="Integer" /> containing the major version number of the runtime currently in use.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned value corresponds directly to the version information contained in the DLL for the current runtime.  
  
 You can use `ScriptEngineMajorVersion` when your application is running as a standalone program, in a script, or in a host application.  
  
   
  
## Examples  
 The following example uses the `ScriptEngineMajorVersion` property and related properties to return a string describing the current run-time information:  
  
 [!code-vb[VbVbalrScriptEngineProperties#1](~/add/codesnippet/visualbasic/VbVbalrScriptEngineProperties/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScriptEngineMinorVersion">
      <MemberSignature Language="C#" Value="public static int ScriptEngineMinorVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ScriptEngineMinorVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an <see langword="Integer" /> containing the minor version number of the runtime currently in use.</summary>
        <value>Returns an <see langword="Integer" /> containing the minor version number of the runtime currently in use.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned value corresponds directly to the version information contained in the DLL for the current runtime.  
  
 You can use `ScriptEngineMinorVersion` when your application is running as a standalone program, in a script, or in a host application.  
  
   
  
## Examples  
 The following example uses the `ScriptEngineMinorVersion` property and related properties to return a string describing the current run-time information:  
  
 [!code-vb[VbVbalrScriptEngineProperties#1](~/add/codesnippet/visualbasic/VbVbalrScriptEngineProperties/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>