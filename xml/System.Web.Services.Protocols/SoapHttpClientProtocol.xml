<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the class client that proxies derive from when using SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you are building an XML Web service client, then a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> must be created for the XML Web service. When the XML Web service client calls using SOAP, the proxy class must derive from SoapHttpClientProtocol, which derives from <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, in turn, derives from <xref:System.Web.Services.Protocols.WebClientProtocol>.  
  
 To communicate with an XML Web service, create a proxy class that derives indirectly or directly from <xref:System.Web.Services.Protocols.WebClientProtocol> for the XML Web service you want to call. Instead of creating the proxy class manually, use the Web Services Description Language tool (Wsdl.exe) to create a proxy class for a given XML Web service's service description. When a proxy class is generated for the SOAP protocol, synchronous calls to XML Web service methods are made via the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> method, whereas asynchronous calls are made using the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> method and the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> method.  
  
   
  
## Examples  
 The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. The proxy class derives from SoapHttpClientProtocol, which derives from the abstract <xref:System.Web.Services.Protocols.WebClientProtocol> class.  
  
 [!code-cs[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_15_1.cs)]
 [!code-vb[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_15_1.vb)]
 [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_15_1.cpp)]  
  
 The following code example is the `Math` XML Web service, from which the preceding proxy class was generated.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
    </remarks>
    <threadsafe>This type is thread safe.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the XML Web service method in the derived class that is invoking the BeginInvoke method.</param>
        <param name="parameters">An array of objects containing the parameters to pass to the XML Web service. The order of the values in the array correspond to the order of the parameters in the calling method of the derived class.</param>
        <param name="callback">The delegate to call when the asynchronous invoke is complete. If `callback` is <see langword="null" />, the delegate is not called.</param>
        <param name="asyncState">Extra information supplied by the caller.</param>
        <summary>Starts an asynchronous invocation of an XML Web service method using SOAP.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that is passed to the &lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A&gt; method to obtain the return values from the remote method call.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you would not call the BeginInvoke method directly, unless you were building your own proxy class for an XML Web service.  
  
 A proxy class generated by the Web Services Description Language tool (Wsdl.exe) from a Service Description exposes the XML Web service methods as names derived from the proxy class to call the XML Web service methods synchronously. To call the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the `Begin` prefix added to the name of the XML Web service method and one with the `End` prefix added.  
  
 The proxy class calls the BeginInvoke method to start an asynchronous invocation call to the XML Web service method. For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class contains a method named `BeginAdd`, for starting an invocation to the XML Web service method. Within the code for the `BeginAdd`, a call is made to the BeginInvoke method and the results are placed into the expected return type for `Add`.  
  
 The `methodName` is used to find the custom attributes which may have been added to the method, such as <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> provides additional information about the derived method that is required for the SOAP protocol.  
  
 `asyncState` is passed into `callback` and is included in the <xref:System.IAsyncResult> that is returned from the BeginInvoke method. The `asyncState` parameter can be used to pass information about the context of the asynchronous call, specified in the `callback` parameter, to the delegate that handles the result.  
  
   
  
## Examples  
 The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service. Within the `BeginAdd` method of the proxy class, the BeginInvoke method is starting an asynchronous invocation to the `Add` XML Web service method.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/cpp/81aca43b-c3a8-42d4-aae1-_1.cpp)]
 [!code-cs[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/csharp/81aca43b-c3a8-42d4-aae1-_1.cs)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/visualbasic/81aca43b-c3a8-42d4-aae1-_1.vb)]  
  
 The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">The request reached the server computer, but was not processed successfully.</exception>
        <exception cref="T:System.InvalidOperationException">The request was not valid for the object's current state.</exception>
        <exception cref="T:System.Net.WebException">An error occurred while accessing the network.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dynamically binds to an XML Web service described in the discovery document at &lt;xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An XML Web service client can dynamically bind to an XML Web service other than the one referenced in the proxy class using the Discover method. Typically, the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property refers to the base address of the XML Web service. However, before invoking the Discover method, set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to a URL of a discovery document. The Discover method attempts to find a match in the discovery document to the binding defined in the proxy class and then dynamically bind to it. If successful, subsequent method calls are directed to the XML Web service described in the discovery document.  
  
 If the proxy class is built using the Web Services Description Language tool (Wsdl.exe), the proxy class defines the binding implemented by the XML Web service methods it invokes using the <xref:System.Web.Services.WebServiceBindingAttribute>. When an XML Web service implements multiple bindings, Wsdl.exe creates a proxy class for each binding. Applied to each proxy class is a <xref:System.Web.Services.WebServiceBindingAttribute> that defines the name of the binding and its namespace. The discovery document you set the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to must contain a reference to an XML Web service that implements the same binding name and namespace, or an exception is thrown.  
  
   
  
## Examples  
 The following code example is a proxy class generated using the Wsdl.exe utility for the `Math` XML Web service. A <xref:System.Web.Services.WebServiceBindingAttribute> is applied to the `Math` proxy class setting the binding name to `MathSoap` and its namespace to `http://tempuri.org/`.  
  
 [!code-cs[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_8_1.cs)]
 [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_8_1.cpp)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_1.vb)]  
  
 The following code example is a Web Service client using the preceding proxy class. Within the `EnterBtn_Click` event of the Web Form, the XML Web service client calls the Discover method attempting to dynamically bind to the URL supplied by the user.  
  
> [!IMPORTANT]
>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-cs[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/csharp/m-system.web.services.pr_8_2.aspx)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_2.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">The proxy class does not have a binding defined.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">The &lt;xref:System.IAsyncResult&gt; returned from the &lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt; method.</param>
        <summary>Ends an asynchronous invocation of an XML Web service method using SOAP.</summary>
        <returns>An array of objects that contains the return value and any by-reference or <see langword="out" /> parameters of the derived class method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you would not call the EndInvoke method directly, unless you were building your own proxy class for an XML Web service.  
  
 A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class for calling the XML Web service methods synchronously. For calling the XML Web service methods asynchronously, two additional methods are added to the proxy class for each XML Web service method, one with the `Begin` prefix added to the name of the XML Web service method and one with the `End` prefix added.  
  
 The proxy class calls the EndInvoke method to complete an asynchronous invocation call to the XML Web service method. For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class contains a method named `EndAdd`, for completing an asynchronous invocation of an XML Web service method. Within the code for the `EndAdd` a call is made to the EndInvoke method and then the results are placed into the expected return type for `Add`.  
  
   
  
## Examples  
 The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `EndAdd` method of the proxy class, the EndInvoke method completes the asynchronous invocation to the `Add` XML Web service method.  
  
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/d0f11dd9-cadb-4640-91aa-_1.vb)]
 [!code-cs[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/d0f11dd9-cadb-4640-91aa-_1.cs)]
 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/cpp/d0f11dd9-cadb-4640-91aa-_1.cpp)]  
  
 The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> is not the return value from the &lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt; method.</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">The request reached the server computer, but was not processed successfully.</exception>
        <exception cref="T:System.InvalidOperationException">The request was not valid for the object's current state.</exception>
        <exception cref="T:System.Net.WebException">An error occurred while accessing the network.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">A <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> that provides the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream%2A&gt; to initialize the &lt;xref:System.Xml.XmlReader&gt;.</param>
        <param name="bufferSize">The initial buffer size of the &lt;xref:System.IO.StreamReader&gt; used by the &lt;xref:System.Xml.XmlReader&gt;.</param>
        <summary>Returns an &lt;xref:System.Xml.XmlReader&gt; initialized with the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream%2A&gt; property of the <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> parameter.</summary>
        <returns>A &lt;xref:System.Xml.XmlReader&gt; initialized with the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream%2A&gt; property of the <paramref name="message" /> parameter.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">The &lt;xref:System.Uri&gt; to use when creating the &lt;xref:System.Net.WebRequest&gt;.</param>
        <summary>Creates a &lt;xref:System.Net.WebRequest&gt; for the specified <paramref name="uri" />.</summary>
        <returns>The &lt;xref:System.Net.WebRequest&gt; for the specified URI.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be overridden to customize the <xref:System.Net.WebRequest> before the XML Web service request is made. For example, you could add a custom header to the request.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <paramref name="uri" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">A <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> that provides the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream%2A&gt; to initialize the &lt;xref:System.Xml.XmlWriter&gt;.</param>
        <param name="bufferSize">The initial buffer size of the &lt;xref:System.IO.StreamWriter&gt; used by the &lt;xref:System.Xml.XmlWriter&gt;.</param>
        <summary>Returns a &lt;xref:System.Xml.XmlWriter&gt; initialized with the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream%2A&gt; property of the <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> parameter.</summary>
        <returns>A &lt;xref:System.Xml.XmlWriter&gt; initialized with the &lt;xref:System.Web.Services.Protocols.SoapMessage.Stream%2A&gt; property of the <paramref name="message" /> parameter.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string methodName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string methodName, object[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the XML Web service method.</param>
        <param name="parameters">An array of objects that contains the parameters to pass to the XML Web service. The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class.</param>
        <summary>Invokes an XML Web service method synchronously using SOAP.</summary>
        <returns>An array of objects that contains the return value and any <see langword="reference" /> or <see langword="out" /> parameters of the derived class method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you do not call the Invoke method directly, unless you are building your own proxy class for an XML Web service.  
  
 A proxy class generated by the Web Services Description Language tool (Wsdl.exe) for an XML Web service exposes the XML Web service methods as names off of the proxy class. The proxy class calls the Invoke method to invoke an XML Web service method call. For example, if an XML Web service exposes an XML Web service method named `Add`, the proxy class also contains a method named `Add`. Within the code for the `Add` method in the proxy class, a synchronous call is made to the XML Web service method through the Invoke method and then the results are placed into the expected return type for `Add`.  
  
 The `methodName` parameter is used to find the custom attributes that may have been added to the method, such as <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> provides additional information on the derived method which is required for the SOAP protocol.  
  
   
  
## Examples  
 The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `Add` method of the proxy class, the Invoke method is calling the `Add` XML Web service method.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/0fe8d4bc-686d-467a-8cdd-_1.cpp)]
 [!code-cs[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/0fe8d4bc-686d-467a-8cdd-_1.cs)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/0fe8d4bc-686d-467a-8cdd-_1.vb)]  
  
 The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">The request reached the server computer, but was not processed successfully.</exception>
        <exception cref="T:System.InvalidOperationException">The request was not valid for the object's current state.</exception>
        <exception cref="T:System.Net.WebException">An error occurred while accessing the network.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the method to invoke.</param>
        <param name="parameters">The parameters to pass to the method.</param>
        <param name="callback">The delegate called when the method invocation has completed.</param>
        <summary>Invokes the specified method asynchronously.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the method to invoke.</param>
        <param name="parameters">The parameters to pass to the method.</param>
        <param name="callback">The delegate called when the method invocation has completed.</param>
        <param name="userState">An object used to pass state information into the `callback` delegate.</param>
        <summary>Invokes the specified method asynchronously.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the version of the SOAP protocol used to make the SOAP request to the XML Web service.</summary>
        <value>One of the <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /> values. The default is <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SoapVersion property is set in the proxy class generated by the Web Services Description Language tool (Wsdl.exe) to <xref:System.Web.Services.Protocols.SoapProtocolVersion> by default when a WSDL document for an XML Web service supports SOAP version 1.1. However, when an XML Web service only supports SOAP 1.2, Wsdl.exe sets the SoapVersion property to <xref:System.Web.Services.Protocols.SoapProtocolVersion>. To choose the version of the SOAP protocol when generating the proxy class with Wsdl.exe, use the `/protocol` switch with the `SOAP` or `SOAP12` settings to set the SoapVersion property to <xref:System.Web.Services.Protocols.SoapProtocolVersion> and <xref:System.Web.Services.Protocols.SoapProtocolVersion>, respectively.  
  
   
  
## Examples  
 The following code example sets the version of the protocol used to communicate with an XML Web service to SOAP 1.2.  
  
 [!code-cs[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/csharp/p-system.web.services.pr_20_1.aspx)]
 [!code-vb[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_20_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>