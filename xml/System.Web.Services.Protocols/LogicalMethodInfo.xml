<Type Name="LogicalMethodInfo" FullName="System.Web.Services.Protocols.LogicalMethodInfo">
  <TypeSignature Language="C#" Value="public sealed class LogicalMethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogicalMethodInfo extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the attributes and metadata for an XML Web service method. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 LogicalMethodInfo is used primarily by a SOAP extension to interrogate the details of the XML Web service method with which the SOAP extension is configured to run. Depending on how the SOAP extension is configured, it can find out details about the XML Web service method in the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> method of <xref:System.Web.Services.Protocols.SoapExtension> that takes a LogicalMethodInfo. The LogicalMethodInfo provides details such as the XML Web service method's parameters by accessing the <xref:System.Web.Services.Protocols.LogicalMethodInfo.Parameters%2A> property and any custom attributes applied to the XML Web service method using the <xref:System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes%2A> property.  
  
 For more details on SOAP extensions see the <xref:System.Web.Services.Protocols.SoapExtension> class or [&#91;\<topic://cpconAlteringSOAPMessageUsingSOAPExtensions>&#93;](http://msdn.microsoft.com/en-us/97d81ace-95e7-4acc-ae39-9692a0021e95).  
  
   
  
## Examples  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogicalMethodInfo (System.Reflection.MethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo methodInfo) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfo">A &lt;xref:System.Reflection.MethodInfo&gt; to initialize the properties of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> common to the &lt;xref:System.Reflection.MethodInfo&gt;.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> class with the &lt;xref:System.Reflection.MethodInfo&gt; passed in.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/33539594-3d11-433f-bfe7-_1.cs)]
 [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/33539594-3d11-433f-bfe7-_1.cpp)]
 [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/33539594-3d11-433f-bfe7-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Reflection.MethodBase.IsStatic%2A?displayProperty=fullName&gt; property of the <paramref name="methodInfo" /> parameter is <see langword="true" />.  
  
 -or-  
  
 The &lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName&gt; method of the <paramref name="methodInfo" /> parameter does not contain all the parameters required by the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsyncCallbackParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo AsyncCallbackParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo AsyncCallbackParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameter information for the <paramref name="AsyncCallback" /> parameter of a Begin method in an asynchronous invocation.</summary>
        <value>A &lt;xref:System.Reflection.ParameterInfo&gt; representing the <paramref name="AsyncCallback" /> parameter of a <see langword="Begin" /> asynchronous method invocation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The asynchronous design pattern in the common language runtime involves calling a `Begin` method to start the asynchronous method invocation and an `End` method to complete the invocation. The `Begin` method takes two additional parameters besides the parameters defined by the synchronous version of the method: one to store a delegate and one to store any state information that needs to be passed on to the delegate. This property represents the parameter for the delegate with a parameter name of `AsyncCallback`.  
  
 For more information on invoking XML Web services asynchronously, see [&#91;\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).  
  
   
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_64_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_64_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_64_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsyncResultParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo AsyncResultParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo AsyncResultParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the return value of a <see langword="Begin" /> asynchronous method invocation.</summary>
        <value>A &lt;xref:System.Reflection.ParameterInfo&gt; representing the &lt;xref:System.IAsyncResult&gt; returned from a <see langword="Begin" /> asynchronous method invocation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The asynchronous design pattern in the common language runtime involves calling a `Begin` method to start the asynchronous method invocation and an `End` method to complete the invocation. The `Begin` method typically returns immediately with an object implementing the <xref:System.IAsyncResult> interface, which can then be passed to the `End` method at a later time to complete the asynchronous method invocation. The returned object implementing the <xref:System.IAsyncResult> interface is represented by this property.  
  
 For more information on invoking XML Web services asynchronously, see [&#91;\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).  
  
   
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_38_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_38_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_38_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AsyncStateParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo AsyncStateParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo AsyncStateParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameter information for the <paramref name="AsyncState" /> parameter of a <see langword="Begin" /> method in an asynchronous invocation.</summary>
        <value>A &lt;xref:System.Reflection.ParameterInfo&gt; representing the <paramref name="AsyncState" /> parameter of a <see langword="Begin" /> method in an asynchronous invocation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The asynchronous design pattern in the common language runtime involves calling a `Begin` method to start the asynchronous method invocation and an `End` method to complete the invocation. The `Begin` method takes two additional parameters besides the parameters defined by the synchronous version of the method: one to store a delegate and one to store any state information that needs to be passed on to the delegate. This property represents the state information that needs to be passed into the delegate.  
  
 For more information on invoking XML Web services asynchronously, see [&#91;\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).  
  
   
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_25_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_25_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_25_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (object target, object[] values, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(object target, object[] values, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="values" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target">The instance of the &lt;xref:System.Object&gt; on which to invoke the method on.</param>
        <param name="values">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, `values` should be <see langword="null" />.</param>
        <param name="callback">The delegate to call when the asynchronous invoke is complete. If `callback` is <see langword="null" />, the delegate is not called.</param>
        <param name="asyncState">State information that is passed on to the delegate.</param>
        <summary>Begins an asynchronous invocation of the method represented by this <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; which is passed to &lt;xref:System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke%2A&gt; to obtain the return values from the remote method call.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_BeginInvoke#1](~/add/codesnippet/csharp/4cf5df3f-128a-4f09-9f34-_1.cs)]
 [!code-vb[LogicalMethodInfo_BeginInvoke#1](~/add/codesnippet/visualbasic/4cf5df3f-128a-4f09-9f34-_1.vb)]
 [!code-cpp[LogicalMethodInfo_BeginInvoke#1](~/add/codesnippet/cpp/4cf5df3f-128a-4f09-9f34-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameteris <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The number, type, and order of parameters in <paramref name="values" /> do not match the signature of the invoked method.</exception>
        <exception cref="T:System.MemberAccessException">The caller does not have permission to invoke the method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginMethodInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo BeginMethodInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo BeginMethodInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the attributes and metadata for a <see langword="Begin" /> method in an asynchronous invocation.</summary>
        <value>A &lt;xref:System.Reflection.MethodInfo&gt; representing the attributes and metadata for a <see langword="Begin" /> asynchronous method invocation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_4_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_4_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] methodInfos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Services.Protocols.LogicalMethodInfo[] Create(class System.Reflection.MethodInfo[] methodInfos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.LogicalMethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfos" Type="System.Reflection.MethodInfo[]" />
      </Parameters>
      <Docs>
        <param name="methodInfos">An array of &lt;xref:System.Reflection.MethodInfo&gt; representing the asynchronous and synchronous methods for which to create <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> objects.</param>
        <summary>Given an array of &lt;xref:System.Reflection.MethodInfo&gt; that can contain information about both asynchronous and synchronous methods, creates an array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</summary>
        <returns>An array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />, representing the methods within <paramref name="methodInfos" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/c29165ab-1342-4efc-b959-_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/c29165ab-1342-4efc-b959-_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/c29165ab-1342-4efc-b959-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A <see langword="Begin" /> asynchronous method is included in <paramref name="methodInfos" /> without a corresponding <see langword="End" /> method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] methodInfos, System.Web.Services.Protocols.LogicalMethodTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Services.Protocols.LogicalMethodInfo[] Create(class System.Reflection.MethodInfo[] methodInfos, valuetype System.Web.Services.Protocols.LogicalMethodTypes types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.LogicalMethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfos" Type="System.Reflection.MethodInfo[]" />
        <Parameter Name="types" Type="System.Web.Services.Protocols.LogicalMethodTypes" />
      </Parameters>
      <Docs>
        <param name="methodInfos">An array of &lt;xref:System.Reflection.MethodInfo&gt; representing the asynchronous and synchronous methods for which to create <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> objects.</param>
        <param name="types">A bitwise combination of the <see cref="T:System.Web.Services.Protocols.LogicalMethodTypes" /> values. Determines whether just asynchronous or synchronous methods or both are included in the returned array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</param>
        <summary>Given an array of &lt;xref:System.Reflection.MethodInfo&gt;, where the returned array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> can be restricted to only asynchronous or synchronous methods, creates an array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</summary>
        <returns>An array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />, representing the methods within <paramref name="methodInfos" />, filtered by the value of <paramref name="types" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/dac222c9-9fa0-4192-889b-_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/dac222c9-9fa0-4192-889b-_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/dac222c9-9fa0-4192-889b-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A <see langword="Begin" /> asynchronous method is included in <paramref name="methodInfos" /> without a corresponding <see langword="End" /> method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CustomAttributeProvider">
      <MemberSignature Language="C#" Value="public System.Reflection.ICustomAttributeProvider CustomAttributeProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider CustomAttributeProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the custom attributes applied to the method.</summary>
        <value>An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes for the method.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/cpp/p-system.web.services.pr_8_1.cpp)]
 [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/csharp/p-system.web.services.pr_8_1.cs)]
 [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/visualbasic/p-system.web.services.pr_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the class that declares the method represented by the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</summary>
        <value>The &lt;xref:System.Type&gt; for the class declaring the method represented by the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DeclaringType property retrieves a reference to a <xref:System.Type> for the type that declares this member. A member of a class (or interface) is either declared or inherited from a base class (or interface). The returned <xref:System.Type> might not be the same as the <xref:System.Type> of the class implementing the XML Web service (if that class derives from a base class and the method represented by this class is declared in that base class then the <xref:System.Type> returned is the base class).  
  
   
  
## Examples  
 [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/p-system.web.services.pr_39_1.cs)]
 [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/p-system.web.services.pr_39_1.cpp)]
 [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_39_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object[] EndInvoke (object target, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object[] EndInvoke(object target, class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="target">The instance of the &lt;xref:System.Object&gt; on which to invoke the method.</param>
        <param name="asyncResult">The &lt;xref:System.IAsyncResult&gt; returned from &lt;xref:System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke%2A&gt;.</param>
        <summary>Ends an asynchronous invocation of the method represented by the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</summary>
        <returns>An array of objects containing the return value and any by-reference or out parameters of the derived class method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_BeginInvoke#2](~/add/codesnippet/csharp/70bfcc96-3c47-4d4f-af27-_1.cs)]
 [!code-vb[LogicalMethodInfo_BeginInvoke#2](~/add/codesnippet/visualbasic/70bfcc96-3c47-4d4f-af27-_1.vb)]
 [!code-cpp[LogicalMethodInfo_BeginInvoke#2](~/add/codesnippet/cpp/70bfcc96-3c47-4d4f-af27-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.MemberAccessException">The caller does not have permission to invoke the method.</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">The invoked method throws an exception.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndMethodInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo EndMethodInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo EndMethodInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the attributes and metadata for an <see langword="End" /> method of an asynchronous invocation to a method.</summary>
        <value>A &lt;xref:System.Reflection.MethodInfo&gt; representing the attributes and metadata for an <see langword="End" /> asynchronous method invocation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_80_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_80_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_80_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public object GetCustomAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetCustomAttribute(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; to which the custom attributes are applied.</param>
        <summary>Returns the first custom attribute applied to the type, if any custom attributes are applied to the type.</summary>
        <returns>An &lt;xref:System.Object&gt; containing the first custom attribute applied to the <paramref name="type" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/cpp/639f3695-7f4e-41fe-bc5d-_1.cpp)]
 [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/csharp/639f3695-7f4e-41fe-bc5d-_1.cs)]
 [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/visualbasic/639f3695-7f4e-41fe-bc5d-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">The custom attribute type can not be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object[] GetCustomAttributes(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; to which the custom attributes are applied.</param>
        <summary>Returns the custom attributes applied to the specified type.</summary>
        <returns>An array of &lt;xref:System.Object&gt; containing the custom attributes applied to <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/cpp/c01360a6-e025-410b-ab18-_1.cpp)]
 [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/csharp/c01360a6-e025-410b-ab18-_1.cs)]
 [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/visualbasic/c01360a6-e025-410b-ab18-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">The custom attribute type can not be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo[] InParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo[] InParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters passed into the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</summary>
        <value>An array of type &lt;xref:System.Reflection.ParameterInfo&gt; containing the parameters passed into the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use an instance of <xref:System.Reflection.ParameterInfo> to obtain information about the parameter's data type, default value, and so on.  
  
 InParameters returns an array of <xref:System.Reflection.ParameterInfo> objects representing the parameters passed into a method, in order.  
  
   
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/p-system.web.services.pr_55_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/p-system.web.services.pr_55_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_55_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object[] Invoke (object target, object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object[] Invoke(object target, object[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="values" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="target">The instance of the &lt;xref:System.Object&gt; to invoke the method.</param>
        <param name="values">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, the `values` parameter should be <see langword="null" />.</param>
        <summary>Invokes the method represented by the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</summary>
        <returns>An array of type &lt;xref:System.Object&gt; representing the return value and out parameters of the invoked method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/5ef48647-93c7-4c46-8d10-_1.cs)]
 [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/5ef48647-93c7-4c46-8d10-_1.cpp)]
 [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/5ef48647-93c7-4c46-8d10-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The number, type, and order of parameters in the <paramref name="values" /> parameter do not match the signature of the invoked method.</exception>
        <exception cref="T:System.MemberAccessException">The caller does not have permission to invoke the method.</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">The invoked method throws an exception.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public bool IsAsync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> is invoked asynchronously.</summary>
        <value>
          <see langword="true" /> if the method is invoked asynchronously; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_31_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_31_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_31_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsBeginMethod">
      <MemberSignature Language="C#" Value="public static bool IsBeginMethod (System.Reflection.MethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsBeginMethod(class System.Reflection.MethodInfo methodInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfo">The &lt;xref:System.Reflection.MethodInfo&gt; that might be a <see langword="Begin" /> method of an asynchronous invocation.</param>
        <summary>Returns a value indicating whether the method passed in represents a <see langword="Begin" /> method of an asynchronous invocation.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="methodInfo" /> parameter is a <see langword="Begin" /> method of an asynchronous invocation; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[LogicalMethodInfo_IsBeginMethod#1](~/add/codesnippet/cpp/16aef9c9-6974-4ce7-8b1a-_1.cpp)]
 [!code-cs[LogicalMethodInfo_IsBeginMethod#1](~/add/codesnippet/csharp/16aef9c9-6974-4ce7-8b1a-_1.cs)]
 [!code-vb[LogicalMethodInfo_IsBeginMethod#1](~/add/codesnippet/visualbasic/16aef9c9-6974-4ce7-8b1a-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEndMethod">
      <MemberSignature Language="C#" Value="public static bool IsEndMethod (System.Reflection.MethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEndMethod(class System.Reflection.MethodInfo methodInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfo">The &lt;xref:System.Reflection.MethodInfo&gt; that might be an <see langword="End" /> method of an asynchronous invocation.</param>
        <summary>Returns a value indicating whether the method passed in represents an <see langword="End" /> method of an asynchronous invocation.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="methodInfo" /> parameter is an <see langword="End" /> method of an asynchronous invocation; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[LogicalMethodInfo_IsBeginMethod#2](~/add/codesnippet/cpp/0b6247ff-723e-4877-83bb-_1.cpp)]
 [!code-cs[LogicalMethodInfo_IsBeginMethod#2](~/add/codesnippet/csharp/0b6247ff-723e-4877-83bb-_1.cs)]
 [!code-vb[LogicalMethodInfo_IsBeginMethod#2](~/add/codesnippet/visualbasic/0b6247ff-723e-4877-83bb-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsVoid">
      <MemberSignature Language="C#" Value="public bool IsVoid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVoid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the return type for the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> is <see langword="void" />.</summary>
        <value>
          <see langword="true" /> if the return type is void; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/p-system.web.services.pr_46_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/p-system.web.services.pr_46_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_46_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MethodInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo MethodInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo MethodInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the attributes and metadata for a synchronous method.</summary>
        <value>A &lt;xref:System.Reflection.MethodInfo&gt; representing the attributes and metadata for a method. If &lt;xref:System.Web.Services.Protocols.LogicalMethodInfo.IsAsync%2A&gt; is <see langword="true" />, then the value of this property is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[LogicalMethodInfo_GetCustomAttribute#3](~/add/codesnippet/cpp/p-system.web.services.pr_13_1.cpp)]
 [!code-cs[LogicalMethodInfo_GetCustomAttribute#3](~/add/codesnippet/csharp/p-system.web.services.pr_13_1.cs)]
 [!code-vb[LogicalMethodInfo_GetCustomAttribute#3](~/add/codesnippet/visualbasic/p-system.web.services.pr_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the method represented by this <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</summary>
        <value>The name of the method represented by this <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/p-system.web.services.pr_63_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/p-system.web.services.pr_63_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_63_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OutParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo[] OutParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo[] OutParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the out parameters for the method.</summary>
        <value>An array of &lt;xref:System.Reflection.ParameterInfo&gt; representing the out parameters for the method, in order.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use a <xref:System.Reflection.ParameterInfo> to obtain information about the parameter's data type, default value, and so on.  
  
   
  
## Examples  
 [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/p-system.web.services.pr_70_1.cs)]
 [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/p-system.web.services.pr_70_1.cpp)]
 [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_70_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo[] Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo[] Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parameters for the method.</summary>
        <value>An array of &lt;xref:System.Reflection.ParameterInfo&gt; representing the parameters for the method.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use a <xref:System.Reflection.ParameterInfo> to obtain information about the parameter's data type, default value, and so on.  
  
 Parameters returns an array of <xref:System.Reflection.ParameterInfo> objects representing the parameters passed into a method, in order.  
  
   
  
## Examples  
 [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/p-system.web.services.pr_7_1.cs)]
 [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/p-system.web.services.pr_7_1.cpp)]
 [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the return type of this method.</summary>
        <value>The &lt;xref:System.Type&gt; returned by this method.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/p-system.web.services.pr_21_1.cs)]
 [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/p-system.web.services.pr_21_1.cpp)]
 [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_21_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributeProvider">
      <MemberSignature Language="C#" Value="public System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributeProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributeProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the custom attributes for the return type.</summary>
        <value>An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes for the return type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/cpp/8b875f48-e18d-4d82-9d82-_1.cpp)]
 [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/csharp/8b875f48-e18d-4d82-9d82-_1.cs)]
 [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/visualbasic/8b875f48-e18d-4d82-9d82-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</summary>
        <returns>A &lt;xref:System.String&gt; that represents the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/m-system.web.services.pr_5_1.cs)]
 [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/m-system.web.services.pr_5_1.cpp)]
 [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>