<Type Name="UrlEncodedParameterWriter" FullName="System.Web.Services.Protocols.UrlEncodedParameterWriter">
  <TypeSignature Language="C#" Value="public abstract class UrlEncodedParameterWriter : System.Web.Services.Protocols.MimeParameterWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UrlEncodedParameterWriter extends System.Web.Services.Protocols.MimeParameterWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.MimeParameterWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides URL encoding functionality for writers of out-going request parameters for Web service clients implemented using HTTP but without SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 UrlEncodedParameterWriter and other classes in the <xref:System.Web.Services.Protocols> namespace support the .NET Framework's implementations of Web services via the HTTP-GET and HTTP-POST operations. Web service writers and readers serialize and deserialize, respectively, between the parameters or return objects of Web methods and the HTTP request or response streams. Web service writers and readers use HTTP for transport but don't exchange messages using the SOAP standard.  
  
 The abstract UrlEncodedParameterWriter class inherits from the abstract <xref:System.Web.Services.Protocols.MimeParameterWriter> class, adding URL encoding functionality for client-side writing of Web method parameters into HTTP request streams.  
  
 You typically will not need to use UrlEncodedParameterWriter or its descendant classes directly. Instead, when the Wsdl.exe tool generates client proxy code according to the HTTP-GET or HTTP-POST implementations, it applies the <xref:System.Web.Services.Protocols.HttpMethodAttribute> to each Web method and sets the attribute's <xref:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter%2A> property to the appropriate type.  
  
> [!NOTE]
>  The Hypertext Transfer Protocol--HTTP/1.1 specifies the use of a variation on Multipurpose Internet Mail Extensions (MIME) message format, which itself allows e-mail messages to specify different content types, both text and binary.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UrlEncodedParameterWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.UrlEncodedParameterWriter" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="protected void Encode (System.IO.TextWriter writer, object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Encode(class System.IO.TextWriter writer, object[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="values" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="writer">A &lt;xref:System.IO.TextWriter&gt; object that does the writing to the HTTP request.</param>
        <param name="values">The Web method parameter values.</param>
        <summary>Encodes all the parameter values for a Web method and writes them to the specified writer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This overload of the Encode method calls the other overload, <xref:System.Web.Services.Protocols.UrlEncodedParameterWriter.Encode%2A>, for each of the parameter values, including individual items in arrays.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="protected void Encode (System.IO.TextWriter writer, string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Encode(class System.IO.TextWriter writer, string name, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">A &lt;xref:System.IO.TextWriter&gt; object that does the writing to the HTTP request.</param>
        <param name="name">The name of the parameter that will be encoded.</param>
        <param name="value">The value of the parameter that will be encoded.</param>
        <summary>Encodes a specified parameter value and writes it to the specified writer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The other signature of the Encode method, <xref:System.Web.Services.Protocols.UrlEncodedParameterWriter.Encode%2A>, which is called for each Web method, calls this signature of the Encode method for each of the parameter values, including individual items in arrays.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public override object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> that specifies the Web method for which the initializer is obtained.</param>
        <summary>Returns an initializer for the specified method.</summary>
        <returns>An &lt;xref:System.Object&gt; that contains the initializer for the specified method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An initializer is an object passed as a parameter to the <xref:System.Web.Services.Protocols.UrlEncodedParameterWriter.Initialize%2A> method. For the <xref:System.Web.Services.Protocols.UrlEncodedParameterWriter> class, the initializer is the value of the <xref:System.Web.Services.Protocols.LogicalMethodInfo.InParameters%2A> property of the input <xref:System.Web.Services.Protocols.LogicalMethodInfo> object. The property is a <xref:System.Reflection.ParameterInfo> array.The GetInitializer method is invoked during service initialization. Later, at the time a request is populated, the initializer object is passed to the <xref:System.Web.Services.Protocols.UrlEncodedParameterWriter.Initialize%2A> method of another <xref:System.Web.Services.Protocols.UrlEncodedParameterWriter> instance. The other object performs the actual writing.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(object initializer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer">A &lt;xref:System.Reflection.ParameterInfo&gt; array obtained through the &lt;xref:System.Web.Services.Protocols.LogicalMethodInfo.InParameters%2A&gt; property of the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> class.</param>
        <summary>Initializes an instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Initialize method is invoked at the time a request is populated.  
  
 The input parameter, `initializer`, is obtained by calling the <xref:System.Web.Services.Protocols.UrlEncodedParameterWriter.GetInitializer%2A> method on another instance during client initialization.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RequestEncoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding RequestEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding RequestEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the encoding used to write parameters to the HTTP request.</summary>
        <value>The encoding used to write parameters to the HTTP request.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An encoding, as represented by the <xref:System.Text.Encoding> class, defines how to transform characters into a sequence of bytes.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>