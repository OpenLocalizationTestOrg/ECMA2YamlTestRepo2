<Type Name="DispatcherOperationCallback" FullName="System.Windows.Threading.DispatcherOperationCallback">
  <TypeSignature Language="C#" Value="public delegate object DispatcherOperationCallback(object arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DispatcherOperationCallback extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="arg">An argument passed to the callback.</param>
    <summary>Represents a delegate to use for dispatcher operations.</summary>
    <returns>The object returned by the callback.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 It is not necessary to use this delegate for dispatcher operations, but DispatcherOperationCallback and <xref:System.Threading.SendOrPostCallback> use dynamic invoking.  
  
 Partial Trust applications do not support dynamic invoking, so you must use either DispatcherOperationCallback or <xref:System.Threading.SendOrPostCallback> if the application is going to be running in Partial Trust.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
</Type>