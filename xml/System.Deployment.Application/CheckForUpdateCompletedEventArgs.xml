<Type Name="CheckForUpdateCompletedEventArgs" FullName="System.Deployment.Application.CheckForUpdateCompletedEventArgs">
  <TypeSignature Language="C#" Value="public class CheckForUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CheckForUpdateCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Deployment</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.AsyncCompletedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents detailed update information obtained through a call to &lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt;.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 With CheckForUpdateCompletedEventArgs, you can decide whether to upgrade your ClickOnce application based on information about the newest version. <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateAvailable%2A> will return a Boolean value indicating whether there is a new update at all. The <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs.AvailableVersion%2A> property provides the version number of the new version, while <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs.MinimumRequiredVersion%2A> provides the earliest version that the user should have installed on the computer. <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs.IsUpdateRequired%2A> expresses whether the latest available update is required of the user. Finally, <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateSizeBytes%2A> expresses the total size of the update.  
  
   
  
## Examples  
 The following code example uses <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateAvailable%2A> to determine if there is a new application update, and <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs.IsUpdateRequired%2A> to determine whether to ask the user to install the update.  
  
 [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]
 [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/t-system.deployment.appl_1_1.cpp)]
 [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="AvailableVersion">
      <MemberSignature Language="C#" Value="public Version AvailableVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version AvailableVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the version number of the latest uninstalled version.</summary>
        <value>The &lt;xref:System.Version&gt; expressing the major, minor, build and revision numbers of the latest version.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use AvailableVersion to decide whether to install the update based on the severity of the update. For example, if only the <xref:System.Version.Build%2A> or <xref:System.Version.Revision%2A> version properties have changed, your application may not need to update until either the <xref:System.Version.Minor%2A> or <xref:System.Version.Major%2A> properties change.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsUpdateRequired">
      <MemberSignature Language="C#" Value="public bool IsUpdateRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUpdateRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the update must be installed.</summary>
        <value>
          <see langword="true" /> if the update is required; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you deploy an update to your ClickOnce application, you can mark it as a required update, signaling to your application that it should upgrade immediately. You want mark the update if the latest version contains a critical update, or if it is incompatible with file formats or back-end data sources used by the former version.  
  
   
  
## Examples  
 The following code example uses IsUpdateRequired to determine whether to ask the user to install the update, or to install it without prompting.  
  
 [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]
 [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/2aa4f4df-e487-4c83-87b0-_1.cpp)]
 [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinimumRequiredVersion">
      <MemberSignature Language="C#" Value="public Version MinimumRequiredVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version MinimumRequiredVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minimum version that the user must have installed on the computer.</summary>
        <value>A &lt;xref:System.Version&gt; object expressing the earliest version that all users must install.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Applications can miss required updates when a user takes on a special assignment or is away from the computer for weeks or months. Use  
  
 MinimumRequiredVersion to determine if the user has not upgraded the application in a while, and has missed one or more required updates.  
  
   
  
## Examples  
 The following code example calls <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A>, and forces an application update if MinimumRequiredVersion is greater than <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A>.  
  
 [!code-cs[ClickOnceAPI#10](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#10)]
 [!code-vb[ClickOnceAPI#10](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateAvailable">
      <MemberSignature Language="C#" Value="public bool UpdateAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UpdateAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether an uninstalled update is available.</summary>
        <value>
          <see langword="true" /> if new version of the application is available; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example inspects UpdateAvailable to determine whether or not there is an update to install.  
  
 [!code-cs[ClickOnceAPI#1](~/add/codesnippet/csharp/ClickOnceAPI/Form1.cs#1)]
 [!code-cpp[ClickOnceAPI#1](~/add/codesnippet/cpp/847038a4-fd95-4e16-a133-_1.cpp)]
 [!code-vb[ClickOnceAPI#1](~/add/codesnippet/visualbasic/ClickOnceAPIVB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateSizeBytes">
      <MemberSignature Language="C#" Value="public long UpdateSizeBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UpdateSizeBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the size of the available update.</summary>
        <value>An &lt;xref:System.Int64&gt; describing the size, in bytes, of the available update. If no update is available, returns 0.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>