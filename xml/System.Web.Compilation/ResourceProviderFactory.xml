<Type Name="ResourceProviderFactory" FullName="System.Web.Compilation.ResourceProviderFactory">
  <TypeSignature Language="C#" Value="public abstract class ResourceProviderFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ResourceProviderFactory extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Serves as the base class for classes that create resource providers.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ResourceProviderFactory is an abstract class that serves as the base class for objects that return global and local resource providers. Classes must derive from ResourceProviderFactory to implement its functionality.  
  
   
  
## Examples  
 The following code example shows a customized resource provider factory that retrieves cached values.  
  
 [!code-vb[System.Web.Compilation.ResourceProviderFactory#2](~/add/codesnippet/visualbasic/t-system.web.compilation_1_1.vb)]
 [!code-cs[System.Web.Compilation.ResourceProviderFactory#2](~/add/codesnippet/csharp/t-system.web.compilation_1_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ResourceProviderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>When implemented in a derived class, initializes a new instance of the derived class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An instance of an abstract class cannot be created. Classes that derive from <xref:System.Web.Compilation.ResourceProviderFactory> can implement a constructor to set any default values.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateGlobalResourceProvider">
      <MemberSignature Language="C#" Value="public abstract System.Web.Compilation.IResourceProvider CreateGlobalResourceProvider (string classKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Compilation.IResourceProvider CreateGlobalResourceProvider(string classKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.IResourceProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="classKey">The name of the resource class.</param>
        <summary>When overridden in a derived class, creates a global resource provider.</summary>
        <returns>A global resource provider.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When overridden in a derived class, this method returns an <xref:System.Web.Compilation.IResourceProvider> object for the given `classKey` parameter. The method could be implemented such that `classKey` is the name of a .resx file in the App_GlobalResources folder.  
  
   
  
## Examples  
 The following code example shows a customized resource provider factory that implements the CreateGlobalResourceProvider method and retrieves cached values.  
  
 [!code-vb[System.Web.Compilation.ResourceProviderFactory#2](~/add/codesnippet/visualbasic/2c2222e5-6c36-4816-885f-_1.vb)]
 [!code-cs[System.Web.Compilation.ResourceProviderFactory#2](~/add/codesnippet/csharp/2c2222e5-6c36-4816-885f-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateLocalResourceProvider">
      <MemberSignature Language="C#" Value="public abstract System.Web.Compilation.IResourceProvider CreateLocalResourceProvider (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Compilation.IResourceProvider CreateLocalResourceProvider(string virtualPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.IResourceProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">The path to a resource file.</param>
        <summary>When overridden in a derived class, creates a local resource provider.</summary>
        <returns>A local resource provider.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When overridden in a derived class, this method returns an <xref:System.Web.Compilation.IResourceProvider> object for the given `virtualPath` parameter. The method could be implemented such that `virtualPath` maps to a resource file.  
  
   
  
## Examples  
 The following code example shows a customized resource provider factory that implements the CreateLocalResourceProvider method and retrieves cached values.  
  
 [!code-vb[System.Web.Compilation.ResourceProviderFactory#2](~/add/codesnippet/visualbasic/3178bbe9-ac76-4061-948d-_1.vb)]
 [!code-cs[System.Web.Compilation.ResourceProviderFactory#2](~/add/codesnippet/csharp/3178bbe9-ac76-4061-948d-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>