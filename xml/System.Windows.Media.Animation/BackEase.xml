<Type Name="BackEase" FullName="System.Windows.Media.Animation.BackEase">
  <TypeSignature Language="C#" Value="public class BackEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents an easing function that retracts the motion of an animation slightly before it begins to animate in the path indicated.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can control when the "back up" behavior occurs in an animation by specifying the <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> property value on an animation. The following graph demonstrate the different values of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, where *f*(*t*) represents the animation progress and *t* represents time.  
  
 ![BackEase EasingMode graphs.](~/add/media/backease-graph.png "BackEase EasingMode graphs.")  
  
 The formula used for this function is the following.  
  
 ![BackEase formula.](~/add/media/backease-formula.png "BackEase formula.")  
  
> [!NOTE]
>  Because this animation causes values to retract before progressing, the animation might interpolate into negative numbers unexpectedly. This can cause errors when animating properties that do not allow negative numbers. For example, if you apply this animation to the <xref:System.Windows.FrameworkElement.Height%2A> of an object (e.g. from 0 to 200 with an <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> of <xref:System.Windows.Media.Animation.EasingMode>), the animation will attempt to interpolate through negative numbers for <xref:System.Windows.FrameworkElement.Height%2A> which will throw an error.  
  
 There are several other easing functions besides BackEase which you can explore using the following Silverlight sample.  
  
 [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from <xref:System.Windows.Media.Animation.EasingFunctionBase>.  
  
<a name="xamlObjectElementUsage_BackEase"></a>   
## XAML Object Element Usage  
  
```  
<BackEase .../>  
```  
  
   
  
## Examples  
 The following example applies a BackEase easing function to a <xref:System.Windows.Media.Animation.DoubleAnimation> to create an animation that retracts slightly at the beginning and end of the animation.  
  
 [!code-xml[BackEase_scale#BackEase_scale](~/add/codesnippet/xaml/backease_scale/window1.xaml#backease_scale)]
 [!code-xml[BackEase_scale#BackEase_scale](~/add/codesnippet/xaml/t-system.windows.media.a_28_1.xaml)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BackEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.BackEase" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Amplitude">
      <MemberSignature Language="C#" Value="public double Amplitude { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Amplitude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the amplitude of retraction associated with a <see cref="T:System.Windows.Media.Animation.BackEase" /> animation.</summary>
        <value>The amplitude of retraction associated with a <see cref="T:System.Windows.Media.Animation.BackEase" /> animation. This value must be greater than or equal to 0.  
  
 The default value is 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.BackEase.AmplitudeProperty>  
  
 The larger the amplitude, the larger the retraction before and/or after the animation.  
  
 ![Demonstrates different aplitude values.](~/add/media/backease-amplitude.png "Demonstrates different aplitude values.")  
  
<a name="xamlAttributeUsage_Opacity"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ Amplitude="double" .../>  
```  
  
   
  
## Examples  
 The following example applies a <xref:System.Windows.Media.Animation.BackEase> easing function to a <xref:System.Windows.Media.Animation.DoubleAnimation> to create an animation that retracts slightly at the beginning and end of the animation.  
  
 [!code-xml[BackEase_scale#BackEase_scale](~/add/codesnippet/xaml/backease_scale/window1.xaml#backease_scale)]
 [!code-xml[BackEase_scale#BackEase_scale](~/add/codesnippet/xaml/p-system.windows.media.a_2_1.xaml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AmplitudeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AmplitudeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AmplitudeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Media.Animation.BackEase.Amplitude%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class. When creating a derived class, you must override this method.</summary>
        <returns>The new instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Animation classes inherit indirectly from <xref:System.Windows.Freezable>. Because of this, you need to override the CreateInstanceCore method to construct a custom animation object.  
  
   
  
## Examples  
 The following example shows a typical implementation of <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/visualbasic/freezablesample_visualbasic/freezablesample.vb#createinstancecoreexample)]
 [!code-cs[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/csharp/freezablesample_csharp/freezablesample.cs#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Normalized time (progress) of the animation.</param>
        <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="T:System.Windows.Media.Animation.EasingMode" /> mode of the custom easing function.</summary>
        <returns>A double that represents the transformed progress.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms `normalizedTime` for the <xref:System.Windows.Media.Animation.EasingMode> and <xref:System.Windows.Media.Animation.EasingMode> cases.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>