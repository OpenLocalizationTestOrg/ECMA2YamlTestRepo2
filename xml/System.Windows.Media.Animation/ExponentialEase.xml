<Type Name="ExponentialEase" FullName="System.Windows.Media.Animation.ExponentialEase">
  <TypeSignature Language="C#" Value="public class ExponentialEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExponentialEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using an exponential formula.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can control whether the animation accelerates, decelerates or both by specifying the <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. The following graph demonstrates the different values of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> where *f*(*t*) represents the animation progress and *t* represents time.  
  
 ![ExponentialEase graphs of different easingmodes.](~/add/media/exponentialease-graph.png "ExponentialEase graphs of different easingmodes.")  
  
 The formula used for this function is the following.  
  
 ![Mathematical formula for ExponentialEase](~/add/media/exponentialease-formula.png "Mathematical formula for ExponentialEase")  
  
 Using the formula above, the following graph illustrates the effect of several different values for the <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> property:  
  
 ![Exponential Ease for three Exponent values](~/add/media/expo-easeproperty.png "Exponential Ease for three Exponent values")  
  
 There are several other easing functions besides ExponentialEase which you can explore using the following Silverlight sample.  
  
 [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from <xref:System.Windows.Media.Animation.EasingFunctionBase>.  
  
<a name="xamlObjectElementUsage_ExponentialEase"></a>   
## XAML Object Element Usage  
  
```  
<ExponentialEase .../>  
```  
  
   
  
## Examples  
 The following example applies a ExponentialEase easing function to a <xref:System.Windows.Media.Animation.DoubleAnimation> to create a decelerating animation.  
  
 [!code-xml[ExponentialEase#ExponentialEase](~/add/codesnippet/xaml/exponentialease/window1.xaml#exponentialease)]
 [!code-xml[ExponentialEase#ExponentialEase](~/add/codesnippet/xaml/t-system.windows.media.a_12_1.xaml)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExponentialEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ExponentialEase" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class. When creating a derived class, you must override this method.</summary>
        <returns>The new instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Animation classes inherit indirectly from <xref:System.Windows.Freezable>. Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object.  
  
   
  
## Examples  
 The following example shows a typical implementation of <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/visualbasic/freezablesample_visualbasic/freezablesample.vb#createinstancecoreexample)]
 [!code-cs[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/csharp/freezablesample_csharp/freezablesample.cs#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Normalized time (progress) of the animation.</param>
        <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="T:System.Windows.Media.Animation.EasingMode" /> mode of the custom easing function.</summary>
        <returns>A double that represents the transformed progress.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms `normalizedTime` for the <xref:System.Windows.Media.Animation.EasingMode> and <xref:System.Windows.Media.Animation.EasingMode> cases.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Exponent">
      <MemberSignature Language="C#" Value="public double Exponent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Exponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the exponent used to determine the interpolation of the animation.</summary>
        <value>The exponent used to determine the interpolation of the animation. The default is 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty>  
  
 The formula used by <xref:System.Windows.Media.Animation.ExponentialEase> is the following.  
  
 ![Mathematical formula for ExponentialEase](~/add/media/exponentialease-formula.png "Mathematical formula for ExponentialEase")  
  
 Using the previous formula, the following graph illustrates the effect of several different values for the Exponent property:  
  
 ![Exponential Ease for three Exponent values](~/add/media/expo-easeproperty.png "Exponential Ease for three Exponent values")  
  
<a name="xamlAttributeUsage_Exponent"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ Exponent="double" .../>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExponentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ExponentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ExponentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>