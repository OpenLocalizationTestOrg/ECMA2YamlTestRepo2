<Type Name="IScrollInfo" FullName="System.Windows.Controls.Primitives.IScrollInfo">
  <TypeSignature Language="C#" Value="public interface IScrollInfo" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IScrollInfo" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Represents the main scrollable region inside a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IScrollInfo interface exposes access to methods that enable logical scrolling of child content as well as computing which child elements are visible. In addition, it defines properties used to define the scrollable region.  
  
 Logical scrolling enables scrolling to the next element in the logical tree. Physical scrolling, in contrast, scrolls content by a defined measurable increment in a specified direction. If you require physical scrolling instead of logical scrolling, wrap the host <xref:System.Windows.Controls.Panel> element in a <xref:System.Windows.Controls.ScrollViewer> and set the value of its <xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A> property to `false`.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CanHorizontallyScroll">
      <MemberSignature Language="C#" Value="public bool CanHorizontallyScroll { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHorizontallyScroll" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.</summary>
        <value>
          <see langword="true" /> if scrolling is possible; otherwise, <see langword="false" />. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to set the CanHorizontallyScroll property by using procedural code.  
  
 [!code-cs[IScrollInfoMethods#4](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#4)]
 [!code-vb[IScrollInfoMethods#4](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanVerticallyScroll">
      <MemberSignature Language="C#" Value="public bool CanVerticallyScroll { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanVerticallyScroll" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether scrolling on the vertical axis is possible.</summary>
        <value>
          <see langword="true" /> if scrolling is possible; otherwise, <see langword="false" />. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to set the CanVerticallyScroll property by using procedural code.  
  
 [!code-cs[IScrollInfoMethods#4](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#4)]
 [!code-vb[IScrollInfoMethods#4](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExtentHeight">
      <MemberSignature Language="C#" Value="public double ExtentHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ExtentHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the vertical size of the extent.</summary>
        <value>A &lt;xref:System.Double&gt; that represents, in device independent pixels, the vertical size of the extent.  
  
 This property has no default value.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExtentWidth">
      <MemberSignature Language="C#" Value="public double ExtentWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ExtentWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the horizontal size of the extent.</summary>
        <value>A &lt;xref:System.Double&gt; that represents, in device independent pixels, the horizontal size of the extent. This property has no default value.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HorizontalOffset">
      <MemberSignature Language="C#" Value="public double HorizontalOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 HorizontalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the horizontal offset of the scrolled content.</summary>
        <value>A &lt;xref:System.Double&gt; that represents, in device independent pixels, the horizontal offset. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valid values are between zero and the <xref:System.Windows.Controls.Primitives.IScrollInfo.ExtentWidth%2A> minus the <xref:System.Windows.Controls.Primitives.IScrollInfo.ViewportWidth%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineDown">
      <MemberSignature Language="C#" Value="public void LineDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LineDown() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls down within content by one logical unit.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineLeft">
      <MemberSignature Language="C#" Value="public void LineLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LineLeft() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls left within content by one logical unit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the LineLeft method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#6](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#6)]
 [!code-vb[IScrollInfoMethods#6](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#6)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineRight">
      <MemberSignature Language="C#" Value="public void LineRight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LineRight() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls right within content by one logical unit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the LineRight method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#5](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#5)]
 [!code-vb[IScrollInfoMethods#5](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineUp">
      <MemberSignature Language="C#" Value="public void LineUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LineUp() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls up within content by one logical unit.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MakeVisible">
      <MemberSignature Language="C#" Value="public System.Windows.Rect MakeVisible (System.Windows.Media.Visual visual, System.Windows.Rect rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Rect MakeVisible(class System.Windows.Media.Visual visual, valuetype System.Windows.Rect rectangle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
        <Parameter Name="rectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="visual">A <see cref="T:System.Windows.Media.Visual" /> that becomes visible.</param>
        <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
        <summary>Forces content to scroll until the coordinate space of a <see cref="T:System.Windows.Media.Visual" /> object is visible.</summary>
        <returns>A <see cref="T:System.Windows.Rect" /> that is visible.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In most cases, the returned rectangle is a transformed version of the input rectangle. In some cases, such as when the input rectangle cannot fit entirely within the viewport, the return value may be smaller.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseWheelDown">
      <MemberSignature Language="C#" Value="public void MouseWheelDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MouseWheelDown() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls down within content after a user clicks the wheel button on a mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following example shows how to use the MouseWheelDown method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#11](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#11)]
 [!code-vb[IScrollInfoMethods#11](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseWheelLeft">
      <MemberSignature Language="C#" Value="public void MouseWheelLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MouseWheelLeft() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls left within content after a user clicks the wheel button on a mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the MouseWheelLeft method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#13](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#13)]
 [!code-vb[IScrollInfoMethods#13](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#13)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseWheelRight">
      <MemberSignature Language="C#" Value="public void MouseWheelRight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MouseWheelRight() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls right within content after a user clicks the wheel button on a mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the MouseWheelRight method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#14](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#14)]
 [!code-vb[IScrollInfoMethods#14](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MouseWheelUp">
      <MemberSignature Language="C#" Value="public void MouseWheelUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MouseWheelUp() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls up within content after a user clicks the wheel button on a mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the MouseWheelUp method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#12](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#12)]
 [!code-vb[IScrollInfoMethods#12](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#12)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageDown">
      <MemberSignature Language="C#" Value="public void PageDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PageDown() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls down within content by one page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the PageDown method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#8](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#8)]
 [!code-vb[IScrollInfoMethods#8](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#8)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageLeft">
      <MemberSignature Language="C#" Value="public void PageLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PageLeft() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls left within content by one page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the PageLeft method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#10](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#10)]
 [!code-vb[IScrollInfoMethods#10](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#10)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageRight">
      <MemberSignature Language="C#" Value="public void PageRight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PageRight() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls right within content by one page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the PageRight method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#9](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#9)]
 [!code-vb[IScrollInfoMethods#9](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#9)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageUp">
      <MemberSignature Language="C#" Value="public void PageUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PageUp() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrolls up within content by one page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the <xref:System.Windows.Controls.Primitives.IScrollInfo.MouseWheelLeft%2A> method in procedural code.  
  
 [!code-cs[IScrollInfoMethods#7](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#7)]
 [!code-vb[IScrollInfoMethods#7](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollOwner">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ScrollViewer ScrollOwner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ScrollViewer ScrollOwner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ScrollViewer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.</summary>
        <value>A <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes that implement <xref:System.Windows.Controls.Primitives.IScrollInfo> must call <xref:System.Windows.Controls.ScrollViewer.InvalidateScrollInfo%2A> on this object when properties change.  
  
 Logical scrolling enables scrolling to the next element in the logical tree. Physical scrolling, in contrast, scrolls content by a defined measurable increment in a specified direction. If you require physical scrolling instead of logical scrolling, wrap the host <xref:System.Windows.Controls.Panel> element in a <xref:System.Windows.Controls.ScrollViewer> and set the value of its <xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A> property to `false`.  
  
   
  
## Examples  
 The following example shows how to set the ScrollOwner property by using procedural code.  
  
 [!code-cs[IScrollInfoMethods#4](~/add/codesnippet/csharp/ScrollViewer_Methods/Window1.xaml.cs#4)]
 [!code-vb[IScrollInfoMethods#4](~/add/codesnippet/visualbasic/ScrollViewer_Methods/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetHorizontalOffset">
      <MemberSignature Language="C#" Value="public void SetHorizontalOffset (double offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetHorizontalOffset(float64 offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offset">The degree to which content is horizontally offset from the containing viewport.</param>
        <summary>Sets the amount of horizontal offset.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetVerticalOffset">
      <MemberSignature Language="C#" Value="public void SetVerticalOffset (double offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVerticalOffset(float64 offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offset">The degree to which content is vertically offset from the containing viewport.</param>
        <summary>Sets the amount of vertical offset.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VerticalOffset">
      <MemberSignature Language="C#" Value="public double VerticalOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 VerticalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the vertical offset of the scrolled content.</summary>
        <value>A &lt;xref:System.Double&gt; that represents, in device independent pixels, the vertical offset of the scrolled content. Valid values are between zero and the &lt;xref:System.Windows.Controls.Primitives.IScrollInfo.ExtentHeight%2A&gt; minus the &lt;xref:System.Windows.Controls.Primitives.IScrollInfo.ViewportHeight%2A&gt;. This property has no default value.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ViewportHeight">
      <MemberSignature Language="C#" Value="public double ViewportHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ViewportHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the vertical size of the viewport for this content.</summary>
        <value>A &lt;xref:System.Double&gt; that represents, in device independent pixels, the vertical size of the viewport for this content. This property has no default value.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ViewportWidth">
      <MemberSignature Language="C#" Value="public double ViewportWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ViewportWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the horizontal size of the viewport for this content.</summary>
        <value>A &lt;xref:System.Double&gt; that represents, in device independent pixels, the horizontal size of the viewport for this content. This property has no default value.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>