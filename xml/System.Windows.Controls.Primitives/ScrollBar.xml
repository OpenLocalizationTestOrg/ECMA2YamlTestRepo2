<Type Name="ScrollBar" FullName="System.Windows.Controls.Primitives.ScrollBar">
  <TypeSignature Language="C#" Value="public class ScrollBar : System.Windows.Controls.Primitives.RangeBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ScrollBar extends System.Windows.Controls.Primitives.RangeBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Primitives.RangeBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.TemplatePart(Name="PART_Track", Type=typeof(System.Windows.Controls.Primitives.Track))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a control that provides a scroll bar that has a sliding <see cref="T:System.Windows.Controls.Primitives.Thumb" /> whose position corresponds to a value.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following illustration shows a ScrollBar control.  
  
 ![Scrollbar illustration](~/add/media/scrollbar-illustration.JPG "Scrollbar illustration")  
  
 The ScrollBar control contains a <xref:System.Windows.Controls.Primitives.Track> control. The <xref:System.Windows.Controls.Primitives.Track> control consists of a <xref:System.Windows.Controls.Primitives.Thumb> control and two <xref:System.Windows.Controls.Primitives.RepeatButton> controls. You can increase and decrease the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of the ScrollBar control by pressing the <xref:System.Windows.Controls.Primitives.RepeatButton> controls or by moving the <xref:System.Windows.Controls.Primitives.Thumb>. The default range of values for the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property is from 0 to 1. The <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> represents the linear distance of the <xref:System.Windows.Controls.Primitives.Thumb> between the endpoints of the ScrollBar. You can change the default range of values by setting the <xref:System.Windows.Controls.Primitives.RangeBase.Minimum%2A> and <xref:System.Windows.Controls.Primitives.RangeBase.Maximum%2A> properties. The <xref:System.Windows.Controls.Primitives.ScrollBar.Orientation%2A> property determines whether the ScrollBar is displayed horizontally or vertically, and you must define this property for the ScrollBar control to appear.  
  
 The <xref:System.Windows.Controls.Primitives.Track> in a ScrollBar is oriented so that values increase from top to bottom for a vertical ScrollBar or from left to right for a horizontal ScrollBar.  
  
 The <xref:System.Windows.Controls.Primitives.Track> properties in the following table are the binding targets for the corresponding ScrollBar properties when the <xref:System.Windows.Controls.Primitives.ScrollBar.Track%2A> property is not explicitly defined. If you explicitly define the <xref:System.Windows.Controls.Primitives.ScrollBar.Track%2A> property, the binding does not occur.  
  
|<xref:System.Windows.Controls.Primitives.Track> property|ScrollBar property|  
|----------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Controls.Primitives.Track.Maximum%2A?displayProperty=fullName>|<xref:System.Windows.Controls.Primitives.RangeBase.Maximum%2A?displayProperty=fullName>|  
|<xref:System.Windows.Controls.Primitives.Track.Minimum%2A?displayProperty=fullName>|<xref:System.Windows.Controls.Primitives.RangeBase.Minimum%2A?displayProperty=fullName>|  
|<xref:System.Windows.Controls.Primitives.Track.Value%2A?displayProperty=fullName>|<xref:System.Windows.Controls.Primitives.RangeBase.Value%2A?displayProperty=fullName>|  
  
 You can access the <xref:System.Windows.Controls.Primitives.Track> control of a ScrollBar control by using the <xref:System.Windows.Controls.Primitives.ScrollBar.Track%2A> property.  
  
 To display <xref:System.Windows.UIElement> content inside a box that has scroll bars, use the <xref:System.Windows.Controls.ScrollViewer> control.  
  
## Customizing the ScrollBar Control  
 To apply the same property settings to multiple ScrollBar controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property. You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance. For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/add/includes/ajax-current-ext-md.md).  To see the parts and states that are specific to the ScrollBar, see [ScrollBar Styles and Templates](~/add/includes/ajax-current-ext-md.md).  
  
 Dependency properties for this control might be set by the controlâ€™s default style.  If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running.  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
> [!NOTE]
>  Setting a visual property will only have an effect if that property is both present in ScrollBar control's default template and is set by using a . You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md).  
  
   
  
## Examples  
 The following example shows how to create a horizontal ScrollBar that has a range of values between 0 and 100.  
  
 [!code-xml[ScrollBarSnips#ScrollBar](~/add/codesnippet/xaml/ScrollBarSnips/Window1.xaml#scrollbar)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScrollBar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeferScrollToHorizontalOffsetCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand DeferScrollToHorizontalOffsetCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand DeferScrollToHorizontalOffsetCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that notifies the <see cref="T:System.Windows.Controls.ScrollViewer" /> that the user is dragging the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> of the horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to the value that is provided in &lt;xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the user drags the thumb of a <xref:System.Windows.Controls.Primitives.ScrollBar>, the <xref:System.Windows.Controls.Primitives.ScrollBar> calls <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> for the DeferScrollToHorizontalOffsetCommand. If <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> returns `true`, the <xref:System.Windows.Controls.Primitives.ScrollBar> executes that command.  If <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> returns `false`, the <xref:System.Windows.Controls.Primitives.ScrollBar> executes the <xref:System.Windows.Controls.Primitives.ScrollBar.ScrollToHorizontalOffsetCommand>.  
  
 The <xref:System.Windows.Controls.ScrollViewer> uses this command to enable deferred scrolling. When <xref:System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabled%2A?displayProperty=fullName> is `true` and a user drags the <xref:System.Windows.Controls.Primitives.Thumb> of the <xref:System.Windows.Controls.Primitives.ScrollBar>, the content of the <xref:System.Windows.Controls.ScrollViewer> does not change until the user releases the <xref:System.Windows.Controls.Primitives.Thumb>. If deferred scrolling is enabled, the <xref:System.Windows.Controls.Primitives.ScrollBar> executes the DeferScrollToHorizontalOffsetCommand for a horizontal <xref:System.Windows.Controls.Primitives.ScrollBar> when the user drags the <xref:System.Windows.Controls.Primitives.Thumb>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DeferScrollToVerticalOffsetCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand DeferScrollToVerticalOffsetCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand DeferScrollToVerticalOffsetCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that notifies the <see cref="T:System.Windows.Controls.ScrollViewer" /> that the user is dragging the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> of the vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to the value that is provided in &lt;xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the user drags the thumb of a <xref:System.Windows.Controls.Primitives.ScrollBar>, the <xref:System.Windows.Controls.Primitives.ScrollBar> calls <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> for the DeferScrollToVerticalOffsetCommand. If <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> returns `true`, the <xref:System.Windows.Controls.Primitives.ScrollBar> executes that command.  If <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> returns `false`, the <xref:System.Windows.Controls.Primitives.ScrollBar> executes the <xref:System.Windows.Controls.Primitives.ScrollBar.ScrollToVerticalOffsetCommand>.  
  
 The <xref:System.Windows.Controls.ScrollViewer> uses this command to enable deferred scrolling. When <xref:System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabled%2A?displayProperty=fullName> is `true` and a user drags the <xref:System.Windows.Controls.Primitives.Thumb> of the <xref:System.Windows.Controls.Primitives.ScrollBar>, the content of the <xref:System.Windows.Controls.ScrollViewer> does not change until the user releases the <xref:System.Windows.Controls.Primitives.Thumb>. If deferred scrolling is enabled, the <xref:System.Windows.Controls.Primitives.ScrollBar> executes the DeferScrollToVerticalOffsetCommand for a vertical <xref:System.Windows.Controls.Primitives.ScrollBar> when the user drags the <xref:System.Windows.Controls.Primitives.Thumb>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected override bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is enabled.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is enabled in a <see cref="T:System.Windows.Controls.ScrollViewer" /> and the size of the content is larger than the display area; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation sets IsEnabledCore to `true` only if the <xref:System.Windows.Controls.Primitives.RangeBase.Maximum%2A> value of the <xref:System.Windows.Controls.Primitives.ScrollBar> is greater than the <xref:System.Windows.Controls.Primitives.RangeBase.Minimum%2A> value and the <xref:System.Windows.Controls.Primitives.ScrollBar> is enabled.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineDownCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand LineDownCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand LineDownCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> by a small amount in the vertical direction of increasing value of its <see cref="T:System.Windows.Controls.Primitives.Track" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command increases the <xref:System.Windows.Controls.Primitives.Track.Value%2A> of the <xref:System.Windows.Controls.Primitives.Track> in the <xref:System.Windows.Controls.Primitives.ScrollBar> by the value of the <xref:System.Windows.Controls.Primitives.RangeBase.SmallChange%2A> property.  
  
 This command occurs when the user presses the DOWN ARROW key.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_LineDownCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.LineDownCommand**`"/>`  
  
   
  
## Examples  
 The following example shows how to specify the LineDownCommand in a custom <xref:System.Windows.Controls.Primitives.ScrollBar> style template.  
  
 [!code-xml[ScrollBarTemplateExample#LineDownCommand](~/add/codesnippet/xaml/f-system.windows.control_8_1.xaml)]
 [!code-xml[ScrollBarTemplateExample#LineDownCommand](~/add/codesnippet/xaml/ScrollBarStyleExample/Window1.xaml#linedowncommand)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineLeftCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand LineLeftCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand LineLeftCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> by a small amount in the horizontal direction of decreasing value of its <see cref="T:System.Windows.Controls.Primitives.Track" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command decreases the <xref:System.Windows.Controls.Primitives.Track.Value%2A> of the <xref:System.Windows.Controls.Primitives.Track> in the <xref:System.Windows.Controls.Primitives.ScrollBar> by the value of the <xref:System.Windows.Controls.Primitives.RangeBase.SmallChange%2A> property.  
  
 This command occurs when the user presses the left <xref:System.Windows.Controls.Primitives.RepeatButton>.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_LineLeftCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.LineLeftCommand**`"/>`  
  
   
  
## Examples  
 The following example shows how to specify the LineLeftCommand in a custom <xref:System.Windows.Controls.Primitives.ScrollBar> style template.  
  
 [!code-xml[ScrollBarTemplateExample#LineLeftCommand](~/add/codesnippet/xaml/f-system.windows.control_3_1.xaml)]
 [!code-xml[ScrollBarTemplateExample#LineLeftCommand](~/add/codesnippet/xaml/ScrollBarStyleExample/Window1.xaml#lineleftcommand)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineRightCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand LineRightCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand LineRightCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> by a small amount in the horizontal direction of increasing value of its <see cref="T:System.Windows.Controls.Primitives.Track" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command increases the <xref:System.Windows.Controls.Primitives.Track.Value%2A> of the <xref:System.Windows.Controls.Primitives.Track> in the <xref:System.Windows.Controls.Primitives.ScrollBar> by the value of the <xref:System.Windows.Controls.Primitives.RangeBase.SmallChange%2A> property.  
  
 This command occurs when the user presses the right <xref:System.Windows.Controls.Primitives.RepeatButton>.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_LineRightCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.LineRightCommand**`"/>`  
  
   
  
## Examples  
 The following example shows how to specify the LineRightCommand in a custom <xref:System.Windows.Controls.Primitives.ScrollBar> style template.  
  
 [!code-xml[ScrollBarTemplateExample#LineRightCommand](~/add/codesnippet/xaml/f-system.windows.control_7_1.xaml)]
 [!code-xml[ScrollBarTemplateExample#LineRightCommand](~/add/codesnippet/xaml/ScrollBarStyleExample/Window1.xaml#linerightcommand)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineUpCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand LineUpCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand LineUpCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> by a small amount in the vertical direction of decreasing value of its <see cref="T:System.Windows.Controls.Primitives.Track" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command reduces the <xref:System.Windows.Controls.Primitives.Track.Value%2A> of the <xref:System.Windows.Controls.Primitives.Track> in the <xref:System.Windows.Controls.Primitives.ScrollBar> by the value of the <xref:System.Windows.Controls.Primitives.RangeBase.SmallChange%2A> property.  
  
 This command occurs when the user presses the UP ARROW key.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_LineUpCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.LineUpCommand**`"/>`  
  
   
  
## Examples  
 The following example shows how to specify the LineUpCommand in a custom <xref:System.Windows.Controls.Primitives.ScrollBar> style template.  
  
 [!code-xml[ScrollBarTemplateExample#LineUpCommand](~/add/codesnippet/xaml/f-system.windows.control_9_1.xaml)]
 [!code-xml[ScrollBarTemplateExample#LineUpCommand](~/add/codesnippet/xaml/ScrollBarStyleExample/Window1.xaml#lineupcommand)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public override void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnApplyTemplate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the visual tree for the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation also sets the <xref:System.Windows.Controls.Primitives.ScrollBar.Track%2A> property to the <xref:System.Windows.Controls.Primitives.Track> that is defined in the <xref:System.Windows.Controls.Primitives.ScrollBar> template.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected override void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> event that occurs when the <see cref="T:System.Windows.Controls.ContextMenu" /> for a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> closes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Controls.ContextMenu> of a <xref:System.Windows.Controls.Primitives.ScrollBar> provides options for changing the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> of the <xref:System.Windows.Controls.Primitives.ScrollBar>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected override void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> event that occurs when the <see cref="T:System.Windows.Controls.ContextMenu" /> for a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> opens.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Controls.ContextMenu> of a <xref:System.Windows.Controls.Primitives.ScrollBar> provides options for changing the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> of the <xref:System.Windows.Controls.Primitives.ScrollBar>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for this <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control.</summary>
        <returns>A <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected override void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation changes the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> of the <xref:System.Windows.Controls.Primitives.ScrollBar> to the location of the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event that occurs while the user presses the SHIFT key. The event is handled by setting <xref:System.Windows.RoutedEventArgs.Handled%2A> in the event data `e` to `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected override void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data.</param>
        <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation saves the position of the mouse click so that the <xref:System.Windows.Controls.Primitives.ScrollBar> can scroll to that position in response to a <xref:System.Windows.Controls.Primitives.ScrollBar.ScrollHereCommand>.  
  
   
  
## Examples  
 A <xref:System.Windows.Controls.Primitives.ScrollBar.ScrollHereCommand> occurs when the user selects **Scroll Here** from the menu that appears when the user presses the right mouse button over the <xref:System.Windows.Controls.Primitives.ScrollBar>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.Orientation Orientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.Orientation Orientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Orientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is displayed horizontally or vertically.</summary>
        <value>An <see cref="T:System.Windows.Controls.Orientation" /> enumeration value that defines whether the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is displayed horizontally or vertically. The default is <see cref="T:System.Windows.Controls.Orientation" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_Orientation"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Primitives.ScrollBar.OrientationProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example shows how to set the Orientation property for a <xref:System.Windows.Controls.Primitives.ScrollBar> control.  
  
 [!code-cs[ScrollBarSnips#Orientation](~/add/codesnippet/csharp/ScrollBarSnips/Window1.xaml.cs#orientation)]
 [!code-xml[ScrollBarSnips#Orientation](~/add/codesnippet/xaml/ScrollBarSnips/Window1.xaml#orientation)]
 [!code-vb[ScrollBarSnips#Orientation](~/add/codesnippet/visualbasic/scrollbarsnips/window1.xaml.vb#orientation)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OrientationProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OrientationProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OrientationProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.Primitives.ScrollBar.Orientation%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageDownCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand PageDownCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand PageDownCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> by a large amount in the vertical direction of increasing value of its <see cref="T:System.Windows.Controls.Primitives.Track" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command increases the <xref:System.Windows.Controls.Primitives.Track.Value%2A> of the <xref:System.Windows.Controls.Primitives.Track> in the <xref:System.Windows.Controls.Primitives.ScrollBar> by the value of the <xref:System.Windows.Controls.Primitives.RangeBase.LargeChange%2A> property.  
  
 This command occurs when the user presses the PAGE DOWN key.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_PageDownCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.PageDownCommand**`"/>`  
  
   
  
## Examples  
 The following example shows how to specify the PageDownCommand in a custom <xref:System.Windows.Controls.Primitives.ScrollBar> style template.  
  
 [!code-xml[ScrollBarTemplateExample#PageDownCommand](~/add/codesnippet/xaml/f-system.windows.control_6_1.xaml)]
 [!code-xml[ScrollBarTemplateExample#PageDownCommand](~/add/codesnippet/xaml/ScrollBarStyleExample/Window1.xaml#pagedowncommand)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageLeftCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand PageLeftCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand PageLeftCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> by a large amount in the horizontal direction of decreasing value of its <see cref="T:System.Windows.Controls.Primitives.Track" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command decreases the <xref:System.Windows.Controls.Primitives.Track.Value%2A> of the <xref:System.Windows.Controls.Primitives.Track> in the <xref:System.Windows.Controls.Primitives.ScrollBar> by the value of the <xref:System.Windows.Controls.Primitives.RangeBase.LargeChange%2A> property.  
  
 This command occurs when the user presses the page button that is to the left of the <xref:System.Windows.Controls.Primitives.Thumb>. The following illustration shows the page buttons in a <xref:System.Windows.Controls.Primitives.ScrollBar>.  
  
 ![The different parts of a ScrollBar](~/add/media/scrollbarpagebutton.png "The different parts of a ScrollBar")  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_PageLeftCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.PageLeftCommand**`"/>`  
  
   
  
## Examples  
 The following example shows how to specify the PageLeftCommand in a custom <xref:System.Windows.Controls.Primitives.ScrollBar> style template.  
  
 [!code-xml[ScrollBarTemplateExample#PageLeftCommand](~/add/codesnippet/xaml/f-system.windows.control_0_1.xaml)]
 [!code-xml[ScrollBarTemplateExample#PageLeftCommand](~/add/codesnippet/xaml/ScrollBarStyleExample/Window1.xaml#pageleftcommand)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageRightCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand PageRightCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand PageRightCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> by a large amount in the horizontal direction of increasing value of its <see cref="T:System.Windows.Controls.Primitives.Track" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command increases the <xref:System.Windows.Controls.Primitives.Track.Value%2A> of the <xref:System.Windows.Controls.Primitives.Track> in the <xref:System.Windows.Controls.Primitives.ScrollBar> by the value of the <xref:System.Windows.Controls.Primitives.RangeBase.LargeChange%2A> property.  
  
 This command occurs when the user presses the page button that is to the right of the <xref:System.Windows.Controls.Primitives.Thumb>. The following illustration shows the page buttons in a <xref:System.Windows.Controls.Primitives.ScrollBar>.  
  
 ![The different parts of a ScrollBar](~/add/media/scrollbarpagebutton.png "The different parts of a ScrollBar")  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_PageRightCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.PageRightCommand**`"/>`  
  
   
  
## Examples  
 The following example shows how to specify the PageRightCommand in a custom <xref:System.Windows.Controls.Primitives.ScrollBar> style template.  
  
 [!code-xml[ScrollBarTemplateExample#PageRightCommand](~/add/codesnippet/xaml/f-system.windows.control_5_1.xaml)]
 [!code-xml[ScrollBarTemplateExample#PageRightCommand](~/add/codesnippet/xaml/ScrollBarStyleExample/Window1.xaml#pagerightcommand)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PageUpCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand PageUpCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand PageUpCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> by a large amount in the vertical direction of decreasing value of its <see cref="T:System.Windows.Controls.Primitives.Track" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command reduces the <xref:System.Windows.Controls.Primitives.Track.Value%2A> of the <xref:System.Windows.Controls.Primitives.Track> in the <xref:System.Windows.Controls.Primitives.ScrollBar> by the value of the <xref:System.Windows.Controls.Primitives.RangeBase.LargeChange%2A> property.  
  
 This command occurs when the user presses the PAGE UP key.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_PageUpCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.PageUpCommand**`"/>`  
  
   
  
## Examples  
 The following example shows how to specify the PageUpCommand in a custom <xref:System.Windows.Controls.Primitives.ScrollBar> style template.  
  
 [!code-xml[ScrollBarTemplateExample#PageUpCommand](~/add/codesnippet/xaml/f-system.windows.control_2_1.xaml)]
 [!code-xml[ScrollBarTemplateExample#PageUpCommand](~/add/codesnippet/xaml/ScrollBarStyleExample/Window1.xaml#pageupcommand)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.Primitives.ScrollEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.Primitives.ScrollEventHandler Scroll" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Primitives.ScrollEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs one or more times as content scrolls in a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> when the user moves the &lt;xref:System.Windows.Controls.Primitives.Track.Thumb%2A&gt; by using the mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event typically occurs multiple times when the user changes the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> of the <xref:System.Windows.Controls.Primitives.ScrollBar> by dragging the <xref:System.Windows.Controls.Primitives.Track.Thumb%2A>. There is no limit to the number of times this event is raised as the <xref:System.Windows.Controls.Primitives.Track.Thumb%2A> position is dragged.  
  
 This event is not raised when the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> of the <xref:System.Windows.Controls.Primitives.ScrollBar> control is changed in code.  
  
<a name="routedEventInfo_Scroll"></a>   
## Routed Event Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Primitives.ScrollBar.ScrollEvent>|  
|Routing strategy|Bubbling|  
|Delegate|<xref:System.Windows.Controls.Primitives.ScrollEventHandler>|  
  
   
  
## Examples  
 The following example shows how assign an event handler for the Scroll event to a <xref:System.Windows.Controls.Primitives.ScrollBar> control, and how to define the event handler in code.  
  
 [!code-xml[ScrollBarSnips#Scroll](~/add/codesnippet/xaml/ScrollBarSnips/Window1.xaml#scroll)]  
  
 [!code-cs[ScrollBarSnips#ScrollHandler](~/add/codesnippet/csharp/ScrollBarSnips/Window1.xaml.cs#scrollhandler)]
 [!code-vb[ScrollBarSnips#ScrollHandler](~/add/codesnippet/visualbasic/scrollbarsnips/window1.xaml.vb#scrollhandler)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ScrollEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ScrollEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> routed event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollHereCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand ScrollHereCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand ScrollHereCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to the point of the mouse click that opened the <see cref="T:System.Windows.Controls.ContextMenu" /> in the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command occurs when the user selects **Scroll Here** from the <xref:System.Windows.Controls.ContextMenu> options. The <xref:System.Windows.Controls.ContextMenu> of the <xref:System.Windows.Controls.Primitives.ScrollBar> appears when the user pauses the mouse pointer over the <xref:System.Windows.Controls.Primitives.ScrollBar> and presses the right mouse button. This menu provides options for scrolling the <xref:System.Windows.Controls.Primitives.ScrollBar>.  
  
 This command is for a <xref:System.Windows.Controls.Primitives.ScrollBar> that is part of a <xref:System.Windows.Controls.ScrollViewer> control, and is executed by the <xref:System.Windows.Controls.ScrollViewer>.  
  
<a name="xamlTextUsage_ScrollHereCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="` **ScrollBar.ScrollHereCommand**`"/>`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollToBottomCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand ScrollToBottomCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand ScrollToBottomCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to the &lt;xref:System.Windows.Controls.Primitives.RangeBase.Maximum%2A&gt; value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For a vertical <xref:System.Windows.Controls.Primitives.ScrollBar>, this movement occurs when the user presses the CTRL+END keys.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_ScrollToBottomCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.ScrollToBottomCommand**`"/>`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollToEndCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand ScrollToEndCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand ScrollToEndCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls the content to the lower-right corner of a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command is only used with a <xref:System.Windows.Controls.ScrollViewer> control.  
  
<a name="xamlTextUsage_ScrollToEndCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.ScrollToEndCommand**`"/>`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollToHomeCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand ScrollToHomeCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand ScrollToHomeCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls the content to the upper-left corner of a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command is only used with a <xref:System.Windows.Controls.ScrollViewer> control.  
  
<a name="xamlTextUsage_ScrollToHomeCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.ScrollToHomeCommand**`"/>`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollToHorizontalOffsetCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand ScrollToHorizontalOffsetCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand ScrollToHorizontalOffsetCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> in a <see cref="T:System.Windows.Controls.ScrollViewer" /> to the value that is provided in &lt;xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command is only used with a <xref:System.Windows.Controls.ScrollViewer> control.  
  
<a name="xamlTextUsage_ScrollToHorizontalOffsetCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.ScrollToHorizontalOffsetCommand**`"/>`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollToLeftEndCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand ScrollToLeftEndCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand ScrollToLeftEndCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to the &lt;xref:System.Windows.Controls.Primitives.RangeBase.Minimum%2A&gt; value for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command occurs when the user presses the CTRL+HOME keys for a horizontal <xref:System.Windows.Controls.Primitives.ScrollBar>.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_ScrollToLeftEndCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="` **ScrollBar.ScrollToLeftEndCommand**`"/>`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollToRightEndCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand ScrollToRightEndCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand ScrollToRightEndCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to the &lt;xref:System.Windows.Controls.Primitives.RangeBase.Maximum%2A&gt; value for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command occurs when the user presses the CTRL+END keys for a horizontal <xref:System.Windows.Controls.Primitives.ScrollBar>.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_ScrollToRightEndCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="` **ScrollBar.ScrollToRightEndCommand**`"/>`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollToTopCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand ScrollToTopCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand ScrollToTopCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to the &lt;xref:System.Windows.Controls.Primitives.RangeBase.Maximum%2A&gt; value for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For a vertical <xref:System.Windows.Controls.Primitives.ScrollBar>, this movement occurs when the user presses the CTRL+HOME keys.  
  
 When you implement a <xref:System.Windows.Controls.Primitives.ScrollBar> as part of a <xref:System.Windows.Controls.ScrollViewer> control, the <xref:System.Windows.Controls.ScrollViewer> executes this command.  
  
<a name="xamlTextUsage_ScrollToTopCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.ScrollToTopCommand**`"/>`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollToVerticalOffsetCommand">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Input.RoutedCommand ScrollToVerticalOffsetCommand;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Input.RoutedCommand ScrollToVerticalOffsetCommand" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The command that scrolls a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> in a <see cref="T:System.Windows.Controls.ScrollViewer" /> to the value that is provided in &lt;xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command is only used with a <xref:System.Windows.Controls.ScrollViewer> control.  
  
<a name="xamlTextUsage_ScrollToVerticalOffsetCommand"></a>   
## XAML Text Usage  
 `<` *object* *property*`="`**ScrollBar.ScrollToVerticalOffsetCommand**`"/>`  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Track">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.Primitives.Track Track { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.Primitives.Track Track" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Primitives.Track</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Windows.Controls.Primitives.Track" /> for a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control.</summary>
        <value>The <see cref="T:System.Windows.Controls.Primitives.Track" /> that is used with a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A typical style template for a <xref:System.Windows.Controls.Primitives.ScrollBar> control includes a <xref:System.Windows.Controls.Primitives.Track> control that is surrounded on either side by two <xref:System.Windows.Controls.Button> controls.  
  
   
  
## Examples  
 The following example shows how to access the <xref:System.Windows.Controls.Primitives.Track> control that is used with a <xref:System.Windows.Controls.Primitives.ScrollBar> control.  
  
 [!code-cs[ScrollBarSnips#Track](~/add/codesnippet/csharp/ScrollBarSnips/Window1.xaml.cs#track)]
 [!code-vb[ScrollBarSnips#Track](~/add/codesnippet/visualbasic/scrollbarsnips/window1.xaml.vb#track)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ViewportSize">
      <MemberSignature Language="C#" Value="public double ViewportSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ViewportSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the amount of the scrollable content that is currently visible.</summary>
        <value>The amount of the scrollable content that is currently visible. The default is 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The units that are used for ViewportSize are the same units that are used to describe the length of the content. Some examples include lines of text or pages of text.  
  
 The value of the ViewportSize property is used to calculate the size of the <xref:System.Windows.Controls.Primitives.Thumb> control that is displayed as the sliding value indicator in a <xref:System.Windows.Controls.Primitives.ScrollBar> control. The <xref:System.Windows.Controls.Primitives.Thumb> control's size represents the amount of a <xref:System.Windows.Controls.ScrollViewer> control's content that is visible.  If 25 percent of a <xref:System.Windows.Controls.ScrollViewer> control's content is visible, the <xref:System.Windows.Controls.Primitives.Thumb> occupies 25 percent of the track in the <xref:System.Windows.Controls.Primitives.ScrollBar>.  
  
 You can decide which units ViewportSize uses.  When you set this property, make sure that the ViewportSize, <xref:System.Windows.Controls.Primitives.RangeBase.Minimum%2A>, <xref:System.Windows.Controls.Primitives.RangeBase.Maximum%2A>, and <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> properties use the same units.  
  
 The following illustration shows how the <xref:System.Windows.Controls.Primitives.Thumb> size reflects the amount of content that is visible.  
  
 ![The track length and thumbsize of a ScrollBar](~/add/media/scrollbarthumbsize.png "The track length and thumbsize of a ScrollBar")  
  
<a name="dependencyPropertyInfo_ViewportSize"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example shows how to set the ViewportSize on a <xref:System.Windows.Controls.Primitives.ScrollBar> control.  
  
 [!code-cs[ScrollBarSnips#Viewport](~/add/codesnippet/csharp/ScrollBarSnips/Window1.xaml.cs#viewport)]
 [!code-xml[ScrollBarSnips#Viewport](~/add/codesnippet/xaml/ScrollBarSnips/Window1.xaml#viewport)]
 [!code-vb[ScrollBarSnips#Viewport](~/add/codesnippet/visualbasic/scrollbarsnips/window1.xaml.vb#viewport)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ViewportSizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ViewportSizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ViewportSizeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.Primitives.ScrollBar.ViewportSize%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>