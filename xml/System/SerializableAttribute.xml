<Type Name="SerializableAttribute" FullName="System.SerializableAttribute">
  <TypeSignature Language="C#" Value="public sealed class SerializableAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SerializableAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Delegate, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates that a class can be serialized. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Apply the SerializableAttribute attribute to a type to indicate that instances of this type can be serialized. The common language runtime throws <xref:System.Runtime.Serialization.SerializationException> if any type in the graph of objects being serialized does not have the SerializableAttribute attribute applied.  
  
 Apply the SerializableAttribute attribute even if the class also implements the <xref:System.Runtime.Serialization.ISerializable> interface to control the serialization process.  
  
 When you apply the SerializableAttribute attribute to a type, all private and public fields are serialized by default. You can control serialization more granularly by implementing the <xref:System.Runtime.Serialization.ISerializable> interface to override the serialization process.  
  
 Or you can exclude fields from serialization by applying the <xref:System.NonSerializedAttribute> attribute to the field. If a field of a serializable type contains a pointer, a handle, or some other data structure that is specific to a particular environment, and cannot be meaningfully reconstituted in a different environment, then you might want to apply the <xref:System.NonSerializedAttribute> attribute to that field.  
  
 For more information about using attributes, see [Attributes](~/add/includes/ajax-current-ext-md.md). For more information about serialization, see <xref:System.Runtime.Serialization>.  
  
   
  
## Examples  
 The following example demonstrates serialization of an object that is marked with the SerializableAttribute attribute. To use the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> instead of the <xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter>, uncomment the appropriate lines.  
  
 [!code-cpp[SerializationAttributes#1](~/add/codesnippet/cpp/t-system.serializableatt_1.cpp)]
 [!code-cs[SerializationAttributes#1](~/add/codesnippet/csharp/t-system.serializableatt_1.cs)]
 [!code-vb[SerializationAttributes#1](~/add/codesnippet/visualbasic/t-system.serializableatt_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerializableAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.SerializableAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>