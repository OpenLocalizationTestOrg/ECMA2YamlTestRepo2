<Type Name="Base64FormattingOptions" FullName="System.Base64FormattingOptions">
  <TypeSignature Language="C#" Value="public enum Base64FormattingOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Base64FormattingOptions extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies whether relevant &lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=fullName&gt; and &lt;xref:System.Convert.ToBase64String%2A?displayProperty=fullName&gt; methods insert line breaks in their output.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Convert.ToBase64CharArray%2A?displayProperty=fullName> and <xref:System.Convert.ToBase64String%2A?displayProperty=fullName> methods convert the value of an array of 8-bit unsigned integers to an equivalent string representation that consists of base 64 digits. The string representation can contain one or more line breaks, where a line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array. The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window.  
  
 The None and InsertLineBreaks values are mutually exclusive. Therefore, although the Base64FormattingOptions enumeration is marked with the <xref:System.FlagsAttribute> attribute, it makes no sense to perform a bitwise combination of these two values.  
  
   
  
## Examples  
 The following example calls the [Convert.ToBase64String(Byte\[\],â€‚Base64FormattingOptions)](assetId:///M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)?qualifyHint=True&autoUpgrade=False) with a InsertLineBreaks argument to insert line breaks in the string that is produced by encoding a 100-element byte array.  
  
 [!code-vb[System.Convert.ToBase64String#3](~/add/codesnippet/visualbasic/t-system.base64formattin_1.vb)]
 [!code-cs[System.Convert.ToBase64String#3](~/add/codesnippet/csharp/t-system.base64formattin_1.cs)]  
  
 As the output from the example shows, the <xref:System.Convert.FromBase64String%2A?displayProperty=fullName> succeeds in restoring the original byte array; the line break characters are ignored during the conversion.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="InsertLineBreaks">
      <MemberSignature Language="C#" Value="InsertLineBreaks" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Base64FormattingOptions InsertLineBreaks = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Base64FormattingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserts line breaks after every 76 characters in the string representation.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Base64FormattingOptions None = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Base64FormattingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Does not insert line breaks after every 76 characters in the string representation.</summary>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>