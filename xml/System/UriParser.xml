<Type Name="UriParser" FullName="System.UriParser">
  <TypeSignature Language="C#" Value="public abstract class UriParser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract UriParser extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Parses a new URI scheme. This is an abstract class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UriParser class enables you to create parsers for new URI schemes. You can write these parsers in their entirety, or the parsers can be derived from well-known schemes (HTTP, FTP, and other schemes based on network protocols). If you want to create a completely new parser, inherit from <xref:System.GenericUriParser>. If you want to create a parser that extends a well-known URI scheme, inherit from <xref:System.FtpStyleUriParser>, <xref:System.HttpStyleUriParser>, <xref:System.FileStyleUriParser>, <xref:System.GopherStyleUriParser>, or <xref:System.LdapStyleUriParser>.  
  
 Microsoft strongly recommends that you use a parser shipped with the .NET Framework. Building your own parser increases the complexity of your application, and will not perform as well as the shipped parsers.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UriParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Constructs a default URI parser.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetComponents">
      <MemberSignature Language="C#" Value="protected virtual string GetComponents (Uri uri, UriComponents components, UriFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetComponents(class System.Uri uri, valuetype System.UriComponents components, valuetype System.UriFormat format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="components" Type="System.UriComponents" />
        <Parameter Name="format" Type="System.UriFormat" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to parse.</param>
        <param name="components">The &lt;xref:System.UriComponents&gt; to retrieve from `uri`.</param>
        <param name="format">One of the &lt;xref:System.UriFormat&gt; values that controls how special characters are escaped.</param>
        <summary>Gets the components from a URI.</summary>
        <returns>A string that contains the components.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the GetComponents method to determine the value of various parts of the URI, such as the <xref:System.UriComponents>, <xref:System.UriComponents>, or <xref:System.UriComponents>.  
  
 The components are returned in the order that they appear in the URI. For example, if <xref:System.UriComponents> is specified, it appears first.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="uriFormat" /> is invalid.  
  
 \- or -  
  
 <paramref name="uriComponents" /> is not a combination of valid &lt;xref:System.UriComponents&gt; values.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="uri" /> requires user-driven parsing  
  
 \- or -  
  
 <paramref name="uri" /> is not an absolute URI. Relative URIs cannot be used with this method.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InitializeAndValidate">
      <MemberSignature Language="C#" Value="protected virtual void InitializeAndValidate (Uri uri, out UriFormatException parsingError);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeAndValidate(class System.Uri uri, class System.UriFormatException parsingError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="parsingError" Type="System.UriFormatException&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="uri">The T:System.Uri to validate.</param>
        <param name="parsingError">Validation errors, if any.</param>
        <summary>Initialize the state of the parser and validate the URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InitializeAndValidate method is called every time a <xref:System.Uri> is instantiated.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsBaseOf">
      <MemberSignature Language="C#" Value="protected virtual bool IsBaseOf (Uri baseUri, Uri relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsBaseOf(class System.Uri baseUri, class System.Uri relativeUri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="baseUri">The base URI.</param>
        <param name="relativeUri">The URI to test.</param>
        <summary>Determines whether <paramref name="baseUri" /> is a base URI for <paramref name="relativeUri" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="baseUri" /> is a base URI for <paramref name="relativeUri" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsKnownScheme">
      <MemberSignature Language="C#" Value="public static bool IsKnownScheme (string schemeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKnownScheme(string schemeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schemeName">The scheme name to check.</param>
        <summary>Indicates whether the parser for a scheme is registered.</summary>
        <returns>
          <see langword="true" /> if <paramref name="schemeName" /> has been registered; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="schemeName" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="schemeName" /> parameter is not valid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsWellFormedOriginalString">
      <MemberSignature Language="C#" Value="protected virtual bool IsWellFormedOriginalString (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsWellFormedOriginalString(class System.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to check.</param>
        <summary>Indicates whether a URI is well-formed.</summary>
        <returns>
          <see langword="true" /> if <paramref name="uri" /> is well-formed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsWellFormedOriginalString method will return false if:  
  
-   The string is not correctly escaped per RFC 2396.  
  
-   The string represents an absolute URI that references an implicit file URI.  
  
-   The string represents an absolute URI that is missing a forward slash before the path component.  
  
-   The string contains unescaped backslashes, even if they will be treated as forward slashes.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnNewUri">
      <MemberSignature Language="C#" Value="protected virtual UriParser OnNewUri ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.UriParser OnNewUri() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UriParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked by a &lt;xref:System.Uri&gt; constructor to get a <see cref="T:System.UriParser" /> instance</summary>
        <returns>A <see cref="T:System.UriParser" /> for the constructed &lt;xref:System.Uri&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default implementation returns the same <xref:System.UriParser> instance. You may need to override this method and return a different <xref:System.UriParser> for each invocation if you are operating in a multithreaded environment.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnRegister">
      <MemberSignature Language="C#" Value="protected virtual void OnRegister (string schemeName, int defaultPort);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRegister(string schemeName, int32 defaultPort) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemeName" Type="System.String" />
        <Parameter Name="defaultPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemeName">The scheme that is associated with this <see cref="T:System.UriParser" />.</param>
        <param name="defaultPort">The port number of the scheme.</param>
        <summary>Invoked by the Framework when a <see cref="T:System.UriParser" /> method is registered.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static void Register (UriParser uriParser, string schemeName, int defaultPort);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Register(class System.UriParser uriParser, string schemeName, int32 defaultPort) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriParser" Type="System.UriParser" />
        <Parameter Name="schemeName" Type="System.String" />
        <Parameter Name="defaultPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="uriParser">The URI parser to register.</param>
        <param name="schemeName">The name of the scheme that is associated with this parser.</param>
        <param name="defaultPort">The default port number for the specified scheme.</param>
        <summary>Associates a scheme and port number with a <see cref="T:System.UriParser" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `defaultPort` parameter is set to -1, the Register method registers no default value for the port number.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriParser" /> parameter is null  
  
 \- or -  
  
 <paramref name="schemeName" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="schemeName" /> parameter is not valid  
  
 \- or -  
  
 <paramref name="defaultPort" /> parameter is not valid. The <paramref name="defaultPort" /> parameter is less than -1 or greater than 65,534.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="protected virtual string Resolve (Uri baseUri, Uri relativeUri, out UriFormatException parsingError);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string Resolve(class System.Uri baseUri, class System.Uri relativeUri, class System.UriFormatException parsingError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
        <Parameter Name="parsingError" Type="System.UriFormatException&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="baseUri">A base URI.</param>
        <param name="relativeUri">A relative URI.</param>
        <param name="parsingError">Errors during the resolve process, if any.</param>
        <summary>Called by &lt;xref:System.Uri&gt; constructors and &lt;xref:System.Uri.TryCreate%2A?displayProperty=fullName&gt; to resolve a relative URI.</summary>
        <returns>The string of the resolved relative &lt;xref:System.Uri&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri> constructors and <xref:System.Uri.TryCreate%2A?displayProperty=fullName> use Resolve to construct a URI from `baseUri` and `relativeUri`.  
  
 If a parsing error occurs, the returned string for the resolved relative <xref:System.Uri> is null.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="baseUri" /> parameter is not an absolute &lt;xref:System.Uri&gt;  
  
 \- or -  
  
 <paramref name="baseUri" /> parameter requires user-driven parsing.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>