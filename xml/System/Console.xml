<Type Name="Console" FullName="System.Console">
  <TypeSignature Language="C#" Value="public static class Console" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Console extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.  
  
 To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal. For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands. The Console class provides basic support for applications that read characters from, and write characters to, the console.  
  
 For information about developing with the Console class, see the following sections:  
  
-   [Console I/O Streams](#Streams)  
  
-   [Screen Buffer and Console Window](#Buffer)  
  
-   [Unicode Support for the Console](#Unicode)  
  
-   [Common Operations](#Operations)  
  
-   [.NET Core Notes](#Core)  
  
<a name="Streams"></a>   
## Console I/O Streams  
 When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream. Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream. These streams are presented to your application as the values of the <xref:System.Console.In%2A?displayProperty=fullName>, <xref:System.Console.Out%2A?displayProperty=fullName>, and <xref:System.Console.Error%2A?displayProperty=fullName> properties.  
  
 By default, the value of the <xref:System.Console.In%2A> property is a <xref:System.IO.TextReader?displayProperty=fullName> object that represents the keyboard, and the values of the <xref:System.Console.Out%2A> and <xref:System.Console.Error%2A> properties are <xref:System.IO.TextWriter?displayProperty=fullName> objects that represent a console window. However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files. To redirect the standard input, standard output, or standard error stream, call the <xref:System.Console.SetIn%2A?displayProperty=fullName>, <xref:System.Console.SetOut%2A?displayProperty=fullName>, or <xref:System.Console.SetError%2A?displayProperty=fullName> method, respectively. I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams. This means that methods that are ordinarily asynchronous, such as <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>, execute synchronously if the object represents a console stream.  
  
> [!NOTE]
>  Do not use the Console class to display output in unattended applications, such as server applications. Calls to methods such as <xref:System.Console.Write%2A?displayProperty=fullName> and <xref:System.Console.WriteLine%2A?displayProperty=fullName> have no effect in GUI applications.  
  
 Console class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file. Program your application to catch <xref:System.IO.IOException?displayProperty=fullName> exceptions if you redirect a standard stream. You can also use the <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, and <xref:System.Console.IsErrorRedirected%2A> properties to determine whether a standard stream is redirected before performing an operation that throws an <xref:System.IO.IOException?displayProperty=fullName> exception.  
  
 It is sometimes useful to explicitly call the members of the stream objects represented by the <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, and <xref:System.Console.Error%2A> properties. For example, by default, the <xref:System.Console.ReadLine%2A?displayProperty=fullName> method reads input from the standard input stream. Similarly, the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed ("\r\n"). However, the Console class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.  
  
 You can solve this problem by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> or <xref:System.Console.Error%2A> property to another line termination string. For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:  
  
 `Console.Error.NewLine = "\r\n\r\n";`  
  
 You can then explicitly call the <xref:System.IO.TextWriter.WriteLine%2A> method of the error output stream object, as in the following C# statement:  
  
 `Console.Error.WriteLine();`  
  
<a name="Buffer"></a>   
## Screen Buffer and Console Window  
 Two closely related features of the console are the screen buffer and the console window. Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer. The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character. Each character has its own foreground color, and each character cell has its own background color.  
  
 The screen buffer is viewed through a rectangular region called the console window. The console window is another attribute of the console; it is not the console itself, which is an operating system window. The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer. If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.  
  
 A cursor indicates the screen buffer position where text is currently read or written. The cursor can be hidden or made visible, and its height can be changed. If the cursor is visible, the console window position is moved automatically so the cursor is always in view.  
  
 The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin. Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0. The maximum value for the row and column indexes is <xref:System.Int16.MaxValue?displayProperty=fullName>.  
  
<a name="Unicode"></a>   
## Unicode Support for the Console  
 In general, the console reads input and writes output by using the current console code page, which the system locale defines by default. A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately. The following example illustrates this problem. It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console. If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.  
  
 [!code-cs[System.Console.Class#1](~/add/codesnippet/csharp/t-system.console_1.cs)]
 [!code-vb[System.Console.Class#1](~/add/codesnippet/visualbasic/t-system.console_1.vb)]  
  
 In addition to supporting code pages, the Console class supports UTF-8 encoding with the <xref:System.Text.UTF8Encoding> class. Beginning with the .NET Framework 4.5, the Console class also supports UTF-16 encoding with the <xref:System.Text.UnicodeEncoding> class. To display Unicode characters to the console. you set the <xref:System.Console.OutputEncoding%2A> property to either <xref:System.Text.UTF8Encoding> or  <xref:System.Text.UnicodeEncoding>.  
  
 Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character. To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console. The following example shows how you can programmatically change the font from a raster font to Lucida Console.  
  
 [!code-cs[System.Console.Class.Unsafe#3](~/add/codesnippet/csharp/setfont1/setfont1.cs#3)]
 [!code-vb[System.Console.Class.Unsafe#3](~/add/codesnippet/visualbasic/t-system.console_2.vb)]  
  
 However, TrueType fonts can display only a subset of glyphs. For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02. To see which characters a particular font supports, open the **Fonts** applet in Control Panel, choose the **Find a character** option, and choose the font whose character set you'd like to examine in the **Font** list of the **Character Map** window.  
  
 Windows uses font linking to display glyphs that are not available in a particular font. For information about font linking to display additional character sets, see [Globalization Step-by-Step: Fonts](http://go.microsoft.com/fwlink/?LinkId=229111). Linked fonts are defined in the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink subkey of the registry. Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font. Each member of the array defines a linked font and takes the form *font-file-name*,*font-name*. The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.  
  
 [!code-cs[System.Console.Class#2](~/add/codesnippet/csharp/t-system.console_3.cs)]
 [!code-vb[System.Console.Class#2](~/add/codesnippet/visualbasic/t-system.console_3.vb)]  
  
 Unicode support for the console has the following limitations:  
  
-   UTF-32 encoding is not supported. The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <xref:System.Text.UTF8Encoding> and <xref:System.Text.UnicodeEncoding> classes, respectively.  
  
-   Bidirectional output is not supported.  
  
-   Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.  
  
-   Display of characters in complex scripts is not supported.  
  
-   Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters. To work around this limitation, you can normalize the string to be displayed by calling the <xref:System.String.Normalize%2A?displayProperty=fullName> method before sending output to the console. In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <xref:System.String.Normalize%2A?displayProperty=fullName> method is called.  
  
     [!code-cs[System.Console.Class#5](~/add/codesnippet/csharp/t-system.console_4.cs)]
     [!code-vb[System.Console.Class#5](~/add/codesnippet/visualbasic/t-system.console_4.vb)]  
  
     Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.  
  
-   If a font provides a glyph for a code point in the private use area, that glyph will be displayed. However, because characters in the private use area are application-specific, this may not be the expected glyph.  
  
 The following example displays a range of Unicode characters to the console. The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (`false`) or UTF-16 encoding (`true`). It assumes that the console is using a TrueType font.  
  
 [!code-cs[System.Console.Class#4](~/add/codesnippet/csharp/t-system.console_5.cs)]
 [!code-vb[System.Console.Class#4](~/add/codesnippet/visualbasic/t-system.console_5.vb)]  
  
<a name="Operations"></a>   
## Common Operations  
 The Console class contains the following methods for reading console input and writing console output:  
  
-   The overloads of the <xref:System.Console.ReadKey%2A> method read an individual character.  
  
-   The <xref:System.Console.ReadLine%2A> method reads an entire line of input.  
  
-   The <xref:System.Console.Write%2A> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.  
  
-   A parallel set of <xref:System.Console.WriteLine%2A> method overloads output the same string as the <xref:System.Console.Write%2A> overloads but also add a line termination string.  
  
 The Console class also contains methods and properties to perform the following operations:  
  
-   Get or set the size of the screen buffer. The <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties let you get or set the buffer height and width, respectively, and the <xref:System.Console.SetBufferSize%2A> method lets you set the buffer size in a single method call.  
  
-   Get or set the size of the console window. The <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties let you get or set the window height and width, respectively, and the <xref:System.Console.SetWindowSize%2A> method lets you set the window size in a single method call.  
  
-   Get or set the size of the cursor. The <xref:System.Console.CursorSize%2A> property specifies the height of the cursor in a character cell.  
  
-   Get or set the position of the console window relative to the screen buffer. The <xref:System.Console.WindowTop%2A> and <xref:System.Console.WindowLeft%2A> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <xref:System.Console.SetWindowPosition%2A> method lets you set these values in a single method call.  
  
-   Get or set the position of the cursor by getting or setting the <xref:System.Console.CursorTop%2A> and <xref:System.Console.CursorLeft%2A> properties, or set the position of the cursor by calling the <xref:System.Console.SetCursorPosition%2A> method.  
  
-   Move or clear data in the screen buffer by calling the <xref:System.Console.MoveBufferArea%2A> or <xref:System.Console.Clear%2A> method.  
  
-   Get or set the foreground and background colors by using the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties, or reset the background and foreground to their default colors by calling the <xref:System.Console.ResetColor%2A> method.  
  
-   Play the sound of a beep through the console speaker by calling the <xref:System.Console.Beep%2A> method.  
  
<a name="Core"></a>   
## [!INCLUDE[net_core](~/add/includes/net-core-md.md)] Notes  
 In the .NET Framework on the desktop, the Console class uses the encoding returned by `GetConsoleCP` and `GetConsoleOutputCP`, which typically is a code page encoding. For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default. However, [!INCLUDE[net_core](~/add/includes/net-core-md.md)] may make only a limited subset of these encodings available. Where this is the case, <xref:System.Text.Encoding.UTF8%2A?displayProperty=fullName> is used as the default encoding for the console.  
  
 If your app depends on specific code page encodings, you can still make them available by doing the following *before* you call any Console methods:  
  
1.  Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.  
  
2.  Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName> property.  
  
3.  Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=fullName> method to make the additional encodings supported by the encoding provider available.  
  
 The Console class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any Console output methods.  
  
   
  
## Examples  
 The following example demonstrates how to read data from, and write data to, the standard input and output streams. Note that these streams can be redirected by using the <xref:System.Console.SetIn%2A> and <xref:System.Console.SetOut%2A> methods.  
  
 [!code-cs[Classic Console Example#1](~/add/codesnippet/csharp/t-system.console_6.cs)]
 [!code-cpp[Classic Console Example#1](~/add/codesnippet/cpp/t-system.console_6.cpp)]
 [!code-vb[Classic Console Example#1](~/add/codesnippet/visualbasic/t-system.console_6.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe>This type is thread safe.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of the console.</summary>
        <value>A value that specifies the background color of the console; that is, the color that appears behind each character. The default is black.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A change to the BackgroundColor property affects only output that is written to individual character cells after the background color is changed. To change the background color of the console window as a whole, set the BackgroundColor property and call the <xref:System.Console.Clear%2A> method. The following example provides an illustration.  
  
 [!code-vb[System.Console.BackgroundColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_1.vb)]
 [!code-cs[System.Console.BackgroundColor#1](~/add/codesnippet/csharp/p-system.console.backgro_1.cs)]  
  
 A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the BackgroundColor and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  
  
 [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_2.vb)]
 [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.backgro_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The color specified in a set operation is not a valid member of <see cref="T:System.ConsoleColor" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Plays the sound of a beep through the console speaker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds.  
  
> [!NOTE]
>  The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP.  
  
 Beep wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Whether Beep produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device.  
  
   
  
## Examples  
 The following example demonstrates the Beep method. The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.  
  
 [!code-cs[console.beep#1](~/add/codesnippet/csharp/m-system.console.beep_1.cs)]
 [!code-cpp[console.beep#1](~/add/codesnippet/cpp/m-system.console.beep_1.cpp)]
 [!code-vb[console.beep#1](~/add/codesnippet/visualbasic/m-system.console.beep_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.HostProtectionException">This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="duration" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="frequency">The frequency of the beep, ranging from 37 to 32767 hertz.</param>
        <param name="duration">The duration of the beep measured in milliseconds.</param>
        <summary>Plays the sound of a beep of a specified frequency and duration through the console speaker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Beep%2A> wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Whether <xref:System.Console.Beep%2A> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device.  
  
> [!NOTE]
>  The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP.  
  
   
  
## Examples  
 This example demonstrates the Beep method by playing the first few notes of a song through the console speaker.  
  
 [!code-cpp[console.beep2#1](~/add/codesnippet/cpp/m-system.console.beep-sy_1.cpp)]
 [!code-vb[console.beep2#1](~/add/codesnippet/visualbasic/m-system.console.beep-sy_1.vb)]
 [!code-cs[console.beep2#1](~/add/codesnippet/csharp/m-system.console.beep-sy_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="frequency" /> is less than 37 or more than 32767 hertz.  
  
 -or-  
  
 <paramref name="duration" /> is less than or equal to zero.</exception>
        <exception cref="T:System.Security.HostProtectionException">This method was executed on a server, such as SQL Server, that does not permit access to the console.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the buffer area.</summary>
        <value>The current height, in rows, of the buffer area.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window. In contrast, the <xref:System.Console.WindowHeight%2A> property defines the number of rows that are actually displayed in the console window at any particular time. If the number of rows actually written to the buffer exceeds the number of rows defined by the <xref:System.Console.WindowHeight%2A> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <xref:System.Console.WindowHeight%2A> property and are located anywhere in the buffer.  
  
 If a set operation decreases the value of the BufferHeight property, the uppermost lines are removed. For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.  
  
   
  
## Examples  
 This example demonstrates the BufferHeight and <xref:System.Console.BufferWidth%2A> properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  
  
 [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferh_1.cs)]
 [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferh_1.cpp)]
 [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferh_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than or equal to zero.  
  
 -or-  
  
 The value in a set operation is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  
  
 -or-  
  
 The value in a set operation is less than &lt;xref:System.Console.WindowTop%2A&gt; + &lt;xref:System.Console.WindowHeight%2A&gt;.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the buffer area.</summary>
        <value>The current width, in columns, of the buffer area.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a set operation decreases the value of the BufferWidth property, the rightmost columns are removed. For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.  
  
   
  
## Examples  
 This example demonstrates the <xref:System.Console.BufferHeight%2A> and BufferWidth properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  
  
 [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferw_1.cs)]
 [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferw_1.cpp)]
 [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferw_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than or equal to zero.  
  
 -or-  
  
 The value in a set operation is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  
  
 -or-  
  
 The value in a set operation is less than &lt;xref:System.Console.WindowLeft%2A&gt; + &lt;xref:System.Console.WindowWidth%2A&gt;.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.ConsoleModifiers" /> modifier key (Ctrl) and either the <see cref="T:System.ConsoleKey" /> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is used in conjunction with <xref:System.ConsoleCancelEventHandler?displayProperty=fullName> and <xref:System.ConsoleCancelEventArgs?displayProperty=fullName>. The CancelKeyPress event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate. For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  
  
 When the user presses either Ctrl+C or Ctrl+Break, the CancelKeyPress event is fired and the application's <xref:System.ConsoleCancelEventHandler> event handler is executed. The event handler is passed a <xref:System.ConsoleCancelEventArgs> object that has two useful properties:  
  
-   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <xref:System.ConsoleSpecialKey?displayProperty=fullName>) or Ctrl+Break (the property value is <xref:System.ConsoleSpecialKey?displayProperty=fullName>).  
  
-   <xref:System.ConsoleCancelEventArgs.Cancel%2A>, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break. By default, the <xref:System.ConsoleCancelEventArgs.Cancel%2A> property is `false`, which causes program execution to terminate when the event handler exits. Changing its property to `true` specifies that the application should continue to execute.  
  
> [!TIP]
>  If your application has simple requirements, you can use the <xref:System.Console.TreatControlCAsInput%2A> property instead of this event. By setting this property to `false`, you can ensure that your application always exits if the user presses Ctrl+C. By setting it to `true`, you can ensure that pressing Ctrl+C will not terminate the application.  
  
 The event handler for this event is executed on a thread pool thread.  
  
   
  
## Examples  
 The following example demonstrates how the CancelKeyPress event is used. When you press Ctrl+C, the read operation is interrupted and the `myHandler` event handler is invoked. Upon entry to the event handler, the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property is `false`, which means that the current process will terminate when the event handler terminates. However, the event handler sets the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property to `true`, which means that the process will not terminate and the read operation will resume.  
  
 [!code-cs[console.cancelkeypress#1](~/add/codesnippet/csharp/e-system.console.cancelk_1.cs)]
 [!code-cpp[console.cancelkeypress#1](~/add/codesnippet/cpp/e-system.console.cancelk_1.cpp)]
 [!code-vb[console.cancelkeypress#1](~/add/codesnippet/visualbasic/e-system.console.cancelk_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</summary>
        <value>
          <see langword="true" /> if CAPS LOCK is turned on; <see langword="false" /> if CAPS LOCK is turned off.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the console buffer and corresponding console window of display information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the Clear method is equivalent invoking the MS-DOS `cls` command in the command prompt window. When the Clear method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.  
  
> [!NOTE]
>  Attempting to call the Clear method when a console application's output is redirected to a file throws a <xref:System.IO.IOException>. To prevent this, always wrap a call to the Clear method in a `try`…`catch` block.  
  
   
  
## Examples  
 The following example uses the Clear method to clear the console before it executes a loop, prompts the user to select a foreground and background color and to enter a string to display. If the user chooses not to exit the program, the console's original foreground and background colors are restored and the Clear method is called again before re-executing the loop.  
  
 [!code-vb[System.Console.Clear#1](~/add/codesnippet/visualbasic/m-system.console.clear_1.vb)]
 [!code-cs[System.Console.Clear#1](~/add/codesnippet/csharp/m-system.console.clear_1.cs)]  
  
 The example relies on a `GetKeyPress` method to validate the user's selection of a foreground and background color.  
  
 This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and Clear methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&#124;", and "-" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  
  
 [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.clear_2.cs)]
 [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.clear_2.cpp)]
 [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.clear_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the column position of the cursor within the buffer area.</summary>
        <value>The current position, in columns, of the cursor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example demonstrates the CursorLeft and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&#124;", and "-" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  
  
 [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursorl_1.cs)]
 [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursorl_1.cpp)]
 [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursorl_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than zero.  
  
 -or-  
  
 The value in a set operation is greater than or equal to &lt;xref:System.Console.BufferWidth%2A&gt;.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the cursor within a character cell.</summary>
        <value>The size of the cursor expressed as a percentage of the height of a character cell. The property value ranges from 1 to 100.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.  
  
   
  
## Examples  
 This example demonstrates the CursorSize property. The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.  
  
 [!code-cs[console.cursorsize#1](~/add/codesnippet/csharp/p-system.console.cursors_1.cs)]
 [!code-cpp[console.cursorsize#1](~/add/codesnippet/cpp/p-system.console.cursors_1.cpp)]
 [!code-vb[console.cursorsize#1](~/add/codesnippet/visualbasic/p-system.console.cursors_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 1 or greater than 100.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the row position of the cursor within the buffer area.</summary>
        <value>The current position, in rows, of the cursor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example demonstrates the <xref:System.Console.CursorLeft%2A> and CursorTop properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&#124;", and "-" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  
  
 [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursortop_1.cs)]
 [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursortop_1.cpp)]
 [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursortop_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than zero.  
  
 -or-  
  
 The value in a set operation is greater than or equal to &lt;xref:System.Console.BufferHeight%2A&gt;.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the cursor is visible.</summary>
        <value>
          <see langword="true" /> if the cursor is visible; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example demonstrates the CursorVisible property. The example makes the cursor visible if the first column of input is a '+' character or invisible if the input is a '-' character.  
  
 [!code-cs[console.cursorvis#1](~/add/codesnippet/csharp/p-system.console.cursorv_1.cs)]
 [!code-vb[console.cursorvis#1](~/add/codesnippet/visualbasic/p-system.console.cursorv_1.vb)]
 [!code-cpp[console.cursorvis#1](~/add/codesnippet/cpp/p-system.console.cursorv_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the standard error output stream.</summary>
        <value>A &lt;xref:System.IO.TextWriter&gt; that represents the standard error output stream.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This standard error stream is set to the console by default. It can be set to another stream with the <xref:System.Console.SetError%2A> method. After the standard error stream is redirected, it can be reacquired by calling the <xref:System.Console.OpenStandardError%2A> method.  
  
 In console applications whose informational output is often redirected to a file, the standard error stream available through the Error property can be used to display information to the console even if output is redirected. The following example displays product tables for 10 numbers at a time starting with 1. After every set of 10 numbers, the Error property is used to ask the user whether to display the next set. If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.  
  
 [!code-cs[System.Console.Error#1](~/add/codesnippet/csharp/p-system.console.error_1.cs)]
 [!code-vb[System.Console.Error#1](~/add/codesnippet/visualbasic/p-system.console.error_1.vb)]  
  
   
  
## Examples  
 The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the `tabSize` variable. It redirects the standard input and output streams to files, but uses the Error property to write the standard error stream to the console. It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.  
  
 [!code-cpp[Console-EXPANDTABSEX#1](~/add/codesnippet/cpp/p-system.console.error_2.cpp)]
 [!code-cs[Console-EXPANDTABSEX#1](~/add/codesnippet/csharp/p-system.console.error_2.cs)]
 [!code-vb[Console-EXPANDTABSEX#1](~/add/codesnippet/visualbasic/p-system.console.error_2.vb)]  
  
 The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the <xref:System.Console.OpenStandardError%2A> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  
  
 [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/p-system.console.error_3.cs)]
 [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/p-system.console.error_3.vb)]  
  
 Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color of the console.</summary>
        <value>A <see cref="T:System.ConsoleColor" /> that specifies the foreground color of the console; that is, the color of each character that is displayed. The default is gray.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor>.  
  
   
  
## Examples  
 The following example checks whether the console's background color is black and, if it is, it changes the background color to red and the foreground color to black.  
  
 [!code-cs[System.ConsoleColor#2](~/add/codesnippet/csharp/p-system.console.foregro_1.cs)]
 [!code-vb[System.ConsoleColor#2](~/add/codesnippet/visualbasic/p-system.console.foregro_1.vb)]  
  
 The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and ForegroundColor properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  
  
 [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.foregro_2.vb)]
 [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.foregro_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The color specified in a set operation is not a valid member of <see cref="T:System.ConsoleColor" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the standard input stream.</summary>
        <value>A &lt;xref:System.IO.TextReader&gt; that represents the standard input stream.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is set to the standard input stream by default. This property can be set to another stream with the <xref:System.Console.SetIn%2A> method.  
  
 Read operations on the standard input stream execute synchronously. That is, they block until the specified read operation has completed. This is true even if an asynchronous method, such as <xref:System.IO.TextReader.ReadLineAsync%2A>, is called on the <xref:System.IO.TextReader> object returned by the In property.  
  
   
  
## Examples  
 The following sample illustrates the use of the `In` property.  
  
 [!code-cpp[consolein#1](~/add/codesnippet/cpp/p-system.console.in_1.cpp)]
 [!code-cs[consolein#1](~/add/codesnippet/csharp/p-system.console.in_1.cs)]
 [!code-vb[consolein#1](~/add/codesnippet/visualbasic/p-system.console.in_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the encoding the console uses to read input.</summary>
        <value>The encoding used to read console input.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The console uses the input encoding to translate keyboard input into a corresponding character. The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters. Different code pages include different special characters, typically customized for a language or a group of languages.  
  
 Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current input encoding. This can occur if the value of the InputEncoding property is modified by some means other than an assignment to the InputEncoding property, such as calling the Windows `SetConsoleCP` function or using the `chcp` command from a PowerShell script.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property value in a set operation is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An error occurred during the execution of this operation.</exception>
        <exception cref="T:System.Security.SecurityException">Your application does not have permission to perform this operation.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for reading and writing to top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</summary>
        <value>
          <see langword="true" /> if error output is redirected; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether input has been redirected from the standard input stream.</summary>
        <value>
          <see langword="true" /> if input is redirected; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether output has been redirected from the standard output stream.</summary>
        <value>
          <see langword="true" /> if output is redirected; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether a key press is available in the input stream.</summary>
        <value>
          <see langword="true" /> if a key press is available; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The property value is returned immediately; that is, the KeyAvailable property does not block input until a key press is available.  
  
 Use the KeyAvailable property in conjunction with only the <xref:System.Console.ReadKey%2A> method, not the <xref:System.Console.Read%2A> or <xref:System.Console.ReadLine%2A> methods.  
  
   
  
## Examples  
 The following example demonstrates how to use the KeyAvailable property to create a loop that runs until a key is pressed.  
  
 [!code-cs[console.keyavailable#1](~/add/codesnippet/csharp/p-system.console.keyavai_1.cs)]
 [!code-cpp[console.keyavailable#1](~/add/codesnippet/cpp/p-system.console.keyavai_1.cpp)]
 [!code-vb[console.keyavailable#1](~/add/codesnippet/visualbasic/p-system.console.keyavai_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.InvalidOperationException">Standard input is redirected to a file instead of the keyboard.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the largest possible number of console window rows, based on the current font and screen resolution.</summary>
        <value>The height of the largest possible console window measured in rows.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the largest possible number of console window columns, based on the current font and screen resolution.</summary>
        <value>The width of the largest possible console window measured in columns.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">The leftmost column of the source area.</param>
        <param name="sourceTop">The topmost row of the source area.</param>
        <param name="sourceWidth">The number of columns in the source area.</param>
        <param name="sourceHeight">The number of rows in the source area.</param>
        <param name="targetLeft">The leftmost column of the destination area.</param>
        <param name="targetTop">The topmost row of the destination area.</param>
        <summary>Copies a specified source area of the screen buffer to a specified destination area.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.  
  
 The MoveBufferArea method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors. Otherwise, the intersected portion of the source area is not filled.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">One or more of the parameters is less than zero.  
  
 -or-  
  
 <paramref name="sourceLeft" /> or <paramref name="targetLeft" /> is greater than or equal to &lt;xref:System.Console.BufferWidth%2A&gt;.  
  
 -or-  
  
 <paramref name="sourceTop" /> or <paramref name="targetTop" /> is greater than or equal to &lt;xref:System.Console.BufferHeight%2A&gt;.  
  
 -or-  
  
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> is greater than or equal to &lt;xref:System.Console.BufferHeight%2A&gt;.  
  
 -or-  
  
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> is greater than or equal to &lt;xref:System.Console.BufferWidth%2A&gt;.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
        <Parameter Name="sourceChar" Type="System.Char" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">The leftmost column of the source area.</param>
        <param name="sourceTop">The topmost row of the source area.</param>
        <param name="sourceWidth">The number of columns in the source area.</param>
        <param name="sourceHeight">The number of rows in the source area.</param>
        <param name="targetLeft">The leftmost column of the destination area.</param>
        <param name="targetTop">The topmost row of the destination area.</param>
        <param name="sourceChar">The character used to fill the source area.</param>
        <param name="sourceForeColor">The foreground color used to fill the source area.</param>
        <param name="sourceBackColor">The background color used to fill the source area.</param>
        <summary>Copies a specified source area of the screen buffer to a specified destination area.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.  
  
 The <xref:System.Console.MoveBufferArea%2A> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with the character specified by `sourceChar`, using the colors specified by `sourceForeColor` and `sourceBackColor`. Otherwise, the intersected portion of the source area is not filled.  
  
 The <xref:System.Console.MoveBufferArea%2A> method performs no operation if `sourceWidth` or `sourceHeight` is zero.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">One or more of the parameters is less than zero.  
  
 -or-  
  
 <paramref name="sourceLeft" /> or <paramref name="targetLeft" /> is greater than or equal to &lt;xref:System.Console.BufferWidth%2A&gt;.  
  
 -or-  
  
 <paramref name="sourceTop" /> or <paramref name="targetTop" /> is greater than or equal to &lt;xref:System.Console.BufferHeight%2A&gt;.  
  
 -or-  
  
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> is greater than or equal to &lt;xref:System.Console.BufferHeight%2A&gt;.  
  
 -or-  
  
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> is greater than or equal to &lt;xref:System.Console.BufferWidth%2A&gt;.</exception>
        <exception cref="T:System.ArgumentException">One or both of the color parameters is not a member of the <see cref="T:System.ConsoleColor" /> enumeration.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</summary>
        <value>
          <see langword="true" /> if NUM LOCK is turned on; <see langword="false" /> if NUM LOCK is turned off.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the standard error stream.</summary>
        <returns>The standard error stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method.  
  
   
  
## Examples  
 The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the OpenStandardError method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  
  
 [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/m-system.console.opensta_4_1.cs)]
 [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/m-system.console.opensta_4_1.vb)]  
  
 Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">The internal stream buffer size.</param>
        <summary>Acquires the standard error stream, which is set to a specified buffer size.</summary>
        <returns>The standard error stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> is less than or equal to zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the standard input stream.</summary>
        <returns>The standard input stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to reacquire the standard input stream after it has been changed by the <xref:System.Console.SetIn%2A> method.  
  
   
  
## Examples  
 The following example illustrates the use of the `OpenStandardInput` property.  
  
 [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_3_1.cs)]
 [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_3_1.vb)]
 [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_3_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">The internal stream buffer size.</param>
        <summary>Acquires the standard input stream, which is set to a specified buffer size.</summary>
        <returns>The standard input stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetIn%2A> method.  
  
   
  
## Examples  
 The following example illustrates the use of the `OpenStandardInput` property.  
  
 [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_2_1.cs)]
 [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_2_1.vb)]
 [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_2_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> is less than or equal to zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the standard output stream.</summary>
        <returns>The standard output stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method.  
  
   
  
## Examples  
 The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command-line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_0_1.cpp)]
 [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_0_1.vb)]
 [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">The internal stream buffer size.</param>
        <summary>Acquires the standard output stream, which is set to a specified buffer size.</summary>
        <returns>The standard output stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method.  
  
   
  
## Examples  
 The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_1_1.cpp)]
 [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_1_1.vb)]
 [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> is less than or equal to zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the standard output stream.</summary>
        <value>A &lt;xref:System.IO.TextWriter&gt; that represents the standard output stream.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is set to the standard output stream by default. This property can be set to another stream with the <xref:System.Console.SetOut%2A> method.  
  
 Note that calls to `Console.Out.WriteLine` methods are equivalent to calls to the corresponding <xref:System.Console.WriteLine%2A> methods.  
  
   
  
## Examples  
 The following example uses the Out property to display an array containing the names of files in the application's current directory to the standard output device. It then sets the standard output to a file named Files.txt and lists the array elements to the file. Finally, it sets the output to the standard output stream and again displays the array elements to the standard output device.  
  
 [!code-cs[System.Console.Out#1](~/add/codesnippet/csharp/p-system.console.out_1.cs)]
 [!code-vb[System.Console.Out#1](~/add/codesnippet/visualbasic/p-system.console.out_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the encoding the console uses to write output.</summary>
        <value>The encoding used to write console output.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The console uses the output encoding to translate characters written by an application into corresponding console display characters. The default code page that the console uses is determined by the system locale.  
  
 Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current output encoding. This can occur if the value of the OutputEncoding property is modified by some means other than an assignment to the OutputEncoding property, such as calling the Windows `SetConsoleOutputCP` function.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property value in a set operation is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An error occurred during the execution of this operation.</exception>
        <exception cref="T:System.Security.SecurityException">Your application does not have permission to perform this operation.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for reading and writing to top-level windows and subwindows.  Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next character from the standard input stream.</summary>
        <returns>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Read method blocks its return while you type input characters; it terminates when you press the <xref:System.ConsoleKey> key. Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence). Subsequent calls to the Read method retrieve your input one character at a time. After the final character is retrieved, Read blocks its return again and the cycle repeats.  
  
> [!IMPORTANT]
>  The <xref:System.Console.ReadLine%2A> method, or the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method are preferable to using the Read method.  
  
 Note that the method does not return -1 unless you perform one of the following actions:  
  
-   Simultaneously press the <xref:System.ConsoleModifiers> modifier key and <xref:System.ConsoleKey> console key (Ctrl+Z), which signals the end-of-file condition.  
  
-   Press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows.  
  
-   Redirect the input stream to a source, such as a text file, that has an actual end-of-file character.  
  
   
  
## Examples  
 The following example demonstrates the Read method.  
  
 [!code-cpp[console.read#1](~/add/codesnippet/cpp/m-system.console.read_1.cpp)]
 [!code-cs[console.read#1](~/add/codesnippet/csharp/m-system.console.read_1.cs)]
 [!code-vb[console.read#1](~/add/codesnippet/visualbasic/m-system.console.read_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.</summary>
        <returns>An object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key. The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ReadKey method waits, that is, blocks on the thread issuing the ReadKey method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the ReadKey method to return.  
  
 Depending on your application, you might want to use the ReadKey method in conjunction with the <xref:System.Console.KeyAvailable%2A> property.  
  
 The ReadKey method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method.  
  
   
  
## Examples  
 One of the most common uses of the ReadKey method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app.  
  
 [!code-cs[System.Console.ReadKey#1](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]
 [!code-vb[System.Console.ReadKey#1](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]  
  
 Note that this overload of the <xref:System.Console.ReadKey%2A> method by default echoes any displayable keys that the user presses to the console. To suppress them, call the  <xref:System.Console.ReadKey%2A> method with an `intercept` argument of `true`.  
  
 The following example uses the ReadKey method to display information about which key the user pressed..  
  
 [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]
 [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]
 [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Console.In%2A&gt; property is redirected from some stream other than the console.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="intercept">Determines whether to display the pressed key in the console window. <see langword="true" /> to not display the pressed key; otherwise, <see langword="false" />.</param>
        <summary>Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.</summary>
        <returns>An object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key. The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Console.ReadKey%2A> method waits, that is, blocks on the thread issuing the <xref:System.Console.ReadKey%2A> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the <xref:System.Console.ReadKey%2A> method to return.  
  
 If the `intercept` parameter is `true`, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.  
  
 Depending on your application, you might want to use the <xref:System.Console.ReadKey%2A> method in conjunction with the <xref:System.Console.KeyAvailable%2A> property.  
  
 The <xref:System.Console.ReadKey%2A> method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method.  
  
   
  
## Examples  
 One of the most common uses of the <xref:System.Console.ReadKey%2A> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app. Note that, if the user presses any other key, it is not echoed to the console.  
  
 [!code-vb[System.Console.ReadKey#2](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]
 [!code-cs[System.Console.ReadKey#2](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]  
  
 The following example uses the ReadKey method to display information about the key pressed by a user without echoing that key to the console.  
  
 [!code-cs[console.readkey2#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]
 [!code-cpp[console.readkey2#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]
 [!code-vb[console.readkey2#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Console.In%2A&gt; property is redirected from some stream other than the console.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next line of characters from the standard input stream.</summary>
        <returns>The next line of characters from the input stream, or <see langword="null" /> if no more lines are available.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ReadLine method reads a line from the standard input stream. (For the definition of a line, see the paragraph after the following list.) This means that:  
  
-   If the standard input device is the keyboard, the ReadLine method blocks until the user presses the **Enter** key.  
  
     One of the most common uses of the ReadLine method is to pause program execution before clearing the console and displaying new information to it, or to prompt the user to press the Enter key before terminating the application. The following example illustrates this.  
  
     [!code-cpp[System.Console.ReadLine#6](~/add/codesnippet/cpp/m-system.console.readline_1.cpp)]
     [!code-vb[System.Console.ReadLine#6](~/add/codesnippet/visualbasic/m-system.console.readline_1.vb)]
     [!code-cs[System.Console.ReadLine#6](~/add/codesnippet/csharp/m-system.console.readline_1.cs)]  
  
-   If standard input is redirected to a file, the ReadLine method reads a line of text from a file. For example, the following is a text file named ReadLine1.txt:  
  
    ```  
  
    This is the first line.  
    This is the second line.  
    This is the third line.  
    This is the fourth line.  
  
    ```  
  
     The following example uses the ReadLine method to read input that is redirected from a file. The read operation terminates when the  method returns `null`, which indicates that no lines remain to be read.  
  
     [!code-cs[System.Console.ReadLine#3](~/add/codesnippet/csharp/m-system.console.readline_2.cs)]
     [!code-vb[System.Console.ReadLine#3](~/add/codesnippet/visualbasic/m-system.console.readline_2.vb)]  
  
     After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax  
  
    ```  
    ReadLine1 < ReadLine1.txt  
    ```  
  
     to read the contents of the file and display them to the console.  
  
 A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property. The returned string does not contain the terminating character(s). By default, the method reads input from a 256-character input buffer. Because this includes the <xref:System.Environment.NewLine%2A?displayProperty=fullName> character(s), the method can read lines that contain up to 254 characters. To read longer lines, call the <xref:System.Console.OpenStandardInput%28System.Int32%29> method.  
  
 The ReadLine method executes synchronously. That is, it blocks until a line is read or the Ctrl+Z keyboard combination is pressed. The <xref:System.Console.In%2A> property returns a <xref:System.IO.TextReader> object that represents the standard input stream and that has both a synchronous <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> method and an asynchronous <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> method. However, when used as the console's standard input stream, the <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> executes synchronously rather than asynchronously and returns a `Task<String>` only after the read operation has completed.  
  
 If this method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> object is advanced by the number of characters the method was able to read, but the characters already read into the internal ReadLine buffer are discarded. Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.TextReader>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized. To avoid such a situation and to produce robust code, you should use the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method and store the read characters in a pre-allocated buffer.  
  
 If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns `null`. This enables the user to prevent further keyboard input when the ReadLine method is called in a loop. The following example illustrates this scenario.  
  
 [!code-cpp[System.Console.ReadLine#1](~/add/codesnippet/cpp/m-system.console.readline_3.cpp)]
 [!code-cs[System.Console.ReadLine#1](~/add/codesnippet/csharp/m-system.console.readline_3.cs)]
 [!code-vb[System.Console.ReadLine#1](~/add/codesnippet/visualbasic/m-system.console.readline_3.vb)]  
  
   
  
## Examples  
 The following example requires two command line arguments: the name of an existing text file, and the name of a file to write the output to. It opens the existing text file and redirects the standard input from the keyboard to that file. It also redirects the standard output from the console to the output file. It then uses the ReadLine method to read each line in the file, replaces every sequence of four spaces with a tab character, and uses the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method to write the result to the output file.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.readline_4.cpp)]
 [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.readline_4.vb)]
 [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.readline_4.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line of characters is greater than &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the foreground and background console colors to their defaults.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The foreground and background colors are restored to the colors that existed when the current process began. For more information, see the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties.  
  
   
  
## Examples  
 The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the ResetColor method to restore the original console colors.  
  
 [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/m-system.console.resetco_1.vb)]
 [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/m-system.console.resetco_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">The width of the buffer area measured in columns.</param>
        <param name="height">The height of the buffer area measured in rows.</param>
        <summary>Sets the height and width of the screen buffer area to the specified values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, SetBufferSize, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  
  
 [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setbuff_1.cpp)]
 [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setbuff_1.vb)]
 [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setbuff_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="height" /> or <paramref name="width" /> is less than or equal to zero.  
  
 -or-  
  
 <paramref name="height" /> or <paramref name="width" /> is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  
  
 -or-  
  
 <paramref name="width" /> is less than &lt;xref:System.Console.WindowLeft%2A&gt; + &lt;xref:System.Console.WindowWidth%2A&gt;.  
  
 -or-  
  
 <paramref name="height" /> is less than &lt;xref:System.Console.WindowTop%2A&gt; + &lt;xref:System.Console.WindowHeight%2A&gt;.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">The column position of the cursor. Columns are numbered from left to right starting at 0.</param>
        <param name="top">The row position of the cursor. Rows are numbered from top to bottom starting at 0.</param>
        <summary>Sets the position of the cursor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SetCursorPosition method to specify where the next write operation in the console window is to begin. If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.  
  
 The cursor automatically moves to the next character position each time a character is written to the console window. If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible. If you want to write a character to the bottom right character position without causing the console window to scroll, use the <xref:System.Console.MoveBufferArea%2A> method to move a character to that position.  
  
   
  
## Examples  
 This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the SetCursorPosition and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&#124;", and "-" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  
  
 [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.setcurs_1.cs)]
 [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.setcurs_1.cpp)]
 [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.setcurs_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> or <paramref name="top" /> is less than zero.  
  
 -or-  
  
 <paramref name="left" /> is greater than or equal to &lt;xref:System.Console.BufferWidth%2A&gt;.  
  
 -or-  
  
 <paramref name="top" /> is greater than or equal to &lt;xref:System.Console.BufferHeight%2A&gt;.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newError">A stream that is the new standard error output.</param>
        <summary>Sets the &lt;xref:System.Console.Error%2A&gt; property to the specified &lt;xref:System.IO.TextWriter&gt; object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the <xref:System.Console.Error%2A> property is set to the standard error output stream.  
  
 A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send error messages to a file.  
  
   
  
## Examples  
 The following example shows how to redirect the standard error stream to a file.  
  
 [!code-vb[System.Console.SetError#1](~/add/codesnippet/visualbasic/m-system.console.seterro_1.vb)]
 [!code-cs[System.Console.SetError#1](~/add/codesnippet/csharp/m-system.console.seterro_1.cs)]
 [!code-cpp[System.Console.SetError#1](~/add/codesnippet/cpp/m-system.console.seterro_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newError" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="newIn">A stream that is the new standard input.</param>
        <summary>Sets the &lt;xref:System.Console.In%2A&gt; property to the specified &lt;xref:System.IO.TextReader&gt; object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the <xref:System.Console.In%2A> property is set to the standard input stream.  
  
 A <xref:System.IO.StreamReader> that encapsulates a <xref:System.IO.FileStream> can be used to receive input from a file.  
  
   
  
## Examples  
 The following example illustrates the use of the SetIn method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setin-s_1.cpp)]
 [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setin-s_1.vb)]
 [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setin-s_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newIn" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newOut">A stream that is the new standard output.</param>
        <summary>Sets the &lt;xref:System.Console.Out%2A&gt; property to the specified &lt;xref:System.IO.TextWriter&gt; object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the <xref:System.Console.Out%2A> property is set to the standard output stream.  
  
 A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send output to a file. For example:  
  
 [!code-cs[System.Console.SetOut#1](~/add/codesnippet/csharp/m-system.console.setout-_1.cs)]
 [!code-vb[System.Console.SetOut#1](~/add/codesnippet/visualbasic/m-system.console.setout-_1.vb)]
 [!code-cpp[System.Console.SetOut#1](~/add/codesnippet/cpp/m-system.console.setout-_1.cpp)]  
  
   
  
## Examples  
 The following example illustrates the use of the SetOut method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setout-_2.cpp)]
 [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setout-_2.vb)]
 [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setout-_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newOut" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">The column position of the upper left  corner of the console window.</param>
        <param name="top">The row position of the upper left corner of the console window.</param>
        <summary>Sets the position of the console window relative to the screen buffer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The operating system window displays the console window, and the console window displays a portion of the screen buffer. The SetWindowPosition method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.  
  
 The console and operating system windows generally do not affect each other. However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window. In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the SetWindowPosition method affects the position of the operating system window scroll bars.  
  
   
  
## Examples  
 The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the SetWindowPosition, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  
  
 [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setwind_0_1.cpp)]
 [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setwind_0_1.vb)]
 [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setwind_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> or <paramref name="top" /> is less than zero.  
  
 -or-  
  
 <paramref name="left" /> + &lt;xref:System.Console.WindowWidth%2A&gt; is greater than &lt;xref:System.Console.BufferWidth%2A&gt;.  
  
 -or-  
  
 <paramref name="top" /> + &lt;xref:System.Console.WindowHeight%2A&gt; is greater than &lt;xref:System.Console.BufferHeight%2A&gt;.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">The width of the console window measured in columns.</param>
        <param name="height">The height of the console window measured in rows.</param>
        <summary>Sets the height and width of the console window to the specified values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example demonstrates the SetWindowSize method, and the <xref:System.Console.WindowWidth%2A> and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  
  
 The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.  
  
 [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/m-system.console.setwind_1_1.cpp)]
 [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/m-system.console.setwind_1_1.vb)]
 [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/m-system.console.setwind_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="width" /> or <paramref name="height" /> is less than or equal to zero.  
  
 -or-  
  
 <paramref name="width" /> plus &lt;xref:System.Console.WindowLeft%2A&gt; or <paramref name="height" /> plus &lt;xref:System.Console.WindowTop%2A&gt; is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  
  
 -or-  
  
 <paramref name="width" /> or <paramref name="height" /> is greater than the largest possible window width or height for the current screen resolution and console font.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the title to display in the console title bar.</summary>
        <value>The string to be displayed in the title bar of the console. The maximum length of the title string is 24500 characters.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example demonstrates the Title property. The example displays the current title of the operating system window, waits for a key press, then displays a new title.  
  
 [!code-cs[console.title#1](~/add/codesnippet/csharp/p-system.console.title_1.cs)]
 [!code-cpp[console.title#1](~/add/codesnippet/cpp/p-system.console.title_1.cpp)]
 [!code-vb[console.title#1](~/add/codesnippet/visualbasic/p-system.console.title_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">In a get operation, the retrieved title is longer than 24500 characters.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the specified title is longer than 24500 characters.</exception>
        <exception cref="T:System.ArgumentNullException">In a set operation, the specified title is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the combination of the <see cref="T:System.ConsoleModifiers" /> modifier key and <see cref="T:System.ConsoleKey" /> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</summary>
        <value>
          <see langword="true" /> if Ctrl+C is treated as ordinary input; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the value of the TreatControlCAsInput property is `false` and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process. This is the default value.  
  
> [!CAUTION]
>  Use this property judiciously because setting it to `true` has such a dramatic effect. Most users expect Ctrl+C to terminate a console application. If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination.  
  
   
  
## Examples  
 The following example demonstrates the TreatControlCAsInput property.  
  
 [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/p-system.console.treatco_1.cs)]
 [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/p-system.console.treatco_1.cpp)]
 [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/p-system.console.treatco_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Unable to get or set the input mode of the console input buffer.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the console window area.</summary>
        <value>The height of the console window measured in rows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Attempting to set the value of the WindowHeight property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception. To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.  
  
   
  
## Examples  
 This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the <xref:System.Console.WindowWidth%2A> and WindowHeight properties. You must run the example to see the full effect of changing the console window size.  
  
 The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  
  
 [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windowh_1.cpp)]
 [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windowh_1.vb)]
 [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windowh_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the &lt;xref:System.Console.WindowWidth%2A&gt; property or the value of the WindowHeight property is less than or equal to 0.  
  
 -or-  
  
 The value of the WindowHeight property plus the value of the &lt;xref:System.Console.WindowTop%2A&gt; property is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  
  
 -or-  
  
 The value of the &lt;xref:System.Console.WindowWidth%2A&gt; property or the value of the WindowHeight property is greater than the largest possible window width or height for the current screen resolution and console font.</exception>
        <exception cref="T:System.IO.IOException">Error reading or writing information.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the leftmost position of the console window area relative to the screen buffer.</summary>
        <value>The leftmost console window position measured in columns.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties. The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties. The WindowLeft property determines which column of the buffer area is displayed in the first column of the console window. The value of the WindowLeft property can range from 0 to <xref:System.Console.BufferWidth%2A> - <xref:System.Console.WindowWidth%2A>. Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>.  
  
 When a console window first opens, the default value of the WindowLeft property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area. The default width of both the console window and the buffer area is 80 columns. This means that the WindowLeft property can be modified only if the console window is made narrower or the buffer area is made wider.  
  
 Note that if the width of the buffer area exceeds the width of the console window, the value of the WindowLeft property is automatically adjusted when the user uses the horizontal scroll bar to define the window's relationship to the buffer area.  
  
 Attempting to set the value of the WindowLeft property when output is redirected throws an <xref:System.IO.IOException> exception. To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.  
  
   
  
## Examples  
 The following example opens an 80-column console window and defines a buffer area that is 120 columns wide. It displays information on window and buffer size, and then waits for the user to press either the LEFT ARROW key or the RIGHT ARROW key. In the former case, it decrements the value of the WindowLeft property by one if the result is a legal value. In the latter case, it increases the value of the WindowLeft property by one if the result would be legal. Note that the example does not have to handle an <xref:System.ArgumentOutOfRangeException>, because it checks that the value to be assigned to the WindowLeft property is not negative and does not cause the sum of the WindowLeft and <xref:System.Console.WindowWidth%2A> properties to exceed the <xref:System.Console.BufferWidth%2A> property value.  
  
 [!code-vb[System.Console.WindowLeft#1](~/add/codesnippet/visualbasic/p-system.console.windowl_1.vb)]
 [!code-cs[System.Console.WindowLeft#1](~/add/codesnippet/csharp/p-system.console.windowl_1.cs)]
 [!code-cpp[System.Console.WindowLeft#1](~/add/codesnippet/cpp/p-system.console.windowl_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the value to be assigned is less than zero.  
  
 -or-  
  
 As a result of the assignment, WindowLeft plus &lt;xref:System.Console.WindowWidth%2A&gt; would exceed &lt;xref:System.Console.BufferWidth%2A&gt;.</exception>
        <exception cref="T:System.IO.IOException">Error reading or writing information.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the top position of the console window area relative to the screen buffer.</summary>
        <value>The uppermost console window position measured in rows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties. The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties. The WindowTop property determines which row of the buffer area is displayed in the first column of the console window. The value of the WindowTop property can range from 0 to <xref:System.Console.BufferHeight%2A> - <xref:System.Console.WindowHeight%2A>. Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>.  
  
 Attempting to set the value of the WindowTop property when output is redirected throws an <xref:System.IO.IOException> exception. To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.  
  
   
  
## Examples  
 The following example demonstrates the <xref:System.Console.WindowLeft%2A>, WindowTop, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  
  
 [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/p-system.console.windowtop_1.cpp)]
 [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/p-system.console.windowtop_1.vb)]
 [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/p-system.console.windowtop_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the value to be assigned is less than zero.  
  
 -or-  
  
 As a result of the assignment, WindowTop plus &lt;xref:System.Console.WindowHeight%2A&gt; would exceed &lt;xref:System.Console.BufferHeight%2A&gt;.</exception>
        <exception cref="T:System.IO.IOException">Error reading or writing information.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the console window.</summary>
        <value>The width of the console window measured in columns.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Attempting to set the value of the WindowWidth property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception. To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.  
  
   
  
## Examples  
 This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the WindowWidth and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  
  
 The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  
  
 [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windoww_1.cpp)]
 [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windoww_1.vb)]
 [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windoww_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the WindowWidth property or the value of the &lt;xref:System.Console.WindowHeight%2A&gt; property is less than or equal to 0.  
  
 -or-  
  
 The value of the &lt;xref:System.Console.WindowHeight%2A&gt; property plus the value of the &lt;xref:System.Console.WindowTop%2A&gt; property is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  
  
 -or-  
  
 The value of the WindowWidth property or the value of the &lt;xref:System.Console.WindowHeight%2A&gt; property is greater than the largest possible window width or height for the current screen resolution and console font.</exception>
        <exception cref="T:System.IO.IOException">Error reading or writing information.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified Boolean value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling <xref:System.Boolean.ToString%2A?displayProperty=fullName>, which outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_8_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_8_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_8_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the specified Unicode character value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_9_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_9_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_9_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">A Unicode character array.</param>
        <summary>Writes the specified array of Unicode characters to the standard output stream.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified &lt;xref:System.Decimal&gt; value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling <xref:System.Decimal.ToString%2A?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_12_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_12_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_12_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_6_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_6_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_6_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_10_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_10_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_10_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_0_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_0_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The value to write, or <see langword="null" />.</param>
        <summary>Writes the text representation of the specified object to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is `null`, nothing is written and no exception is thrown. Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_3_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_3_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_3_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_1_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_1_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the specified string value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If value is `null`, nothing is written to the standard output stream.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_5_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_5_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_5_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_7_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_7_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_7_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_4_1.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_4_1.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_4_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg0">An object to write using `format`.</param>
        <summary>Writes the text representation of the specified object to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_2_1.cpp)]
 [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_2_1.cs)]
 [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_1.vb)]  
  
 The following example illustrates the use of the Write method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_2.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_2_2.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_2_2.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg">An array of objects to write using `format`.</param>
        <summary>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the  [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
 The `arg` parameter is a parameter array. Arguments  can be passed to the method either as an array or as list of five or more items. The examples illustrate both forms of method call.  
  
   
  
## Examples  
 The following example defines a `Person` class with a number of properties that provide information about a person. Its `GetDescription` method returns an array that contains all of the property values except one. The example then uses the array returned by the  `GetDescription` method  to display the values of the Person object.  
  
 [!code-cs[System.Console.Write#1](~/add/codesnippet/csharp/m-system.console.write-s_13_1.cs)]
 [!code-vb[System.Console.Write#1](~/add/codesnippet/visualbasic/m-system.console.write-s_13_1.vb)]  
  
 Note that the example calls the Write method rather than the [WriteLine(String, Object\[\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method because it attempts to display the value of the `Person.Remarks` property on the same line. To do this, it examines the value of the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.WindowWidth%2A> properties to determine whether there is enough space for the remark to fit.  If there is, it displays the line. If not, it writes a line, indents three spaces, and displays the remark.  
  
 The following example is identical to the first, except that it supplies a five-item list as the `arg` argument instead of a parameter array.  
  
 [!code-vb[System.Console.Write#2](~/add/codesnippet/visualbasic/m-system.console.write-s_13_2.vb)]
 [!code-cs[System.Console.Write#2](~/add/codesnippet/csharp/m-system.console.write-s_13_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> or <paramref name="arg" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of Unicode characters.</param>
        <param name="index">The starting position in `buffer`.</param>
        <param name="count">The number of characters to write.</param>
        <summary>Writes the specified subarray of Unicode characters to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method writes `count` characters starting at position `index` of `buffer` to the standard output stream.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg0">The first object to write using `format`.</param>
        <param name="arg1">The second object to write using `format`.</param>
        <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_14_1.cpp)]
 [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_14_1.cs)]
 [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_1.vb)]  
  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_2.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_14_2.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_14_2.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg0">The first object to write using `format`.</param>
        <param name="arg1">The second object to write using `format`.</param>
        <param name="arg2">The third object to write using `format`.</param>
        <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_11_1.cpp)]
 [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_11_1.cs)]
 [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_1.vb)]  
  
 The following example illustrates the use of the `Write` method.  
  
 [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_2.vb)]
 [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_11_2.cs)]
 [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_11_2.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg0">The first object to write using `format`.</param>
        <param name="arg1">The second object to write using `format`.</param>
        <param name="arg2">The third object to write using `format`.</param>
        <param name="arg3">The fourth object to write using `format`.</param>
        <summary>Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.Write(String, Object\[\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.Write(String, Object\[\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  
  
 This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example illustrates the use of variable parameters with the Write method. The method is called with a composite format string and five format items.  
  
 [!code-cpp[System.Console.Write#3](~/add/codesnippet/cpp/04cf3884-a7cc-4915-bdb2-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes the current line terminator to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default line terminator is a string whose value is a carriage return followed by a line feed ("\r\n" in C#, or `vbCrLf` in Visual Basic). You can change the line terminator by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> property to another string. The example provides an illustration.  
  
   
  
## Examples  
 The example changes the line terminator from its default value of "\r\n" or `vbCrLf` to "\r\n\r\n" or `vbCrLf` + `vbCrLf`. It then calls the WriteLine and <xref:System.Console.WriteLine%28System.String%29> methods to display output to the console.  
  
 [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeline_1.cpp)]
 [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeline_1.cs)]
 [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeline_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example generates ten random integers and uses the WriteLine method to indicate whether they are even.  
  
 [!code-cpp[System.Console.WriteLine#4](~/add/codesnippet/cpp/m-system.console.writeli_5_1.cpp)]
 [!code-cs[System.Console.WriteLine#4](~/add/codesnippet/csharp/m-system.console.writeli_5_1.cs)]
 [!code-vb[System.Console.WriteLine#4](~/add/codesnippet/visualbasic/m-system.console.writeli_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example is a tip calculator that calculates an 18% tip and uses the WriteLine method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_13_1.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">A Unicode character array.</param>
        <summary>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified &lt;xref:System.Decimal&gt; value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Decimal.ToString%2A?displayProperty=fullName> method.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_3_1.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_2_1.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_1_1.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_10_1.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is `null`, only the line terminator is written. Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example uses the WriteLine method to display each value in an object array to the console.  
  
 [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]
 [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]
 [!code-cs[System.Console.WriteLine#3](~/add/codesnippet/csharp/m-system.console.writeli_6_1.cs)]
 [!code-vb[System.Console.WriteLine#3](~/add/codesnippet/visualbasic/m-system.console.writeli_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_4_1.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the specified string value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If value is `null`, only the line terminator is written to the standard output stream.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine> method.  
  
   
  
## Examples  
 The example changes the line terminator from its default value of "\r\n" or `vbCrLf` to "\r\n\r\n" or `vbCrLf` + `vbCrLf`. It then calls the <xref:System.Console.WriteLine> and WriteLine methods to display output to the console.  
  
 [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeli_0_1.cpp)]
 [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeli_0_1.cs)]
 [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeli_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_8_1.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text representation of `value` is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_12_1.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg0">An object to write using `format`.</param>
        <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example calls the WriteLine method to display five randomly generated <xref:System.Boolean> values.  
  
 [!code-vb[System.Console.WriteLine#6](~/add/codesnippet/visualbasic/m-system.console.writeli_9_1.vb)]
 [!code-cs[System.Console.WriteLine#6](~/add/codesnippet/csharp/m-system.console.writeli_9_1.cs)]  
  
 The following example calls the WriteLine method to display the current date.   Note that the format item in the `format` argument uses the "D" [standard date and time format string](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) to display the date in the long date format of the current culture.  
  
 [!code-vb[System.Console.WriteLine#7](~/add/codesnippet/visualbasic/m-system.console.writeli_9_2.vb)]
 [!code-cs[System.Console.WriteLine#7](~/add/codesnippet/csharp/m-system.console.writeli_9_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg">An array of objects to write using `format`.</param>
        <summary>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the  [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_11_1.cpp)]
 [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_11_1.cs)]
 [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_1.vb)]  
  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_11_2.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> or <paramref name="arg" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of Unicode characters.</param>
        <param name="index">The starting position in `buffer`.</param>
        <param name="count">The number of characters to write.</param>
        <summary>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method writes `count` characters starting at position `index` of `buffer` to the standard output stream.  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg0">The first object to write using `format`.</param>
        <param name="arg1">The second object to write using `format`.</param>
        <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_7_1.cpp)]
 [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_7_1.cs)]
 [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_1.vb)]  
  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_7_2.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg0">The first object to write using `format`.</param>
        <param name="arg1">The second object to write using `format`.</param>
        <param name="arg2">The third object to write using `format`.</param>
        <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/ecdde448-c375-4488-93b7-_1.cpp)]
 [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_1.cs)]
 [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_1.vb)]  
  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  
  
 [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_2.cs)]
 [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string (see Remarks).</param>
        <param name="arg0">The first object to write using `format`.</param>
        <param name="arg1">The second object to write using `format`.</param>
        <param name="arg2">The third object to write using `format`.</param>
        <param name="arg3">The fourth object to write using `format`.</param>
        <summary>Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.WriteLine(String, Object\[\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.WriteLine(String, Object\[\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  
  
 This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  
  
-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## Examples  
 The following example illustrates the use of variable arguments with the WriteLine method. The method is called with a composite format string and five format items.  
  
 [!code-cpp[System.Console.WriteLine#5](~/add/codesnippet/cpp/b0d255a7-f5e0-4135-8d9b-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top-level windows and subwindows. Associated enumeration: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>