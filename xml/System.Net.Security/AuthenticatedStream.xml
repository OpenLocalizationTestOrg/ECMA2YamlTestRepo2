<Type Name="AuthenticatedStream" FullName="System.Net.Security.AuthenticatedStream">
  <TypeSignature Language="C#" Value="public abstract class AuthenticatedStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AuthenticatedStream extends System.IO.Stream" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides methods for passing credentials across a stream and requesting or performing authentication for client-server applications.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This abstract class provides methods and properties that are common to authenticated streams.  
  
 Authenticated streams can provide authentication, data signing, and encryption services that can help maintain the integrity and confidentiality of data transmitted using the <xref:System.Net.Security.AuthenticatedStream.InnerStream%2A>.  
  
 The security protocol implemented by a class that derives from AuthenticatedStream together with the security protocols supported on the client and server will determine the security features that are available to an application. The <xref:System.Net.Security.NegotiateStream> and <xref:System.Net.Security.SslStream> classes inherit from AuthenticatedStream and implement the Negotiate and Secure Sockets Layer security protocols, respectively.  
  
   
  
## Examples  
 The following code example demonstrates displaying the properties of an authenticated stream.  
  
 [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/t-system.net.security.au_1.cpp)]
 [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/t-system.net.security.au_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AuthenticatedStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">A &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.AuthenticatedStream" /> for sending and receiving data.</param>
        <param name="leaveInnerStreamOpen">A &lt;xref:System.Boolean&gt; that indicates whether closing this <see cref="T:System.Net.Security.AuthenticatedStream" /> object also closes `innerStream`.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Security.AuthenticatedStream" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.AuthenticatedStream> has no effect on the `innerStream` stream.  
  
 This constructor is provided for implementers of authenticated streams, and can be called only by classes that are derived from <xref:System.Net.Security.AuthenticatedStream>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="innerStream" /> is equal to &lt;xref:System.IO.Stream.Null&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Security.AuthenticatedStream" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  
  
 When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.AuthenticatedStream> references. This method invokes the `Dispose()` method of each referenced object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InnerStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream InnerStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream InnerStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the stream used by this <see cref="T:System.Net.Security.AuthenticatedStream" /> for sending and receiving data.</summary>
        <value>A &lt;xref:System.IO.Stream&gt; object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes that inherit from <xref:System.Net.Security.AuthenticatedStream> can use this property to access the stream passed to the <xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public abstract bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether authentication was successful.</summary>
        <value>
          <see langword="true" /> if successful authentication occurred; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The methods called to perform authentication are defined in the classes that inherit from <xref:System.Net.Security.AuthenticatedStream>.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_3_1.cpp)]
 [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public abstract bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether data sent using this <see cref="T:System.Net.Security.AuthenticatedStream" /> is encrypted.</summary>
        <value>
          <see langword="true" /> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit, it cannot be deciphered by third parties.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_0_1.cpp)]
 [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public abstract bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether both server and client have been authenticated.</summary>
        <value>
          <see langword="true" /> if the client and server have been authenticated; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Not all security protocols support mutual authentication. To determine whether mutual authentication is supported by the security protocol implemented in a class that inherits from <xref:System.Net.Security.AuthenticatedStream>, check the class documentation.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_4_1.cpp)]
 [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public abstract bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether the local side of the connection was authenticated as the server.</summary>
        <value>
          <see langword="true" /> if the local endpoint was authenticated as the server side of a client-server authenticated connection; <see langword="false" /> if the local endpoint was authenticated as the client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Most security protocols used for client-server authentication define specific behavior and requirements for supplying credentials for authentication based on whether you are the client or the server.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_2_1.cpp)]
 [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public abstract bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether the data sent using this stream is signed.</summary>
        <value>
          <see langword="true" /> if the data is signed before being transmitted; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_1_1.cpp)]
 [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LeaveInnerStreamOpen">
      <MemberSignature Language="C#" Value="public bool LeaveInnerStreamOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LeaveInnerStreamOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether the stream used by this <see cref="T:System.Net.Security.AuthenticatedStream" /> for sending and receiving data has been left open.</summary>
        <value>
          <see langword="true" /> if the inner stream has been left open; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When set to `true`, the stream passed to the constructor of this class will not be closed after the instance of this class is closed. When set to `false`, closing the instance of this class will also close the underlined transport stream. The default value of this property is `false`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>