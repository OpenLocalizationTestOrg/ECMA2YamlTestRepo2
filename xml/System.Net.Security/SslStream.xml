<Type Name="SslStream" FullName="System.Net.Security.SslStream">
  <TypeSignature Language="C#" Value="public class SslStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SslStream extends System.Net.Security.AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SSL protocols help to provide confidentiality and integrity checking for messages transmitted using an SslStream. An SSL connection, such as that provided by SslStream, should be used when communicating sensitive information between a client and a server. Using an SslStream helps to prevent anyone from reading and tampering with information while it is in transit on the network.  
  
 An SslStream instance transmits data using a stream that you supply when creating the SslStream. When you supply this underlying stream, you have the option to specify whether closing the SslStream also closes the underlying stream. Typically, the SslStream class is used with the <xref:System.Net.Sockets.TcpClient> and <xref:System.Net.Sockets.TcpListener> classes. The <xref:System.Net.Sockets.TcpClient.GetStream%2A> method provides a <xref:System.Net.Sockets.NetworkStream> suitable for use with the SslStream class.  
  
 After creating an SslStream, the server and optionally, the client must be authenticated. The server must provide an X509 certificate that establishes proof of its identity and can request that the client also do so. Authentication must be performed before transmitting information using an SslStream. Clients initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods, which do not block waiting for the authentication to complete. Servers initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods. Both client and server must initiate the authentication.  
  
 The authentication is handled by the Security Support Provider (SSPI) channel provider. The client is given an opportunity to control validation of the server's certificate by specifying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate when creating an SslStream. The server can also control validation by supplying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate. The method referenced by the delegate includes the remote party's certificate and any errors SSPI encountered while validating the certificate. Note that if the server specifies a delegate, the delegate's method is invoked regardless of whether the server requested client authentication. If the server did not request client authentication, the server's delegate method receives a null certificate and an empty array of certificate errors.  
  
 If the server requires client authentication, the client must specify one or more certificates for authentication. If the client has more than one certificate, the client can provide a <xref:System.Net.Security.LocalCertificateSelectionCallback> delegate to select the correct certificate for the server. The client's certificates must be located in the current user's "My" certificate store. Client authentication via certificates is not supported for the <xref:System.Security.Authentication.SslProtocols> (SSL version 2) protocol.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and the SslStream is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 When the authentication process, also known as the SSL handshake, succeeds, the identity of the server (and optionally, the client) is established and the SslStream can be used by the client and server to exchange messages. Before sending or receiving information, the client and server should check the security services and levels provided by the SslStream to determine whether the protocol, algorithms, and strengths selected meet their requirements for integrity and confidentiality. If the current settings are not sufficient, the stream should be closed. You can check the security services provided by the SslStream using the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties. The following table shows the elements that report the cryptographic settings used for authentication, encryption and data signing.  
  
|Element|Members|  
|-------------|-------------|  
|The security protocol used to authenticate the server and, optionally, the client.|The <xref:System.Net.Security.SslStream.SslProtocol%2A> property and the associated <xref:System.Security.Authentication.SslProtocols> enumeration.|  
|The key exchange algorithm.|The <xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A> property and the associated <xref:System.Security.Authentication.ExchangeAlgorithmType> enumeration.|  
|The message integrity algorithm.|The <xref:System.Net.Security.SslStream.HashAlgorithm%2A> property and the associated <xref:System.Security.Authentication.HashAlgorithmType> enumeration.|  
|The message confidentiality algorithm.|The <xref:System.Net.Security.SslStream.CipherAlgorithm%2A> property and the associated <xref:System.Security.Authentication.CipherAlgorithmType> enumeration.|  
|The strengths of the selected algorithms.|The <xref:System.Net.Security.SslStream.KeyExchangeStrength%2A>, <xref:System.Net.Security.SslStream.HashStrength%2A>, and <xref:System.Net.Security.SslStream.CipherStrength%2A> properties.|  
  
 After a successful authentication, you can send data using the synchronous <xref:System.Net.Security.SslStream.Write%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginWrite%2A> methods. You can receive data using the synchronous <xref:System.Net.Security.SslStream.Read%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginRead%2A> methods.  
  
 If you specified to the <xref:System.Net.Security.SslStream.%23ctor%2A> that the underlying stream should be left open, you are responsible for closing that stream when you are done using it.  
  
> [!NOTE]
>  If the application that creates the SslStream object runs with the credentials of a Normal user, the application will not be able to access certificates installed in the local machine store unless permission has been explicitly given to the user to do so.  
  
 SslStream assumes that a timeout along with any other <xref:System.IO.IOException> when one is thrown from the inner stream will be treated as fatal by its caller. Reusing a SslStream instance after a timeout will return garbage. An application should <xref:System.IO.Stream.Close%2A> the SslStream and throw an exception in these cases.  
  
 The .NET Framework 4.6 includes a new security feature that blocks insecure cipher and hashing algorithms for connections. Applications using TLS/SSL through APIs such as HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. and targeting .NET Framework 4.6 get the more-secure behavior by default.  
  
 Developers may want to opt out of this behavior in order to maintain interoperability with their existing SSL3 services OR TLS w/ RC4 services. [This article](https://support.microsoft.com/kb/3069494) explains how to modify your code so that the new behavior is disabled.  
  
 The .NET Framework 4.6.3 adds new overloads for the methods that authenticate SslStreams that do not specify a TLS version, but instead use the TLS version defined as the system default in [SCHANNEL](https://msdn.microsoft.com/library/windows/desktop/aa380123.aspx). Use these methods in your app as a way to be able to later modify the defaults as TLS version best practice changes over time, without the need to rebuild and redeploy your app.  
  
   
  
## Examples  
 The following code example demonstrates creating an <xref:System.Net.Sockets.TcpListener> that uses the SslStream class to communicate with clients.  
  
 [!code-cpp[NclSslServerSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_1.cpp)]
 [!code-cs[NclSslServerSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_1.cs)]  
  
 The following code example demonstrates creating a <xref:System.Net.Sockets.TcpClient> that uses the SslStream class to communicate with a server.  
  
 [!code-cpp[NclSslClientSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_2.cpp)]
 [!code-cs[NclSslClientSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_2.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">A &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.SslStream" /> for sending and receiving data.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream" /> class using the specified &lt;xref:System.IO.Stream&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.  
  
 The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> is not readable.  
  
 -or-  
  
 <paramref name="innerStream" /> is not writable.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="innerStream" /> is equal to &lt;xref:System.IO.Stream.Null&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">A &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.SslStream" /> for sending and receiving data.</param>
        <param name="leaveInnerStreamOpen">A Boolean value that indicates the closure behavior of the &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.SslStream" /> for sending and receiving data. This parameter indicates if the inner stream is left open.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream" /> class using the specified &lt;xref:System.IO.Stream&gt; and stream closure behavior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.  
  
 If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.  
  
 The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_5_1.cpp)]
 [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> is not readable.  
  
 -or-  
  
 <paramref name="innerStream" /> is not writable.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="innerStream" /> is equal to &lt;xref:System.IO.Stream.Null&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen, class System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
        <Parameter Name="userCertificateValidationCallback" Type="System.Net.Security.RemoteCertificateValidationCallback" />
      </Parameters>
      <Docs>
        <param name="innerStream">A &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.SslStream" /> for sending and receiving data.</param>
        <param name="leaveInnerStreamOpen">A Boolean value that indicates the closure behavior of the &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.SslStream" /> for sending and receiving data. This parameter indicates if the inner stream is left open.</param>
        <param name="userCertificateValidationCallback">A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> delegate responsible for validating the certificate supplied by the remote party.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream" /> class using the specified &lt;xref:System.IO.Stream&gt;, stream closure behavior and certificate validation delegate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.  
  
 The `userCertificateValidationCallback` delegate's `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI). The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds.  
  
 The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate's method is invoked. You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application. If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created.  
  
 If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.  
  
 The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.  
  
> [!NOTE]
>  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of <xref:System.Net.HttpWebRequest.ClientCertificates%2A> (if there is one), or tries to reuse an anonymous sessions if <xref:System.Net.HttpWebRequest.ClientCertificates%2A> is empty.  
  
> [!NOTE]
>  Client certificates are not supported in the SSL version 2 protocol.  
  
   
  
## Examples  
 The following code example creates an <xref:System.Net.Security.SslStream> and initiates the client portion of the authentication.  
  
 [!code-cpp[NclSslClientSync#4](~/add/codesnippet/cpp/9eaa69b2-6619-41cf-8f97-_1.cpp)]
 [!code-cs[NclSslClientSync#4](~/add/codesnippet/csharp/9eaa69b2-6619-41cf-8f97-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> is not readable.  
  
 -or-  
  
 <paramref name="innerStream" /> is not writable.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="innerStream" /> is equal to &lt;xref:System.IO.Stream.Null&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen, class System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, class System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
        <Parameter Name="userCertificateValidationCallback" Type="System.Net.Security.RemoteCertificateValidationCallback" />
        <Parameter Name="userCertificateSelectionCallback" Type="System.Net.Security.LocalCertificateSelectionCallback" />
      </Parameters>
      <Docs>
        <param name="innerStream">A &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.SslStream" /> for sending and receiving data.</param>
        <param name="leaveInnerStreamOpen">A Boolean value that indicates the closure behavior of the &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.SslStream" /> for sending and receiving data. This parameter indicates if the inner stream is left open.</param>
        <param name="userCertificateValidationCallback">A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> delegate responsible for validating the certificate supplied by the remote party.</param>
        <param name="userCertificateSelectionCallback">A <see cref="T:System.Net.Security.LocalCertificateSelectionCallback" /> delegate responsible for selecting the certificate used for authentication.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream" /> class using the specified &lt;xref:System.IO.Stream&gt;, stream closure behavior, certificate validation delegate and certificate selection delegate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.  
  
 The `userCertificateValidationCallback` delegate's `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI). The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds.  
  
 The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate's method is invoked. You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application. If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created.  
  
 The `userCertificateSelectionCallback` delegate is useful when your application has multiple certificates and must dynamically choose a certificate. Certificates in the "MY" store are passed to the method invoked by the delegate.  
  
 If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.  
  
 The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.  
  
> [!NOTE]
>  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of P:System.Net.HttpWebRequest.ClientCertificates (if there is one), or tries to reuse an anonymous sessions if P:System.Net.HttpWebRequest.ClientCertificates is empty.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor. This example is part of a larger example provided for the <xref:System.Net.Security.SslStream> class.  
  
 [!code-cpp[NclSslClientAsync#6](~/add/codesnippet/cpp/dc8fc9af-8c2a-4c30-be77-_1.cpp)]
 [!code-cs[NclSslClientAsync#6](~/add/codesnippet/csharp/dc8fc9af-8c2a-4c30-be77-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> is not readable.  
  
 -or-  
  
 <paramref name="innerStream" /> is not writable.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="innerStream" /> is equal to &lt;xref:System.IO.Stream.Null&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, System.Net.Security.EncryptionPolicy encryptionPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen, class System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, class System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, valuetype System.Net.Security.EncryptionPolicy encryptionPolicy) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
        <Parameter Name="userCertificateValidationCallback" Type="System.Net.Security.RemoteCertificateValidationCallback" />
        <Parameter Name="userCertificateSelectionCallback" Type="System.Net.Security.LocalCertificateSelectionCallback" />
        <Parameter Name="encryptionPolicy" Type="System.Net.Security.EncryptionPolicy" />
      </Parameters>
      <Docs>
        <param name="innerStream">A &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.SslStream" /> for sending and receiving data.</param>
        <param name="leaveInnerStreamOpen">A Boolean value that indicates the closure behavior of the &lt;xref:System.IO.Stream&gt; object used by the <see cref="T:System.Net.Security.SslStream" /> for sending and receiving data. This parameter indicates if the inner stream is left open.</param>
        <param name="userCertificateValidationCallback">A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> delegate responsible for validating the certificate supplied by the remote party.</param>
        <param name="userCertificateSelectionCallback">A <see cref="T:System.Net.Security.LocalCertificateSelectionCallback" /> delegate responsible for selecting the certificate used for authentication.</param>
        <param name="encryptionPolicy">The <see cref="T:System.Net.Security.EncryptionPolicy" /> to use.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Security.SslStream" /> class using the specified &lt;xref:System.IO.Stream&gt;</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The use of the Null cipher is required when the `encryptionPolicy` parameter is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="innerStream" /> is not readable.  
  
 -or-  
  
 <paramref name="innerStream" /> is not writable.  
  
 -or-  
  
 <paramref name="encryptionPolicy" /> is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="innerStream" /> is equal to &lt;xref:System.IO.Stream.Null&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (string targetHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(string targetHost) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetHost">The name of the server that shares this <see cref="T:System.Net.Security.SslStream" />.</param>
        <summary>Called by clients to authenticate the server and optionally the client in a client-server connection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication. The value specified for `targetHost` must match the name on the server's certificate.  
  
 When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetHost" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has already occurred.  
  
 -or-  
  
 Server authentication using this <see cref="T:System.Net.Security.SslStream" /> was tried previously.  
  
 -or-  
  
 Authentication is already in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(string targetHost, class System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="clientCertificates" Type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetHost">The name of the server that will share this <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="clientCertificates">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> that contains client certificates.</param>
        <param name="enabledSslProtocols">The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.</param>
        <param name="checkCertificateRevocation">A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.</param>
        <summary>Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collection and SSL protocol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
> [!NOTE]
>  Client certificates are not supported in the SSL version 2 protocol.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(string targetHost) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetHost">The name of the server that shares this <see cref="T:System.Net.Security.SslStream" />.</param>
        <summary>Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation.</summary>
        <returns>Returns &lt;xref:System.Threading.Tasks.Task&gt;  
  
 The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication. The value specified for `targetHost` must match the name on the server's certificate.  
  
 When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetHost" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has already occurred.  
  
 -or-  
  
 Server authentication using this <see cref="T:System.Net.Security.SslStream" /> was tried previously.  
  
 -or-  
  
 Authentication is already in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(string targetHost, class System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="clientCertificates" Type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetHost">The name of the server that will share this <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="clientCertificates">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> that contains client certificates.</param>
        <param name="enabledSslProtocols">The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.</param>
        <param name="checkCertificateRevocation">A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.</param>
        <summary>Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation. The authentication process uses the specified certificate collection and SSL protocol.</summary>
        <returns>Returns &lt;xref:System.Threading.Tasks.Task&gt;  
  
 The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
> [!NOTE]
>  Client certificates are not supported in the SSL version 2 protocol.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">The certificate used to authenticate the server.</param>
        <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.  
  
 This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has already occurred.  
  
 -or-  
  
 Client authentication using this <see cref="T:System.Net.Security.SslStream" /> was tried previously.  
  
 -or-  
  
 Authentication is already in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="clientCertificateRequired" Type="System.Boolean" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
        <param name="clientCertificateRequired">A &lt;xref:System.Boolean&gt; value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</param>
        <param name="enabledSslProtocols">The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.</param>
        <param name="checkCertificateRevocation">A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.</param>
        <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="enabledSslProtocols" /> is not a valid &lt;xref:System.Security.Authentication.SslProtocols&gt; value.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has already occurred.  
  
 -or-  
  
 Client authentication using this <see cref="T:System.Net.Security.SslStream" /> was tried previously.  
  
 -or-  
  
 Authentication is already in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">The certificate used to authenticate the server.</param>
        <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate as an asynchronous operation.</summary>
        <returns>Returns &lt;xref:System.Threading.Tasks.Task&gt;  
  
 The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has already occurred.  
  
 -or-  
  
 Client authentication using this <see cref="T:System.Net.Security.SslStream" /> was tried previously.  
  
 -or-  
  
 Authentication is already in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The &lt;xref:System.Net.Security.SslStream.AuthenticateAsServerAsync%2A&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="clientCertificateRequired" Type="System.Boolean" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
        <param name="clientCertificateRequired">A &lt;xref:System.Boolean&gt; value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</param>
        <param name="enabledSslProtocols">The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.</param>
        <param name="checkCertificateRevocation">A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.</param>
        <summary>Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol as an asynchronous operation.</summary>
        <returns>Returns &lt;xref:System.Threading.Tasks.Task&gt;  
  
 The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(string targetHost, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="targetHost">The name of the server that shares this <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="asyncCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.</param>
        <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.</param>
        <summary>Called by clients to begin an asynchronous operation to authenticate the server and optionally the client.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; object that indicates the status of the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication.  
  
 The value specified for `targetHost` must match the name on the server's certificate.  
  
 The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  
  
 This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.  
  
 For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  
  
 If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetHost" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has already occurred.  
  
 -or-  
  
 Server authentication using this <see cref="T:System.Net.Security.SslStream" /> was tried previously.  
  
 -or-  
  
 Authentication is already in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(string targetHost, class System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetHost" Type="System.String" />
        <Parameter Name="clientCertificates" Type="System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="targetHost">The name of the server that shares this <see cref="T:System.Net.Security.SslStream" />.</param>
        <param name="clientCertificates">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> containing client certificates.</param>
        <param name="enabledSslProtocols">The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.</param>
        <param name="checkCertificateRevocation">A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.</param>
        <param name="asyncCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.</param>
        <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.</param>
        <summary>Called by clients to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates and security protocol.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; object that indicates the status of the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value specified for `targetHost` must match the name on the server's certificate.  
  
 The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  
  
 This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.  
  
 For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  
  
 If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
> [!NOTE]
>  Client certificates are not supported in the SSL version 2 protocol.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetHost" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="enabledSslProtocols" /> is not a valid &lt;xref:System.Security.Authentication.SslProtocols&gt; value.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has already occurred.  
  
 -or-  
  
 Server authentication using this <see cref="T:System.Net.Security.SslStream" /> was tried previously.  
  
 -or-  
  
 Authentication is already in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
        <param name="asyncCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.</param>
        <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.</param>
        <summary>Called by servers to begin an asynchronous operation to authenticate the client and optionally the server in a client-server connection.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.  
  
 The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  
  
 This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.  
  
 For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  
  
 If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has already occurred.  
  
 -or-  
  
 Client authentication using this <see cref="T:System.Net.Security.SslStream" /> was tried previously.  
  
 -or-  
  
 Authentication is already in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, valuetype System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="clientCertificateRequired" Type="System.Boolean" />
        <Parameter Name="enabledSslProtocols" Type="System.Security.Authentication.SslProtocols" />
        <Parameter Name="checkCertificateRevocation" Type="System.Boolean" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
        <param name="clientCertificateRequired">A &lt;xref:System.Boolean&gt; value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.</param>
        <param name="enabledSslProtocols">The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.</param>
        <param name="checkCertificateRevocation">A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.</param>
        <param name="asyncCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.</param>
        <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.</param>
        <summary>Called by servers to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates, requirements and security protocol.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; object that indicates the status of the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  
  
 This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> method overloads.  
  
 For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  
  
 If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serverCertificate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="enabledSslProtocols" /> is not a valid &lt;xref:System.Security.Authentication.SslProtocols&gt; value.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has already occurred.  
  
 -or-  
  
 Server authentication using this <see cref="T:System.Net.Security.SslStream" /> was tried previously.  
  
 -or-  
  
 Authentication is already in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">A &lt;xref:System.Byte&gt; array that receives the bytes read from the stream.</param>
        <param name="offset">The zero-based location in `buffer` at which to begin storing the data read from this stream.</param>
        <param name="count">The maximum number of bytes to read from the stream.</param>
        <param name="asyncCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the read operation is complete.</param>
        <param name="asyncState">A user-defined object that contains information about the read operation. This object is passed to the `asyncCallback` delegate when the operation completes.</param>
        <summary>Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; object that indicates the status of the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If encryption and or signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and/or decrypts it. The asynchronous read operation must be completed by calling the <xref:System.Net.Security.SslStream.EndRead%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  
  
 This method does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.SslStream.Read%2A> method.  
  
 For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  
  
 The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous read operations.  
  
 You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  
  
   
  
## Examples  
 The following code example demonstrates starting an asynchronous read operation.  
  
 [!code-cpp[NclSslClientAsync#8](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_1.cpp)]
 [!code-cs[NclSslClientAsync#8](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_1.cs)]  
  
 [!code-cpp[NclSslClientAsync#4](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_2.cpp)]
 [!code-cs[NclSslClientAsync#4](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_2.cs)]  
  
 The following method is called when the read completes.  
  
 [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_3.cpp)]
 [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_3.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> <paramref name="&lt;" /> <paramref name="0" />.  
  
 <paramref name="-or-" />  
  
 <paramref name="offset" /> &gt; the length of <paramref name="buffer" />.  
  
 -or-  
  
 <paramref name="offset" /> + count &gt; the length of <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">The read operation failed.  
  
 -or-  
  
 Encryption is in use, but the data could not be decrypted.</exception>
        <exception cref="T:System.NotSupportedException">There is already a read operation in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">A &lt;xref:System.Byte&gt; array that supplies the bytes to be written to the stream.</param>
        <param name="offset">The zero-based location in `buffer` at which to begin reading bytes to be written to the stream.</param>
        <param name="count">An &lt;xref:System.Int32&gt; value that specifies the number of bytes to read from `buffer`.</param>
        <param name="asyncCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the write operation is complete.</param>
        <param name="asyncState">A user-defined object that contains information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.</param>
        <summary>Begins an asynchronous write operation that writes &lt;xref:System.Byte&gt;s from the specified buffer to the stream.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates calling this method.  
  
 [!code-cs[NclSslServerAsync#5](~/add/codesnippet/csharp/7192cc61-a256-4249-aafa-_1.cs)]
 [!code-cpp[NclSslServerAsync#5](~/add/codesnippet/cpp/7192cc61-a256-4249-aafa-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> <paramref name="&lt;" /> <paramref name="0" />.  
  
 <paramref name="-or-" />  
  
 <paramref name="offset" /> &gt; the length of <paramref name="buffer" />.  
  
 -or-  
  
 <paramref name="offset" /> + count &gt; the length of <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">The write operation failed.</exception>
        <exception cref="T:System.NotSupportedException">There is already a write operation in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream is readable.</summary>
        <value>
          <see langword="true" /> if authentication has occurred and the underlying stream is readable; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanRead%2A> on the underlying stream.  
  
 The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_14_1.cpp)]
 [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_14_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream is seekable.</summary>
        <value>This property always returns <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not attempt to set the position of the <xref:System.Net.Security.SslStream> object or its underlying stream.  
  
 The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream supports time-outs.</summary>
        <value>
          <see langword="true" /> if the underlying stream supports time-outs; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns the value returned by invoking <xref:System.IO.Stream.CanTimeout%2A> on the underlying stream.  
  
 The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_8_1.cpp)]
 [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_8_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream is writable.</summary>
        <value>
          <see langword="true" /> if authentication has occurred and the underlying stream is writable; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanWrite%2A> on the underlying stream.  
  
 The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_17_1.cpp)]
 [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_17_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CheckCertRevocationStatus">
      <MemberSignature Language="C#" Value="public virtual bool CheckCertRevocationStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCertRevocationStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether the certificate revocation list is checked during the certificate validation process.</summary>
        <value>
          <see langword="true" /> if the certificate revocation list is checked; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The certificate revocation list contains certificates that have been revoked by the issuer. Checking the list negatively impacts performance but improves application security.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_4_1.cpp)]
 [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CipherAlgorithm">
      <MemberSignature Language="C#" Value="public virtual System.Security.Authentication.CipherAlgorithmType CipherAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Authentication.CipherAlgorithmType CipherAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.CipherAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that identifies the bulk encryption algorithm used by this <see cref="T:System.Net.Security.SslStream" />.</summary>
        <value>A &lt;xref:System.Security.Authentication.CipherAlgorithmType&gt; value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A value of <xref:System.Security.Authentication.CipherAlgorithmType> is required for the CipherAlgorithm property when the <xref:System.Net.Security.EncryptionPolicy> enumeration value is used to construct a <xref:System.Net.Security.SslStream> instance.  
  
 [!INCLUDE[winxpsvr](~/add/includes/winxpsvr-md.md)] and [!INCLUDE[winxp](~/add/includes/winxp-md.md)] do not support the <xref:System.Security.Authentication.CipherAlgorithmType> value. So even if the <xref:System.Security.Authentication.CipherAlgorithmType> value is used to construct the <xref:System.Net.Security.SslStream> instance, the <xref:System.Net.Security.EncryptionPolicy> property will be <xref:System.Security.Authentication.CipherAlgorithmType>. The <xref:System.Security.Authentication.CipherAlgorithmType> value is only returned on Windows Vista and later.  
  
   
  
## Examples  
 The following code example displays the cryptography settings for the specified stream.  
  
 [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_10_1.cpp)]
 [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_10_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The CipherAlgorithm property was accessed before the completion of the authentication process or the authentication process failed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CipherStrength">
      <MemberSignature Language="C#" Value="public virtual int CipherStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CipherStrength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that identifies the strength of the cipher algorithm used by this <see cref="T:System.Net.Security.SslStream" />.</summary>
        <value>An &lt;xref:System.Int32&gt; value that specifies the strength of the algorithm, in bits.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property is zero until the authentication occurs.  
  
 This property returns one of the following values:  
  
-   0  
  
-   40  
  
-   56  
  
-   80  
  
-   128  
  
-   168  
  
-   192  
  
-   256  
  
   
  
## Examples  
 The following code example displays the cryptography settings for the specified stream.  
  
 [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_6_1.cpp)]
 [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_6_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Security.SslStream" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  
  
 When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.SslStream> references. This method invokes the `Dispose()` method of each referenced object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt;.</param>
        <summary>Ends a pending asynchronous server authentication operation started with a previous call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> methods.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not created by a call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt;.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">There is no pending server authentication to complete.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt;.</param>
        <summary>Ends a pending asynchronous client authentication operation started with a previous call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  
  
 If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  
  
 To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not created by a call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt;.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
        <exception cref="T:System.InvalidOperationException">There is no pending client authentication to complete.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.SslStream.BeginRead%2A&gt;</param>
        <summary>Ends an asynchronous read operation started with a previous call to &lt;xref:System.Net.Security.SslStream.BeginRead%2A&gt;.</summary>
        <returns>A &lt;xref:System.Int32&gt; value that specifies the number of bytes read from the underlying stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the operation has not completed, this method blocks until it does.  
  
 To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Read%2A> method.  
  
 You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  
  
   
  
## Examples  
 The following code example demonstrates ending an asynchronous read operation.  
  
 [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/m-system.net.security.ss_0_1.cpp)]
 [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/m-system.net.security.ss_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not created by a call to &lt;xref:System.Net.Security.SslStream.BeginRead%2A&gt;.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
        <exception cref="T:System.IO.IOException">The read operation failed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.SslStream.BeginWrite%2A&gt;</param>
        <summary>Ends an asynchronous write operation started with a previous call to &lt;xref:System.Net.Security.SslStream.BeginWrite%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the operation has not completed, this method blocks until it does.  
  
 An application cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  
  
 To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Write%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates ending an asynchronous write operation.  
  
 [!code-cs[NclSslServerAsync#4](~/add/codesnippet/csharp/m-system.net.security.ss_1_1.cs)]
 [!code-cpp[NclSslServerAsync#4](~/add/codesnippet/cpp/m-system.net.security.ss_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not created by a call to &lt;xref:System.Net.Security.SslStream.BeginWrite%2A&gt;.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
        <exception cref="T:System.IO.IOException">The write operation failed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes any buffered data to be written to the underlying device.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.  
  
   
  
## Examples  
 The following code example demonstrates calling this method.  
  
 [!code-cpp[NclSslClientSync#5](~/add/codesnippet/cpp/m-system.net.security.ss_4_1.cpp)]
 [!code-cs[NclSslClientSync#5](~/add/codesnippet/csharp/m-system.net.security.ss_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public virtual System.Security.Authentication.HashAlgorithmType HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Authentication.HashAlgorithmType HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.HashAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the algorithm used for generating message authentication codes (MACs).</summary>
        <value>A &lt;xref:System.Security.Authentication.HashAlgorithmType&gt; value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Message authentication algorithms generate message hashes and signatures used to detect tampering and forgery.  
  
   
  
## Examples  
 The following code example displays the cryptography settings for the specified stream.  
  
 [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_9_1.cpp)]
 [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_9_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The HashAlgorithm property was accessed before the completion of the authentication process or the authentication process failed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HashStrength">
      <MemberSignature Language="C#" Value="public virtual int HashStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HashStrength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that identifies the strength of the hash algorithm used by this instance.</summary>
        <value>An &lt;xref:System.Int32&gt; value that specifies the strength of the &lt;xref:System.Security.Authentication.HashAlgorithmType&gt; algorithm, in bits. Valid values are 128 or 160.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property is zero until the authentication occurs.  
  
   
  
## Examples  
 The following code example displays the cryptography settings for the specified stream.  
  
 [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_2_1.cpp)]
 [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether authentication was successful.</summary>
        <value>
          <see langword="true" /> if successful authentication occurred; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clients authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_3_1.cpp)]
 [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether this <see cref="T:System.Net.Security.SslStream" /> uses data encryption.</summary>
        <value>
          <see langword="true" /> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Encryption helps to protect the privacy of the data, namely it helps to ensure that while data is in transit, it cannot be deciphered by third parties.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_0_1.cpp)]
 [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether both server and client have been authenticated.</summary>
        <value>
          <see langword="true" /> if the server has been authenticated; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mutual authentication is specified by the server when the server wants the client to provide a certificate for authentication.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_11_1.cpp)]
 [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_11_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether the local side of the connection used by this <see cref="T:System.Net.Security.SslStream" /> was authenticated as the server.</summary>
        <value>
          <see langword="true" /> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If authentication failed or did not occur, this property returns `false`.  
  
 To authenticate as the server, call the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_13_1.cpp)]
 [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_13_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Boolean&gt; value that indicates whether the data sent using this stream is signed.</summary>
        <value>
          <see langword="true" /> if the data is signed before being transmitted; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Data signing helps to protect the integrity of the data, namely it helps the recipient determine whether the data has been tampered with while in transit.  
  
   
  
## Examples  
 The following code example demonstrates displaying the value of this property.  
  
 [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_19_1.cpp)]
 [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_19_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeAlgorithm">
      <MemberSignature Language="C#" Value="public virtual System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExchangeAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the key exchange algorithm used by this <see cref="T:System.Net.Security.SslStream" />.</summary>
        <value>An &lt;xref:System.Security.Authentication.ExchangeAlgorithmType&gt; value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property is <xref:System.Security.Authentication.ExchangeAlgorithmType> until the authentication occurs.  
  
 The key exchange algorithm protects information used to generate shared keys.  
  
   
  
## Examples  
 The following code example displays the cryptography settings for the specified stream.  
  
 [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_16_1.cpp)]
 [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_16_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeStrength">
      <MemberSignature Language="C#" Value="public virtual int KeyExchangeStrength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyExchangeStrength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that identifies the strength of the key exchange algorithm used by this instance.</summary>
        <value>An &lt;xref:System.Int32&gt; value that specifies the strength of the &lt;xref:System.Security.Authentication.ExchangeAlgorithmType&gt; algorithm, in bits.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property is zero until the authentication occurs.  
  
 In common scenarios, the value of this property is one of the following:  
  
-   512  
  
-   768  
  
-   1024  
  
-   2048  
  
   
  
## Examples  
 The following code example displays the cryptography settings for the specified stream.  
  
 [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_5_1.cpp)]
 [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the length of the underlying stream.</summary>
        <value>A &lt;xref:System.Int64&gt;.  
  
 The length of the underlying stream.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns the value returned by invoking <xref:System.IO.Stream.Length%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LocalCertificate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the certificate used to authenticate the local endpoint.</summary>
        <value>An X509Certificate object that represents the certificate supplied for authentication or <see langword="null" /> if no certificate was supplied.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates displaying the certificate returned by this property.  
  
 [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_1_1.cpp)]
 [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Authentication failed or has not occurred.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the current position in the underlying stream.</summary>
        <value>A &lt;xref:System.Int64&gt;.  
  
 The current position in the underlying stream.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns the value returned by invoking <xref:System.IO.Stream.Position%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Setting this property is not supported.  
  
 -or-  
  
 Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">A &lt;xref:System.Byte&gt; array that receives the bytes read from this stream.</param>
        <param name="offset">A &lt;xref:System.Int32&gt; that contains the zero-based location in `buffer` at which to begin storing the data read from this stream.</param>
        <param name="count">A &lt;xref:System.Int32&gt; that contains the maximum number of bytes to read from this stream.</param>
        <summary>Reads data from this stream and stores it in the specified array.</summary>
        <returns>A &lt;xref:System.Int32&gt; value that specifies the number of bytes read. When there is no more data to be read, returns 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The method reads a maximum of `count` bytes from the stream and stores them in `buffer` beginning at `offset`. You cannot perform multiple simultaneous read operations.  
  
 You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  
  
 To perform this operation asynchronously, use the <xref:System.Net.Security.SslStream.BeginRead%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates reading from an <xref:System.Net.Security.SslStream>.  
  
 [!code-cpp[NclSslClientSync#6](~/add/codesnippet/cpp/m-system.net.security.ss_2_1.cpp)]
 [!code-cs[NclSslClientSync#6](~/add/codesnippet/csharp/m-system.net.security.ss_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> <paramref name="&lt;" /> <paramref name="0" />.  
  
 <paramref name="-or-" />  
  
 <paramref name="offset" /> &gt; the length of <paramref name="buffer" />.  
  
 -or-  
  
 <paramref name="offset" /> + count &gt; the length of <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">The read operation failed. Check the inner exception, if present to determine the cause of the failure.</exception>
        <exception cref="T:System.NotSupportedException">There is already a read operation in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the amount of time a read operation blocks waiting for data.</summary>
        <value>A &lt;xref:System.Int32&gt; that specifies the amount of time that elapses before a synchronous read operation fails.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns the value returned by invoking <xref:System.IO.Stream.ReadTimeout%2A> on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.  
  
 If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not timeout.  
  
   
  
## Examples  
 The following code example demonstrates setting the value of this property.  
  
 [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_18_1.cpp)]
 [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_18_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoteCertificate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the certificate used to authenticate the remote endpoint.</summary>
        <value>An X509Certificate object that represents the certificate supplied for authentication or <see langword="null" /> if no certificate was supplied.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates displaying the certificate returned by this property.  
  
 [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_15_1.cpp)]
 [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_15_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Authentication failed or has not occurred.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">This value is ignored.</param>
        <param name="origin">This value is ignored.</param>
        <summary>Throws a &lt;xref:System.NotSupportedException&gt;.</summary>
        <returns>Always throws a &lt;xref:System.NotSupportedException&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not call this method. It is inherited, but is not supported by the <xref:System.Net.Security.SslStream> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Seeking is not supported by <see cref="T:System.Net.Security.SslStream" /> objects.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">An &lt;xref:System.Int64&gt; value that specifies the length of the stream.</param>
        <summary>Sets the length of the underlying stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method invokes <xref:System.IO.Stream.SetLength%2A?displayProperty=fullName> on the underlying stream specified when this <xref:System.Net.Security.SslStream> was created.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SslProtocol">
      <MemberSignature Language="C#" Value="public virtual System.Security.Authentication.SslProtocols SslProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Authentication.SslProtocols SslProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.SslProtocols</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates the security protocol used to authenticate this connection.</summary>
        <value>The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The supported security protocols are specified when the <xref:System.Net.Security.SslStream> is created. If no security protocol was passed to the constructor, the instance is created using <xref:System.Security.Authentication.SslProtocols>. The actual protocol used for authentication is selected based on the protocols supported by the client and server.  
  
   
  
## Examples  
 The following example displays the security properties of the specified stream.  
  
 [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_7_1.cpp)]
 [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_7_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TransportContext">
      <MemberSignature Language="C#" Value="public System.Net.TransportContext TransportContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.TransportContext TransportContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.TransportContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;xref:System.Net.TransportContext&gt; used for authentication using extended protection.</summary>
        <value>The &lt;xref:System.Net.TransportContext&gt; object that contains the channel binding token (CBT) used for extended protection.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">A &lt;xref:System.Byte&gt; array that supplies the bytes written to the stream.</param>
        <summary>Writes the specified data to this stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method blocks while the operation completes. To prevent blocking while the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.  
  
 You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  
  
 The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations.  
  
   
  
## Examples  
 The following code example demonstrates writing to an authenticated <xref:System.Net.Security.SslStream>.  
  
 [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_3_1.cpp)]
 [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">The write operation failed.</exception>
        <exception cref="T:System.NotSupportedException">There is already a write operation in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">A &lt;xref:System.Byte&gt; array that supplies the bytes written to the stream.</param>
        <param name="offset">A &lt;xref:System.Int32&gt; that contains the zero-based location in `buffer` at which to begin reading bytes to be written to the stream.</param>
        <param name="count">A &lt;xref:System.Int32&gt; that contains the number of bytes to read from `buffer`.</param>
        <summary>Write the specified number of &lt;xref:System.Byte&gt;s to the underlying stream using the specified buffer and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method blocks while the operation completes. To prevent blocking while the operation completes the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.  
  
 You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  
  
 The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> <paramref name="&lt;" /> <paramref name="0" />.  
  
 <paramref name="-or-" />  
  
 <paramref name="offset" /> &gt; the length of <paramref name="buffer" />.  
  
 -or-  
  
 <paramref name="offset" /> + count &gt; the length of <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">The write operation failed.</exception>
        <exception cref="T:System.NotSupportedException">There is already a write operation in progress.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the amount of time a write operation blocks waiting for data.</summary>
        <value>A &lt;xref:System.Int32&gt; that specifies the amount of time that elapses before a synchronous write operation fails.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns the value returned by invoking <xref:System.IO.Stream.WriteTimeout%2A> on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.  
  
 If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not timeout.  
  
   
  
## Examples  
 The following code example demonstrates setting the value of this property.  
  
 [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_12_1.cpp)]
 [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_12_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>