<Type Name="SemaphoreRights" FullName="System.Security.AccessControl.SemaphoreRights">
  <TypeSignature Language="C#" Value="public enum SemaphoreRights" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SemaphoreRights extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the access control rights that can be applied to named system semaphore objects.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the SemaphoreRights enumeration to specify access control rights when you create <xref:System.Security.AccessControl.SemaphoreSecurity> objects. To apply access rights to a named system semaphore, use <xref:System.Security.AccessControl.SemaphoreSecurity> objects with the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%2CSystem.Security.AccessControl.SemaphoreSecurity%29?displayProperty=fullName> constructor and the <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> method.  
  
 For the numeric values of the underlying Windows access rights, see [Synchronization Object Security and Access Rights (Windows)](http://go.microsoft.com/fwlink/p/?LinkId=243073) in the MSDN Library.  
  
> [!NOTE]
>  Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.  
  
   
  
## Examples  
 The following code example demonstrates the use of SemaphoreRights values when creating and using <xref:System.Security.AccessControl.SemaphoreAccessRule> objects. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType?displayProperty=fullName>rule.  
  
> [!NOTE]
>  This example does not attach the security object to an <xref:System.Threading.Semaphore> object; see <xref:System.Security.AccessControl.SemaphoreSecurity>, <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> method, and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  
  
 [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_10_1.cs)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_10_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ChangePermissions">
      <MemberSignature Language="C#" Value="ChangePermissions" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.AccessControl.SemaphoreRights ChangePermissions = int32(262144)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The right to change the security and audit rules associated with a named semaphore.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="Delete" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.AccessControl.SemaphoreRights Delete = int32(65536)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The right to delete a named semaphore.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FullControl">
      <MemberSignature Language="C#" Value="FullControl" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.AccessControl.SemaphoreRights FullControl = int32(2031619)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The right to exert full control over a named semaphore, and to modify its access rules and audit rules.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Modify">
      <MemberSignature Language="C#" Value="Modify" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.AccessControl.SemaphoreRights Modify = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The right to release a named semaphore.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReadPermissions">
      <MemberSignature Language="C#" Value="ReadPermissions" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.AccessControl.SemaphoreRights ReadPermissions = int32(131072)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The right to open and copy the access rules and audit rules for a named semaphore.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Synchronize">
      <MemberSignature Language="C#" Value="Synchronize" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.AccessControl.SemaphoreRights Synchronize = int32(1048576)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The right to wait on a named semaphore.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="TakeOwnership" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.AccessControl.SemaphoreRights TakeOwnership = int32(524288)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The right to change the owner of a named semaphore.</summary>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>