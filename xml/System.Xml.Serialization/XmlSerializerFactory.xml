<Type Name="XmlSerializerFactory" FullName="System.Xml.Serialization.XmlSerializerFactory">
  <TypeSignature Language="C#" Value="public class XmlSerializerFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSerializerFactory extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Creates typed versions of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; for more efficient serialization.</summary>
    <remarks>To be added.</remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializerFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSerializer">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializer CreateSerializer (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Serialization.XmlSerializer CreateSerializer(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; to serialize.</param>
        <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class that is used to serialize the specified type.</summary>
        <returns>A derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; class that is specifically created to serialize the specified type.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSerializer">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializer CreateSerializer (System.Xml.Serialization.XmlTypeMapping xmlTypeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Serialization.XmlSerializer CreateSerializer(class System.Xml.Serialization.XmlTypeMapping xmlTypeMapping) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlTypeMapping" Type="System.Xml.Serialization.XmlTypeMapping" />
      </Parameters>
      <Docs>
        <param name="xmlTypeMapping">An &lt;xref:System.Xml.Serialization.XmlTypeMapping&gt; that maps one type to another.</param>
        <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class using an object that maps one type to another.</summary>
        <returns>A derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; class that is specifically created to serialize the mapped type.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSerializer">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializer CreateSerializer (Type type, string defaultNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Serialization.XmlSerializer CreateSerializer(class System.Type type, string defaultNamespace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="defaultNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; to serialize.</param>
        <param name="defaultNamespace">The default namespace to use for all the XML elements.</param>
        <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class that is used to serialize the specified type and namespace.</summary>
        <returns>A derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; class that is specifically created to serialize the specified type.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSerializer">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializer CreateSerializer (Type type, Type[] extraTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Serialization.XmlSerializer CreateSerializer(class System.Type type, class System.Type[] extraTypes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; to serialize.</param>
        <param name="extraTypes">A &lt;xref:System.Type&gt; array of additional object types to serialize.</param>
        <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class that is used to serialize the specified type. If a property or field returns an array, the <paramref name="extraTypes" /> parameter specifies objects that can be inserted into the array.</summary>
        <returns>A derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this overload is similar to calling the [XmlSerializer(Type,â€‚Type\[\])](assetId:///M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])?qualifyHint=False&autoUpgrade=False) to create an instance of the <xref:System.Xml.Serialization.XmlSerializer> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSerializer">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializer CreateSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Serialization.XmlSerializer CreateSerializer(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; to serialize.</param>
        <param name="overrides">An &lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt; that contains fields that override the default serialization behavior.</param>
        <summary>Returns a derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; class that can serialize objects of the specified type into XML documents, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</summary>
        <returns>A derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this overload is similar to calling the <xref:System.Xml.Serialization.XmlSerializer.%23ctor%28System.Type%2CSystem.Xml.Serialization.XmlAttributeOverrides%29> to create an instance of the <xref:System.Xml.Serialization.XmlSerializer> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSerializer">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializer CreateSerializer (Type type, System.Xml.Serialization.XmlRootAttribute root);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Serialization.XmlSerializer CreateSerializer(class System.Type type, class System.Xml.Serialization.XmlRootAttribute root) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; to serialize.</param>
        <param name="root">An &lt;xref:System.Xml.Serialization.XmlRootAttribute&gt; that represents the XML root element.</param>
        <summary>Returns a derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; class that can serialize objects of the specified type into XML documents, and vice versa. Specifies the object that represents the XML root element.</summary>
        <returns>A derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this overload is similar to calling the <xref:System.Xml.Serialization.XmlSerializer.%23ctor%28System.Type%2CSystem.Xml.Serialization.XmlRootAttribute%29?displayProperty=fullName> to create an instance of the <xref:System.Xml.Serialization.XmlSerializer> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSerializer">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializer CreateSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Serialization.XmlSerializer CreateSerializer(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides, class System.Type[] extraTypes, class System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
        <Parameter Name="defaultNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; to serialize.</param>
        <param name="overrides">An &lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt; that contains fields that override the default serialization behavior.</param>
        <param name="extraTypes">A &lt;xref:System.Type&gt; array of additional object types to serialize.</param>
        <param name="root">An &lt;xref:System.Xml.Serialization.XmlRootAttribute&gt; that represents the XML root element.</param>
        <param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
        <summary>Returns a derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.</summary>
        <returns>A derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this overload is similar to calling the [XmlSerializer(Type,â€‚XmlAttributeOverrides,â€‚Type\[\],â€‚XmlRootAttribute,â€‚String)](assetId:///M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)?qualifyHint=False&autoUpgrade=False) to create an instance of the <xref:System.Xml.Serialization.XmlSerializer> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSerializer">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializer CreateSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Serialization.XmlSerializer CreateSerializer(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides, class System.Type[] extraTypes, class System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
        <Parameter Name="defaultNamespace" Type="System.String" />
        <Parameter Name="location" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; of the object that this &lt;xref:System.Xml.Serialization.XmlSerializer&gt; can serialize.</param>
        <param name="overrides">An &lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt; that extends or overrides the behavior of the class specified in the type parameter.</param>
        <param name="extraTypes">A &lt;xref:System.Type&gt; array of additional object types to serialize.</param>
        <param name="root">An &lt;xref:System.Xml.Serialization.XmlRootAttribute&gt; that defines the XML root element properties.</param>
        <param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
        <param name="location">The path that specifies the location of the types.</param>
        <summary>Returns a derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.</summary>
        <returns>A derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt;.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSerializer">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlSerializer CreateSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Serialization.XmlSerializer CreateSerializer(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides, class System.Type[] extraTypes, class System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateSerializer which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
        <Parameter Name="defaultNamespace" Type="System.String" />
        <Parameter Name="location" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; of the object that this &lt;xref:System.Xml.Serialization.XmlSerializer&gt; can serialize.</param>
        <param name="overrides">An &lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt; that extends or overrides the behavior of the class specified in the type parameter.</param>
        <param name="extraTypes">A &lt;xref:System.Type&gt; array of additional object types to serialize.</param>
        <param name="root">An &lt;xref:System.Xml.Serialization.XmlRootAttribute&gt; that defines the XML root element properties.</param>
        <param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
        <param name="location">The path that specifies the location of the types.</param>
        <param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence" /> class that contains credentials needed to access types.</param>
        <summary>Returns a derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.</summary>
        <returns>A derivation of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this overload is similar to calling the [XmlSerializer(Type,â€‚XmlAttributeOverrides,â€‚Type\[\],â€‚XmlRootAttribute,â€‚String,â€‚String,â€‚Evidence)](assetId:///M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)?qualifyHint=False&autoUpgrade=False) to create an instance of the <xref:System.Xml.Serialization.XmlSerializer> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>