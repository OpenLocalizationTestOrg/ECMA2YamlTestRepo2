<Type Name="DependentCloneOption" FullName="System.Transactions.DependentCloneOption">
  <TypeSignature Language="C#" Value="public enum DependentCloneOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DependentCloneOption extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Controls what kind of dependent transaction to create.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A dependent transaction can be obtained using the <xref:System.Transactions.Transaction.DependentClone%2A> method, with the DependentCloneOption parameter controlling what kind of dependent transaction to create.  For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab).  
  
   
  
## Examples  
 The following example shows you how to create a dependent transaction.  
  
 [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/t-system.transactions.de_1_1.vb)]
 [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/t-system.transactions.de_1_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="BlockCommitUntilComplete">
      <MemberSignature Language="C#" Value="BlockCommitUntilComplete" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Transactions.DependentCloneOption BlockCommitUntilComplete = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.DependentCloneOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or &lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt; is called. In this case, additional work can be done on the transaction and new enlistments can be created.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RollbackIfNotComplete">
      <MemberSignature Language="C#" Value="RollbackIfNotComplete" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Transactions.DependentCloneOption RollbackIfNotComplete = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.DependentCloneOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The dependent transaction automatically aborts the transaction if Commit is called on the parent transaction before &lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt; is called.</summary>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>