<Type Name="Logger" FullName="Microsoft.Build.Utilities.Logger">
  <TypeSignature Language="C#" Value="public abstract class Logger : Microsoft.Build.Framework.ILogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Logger extends System.Object implements class Microsoft.Build.Framework.ILogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.ILogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>When overridden in a derived form, provides functionality for loggers that handle events raised by the [!INCLUDE[vstecmsbuild](~/add/includes/vstecmsbuild-md.md)] engine.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This abstract class provides default implementations for the methods and properties of the <xref:Microsoft.Build.Framework.ILogger> interface.  
  
 This class can only be instantiated in a derived form.  
  
   
  
## Examples  
 The following example shows how to write a basic logger that responds to build events.  
  
 [!code-cs[msbuild_BasicLogger#1](~/add/codesnippet/csharp/msbuild_BasicLogger/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Logger ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Build.Utilities.Logger" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FormatErrorEvent">
      <MemberSignature Language="C#" Value="public virtual string FormatErrorEvent (Microsoft.Build.Framework.BuildErrorEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string FormatErrorEvent(class Microsoft.Build.Framework.BuildErrorEventArgs args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="Microsoft.Build.Framework.BuildErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">The arguments of the error event.</param>
        <summary>Generates an error message that is in the default format, from a <see cref="T:Microsoft.Build.Framework.BuildErrorEventArgs" /> object.</summary>
        <returns>A &lt;xref:System.String&gt; that represents an error message in canonical format.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FormatWarningEvent">
      <MemberSignature Language="C#" Value="public virtual string FormatWarningEvent (Microsoft.Build.Framework.BuildWarningEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string FormatWarningEvent(class Microsoft.Build.Framework.BuildWarningEventArgs args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="Microsoft.Build.Framework.BuildWarningEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">The arguments of the warning event.</param>
        <summary>Generates a warning message that is in the default format, from a <see cref="T:Microsoft.Build.Framework.BuildWarningEventArgs" /> object.</summary>
        <returns>A &lt;xref:System.String&gt; that represents a warning message in canonical format.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (Microsoft.Build.Framework.IEventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.Build.Framework.IEventSource eventSource) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="Microsoft.Build.Framework.IEventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource">The available events that a logger can subscribe to.</param>
        <summary>When overridden in a derived class, subscribes the logger to specific events.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method must be overridden in the derived class to perform initialization logic and to subscribe to build events published by <xref:Microsoft.Build.Framework.IEventSource>.  
  
   
  
## Examples  
 The following example shows how to write a basic logger that responds to build events.  
  
 [!code-cs[msbuild_BasicLogger#1](~/add/codesnippet/csharp/msbuild_BasicLogger/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsVerbosityAtLeast">
      <MemberSignature Language="C#" Value="public bool IsVerbosityAtLeast (Microsoft.Build.Framework.LoggerVerbosity checkVerbosity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVerbosityAtLeast(valuetype Microsoft.Build.Framework.LoggerVerbosity checkVerbosity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkVerbosity" Type="Microsoft.Build.Framework.LoggerVerbosity" />
      </Parameters>
      <Docs>
        <param name="checkVerbosity">The logger verbosity setting passed in.</param>
        <summary>Determines whether the current &lt;xref:Microsoft.Build.Utilities.Logger.Verbosity%2A&gt; setting is at least the value that is passed in.</summary>
        <returns>
          <see langword="true" /> if the current logger verbosity setting is at least the value that is passed in; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to write a basic logger that responds to build events.  
  
 [!code-cs[msbuild_BasicLogger#1](~/add/codesnippet/csharp/msbuild_BasicLogger/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public virtual string Parameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the user-defined parameters of the logger.</summary>
        <value>The logger parameters. This value can be <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the derived class does not take parameters, then it can ignore this property.  
  
   
  
## Examples  
 The following example shows how to write a basic logger that responds to build events.  
  
 [!code-cs[msbuild_BasicLogger#1](~/add/codesnippet/csharp/msbuild_BasicLogger/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public virtual void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, releases the resources allocated to the logger at the time of initialization or during the build.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be overridden in the derived class to perform shutdown logic, such as releasing acquired resources.  
  
   
  
## Examples  
 The following example shows how to write a basic logger that responds to build events.  
  
 [!code-cs[msbuild_BasicLogger#1](~/add/codesnippet/csharp/msbuild_BasicLogger/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Verbosity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Build.Framework.LoggerVerbosity Verbosity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Build.Framework.LoggerVerbosity Verbosity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.LoggerVerbosity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the level of detail to show in the event log.</summary>
        <value>One of the enumeration values. The default is <see cref="T:Microsoft.Build.Framework.LoggerVerbosity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 While a logger is free to choose the events it logs, following the verbosity guidelines creates a consistent user experience.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>