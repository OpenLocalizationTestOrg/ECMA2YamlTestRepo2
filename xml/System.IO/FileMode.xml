<Type Name="FileMode" FullName="System.IO.FileMode">
  <TypeSignature Language="C#" Value="public enum FileMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed FileMode extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies how the operating system should open a file.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md). For an example of reading text from a file, see [How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/add/includes/ajax-current-ext-md.md).  
  
 A `FileMode` parameter is specified in many of the constructors for <xref:System.IO.FileStream>, <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream>, and in the `Open` methods of <xref:System.IO.File> and <xref:System.IO.FileInfo> to control how a file is opened.  
  
 `FileMode` parameters control whether a file is overwritten, created, opened, or some combination thereof. Use `Open` to open an existing file. To append to a file, use `Append`. To truncate a file or create a file if it doesn't exist, use `Create`.  
  
   
  
## Examples  
 The following `FileStream` constructor opens an existing file (`FileMode.Open`).  
  
 [!code-vb[Classic FileAccess Example#1](~/add/codesnippet/visualbasic/t-system.io.filemode_1.vb)]
 [!code-cpp[Classic FileAccess Example#1](~/add/codesnippet/cpp/t-system.io.filemode_1.cpp)]
 [!code-cs[Classic FileAccess Example#1](~/add/codesnippet/csharp/t-system.io.filemode_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="Append" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.IO.FileMode Append = int32(6)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires &lt;xref:System.Security.Permissions.FileIOPermissionAccess.Append?displayProperty=fullName&gt; permission. <see langword="FileMode.Append" /> can be used only in conjunction with <see langword="FileAccess.Write" />. Trying to seek to a position before the end of the file throws an &lt;xref:System.IO.IOException&gt; exception, and any attempt to read fails and throws a &lt;xref:System.NotSupportedException&gt; exception.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="Create" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.IO.FileMode Create = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires &lt;xref:System.Security.Permissions.FileIOPermissionAccess.Write?displayProperty=fullName&gt; permission. <see langword="FileMode.Create" /> is equivalent to requesting that if the file does not exist, use CreateNew; otherwise, use Truncate. If the file already exists but is a hidden file, an &lt;xref:System.UnauthorizedAccessException&gt; exception is thrown.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateNew">
      <MemberSignature Language="C#" Value="CreateNew" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.IO.FileMode CreateNew = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the operating system should create a new file. This requires &lt;xref:System.Security.Permissions.FileIOPermissionAccess.Write?displayProperty=fullName&gt; permission. If the file already exists, an &lt;xref:System.IO.IOException&gt; exception is thrown.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="Open" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.IO.FileMode Open = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the <see cref="T:System.IO.FileAccess" /> enumeration. A &lt;xref:System.IO.FileNotFoundException?displayProperty=fullName&gt; exception is thrown if the file does not exist.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenOrCreate">
      <MemberSignature Language="C#" Value="OpenOrCreate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.IO.FileMode OpenOrCreate = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with <see langword="FileAccess.Read" />, &lt;xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=fullName&gt; permission is required. If the file access is <see langword="FileAccess.Write" />, &lt;xref:System.Security.Permissions.FileIOPermissionAccess.Write?displayProperty=fullName&gt; permission is required. If the file is opened with <see langword="FileAccess.ReadWrite" />, both &lt;xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=fullName&gt; and &lt;xref:System.Security.Permissions.FileIOPermissionAccess.Write?displayProperty=fullName&gt; permissions are required.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="Truncate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.IO.FileMode Truncate = int32(5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires &lt;xref:System.Security.Permissions.FileIOPermissionAccess.Write?displayProperty=fullName&gt; permission. Attempts to read from a file opened with <see langword="FileMode.Truncate" /> cause an &lt;xref:System.ArgumentException&gt; exception.</summary>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>