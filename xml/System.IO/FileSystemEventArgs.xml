<Type Name="FileSystemEventArgs" FullName="System.IO.FileSystemEventArgs">
  <TypeSignature Language="C#" Value="public class FileSystemEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystemEventArgs extends System.EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for the directory events: <see cref="E:System.IO.FileSystemWatcher.Changed" />, <see cref="E:System.IO.FileSystemWatcher.Created" />, <see cref="E:System.IO.FileSystemWatcher.Deleted" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FileSystemEventArgs class is passed as a parameter to event handlers for these events:  
  
 The <xref:System.IO.FileSystemWatcher.Changed> event occurs when changes are made to the size, system attributes, last write time, last access time, or security permissions in a file or directory in the specified <xref:System.IO.FileSystemWatcher.Path%2A> of a <xref:System.IO.FileSystemWatcher>.  
  
 The <xref:System.IO.FileSystemWatcher.Created> event occurs when a file or directory in the specified <xref:System.IO.FileSystemWatcher.Path%2A> of a <xref:System.IO.FileSystemWatcher> is created.  
  
 The <xref:System.IO.FileSystemWatcher.Deleted> event occurs when a file or directory in the specified <xref:System.IO.FileSystemWatcher.Path%2A> of a <xref:System.IO.FileSystemWatcher> is deleted. For more information, see <xref:System.IO.FileSystemWatcher>.  
  
   
  
## Examples  
 The following example shows how to create a <xref:System.IO.FileSystemWatcher> to monitor file changes (creates, deletes, renames, changes) occurring on a disk drive. The example also shows how to properly receive error notifications.  
  
 [!code-cs[FileSystemWatcher#1](~/add/codesnippet/csharp/t-system.io.filesystemev_1_1.cs)]
 [!code-vb[FileSystemWatcher#1](~/add/codesnippet/visualbasic/t-system.io.filesystemev_1_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemEventArgs (System.IO.WatcherChangeTypes changeType, string directory, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.WatcherChangeTypes changeType, string directory, string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="changeType">One of the <see cref="T:System.IO.WatcherChangeTypes" /> values, which represents the kind of change detected in the file system.</param>
        <param name="directory">The root directory of the affected file or directory.</param>
        <param name="name">The name of the affected file or directory.</param>
        <summary>Initializes a new instance of the <see cref="T:System.IO.FileSystemEventArgs" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public System.IO.WatcherChangeTypes ChangeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.WatcherChangeTypes ChangeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.WatcherChangeTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of directory event that occurred.</summary>
        <value>One of the <see cref="T:System.IO.WatcherChangeTypes" /> values that represents the kind of change detected in the file system.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the ChangeType property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemEventArgs> class.  
  
 [!code-cs[FileSystemWatcher#7](~/add/codesnippet/csharp/p-system.io.filesystemev_1_1.cs)]
 [!code-vb[FileSystemWatcher#7](~/add/codesnippet/visualbasic/p-system.io.filesystemev_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FullPath">
      <MemberSignature Language="C#" Value="public string FullPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the fully qualifed path of the affected file or directory.</summary>
        <value>The path of the affected file or directory.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the FullPath property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemEventArgs> class.  
  
 [!code-cs[FileSystemWatcher#7](~/add/codesnippet/csharp/p-system.io.filesystemev_0_1.cs)]
 [!code-vb[FileSystemWatcher#7](~/add/codesnippet/visualbasic/p-system.io.filesystemev_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the affected file or directory.</summary>
        <value>The name of the affected file or directory.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The name returned by the Name property is the relative path of the affected file or directory, with respect to the directory being watched. For example, if a <xref:System.IO.FileSystemWatcher> object is watching the directory "C:\temp" and the file at "C:\temp\test\file.txt" changes, the Name property will return "test\file.txt".  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>