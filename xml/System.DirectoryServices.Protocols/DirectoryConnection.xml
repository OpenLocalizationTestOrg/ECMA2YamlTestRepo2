<Type Name="DirectoryConnection" FullName="System.DirectoryServices.Protocols.DirectoryConnection">
  <TypeSignature Language="C#" Value="public abstract class DirectoryConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DirectoryConnection extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>The DirectoryConnection class is an abstract class and cannot be instantiated. Use the <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> or <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" /> classes to connect to a directory server.</summary>
    <remarks>To be added.</remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DirectoryConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>The DirectoryConnection constructor initializes a new instance of a <see cref="T:System.DirectoryServices.Protocols.DirectoryConnection" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ClientCertificates property specifies one or more client certificates to send for authentication.</summary>
        <value>One or more client certificates to send for authentication.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Credential">
      <MemberSignature Language="C#" Value="public virtual System.Net.NetworkCredential Credential { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkCredential Credential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The Credential property specifies alternate credentials for the connection object.</summary>
        <value>Alternate credentials for the connection object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If not specified, the default value is `null`.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="T:System.Security.Permissions.SecurityAction" />
        </permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Directory">
      <MemberSignature Language="C#" Value="public virtual System.DirectoryServices.Protocols.DirectoryIdentifier Directory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.Protocols.DirectoryIdentifier Directory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.Protocols.DirectoryIdentifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The Directory property specifies the domain or the server to which the connection should be made.</summary>
        <value>The domain or the server to which the connection should be made.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, "http://fabrikam.com/platforms/adssoap.dll" represents a DSML server and "dc-01.fabrikam.com" represents an LDAP server.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SendRequest">
      <MemberSignature Language="C#" Value="public abstract System.DirectoryServices.Protocols.DirectoryResponse SendRequest (System.DirectoryServices.Protocols.DirectoryRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.DirectoryServices.Protocols.DirectoryResponse SendRequest(class System.DirectoryServices.Protocols.DirectoryRequest request) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.Protocols.DirectoryResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.DirectoryServices.Protocols.DirectoryRequest" />
      </Parameters>
      <Docs>
        <param name="request">A <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object that contains the request.</param>
        <summary>The SendRequest method sends a single directory operation to the server.</summary>
        <returns>A <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object that contains the server response to the request operation. The returned response object may be different than the requested object if the server returns a different response.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="T:System.Security.Permissions.SecurityAction" />
        </permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public virtual TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The Timeout property contains the length of time, in seconds, before the connection times out.</summary>
        <value>The length of time, in seconds, before the connection times out.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Thirty seconds is the default time length property setting.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>