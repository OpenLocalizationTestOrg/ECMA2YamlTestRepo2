<Type Name="SqlClientFactory" FullName="System.Data.SqlClient.SqlClientFactory">
  <TypeSignature Language="C#" Value="public sealed class SqlClientFactory : System.Data.Common.DbProviderFactory, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlClientFactory extends System.Data.Common.DbProviderFactory implements class System.IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbProviderFactory</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a set of methods for creating instances of the <see cref="N:System.Data.SqlClient" /> provider's implementation of the data source classes.</summary>
    <remarks>To be added.</remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CanCreateDataSourceEnumerator">
      <MemberSignature Language="C#" Value="public override bool CanCreateDataSourceEnumerator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCreateDataSourceEnumerator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <see langword="true" /> if a <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" /> can be created; otherwise <see langword="false" /> .</summary>
        <value>
          <see langword="true" /> if a <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" /> can be created; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.Common.DbProviderFactory> class provides the <xref:System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator%2A> property so that inheritors can indicate whether they can provide a data source enumerator. The <xref:System.Data.SqlClient.SqlClientFactory> displays this property, but its value is always `true`.  
  
   
  
## Examples  
 The following example displays a list of all available SQL Server data sources, using code that could enumerate data sources for any provider.  
  
 [!code-vb[DataWorks SqlClientFactory.DataSourceEnumerator#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._6_1.vb)]
 [!code-cs[DataWorks SqlClientFactory.DataSourceEnumerator#1](~/add/codesnippet/csharp/p-system.data.sqlclient._6_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public override System.Data.Common.DbCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.Common.DbCommand CreateCommand() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbCommand" /> instance.</summary>
        <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code fragment returns a strongly typed <xref:System.Data.Common.DbCommand> instance:  
  
```vb#  
Dim newFactory As SqlClientFactory = SqlClientFactory.Instance  
Dim cmd As DbCommand = newFactory.CreateCommand()  
```  
  
```c#  
SqlClientFactory newFactory = SqlClientFactory.Instance;  
DbCommand cmd = newFactory.CreateCommand();  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateCommandBuilder">
      <MemberSignature Language="C#" Value="public override System.Data.Common.DbCommandBuilder CreateCommandBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.Common.DbCommandBuilder CreateCommandBuilder() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommandBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbCommandBuilder" /> instance.</summary>
        <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbCommandBuilder" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code fragment returns a strongly typed <xref:System.Data.Common.DbCommandBuilder> instance:  
  
```vb#  
Dim newFactory As SqlClientFactory = SqlClientFactory.Instance  
Dim cmd As DbCommandBuilder = newFactory.CreateCommandBuilder()  
```  
  
```c#  
SqlClientFactory newFactory = SqlClientFactory.Instance;  
DbCommandBuilder cmd = newFactory.CreateCommandBuilder();  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateConnection">
      <MemberSignature Language="C#" Value="public override System.Data.Common.DbConnection CreateConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.Common.DbConnection CreateConnection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbConnection" /> instance.</summary>
        <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code fragment returns a strongly typed <xref:System.Data.Common.DbConnection> instance:  
  
```vb#  
Dim newFactory As SqlClientFactory = SqlClientFactory.Instance  
Dim cmd As DbConnection = newFactory.CreateConnection()  
```  
  
```c#  
SqlClientFactory newFactory = SqlClientFactory.Instance;  
DbConnection cmd = newFactory.CreateConnection();  
  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateConnectionStringBuilder">
      <MemberSignature Language="C#" Value="public override System.Data.Common.DbConnectionStringBuilder CreateConnectionStringBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.Common.DbConnectionStringBuilder CreateConnectionStringBuilder() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnectionStringBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> instance.</summary>
        <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbConnectionStringBuilder" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code fragment returns a strongly typed <xref:System.Data.Common.DbConnectionStringBuilder> instance:  
  
```vb#  
Dim newFactory As SqlClientFactory = SqlClientFactory.Instance  
Dim cmd As DbConnectionStringBuilder = _  
    newFactory.CreateConnectionStringBuilder()  
```  
  
```c#  
SqlClientFactory newFactory = SqlClientFactory.Instance;  
DbConnectionStringBuilder cmd =   
    newFactory.CreateConnectionStringBuilder();  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateDataAdapter">
      <MemberSignature Language="C#" Value="public override System.Data.Common.DbDataAdapter CreateDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.Common.DbDataAdapter CreateDataAdapter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataAdapter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbDataAdapter" /> instance.</summary>
        <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbDataAdapter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code fragment returns a strongly typed <xref:System.Data.Common.DbDataAdapter> instance:  
  
```vb#  
Dim newFactory As SqlClientFactory = SqlClientFactory.Instance  
Dim cmd As DbDataAdapter = newFactory.CreateDataAdapter()  
```  
  
```c#  
SqlClientFactory newFactory = SqlClientFactory.Instance;  
DbDataAdapter cmd = newFactory.CreateDataAdapter();  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceEnumerator">
      <MemberSignature Language="C#" Value="public override System.Data.Common.DbDataSourceEnumerator CreateDataSourceEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.Common.DbDataSourceEnumerator CreateDataSourceEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataSourceEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />.</summary>
        <returns>A new data source enumerator.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays a list of all available SQL Server data sources, using code that could enumerate data sources for any provider.  
  
 [!code-vb[DataWorks SqlClientFactory.DataSourceEnumerator#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._2_1.vb)]
 [!code-cs[DataWorks SqlClientFactory.DataSourceEnumerator#1](~/add/codesnippet/csharp/m-system.data.sqlclient._2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateParameter">
      <MemberSignature Language="C#" Value="public override System.Data.Common.DbParameter CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.Common.DbParameter CreateParameter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbParameter" /> instance.</summary>
        <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbParameter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code fragment returns a strongly typed <xref:System.Data.Common.DbParameter> instance:  
  
```vb#  
Dim newFactory As SqlClientFactory = SqlClientFactory.Instance  
Dim cmd As DbParameter = newFactory.CreateParameter()  
```  
  
```c#  
SqlClientFactory newFactory = SqlClientFactory.Instance;  
DbParameter cmd = newFactory.CreateParameter();  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreatePermission">
      <MemberSignature Language="C#" Value="public override System.Security.CodeAccessPermission CreatePermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.CodeAccessPermission CreatePermission(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.CodeAccessPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">A member of the <see cref="T:System.Security.Permissions.PermissionState" /> enumeration.</param>
        <summary>Returns a new <see cref="T:System.Security.CodeAccessPermission" />.</summary>
        <returns>A strongly typed instance of <see cref="T:System.Security.CodeAccessPermission" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static readonly System.Data.SqlClient.SqlClientFactory Instance;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.SqlClient.SqlClientFactory Instance" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlClientFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an instance of the <see cref="T:System.Data.SqlClient.SqlClientFactory" />. This can be used to retrieve strongly typed data objects.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code fragment uses the Instance property to retrieve a **SqlClientFactory** instance, and then return a strongly typed <xref:System.Data.Common.DbCommand> instance:  
  
```vb#  
Dim newFactory As SqlClientFactory = SqlClientFactory.Instance  
Dim cmd As DbCommand = newFactory.CreateCommand()  
```  
  
```c#  
SqlClientFactory newFactory = SqlClientFactory.Instance;  
DbCommand cmd = newFactory.CreateCommand();  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.IServiceProvider.GetService">
      <MemberSignature Language="C#" Value="object IServiceProvider.GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IServiceProvider.GetService(class System.Type serviceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">An object that specifies the type of service object to get.</param>
        <summary>For a description of this member, see &lt;xref:System.IServiceProvider.GetService%2A?displayProperty=fullName&gt;.</summary>
        <returns>A service object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>