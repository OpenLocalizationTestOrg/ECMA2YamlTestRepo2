<Type Name="SqlCommand" FullName="System.Data.SqlClient.SqlCommand">
  <TypeSignature Language="C#" Value="public sealed class SqlCommand : System.Data.Common.DbCommand, ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommand extends System.Data.Common.DbCommand implements class System.ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommand</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RecordsAffected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a Transact-SQL statement or stored procedure to execute against a SQL Server database. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When an instance of SqlCommand is created, the read/write properties are set to their initial values. For a list of these values, see the SqlCommand constructor.  
  
 SqlCommand features the following methods for executing commands at a SQL Server database:  
  
|Item|Description|  
|----------|-----------------|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>|Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this SqlCommand, generally executing commands such as INSERT, DELETE, UPDATE, and SET statements. Each call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> must be paired with a call to <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> which finishes the operation, typically on a separate thread.|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>|Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this SqlCommand and retrieves one or more results sets from the server. Each call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> must be paired with a call to <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> which finishes the operation, typically on a separate thread.|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>|Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this SqlCommand. Each call to `BeginExecuteXmlReader` must be paired with a call to `EndExecuteXmlReader`, which finishes the operation, typically on a separate thread, and returns an <xref:System.Xml.XmlReader> object.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>|Executes commands that return rows. For increased performance, <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> invokes commands using the Transact-SQL `sp_executesql` system stored procedure. Therefore, <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> might not have the effect that you want if used to execute commands such as Transact-SQL SET statements.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>|Executes commands such as Transact-SQL INSERT, DELETE, UPDATE, and SET statements.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>|Retrieves a single value (for example, an aggregate value) from a database.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>|Sends the <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> to the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> and builds an <xref:System.Xml.XmlReader> object.|  
  
 You can reset the <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property and reuse the SqlCommand object. However, you must close the <xref:System.Data.SqlClient.SqlDataReader> before you can execute a new or previous command.  
  
 If a <xref:System.Data.SqlClient.SqlException> is generated by the method executing a SqlCommand, the <xref:System.Data.SqlClient.SqlConnection> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <xref:System.Data.SqlClient.SqlConnection>. However, the user can reopen the connection and continue.  
  
> [!NOTE]
>  Nameless, also called ordinal, parameters are not supported by the .NET Framework Data Provider for SQL Server.  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a SqlCommand, and a <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it to the console. Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader> and then the <xref:System.Data.SqlClient.SqlConnection> as it exits the `Using` code blocks.  
  
 [!code-cs[Classic WebData SqlCommand Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._6_1.cs)]
 [!code-vb[Classic WebData SqlCommand Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._6_1.vb)]  
  
 The following sample shows how to create and execute different types of SqlCommand objects.  
  
 First you must create the sample database, by executing the following script:  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE procedure [dbo].[CourseExtInfo] @CourseId int  
as  
select c.CourseID,c.Title,c.Credits,d.Name as DepartmentName  
from Course as c left outer join Department as d on c.DepartmentID=d.DepartmentID  
where c.CourseID=@CourseId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create procedure [dbo].[DepartmentInfo] @DepartmentId int,@CourseCount int output  
as  
select @CourseCount=Count(c.CourseID)  
from course as c  
where c.DepartmentID=@DepartmentId  
  
select d.DepartmentID,d.Name,d.Budget,d.StartDate,d.Administrator  
from Department as d  
where d.DepartmentID=@DepartmentId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
Create PROCEDURE [dbo].[GetDepartmentsOfSpecifiedYear]   
@Year int,@BudgetSum money output  
AS  
BEGIN  
        SELECT @BudgetSum=SUM([Budget])  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year   
  
SELECT [DepartmentID]  
      ,[Name]  
      ,[Budget]  
      ,[StartDate]  
      ,[Administrator]  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year  
  
END  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Person](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  
[LastName] [nvarchar](50) NOT NULL,  
[FirstName] [nvarchar](50) NOT NULL,  
[HireDate] [datetime] NULL,  
[EnrollmentDate] [datetime] NULL,  
 CONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED   
(  
[PersonID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[StudentGrade](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  
[CourseID] [nvarchar](10) NOT NULL,  
[StudentID] [int] NOT NULL,  
[Grade] [decimal](3, 2) NOT NULL,  
 CONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED   
(  
[EnrollmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create view [dbo].[EnglishCourse]  
as  
select c.CourseID,c.Title,c.Credits,c.DepartmentID  
from Course as c join Department as d on c.DepartmentID=d.DepartmentID  
where d.Name=N'English'  
  
GO  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
SET IDENTITY_INSERT [dbo].[Person] ON   
  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (1, N'Hu', N'Nan', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (2, N'Norman', N'Laura', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (3, N'Olivotto', N'Nino', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (4, N'Anand', N'Arturo', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (5, N'Jai', N'Damien', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (6, N'Holt', N'Roger', CAST(0x000097F100000000 AS DateTime), NULL)  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (7, N'Martin', N'Randall', CAST(0x00008B1A00000000 AS DateTime), NULL)  
SET IDENTITY_INSERT [dbo].[Person] OFF  
SET IDENTITY_INSERT [dbo].[StudentGrade] ON   
  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (1, N'C1045', 1, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (2, N'C1045', 2, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (3, N'C1045', 3, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (4, N'C1045', 4, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (5, N'C1045', 5, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (6, N'C1061', 1, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (7, N'C1061', 3, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (8, N'C1061', 4, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (9, N'C1061', 5, CAST(1.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (10, N'C2021', 1, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (11, N'C2021', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (12, N'C2021', 4, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (13, N'C2021', 5, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (14, N'C2042', 1, CAST(2.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (15, N'C2042', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (16, N'C2042', 3, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (17, N'C2042', 5, CAST(3.00 AS Decimal(3, 2)))  
SET IDENTITY_INSERT [dbo].[StudentGrade] OFF  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
ALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])  
REFERENCES [dbo].[Person] ([PersonID])  
GO  
ALTER TABLE [dbo].[StudentGrade] CHECK CONSTRAINT [FK_StudentGrade_Student]  
GO  
```  
  
 Next, compile and execute the following:  
  
```  
using System;  
using System.Data;  
using System.Data.SqlClient;  
using System.Threading.Tasks;  
  
class Program {  
  
   static class SqlHelper {  
      // Set the connection, command, and then execute the command with non query.  
      public static Int32 ExecuteNonQuery(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               // There're three command types: StoredProcedure, Text, TableDirect. The TableDirect   
               // type is only for OLE DB.    
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteNonQuery();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command and only return one value.  
      public static Object ExecuteScalar(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteScalar();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command with query and return the reader.  
      public static SqlDataReader ExecuteReader(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         SqlConnection conn = new SqlConnection(connectionString);  
  
         using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
            cmd.CommandType = commandType;  
            cmd.Parameters.AddRange(parameters);  
  
            conn.Open();  
            // When using CommandBehavior.CloseConnection, the connection will be closed when the   
            // IDataReader is closed.  
            SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);  
  
            return reader;  
         }  
      }  
   }  
  
   static void Main(string[] args) {  
      String connectionString = "Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;";  
  
      CountCourses(connectionString, 2012);  
      Console.WriteLine();  
  
      Console.WriteLine("Following result is the departments that started from 2007:");  
      GetDepartments(connectionString, 2007);  
      Console.WriteLine();  
  
      Console.WriteLine("Add the credits when the credits of course is lower than 4.");  
      AddCredits(connectionString, 4);  
      Console.WriteLine();  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   static void CountCourses(String connectionString, Int32 year) {  
      String commandText = "Select Count([CourseID]) FROM [MySchool].[dbo].[Course] Where Year=@Year";  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      Object oValue = SqlHelper.ExecuteScalar(connectionString, commandText, CommandType.Text, parameterYear);  
      Int32 count;  
      if (Int32.TryParse(oValue.ToString(), out count))  
         Console.WriteLine("There {0} {1} course{2} in {3}.", count > 1 ? "are" : "is", count, count > 1 ? "s" : null, year);  
   }  
  
   // Display the Departments that start from the specified year.  
   static void GetDepartments(String connectionString, Int32 year) {  
      String commandText = "dbo.GetDepartmentsOfSpecifiedYear";  
  
      // Specify the year of StartDate  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      // When the direction of parameter is set as Output, you can get the value after   
      // executing the command.  
      SqlParameter parameterBudget = new SqlParameter("@BudgetSum", SqlDbType.Money);  
      parameterBudget.Direction = ParameterDirection.Output;  
  
      using (SqlDataReader reader = SqlHelper.ExecuteReader(connectionString, commandText,  
          CommandType.StoredProcedure, parameterYear, parameterBudget)) {  
         Console.WriteLine("{0,-20}{1,-20}{2,-20}{3,-20}", "Name", "Budget", "StartDate",  
             "Administrator");  
         while (reader.Read()) {  
            Console.WriteLine("{0,-20}{1,-20:C}{2,-20:d}{3,-20}", reader["Name"],  
                reader["Budget"], reader["StartDate"], reader["Administrator"]);  
         }  
      }  
      Console.WriteLine("{0,-20}{1,-20:C}", "Sum:", parameterBudget.Value);  
   }  
  
   // If credits of course is lower than the certain value, the method will add the credits.  
   static void AddCredits(String connectionString, Int32 creditsLow) {  
      String commandText = "Update [MySchool].[dbo].[Course] Set Credits=Credits+1 Where Credits<@Credits";  
  
      SqlParameter parameterCredits = new SqlParameter("@Credits", creditsLow);  
  
      Int32 rows = SqlHelper.ExecuteNonQuery(connectionString, commandText, CommandType.Text, parameterCredits);  
  
      Console.WriteLine("{0} row{1} {2} updated.", rows, rows > 1 ? "s" : null, rows > 1 ? "are" : "is");  
   }  
}  
```  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlCommand" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The base constructor initializes all fields to their default values. The following table shows initial property values for an instance of <xref:System.Data.SqlClient.SqlCommand>.  
  
|Properties|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|empty string ("")|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Null|  
  
 You can change the value for any of these properties through a separate call to the property.  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets the `CommandTimeout` property.  
  
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._39_1.vb)]
 [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._39_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cmdText">The text of the query.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlCommand" /> class with the text of the query.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When an instance of <xref:System.Data.SqlClient.SqlCommand> is created, the following read/write properties are set to initial values.  
  
|Properties|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|null|  
  
 You can change the value for any of these properties through a separate call to the property.  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand>, passing in the connection string and command text.  
  
 [!code-vb[Classic WebData SqlCommand.SqlCommand1 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._21_1.vb)]
 [!code-cs[Classic WebData SqlCommand.SqlCommand1 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._21_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="cmdText">The text of the query.</param>
        <param name="connection">A <see cref="T:System.Data.SqlClient.SqlConnection" /> that represents the connection to an instance of SQL Server.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlCommand" /> class with the text of the query and a <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table shows initial property values for an instance of <xref:System.Data.SqlClient.SqlCommand>.  
  
|Properties|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|A new <xref:System.Data.SqlClient.SqlConnection> that is the value for the `connection` parameter.|  
  
 You can change the value for any of these parameters by setting the related property.  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  
  
 [!code-cs[Classic WebData SqlCommand.SqlCommand2 Example#1](~/add/codesnippet/csharp/c858d494-4959-470c-91ba-_1.cs)]
 [!code-vb[Classic WebData SqlCommand.SqlCommand2 Example#1](~/add/codesnippet/visualbasic/c858d494-4959-470c-91ba-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="cmdText">The text of the query.</param>
        <param name="connection">A <see cref="T:System.Data.SqlClient.SqlConnection" /> that represents the connection to an instance of SQL Server.</param>
        <param name="transaction">The <see cref="T:System.Data.SqlClient.SqlTransaction" /> in which the <see cref="T:System.Data.SqlClient.SqlCommand" /> executes.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlCommand" /> class with the text of the query, a <see cref="T:System.Data.SqlClient.SqlConnection" />, and the <see cref="T:System.Data.SqlClient.SqlTransaction" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table shows initial property values for an instance of <xref:System.Data.SqlClient.SqlCommand>.  
  
|Properties|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|A new <xref:System.Data.SqlClient.SqlConnection> that is the value for the `connection` parameter.|  
  
 You can change the value for any of these parameters by setting the related property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction, System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction, valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
        <Parameter Name="columnEncryptionSetting" Type="System.Data.SqlClient.SqlCommandColumnEncryptionSetting" />
      </Parameters>
      <Docs>
        <param name="cmdText">The text of the query.</param>
        <param name="connection">A <see cref="T:System.Data.SqlClient.SqlConnection" /> that represents the connection to an instance of SQL Server.</param>
        <param name="transaction">The <see cref="T:System.Data.SqlClient.SqlTransaction" /> in which the <see cref="T:System.Data.SqlClient.SqlCommand" /> executes.</param>
        <param name="columnEncryptionSetting">The encryption setting. For more information, see [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx).</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlCommand" /> class with specified command text, connection, transaction, and encryption setting.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll or wait for results, or both; this value is also needed when invoking &lt;xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A&gt;, which returns the number of affected rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BeginExecuteNonQuery method starts the process of asynchronously executing a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] statement or stored procedure that does not return rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> method to finish the operation. The BeginExecuteNonQuery method returns immediately (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> has no effect on BeginExecuteNonQuery), but until the code executes the corresponding <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> before the command's execution is completed causes the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous.  
  
 Because this overload does not support a callback procedure, developers must either poll to determine whether the command has completed, using the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> returned by the BeginExecuteNonQuery method; or wait for the completion of one or more commands using the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the returned <xref:System.IAsyncResult>.  
  
   
  
## Examples  
 The following console application creates updates data within the **AdventureWorks** sample database, doing its work asynchronously. In order to emulate a long-running process, this example inserts a WAITFOR statement in the command text. Normally, you would not take efforts to make your commands run slower, but doing this in this case makes it easier to demonstrate the asynchronous behavior.  
  
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._34_1.vb)]
 [!code-cs[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/add/codesnippet/csharp/m-system.data.sqlclient._34_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">An &lt;xref:System.AsyncCallback&gt; delegate that is invoked when the command's execution has completed. Pass <see langword="null" /> (<see langword="Nothing" /> in Microsoft Visual Basic) to indicate that no callback is required.</param>
        <param name="stateObject">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the &lt;xref:System.IAsyncResult.AsyncState%2A&gt; property.</param>
        <summary>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <see cref="T:System.Data.SqlClient.SqlCommand" />, given a callback procedure and state information.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll or wait for results, or both; this value is also needed when invoking &lt;xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A&gt;, which returns the number of affected rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that does not return rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> method to finish the operation. The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> method returns immediately (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> has no effect on BeginExecuteNonQuery), but until the code executes the corresponding <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> before the command's execution is completed causes the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 The `callback` parameter lets you specify an <xref:System.AsyncCallback> delegate that is called when the statement has completed. You can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> method from within this delegate procedure, or from any other location within your application. In addition, you can pass any object in the `asyncStateObject` parameter, and your callback procedure can retrieve this information using the <xref:System.IAsyncResult.AsyncState%2A> property.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous.  
  
 Because the callback procedure executes from within a background thread supplied by the Microsoft .NET common language runtime, it is very important that you take a rigorous approach to handling cross-thread interactions from within your applications. For example, you must not interact with a form's contents from within your callback procedure; should you have to update the form, you must switch back to the form's thread in order to do your work. The example in this topic demonstrates this behavior.  
  
 All errors that occur during the execution of the operation are thrown as exceptions in the callback procedure. You must handle the exception in the callback procedure, not in the main application. See the example in this topic for additional information on handling exceptions in the callback procedure.  
  
   
  
## Examples  
 The following Windows application demonstrates the use of the BeginExecuteNonQuery method, executing a Transact-SQL statement that includes a delay of several seconds (emulating a long-running command).  
  
 This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  
  
 To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  
  
 [!code-cs[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteNonQueryForm.TesterFormCS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteNonQueryForm.TesterFormVB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <see cref="T:System.Data.SqlClient.SqlCommand" />, and retrieves one or more result sets from the server.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll or wait for results, or both; this value is also needed when invoking &lt;xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A&gt;, which returns a <see cref="T:System.Data.SqlClient.SqlDataReader" /> instance that can be used to retrieve the returned rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BeginExecuteReader method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method to finish the operation and retrieve the <xref:System.Data.SqlClient.SqlDataReader> returned by the command. The BeginExecuteReader method returns immediately, but until the code executes the corresponding <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> before the command's execution is completed causes the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous. This means that calls to <xref:System.Data.SqlClient.SqlDataReader.Read%2A> may block if more data is required and the underlying network's read operation blocks.  
  
 Because this overload does not support a callback procedure, developers must either poll to determine whether the command has completed, using the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> returned by the BeginExecuteReader method; or wait for the completion of one or more commands using the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the returned <xref:System.IAsyncResult>.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or BeginExecuteReader to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http://support.microsoft.com.  
  
   
  
## Examples  
 The following console application starts the process of retrieving a data reader asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. As soon as the process has completed, the code retrieves the <xref:System.Data.SqlClient.SqlDataReader> and displays its contents.  
  
 [!code-cs[DataWorks SqlCommand.BeginExecuteReader#1](~/add/codesnippet/csharp/m-system.data.sqlclient._4_1.cs)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReader#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values, indicating options for statement execution and data retrieval.</param>
        <summary>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <see cref="T:System.Data.SqlClient.SqlCommand" /> using one of the <see cref="T:System.Data.CommandBehavior" /> values.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll, wait for results, or both; this value is also needed when invoking &lt;xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A&gt;, which returns a <see cref="T:System.Data.SqlClient.SqlDataReader" /> instance that can be used to retrieve the returned rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method to finish the operation and retrieve the <xref:System.Data.SqlClient.SqlDataReader> returned by the command. The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method returns immediately, but until the code executes the corresponding <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> before the command's execution is completed causes the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 The `behavior` parameter lets you specify options that control the behavior of the command and its connection. These values can be combined together (using the programming language's `OR` operator); generally, developers use the `CommandBehavior.CloseConnection` value to make sure that the connection is closed by the runtime when the <xref:System.Data.SqlClient.SqlDataReader> is closed.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous. This means that calls to <xref:System.Data.SqlClient.SqlDataReader.Read%2A> may block if more data is required and the underlying network's read operation blocks.  
  
 Because this overload does not support a callback procedure, developers must either poll to determine whether the command has completed, using the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> returned by the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> method; or wait for the completion of one or more commands using the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the returned <xref:System.IAsyncResult>.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server returns any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http://support.microsoft.com.  
  
   
  
## Examples  
 The following console application starts the process of retrieving a data reader asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. Once the process has completed, the code retrieves the <xref:System.Data.SqlClient.SqlDataReader> and displays its contents.  
  
 This example also passes the `CommandBehavior.CloseConnection` and `CommandBehavior.SingleRow` values in the behavior parameter, causing the connection to be closed with the returned <xref:System.Data.SqlClient.SqlDataReader> is closed, and to optimize for a single row result.  
  
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/add/codesnippet/visualbasic/d7d83823-a2e6-4b2d-a7a2-_1.vb)]
 [!code-cs[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/add/codesnippet/csharp/d7d83823-a2e6-4b2d-a7a2-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">An &lt;xref:System.AsyncCallback&gt; delegate that is invoked when the command's execution has completed. Pass <see langword="null" /> (<see langword="Nothing" /> in Microsoft Visual Basic) to indicate that no callback is required.</param>
        <param name="stateObject">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the &lt;xref:System.IAsyncResult.AsyncState%2A&gt; property.</param>
        <summary>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <see cref="T:System.Data.SqlClient.SqlCommand" /> and retrieves one or more result sets from the server, given a callback procedure and state information.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll, wait for results, or both; this value is also needed when invoking &lt;xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A&gt;, which returns a <see cref="T:System.Data.SqlClient.SqlDataReader" /> instance which can be used to retrieve the returned rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method to finish the operation and retrieve the <xref:System.Data.SqlClient.SqlDataReader> returned by the command. The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method returns immediately, but until the code executes the corresponding <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> before the command's execution is completed cause the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 The `callback` parameter lets you specify an <xref:System.AsyncCallback> delegate that is called when the statement has completed. You can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method from within this delegate procedure, or from any other location within your application. In addition, you can pass any object in the `stateObject` parameter, and your callback procedure can retrieve this information using the <xref:System.IAsyncResult.AsyncState%2A> property.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous. This means that calls to <xref:System.Data.SqlClient.SqlDataReader.Read%2A> may block if more data is required and the underlying network's read operation blocks.  
  
 Because the callback procedure executes from within a background thread supplied by the Microsoft .NET runtime, it is very important that you take a rigorous approach to handling cross-thread interactions from within your applications. For example, you must not interact with a form's contents from within your callback procedure; should you have to update the form, you must switch back to the form's thread in order to do your work. The example in this topic demonstrates this behavior.  
  
 All errors that occur during the execution of the operation are thrown as exceptions in the callback procedure. You must handle the exception in the callback procedure, not in the main application. See the example in this topic for additional information on handling exceptions in the callback procedure.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server returns any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http://support.microsoft.com.  
  
   
  
## Examples  
 The following Windows application demonstrates the use of the BeginExecuteReader method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). Because the sample executes the command asynchronously, the form remains responsive while awaiting the results. This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the `stateObject` parameter; doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method corresponding to the initial call to BeginExecuteReader.  
  
 This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  
  
 To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.DataGridView> control, and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  
  
 [!code-cs[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteReaderAsync.TesterFormCS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteReaderAsync.TesterFormVB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="callback">An &lt;xref:System.AsyncCallback&gt; delegate that is invoked when the command's execution has completed. Pass <see langword="null" /> (<see langword="Nothing" /> in Microsoft Visual Basic) to indicate that no callback is required.</param>
        <param name="stateObject">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the &lt;xref:System.IAsyncResult.AsyncState%2A&gt; property.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values, indicating options for statement execution and data retrieval.</param>
        <summary>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <see cref="T:System.Data.SqlClient.SqlCommand" />, using one of the <see langword="CommandBehavior" /> values, and retrieving one or more result sets from the server, given a callback procedure and state information.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll or wait for results, or both; this value is also needed when invoking &lt;xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A&gt;, which returns a <see cref="T:System.Data.SqlClient.SqlDataReader" /> instance which can be used to retrieve the returned rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method to finish the operation and retrieve the <xref:System.Data.SqlClient.SqlDataReader> returned by the command. The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method returns immediately, but until the code executes the corresponding <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> before the command's execution is completed causes the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 The `callback` parameter lets you specify an <xref:System.AsyncCallback> delegate that is called when the statement has completed. You can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method from within this delegate procedure, or from any other location within your application. In addition, you can pass any object in the `stateObject` parameter, and your callback procedure can retrieve this information using the <xref:System.IAsyncResult.AsyncState%2A> property.  
  
 The `behavior` parameter lets you specify options that control the behavior of the command and its connection. These values can be combined together (using the programming language's `Or` operator); generally, developers use the `CloseConnection` value to make sure that the connection is closed by the runtime when the <xref:System.Data.SqlClient.SqlDataReader> is closed. Developers can also optimize the behavior of the <xref:System.Data.SqlClient.SqlDataReader> by specifying the `SingleRow` value when it is known in advance that the Transact-SQL statement or stored procedure only returns a single row.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous. This means that calls to <xref:System.Data.SqlClient.SqlDataReader.Read%2A> may block if more data is required and the underlying network's read operation blocks.  
  
 Because the callback procedure executes from within a background thread supplied by the Microsoft .NET common language runtime, it is very important that you take a rigorous approach to handling cross-thread interactions from within your applications. For example, you must not interact with a form's contents from within your callback procedure--should you have to update the form, you must switch back to the form's thread in order to do your work. The example in this topic demonstrates this behavior.  
  
 All errors that occur during the execution of the operation are thrown as exceptions in the callback procedure. You must handle the exception in the callback procedure, not in the main application. See the example in this topic for additional information on handling exceptions in the callback procedure.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http://support.microsoft.com.  
  
   
  
## Examples  
 The following Windows application demonstrates the use of the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). Because the sample executes the command asynchronously, the form remains responsive while awaiting the results. This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the `stateObject` parameter; doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method corresponding to the initial call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  
  
 To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.DataGridView> control, and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  
  
 This example passes the `CommandBehavior.CloseConnection` value in the `behavior` parameter, causing the returned <xref:System.Data.SqlClient.SqlDataReader> to automatically close its connection when it is closed.  
  
 [!code-cs[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior.TesterFormCS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior.TesterFormVB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <see cref="T:System.Data.SqlClient.SqlCommand" /> and returns results as an &lt;xref:System.Xml.XmlReader&gt; object.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll or wait for results, or both; this value is also needed when invoking <see langword="EndExecuteXmlReader" />, which returns a single XML value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BeginExecuteXmlReader method starts the process of asynchronously executing a Transact-SQL statement that returns rows as XML, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the `EndExecuteXmlReader` method to finish the operation and retrieve the XML returned by the command. The BeginExecuteXmlReader method returns immediately, but until the code executes the corresponding `EndExecuteXmlReader` method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the `EndExecuteXmlReader` before the command's execution is completed causes the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 The <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property ordinarily specifies a Transact-SQL statement with a valid FOR XML clause. However, `CommandText` can also specify a statement that returns `ntext` data that contains valid XML.  
  
 A typical <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> query can be formatted as in the following C# example:  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM dbo.Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 This method can also be used to retrieve a single-row, single-column result set. In this case, if more than one row is returned, the `EndExecuteXmlReader` method attaches the <xref:System.Xml.XmlReader> to the value on the first row, and discards the rest of the result set.  
  
 The multiple active result set (MARS) feature lets multiple actions use the same connection.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous.  
  
 Because this overload does not support a callback procedure, developers need to either poll to determine whether the command has completed, using the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> returned by the BeginExecuteXmlReader method; or wait for the completion of one or more commands using the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the returned <xref:System.IAsyncResult>.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server returns any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http://support.microsoft.com.  
  
   
  
## Examples  
 The following console application starts the process of retrieving XML data asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. Once the process has completed, the code retrieves the XML and displays its contents.  
  
 [!code-cs[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/add/codesnippet/csharp/m-system.data.sqlclient._41_1.cs)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._41_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">An &lt;xref:System.AsyncCallback&gt; delegate that is invoked when the command's execution has completed. Pass <see langword="null" /> (<see langword="Nothing" /> in Microsoft Visual Basic) to indicate that no callback is required.</param>
        <param name="stateObject">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the &lt;xref:System.IAsyncResult.AsyncState%2A&gt; property.</param>
        <summary>Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this <see cref="T:System.Data.SqlClient.SqlCommand" /> and returns results as an &lt;xref:System.Xml.XmlReader&gt; object, using a callback procedure.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; that can be used to poll, wait for results, or both; this value is also needed when the &lt;xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A&gt; is called, which returns the results of the command as XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> method starts the process of asynchronously executing a Transact-SQL statement or stored procedure that returns rows as XML, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> method to finish the operation and retrieve the requested XML data. The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> method returns immediately, but until the code executes the corresponding <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> before the command's execution is completed causes the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 The <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property ordinarily specifies a Transact-SQL statement with a valid FOR XML clause. However, `CommandText` can also specify a statement that returns data that contains valid XML. This method can also be used to retrieve a single-row, single-column result set. In this case, if more than one row is returned, the <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> method attaches the <xref:System.Xml.XmlReader> to the value on the first row, and discards the rest of the result set.  
  
 A typical BeginExecuteXmlReader query can be formatted as in the following C# example:  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 This method can also be used to retrieve a single-row, single-column result set. In this case, if more than one row is returned, the <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> method attaches the <xref:System.Xml.XmlReader> to the value on the first row, and discards the rest of the result set.  
  
 The multiple active result set (MARS) feature lets multiple actions use the same connection.  
  
 The `callback` parameter lets you specify an <xref:System.AsyncCallback> delegate that is called when the statement has completed. You can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> method from within this delegate procedure, or from any other location within your application. In addition, you can pass any object in the `stateObject` parameter, and your callback procedure can retrieve this information using the <xref:System.IAsyncResult.AsyncState%2A> property.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters is sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server--that is, reads are asynchronous.  
  
 All errors that occur during the execution of the operation are thrown as exceptions in the callback procedure. You must handle the exception in the callback procedure, not in the main application. See the example in this topic for additional information on handling exceptions in the callback procedure.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http://support.microsoft.com.  
  
   
  
## Examples  
 The following Windows application demonstrates the use of the BeginExecuteXmlReader method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the `stateObject` parameter--doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> method corresponding to the initial call to BeginExecuteXmlReader.  
  
 This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  
  
 To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.ListBox> control, and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  
  
 [!code-cs[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteXmlReaderAsync.TesterFormCS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteXmlReaderAsync.TesterFormVB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public override void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Cancel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tries to cancel the execution of a <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If there is nothing to cancel, nothing occurs. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.  
  
 In some, rare, cases, if you call <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> then call <xref:System.Data.SqlClient.SqlDataReader.Close%2A> (implicitily or explicitly) before calling Cancel, and then call Cancel, the cancel command will not be sent to SQL Server and the result set can continue to stream after you call <xref:System.Data.SqlClient.SqlConnection.Close%2A>. To avoid this, make sure that you call Cancel before closing the reader or connection.  
  
   
  
## Examples  
 The following example demonstrates the use of the Cancel method.  
  
 [!code-vb[Classic WebData SqlCommand.Cancel#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._13_1.vb)]
 [!code-cs[Classic WebData SqlCommand.Cancel#1](~/add/codesnippet/csharp/m-system.data.sqlclient._13_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is a copy of the current instance.</summary>
        <returns>A new <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is a copy of this instance.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionSetting">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommandColumnEncryptionSetting</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the column encryption setting for this command.</summary>
        <value>The column encryption setting for this command.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public override string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the Transact-SQL statement, table name or stored procedure to execute at the data source.</summary>
        <value>The Transact-SQL statement or stored procedure to execute. The default is an empty string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> property is set to `StoredProcedure`, the CommandText property should be set to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command executes this stored procedure when you call one of the `Execute` methods.  
  
 The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a Transact-SQL statement or a stored procedure called by a command of `CommandType.Text`. In this case, named parameters must be used. For example:  
  
```  
SELECT * FROM dbo.Customers WHERE CustomerID = @CustomerID  
```  
  
 For more information, see [Configuring Parameters and Parameter Data Types](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  
  
 [!code-vb[Classic WebData SqlCommand.CommandText Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._56_1.vb)]
 [!code-cs[Classic WebData SqlCommand.CommandText Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._56_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public override int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</summary>
        <value>The time in seconds to wait for the command to execute. The default is 30 seconds.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A value of 0 indicates no limit (an attempt to execute a command will wait indefinitely).  
  
> [!NOTE]
>  The CommandTimeout property will be ignored during asynchronous method calls such as <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 CommandTimeout has no effect when the command is executed against a context connection (a <xref:System.Data.SqlClient.SqlConnection> opened with "context connection=true" in the connection string).  
  
> [!NOTE]
>  This property is the cumulative time-out (for all network packets that are read during the invocation of a method) for all network reads during command execution or processing of the results. A time-out can still occur after the first row is returned, and does not include user processing time, only network read time.  
>   
>  For example, with a 30 second time out, if <xref:System.Data.SqlClient.SqlDataReader.Read%2A> requires two network packets, then it has 30 seconds to read both network packets. If you call <xref:System.Data.SqlClient.SqlDataReader.Read%2A> again, it will have another 30 seconds to read any data that it requires.  
  
```  
using System;  
using System.Data.SqlClient;  
///   
public class A {  
   ///   
   public static void Main() {  
      string connectionString = "";  
      // Wait for 5 second delay in the command  
      string queryString = "waitfor delay '00:00:05'";  
      using (SqlConnection connection = new SqlConnection(connectionString)) {  
         connection.Open();  
         SqlCommand command = new SqlCommand(queryString, connection);  
         // Setting command timeout to 1 second  
         command.CommandTimeout = 1;  
         try {  
            command.ExecuteNonQuery();  
         }  
         catch (SqlException e) {  
            Console.WriteLine("Got expected SqlException due to command timeout ");  
            Console.WriteLine(e);  
         }  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CommandType">
      <MemberSignature Language="C#" Value="public override System.Data.CommandType CommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandType CommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.CommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating how the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; property is to be interpreted.</summary>
        <value>One of the <see cref="T:System.Data.CommandType" /> values. The default is <see langword="Text" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set the CommandType property to `StoredProcedure`, you should set the <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property to the name of the stored procedure. The command executes this stored procedure when you call one of the Execute methods.  
  
 The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a SQL Statement or a stored procedure called with a CommandType of <xref:System.Data.CommandType>. In this case, named parameters must be used. For example:  
  
 SELECT * FROM Customers WHERE CustomerID = @CustomerID  
  
 For more information, see [Configuring Parameters and Parameter Data Types](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  
  
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._8_1.vb)]
 [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._8_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The value was not a valid <see cref="T:System.Data.CommandType" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Data.SqlClient.SqlConnection" /> used by this instance of the <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <value>The connection to a data source. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the command is enlisted in an existing transaction, and the connection is changed, trying to execute the command will throw an <xref:System.InvalidOperationException>.  
  
 If the <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> property is not null and the transaction has already been committed or rolled back, <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> is set to null.  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  
  
 [!code-vb[Classic WebData SqlCommand.Connection Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._22_1.vb)]
 [!code-cs[Classic WebData SqlCommand.Connection Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._22_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The Connection property was changed while the command was enlisted in a transaction..</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateDbParameter">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameter CreateDbParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbParameter CreateDbParameter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParameter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameter CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlParameter CreateParameter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of a <see cref="T:System.Data.SqlClient.SqlParameter" /> object.</summary>
        <returns>A <see cref="T:System.Data.SqlClient.SqlParameter" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CreateParameter method is a strongly-typed version of <xref:System.Data.IDbCommand.CreateParameter%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbParameterCollection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbParameterCollection DbParameterCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction DbTransaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction DbTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignTimeVisible">
      <MemberSignature Language="C#" Value="public override bool DesignTimeVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DesignTimeVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the command object should be visible in a Windows Form Designer control.</summary>
        <value>A value indicating whether the command object should be visible in a control. The default is **true**.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteNonQuery">
      <MemberSignature Language="C#" Value="public int EndExecuteNonQuery (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndExecuteNonQuery(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">The &lt;xref:System.IAsyncResult&gt; returned by the call to &lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A&gt;.</param>
        <summary>Finishes asynchronous execution of a Transact-SQL statement.</summary>
        <returns>The number of rows affected (the same behavior as &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A&gt;).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you call <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> to execute a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] statement, you must call EndExecuteNonQuery in order to complete the operation. If the process of executing the command has not yet finished, this method blocks until the operation is complete. Users can verify that the command has completed its operation by using the <xref:System.IAsyncResult> instance returned by the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> method. If a callback procedure was specified in the call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>, this method must be called.  
  
   
  
## Examples  
 For examples demonstrating the use of the EndExecuteNonQuery method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> parameter is null (<see langword="Nothing" /> in Microsoft Visual Basic)</exception>
        <exception cref="T:System.InvalidOperationException">EndExecuteNonQuery was called more than once for a single command execution, or the method was mismatched against its execution method (for example, the code called EndExecuteNonQuery to complete execution of a call to &lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">The amount of time specified in &lt;xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A&gt; elapsed and the asynchronous operation specified with &lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A&gt; is not complete.  
  
 In some situations, &lt;xref:System.IAsyncResult&gt; can be set to <see langword="IsCompleted" /> incorrectly. If this occurs and EndExecuteNonQuery is called, EndExecuteNonQuery could raise a SqlException error if the amount of time specified in &lt;xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A&gt; elapsed and the asynchronous operation specified with &lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A&gt; is not complete. To correct this situation, you should either increase the value of CommandTimeout or reduce the work being done by the asynchronous operation.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader EndExecuteReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader EndExecuteReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">The &lt;xref:System.IAsyncResult&gt; returned by the call to &lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A&gt;.</param>
        <summary>Finishes asynchronous execution of a Transact-SQL statement, returning the requested <see cref="T:System.Data.SqlClient.SqlDataReader" />.</summary>
        <returns>A <see cref="T:System.Data.SqlClient.SqlDataReader" /> object that can be used to retrieve the requested rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you call <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to execute a Transact-SQL statement, you must call EndExecuteReader in order to complete the operation. If the process of executing the command has not yet finished, this method blocks until the operation is complete. Users can verify that the command has completed its operation by using the <xref:System.IAsyncResult> instance returned by the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method. If a callback procedure was specified in the call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>, this method must be called.  
  
   
  
## Examples  
 For examples demonstrating the use of the EndExecuteReader method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> parameter is null (<see langword="Nothing" /> in Microsoft Visual Basic)</exception>
        <exception cref="T:System.InvalidOperationException">EndExecuteReader was called more than once for a single command execution, or the method was mismatched against its execution method (for example, the code called EndExecuteReader to complete execution of a call to &lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader EndExecuteXmlReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader EndExecuteXmlReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">The &lt;xref:System.IAsyncResult&gt; returned by the call to &lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A&gt;.</param>
        <summary>Finishes asynchronous execution of a Transact-SQL statement, returning the requested data as XML.</summary>
        <returns>An &lt;xref:System.Xml.XmlReader&gt; object that can be used to fetch the resulting XML data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you call <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to execute a Transact-SQL statement, you must call EndExecuteXmlReader in order to complete the operation. If the process of executing the command has not yet finished, this method blocks until the operation is complete. Users can verify that the command has completed its operation by using the <xref:System.IAsyncResult> instance returned by the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> method. If a callback procedure was specified in the call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>, this method must be called.  
  
   
  
## Examples  
 For examples demonstrating the use of the EndExecuteXmlReader method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> parameter is null (<see langword="Nothing" /> in Microsoft Visual Basic)</exception>
        <exception cref="T:System.InvalidOperationException">EndExecuteXmlReader was called more than once for a single command execution, or the method was mismatched against its execution method (for example, the code called EndExecuteXmlReader to complete execution of a call to &lt;xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReader">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbDataReader ExecuteDbDataReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReaderAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQuery">
      <MemberSignature Language="C#" Value="public override int ExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ExecuteNonQuery() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executes a Transact-SQL statement against the connection and returns the number of rows affected.</summary>
        <returns>The number of rows affected.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a <xref:System.Data.DataSet> by executing UPDATE, INSERT, or DELETE statements.  
  
 Although the ExecuteNonQuery returns no rows, any output parameters or return values mapped to parameters are populated with data.  
  
 For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. When a trigger exists on a table being inserted or updated, the return value includes the number of rows affected by both the insert or update operation and the number of rows affected by the trigger or triggers. For all other types of statements, the return value is -1. If a rollback occurs, the return value is also -1.  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using ExecuteNonQuery. The example is passed a string that is a Transact-SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the data source.  
  
 [!code-cs[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._23_1.cs)]
 [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._23_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQueryAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ExecuteNonQueryAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteNonQueryAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation instruction.</param>
        <summary>An asynchronous version of &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A&gt;, which executes a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] statement against the connection and returns the number of rows affected. The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.InvalidOperationException">Calling ExecuteNonQueryAsync more than once for the same instance before task completion.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).  
  
 <see langword="Context Connection=true" /> is specified in the connection string.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returned an error while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sends the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; to the &lt;xref:System.Data.SqlClient.SqlCommand.Connection%2A&gt; and builds a <see cref="T:System.Data.SqlClient.SqlDataReader" />.</summary>
        <returns>A <see cref="T:System.Data.SqlClient.SqlDataReader" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property should be set to the name of the stored procedure. The command executes this stored procedure when you call ExecuteReader.  
  
> [!NOTE]
>  If a transaction is deadlocked, an exception may not be thrown until <xref:System.Data.SqlClient.SqlDataReader.Read%2A> is called.  
  
 The multiple active result set (MARS) feature allows for multiple actions using the same connection.  
  
 If you use ExecuteReader or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http://support.microsoft.com.  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source.  
  
 [!code-cs[Classic WebData SqlCommand.ExecuteReader Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._22_1.cs)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._22_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The current state of the connection is closed. ExecuteReader requires an open <see cref="T:System.Data.SqlClient.SqlConnection" />.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Sends the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; to the &lt;xref:System.Data.SqlClient.SqlCommand.Connection%2A&gt;, and builds a <see cref="T:System.Data.SqlClient.SqlDataReader" /> using one of the <see cref="T:System.Data.CommandBehavior" /> values.</summary>
        <returns>A <see cref="T:System.Data.SqlClient.SqlDataReader" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property should be set to the name of the stored procedure. The command executes this stored procedure when you call <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>.  
  
> [!NOTE]
>  Use <xref:System.Data.CommandBehavior> to retrieve large values and binary data. Otherwise, an <xref:System.OutOfMemoryException> might occur and the connection will be closed.  
  
 The multiple active result set (MARS) feature allows for multiple actions using the same connection.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http://support.microsoft.com.  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source. <xref:System.Data.CommandBehavior> is set to <xref:System.Data.CommandBehavior>.  
  
 [!code-cs[Classic WebData SqlCommand.ExecuteReader2#1](~/add/codesnippet/csharp/m-system.data.sqlclient._14_1.cs)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader2#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._14_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>An asynchronous version of &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A&gt;, which sends the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; to the &lt;xref:System.Data.SqlClient.SqlCommand.Connection%2A&gt; and builds a <see cref="T:System.Data.SqlClient.SqlDataReader" />. Exceptions will be reported via the returned Task object.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.ArgumentException">An invalid <see cref="T:System.Data.CommandBehavior" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">Calling ExecuteReaderAsync more than once for the same instance before task completion.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).  
  
 <see langword="Context Connection=true" /> is specified in the connection string.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returned an error while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Options for statement execution and data retrieval.  When is set to <see langword="Default" />, &lt;xref:System.Data.SqlClient.SqlDataReader.ReadAsync%2A&gt; reads the entire row before returning a complete Task.</param>
        <summary>An asynchronous version of &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A&gt;, which sends the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; to the &lt;xref:System.Data.SqlClient.SqlCommand.Connection%2A&gt;, and builds a <see cref="T:System.Data.SqlClient.SqlDataReader" />. Exceptions will be reported via the returned Task object.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.ArgumentException">An invalid <see cref="T:System.Data.CommandBehavior" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">Calling ExecuteReaderAsync more than once for the same instance before task completion.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).  
  
 <see langword="Context Connection=true" /> is specified in the connection string.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returned an error while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation instruction.</param>
        <summary>An asynchronous version of &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A&gt;, which sends the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; to the &lt;xref:System.Data.SqlClient.SqlCommand.Connection%2A&gt; and builds a <see cref="T:System.Data.SqlClient.SqlDataReader" />.  
  
 The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.ArgumentException">An invalid <see cref="T:System.Data.CommandBehavior" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">Calling &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync%2A&gt; more than once for the same instance before task completion.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).  
  
 <see langword="Context Connection=true" /> is specified in the connection string.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returned an error while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">Options for statement execution and data retrieval.  When is set to <see langword="Default" />, &lt;xref:System.Data.SqlClient.SqlDataReader.ReadAsync%2A&gt; reads the entire row before returning a complete Task.</param>
        <param name="cancellationToken">The cancellation instruction.</param>
        <summary>An asynchronous version of &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A&gt;, which sends the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; to the &lt;xref:System.Data.SqlClient.SqlCommand.Connection%2A&gt;, and builds a <see cref="T:System.Data.SqlClient.SqlDataReader" />  
  
 The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.ArgumentException">An invalid <see cref="T:System.Data.CommandBehavior" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">Calling ExecuteReaderAsync more than once for the same instance before task completion.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).  
  
 <see langword="Context Connection=true" /> is specified in the connection string.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returned an error while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalar">
      <MemberSignature Language="C#" Value="public override object ExecuteScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ExecuteScalar() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.</summary>
        <returns>The first column of the first row in the result set, or a null reference (<see langword="Nothing" /> in Visual Basic) if the result set is empty. Returns a maximum of 2033 characters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> method, and then performing the operations that you need to generate the single value using the data returned by a <xref:System.Data.SqlClient.SqlDataReader>.  
  
 A typical ExecuteScalar query can be formatted as in the following C# example:  
  
```  
cmd.CommandText = "SELECT COUNT(*) FROM dbo.region";  
Int32 count = (Int32) cmd.ExecuteScalar();  
```  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using ExecuteScalar. The example is passed a string representing a new value to be inserted into a table, and a string to use to connect to the data source. The function returns the new **Identity** column value if a new row was inserted, 0 on failure.  
  
 [!code-vb[DataWorks SqlCommand.ExecuteScalar#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._31_1.vb)]
 [!code-cs[DataWorks SqlCommand.ExecuteScalar#1](~/add/codesnippet/csharp/m-system.data.sqlclient._31_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalarAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; ExecuteScalarAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ExecuteScalarAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation instruction.</param>
        <summary>An asynchronous version of &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A&gt;, which executes the query asynchronously and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.  
  
 The cancellation token can be used to request that the operation be abandoned before the command timeout elapses. Exceptions will be reported via the returned Task object.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.InvalidOperationException">Calling ExecuteScalarAsync more than once for the same instance before task completion.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).  
  
 <see langword="Context Connection=true" /> is specified in the connection string.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returned an error while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader ExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader ExecuteXmlReader() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sends the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; to the &lt;xref:System.Data.SqlClient.SqlCommand.Connection%2A&gt; and builds an &lt;xref:System.Xml.XmlReader&gt; object.</summary>
        <returns>An &lt;xref:System.Xml.XmlReader&gt; object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property ordinarily specifies a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] statement with a valid FOR XML clause. However, <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> can also specify a statement that returns `ntext` or `nvarchar` data that contains valid XML, or the contents of a column defined with the `xml` data type.  
  
 A typical ExecuteXmlReader query can be formatted as in the following Microsoft Visual C# example:  
  
```  
SqlCommand command = new SqlCommand("SELECT * FROM dbo.Customers FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 This method can also be used to retrieve a single-row, single-column result set that contains XML data. In this case, if more than one row is returned, the ExecuteXmlReader method attaches the <xref:System.Xml.XmlReader> to the value on the first row, and discards the rest of the result set.  
  
 The multiple active result set (MARS) feature allows for multiple actions using the same connection.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use ExecuteXmlReader or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http://support.microsoft.com.  
  
   
  
## Examples  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using ExecuteXmlReader. The example is passed a string that is a Transact-SQL FOR XML SELECT statement, and a string to use to connect to the data source.  
  
 [!code-cs[Classic WebData SqlCommand.ExecuteXmlReader#1](~/add/codesnippet/csharp/m-system.data.sqlclient._42_1.cs)]
 [!code-vb[Classic WebData SqlCommand.ExecuteXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._42_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when you are using Microsoft .NET Framework version 1.0.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>An asynchronous version of &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A&gt;, which sends the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; to the &lt;xref:System.Data.SqlClient.SqlCommand.Connection%2A&gt; and builds an &lt;xref:System.Xml.XmlReader&gt; object.  
  
 Exceptions will be reported via the returned Task object.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.InvalidOperationException">Calling &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync%2A&gt; more than once for the same instance before task completion.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).  
  
 <see langword="Context Connection=true" /> is specified in the connection string.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returned an error while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation instruction.</param>
        <summary>An asynchronous version of &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A&gt;, which sends the &lt;xref:System.Data.SqlClient.SqlCommand.CommandText%2A&gt; to the &lt;xref:System.Data.SqlClient.SqlCommand.Connection%2A&gt; and builds an &lt;xref:System.Xml.XmlReader&gt; object.  
  
 The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Binary** or **VarBinary** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.Stream&gt;. For more information about streaming, see [SqlClient Streaming Support](~/add/includes/ajax-current-ext-md.md).  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.IO.TextReader&gt;.  
  
 A &lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt; other than **Xml** was used when &lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt; was set to &lt;xref:System.Xml.XmlReader&gt;.</exception>
        <exception cref="T:System.InvalidOperationException">Calling &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync%2A&gt; more than once for the same instance before task completion.  
  
 The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).  
  
 <see langword="Context Connection=true" /> is specified in the connection string.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] returned an error while executing the command text.  
  
 A timeout occurred during a streaming operation. For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.IO.IOException">An error occurred in a &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">The &lt;xref:System.IO.Stream&gt;, &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.IO.TextReader&gt; object was closed during a streaming operation.  For more information about streaming, see [SqlClient Streaming Support](../Topic/SqlClient%20Streaming%20Support.md).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Notification">
      <MemberSignature Language="C#" Value="public System.Data.Sql.SqlNotificationRequest Notification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Sql.SqlNotificationRequest Notification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Sql.SqlNotificationRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies the <see cref="T:System.Data.Sql.SqlNotificationRequest" /> object bound to this command.</summary>
        <value>When set to null (default), no notification should be requested.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You must set the value for this property before the command is executed for it to take effect.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NotificationAutoEnlist">
      <MemberSignature Language="C#" Value="public bool NotificationAutoEnlist { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotificationAutoEnlist" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the application should automatically receive query notifications from a common <see cref="T:System.Data.SqlClient.SqlDependency" /> object.</summary>
        <value>**true** if the application should automatically receive query notifications; otherwise **false**. The default value is **true**.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This feature is used in ASP.NET applications to receive notifications for all commands executed in an ASP page against SQL Server. This enables ASP.NET to cache the page until the queries used to render the page would produce a different result. Automatic enlistment.  
  
 This property applies only to versions of SQL Server that support query notifications. For earlier versions, setting this property to **true** has no effect on the application.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameterCollection Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlParameterCollection Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Data.SqlClient.SqlParameterCollection" />.</summary>
        <value>The parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a SQL Statement or a stored procedure called by a command of `CommandType.Text`. In this case, named parameters must be used. For example:  
  
 SELECT * FROM Customers WHERE CustomerID = @CustomerID  
  
> [!NOTE]
>  If the parameters in the collection do not match the requirements of the query to be executed, an error may result.  
  
 For more information, see [Configuring Parameters and Parameter Data Types](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example demonstrates how to create a <xref:System.Data.SqlClient.SqlCommand> and add parameters to the <xref:System.Data.SqlClient.SqlParameterCollection>.  
  
 [!code-vb[DataWorks SqlParameterCollection.AddWithValue#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._32_1.vb)]
 [!code-cs[DataWorks SqlParameterCollection.AddWithValue#1](~/add/codesnippet/csharp/p-system.data.sqlclient._32_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public override void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Prepare() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a prepared version of the command on an instance of SQL Server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> is set to `StoredProcedure`, the call to Prepare should succeed, although it may cause a no-op.  
  
 Before you call Prepare, specify the data type of each parameter in the statement to be prepared. For each parameter that has a variable length data type, you must set the <xref:System.Data.SqlClient.SqlParameter.Size%2A> property to the maximum size needed. Prepare returns an error if these conditions are not met.  
  
> [!NOTE]
>  If the database context is changed by executing the Transact-SQL `USE <database>` statement, or by calling the <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> method, then Prepare must be called a second time.  
  
 If you call an `Execute` method after calling Prepare, any parameter value that is larger than the value specified by the <xref:System.Data.SqlClient.SqlParameter.Size%2A> property is automatically truncated to the original specified size of the parameter, and no truncation errors are returned.  
  
 Output parameters (whether prepared or not) must have a user-specified data type. If you specify a variable length data type, you must also specify the maximum <xref:System.Data.SqlClient.SqlParameter.Size%2A>.  
  
 Prior to Visual Studio 2010, Prepare threw an exception.  Beginning in Visual Studio 2010, this method does not throw an exception.  
  
   
  
## Examples  
 The following example demonstrates the use of the Prepare method.  
  
 [!code-vb[Classic WebData SqlCommand.Prepare#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._45_1.vb)]
 [!code-cs[Classic WebData SqlCommand.Prepare#1](~/add/codesnippet/csharp/m-system.data.sqlclient._45_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetCommandTimeout">
      <MemberSignature Language="C#" Value="public void ResetCommandTimeout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetCommandTimeout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the &lt;xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A&gt; property to its default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default value of the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> is 30 seconds.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StatementCompleted">
      <MemberSignature Language="C#" Value="public event System.Data.StatementCompletedEventHandler StatementCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.StatementCompletedEventHandler StatementCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.StatementCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the execution of a Transact-SQL statement completes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is a copy of the current instance.</summary>
        <returns>A new <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is a copy of this instance.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlTransaction Transaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Data.SqlClient.SqlTransaction" /> within which the <see cref="T:System.Data.SqlClient.SqlCommand" /> executes.</summary>
        <value>The <see cref="T:System.Data.SqlClient.SqlTransaction" />. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot set the Transaction property if it is already set to a specific value, and the command is in the process of executing. If you set the transaction property to a <xref:System.Data.SqlClient.SqlTransaction> object that is not connected to the same <xref:System.Data.SqlClient.SqlConnection> as the <xref:System.Data.SqlClient.SqlCommand> object, an exception is thrown the next time that you attempt to execute a statement.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdatedRowSource">
      <MemberSignature Language="C#" Value="public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.UpdateRowSource UpdatedRowSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.UpdateRowSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow" /> when used by the **Update** method of the <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <value>One of the <see cref="T:System.Data.UpdateRowSource" /> values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default <xref:System.Data.UpdateRowSource> value is **Both** unless the command is automatically generated (as in the case of the <xref:System.Data.SqlClient.SqlCommandBuilder>), in which case the default is **None**.  
  
 For more information about using the **UpdatedRowSource** property, see [DataAdapter Parameters](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>