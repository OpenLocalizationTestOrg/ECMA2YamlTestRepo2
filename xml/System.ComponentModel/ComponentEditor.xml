<Type Name="ComponentEditor" FullName="System.ComponentModel.ComponentEditor">
  <TypeSignature Language="C#" Value="public abstract class ComponentEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ComponentEditor extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the base class for a custom component editor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A component editor is used to edit a component as a whole and can be used to implement a user interface similar to that of the property pages. You associate a component editor with a component by using the <xref:System.ComponentModel.EditorAttribute> attribute.  
  
   
  
## Examples  
 The following code example demonstrates an example ComponentEditor implementation.  
  
 [!code-cs[ComponentEditorExample#1](~/add/codesnippet/csharp/t-system.componentmodel._3_1.cs)]
 [!code-vb[ComponentEditorExample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._3_1.vb)]
 [!code-cpp[ComponentEditorExample#1](~/add/codesnippet/cpp/t-system.componentmodel._3_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ComponentEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ComponentEditor" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditComponent">
      <MemberSignature Language="C#" Value="public bool EditComponent (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EditComponent(object component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">The component to be edited.</param>
        <summary>Edits the component and returns a value indicating whether the component was modified.</summary>
        <returns>
          <see langword="true" /> if the component was modified; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method opens an advanced user interface that you can use to edit the component. The default implementation opens a dialog box with a collection of component editor control objects and a user interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditComponent">
      <MemberSignature Language="C#" Value="public abstract bool EditComponent (System.ComponentModel.ITypeDescriptorContext context, object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EditComponent(class System.ComponentModel.ITypeDescriptorContext context, object component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">An optional context object that can be used to obtain further information about the edit.</param>
        <param name="component">The component to be edited.</param>
        <summary>Edits the component and returns a value indicating whether the component was modified based upon a given context.</summary>
        <returns>
          <see langword="true" /> if the component was modified; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can override this method to provide a custom editing user interface for a component. From within this method you can display a dialog box or other type of user interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>