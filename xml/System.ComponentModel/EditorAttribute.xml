<Type Name="EditorAttribute" FullName="System.ComponentModel.EditorAttribute">
  <TypeSignature Language="C#" Value="public sealed class EditorAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EditorAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.All, AllowMultiple=true, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the editor to use to change a property. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When editing the property, a visual designer should create a new instance of the specified editor through a dialog box or drop-down window.  
  
 Use the <xref:System.ComponentModel.EditorAttribute.EditorBaseTypeName%2A> property to find this editor's base type. The only available base type is <xref:System.Drawing.Design.UITypeEditor>.  
  
 Use the <xref:System.ComponentModel.EditorAttribute.EditorTypeName%2A> property to get the name of the type of editor associated with this attribute.  
  
 For general information on using attributes. see [Attributes](~/add/includes/ajax-current-ext-md.md). For more information on design-time attributes, see [Attributes and Design-Time Support](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example creates the `MyImage` class. The class is marked with an EditorAttribute that specifies the <xref:System.Drawing.Design.ImageEditor> as its editor.  
  
 [!code-cs[Classic EditorAttribute Example#1](~/add/codesnippet/csharp/t-system.componentmodel._81_1.cs)]
 [!code-cpp[Classic EditorAttribute Example#1](~/add/codesnippet/cpp/t-system.componentmodel._81_1.cpp)]
 [!code-vb[Classic EditorAttribute Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._81_1.vb)]  
  
 The following code example creates an instance of the `MyImage` class, gets the attributes for the class, and then prints the name of the editor used by `myNewImage`.  
  
 [!code-cs[Classic EditorAttribute Example#2](~/add/codesnippet/csharp/t-system.componentmodel._81_2.cs)]
 [!code-cpp[Classic EditorAttribute Example#2](~/add/codesnippet/cpp/t-system.componentmodel._81_2.cpp)]
 [!code-vb[Classic EditorAttribute Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._81_2.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute" /> class with the default editor, which is no editor.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorAttribute (string typeName, string baseTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string baseTypeName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="baseTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">The fully qualified type name of the editor.</param>
        <param name="baseTypeName">The fully qualified type name of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute" /> class with the type name and base type name of the editor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `typeName` parameter must be in the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName> format.  
  
 The <xref:System.Type> represented by the `typeName` parameter must either derive from or implement the base class.  
  
 The <xref:System.Type> represented by the `baseTypeName` parameter is used as a key to find a particular editor, because a data type can have more than one editor associated with it. This can be any class, but is typically <xref:System.Drawing.Design.UITypeEditor> or <xref:System.ComponentModel.ComponentEditor>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorAttribute (string typeName, Type baseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, class System.Type baseType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="baseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeName">The fully qualified type name of the editor.</param>
        <param name="baseType">The &lt;xref:System.Type&gt; of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute" /> class with the type name and the base type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `typeName` parameter must be in the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName> format.  
  
 The <xref:System.Type> represented by the `typeName` must either derive from or implement the base class.  
  
 The `baseType` parameter is used as a key to find a particular editor, because a data type can have more than one editor associated with it.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorAttribute (Type type, Type baseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Type baseType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="baseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A &lt;xref:System.Type&gt; that represents the type of the editor.</param>
        <param name="baseType">The &lt;xref:System.Type&gt; of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute" /> class with the type and the base type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Type> represented by the `type` parameter must either derive from or implement the base class.  
  
 The `baseType` parameter is used as a key to find a particular editor, because a data type can have more than one editor associated with it.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditorBaseTypeName">
      <MemberSignature Language="C#" Value="public string EditorBaseTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EditorBaseTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the base class or interface serving as a lookup key for this editor.</summary>
        <value>The name of the base class or interface serving as a lookup key for this editor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The EditorBaseTypeName property is an assembly qualified type name. The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] provides both <xref:System.Drawing.Design.UITypeEditor> and <xref:System.ComponentModel.ComponentEditor> as valid base classes, but any value is valid here.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditorTypeName">
      <MemberSignature Language="C#" Value="public string EditorTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EditorTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the editor class in the &lt;xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName&gt; format.</summary>
        <value>The name of the editor class in the &lt;xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName&gt; format.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to test the value equality of.</param>
        <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.EditorAttribute" />.</summary>
        <returns>
          <see langword="true" /> if the value of the given object is equal to that of the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TypeId">
      <MemberSignature Language="C#" Value="public override object TypeId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TypeId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unique ID for this attribute type.</summary>
        <value>A unique ID for this attribute type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TypeId property is used by filtering algorithms to identify two attributes that are the same type. For most attributes, this just returns the <xref:System.Type> instance for the attribute. <xref:System.ComponentModel.EditorAttribute> overrides this to include the type of the editor base type.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>