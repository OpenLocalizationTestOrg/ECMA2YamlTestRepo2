<Type Name="PropertyDescriptor" FullName="System.ComponentModel.PropertyDescriptor">
  <TypeSignature Language="C#" Value="public abstract class PropertyDescriptor : System.ComponentModel.MemberDescriptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PropertyDescriptor extends System.ComponentModel.MemberDescriptor" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MemberDescriptor</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides an abstraction of a property on a class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A description of a property consists of a name, its attributes, the component class that the property is associated with, and the type of the property.  
  
 PropertyDescriptor provides the following properties and methods:  
  
-   <xref:System.ComponentModel.PropertyDescriptor.Converter%2A> contains the <xref:System.ComponentModel.TypeConverter> for this property.  
  
-   <xref:System.ComponentModel.PropertyDescriptor.IsLocalizable%2A> indicates whether this property should be localized.  
  
-   <xref:System.ComponentModel.PropertyDescriptor.GetEditor%2A> returns an editor of the specified type.  
  
 PropertyDescriptor also provides the following `abstract` properties and methods:  
  
-   <xref:System.ComponentModel.PropertyDescriptor.ComponentType%2A> contains the type of component this property is bound to.  
  
-   <xref:System.ComponentModel.PropertyDescriptor.IsReadOnly%2A> indicates whether this property is read-only.  
  
-   <xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A> gets the type of the property.  
  
-   <xref:System.ComponentModel.PropertyDescriptor.CanResetValue%2A> indicates whether resetting the component changes the value of the component.  
  
-   <xref:System.ComponentModel.PropertyDescriptor.GetValue%2A> returns the current value of the property on a component.  
  
-   <xref:System.ComponentModel.PropertyDescriptor.ResetValue%2A> resets the value for this property of the component.  
  
-   <xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> sets the value of the component to a different value.  
  
-   <xref:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue%2A> indicates whether the value of this property needs to be persisted.  
  
 Typically, the `abstract` members are implemented through reflection. For more information about reflection, see the topics in [Reflection](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example is built upon the example in the <xref:System.ComponentModel.PropertyDescriptorCollection> class. It prints the information (category, description, display name) of the text of a button in a text box. It assumes that `button1` and `textbox1` have been instantiated on a form.  
  
 [!code-cpp[PropertyDescriptor#1](~/add/codesnippet/cpp/t-system.componentmodel._4_1.cpp)]
 [!code-vb[PropertyDescriptor#1](~/add/codesnippet/visualbasic/t-system.componentmodel._4_1.vb)]
 [!code-cs[PropertyDescriptor#1](~/add/codesnippet/csharp/t-system.componentmodel._4_1.cs)]  
  
 The following code example shows how to implement a custom property descriptor that provides a read-only wrapper around a property. The `SerializeReadOnlyPropertyDescriptor` is used in a custom designer to provide a read-only property descriptor for the control's <xref:System.Windows.Forms.Control.Size%2A> property.  
  
 [!code-cs[System.ComponentModel.PropertyDescriptor#1](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/SerializeReadOnlyPropertyDescriptor.cs#1)]
 [!code-vb[System.ComponentModel.PropertyDescriptor#1](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/SerializeReadOnlyPropertyDescriptor.vb#1)]  
  
 The following code examples show how to use the The `SerializeReadOnlyPropertyDescriptor` in a custom designer.  
  
 [!code-cs[System.ComponentModel.PropertyDescriptor#10](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/DemoControlDesigner.cs#10)]
 [!code-vb[System.ComponentModel.PropertyDescriptor#10](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/DemoControlDesigner.vb#10)]  
[!code-vb[System.ComponentModel.PropertyDescriptor#100](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/DemoControl.vb#100)]
[!code-cs[System.ComponentModel.PropertyDescriptor#100](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/DemoControl.cs#100)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MemberDescriptor descr) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="descr" Type="System.ComponentModel.MemberDescriptor" />
      </Parameters>
      <Docs>
        <param name="descr">A <see cref="T:System.ComponentModel.MemberDescriptor" /> that contains the name of the property and its attributes.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class with the name and attributes in the specified <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr, Attribute[] attrs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MemberDescriptor descr, class System.Attribute[] attrs) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="descr" Type="System.ComponentModel.MemberDescriptor" />
        <Parameter Name="attrs" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="descr">A <see cref="T:System.ComponentModel.MemberDescriptor" /> containing the name of the member and its attributes.</param>
        <param name="attrs">An &lt;xref:System.Attribute&gt; array containing the attributes you want to associate with the property.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class with the name in the specified <see cref="T:System.ComponentModel.MemberDescriptor" /> and the attributes in both the <see cref="T:System.ComponentModel.MemberDescriptor" /> and the &lt;xref:System.Attribute&gt; array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor appends the attributes in the <xref:System.Attribute> array to the attributes in the <xref:System.ComponentModel.MemberDescriptor>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyDescriptor (string name, Attribute[] attrs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string name, class System.Attribute[] attrs) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attrs" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property.</param>
        <param name="attrs">An array of type &lt;xref:System.Attribute&gt; that contains the property attributes.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class with the specified name and attributes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddValueChanged">
      <MemberSignature Language="C#" Value="public virtual void AddValueChanged (object component, EventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddValueChanged(object component, class System.EventHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="handler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="component">The component to add the handler for.</param>
        <param name="handler">The delegate to add as a listener.</param>
        <summary>Enables other objects to be notified when this property changes.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="component" /> or <paramref name="handler" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanResetValue">
      <MemberSignature Language="C#" Value="public abstract bool CanResetValue (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResetValue(object component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">The component to test for reset capability.</param>
        <summary>When overridden in a derived class, returns whether resetting an object changes its value.</summary>
        <returns>
          <see langword="true" /> if resetting the component changes its value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, this method is implemented through reflection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ComponentType">
      <MemberSignature Language="C#" Value="public abstract Type ComponentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ComponentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the type of the component this property is bound to.</summary>
        <value>A &lt;xref:System.Type&gt; that represents the type of component this property is bound to. When the &lt;xref:System.ComponentModel.PropertyDescriptor.GetValue%2A&gt; or &lt;xref:System.ComponentModel.PropertyDescriptor.SetValue%2A&gt; methods are invoked, the object specified might be an instance of this type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, this property is implemented through reflection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Converter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter Converter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.TypeConverter Converter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type converter for this property.</summary>
        <value>A <see cref="T:System.ComponentModel.TypeConverter" /> that is used to convert the &lt;xref:System.Type&gt; of this property.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected object CreateInstance (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object CreateInstance(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A &lt;xref:System.Type&gt; that represents the type to create.</param>
        <summary>Creates an instance of the specified type.</summary>
        <returns>A new instance of the type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CreateInstance looks for a constructor that takes the specified type. If it finds a constructor, the type of the property is passed in.  
  
 Converters and editors use this method to create versions of a component. This method enables a single component to be reused for more than one type.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">for access to private class members and metadata. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to this <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
        <summary>Compares this to another object to see if they are equivalent.</summary>
        <returns>
          <see langword="true" /> if the values are equivalent; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FillAttributes">
      <MemberSignature Language="C#" Value="protected override void FillAttributes (System.Collections.IList attributeList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void FillAttributes(class System.Collections.IList attributeList) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeList" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="attributeList">An &lt;xref:System.Collections.IList&gt; that lists the attributes in the parent class. Initially, this is empty.</param>
        <summary>Adds the attributes of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> to the specified list of attributes in the parent class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For duplicate attributes, the last one added to the list will be kept.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildProperties">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptorCollection GetChildProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.PropertyDescriptorCollection GetChildProperties() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the default <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
        <returns>A collection of property descriptor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method passes `null` for both the `instance` parameter and the `filter` parameter.  
  
 The properties for the `instance` parameter can differ from the properties of a class, because the container can add or remove properties if the `instance` parameter is sited.  
  
 The `filter` parameter can mix <xref:System.Type> and <xref:System.Attribute> objects. Filtering is defined by the following rules:  
  
-   A <xref:System.Type> object is treated as a wildcard; it matches any property that has the <xref:System.Type> in its set of attributes.  
  
-   If a property does not have an <xref:System.Attribute> of the same class, the property will not be included in the returned array.  
  
-   If the attribute is an instance of <xref:System.Attribute>, the property must be an exact match to be included in the returned array.  
  
-   If you specify an <xref:System.Attribute> and it is the default property, it will be included in the returned array, even if there is no instance of <xref:System.Attribute> in the property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildProperties">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (Attribute[] filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.PropertyDescriptorCollection GetChildProperties(class System.Attribute[] filter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="filter">An array of type &lt;xref:System.Attribute&gt; to use as a filter.</param>
        <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> using a specified array of attributes as a filter.</summary>
        <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that match the specified attributes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method passes `null` for the `instance` parameter.  
  
 The properties for the `instance` parameter can differ from the properties of a class, because the site can add or remove properties if the `instance` parameter is sited.  
  
 The `filter` parameter can mix <xref:System.Type> and <xref:System.Attribute> objects. Filtering is defined by the following rules:  
  
-   A <xref:System.Type> object is treated as a wildcard; it matches any property that has the <xref:System.Type> in its set of attributes.  
  
-   If a property does not have an <xref:System.Attribute> of the same class, the property will not be included in the returned array.  
  
-   If the attribute is an instance of <xref:System.Attribute>, the property must be an exact match to be included in the returned array.  
  
-   If you specify an <xref:System.Attribute> instance and it is the default property, it will be included in the returned array even if there is no instance of the <xref:System.Attribute> in the property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildProperties">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.PropertyDescriptorCollection GetChildProperties(object instance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">A component to get the properties for.</param>
        <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> for a given object.</summary>
        <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties for the specified component.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method passes `null` for the `filter` parameter.  
  
 The properties for the `instance` parameter can differ from the properties of a class, because the site can add or remove properties if the `instance` parameter is sited.  
  
 The `filter` parameter can mix <xref:System.Type> and <xref:System.Attribute> objects. Filtering is defined by the following rules:  
  
-   A <xref:System.Type> object is treated as a wildcard; it matches any property that has the <xref:System.Type> in its set of attributes.  
  
-   If a property does not have an <xref:System.Attribute> of the same class, the property will not be included in the returned array.  
  
-   If the attribute is an instance of <xref:System.Attribute>, the property must be an exact match to be included in the returned array.  
  
-   If you specify an <xref:System.Attribute> instance and it is the default property, it will be included in the returned array even if there is no instance of the <xref:System.Attribute> in the property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildProperties">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance, Attribute[] filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection GetChildProperties(object instance, class System.Attribute[] filter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="filter" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="instance">A component to get the properties for.</param>
        <param name="filter">An array of type &lt;xref:System.Attribute&gt; to use as a filter.</param>
        <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> for a given object using a specified array of attributes as a filter.</summary>
        <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that match the specified attributes for the specified component.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The properties for the `instance` parameter can differ from the properties of a class, because the site can add or remove properties if the `instance` parameter is sited.  
  
 The `filter` parameter can mix <xref:System.Type> and <xref:System.Attribute> objects. Filtering is defined by the following rules:  
  
-   A <xref:System.Type> object is treated as a wildcard; it matches any property that has the <xref:System.Type> in its set of attributes.  
  
-   If a property does not have an <xref:System.Attribute> of the same class, the property will not be included in the returned array.  
  
-   If the attribute is an instance of <xref:System.Attribute>, the property must be an exact match to be included in the returned array.  
  
-   If you specify an <xref:System.Attribute> instance and it is the default property, it will be included in the returned array even if there is no instance of the <xref:System.Attribute> in the property.  
  
 Generally, child properties should be returned by implementing the <xref:System.ComponentModel.TypeConverter.GetProperties%2A> member of the <xref:System.ComponentModel.TypeConverter> returned from this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEditor">
      <MemberSignature Language="C#" Value="public virtual object GetEditor (Type editorBaseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEditor(class System.Type editorBaseType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editorBaseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports.</param>
        <summary>Gets an editor of the specified type.</summary>
        <returns>An instance of the requested editor type, or <see langword="null" /> if an editor cannot be found.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this object.</summary>
        <returns>The hash code for this object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationTarget">
      <MemberSignature Language="C#" Value="protected override object GetInvocationTarget (Type type, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object GetInvocationTarget(class System.Type type, object instance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Type&gt; of the invocation target.</param>
        <param name="instance">The potential invocation target.</param>
        <summary>This method returns the object that should be used during invocation of members.</summary>
        <returns>The &lt;xref:System.Object&gt; that should be used during invocation of members.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, the return value will be the same as the `instance` passed in. If someone associated another object with this instance, or if the instance is a custom type descriptor, the GetInvocationTarget method may return a different value.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromName">
      <MemberSignature Language="C#" Value="protected Type GetTypeFromName (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Type GetTypeFromName(string typeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">The assembly-qualified name of the type to retrieve.</param>
        <summary>Returns a type using its name.</summary>
        <returns>A &lt;xref:System.Type&gt; that matches the given type name, or <see langword="null" /> if a match cannot be found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To find the appropriate type, this method first checks the assembly of the type that this <xref:System.ComponentModel.PropertyDescriptor> references. If it does not find the type in the assembly, it calls <xref:System.Type.GetType%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">The component with the property for which to retrieve the value.</param>
        <summary>When overridden in a derived class, gets the current value of the property on a component.</summary>
        <returns>The value of a property for a given component.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, this method is implemented through reflection.  
  
 This method automatically calls the pre-change method, <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A>, and post-change method, <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>, of the <xref:System.ComponentModel.Design.IComponentChangeService>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetValueChangedHandler">
      <MemberSignature Language="C#" Value="protected EventHandler GetValueChangedHandler (object component);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.EventHandler GetValueChangedHandler(object component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">The component for which to retrieve event handlers.</param>
        <summary>Retrieves the current set of `ValueChanged` event handlers for a specific component</summary>
        <returns>A combined multicast event handler, or <see langword="null" /> if no event handlers are currently assigned to <paramref name="component" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsLocalizable">
      <MemberSignature Language="C#" Value="public virtual bool IsLocalizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLocalizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
        <value>
          <see langword="true" /> if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute" /> set to <see langword="true" />; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a property is marked with the <xref:System.ComponentModel.LocalizableAttribute> set to `true` and used in a visual designer, its values are saved in a resource file. If you mark a property with the attribute and then set the property in code, resource files are not used.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public abstract bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets a value indicating whether this property is read-only.</summary>
        <value>
          <see langword="true" /> if the property is read-only; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnValueChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnValueChanged (object component, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValueChanged(object component, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="component">The object that raises the event.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the `ValueChanged` event that you implemented.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method should be called by your property descriptor implementation when the property value has changed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the type of the property.</summary>
        <value>A &lt;xref:System.Type&gt; that represents the type of the property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, this property is implemented through reflection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveValueChanged">
      <MemberSignature Language="C#" Value="public virtual void RemoveValueChanged (object component, EventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveValueChanged(object component, class System.EventHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="handler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="component">The component to remove the handler for.</param>
        <param name="handler">The delegate to remove as a listener.</param>
        <summary>Enables other objects to be notified when this property changes.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="component" /> or <paramref name="handler" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetValue">
      <MemberSignature Language="C#" Value="public abstract void ResetValue (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetValue(object component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">The component with the property value that is to be reset to the default value.</param>
        <summary>When overridden in a derived class, resets the value for this property of the component to the default value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, this method is implemented through reflection.  
  
 This method determines the value to reset the property to in the following order of precedence:  
  
1.  There is a shadowed property for this property.  
  
2.  There is a <xref:System.ComponentModel.DefaultValueAttribute> for this property.  
  
3.  There is a "ResetMyProperty" method that you have implemented, where "MyProperty" is the name of the property you pass to it.  
  
 This method creates a <xref:System.ComponentModel.Design.DesignerTransaction> automatically in the following order:  
  
1.  The method calls the <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName> method to create a new <xref:System.ComponentModel.Design.DesignerTransaction> to represent the changes.  
  
2.  The method calls the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName> method to indicate that the transaction has begun and the changes are about to occur.  
  
3.  The method resets the property to the value determined by this method's checking order.  
  
4.  The method calls the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName> method to indicate that the changes have occurred.  
  
5.  The method calls <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName> to indicate that the transaction is completed.  
  
 The purpose of the transaction is to support `Undo` and `Redo` functionality.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SerializationVisibility">
      <MemberSignature Language="C#" Value="public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.DesignerSerializationVisibility SerializationVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DesignerSerializationVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this property should be serialized, as specified in the <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.</summary>
        <value>One of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> enumeration values that specifies whether this property should be serialized.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object component, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object component, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">The component with the property value that is to be set.</param>
        <param name="value">The new value.</param>
        <summary>When overridden in a derived class, sets the value of the component to a different value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, this method is implemented through reflection.  
  
 This method creates a <xref:System.ComponentModel.Design.DesignerTransaction> automatically in the following order:  
  
1.  The method calls the <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName> method to create a new <xref:System.ComponentModel.Design.DesignerTransaction> to represent the changes.  
  
2.  The method calls the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName> method to indicate that the transaction has begun and the changes are about to occur.  
  
3.  The method resets the property to the value determined by this method's checking order.  
  
4.  The method calls the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName> method to indicate that the changes have occurred.  
  
5.  The method calls <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName> to indicate that the transaction is complete.  
  
 The purpose of the transaction is to support `Undo` and `Redo` functionality.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValue">
      <MemberSignature Language="C#" Value="public abstract bool ShouldSerializeValue (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSerializeValue(object component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">The component with the property to be examined for persistence.</param>
        <summary>When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.</summary>
        <returns>
          <see langword="true" /> if the property should be persisted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, this method is implemented through reflection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SupportsChangeEvents">
      <MemberSignature Language="C#" Value="public virtual bool SupportsChangeEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsChangeEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.</summary>
        <value>
          <see langword="true" /> if value change notifications may originate from outside the property descriptor; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SupportsChangeEvents property indicates whether value change notifications for this property may originate from outside the property descriptor, such as from the component itself, or whether notifications will only originate from direct calls made to the <xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> method. For example, the component may implement the <xref:System.ComponentModel.INotifyPropertyChanged> interface, or may have an explicit `name``Changed` event for this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>