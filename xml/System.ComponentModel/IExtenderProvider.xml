<Type Name="IExtenderProvider" FullName="System.ComponentModel.IExtenderProvider">
  <TypeSignature Language="C#" Value="public interface IExtenderProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExtenderProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Defines the interface for extending properties to other components in a container.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An extender provider is a component that provides properties to other components. For example, the <xref:System.Windows.Forms.ToolTip> control is an extender provider. When you add a <xref:System.Windows.Forms.ToolTip> control to a <xref:System.Windows.Forms.Form>, all other controls on the form have a <xref:System.Windows.Forms.ToolTip> property added to their list of properties.  
  
 Any component that provides extender properties must implement IExtenderProvider. A visual designer can then call <xref:System.ComponentModel.IExtenderProvider.CanExtend%2A> to determine which objects in a container should receive the extender properties.  
  
 For more information about extender providers, see [How to: Implement an Extender Provider](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to implement the IExtenderProvider interface. This example is part of a larger example discussed in [How to: Implement a HelpLabel Extender Provider](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.HelpLabel#1](~/add/codesnippet/visualbasic/t-system.componentmodel._74_1.vb)]
 [!code-cs[System.Windows.Forms.HelpLabel#1](~/add/codesnippet/csharp/t-system.componentmodel._74_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CanExtend">
      <MemberSignature Language="C#" Value="public bool CanExtend (object extendee);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExtend(object extendee) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extendee" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="extendee">The &lt;xref:System.Object&gt; to receive the extender properties.</param>
        <summary>Specifies whether this object can provide its extender properties to the specified object.</summary>
        <returns>
          <see langword="true" /> if this object can provide extender properties to the specified object; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information on extender properties, see [How to: Implement an Extender Provider](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates how to implement the CanExtend property. This example is part of a larger example discussed in [How to: Implement a HelpLabel Extender Provider](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-vb[System.Windows.Forms.HelpLabel#1](~/add/codesnippet/visualbasic/m-system.componentmodel._33_1.vb)]
 [!code-cs[System.Windows.Forms.HelpLabel#1](~/add/codesnippet/csharp/m-system.componentmodel._33_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>