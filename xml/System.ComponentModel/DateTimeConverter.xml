<Type Name="DateTimeConverter" FullName="System.ComponentModel.DateTimeConverter">
  <TypeSignature Language="C#" Value="public class DateTimeConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DateTimeConverter extends System.ComponentModel.TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a type converter to convert &lt;xref:System.DateTime&gt; objects to and from various other representations.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This converter can only convert a <xref:System.DateTime> object to and from a string.  
  
 The <xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> method uses the <xref:System.DateTime.Parse%2A> method of the <xref:System.DateTime> class to convert from a string.  
  
 The <xref:System.ComponentModel.TypeConverter.ConvertTo%2A> method uses the current culture, if a <xref:System.Globalization.CultureInfo> is not supplied. Generally, <xref:System.ComponentModel.TypeConverter.ConvertTo%2A> uses the <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> property to format a date and <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> with the <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> property to format a date and time. If the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property is passed, <xref:System.ComponentModel.TypeConverter.ConvertTo%2A> uses yyyy-mm-dd to format a date and <xref:System.Object.ToString%2A> to format a date and time.  
  
 For more information about type converters, see the <xref:System.ComponentModel.TypeConverter> base class and [How to: Implement a Type Converter](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  You should never create an instance of DateTimeConverter. Instead, call the <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> method of the <xref:System.ComponentModel.TypeDescriptor> class. For more information, see the examples in the <xref:System.ComponentModel.TypeConverter> base class.  
  
   
  
## Examples  
 The following code example converts a variable of type <xref:System.DateTime> to a string, and vice versa.  
  
 [!code-cs[Converters#9](~/add/codesnippet/csharp/t-system.componentmodel._111_1.cs)]
 [!code-vb[Converters#9](~/add/codesnippet/visualbasic/t-system.componentmodel._111_1.vb)]
 [!code-cpp[Converters#9](~/add/codesnippet/cpp/t-system.componentmodel._111_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DateTimeConverter" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <param name="sourceType">A &lt;xref:System.Type&gt; that represents the type you wish to convert from.</param>
        <summary>Gets a value indicating whether this converter can convert an object in the given source type to a &lt;xref:System.DateTime&gt; using the specified context.</summary>
        <returns>
          <see langword="true" /> if this object can perform the conversion; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This converter can only convert a <xref:System.DateTime> to and from a string.  
  
 The `context` parameter can be used to extract additional information about the environment this converter is being invoked from. This can be `null`, so always check. Also, properties on the context object can return `null`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <param name="destinationType">A &lt;xref:System.Type&gt; that represents the type you wish to convert to.</param>
        <summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
        <returns>
          <see langword="true" /> if this converter can perform the conversion; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `context` parameter can be used to extract additional information about the environment this converter is being invoked from. This can be `null`, so always check. Also, properties on the context object can return `null`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <param name="culture">An optional &lt;xref:System.Globalization.CultureInfo&gt;. If not supplied, the current culture is assumed.</param>
        <param name="value">The &lt;xref:System.Object&gt; to convert.</param>
        <summary>Converts the given value object to a &lt;xref:System.DateTime&gt;.</summary>
        <returns>An &lt;xref:System.Object&gt; that represents the converted <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This converter can only convert a <xref:System.DateTime> to and from a string.  
  
 The `context` parameter can be used to extract additional information about the environment this converter is being invoked from. This can be `null`, so always check. Also, properties on the context object can return `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a valid value for the target type.</exception>
        <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        <param name="culture">An optional &lt;xref:System.Globalization.CultureInfo&gt;. If not supplied, the current culture is assumed.</param>
        <param name="value">The &lt;xref:System.Object&gt; to convert.</param>
        <param name="destinationType">The &lt;xref:System.Type&gt; to convert the value to.</param>
        <summary>Converts the given value object to a &lt;xref:System.DateTime&gt; using the arguments.</summary>
        <returns>An &lt;xref:System.Object&gt; that represents the converted <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This converter can only convert a <xref:System.DateTime> to and from a string.  
  
 The `context` parameter can be used to extract additional information about the environment this converter is being invoked from. This can be `null`, so always check. Also, properties on the context object can return `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>