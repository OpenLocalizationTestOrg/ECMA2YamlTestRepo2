<Type Name="ListChangedEventArgs" FullName="System.ComponentModel.ListChangedEventArgs">
  <TypeSignature Language="C#" Value="public class ListChangedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListChangedEventArgs extends System.EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for the <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> event.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.ComponentModel.IBindingList.ListChanged> event is raised when the data in an <xref:System.ComponentModel.IBindingList> changes.  
  
 The <xref:System.ComponentModel.ListChangedEventArgs.NewIndex%2A> property indicates the index of the item that was added, changed, or deleted. If an item was moved, the <xref:System.ComponentModel.ListChangedEventArgs.NewIndex%2A> property indicates the new location of the item and the <xref:System.ComponentModel.ListChangedEventArgs.OldIndex%2A> property indicates the old location.  
  
 If only one item is affected by a change, the <xref:System.ComponentModel.ListChangedEventArgs.OldIndex%2A> property value is -1.  
  
   
  
## Examples  
 The following code example demonstrates the use of this type. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.BindingSource> named `BindingSource1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#134](~/add/codesnippet/csharp/t-system.componentmodel._59_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#134](~/add/codesnippet/visualbasic/t-system.componentmodel._59_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListChangedEventArgs (System.ComponentModel.ListChangedType listChangedType, System.ComponentModel.PropertyDescriptor propDesc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ComponentModel.ListChangedType listChangedType, class System.ComponentModel.PropertyDescriptor propDesc) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="listChangedType" Type="System.ComponentModel.ListChangedType" />
        <Parameter Name="propDesc" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="listChangedType">A <see cref="T:System.ComponentModel.ListChangedType" /> value indicating the type of change.</param>
        <param name="propDesc">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> that was added, removed, or changed.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs" /> class given the type of change and the <see cref="T:System.ComponentModel.PropertyDescriptor" /> affected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor can be used only if the schema of the object has changed.  
  
 The `listChangedType` parameter should be <xref:System.ComponentModel.ListChangedType>, <xref:System.ComponentModel.ListChangedType>, or <xref:System.ComponentModel.ListChangedType>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListChangedEventArgs (System.ComponentModel.ListChangedType listChangedType, int newIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ComponentModel.ListChangedType listChangedType, int32 newIndex) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="listChangedType" Type="System.ComponentModel.ListChangedType" />
        <Parameter Name="newIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listChangedType">A <see cref="T:System.ComponentModel.ListChangedType" /> value indicating the type of change.</param>
        <param name="newIndex">The index of the item that was added, changed, or removed.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs" /> class given the type of change and the index of the affected item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor if only one item is affected by a change. In this case, the <xref:System.ComponentModel.ListChangedEventArgs.OldIndex%2A> property is set to -1.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListChangedEventArgs (System.ComponentModel.ListChangedType listChangedType, int newIndex, System.ComponentModel.PropertyDescriptor propDesc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ComponentModel.ListChangedType listChangedType, int32 newIndex, class System.ComponentModel.PropertyDescriptor propDesc) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="listChangedType" Type="System.ComponentModel.ListChangedType" />
        <Parameter Name="newIndex" Type="System.Int32" />
        <Parameter Name="propDesc" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="listChangedType">A <see cref="T:System.ComponentModel.ListChangedType" /> value indicating the type of change.</param>
        <param name="newIndex">The index of the item that was added or changed.</param>
        <param name="propDesc">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> describing the item.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs" /> class given the type of change, the index of the affected item, and a <see cref="T:System.ComponentModel.PropertyDescriptor" /> describing the affected item.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListChangedEventArgs (System.ComponentModel.ListChangedType listChangedType, int newIndex, int oldIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ComponentModel.ListChangedType listChangedType, int32 newIndex, int32 oldIndex) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="listChangedType" Type="System.ComponentModel.ListChangedType" />
        <Parameter Name="newIndex" Type="System.Int32" />
        <Parameter Name="oldIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listChangedType">A <see cref="T:System.ComponentModel.ListChangedType" /> value indicating the type of change.</param>
        <param name="newIndex">The new index of the item that was moved.</param>
        <param name="oldIndex">The old index of the item that was moved.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs" /> class given the type of change and the old and new index of the item that was moved.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ListChangedType">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ListChangedType ListChangedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.ListChangedType ListChangedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ListChangedType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of change.</summary>
        <value>A <see cref="T:System.ComponentModel.ListChangedType" /> value indicating the type of change.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.BindingSource> named `BindingSource1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#134](~/add/codesnippet/csharp/p-system.componentmodel._12_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#134](~/add/codesnippet/visualbasic/p-system.componentmodel._12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewIndex">
      <MemberSignature Language="C#" Value="public int NewIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NewIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index of the item affected by the change.</summary>
        <value>The index of the affected by the change.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For items that have been moved, this property represents the new location of the item.  
  
   
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.BindingSource> named `BindingSource1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#134](~/add/codesnippet/csharp/p-system.componentmodel._0_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#134](~/add/codesnippet/visualbasic/p-system.componentmodel._0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OldIndex">
      <MemberSignature Language="C#" Value="public int OldIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OldIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the old index of an item that has been moved.</summary>
        <value>The old index of the moved item.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.BindingSource> named `BindingSource1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#134](~/add/codesnippet/csharp/p-system.componentmodel._4_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#134](~/add/codesnippet/visualbasic/p-system.componentmodel._4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PropertyDescriptor">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptor PropertyDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptor PropertyDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> that was added, changed, or deleted.</summary>
        <value>The <see cref="T:System.ComponentModel.PropertyDescriptor" /> affected by the change.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.BindingSource> named `BindingSource1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.BindingSource.ListChanged?displayProperty=fullName> event.  
  
 [!code-cs[System.Windows.Forms.EventExamples#134](~/add/codesnippet/csharp/p-system.componentmodel._2_1.cs)]
 [!code-vb[System.Windows.Forms.EventExamples#134](~/add/codesnippet/visualbasic/p-system.componentmodel._2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>