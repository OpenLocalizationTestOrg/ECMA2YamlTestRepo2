<Type Name="InstallException" FullName="System.Configuration.Install.InstallException">
  <TypeSignature Language="C#" Value="public class InstallException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InstallException extends System.SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>The exception that is thrown when an error occurs during the commit, rollback, or uninstall phase of an installation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example, plus the examples in the <xref:System.Configuration.Install.InstallException.%23ctor%2A> constructors, together make up an example showing an assembly having its own installer. The installer is named `MyInstaller`, which has an attribute `RunInstallerAttribute`, indicating that this installer will be invoked by [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md). [Installutil.exe (Installer Tool)](../Topic/Installutil.exe%20\(Installer%20Tool\).md) calls the methods <xref:System.Configuration.Install.Installer.Commit%2A>, <xref:System.Configuration.Install.Installer.Rollback%2A>, <xref:System.Configuration.Install.Installer.Install%2A> and <xref:System.Configuration.Install.Installer.Uninstall%2A>. The code in <xref:System.Configuration.Install.Installer.Commit%2A> presumes that a file named `FileDoesNotExist.txt` exists before the installation of the assembly can be committed. If the file `FileDoesNotExist.txt` does not exist, <xref:System.Configuration.Install.Installer.Commit%2A> raises an InstallException. The same is the case with <xref:System.Configuration.Install.Installer.Uninstall%2A> in which an uninstallation will only happen if a file named `FileDoesNotExist.txt` exists. Otherwise it raises an InstallException. In <xref:System.Configuration.Install.Installer.Rollback%2A>, a code fragment is executed, which might raise an exception. If the exception is raised, it is caught and an InstallException is raised with that exception being passed to it.  
  
> [!NOTE]
>  Run this example with the help of Installutil.exe. Type this in the command prompt:  
  
 `Installutil InstallException.exe`  
  
 -or-  
  
 `Installutil /u InstallException.exe`  
  
 [!code-cs[InstallException#1](~/add/codesnippet/csharp/t-system.configuration.i_1_1.cs)]
 [!code-cpp[InstallException#1](~/add/codesnippet/cpp/t-system.configuration.i_1_1.cpp)]
 [!code-vb[InstallException#1](~/add/codesnippet/visualbasic/t-system.configuration.i_1_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallException" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the InstallException constructor. It is a part of the example of the <xref:System.Configuration.Install.InstallException> class.  
  
 In this example, Installutil.exe calls the <xref:System.Configuration.Install.Installer.Commit%2A> method. The code in <xref:System.Configuration.Install.Installer.Commit%2A> presumes that a file named `FileDoesNotExist.txt` exists before the installation of the assembly can be committed. If the file `FileDoesNotExist.txt` does not exist, <xref:System.Configuration.Install.Installer.Commit%2A> raises an <xref:System.Configuration.Install.InstallException>.  
  
> [!NOTE]
>  This example shows how to use one of the overloaded versions of the <xref:System.Configuration.Install.InstallException> constructor. For other examples that might be available, see the individual overload topics.  
  
 [!code-cs[InstallException#2](~/add/codesnippet/csharp/m-system.configuration.i_8_1.cs)]
 [!code-cpp[InstallException#2](~/add/codesnippet/cpp/m-system.configuration.i_8_1.cpp)]
 [!code-vb[InstallException#2](~/add/codesnippet/visualbasic/m-system.configuration.i_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to display to the user.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallException" /> class, and specifies the message to display to the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the <xref:System.Configuration.Install.InstallException.%23ctor%2A> constructor. It is a part of the example of the <xref:System.Configuration.Install.InstallException> class.  
  
 In this example, Installutil.exe calls the <xref:System.Configuration.Install.Installer.Uninstall%2A> method. Uninstallation will only happen if a file named `FileDoesNotExist.txt` exists. Otherwise it raises an <xref:System.Configuration.Install.InstallException>.  
  
> [!NOTE]
>  This example shows how to use one of the overloaded versions of the <xref:System.Configuration.Install.InstallException> constructor. For other examples that might be available, see the individual overload topics.  
  
 [!code-cs[InstallException#4](~/add/codesnippet/csharp/m-system.configuration.i_11_1.cs)]
 [!code-cpp[InstallException#4](~/add/codesnippet/cpp/m-system.configuration.i_11_1.cpp)]
 [!code-vb[InstallException#4](~/add/codesnippet/visualbasic/m-system.configuration.i_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InstallException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
        <param name="context">The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains contextual information about the source or destination.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallException" /> class with serialized data.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">The message to display to the user.</param>
        <param name="innerException">The exception that is the cause of the current exception. If the `innerException` parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.Install.InstallException" /> class, and specifies the message to display to the user, and a reference to the inner exception that is the cause of this exception.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>