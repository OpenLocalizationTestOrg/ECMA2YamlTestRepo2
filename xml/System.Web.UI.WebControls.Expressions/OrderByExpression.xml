<Type Name="OrderByExpression" FullName="System.Web.UI.WebControls.Expressions.OrderByExpression">
  <TypeSignature Language="C#" Value="public class OrderByExpression : System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OrderByExpression extends System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.DataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "ThenByExpressions")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a way to apply a sort expression to an &lt;xref:System.Linq.IQueryable&gt; object.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OrderByExpression class is used in the <xref:System.Web.UI.WebControls.QueryExtender> control to sort data in ascending or descending order. The sorting is performed by the default comparer for the type of the element.  
  
 The <xref:System.Web.UI.WebControls.QueryExtender> control supports a variety of options that you can use to filter data. After you use the filter options, you can use the OrderByExpression object to sort the data.  
  
 You specify the data field to sort by using the <xref:System.Web.UI.WebControls.Expressions.OrderByExpression.DataField%2A> property. You specify the sort direction by using the <xref:System.Web.UI.WebControls.Expressions.OrderByExpression.Direction%2A> property. After the OrderByExpression object has been applied to the data source, you can use the <xref:System.Web.UI.WebControls.Expressions.ThenBy> expressions to perform a subsequent sort on another data field.  
  
   
  
## Examples  
 The following example shows how to search the Products table of the AdventureWorks database for products that have names that start with the string that is specified in the `SearchTextBox` text box. The OrderByExpression object sorts the data by the ListPrice data field in descending order and then by the product ID field in ascending order. The result of the query that is returned from the <xref:System.Web.UI.WebControls.LinqDataSource> control is displayed in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 This code example is part of a larger example that is provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Web.UI.WebControls.Expressions.OrderByExpression.DataField%2A&gt; property is <see langword="null" />.</exception>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OrderByExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Expressions.OrderByExpression" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the property of the &lt;xref:System.Linq.IQueryable&gt; object to sort by.</summary>
        <value>The property of the &lt;xref:System.Linq.IQueryable&gt; data source object to sort by.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.Expressions.OrderByExpression> object sorts the data in a data field. Subsequent sort operation can be performed on a different data field by using the <xref:System.Web.UI.WebControls.Expressions.OrderByExpression.ThenByExpressions%2A> property.  
  
   
  
## Examples  
 The following example shows how to sort data by the ListPrice field in descending order and then by the product ID field in ascending order. This code example is part of a larger example that is provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
```  
<asp:OrderByExpression DataField="ListPrice"   
    Direction="Descending">  
  <asp:ThenBy DataField="ProductID" Direction="Ascending"/>  
</asp:OrderByExpression>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SortDirection Direction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SortDirection Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SortDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets and sets the sort direction of the &lt;xref:System.Linq.IQueryable&gt; data source object.</summary>
        <value>The sort direction of the data source object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.WebControls.Expressions.OrderByExpression> class is used in the <xref:System.Web.UI.WebControls.QueryExtender> control to sort data in ascending or descending order. The direction of the sort operation is specified by using the Direction property.  
  
   
  
## Examples  
 The following example shows how to sort data by the ListPrice field in descending order and then by the ProductID field in ascending order. This code example is part of a larger example provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
```  
<asp:OrderByExpression DataField="ListPrice"   
    Direction="Descending">  
  <asp:ThenBy DataField="ProductID" Direction="Ascending"/>  
</asp:OrderByExpression>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Specifies the data source to apply the sort to.</param>
        <summary>Applies a sort expression to an &lt;xref:System.Linq.IQueryable&gt; object based on a &lt;xref:System.Web.UI.WebControls.Expressions.OrderByExpression.DataField%2A&gt; value and a &lt;xref:System.Web.UI.WebControls.Expressions.OrderByExpression.Direction%2A&gt; value.</summary>
        <returns>An instance of the data source that the expression was applied to.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ThenByExpressions">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Web.UI.WebControls.Expressions.ThenBy&gt; ThenByExpressions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Web.UI.WebControls.Expressions.ThenBy&gt; ThenByExpressions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Web.UI.WebControls.Expressions.ThenBy&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the collection of <see cref="T:System.Web.UI.WebControls.Expressions.ThenBy" /> expressions to apply after an <see cref="T:System.Web.UI.WebControls.Expressions.OrderByExpression" /> value is applied to the data source.</summary>
        <value>The collection of <see cref="T:System.Web.UI.WebControls.Expressions.ThenBy" /> expressions to apply after the <see cref="T:System.Web.UI.WebControls.Expressions.OrderByExpression" /> is applied to the data source.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After a sort operation is performed by using the <xref:System.Web.UI.WebControls.Expressions.OrderByExpression> in the <xref:System.Web.UI.WebControls.QueryExtender> control, subsequent sort operations can be performed by using the ThenByExpressions property.  
  
   
  
## Examples  
 The following example shows how to sort data by the ListPrice field in descending order and then by the product ID field in ascending order using the ThenByExpressions. This code example is part of a larger example that is provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
```  
<asp:OrderByExpression DataField="ListPrice"   
    Direction="Descending">  
  <asp:ThenBy DataField="ProductID" Direction="Ascending"/>  
</asp:OrderByExpression>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>