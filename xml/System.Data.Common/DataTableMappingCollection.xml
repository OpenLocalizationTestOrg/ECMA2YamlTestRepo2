<Type Name="DataTableMappingCollection" FullName="System.Data.Common.DataTableMappingCollection">
  <TypeSignature Language="C#" Value="public sealed class DataTableMappingCollection : MarshalByRefObject, System.Collections.IList, System.Data.ITableMappingCollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataTableMappingCollection extends System.MarshalByRefObject implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Data.ITableMappingCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.ITableMappingCollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataTableMappingCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A collection of <see cref="T:System.Data.Common.DataTableMapping" /> objects. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses an <xref:System.Data.OleDb.OleDbDataAdapter> to <xref:System.Data.Common.DataTableMappingCollection.Add%2A><xref:System.Data.Common.DataTableMapping> objects to its <xref:System.Data.Common.DataAdapter.TableMappings%2A> collection, and then displays a list of those mapped source tables. This example assumes that an <xref:System.Data.OleDb.OleDbDataAdapter> has already been created.  
  
 [!code-cs[Classic WebData DataTableMappingCollection Example#1](~/add/codesnippet/csharp/t-system.data.common.dat_0_1.cs)]
 [!code-vb[Classic WebData DataTableMappingCollection Example#1](~/add/codesnippet/visualbasic/t-system.data.common.dat_0_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTableMappingCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Data.Common.DataTableMappingCollection" /> class. This new instance is empty, that is, it does not yet contain any <see cref="T:System.Data.Common.DataTableMapping" /> objects.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a <xref:System.Data.Common.DataTableMappingCollection>, adds <xref:System.Data.Common.DataTableMapping> objects to the collection, and displays a list of the mapped source tables.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.DataTableMappingCollection Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_24_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.DataTableMappingCollection Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_24_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A <see langword="DataTableMapping" /> object to add to the collection.</param>
        <summary>Adds an &lt;xref:System.Object&gt; that is a table mapping to the collection.</summary>
        <returns>The index of the <see langword="DataTableMapping" /> object added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> within the collection. If the mapping exists in the collection, it is removed. If the mapping does not exist within the collection, it is added to the collection and its index is displayed. The example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection and a <xref:System.Data.Common.DataTableMapping> object have been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.Add Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_1_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.Add Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The object passed in was not a <see cref="T:System.Data.Common.DataTableMapping" /> object.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Data.Common.DataTableMapping Add (string sourceTable, string dataSetTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Common.DataTableMapping Add(string sourceTable, string dataSetTable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataTableMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceTable" Type="System.String" />
        <Parameter Name="dataSetTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceTable">The case-sensitive name of the source table to map from.</param>
        <param name="dataSetTable">The name, which is not case-sensitive, of the <see cref="T:System.Data.DataSet" /> table to map to.</param>
        <summary>Adds a <see cref="T:System.Data.Common.DataTableMapping" /> object to the collection when given a source table name and a <see cref="T:System.Data.DataSet" /> table name.</summary>
        <returns>The <see cref="T:System.Data.Common.DataTableMapping" /> object that was added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a <xref:System.Data.Common.DataTableMappingCollection>, adds <xref:System.Data.Common.DataTableMapping> objects to the collection, and displays a list of the mapped source tables.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.DataTableMappingCollection Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_21_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.DataTableMappingCollection Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_21_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (Array values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Array values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="values">An &lt;xref:System.Array&gt; of values to add to the collection.</param>
        <summary>Copies the elements of the specified &lt;xref:System.Array&gt; to the end of the collection.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Data.Common.DataTableMapping[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Data.Common.DataTableMapping[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Data.Common.DataTableMapping[]" />
      </Parameters>
      <Docs>
        <param name="values">The array of <see cref="T:System.Data.Common.DataTableMapping" /> objects to add to the collection.</param>
        <summary>Copies the elements of the specified <see cref="T:System.Data.Common.DataTableMapping" /> array to the end of the collection.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:System.Data.Common.DataTableMapping" /> objects from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the <xref:System.Data.Common.DataTableMappingCollection.CopyTo%2A> method to export the collection to an array of <xref:System.Data.Common.DataTableMapping> objects. It then clears the collection, and returns `true` if the parameters are no longer persisting. This example assumes that a <xref:System.Data.Common.DataTableMappingCollection> has already been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_19_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.Clear Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_19_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An &lt;xref:System.Object&gt; that is the <see cref="T:System.Data.Common.DataTableMapping" />.</param>
        <summary>Gets a value indicating whether the given <see cref="T:System.Data.Common.DataTableMapping" /> object exists in the collection.</summary>
        <returns>
          <see langword="true" /> if this collection contains the specified <see cref="T:System.Data.Common.DataTableMapping" />; otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> within the collection. If the mapping exists in the collection, it is removed. If the mapping does not exist within the collection, it is added to the collection and its index is displayed. The example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection and a <xref:System.Data.Common.DataTableMapping> object have been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_4_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.Contains1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The case-sensitive source table name containing the <see cref="T:System.Data.Common.DataTableMapping" /> object.</param>
        <summary>Gets a value indicating whether a <see cref="T:System.Data.Common.DataTableMapping" /> object with the specified source table name exists in the collection.</summary>
        <returns>
          <see langword="true" /> if the collection contains a <see cref="T:System.Data.Common.DataTableMapping" /> object with this source table name; otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> object with the given source table name within a <xref:System.Data.Common.DataTableMappingCollection> collection. If the <xref:System.Data.Common.DataTableMapping> exists, the example displays the name and the index of the mapping. If the mapping does not exist, the example displays an error. This example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection has been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.this1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_27_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.this1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_27_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">An &lt;xref:System.Array&gt; to which to copy the <see cref="T:System.Data.Common.DataTableMappingCollection" /> elements.</param>
        <param name="index">The starting index of the array.</param>
        <summary>Copies the elements of the <see cref="T:System.Data.Common.DataTableMappingCollection" /> to the specified array.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Data.Common.DataTableMapping[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Data.Common.DataTableMapping[] array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Data.Common.DataTableMapping[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">A <see cref="T:System.Data.Common.DataTableMapping" /> to which to copy the <see cref="T:System.Data.Common.DataTableMappingCollection" /> elements.</param>
        <param name="index">The starting index of the array.</param>
        <summary>Copies the elements of the <see cref="T:System.Data.Common.DataTableMapping" /> to the specified array.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of <see cref="T:System.Data.Common.DataTableMapping" /> objects in the collection.</summary>
        <value>The number of <see langword="DataTableMapping" /> objects in the collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a <xref:System.Data.Common.DataTableMappingCollection>, adds <xref:System.Data.Common.DataTableMapping> objects to the collection, and displays a list of the mapped source tables.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_11_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.Count Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_11_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetByDataSetTable">
      <MemberSignature Language="C#" Value="public System.Data.Common.DataTableMapping GetByDataSetTable (string dataSetTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Common.DataTableMapping GetByDataSetTable(string dataSetTable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataTableMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSetTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetTable">The name, which is not case-sensitive, of the <see cref="T:System.Data.DataSet" /> table to find.</param>
        <summary>Gets the <see cref="T:System.Data.Common.DataTableMapping" /> object with the specified <see cref="T:System.Data.DataSet" /> table name.</summary>
        <returns>The <see cref="T:System.Data.Common.DataTableMapping" /> object with the specified <see cref="T:System.Data.DataSet" /> table name.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> within the collection. If the object exists, it is returned. The example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection and a <xref:System.Data.Common.DataTableMapping> object have been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.GetByDataSetTable Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_13_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.GetByDataSetTable Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_13_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an enumerator that can iterate through the collection.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerator&gt; that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTableMappingBySchemaAction">
      <MemberSignature Language="C#" Value="public static System.Data.Common.DataTableMapping GetTableMappingBySchemaAction (System.Data.Common.DataTableMappingCollection tableMappings, string sourceTable, string dataSetTable, System.Data.MissingMappingAction mappingAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.DataTableMapping GetTableMappingBySchemaAction(class System.Data.Common.DataTableMappingCollection tableMappings, string sourceTable, string dataSetTable, valuetype System.Data.MissingMappingAction mappingAction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataTableMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableMappings" Type="System.Data.Common.DataTableMappingCollection" />
        <Parameter Name="sourceTable" Type="System.String" />
        <Parameter Name="dataSetTable" Type="System.String" />
        <Parameter Name="mappingAction" Type="System.Data.MissingMappingAction" />
      </Parameters>
      <Docs>
        <param name="tableMappings">The <see cref="T:System.Data.Common.DataTableMappingCollection" /> collection to search.</param>
        <param name="sourceTable">The case-sensitive name of the mapped source table.</param>
        <param name="dataSetTable">The name, which is not case-sensitive, of the mapped <see cref="T:System.Data.DataSet" /> table.</param>
        <param name="mappingAction">One of the <see cref="T:System.Data.MissingMappingAction" /> values.</param>
        <summary>Gets a <see cref="T:System.Data.Common.DataColumnMapping" /> object with the specified source table name and <see cref="T:System.Data.DataSet" /> table name, using the given <see cref="T:System.Data.MissingMappingAction" />.</summary>
        <returns>A <see cref="T:System.Data.Common.DataTableMapping" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Data.Common.DataTableMapping> exists in the collection, it is returned.  
  
 If the <xref:System.Data.Common.DataTableMapping> does not exist in the collection for a given <xref:System.Data.MissingMappingAction>, the following happens:  
  
|MissingMappingAction|Action taken|  
|--------------------------|------------------|  
|`Passthrough`|Creates a <xref:System.Data.Common.DataTableMapping> object with the given `sourceTable` as the source table name and `dataSetTable` as the <xref:System.Data.DataSet> table name. The created <xref:System.Data.Common.DataTableMapping> object is not added to the collection.|  
|`Error`|An exception is generated. The `dataSetTable` parameter is ignored.|  
|`Ignore`|Gets `null`. The `dataSetTable` parameter is ignored.|  
  
   
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> with the given source table name within the collection. If the object exists, it is returned. The example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection and a <xref:System.Data.Common.DataTableMapping> object have been created.  
  
 [!code-cs[Classic WebData DataTableMappingCollection.GetTableMappingBySchemaAction Example#1](~/add/codesnippet/csharp/3fd8dca3-bcd2-4b32-9dd4-_1.cs)]
 [!code-vb[Classic WebData DataTableMappingCollection.GetTableMappingBySchemaAction Example#1](~/add/codesnippet/visualbasic/3fd8dca3-bcd2-4b32-9dd4-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <paramref name="mappingAction" /> parameter was set to <see langword="Error" />, and no mapping was specified.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An &lt;xref:System.Object&gt; that is the <see cref="T:System.Data.Common.DataTableMapping" /> object to find.</param>
        <summary>Gets the location of the specified <see cref="T:System.Data.Common.DataTableMapping" /> object within the collection.</summary>
        <returns>The zero-based location of the specified <see cref="T:System.Data.Common.DataTableMapping" /> object within the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> within the collection. If the mapping exists in the collection, it is removed. If the mapping does not exist within the collection, it is added to the collection and its index is displayed. The example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection and a <xref:System.Data.Common.DataTableMapping> object have been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_2_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.Contains1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string sourceTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string sourceTable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceTable">The case-sensitive name of the source table.</param>
        <summary>Gets the location of the <see cref="T:System.Data.Common.DataTableMapping" /> object with the specified source table name.</summary>
        <returns>The zero-based location of the <see cref="T:System.Data.Common.DataTableMapping" /> object with the specified source table name.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> object with the given source table name within a <xref:System.Data.Common.DataTableMappingCollection> collection. If the <xref:System.Data.Common.DataTableMapping> exists, the example displays the name and the index of the mapping. If the mapping does not exist, the example displays an error. This example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection has been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.this1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_17_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.this1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_17_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IndexOfDataSetTable">
      <MemberSignature Language="C#" Value="public int IndexOfDataSetTable (string dataSetTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfDataSetTable(string dataSetTable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSetTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetTable">The name, which is not case-sensitive, of the <see langword="DataSet" /> table to find.</param>
        <summary>Gets the location of the <see cref="T:System.Data.Common.DataTableMapping" /> object with the specified <see cref="T:System.Data.DataSet" /> table name.</summary>
        <returns>The zero-based location of the <see cref="T:System.Data.Common.DataTableMapping" /> object with the given <see cref="T:System.Data.DataSet" /> table name, or -1 if the <see cref="T:System.Data.Common.DataTableMapping" /> object does not exist in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> within the collection. If the object exists, it is returned. The example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection and a <xref:System.Data.Common.DataTableMapping> object have been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.GetByDataSetTable Example#1](~/add/codesnippet/visualbasic/cc2bbc20-a852-4d09-b77d-_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.GetByDataSetTable Example#1](~/add/codesnippet/csharp/cc2bbc20-a852-4d09-b77d-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Data.Common.DataTableMapping value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Data.Common.DataTableMapping value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the <see cref="T:System.Data.Common.DataTableMapping" /> object to insert.</param>
        <param name="value">The <see cref="T:System.Data.Common.DataTableMapping" /> object to insert.</param>
        <summary>Inserts a <see cref="T:System.Data.Common.DataTableMapping" /> object into the <see cref="T:System.Data.Common.DataTableMappingCollection" /> at the specified index.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the <see cref="T:System.Data.Common.DataTableMapping" /> object to insert.</param>
        <param name="value">The <see cref="T:System.Data.Common.DataTableMapping" /> object to insert.</param>
        <summary>Inserts a <see cref="T:System.Data.Common.DataTableMapping" /> object into the <see cref="T:System.Data.Common.DataTableMappingCollection" /> at the specified index.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Data.Common.DataTableMapping this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DataTableMapping Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataTableMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the <see cref="T:System.Data.Common.DataTableMapping" /> object to return.</param>
        <summary>Gets or sets the <see cref="T:System.Data.Common.DataTableMapping" /> object at the specified index.</summary>
        <value>The <see cref="T:System.Data.Common.DataTableMapping" /> object at the specified index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a <xref:System.Data.Common.DataTableMappingCollection> collection, adds <xref:System.Data.Common.DataTableMapping> objects to the collection, and displays a list of the mapped source tables.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_1_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.Count Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Data.Common.DataTableMapping this[string sourceTable] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DataTableMapping Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataTableMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceTable">The case-sensitive name of the source table.</param>
        <summary>Gets or sets the <see cref="T:System.Data.Common.DataTableMapping" /> object with the specified source table name.</summary>
        <value>The <see cref="T:System.Data.Common.DataTableMapping" /> object with the specified source table name.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> object with the given source table name within a <xref:System.Data.Common.DataTableMappingCollection> collection. If the <xref:System.Data.Common.DataTableMapping> exists, the example displays the name and the index of the mapping. If the mapping does not exist, the example displays an error. This example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection has been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.this1 Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_10_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.this1 Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_10_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Data.Common.DataTableMapping value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Data.Common.DataTableMapping value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Data.Common.DataTableMapping" /> object to remove.</param>
        <summary>Removes the specified <see cref="T:System.Data.Common.DataTableMapping" /> object from the collection.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Data.Common.DataTableMapping" /> object to remove.</param>
        <summary>Removes the specified <see cref="T:System.Data.Common.DataTableMapping" /> object from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> within the collection. If the mapping exists in the collection, it is removed. If the mapping does not exist within the collection, it is added to the collection and its index is displayed. The example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection and a <xref:System.Data.Common.DataTableMapping> object have been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.Add Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_16_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.Add Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_16_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">The object specified was not a <see cref="T:System.Data.Common.DataTableMapping" /> object.</exception>
        <exception cref="T:System.ArgumentException">The object specified is not in the collection.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the <see cref="T:System.Data.Common.DataTableMapping" /> object to remove.</param>
        <summary>Removes the <see cref="T:System.Data.Common.DataTableMapping" /> object located at the specified index from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> object with the given source table name within a <xref:System.Data.Common.DataTableMappingCollection> collection. If the <xref:System.Data.Common.DataTableMapping> exists, the mapping is removed. This example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection has been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_20_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_20_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">A <see cref="T:System.Data.Common.DataTableMapping" /> object does not exist with the specified index.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (string sourceTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(string sourceTable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceTable">The case-sensitive source table name to find.</param>
        <summary>Removes the <see cref="T:System.Data.Common.DataTableMapping" /> object with the specified source table name from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example searches for a <xref:System.Data.Common.DataTableMapping> object with the given source table name within a <xref:System.Data.Common.DataTableMappingCollection> collection. If the <xref:System.Data.Common.DataTableMapping> exists, the mapping is removed. This example assumes that a <xref:System.Data.Common.DataTableMappingCollection> collection has been created.  
  
 [!code-vb[Classic WebData DataTableMappingCollection.RemoveAt1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_5_1.vb)]
 [!code-cs[Classic WebData DataTableMappingCollection.RemoveAt1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">A <see cref="T:System.Data.Common.DataTableMapping" /> object does not exist with the specified source table name.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the &lt;xref:System.Collections.ICollection&gt; is synchronized (thread safe).</summary>
        <value>
          <see langword="true" /> if access to the &lt;xref:System.Collections.ICollection&gt; is synchronized (thread safe); otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataTableMappingCollection> instance is cast to an <xref:System.Collections.ICollection> interface.  
  
 For more information, see <xref:System.Collections.ICollection.IsSynchronized%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the &lt;xref:System.Collections.ICollection&gt;.</summary>
        <value>An object that can be used to synchronize access to the &lt;xref:System.Collections.ICollection&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataTableMappingCollection> instance is cast to an <xref:System.Collections.ICollection> interface.  
  
 For more information, see <xref:System.Collections.ICollection.IsSynchronized%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Collections.IList&gt; has a fixed size.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Collections.IList&gt; has a fixed size; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataTableMappingCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 For more information, see <xref:System.Collections.IList.IsFixedSize%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Collections.IList&gt; is read-only.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Collections.IList&gt; is read-only; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataTableMappingCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 For more information, see <xref:System.Collections.IList.IsReadOnly%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the item to get or set.</param>
        <summary>Gets or sets an item from the collection at a specified index.</summary>
        <value>The element at the specified index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataTableMappingCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 For more information, see <xref:System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Item%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Data.ITableMappingCollection.Add">
      <MemberSignature Language="C#" Value="System.Data.ITableMapping ITableMappingCollection.Add (string sourceTableName, string dataSetTableName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.ITableMapping System.Data.ITableMappingCollection.Add(string sourceTableName, string dataSetTableName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceTableName" Type="System.String" />
        <Parameter Name="dataSetTableName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceTableName">The case-sensitive name of the source table.</param>
        <param name="dataSetTableName">The name of the <see cref="T:System.Data.DataSet" /> table.</param>
        <summary>Adds a table mapping to the collection.</summary>
        <returns>A reference to the newly-mapped <see cref="T:System.Data.ITableMapping" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataTableMappingCollection> instance is cast to an <xref:System.Data.ITableMappingCollection> interface.  
  
 For more information, see <xref:System.Data.ITableMappingCollection.Add%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Data.ITableMappingCollection.GetByDataSetTable">
      <MemberSignature Language="C#" Value="System.Data.ITableMapping ITableMappingCollection.GetByDataSetTable (string dataSetTableName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.ITableMapping System.Data.ITableMappingCollection.GetByDataSetTable(string dataSetTableName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSetTableName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetTableName">The name of the <see langword="DataSet" /> table within the collection.</param>
        <summary>Gets the TableMapping object with the specified <see cref="T:System.Data.DataSet" /> table name.</summary>
        <returns>The TableMapping object with the specified <see langword="DataSet" /> table name.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataTableMappingCollection> instance is cast to an <xref:System.Data.ITableMappingCollection> interface.  
  
 For more information, see <xref:System.Data.ITableMappingCollection.GetByDataSetTable%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Data.ITableMappingCollection.Item">
      <MemberSignature Language="C#" Value="object System.Data.ITableMappingCollection.Item[string index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Data.ITableMappingCollection.Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The <see langword="SourceTable" /> name of the <see cref="T:System.Data.ITableMapping" />.</param>
        <summary>Gets or sets the instance of <see cref="T:System.Data.ITableMapping" /> with the specified &lt;xref:System.Data.ITableMapping.SourceTable%2A&gt; name.</summary>
        <value>The instance of <see cref="T:System.Data.ITableMapping" /> with the specified <see langword="SourceTable" /> name.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataTableMappingCollection> instance is cast to an <xref:System.Data.ITableMappingCollection> interface.  
  
 For more information, see <xref:System.Data.ITableMappingCollection.Item%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>