<Type Name="RegistrationHelperTx" FullName="System.EnterpriseServices.RegistrationHelperTx">
  <TypeSignature Language="C#" Value="public sealed class RegistrationHelperTx : System.EnterpriseServices.ServicedComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RegistrationHelperTx extends System.EnterpriseServices.ServicedComponent" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EnterpriseServices.ServicedComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.EnterpriseServices.Transaction(System.EnterpriseServices.TransactionOption.RequiresNew)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("The RegistrationHelperTx class has been deprecated.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("c89ac250-e18a-4fc7-abd5-b8897b6a78a5")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Used by the .NET Framework infrastructure to install and configure assemblies in the COM+ catalog while maintaining a newly established transaction.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.EnterpriseServices.TransactionAttribute> class attribute is applied to the RegistrationHelperTx class, with a parameter of the <xref:System.EnterpriseServices.TransactionOption> field.  
  
 This type does not need to be used directly from your code. Instead, use the <xref:System.EnterpriseServices.RegistrationHelper> class.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrationHelperTx ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="protected override void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Activate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivate">
      <MemberSignature Language="C#" Value="protected override void Deactivate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Deactivate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstallAssembly">
      <MemberSignature Language="C#" Value="public void InstallAssembly (string assembly, ref string application, ref string tlb, System.EnterpriseServices.InstallationFlags installFlags, object sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InstallAssembly(string assembly, string application, string tlb, valuetype System.EnterpriseServices.InstallationFlags installFlags, object sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.String" />
        <Parameter Name="application" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="tlb" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="installFlags" Type="System.EnterpriseServices.InstallationFlags" />
        <Parameter Name="sync" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="assembly">The file name of the assembly to install.</param>
        <param name="application">Either the name of the COM+ application to install into or <see langword="null" />.</param>
        <param name="tlb">Either the name of the output Type Library Exporter (Tlbexp.exe) file or <see langword="null" />.</param>
        <param name="installFlags">A bitwise combination of the installation flags values.</param>
        <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been configured in the COM+ catalog.</param>
        <summary>Installs the named assembly in the COM+ catalog using transactional semantics.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InstallAssembly method does not need to be called directly from your code. Instead, call the <xref:System.EnterpriseServices.RegistrationHelper.InstallAssembly%2A> method with the same parameters except object sync.  
  
 This method requires the caller to have administrative privileges on the local computer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstallAssembly">
      <MemberSignature Language="C#" Value="public void InstallAssembly (string assembly, ref string application, string partition, ref string tlb, System.EnterpriseServices.InstallationFlags installFlags, object sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InstallAssembly(string assembly, string application, string partition, string tlb, valuetype System.EnterpriseServices.InstallationFlags installFlags, object sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.String" />
        <Parameter Name="application" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="partition" Type="System.String" />
        <Parameter Name="tlb" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="installFlags" Type="System.EnterpriseServices.InstallationFlags" />
        <Parameter Name="sync" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="assembly">The file name of the assembly to install.</param>
        <param name="application">Either the name of the COM+ application to install into or a string that contains <see langword="null" />.</param>
        <param name="partition">Either the name of the partition or <see langword="null" />.</param>
        <param name="tlb">Either the name of the output Type Library Exporter (Tlbexp.exe) file or <see langword="null" />.</param>
        <param name="installFlags">A bitwise combination of the installation flags values.</param>
        <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been configured in the COM+ catalog.</param>
        <summary>Installs the named assembly in the COM+ catalog using transactional semantics.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The InstallAssembly method does not need to be called directly from your code. Instead, call the <xref:System.EnterpriseServices.RegistrationHelper.InstallAssembly%2A> method with the same parameters except object sync.  
  
 This method requires the caller to have administrative privileges on the local computer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InstallAssemblyFromConfig">
      <MemberSignature Language="C#" Value="public void InstallAssemblyFromConfig (ref System.EnterpriseServices.RegistrationConfig regConfig, object sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InstallAssemblyFromConfig(class System.EnterpriseServices.RegistrationConfig regConfig, object sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regConfig" Type="System.EnterpriseServices.RegistrationConfig&amp;" RefType="ref" />
        <Parameter Name="sync" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="regConfig">Configuration information for installing an assembly into the COM+ catalog.</param>
        <param name="sync">A synchronization object generated by the infrastructure that waits until the specified assembly has been configured in the COM+ catalog.</param>
        <summary>Installs a specified assembly in the COM+ catalog using transactional semantics.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Under certain circumstances, the InstallAssemblyFromConfig method is called from within the .NET Framework infrastructure. It does not need to be called directly from your code. Instead, call the <xref:System.EnterpriseServices.RegistrationHelper.InstallAssemblyFromConfig%2A> method.  
  
 This method requires the caller to have administrative privileges on the local computer.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsInTransaction">
      <MemberSignature Language="C#" Value="public bool IsInTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInTransaction() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a value indicating whether the current context for the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> class instance is transactional.</summary>
        <returns>
          <see langword="true" /> if the current context for the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> class instance is transactional; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Under certain circumstances, the IsInTransaction method is called from within the .NET Framework infrastructure. It does not need to be called directly from your code.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UninstallAssembly">
      <MemberSignature Language="C#" Value="public void UninstallAssembly (string assembly, string application, object sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UninstallAssembly(string assembly, string application, object sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.String" />
        <Parameter Name="application" Type="System.String" />
        <Parameter Name="sync" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="assembly">The file name of the assembly to uninstall.</param>
        <param name="application">Either the name of the COM+ application that contains the components in the assembly or <see langword="null" />.</param>
        <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been uninstalled.</param>
        <summary>Uninstalls an assembly from a COM+ application using transactional semantics.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UninstallAssembly method does not need to be called directly from your code. Instead, call the <xref:System.EnterpriseServices.RegistrationHelper.UninstallAssembly%2A> method with the same parameters except object sync.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UninstallAssembly">
      <MemberSignature Language="C#" Value="public void UninstallAssembly (string assembly, string application, string partition, object sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UninstallAssembly(string assembly, string application, string partition, object sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.String" />
        <Parameter Name="application" Type="System.String" />
        <Parameter Name="partition" Type="System.String" />
        <Parameter Name="sync" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="assembly">The file name of the assembly to uninstall.</param>
        <param name="application">Either the name of the COM+ application that contains the components in the assembly or <see langword="null" />.</param>
        <param name="partition">Either the name of the partition or <see langword="null" />.</param>
        <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been uninstalled.</param>
        <summary>Uninstalls an assembly from a COM+ application using transactional semantics.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UninstallAssembly method does not need to be called directly from your code. Instead, call the <xref:System.EnterpriseServices.RegistrationHelper.UninstallAssembly%2A> method with the same parameters except object sync.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UninstallAssemblyFromConfig">
      <MemberSignature Language="C#" Value="public void UninstallAssemblyFromConfig (ref System.EnterpriseServices.RegistrationConfig regConfig, object sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UninstallAssemblyFromConfig(class System.EnterpriseServices.RegistrationConfig regConfig, object sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regConfig" Type="System.EnterpriseServices.RegistrationConfig&amp;" RefType="ref" />
        <Parameter Name="sync" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="regConfig">Configuration information that specifies an assembly to uninstall from an application.</param>
        <param name="sync">A synchronization object generated by the infrastructure that waits until the specified assembly has been uninstalled.</param>
        <summary>Uninstalls a specified assembly from a COM+ application using transactional semantics.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Under certain circumstances, the UninstallAssemblyFromConfig method is called from within the .NET Framework infrastructure. It does not need to be called directly from your code. Instead, call the <xref:System.EnterpriseServices.RegistrationHelper.UninstallAssemblyFromConfig%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>