<Type Name="SecurityCallContext" FullName="System.EnterpriseServices.SecurityCallContext">
  <TypeSignature Language="C#" Value="public sealed class SecurityCallContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecurityCallContext extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Describes the chain of callers leading up to the current method call.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of the SecurityCallContext class to interrogate the security context of calls to the methods of a <xref:System.EnterpriseServices.ServicedComponent> class.  
  
 [!code-cpp[EnterpriseServices_Security#4](~/add/codesnippet/cpp/t-system.enterpriseservi_21_1.cpp)]
 [!code-cs[EnterpriseServices_Security#4](~/add/codesnippet/csharp/t-system.enterpriseservi_21_1.cs)]
 [!code-vb[EnterpriseServices_Security#4](~/add/codesnippet/visualbasic/t-system.enterpriseservi_21_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Callers">
      <MemberSignature Language="C#" Value="public System.EnterpriseServices.SecurityCallers Callers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EnterpriseServices.SecurityCallers Callers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnterpriseServices.SecurityCallers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.EnterpriseServices.SecurityCallers" /> object that describes the caller.</summary>
        <value>The <see cref="T:System.EnterpriseServices.SecurityCallers" /> object that describes the caller.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Callers accesses the `Callers` item in the `ISecurityCallContext` collection in COM+.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">There is no security context.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCall">
      <MemberSignature Language="C#" Value="public static System.EnterpriseServices.SecurityCallContext CurrentCall { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.EnterpriseServices.SecurityCallContext CurrentCall" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnterpriseServices.SecurityCallContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.EnterpriseServices.SecurityCallContext" /> object that describes the security call context.</summary>
        <value>The <see cref="T:System.EnterpriseServices.SecurityCallContext" /> object that describes the security call context.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The static CurrentCall property is the recommended way to access the security call context.  
  
   
  
## Examples  
 The following code example demonstrates the use of this method to obtain a <xref:System.EnterpriseServices.SecurityCallContext> object describing the security context of a method call.  
  
 [!code-cpp[EnterpriseServices_Security#6](~/add/codesnippet/cpp/p-system.enterpriseservi_25_1.cpp)]
 [!code-cs[EnterpriseServices_Security#6](~/add/codesnippet/csharp/p-system.enterpriseservi_25_1.cs)]
 [!code-vb[EnterpriseServices_Security#6](~/add/codesnippet/visualbasic/p-system.enterpriseservi_25_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DirectCaller">
      <MemberSignature Language="C#" Value="public System.EnterpriseServices.SecurityIdentity DirectCaller { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EnterpriseServices.SecurityIdentity DirectCaller" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnterpriseServices.SecurityIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.EnterpriseServices.SecurityIdentity" /> object that describes the direct caller of this method.</summary>
        <value>A <see cref="T:System.EnterpriseServices.SecurityIdentity" /> value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this method to check the identity of the direct caller of a <xref:System.EnterpriseServices.ServicedComponent> method.  
  
 [!code-cpp[EnterpriseServices_Security#7](~/add/codesnippet/cpp/p-system.enterpriseservi_26_1.cpp)]
 [!code-cs[EnterpriseServices_Security#7](~/add/codesnippet/csharp/p-system.enterpriseservi_26_1.cs)]
 [!code-vb[EnterpriseServices_Security#7](~/add/codesnippet/visualbasic/p-system.enterpriseservi_26_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsCallerInRole">
      <MemberSignature Language="C#" Value="public bool IsCallerInRole (string role);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsCallerInRole(string role) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="role">The specified role.</param>
        <summary>Verifies that the direct caller is a member of the specified role.</summary>
        <returns>
          <see langword="true" /> if the direct caller is a member of the specified role; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of this method to determine if the caller of a <xref:System.EnterpriseServices.ServicedComponent> method is in a specified role.  
  
 [!code-cpp[EnterpriseServices_Security#6](~/add/codesnippet/cpp/m-system.enterpriseservi_10_1.cpp)]
 [!code-cs[EnterpriseServices_Security#6](~/add/codesnippet/csharp/m-system.enterpriseservi_10_1.cs)]
 [!code-vb[EnterpriseServices_Security#6](~/add/codesnippet/visualbasic/m-system.enterpriseservi_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityEnabled">
      <MemberSignature Language="C#" Value="public bool IsSecurityEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether security checks are enabled in the current context.</summary>
        <value>
          <see langword="true" /> if security checks are enabled in the current context; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public bool IsUserInRole (string user, string role);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsUserInRole(string user, string role) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="System.String" />
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The specified user.</param>
        <param name="role">The specified role.</param>
        <summary>Verifies that the specified user is in the specified role.</summary>
        <returns>
          <see langword="true" /> if the specified user is a member of the specified role; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinAuthenticationLevel">
      <MemberSignature Language="C#" Value="public int MinAuthenticationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinAuthenticationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see langword="MinAuthenticationLevel" /> value from the <see langword="ISecurityCallContext" /> collection in COM+.</summary>
        <value>The <see langword="MinAuthenticationLevel" /> value from the <see langword="ISecurityCallContext" /> collection in COM+.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 MinAuthenticationLevel is the least secure authentication level of all callers in the chain.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NumCallers">
      <MemberSignature Language="C#" Value="public int NumCallers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumCallers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see langword="NumCallers" /> value from the <see langword="ISecurityCallContext" /> collection in COM+.</summary>
        <value>The <see langword="NumCallers" /> value from the <see langword="ISecurityCallContext" /> collection in COM+.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 NumCallers is the number of callers in the chain of calls.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OriginalCaller">
      <MemberSignature Language="C#" Value="public System.EnterpriseServices.SecurityIdentity OriginalCaller { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EnterpriseServices.SecurityIdentity OriginalCaller" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnterpriseServices.SecurityIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.EnterpriseServices.SecurityIdentity" /> that describes the original caller.</summary>
        <value>One of the <see cref="T:System.EnterpriseServices.SecurityIdentity" /> values.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>