<Type Name="InterfaceQueuingAttribute" FullName="System.EnterpriseServices.InterfaceQueuingAttribute">
  <TypeSignature Language="C#" Value="public sealed class InterfaceQueuingAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InterfaceQueuingAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=true, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enables queuing support for the marked interface. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calls on this interface will be queued using Message Queuing.  
  
 To mark an interface as queued, apply this attribute to the interface using the following syntax: `[InterfaceQueuing]`.  
  
 The member methods of a queued interface must fulfill the requirements for queued method calls, such as having no `out` or `ref` parameters.  
  
 For more information about using attributes, see [Attributes](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to use the `InterfaceQueuingAttribute` attribute.  
  
 [!code-cpp[System.EnterpriseServices.QueuedComponents#2](~/add/codesnippet/cpp/t-system.enterpriseservi_38_1.cpp)]
 [!code-cs[System.EnterpriseServices.QueuedComponents#2](~/add/codesnippet/csharp/t-system.enterpriseservi_38_1.cs)]  
  
 The following code example shows how to mark a COM+ application as queued at compile time by using the `ApplicationQueuing` attribute, and enable the COM+ listener by setting the `QueueListenerEnabled` to true  
  
 [!code-cpp[System.EnterpriseServices.QueuedComponents#1](~/add/codesnippet/cpp/t-system.enterpriseservi_38_2.cpp)]
 [!code-cs[System.EnterpriseServices.QueuedComponents#1](~/add/codesnippet/csharp/t-system.enterpriseservi_38_2.cs)]  
  
 The following code example shows how to use `BindToMoniker` to run the queued moniker, to get an instance of the recorder, call the method that will be recorded, and force the release of the recorder object, to send the message to the queue.  
  
 [!code-cpp[System.EnterpriseServices.QueuedComponents#0](~/add/codesnippet/cpp/t-system.enterpriseservi_38_3.cpp)]
 [!code-cs[System.EnterpriseServices.QueuedComponents#0](~/add/codesnippet/csharp/t-system.enterpriseservi_38_3.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InterfaceQueuingAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" /> class setting the &lt;xref:System.EnterpriseServices.InterfaceQueuingAttribute.Enabled%2A&gt; and &lt;xref:System.EnterpriseServices.InterfaceQueuingAttribute.Interface%2A&gt; properties to their default values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table shows initial property values for an instance of <xref:System.EnterpriseServices.InterfaceQueuingAttribute>.  
  
|Property|Value|  
|--------------|-----------|  
|Enabled|`true`|  
|Interface|`null`|  
  
   
  
## Examples  
 The following code example creates a new <xref:System.EnterpriseServices.InterfaceQueuingAttribute>.  
  
 [!code-cpp[EnterpriseServicesInterfaceQueuingAttribute#1](~/add/codesnippet/cpp/m-system.enterpriseservi_8_1.cpp)]
 [!code-vb[EnterpriseServicesInterfaceQueuingAttribute#1](~/add/codesnippet/visualbasic/m-system.enterpriseservi_8_1.vb)]
 [!code-cs[EnterpriseServicesInterfaceQueuingAttribute#1](~/add/codesnippet/csharp/m-system.enterpriseservi_8_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InterfaceQueuingAttribute (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enabled) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">
          <see langword="true" /> to enable queuing support; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" /> class, optionally disabling queuing support.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates a new <xref:System.EnterpriseServices.InterfaceQueuingAttribute>.  
  
 [!code-cpp[EnterpriseServicesInterfaceQueuingAttribute#2](~/add/codesnippet/cpp/m-system.enterpriseservi_21_1.cpp)]
 [!code-vb[EnterpriseServicesInterfaceQueuingAttribute#2](~/add/codesnippet/visualbasic/m-system.enterpriseservi_21_1.vb)]
 [!code-cs[EnterpriseServicesInterfaceQueuingAttribute#2](~/add/codesnippet/csharp/m-system.enterpriseservi_21_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether queuing support is enabled.</summary>
        <value>
          <see langword="true" /> if queuing support is enabled; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property corresponds to the `Queuing-Enabled` property in COM+.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Interface">
      <MemberSignature Language="C#" Value="public string Interface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Interface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the interface on which queuing is enabled.</summary>
        <value>The name of the interface on which queuing is enabled.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>