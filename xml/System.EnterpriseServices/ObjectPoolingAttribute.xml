<Type Name="ObjectPoolingAttribute" FullName="System.EnterpriseServices.ObjectPoolingAttribute">
  <TypeSignature Language="C#" Value="public sealed class ObjectPoolingAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectPoolingAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enables and configures object pooling for a component. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If object pooling is specified, it must not be disabled in the COM+ catalog; if enabled in the COM+ catalog, it must be specified on the component.  
  
 For a list of initial property values for an instance of ObjectPoolingAttribute, see the <xref:System.EnterpriseServices.ObjectPoolingAttribute.%23ctor%2A> constructor.  
  
 For more information about using attributes, see [Attributes](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of this attribute.  
  
 [!code-cpp[EnterpriseServices_Pooling#0](~/add/codesnippet/cpp/t-system.enterpriseservi_1_1.cpp)]
 [!code-cs[EnterpriseServices_Pooling#0](~/add/codesnippet/csharp/t-system.enterpriseservi_1_1.cs)]
 [!code-vb[EnterpriseServices_Pooling#0](~/add/codesnippet/visualbasic/t-system.enterpriseservi_1_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectPoolingAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class and sets the &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.Enabled%2A&gt;, &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize%2A&gt;, &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize%2A&gt;, and &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.CreationTimeout%2A&gt; properties to their default values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table shows initial property values for an instance of <xref:System.EnterpriseServices.ObjectPoolingAttribute>.  
  
|Property|Value|  
|--------------|-----------|  
|Enabled|`true`|  
|MaxPoolSize|-1|  
|MinPoolSize|-1|  
|CreationTimeout|-1|  
  
   
  
## Examples  
 The following code example demonstrates the use of this attribute.  
  
 [!code-cpp[EnterpriseServices_Pooling#0](~/add/codesnippet/cpp/m-system.enterpriseservi_30_1.cpp)]
 [!code-cs[EnterpriseServices_Pooling#0](~/add/codesnippet/csharp/m-system.enterpriseservi_30_1.cs)]
 [!code-vb[EnterpriseServices_Pooling#0](~/add/codesnippet/visualbasic/m-system.enterpriseservi_30_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectPoolingAttribute (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">
          <see langword="true" /> to enable object pooling; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class and sets the &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.Enabled%2A&gt; property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates a new <xref:System.EnterpriseServices.ObjectPoolingAttribute>.  
  
 [!code-cs[EnterpriseServicesObjectPoolingAttribute#1](~/add/codesnippet/csharp/m-system.enterpriseservi_0_1.cs)]
 [!code-vb[EnterpriseServicesObjectPoolingAttribute#1](~/add/codesnippet/visualbasic/m-system.enterpriseservi_0_1.vb)]
 [!code-cpp[EnterpriseServicesObjectPoolingAttribute#1](~/add/codesnippet/cpp/m-system.enterpriseservi_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectPoolingAttribute (int minPoolSize, int maxPoolSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minPoolSize, int32 maxPoolSize) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minPoolSize" Type="System.Int32" />
        <Parameter Name="maxPoolSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minPoolSize">The minimum pool size.</param>
        <param name="maxPoolSize">The maximum pool size.</param>
        <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class and sets the &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize%2A&gt; and &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize%2A&gt; properties.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates a new <xref:System.EnterpriseServices.ObjectPoolingAttribute>.  
  
 [!code-cs[EnterpriseServicesObjectPoolingAttribute#3](~/add/codesnippet/csharp/b8812302-400d-4dd9-8859-_1.cs)]
 [!code-vb[EnterpriseServicesObjectPoolingAttribute#3](~/add/codesnippet/visualbasic/b8812302-400d-4dd9-8859-_1.vb)]
 [!code-cpp[EnterpriseServicesObjectPoolingAttribute#3](~/add/codesnippet/cpp/b8812302-400d-4dd9-8859-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectPoolingAttribute (bool enable, int minPoolSize, int maxPoolSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable, int32 minPoolSize, int32 maxPoolSize) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="minPoolSize" Type="System.Int32" />
        <Parameter Name="maxPoolSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enable">
          <see langword="true" /> to enable object pooling; otherwise, <see langword="false" />.</param>
        <param name="minPoolSize">The minimum pool size.</param>
        <param name="maxPoolSize">The maximum pool size.</param>
        <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class and sets the &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.Enabled%2A&gt;, &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize%2A&gt;, and &lt;xref:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize%2A&gt; properties.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates a new <xref:System.EnterpriseServices.ObjectPoolingAttribute>.  
  
 [!code-cs[EnterpriseServicesObjectPoolingAttribute#2](~/add/codesnippet/csharp/0778b4c1-ef73-4995-920a-_1.cs)]
 [!code-vb[EnterpriseServicesObjectPoolingAttribute#2](~/add/codesnippet/visualbasic/0778b4c1-ef73-4995-920a-_1.vb)]
 [!code-cpp[EnterpriseServicesObjectPoolingAttribute#2](~/add/codesnippet/cpp/0778b4c1-ef73-4995-920a-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AfterSaveChanges">
      <MemberSignature Language="C#" Value="public bool AfterSaveChanges (System.Collections.Hashtable info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AfterSaveChanges(class System.Collections.Hashtable info) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Collections.Hashtable" />
      </Parameters>
      <Docs>
        <param name="info">A hash table that contains internal objects referenced by internal keys.</param>
        <summary>Called internally by the .NET Framework infrastructure while installing and configuring assemblies in the COM+ catalog.</summary>
        <returns>
          <see langword="true" /> if the method has made changes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Even though it is a public method, the AfterSaveChanges method is intended only to be used from within the .NET Framework infrastructure. It is sufficient for a developer to apply the <xref:System.EnterpriseServices.ObjectPoolingAttribute> class attribute and set other members in its interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public bool Apply (System.Collections.Hashtable info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Apply(class System.Collections.Hashtable info) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Collections.Hashtable" />
      </Parameters>
      <Docs>
        <param name="info">A hash table that contains an internal object to which object pooling properties are applied, referenced by an internal key.</param>
        <summary>Called internally by the .NET Framework infrastructure while applying the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class attribute to a serviced component.</summary>
        <returns>
          <see langword="true " />if the method has made changes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Even though it is a public method, the Apply method is intended only to be used from within the .NET Framework infrastructure. It is sufficient for a developer to apply the <xref:System.EnterpriseServices.ObjectPoolingAttribute> class attribute and set other members in its interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreationTimeout">
      <MemberSignature Language="C#" Value="public int CreationTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CreationTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the length of time to wait for an object to become available in the pool before throwing an exception. This value is in milliseconds.</summary>
        <value>The time-out value in milliseconds.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Specifies how long a client will wait, in milliseconds, for an object to be returned from the pool.  
  
   
  
## Examples  
 The following code example demonstrates the use of this property.  
  
 [!code-cpp[EnterpriseServices_Pooling#1](~/add/codesnippet/cpp/p-system.enterpriseservi_18_1.cpp)]
 [!code-cs[EnterpriseServices_Pooling#1](~/add/codesnippet/csharp/p-system.enterpriseservi_18_1.cs)]
 [!code-vb[EnterpriseServices_Pooling#1](~/add/codesnippet/visualbasic/p-system.enterpriseservi_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether object pooling is enabled.</summary>
        <value>
          <see langword="true" /> if object pooling is enabled; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example gets and sets the value of an `ObjectPoolingAttribute`'s Enabled property.  
  
 [!code-cs[EnterpriseServicesObjectPoolingAttribute#4](~/add/codesnippet/csharp/p-system.enterpriseservi_24_1.cs)]
 [!code-vb[EnterpriseServicesObjectPoolingAttribute#4](~/add/codesnippet/visualbasic/p-system.enterpriseservi_24_1.vb)]
 [!code-cpp[EnterpriseServicesObjectPoolingAttribute#4](~/add/codesnippet/cpp/p-system.enterpriseservi_24_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsValidTarget">
      <MemberSignature Language="C#" Value="public bool IsValidTarget (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidTarget(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string generated by the .NET Framework infrastructure that is checked for a special value that indicates a serviced component.</param>
        <summary>Called internally by the .NET Framework infrastructure while installing and configuring assemblies in the COM+ catalog.</summary>
        <returns>
          <see langword="true" /> if the attribute is applied to a serviced component class.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Even though it is a public method, the IsValidTarget method is intended only to be used from within the .NET Framework infrastructure. It is sufficient for a developer to apply the <xref:System.EnterpriseServices.ObjectPoolingAttribute> class attribute and set other members in its interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxPoolSize">
      <MemberSignature Language="C#" Value="public int MaxPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value for the maximum size of the pool.</summary>
        <value>The maximum number of objects in the pool.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 MaxPoolSize represents the maximum number of pooled objects that the pooling manager will create, both actively used by clients and inactive in the pool. When creating objects, the pooling manager checks to verify that the maximum pool size has not been reached and, if it has not, the pooling manager creates a new object to dispense to the client. If the maximum pool size has been reached, client requests are queued and receive the first available object from the pool in the order in which they arrived. Object creation requests time-out after a specified period.  
  
   
  
## Examples  
 The following code example demonstrates the use of this property.  
  
 [!code-cpp[EnterpriseServices_Pooling#1](~/add/codesnippet/cpp/p-system.enterpriseservi_7_1.cpp)]
 [!code-cs[EnterpriseServices_Pooling#1](~/add/codesnippet/csharp/p-system.enterpriseservi_7_1.cs)]
 [!code-vb[EnterpriseServices_Pooling#1](~/add/codesnippet/visualbasic/p-system.enterpriseservi_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinPoolSize">
      <MemberSignature Language="C#" Value="public int MinPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value for the minimum size of the pool.</summary>
        <value>The minimum number of objects in the pool.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 MinPoolSize represents the number of objects that are created when the application starts and the minimum number of objects that are maintained in the pool while the application is running. If the number of available objects in the pool drops below the specified minimum, new objects are created to meet any outstanding object requests and refill the pool. If the number of available objects in the pool is greater than the minimum number, those surplus objects are destroyed during a clean-up cycle.  
  
   
  
## Examples  
 The following code example demonstrates the use of this property.  
  
 [!code-cpp[EnterpriseServices_Pooling#1](~/add/codesnippet/cpp/p-system.enterpriseservi_9_1.cpp)]
 [!code-cs[EnterpriseServices_Pooling#1](~/add/codesnippet/csharp/p-system.enterpriseservi_9_1.cs)]
 [!code-vb[EnterpriseServices_Pooling#1](~/add/codesnippet/visualbasic/p-system.enterpriseservi_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>