<Type Name="DataRow" FullName="System.Data.DataRow">
  <TypeSignature Language="C#" Value="public class DataRow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataRow extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a row of data in a <see cref="T:System.Data.DataTable" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataRow and <xref:System.Data.DataColumn> objects are primary components of a <xref:System.Data.DataTable>. Use the DataRow object and its properties and methods to retrieve and evaluate; and insert, delete, and update the values in the <xref:System.Data.DataTable>. The <xref:System.Data.DataRowCollection> represents the actual DataRow objects in the <xref:System.Data.DataTable>, and the <xref:System.Data.DataColumnCollection> contains the <xref:System.Data.DataColumn> objects that describe the schema of the <xref:System.Data.DataTable>. Use the overloaded <xref:System.Data.DataRow.Item%2A> property to return or set the value of a <xref:System.Data.DataColumn>.  
  
 Use the <xref:System.Data.DataRow.HasVersion%2A> and <xref:System.Data.DataRow.IsNull%2A> properties to determine the status of a particular row value, and the <xref:System.Data.DataRow.RowState%2A> property to determine the state of the row relative to its parent <xref:System.Data.DataTable>.  
  
 To create a new DataRow, use the <xref:System.Data.DataTable.NewRow%2A> method of the <xref:System.Data.DataTable> object. After creating a new DataRow, use the <xref:System.Data.DataRowCollection.Add%2A> method to add the new DataRow to the <xref:System.Data.DataRowCollection>. Finally, call the <xref:System.Data.DataRow.AcceptChanges%2A> method of the <xref:System.Data.DataTable> object to confirm the addition. For more information about adding data to a <xref:System.Data.DataTable>, see [Adding Data to a DataTable](~/add/includes/ajax-current-ext-md.md).  
  
 You can delete a DataRow from the <xref:System.Data.DataRowCollection> by calling the <xref:System.Data.DataRowCollection.Remove%2A> method of the <xref:System.Data.DataRowCollection>, or by calling the <xref:System.Data.DataRow.Delete%2A> method of the DataRow object. The <xref:System.Data.DataRowCollection.Remove%2A> method removes the row from the collection. In contrast, <xref:System.Data.DataRow.Delete%2A> marks the DataRow for removal. The actual removal occurs when you call <xref:System.Data.DataRow.AcceptChanges%2A> method. By calling <xref:System.Data.DataRow.Delete%2A>, you can programmatically check which rows are marked for removal before actually deleting them. For more information, see [DataRow Deletion](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example creates a new DataRow by calling the <xref:System.Data.DataTable.NewRow%2A> method of the <xref:System.Data.DataTable> object.  
  
 [!code-vb[Classic WebData DataRow Example#1](~/add/codesnippet/visualbasic/t-system.data.datarow_1.vb)]
 [!code-cs[Classic WebData DataRow Example#1](~/add/codesnippet/csharp/t-system.data.datarow_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe>This type is safe for multithreaded read operations. You must synchronize any write operations.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataRow (System.Data.DataRowBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.Data.DataRowBuilder builder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Data.DataRowBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">builder</param>
        <summary>Initializes a new instance of the DataRow. Constructs a row from the builder. Only for internal usage..</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Commits all the changes made to this row since the last time AcceptChanges was called.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When invoking AcceptChanges, the <xref:System.Data.DataRow.EndEdit%2A> method is implicitly called to end any edits. If the <xref:System.Data.DataRow.RowState%2A> of the row was Added or Modified, the <xref:System.Data.DataRow.RowState%2A> becomes Unchanged. If the <xref:System.Data.DataRow.RowState%2A> was Deleted, the row is removed.  
  
 See the <xref:System.Data.DataRow.BeginEdit%2A> method for more information.  
  
 The <xref:System.Data.DataTable> class also has an <xref:System.Data.DataTable.AcceptChanges%2A> method which affects changes made to the whole table. For more information and a code example that demonstrates how to accept and reject changes to individual data rows, see [AcceptChanges and RejectChanges](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example first creates a new <xref:System.Data.DataTable> with one column, and then creates a single <xref:System.Data.DataRow>. As the <xref:System.Data.DataRow> is created, added, modified, and deleted, its <xref:System.Data.DataRow.RowState%2A> is printed.  
  
 [!code-cs[Classic WebData DataRow.AcceptChanges Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ac_1.cs)]
 [!code-vb[Classic WebData DataRow.AcceptChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ac_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public void BeginEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts an edit operation on a <see cref="T:System.Data.DataRow" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the BeginEdit method to put a <xref:System.Data.DataRow> into edit mode. In this mode, events are temporarily suspended, letting the user make changes to more than one row without triggering validation rules. For example, if you must make sure that the value of the column for a total amount is equal to the values for the debit and credit columns in a row, you can put each row into edit mode to suspend the validation of the row values until the user tries to commit the values.  
  
 The BeginEdit method is called implicitly when the user changes the value of a data-bound control; the <xref:System.Data.DataRow.EndEdit%2A> method is called implicitly when you invoke the <xref:System.Data.DataTable.AcceptChanges%2A> method for the <xref:System.Data.DataTable> object. While in this edit mode, the <xref:System.Data.DataRow> stores representations of the original and new proposed values. Therefore, as long as the <xref:System.Data.DataRow.EndEdit%2A> method has not been called, you can retrieve either the original or proposed version by passing either `DataRowVersion.Original` or `DataRowVersion.Proposed` for the `version` parameter of the <xref:System.Data.DataRow.Item%2A> property. You can also cancel any edits at this point by invoking the <xref:System.Data.DataRow.CancelEdit%2A> method.  
  
 To see if the row contains an original or proposed value, call the <xref:System.Data.DataRow.HasVersion%2A> method.  
  
> [!NOTE]
>  The BeginEdit method temporarily suspends <xref:System.Data.DataTable.RowChanging> events, but the `delete` operation does not.  
  
   
  
## Examples  
 The example creates a simple <xref:System.Data.DataTable> with one <xref:System.Data.DataColumn> and five <xref:System.Data.DataRow> objects, and a <xref:System.Data.UniqueConstraint>. A <xref:System.Data.DataTable.RowChanged> event handler is also added to monitor when the row's value is changing. After invoking BeginEdit on the existing rows, the constraint and event are temporarily disabled and the original and proposed values are printed. The BeginEdit is again invoked to set two rows to the same value. When <xref:System.Data.DataRow.EndEdit%2A> is called, the <xref:System.Data.UniqueConstraint> is enforced on the identical values.  
  
 [!code-vb[Classic WebData DataRow.BeginEdit Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.be_1.vb)]
 [!code-cs[Classic WebData DataRow.BeginEdit Example#1](~/add/codesnippet/csharp/m-system.data.datarow.be_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.InRowChangingEventException">The method was called inside the <see cref="E:System.Data.DataTable.RowChanging" /> event.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">The method was called upon a deleted row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the current edit on the row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 See the <xref:System.Data.DataRow.BeginEdit%2A> method for more information.  
  
   
  
## Examples  
 The following example edits the value of one column in the last row of a <xref:System.Windows.Forms.DataGrid> control. The example uses the <xref:System.Data.DataRow.BeginEdit%2A>, <xref:System.Data.DataRow.EndEdit%2A>, methods to edit the column's value and commit the change to the row.  
  
 [!code-vb[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ca_1.vb)]
 [!code-cs[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ca_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.InRowChangingEventException">The method was called inside the <see cref="E:System.Data.DataTable.RowChanging" /> event.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClearErrors">
      <MemberSignature Language="C#" Value="public void ClearErrors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearErrors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the errors for the row. This includes the &lt;xref:System.Data.DataRow.RowError%2A&gt; and errors set with &lt;xref:System.Data.DataRow.SetColumnError%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Data.DataRow.SetColumnError%2A> and <xref:System.Data.DataRow.GetColumnError%2A> to set and return errors for individual columns.  
  
 Set the <xref:System.Data.DataRow.RowError%2A> property to set an error that applies to the whole row.  
  
 To determine whether any errors exist for the columns collection, use the <xref:System.Data.DataRow.HasErrors%2A> method. Consequently, you can use the <xref:System.Data.DataRow.GetColumnsInError%2A> method to retrieve all the columns with errors.  
  
   
  
## Examples  
 The following example uses the <xref:System.Data.DataRow.HasErrors%2A> to look for errors. If the row has errors, the <xref:System.Data.DataRow.GetColumnsInError%2A> method returns the array of columns with errors that can then be resolved. The ClearErrors method is then called to clear all errors.  
  
 [!code-cs[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/csharp/m-system.data.datarow.cl_1.cs)]
 [!code-vb[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.cl_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deletes the <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Data.DataRow.RowState%2A> of the row is Added, the <xref:System.Data.DataRow.RowState%2A> becomes `Detached` and the row is removed from the table when you call <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 The <xref:System.Data.DataRow.RowState%2A> becomes `Deleted` after you use the Delete method on an existing <xref:System.Data.DataRow>. It remains `Deleted` until you call <xref:System.Data.DataRow.AcceptChanges%2A>. At this time, the <xref:System.Data.DataRow> is removed from the table.  
  
 Delete should not be called in a foreach loop while iterating through a <xref:System.Data.DataRowCollection> object. Delete modifies the state of the collection.  
  
 A deleted row can be undeleted by invoking <xref:System.Data.DataRow.RejectChanges%2A>.  
  
> [!NOTE]
>  The <xref:System.Data.DataRow.BeginEdit%2A> method temporarily suspends <xref:System.Data.DataTable.RowChanging> events, but the delete operation does not.  
  
   
  
## Examples  
 The following example creates a simple <xref:System.Data.DataTable> with two columns and ten rows. After deleting several <xref:System.Data.DataRow> items with the Delete method, one of the rows is undeleted by invoking <xref:System.Data.DataRow.RejectChanges%2A>.  
  
 [!code-vb[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.de_1.vb)]
 [!code-cs[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/csharp/m-system.data.datarow.de_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">The <see cref="T:System.Data.DataRow" /> has already been deleted.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public void EndEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the edit occurring on the row.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set the property, an exception is generated if an exception occurs in the <xref:System.Data.DataTable.RowChanging> event.  
  
   
  
## Examples  
 The following example uses the EndEdit method to end the edit of a <xref:System.Data.DataRow> value if the validation function returns true.  
  
 [!code-vb[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.en_1.vb)]
 [!code-cs[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/csharp/m-system.data.datarow.en_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.InRowChangingEventException">The method was called inside the <see cref="E:System.Data.DataTable.RowChanging" /> event.</exception>
        <exception cref="T:System.Data.ConstraintException">The edit broke a constraint.</exception>
        <exception cref="T:System.Data.ReadOnlyException">The row belongs to the table and the edit tried to change the value of a read-only column.</exception>
        <exception cref="T:System.Data.NoNullAllowedException">The edit tried to put a null value into a column where &lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt; is false.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildRows">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetChildRows (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetChildRows(class System.Data.DataRelation relation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation">The <see cref="T:System.Data.DataRelation" /> to use.</param>
        <summary>Gets the child rows of this <see cref="T:System.Data.DataRow" /> using the specified <see cref="T:System.Data.DataRelation" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataRow" /> objects or an array of length zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects that is returned by the <xref:System.Data.DataTable.ChildRelations%2A> property.  
  
   
  
## Examples  
 The following example uses the <xref:System.Data.DataRow.GetChildRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  
  
 [!code-cs[Classic WebData DataRow.GetChildRows2 Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_8_1.cs)]
 [!code-vb[Classic WebData DataRow.GetChildRows2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The relation and row do not belong to the same table.</exception>
        <exception cref="T:System.ArgumentNullException">The relation is <see langword="null" />.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have this version of data.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildRows">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetChildRows (string relationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetChildRows(string relationName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationName">The &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of the <see cref="T:System.Data.DataRelation" /> to use.</param>
        <summary>Gets the child rows of a <see cref="T:System.Data.DataRow" /> using the specified &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataRow" /> objects or an array of length zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects that is returned by the <xref:System.Data.DataTable.ChildRelations%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The relation and row do not belong to the same table.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildRows">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetChildRows (System.Data.DataRelation relation, System.Data.DataRowVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetChildRows(class System.Data.DataRelation relation, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="relation">The <see cref="T:System.Data.DataRelation" /> to use.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values specifying the version of the data to get. Possible values are <see langword="Default" />, <see langword="Original" />, <see langword="Current" />, and <see langword="Proposed" />.</param>
        <summary>Gets the child rows of a <see cref="T:System.Data.DataRow" /> using the specified <see cref="T:System.Data.DataRelation" />, and <see cref="T:System.Data.DataRowVersion" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataRow" /> objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects that is returned by the <xref:System.Data.DataTable.ChildRelations%2A> property.  
  
 Use the <xref:System.Data.DataRow.HasVersion%2A> property to determine whether the <xref:System.Data.DataRowVersion> that you want exists.  
  
 If <xref:System.Data.DataRowVersion> is specified, the version that is used depends on the <xref:System.Data.DataRow.RowState%2A> of the row on which `GetChildRows` is invoked. If the row on which `GetChildRows` is invoked has a `RowState` of `Modified`, `New`, or `Unchanged`, the <xref:System.Data.DataRowVersion> version of the row is used for fetching related child rows with matching values in their Current versions. If the row on which `GetChildRows` is invoked has a `RowState` of `Deleted`, the <xref:System.Data.DataRowVersion> version of the row is used for fetching related child rows with matching values in their original versions.  
  
   
  
## Examples  
 The following example uses the <xref:System.Data.DataRow.GetChildRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column with the specified version in the row is then printed.  
  
 [!code-vb[Classic WebData DataRow.GetChildRows3 Example#1](~/add/codesnippet/visualbasic/47f0f4a3-cc08-456d-98cc-_1.vb)]
 [!code-cs[Classic WebData DataRow.GetChildRows3 Example#1](~/add/codesnippet/csharp/47f0f4a3-cc08-456d-98cc-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The relation and row do not belong to the same table.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="relation" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have the requested <see cref="T:System.Data.DataRowVersion" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetChildRows">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetChildRows (string relationName, System.Data.DataRowVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetChildRows(string relationName, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="relationName">The &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of the <see cref="T:System.Data.DataRelation" /> to use.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values specifying the version of the data to get. Possible values are <see langword="Default" />, <see langword="Original" />, <see langword="Current" />, and <see langword="Proposed" />.</param>
        <summary>Gets the child rows of a <see cref="T:System.Data.DataRow" /> using the specified &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />, and <see cref="T:System.Data.DataRowVersion" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataRow" /> objects or an array of length zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects that is returned by the <xref:System.Data.DataTable.ChildRelations%2A> property.  
  
 Use the <xref:System.Data.DataRow.HasVersion%2A> property to determine whether the <xref:System.Data.DataRowVersion> that you want exists.  
  
 If <xref:System.Data.DataRowVersion> is specified, the version that is used depends on the <xref:System.Data.DataRow.RowState%2A> of the row on which `GetChildRows` is invoked. If the row on which `GetChildRows` is invoked has a `RowState` of `Modified`, `New`, or `Unchanged`, the <xref:System.Data.DataRowVersion> version of the row is used for fetching related child rows with matching values in their Current versions. If the row on which `GetChildRows` is invoked has a `RowState` of `Deleted`, the <xref:System.Data.DataRowVersion> version of the row is used for fetching related child rows with matching values in their original versions.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The relation and row do not belong to the same table.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="relation" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have the requested <see cref="T:System.Data.DataRowVersion" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetColumnError">
      <MemberSignature Language="C#" Value="public string GetColumnError (System.Data.DataColumn column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetColumnError(class System.Data.DataColumn column) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
      </Parameters>
      <Docs>
        <param name="column">A <see cref="T:System.Data.DataColumn" />.</param>
        <summary>Gets the error description of the specified <see cref="T:System.Data.DataColumn" />.</summary>
        <returns>The text of the error description.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Data.DataRow.SetColumnError%2A> method to set column errors.  
  
 To determine whether any errors exist for the columns collection, use the <xref:System.Data.DataRow.HasErrors%2A> method. Consequently, you can use the <xref:System.Data.DataRow.GetColumnsInError%2A> method to retrieve all the columns with errors. Alternatively, the <xref:System.Data.DataTable.GetErrors%2A> method of the <xref:System.Data.DataTable> returns all rows with errors.  
  
 To clear all errors for the columns collection, use the <xref:System.Data.DataRow.ClearErrors%2A> method.  
  
   
  
## Examples  
 The following example sets an error description for a specified <xref:System.Data.DataRow>.  
  
 [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_1_1.cs)]
 [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetColumnError">
      <MemberSignature Language="C#" Value="public string GetColumnError (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetColumnError(int32 columnIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The zero-based index of the column.</param>
        <summary>Gets the error description for the column specified by index.</summary>
        <returns>The text of the error description.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Data.DataRow.SetColumnError%2A> method to set column errors.  
  
 To determine whether any errors exist for the columns collection, use the <xref:System.Data.DataRow.HasErrors%2A> method. Consequently, you can use the <xref:System.Data.DataRow.GetColumnsInError%2A> method to retrieve all the columns with errors.  
  
 To clear all errors for the columns collection, use the <xref:System.Data.DataRow.ClearErrors%2A> method.  
  
   
  
## Examples  
 The following example sets an error description for a specified <xref:System.Data.DataRow>.  
  
 [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_6_1.cs)]
 [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">The <paramref name="columnIndex" /> argument is out of range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetColumnError">
      <MemberSignature Language="C#" Value="public string GetColumnError (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetColumnError(string columnName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">The name of the column.</param>
        <summary>Gets the error description for a column, specified by name.</summary>
        <returns>The text of the error description.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Data.DataRow.SetColumnError%2A> method to set column errors.  
  
 To determine whether any errors exist for the columns collection, use the <xref:System.Data.DataRow.HasErrors%2A> method. Consequently, you can use the <xref:System.Data.DataRow.GetColumnsInError%2A> method to retrieve all the columns with errors.  
  
 To clear all errors for the columns collection, use the <xref:System.Data.DataRow.ClearErrors%2A> method.  
  
   
  
## Examples  
 The following example sets an error description for a specified <xref:System.Data.DataRow>.  
  
 [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_0_1.cs)]
 [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetColumnsInError">
      <MemberSignature Language="C#" Value="public System.Data.DataColumn[] GetColumnsInError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataColumn[] GetColumnsInError() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataColumn[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an array of columns that have errors.</summary>
        <returns>An array of <see cref="T:System.Data.DataColumn" /> objects that contain errors.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetColumnsInError lets you reduce the number of <xref:System.Data.DataColumn> objects that must be processed for errors by returning only those columns that have an error. Errors can be set to individual columns with the <xref:System.Data.DataRow.SetColumnError%2A> method. To further reduce the number of processing, examine the <xref:System.Data.DataRow.HasErrors%2A> property of the <xref:System.Data.DataRow> class to determine whether a <xref:System.Data.DataRow> has errors before invoking GetColumnsInError.  
  
 Use the <xref:System.Data.DataRow.ClearErrors%2A> method to clear all errors on the row. This includes the <xref:System.Data.DataRow.RowError%2A>.  
  
   
  
## Examples  
 The following example uses the <xref:System.Data.DataRow.HasErrors%2A> to look for errors. If the row has errors, the GetColumnsInError method returns the array of columns with errors that can then be resolved. The <xref:System.Data.DataRow.ClearErrors%2A> method is then called to clear all errors.  
  
 [!code-cs[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_5_1.cs)]
 [!code-vb[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetParentRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow GetParentRow (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow GetParentRow(class System.Data.DataRelation relation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation">The <see cref="T:System.Data.DataRelation" /> to use.</param>
        <summary>Gets the parent row of a <see cref="T:System.Data.DataRow" /> using the specified <see cref="T:System.Data.DataRelation" />.</summary>
        <returns>The parent <see cref="T:System.Data.DataRow" /> of the current row.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a <xref:System.Data.DataSet>, the collection of all parent <xref:System.Data.DataRelation> objects for the data set is returned by the <xref:System.Data.DataRow.GetParentRows%2A> method.  
  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects, returned by the <xref:System.Data.DataTable.ParentRelations%2A> property.  
  
   
  
## Examples  
 The following example uses the <xref:System.Data.DataRow.GetParentRow%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  
  
 [!code-cs[Classic WebData DataRow.GetParentRow2 Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_3_1.cs)]
 [!code-vb[Classic WebData DataRow.GetParentRow2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="relation" /> does not belong to the <see cref="T:System.Data.DataTable" />.  
  
 The row is <see langword="null" />.</exception>
        <exception cref="T:System.Data.DataException">A child row has multiple parents.</exception>
        <exception cref="T:System.Data.InvalidConstraintException">This row does not belong to the child table of the <see cref="T:System.Data.DataRelation" /> object.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to a table.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetParentRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow GetParentRow (string relationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow GetParentRow(string relationName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationName">The &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />.</param>
        <summary>Gets the parent row of a <see cref="T:System.Data.DataRow" /> using the specified &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />.</summary>
        <returns>The parent <see cref="T:System.Data.DataRow" /> of the current row.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a <xref:System.Data.DataSet>, the collection of all parent <xref:System.Data.DataRelation> objects for the data set is returned by the <xref:System.Data.DataRow.GetParentRows%2A> method.  
  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects, returned by the <xref:System.Data.DataTable.ParentRelations%2A> property.  
  
   
  
## Examples  
 The following example uses the GetParentRow to print a value from each parent row of each <xref:System.Data.DataRow> in a <xref:System.Data.DataTable>.  
  
 [!code-cs[Classic WebData DataRow.GetParentRow Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_4_1.cs)]
 [!code-vb[Classic WebData DataRow.GetParentRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The relation and row do not belong to the same table.</exception>
        <exception cref="T:System.Data.DataException">A child row has multiple parents.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetParentRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow GetParentRow (System.Data.DataRelation relation, System.Data.DataRowVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow GetParentRow(class System.Data.DataRelation relation, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="relation">The <see cref="T:System.Data.DataRelation" /> to use.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values specifying the version of the data to get.</param>
        <summary>Gets the parent row of a <see cref="T:System.Data.DataRow" /> using the specified <see cref="T:System.Data.DataRelation" />, and <see cref="T:System.Data.DataRowVersion" />.</summary>
        <returns>The parent <see cref="T:System.Data.DataRow" /> of the current row.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a <xref:System.Data.DataSet>, the collection of all parent <xref:System.Data.DataRelation> objects for the data set is returned by the <xref:System.Data.DataRow.GetParentRows%2A> method.  
  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects, returned by the <xref:System.Data.DataTable.ParentRelations%2A> property.  
  
 Use the <xref:System.Data.DataRow.HasVersion%2A> property to determine whether the <xref:System.Data.DataRowVersion> that you want exists.  
  
   
  
## Examples  
 The following example uses the <xref:System.Data.DataRow.GetParentRow%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  
  
 [!code-vb[Classic WebData DataRow.GetParentRow3 Example#1](~/add/codesnippet/visualbasic/a16d1012-4e05-4bd8-9275-_1.vb)]
 [!code-cs[Classic WebData DataRow.GetParentRow3 Example#1](~/add/codesnippet/csharp/a16d1012-4e05-4bd8-9275-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The row is <see langword="null" />.  
  
 The <paramref name="relation" /> does not belong to this table's parent relations.</exception>
        <exception cref="T:System.Data.DataException">A child row has multiple parents.</exception>
        <exception cref="T:System.Data.InvalidConstraintException">The relation's child table is not the table the row belongs to.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to a table.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have this version of data.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetParentRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow GetParentRow (string relationName, System.Data.DataRowVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow GetParentRow(string relationName, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="relationName">The &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values.</param>
        <summary>Gets the parent row of a <see cref="T:System.Data.DataRow" /> using the specified &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />, and <see cref="T:System.Data.DataRowVersion" />.</summary>
        <returns>The parent <see cref="T:System.Data.DataRow" /> of the current row.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a <xref:System.Data.DataSet>, the collection of all parent <xref:System.Data.DataRelation> objects for the data set is returned by the <xref:System.Data.DataRow.GetParentRows%2A> method.  
  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects, returned by the <xref:System.Data.DataTable.ParentRelations%2A> property.  
  
 Use the <xref:System.Data.DataRow.HasVersion%2A> property to determine whether the <xref:System.Data.DataRowVersion> that you want exists.  
  
   
  
## Examples  
 The following example uses the <xref:System.Data.DataRow.GetParentRow%2A> to print a value from each parent row of each <xref:System.Data.DataRow> in a <xref:System.Data.DataTable>.  
  
 [!code-vb[Classic WebData DataRow.GetParentRow1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_7_1.vb)]
 [!code-cs[Classic WebData DataRow.GetParentRow1 Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_7_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The relation and row do not belong to the same table.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="relation" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Data.DataException">A child row has multiple parents.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have the requested <see cref="T:System.Data.DataRowVersion" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetParentRows">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetParentRows (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetParentRows(class System.Data.DataRelation relation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation">The <see cref="T:System.Data.DataRelation" /> to use.</param>
        <summary>Gets the parent rows of a <see cref="T:System.Data.DataRow" /> using the specified <see cref="T:System.Data.DataRelation" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataRow" /> objects or an array of length zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a <xref:System.Data.DataSet>, the collection of all parent <xref:System.Data.DataRelation> objects for the data set is returned by the <xref:System.Data.DataRow.GetParentRows%2A> method.  
  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects, returned by the <xref:System.Data.DataTable.ParentRelations%2A> property.  
  
   
  
## Examples  
 The following example uses the <xref:System.Data.DataRow.GetParentRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  
  
 [!code-vb[Classic WebData DataRow.GetParentRows2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Data.DataRelation" /> does not belong to this row's <see cref="T:System.Data.DataSet" />.</exception>
        <exception cref="T:System.ArgumentNullException">The row is <see langword="null" />.</exception>
        <exception cref="T:System.Data.InvalidConstraintException">The relation's child table is not the table the row belongs to.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to a <see cref="T:System.Data.DataTable" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetParentRows">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetParentRows (string relationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetParentRows(string relationName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationName">The &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />.</param>
        <summary>Gets the parent rows of a <see cref="T:System.Data.DataRow" /> using the specified &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataRow" /> objects or an array of length zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a <xref:System.Data.DataSet>, the collection of all parent <xref:System.Data.DataRelation> objects for the data set is returned by the GetParentRows method.  
  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects, returned by the <xref:System.Data.DataTable.ParentRelations%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The relation and row do not belong to the same table.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetParentRows">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetParentRows (System.Data.DataRelation relation, System.Data.DataRowVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetParentRows(class System.Data.DataRelation relation, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="relation">The <see cref="T:System.Data.DataRelation" /> to use.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values specifying the version of the data to get.</param>
        <summary>Gets the parent rows of a <see cref="T:System.Data.DataRow" /> using the specified <see cref="T:System.Data.DataRelation" />, and <see cref="T:System.Data.DataRowVersion" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataRow" /> objects or an array of length zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a <xref:System.Data.DataSet>, the collection of all parent <xref:System.Data.DataRelation> objects for the data set is returned by the <xref:System.Data.DataRow.GetParentRows%2A> method.  
  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects, returned by the <xref:System.Data.DataTable.ParentRelations%2A> property.  
  
 Use the <xref:System.Data.DataRow.HasVersion%2A> property to determine whether the <xref:System.Data.DataRowVersion> that you want exists.  
  
   
  
## Examples  
 The following example uses the <xref:System.Data.DataRow.GetParentRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  
  
 [!code-vb[Classic WebData DataRow.GetParentRows3 Example#1](~/add/codesnippet/visualbasic/14f3e3ca-84f4-434d-94fa-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Data.DataRelation" /> does not belong to this row's <see cref="T:System.Data.DataSet" />.</exception>
        <exception cref="T:System.ArgumentNullException">The row is <see langword="null" />.</exception>
        <exception cref="T:System.Data.InvalidConstraintException">The relation's child table is not the table the row belongs to.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to a <see cref="T:System.Data.DataTable" />.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have the requested <see cref="T:System.Data.DataRowVersion" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetParentRows">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetParentRows (string relationName, System.Data.DataRowVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetParentRows(string relationName, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="relationName">The &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values specifying the version of the data to get. Possible values are <see langword="Default" />, <see langword="Original" />, <see langword="Current" />, and <see langword="Proposed" />.</param>
        <summary>Gets the parent rows of a <see cref="T:System.Data.DataRow" /> using the specified &lt;xref:System.Data.DataRelation.RelationName%2A&gt; of a <see cref="T:System.Data.DataRelation" />, and <see cref="T:System.Data.DataRowVersion" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataRow" /> objects or an array of length zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a <xref:System.Data.DataSet>, the collection of all parent <xref:System.Data.DataRelation> objects for the data set is returned by the <xref:System.Data.DataRow.GetParentRows%2A> method.  
  
 The <xref:System.Data.DataTable> also contains a collection of <xref:System.Data.DataRelation> objects, returned by the <xref:System.Data.DataTable.ParentRelations%2A> property.  
  
 Use the <xref:System.Data.DataRow.HasVersion%2A> property to determine whether the <xref:System.Data.DataRowVersion> that you want exists.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The relation and row do not belong to the same table.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="relation" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have the requested <see cref="T:System.Data.DataRowVersion" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether there are errors in a row.</summary>
        <value>
          <see langword="true" /> if the row contains an error; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HasErrors` returns `true` if any <xref:System.Data.DataColumn> object in the row contains an error, or if the <xref:System.Data.DataRow.RowError%2A> property of the <xref:System.Data.DataRow> is not an empty string.  
  
 When validating data, you can set an error on any column in a row. Such a column, when displayed in the <xref:System.Windows.Forms.DataGrid?displayProperty=fullName> control, is marked with a red exclamation point to signal to the user that the column is in error.  
  
 Use <xref:System.Data.DataRow.SetColumnError%2A> to set an error on any column.  
  
 Use the <xref:System.Data.DataRow.GetColumnError%2A> and `GetColumnsInError` methods to return columns with errors.  
  
 The <xref:System.Data.DataRow.ClearErrors%2A> method clears all errors for the row.  
  
   
  
## Examples  
 The following example uses the HasErrors to look for errors. If the row has errors, the <xref:System.Data.DataRow.GetColumnsInError%2A> method returns the array of columns with errors that can then be resolved. The <xref:System.Data.DataRow.ClearErrors%2A> method is then called to clear all errors.  
  
 [!code-cs[Classic WebData DataRow.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ha_1.cs)]
 [!code-vb[Classic WebData DataRow.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ha_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasVersion">
      <MemberSignature Language="C#" Value="public bool HasVersion (System.Data.DataRowVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasVersion(valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values that specifies the row version.</param>
        <summary>Gets a value that indicates whether a specified version exists.</summary>
        <returns>
          <see langword="true" /> if the version exists; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 See the <xref:System.Data.DataRow.BeginEdit%2A> method for more information.  
  
   
  
## Examples  
 The following example uses the HasVersion method to determine whether the current value of a column and the proposed value are the same. If so, the edit is canceled. Otherwise, the <xref:System.Data.DataRow.AcceptChanges%2A> method is called to end the edit.  
  
 [!code-vb[Classic WebData DataRow.HasVersion Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ha_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull (System.Data.DataColumn column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNull(class System.Data.DataColumn column) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
      </Parameters>
      <Docs>
        <param name="column">A <see cref="T:System.Data.DataColumn" />.</param>
        <summary>Gets a value that indicates whether the specified <see cref="T:System.Data.DataColumn" /> contains a null value.</summary>
        <returns>
          <see langword="true" /> if the column contains a null value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example prints each column of each row in each table of a <xref:System.Data.DataSet>. If the row is set to a null value, the value is not printed.  
  
 [!code-vb[Classic WebData DataRow.IsNull2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.is_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNull(int32 columnIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The zero-based index of the column.</param>
        <summary>Gets a value that indicates whether the column at the specified index contains a null value.</summary>
        <returns>
          <see langword="true" /> if the column contains a null value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example changes the value of a column to a null value, and then uses the IsNull method to determine whether the value is null.  
  
 [!code-vb[Classic WebData DataRow.IsNull Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.is_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNull(string columnName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">The name of the column.</param>
        <summary>Gets a value that indicates whether the named column contains a null value.</summary>
        <returns>
          <see langword="true" /> if the column contains a null value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example changes the value of a column to a null value, and then uses the <xref:System.Data.DataRow.IsNull%2A> method to determine whether the value is null.  
  
 [!code-vb[Classic WebData DataRow.IsNull1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.is_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull (System.Data.DataColumn column, System.Data.DataRowVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNull(class System.Data.DataColumn column, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="column">A <see cref="T:System.Data.DataColumn" />.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values that specifies the row version. Possible values are <see langword="Default" />, <see langword="Original" />, <see langword="Current" />, and <see langword="Proposed" />.</param>
        <summary>Gets a value that indicates whether the specified <see cref="T:System.Data.DataColumn" /> and <see cref="T:System.Data.DataRowVersion" /> contains a null value.</summary>
        <returns>
          <see langword="true" /> if the column contains a null value; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[System.Data.DataColumn column] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(class System.Data.DataColumn)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
      </Parameters>
      <Docs>
        <param name="column">A <see cref="T:System.Data.DataColumn" /> that contains the data.</param>
        <summary>Gets or sets the data stored in the specified <see cref="T:System.Data.DataColumn" />.</summary>
        <value>An &lt;xref:System.Object&gt; that contains the data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set the property, an exception is generated if an exception occurs in the <xref:System.Data.DataTable.ColumnChanging> event.  
  
 If this is an immediate edit, see <xref:System.Data.DataRow.EndEdit%2A> for the exceptions that can be generated.  
  
   
  
## Examples  
 The following examples demonstrate the use of the <xref:System.Data.DataRow.Item%2A> property to get and set the value of a specific column index. The first example gets the value of the first column in any row that a user clicks in a <xref:System.Windows.Forms.DataGrid> control. The second sets a value passed as an argument to the method.  
  
 [!code-vb[Classic WebData DataRow.this2 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column does not belong to this table.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="column" /> is null.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">An attempt was made to set a value on a deleted row.</exception>
        <exception cref="T:System.InvalidCastException">The data types of the value and the column do not match.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int columnIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The zero-based index of the column.</param>
        <summary>Gets or sets the data stored in the column specified by index.</summary>
        <value>An &lt;xref:System.Object&gt; that contains the data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set the property, an exception is generated if an exception occurs in the <xref:System.Data.DataTable.ColumnChanging> event.  
  
 If this is an edit, see <xref:System.Data.DataRow.EndEdit%2A> for the exceptions that can be generated.  
  
   
  
## Examples  
 The following examples demonstrate the use of the Item property to get and set the value of a specific column index. The first example gets the value of the first column in any row that a user clicks in a <xref:System.Windows.Forms.DataGrid> control.  
  
 [!code-vb[Classic WebData DataRow.this Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_0_1.vb)]
 [!code-cs[Classic WebData DataRow.this Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Occurs when you try to set a value on a deleted row.</exception>
        <exception cref="T:System.IndexOutOfRangeException">The <paramref name="columnIndex" /> argument is out of range.</exception>
        <exception cref="T:System.InvalidCastException">Occurs when you set the value and the new value's &lt;xref:System.Type&gt; does not match &lt;xref:System.Data.DataColumn.DataType%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string columnName] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">The name of the column.</param>
        <summary>Gets or sets the data stored in the column specified by name.</summary>
        <value>An &lt;xref:System.Object&gt; that contains the data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set the property, an exception is generated if an exception occurs in the <xref:System.Data.DataTable.ColumnChanging> event.  
  
 If this is an immediate edit, see <xref:System.Data.DataRow.EndEdit%2A> for the exceptions that can be generated.  
  
   
  
## Examples  
 The following examples demonstrate the use of the <xref:System.Data.DataRow.Item%2A> property to get and set the value of a specific column index. The first example gets the value of the first column in any row that a user clicks in a <xref:System.Windows.Forms.DataGrid> control. The second sets a value passed as an argument to the method.  
  
 [!code-vb[Classic WebData DataRow.this1 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_2_1.vb)]
 [!code-cs[Classic WebData DataRow.this1 Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column specified by <paramref name="columnName" /> cannot be found.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">Occurs when you try to set a value on a deleted row.</exception>
        <exception cref="T:System.InvalidCastException">Occurs when you set a value and its &lt;xref:System.Type&gt; does not match &lt;xref:System.Data.DataColumn.DataType%2A&gt;.</exception>
        <exception cref="T:System.Data.NoNullAllowedException">Occurs when you try to insert a null value into a column where &lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt; is set to <see langword="false" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[System.Data.DataColumn column, System.Data.DataRowVersion version] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(class System.Data.DataColumn, valuetype System.Data.DataRowVersion)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="column">A <see cref="T:System.Data.DataColumn" /> that contains information about the column.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values that specifies the row version that you want. Possible values are <see langword="Default" />, <see langword="Original" />, <see langword="Current" />, and <see langword="Proposed" />.</param>
        <summary>Gets the specified version of data stored in the specified <see cref="T:System.Data.DataColumn" />.</summary>
        <value>An &lt;xref:System.Object&gt; that contains the data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `version` should not be confused with the <xref:System.Data.DataRow.RowState%2A> property. The `version` argument describes the state of the data that is contained by the column relative to the column's original value.  
  
 When you set the property, an exception is generated if an exception occurs in the <xref:System.Data.DataTable.ColumnChanging> event.  
  
 If this is an immediate edit, see <xref:System.Data.DataRow.EndEdit%2A> for the exceptions that can be generated.  
  
   
  
## Examples  
 The following example gets the current value of a clicked cell in the <xref:System.Windows.Forms.DataGrid> control.  
  
 [!code-cs[Classic WebData DataRow.this5 Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_6_1.cs)]
 [!code-vb[Classic WebData DataRow.this5 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column does not belong to the table.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="column" /> argument contains null.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have this version of data.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int columnIndex, System.Data.DataRowVersion version] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32, valuetype System.Data.DataRowVersion)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The zero-based index of the column.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values that specifies the row version that you want. Possible values are <see langword="Default" />, <see langword="Original" />, <see langword="Current" />, and <see langword="Proposed" />.</param>
        <summary>Gets the data stored in the column, specified by index and version of the data to retrieve.</summary>
        <value>An &lt;xref:System.Object&gt; that contains the data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can only create or update a row after you call the <xref:System.Data.DataRow.BeginEdit%2A> method; similarly, the <xref:System.Data.DataRow.EndEdit%2A> method must be called to commit the edit. After you call the <xref:System.Data.DataRow.EndEdit%2A> method, and before you call the <xref:System.Data.DataRow.AcceptChanges%2A> method, internal representations of the original and new proposed values are stored. Therefore, until you call the <xref:System.Data.DataRow.AcceptChanges%2A>, you can use the `version` argument to specify which version of a column's value you need, either the `DataRowVersion.Original` or `DataRowVersion.Proposed`. However, as soon as you call the <xref:System.Data.DataRow.AcceptChanges%2A> method, the version of the column reverts to `DataRowVersion.Original`. If the row is new, you can also pass `DataRowVersion.Default` for the parameter to retrieve the column's default value. When passing `DataRowVersion.Current`, the property returns the current value, whatever its version may be.  
  
> [!NOTE]
>  The <xref:System.Data.DataRow.BeginEdit%2A> method is called implicitly when you change the value of a data-bound control or when a <xref:System.Data.DataRow> object is added to the <xref:System.Data.DataRowCollection>; the <xref:System.Data.DataRow.EndEdit%2A> method is called implicitly when you call the following methods: the <xref:System.Data.DataRow.AcceptChanges%2A> method of the <xref:System.Data.DataRow> object, the <xref:System.Data.DataTable.AcceptChanges%2A> method of the <xref:System.Data.DataTable> object, or the <xref:System.Data.DataRow.CancelEdit%2A> method.  
  
 By contrast, the <xref:System.Data.DataRowVersion> enumeration `Current` returns the version of the data after the <xref:System.Data.DataRow.EndEdit%2A> method has been called.  
  
 The `version` argument should not be confused with the <xref:System.Data.DataRow.RowState%2A> property. The `version` argument describes the state of the data that is contained by the column relative to the column's original value. The <xref:System.Data.DataRow.RowState%2A> property describes the state of the whole row relative to its parent <xref:System.Data.DataTable>.  
  
 When you set the property, an exception is generated if an exception occurs in the <xref:System.Data.DataTable.ColumnChanging> event.  
  
 If this is an immediate edit, see <xref:System.Data.DataRow.EndEdit%2A> for the exceptions that can be generated.  
  
   
  
## Examples  
 The following example gets the current value of a column through the <xref:System.Data.DataRow.Item%2A> property of the <xref:System.Data.DataRow> object.  
  
 [!code-vb[Classic WebData DataRow.this3 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">The <paramref name="columnIndex" /> argument is out of range.</exception>
        <exception cref="T:System.InvalidCastException">The data types of the value and the column do not match.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have this version of data.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">An attempt was made to set a value on a deleted row.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string columnName, System.Data.DataRowVersion version] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string, valuetype System.Data.DataRowVersion)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <param name="columnName">The name of the column.</param>
        <param name="version">One of the <see cref="T:System.Data.DataRowVersion" /> values that specifies the row version that you want. Possible values are <see langword="Default" />, <see langword="Original" />, <see langword="Current" />, and <see langword="Proposed" />.</param>
        <summary>Gets the specified version of data stored in the named column.</summary>
        <value>An &lt;xref:System.Object&gt; that contains the data.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The version should not be confused with the <xref:System.Data.DataRow.RowState%2A> property. The `version` argument describes the state of the data that is contained by the column relative to the column's original value. The <xref:System.Data.DataRow.RowState%2A> property describes the state of the whole row relative to its parent <xref:System.Data.DataTable>.  
  
 When you set the property, an exception is generated if an exception occurs in the <xref:System.Data.DataTable.ColumnChanging> event.  
  
 If this is an immediate edit, see <xref:System.Data.DataRow.EndEdit%2A> for the exceptions that can be generated.  
  
   
  
## Examples  
 The following example gets the current version of data at a clicked cell of a <xref:System.Windows.Forms.DataGrid> control.  
  
 [!code-vb[Classic WebData DataRow.this4 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_5_1.vb)]
 [!code-cs[Classic WebData DataRow.this4 Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The column specified by <paramref name="columnName" /> cannot be found.</exception>
        <exception cref="T:System.InvalidCastException">The data types of the value and the column do not match.</exception>
        <exception cref="T:System.Data.VersionNotFoundException">The row does not have this version of data.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">The row was deleted.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ItemArray">
      <MemberSignature Language="C#" Value="public object[] ItemArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object[] ItemArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets all the values for this row through an array.</summary>
        <value>An array of type &lt;xref:System.Object&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this property to set or get values for this row through an array. If you use this property to set values, the array must have the same size and ordering as the column collection. Passing `null` in the ItemArray indicates that no value was specified.  
  
 Users can generate exceptions in the <xref:System.Data.DataTable.ColumnChanging> event or the <xref:System.Data.DataTable.RowChanging> event.  
  
   
  
## Examples  
 The following examples show how to get and set values using the ItemArray property.  
  
 [!code-vb[Classic WebData DataRow.ItemArray Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_1_1.vb)]
 [!code-cs[Classic WebData DataRow.ItemArray Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The array is larger than the number of columns in the table.</exception>
        <exception cref="T:System.InvalidCastException">A value in the array does not match its &lt;xref:System.Data.DataColumn.DataType%2A&gt; in its respective <see cref="T:System.Data.DataColumn" />.</exception>
        <exception cref="T:System.Data.ConstraintException">An edit broke a constraint.</exception>
        <exception cref="T:System.Data.ReadOnlyException">An edit tried to change the value of a read-only column.</exception>
        <exception cref="T:System.Data.NoNullAllowedException">An edit tried to put a null value in a column where &lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt; of the <see cref="T:System.Data.DataColumn" /> object is <see langword="false" />.</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">The row has been deleted.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RejectChanges() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rejects all changes made to the row since &lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; was last called.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you call the RejectChanges method, the <xref:System.Data.DataRow.CancelEdit%2A> method is implicitly called to cancel any edits. If <xref:System.Data.DataRow.RowState%2A> is deleted or modified, the row reverts to its previous values, and <xref:System.Data.DataRow.RowState%2A> becomes unchanged. If the <xref:System.Data.DataRow.RowState%2A> is added, the row is removed.  
  
   
  
## Examples  
 The following example creates a simple <xref:System.Data.DataTable> with 2 columns and 10 rows. After several <xref:System.Data.DataRow> items are deleted with the <xref:System.Data.DataRow.Delete%2A> method, one of the rows is undeleted by invoking RejectChanges.  
  
 [!code-vb[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.re_1.vb)]
 [!code-cs[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/csharp/m-system.data.datarow.re_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.RowNotInTableException">The row does not belong to the table.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowError">
      <MemberSignature Language="C#" Value="public string RowError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RowError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom error description for a row.</summary>
        <value>The text describing an error.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uses the <xref:System.Data.DataRow.HasErrors%2A> property to first determine whether a <xref:System.Data.DataRow> contains errors.  
  
   
  
## Examples  
 The following example sets error text for ten rows of a table displayed in a <xref:System.Windows.Forms.DataGrid> control.  
  
 [!code-cs[Classic WebData DataRow.RowError Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ro_1_1.cs)]
 [!code-vb[Classic WebData DataRow.RowError Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ro_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RowState">
      <MemberSignature Language="C#" Value="public System.Data.DataRowState RowState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataRowState RowState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current state of the row with regard to its relationship to the <see cref="T:System.Data.DataRowCollection" />.</summary>
        <value>One of the <see cref="T:System.Data.DataRowState" /> values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the RowState depends on two factors: the kind of operation has been performed on the row, and whether <xref:System.Data.DataRow.AcceptChanges%2A> has been called on the <xref:System.Data.DataRow>.  
  
   
  
## Examples  
 The following example first creates a new <xref:System.Data.DataTable> with one column, and then creates a single <xref:System.Data.DataRow>. As the <xref:System.Data.DataRow> is created, added, modified, and deleted, its RowState is printed.  
  
 [!code-vb[Classic WebData DataRow.RowState Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ro_0_1.vb)]
 [!code-cs[Classic WebData DataRow.RowState Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ro_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetAdded">
      <MemberSignature Language="C#" Value="public void SetAdded ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAdded() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Changes the &lt;xref:System.Data.DataRow.Rowstate%2A&gt; of a <see cref="T:System.Data.DataRow" /> to <see langword="Added" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Changes the <xref:System.Data.DataRow.RowState%2A> of a <xref:System.Data.DataRow> to `Added`. If the current row is not in either an `Unchanged` or an `Added` state, it throws an <xref:System.InvalidOperationException> with the message that `SetAdded` can only be invoked on a `DataRow` instance where the `RowState` is `Unchanged`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetColumnError">
      <MemberSignature Language="C#" Value="public void SetColumnError (System.Data.DataColumn column, string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColumnError(class System.Data.DataColumn column, string error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">The <see cref="T:System.Data.DataColumn" /> to set the error description for.</param>
        <param name="error">The error description.</param>
        <summary>Sets the error description for a column specified as a <see cref="T:System.Data.DataColumn" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To examine error descriptions, use the <xref:System.Data.DataRow.GetColumnError%2A> method.  
  
 To determine whether any errors exist for the columns collection, use the <xref:System.Data.DataRow.HasErrors%2A> property. Consequently, you can use the <xref:System.Data.DataRow.GetColumnsInError%2A> method to retrieve all the columns with errors.  
  
 If `null` or an empty string is passed in as the `error` parameter, the <xref:System.Data.DataRow> behaves as if no error was set and the <xref:System.Data.DataRow.HasErrors%2A> property will return false.  
  
 To set a custom error description on the whole row, use the <xref:System.Data.DataRow.RowError%2A> property.  
  
 To determine whether any errors exist for the columns collection, use the <xref:System.Data.DataRow.HasErrors%2A> method.  
  
 To clear all errors for the columns collection, use the <xref:System.Data.DataRow.ClearErrors%2A> method.  
  
   
  
## Examples  
 The following example sets an error description for a specified <xref:System.Data.DataRow>.  
  
 [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.se_3_1.cs)]
 [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetColumnError">
      <MemberSignature Language="C#" Value="public void SetColumnError (int columnIndex, string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColumnError(int32 columnIndex, string error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The zero-based index of the column.</param>
        <param name="error">The error description.</param>
        <summary>Sets the error description for a column specified by index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The method is used to set custom error descriptions on specified columns. You can use the <xref:System.Windows.Forms.ErrorProvider> control to display the text of the error.  
  
 To examine error descriptions, use the <xref:System.Data.DataRow.GetColumnError%2A> method.  
  
 To determine whether any errors exist for the columns collection, use the <xref:System.Data.DataRow.HasErrors%2A> property. Consequently, you can use the <xref:System.Data.DataRow.GetColumnsInError%2A> method to retrieve all the columns with errors.  
  
 If `null` or an empty string is passed in as the `error` parameter, the <xref:System.Data.DataRow> behaves as if no error was set and the <xref:System.Data.DataRow.HasErrors%2A> property will return false.  
  
 To set a custom error description on the whole row, use the <xref:System.Data.DataRow.RowError%2A> property.  
  
 To clear all errors for the columns collection, use the <xref:System.Data.DataRow.ClearErrors%2A> method.  
  
 To set error text that applies to a whole row, set the <xref:System.Data.DataRow.RowError%2A> property.  
  
   
  
## Examples  
 The following example sets an error description for a specified <xref:System.Data.DataRow>.  
  
 [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.se_0_1.cs)]
 [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">The <paramref name="columnIndex" /> argument is out of range</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetColumnError">
      <MemberSignature Language="C#" Value="public void SetColumnError (string columnName, string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColumnError(string columnName, string error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">The name of the column.</param>
        <param name="error">The error description.</param>
        <summary>Sets the error description for a column specified by name.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The name of a column is set with the <xref:System.Data.DataColumn.ColumnName%2A> property of the <xref:System.Data.DataColumn> class.  
  
 To examine error descriptions, use the <xref:System.Data.DataRow.GetColumnError%2A> method.  
  
 To determine whether any errors exist for the columns collection, use the <xref:System.Data.DataRow.HasErrors%2A> property. Consequently, you can use the <xref:System.Data.DataRow.GetColumnsInError%2A> method to retrieve all the columns with errors.  
  
 If `null` or an empty string is passed in as the `error` parameter, the <xref:System.Data.DataRow> behaves as if no error was set and the <xref:System.Data.DataRow.HasErrors%2A> property will return false.  
  
 To set a custom error description on the whole row, use the <xref:System.Data.DataRow.RowError%2A> property.  
  
 To determine whether any errors exist for the columns collection, use the <xref:System.Data.DataRow.HasErrors%2A> method.  
  
 To clear all errors for the columns collection, use the <xref:System.Data.DataRow.ClearErrors%2A> method.  
  
   
  
## Examples  
 The following example sets an error description for a specified <xref:System.Data.DataRow>.  
  
 [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.se_1_1.cs)]
 [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetModified">
      <MemberSignature Language="C#" Value="public void SetModified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetModified() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Changes the &lt;xref:System.Data.DataRow.Rowstate%2A&gt; of a <see cref="T:System.Data.DataRow" /> to <see langword="Modified" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Changes the <xref:System.Data.DataRow.Rowstate%2A> of a <xref:System.Data.DataRow> to `Modified`. If the current row is not in either an `Unchanged` or an `Added` state, it throws an <xref:System.InvalidOperationException> with the message that `SetModified` can only be invoked on a `DataRow` instance where the `RowState` is `Unchanged`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetNull">
      <MemberSignature Language="C#" Value="protected void SetNull (System.Data.DataColumn column);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetNull(class System.Data.DataColumn column) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
      </Parameters>
      <Docs>
        <param name="column">A <see cref="T:System.Data.DataColumn" />.</param>
        <summary>Sets the value of the specified <see cref="T:System.Data.DataColumn" /> to a null value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Data.DataRow.IsNull%2A> method to determine whether a column contains a null value.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetParentRow">
      <MemberSignature Language="C#" Value="public void SetParentRow (System.Data.DataRow parentRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParentRow(class System.Data.DataRow parentRow) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentRow" Type="System.Data.DataRow" />
      </Parameters>
      <Docs>
        <param name="parentRow">The new parent <see cref="T:System.Data.DataRow" />.</param>
        <summary>Sets the parent row of a <see cref="T:System.Data.DataRow" /> with specified new parent <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetParentRow">
      <MemberSignature Language="C#" Value="public void SetParentRow (System.Data.DataRow parentRow, System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParentRow(class System.Data.DataRow parentRow, class System.Data.DataRelation relation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentRow" Type="System.Data.DataRow" />
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="parentRow">The new parent <see cref="T:System.Data.DataRow" />.</param>
        <param name="relation">The relation <see cref="T:System.Data.DataRelation" /> to use.</param>
        <summary>Sets the parent row of a <see cref="T:System.Data.DataRow" /> with specified new parent <see cref="T:System.Data.DataRow" /> and <see cref="T:System.Data.DataRelation" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example sets the parent row of a specific child row.  
  
 [!code-vb[Classic WebData DataRow.SetParentRow1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.RowNotInTableException">One of the rows does not belong to a table</exception>
        <exception cref="T:System.ArgumentNullException">One of the rows is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The relation does not belong to the <see cref="T:System.Data.DataRelationCollection" /> of the <see cref="T:System.Data.DataSet" /> object.</exception>
        <exception cref="T:System.Data.InvalidConstraintException">The relation's child <see cref="T:System.Data.DataTable" /> is not the table this row belongs to.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable Table" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Data.DataTable" /> for which this row has a schema.</summary>
        <value>The <see cref="T:System.Data.DataTable" /> to which this row belongs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Data.DataRow> does not necessarily belong to any table's collection of rows. This behavior occurs when the <xref:System.Data.DataRow> has been created but not added to the <xref:System.Data.DataRowCollection>. If the <xref:System.Data.DataRow.RowState%2A> property returns `DataRowState.Detached`, the row is not in any collection.  
  
   
  
## Examples  
 The following example uses the Table property to return a reference to the columns collection of the <xref:System.Data.DataTable>.  
  
 [!code-cs[Classic WebData DataRow.Table Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ta_1.cs)]
 [!code-vb[Classic WebData DataRow.Table Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ta_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>