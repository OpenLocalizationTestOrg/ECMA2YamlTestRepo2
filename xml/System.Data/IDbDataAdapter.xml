<Type Name="IDbDataAdapter" FullName="System.Data.IDbDataAdapter">
  <TypeSignature Language="C#" Value="public interface IDbDataAdapter : System.Data.IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbDataAdapter implements class System.Data.IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a set of command-related properties that are used to fill the <see cref="T:System.Data.DataSet" /> and update a data source, and is implemented by .NET Framework data providers that access relational databases.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IDbDataAdapter interface inherits from the <xref:System.Data.IDataAdapter> interface and allows an object to create a DataAdapter designed for use with a relational database. The IDbDataAdapter interface and, optionally, the utility class, <xref:System.Data.Common.DbDataAdapter>, allow an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <xref:System.Data.DataSet>. For more information about DataAdapter classes, see [Populating a DataSet from a DataAdapter](~/add/includes/ajax-current-ext-md.md). For more information about implementing .NET Framework data providers, see [&#91;\<topic://cpconimplementingnetdataprovider>&#93;](http://msdn.microsoft.com/en-us/a9fa1926-071b-4c6f-997d-a16bac633852).  
  
 An application does not create an instance of the IDbDataAdapter interface directly, but creates an instance of a class that inherits IDbDataAdapter and <xref:System.Data.Common.DbDataAdapter>.  
  
 Classes that inherit IDbDataAdapter must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the IDbDataAdapter interface defines the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property, and the <xref:System.Data.Common.DbDataAdapter> interface defines a <xref:System.Data.IDataAdapter.Fill%2A> method that takes a <xref:System.Data.DataTable> as a parameter. In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property and the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method, and also defines two additional overloads of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method that take an ADO Recordset object as a parameter.  
  
   
  
## Examples  
 The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlConnection>, to select records from a data source. The filled <xref:System.Data.DataSet> is then returned. To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  
  
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.idbdataada_1.vb)]
 [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.idbdataada_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement for deleting records from the data set.</summary>
        <value>An <see cref="T:System.Data.IDbCommand" /> used during &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; to delete records in the data source for deleted rows in the data set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the DeleteCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  
  
 When DeleteCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The DeleteCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.  
  
   
  
## Examples  
 The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> properties. It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  
  
 [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.idbdataada_2_1.cs)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.idbdataada_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement used to insert new records into the data source.</summary>
        <value>An <see cref="T:System.Data.IDbCommand" /> used during &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; to insert records in the data source for new rows in the data set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the InsertCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  
  
 When InsertCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The InsertCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.  
  
> [!NOTE]
>  If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.IDbCommand> object.  
  
   
  
## Examples  
 The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties. It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  
  
 [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.idbdataada_3_1.cs)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.idbdataada_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement used to select records in the data source.</summary>
        <value>An <see cref="T:System.Data.IDbCommand" /> that is used during &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; to select records from data source for placement in the data set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When SelectCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The SelectCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.  
  
 If the SelectCommand does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.  
  
   
  
## Examples  
 The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties. It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  
  
 [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.idbdataada_0_1.cs)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.idbdataada_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement used to update records in the data source.</summary>
        <value>An <see cref="T:System.Data.IDbCommand" /> used during &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; to update records in the data source for modified rows in the data set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the UpdateCommand can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  
  
 When UpdateCommand is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned. The UpdateCommand maintains a reference to the previously created <xref:System.Data.IDbCommand> object.  
  
> [!NOTE]
>  If execution of this command returns rows, these rows are added to the <xref:System.Data.DataSet>.  
  
   
  
## Examples  
 The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> properties. It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  
  
 [!code-cs[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.idbdataada_1_1.cs)]
 [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.idbdataada_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>