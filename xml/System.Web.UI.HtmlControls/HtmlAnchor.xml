<Type Name="HtmlAnchor" FullName="System.Web.UI.HtmlControls.HtmlAnchor">
  <TypeSignature Language="C#" Value="public class HtmlAnchor : System.Web.UI.HtmlControls.HtmlContainerControl, System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HtmlAnchor extends System.Web.UI.HtmlControls.HtmlContainerControl implements class System.Web.UI.IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlControls.HtmlContainerControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerClick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Allows programmatic access to the HTML <see langword="&lt;a&gt;" /> element on the server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 There are two ways to use the HtmlAnchor class. The first is for navigation: using the <xref:System.Web.UI.HtmlControls.HtmlAnchor.HRef%2A> property to define the location of the page to link to. The second is for postback events: using the <xref:System.Web.UI.HtmlControls.HtmlAnchor.ServerClick> event to programmatically handle the user's clicking a link.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. ASP.NET provides an input request validation feature to block script and HTML in user input. Validation server controls are also provided to assess user input. For more information, see [Validation Server Control Syntax](http://msdn.microsoft.com/en-us/96d2c59e-693c-4079-9b53-b3ff0d9e9133).  
  
 For a list of initial property values for an instance of HtmlAnchor, see the <xref:System.Web.UI.HtmlControls.HtmlAnchor.%23ctor%2A> constructor.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Web.UI.HtmlControls.HtmlAnchor.ServerClick> event to display a message when the HtmlAnchor control is clicked.  
  
 [!code-cs[HtmlAnchor#1](~/add/codesnippet/csharp/t-system.web.ui.htmlcont_0_1.aspx)]
 [!code-vb[HtmlAnchor#1](~/add/codesnippet/visualbasic/t-system.web.ui.htmlcont_0_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlAnchor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control.  
  
 The following table shows the initial property value for an instance of <xref:System.Web.UI.HtmlControls.HtmlAnchor>.  
  
|Property|Initial Value|  
|--------------|-------------------|  
|<xref:System.Web.UI.HtmlControls.HtmlControl.TagName%2A>|The "a" literal string.|  
  
   
  
## Examples  
 The following code example demonstrates how to dynamically add an <xref:System.Web.UI.HtmlControls.HtmlAnchor> control to the Web Forms page.  
  
 [!code-cs[HtmlAnchorConstructor#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_12_1.aspx)]
 [!code-vb[HtmlAnchorConstructor#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_12_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether validation is performed when the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> control is clicked.</summary>
        <value>
          <see langword="true" /> if validation is performed when the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> is clicked; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, page validation is performed when an <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked. Page validation determines whether controls that are associated with a validation control on the page all pass the validation rules that are specified by the validation control.  
  
 You can specify or determine whether validation is performed on both the client and the server when an <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked by using the CausesValidation property. To prevent validation from being performed, set the CausesValidation property to false.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HRef">
      <MemberSignature Language="C#" Value="public string HRef { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL target of the link specified in the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> server control.</summary>
        <value>The URL target of the link.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to specify the URL to link to when the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked.  
  
   
  
## Examples  
 The following code example demonstrates how to use the HRef property to specify a Web page to navigate to when the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked.  
  
 [!code-vb[Classic HtmlAnchor.HRef Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_47_1.aspx)]
 [!code-cs[Classic HtmlAnchor.HRef Example#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_47_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the bookmark name defined in the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> server control.</summary>
        <value>The bookmark name.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to mark a section on a Web page with a name. This allows you to link to this section from anywhere on the same page. For example, you can provide a table of contents at the top of a page that will link directly to topics on the page.  
  
 To link to a marked section, use an <xref:System.Web.UI.HtmlControls.HtmlAnchor> control with the <xref:System.Web.UI.HtmlControls.HtmlAnchor.HRef%2A> property set to the name of the section, preceded by a # symbol (\<a HRef= "#Topic1"/>).  
  
   
  
## Examples  
 The following code example demonstrates how to use the Name property to mark different sections on the Web page, and link to them from a table of contents.  
  
 [!code-cs[Classic HtmlAnchor.Name Example#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_15_1.aspx)]
 [!code-vb[Classic HtmlAnchor.Name Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_15_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event and registers client script for generating a postback.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to override the OnPreRender method so that it always displays a <xref:System.Web.UI.HtmlControls.HtmlAnchor.Title%2A> tag in a custom <xref:System.Web.UI.HtmlControls.HtmlAnchor> server control.  
  
 [!code-vb[CustomHtmlAnchorOnPreRender#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_31_1.aspx)]
 [!code-cs[CustomHtmlAnchorOnPreRender#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_31_1.aspx)]  
  
 [!code-vb[CustomHtmlAnchorOnPreRender#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_31_2.vb)]
 [!code-cs[CustomHtmlAnchorOnPreRender#2](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_31_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnServerClick">
      <MemberSignature Language="C#" Value="protected virtual void OnServerClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnServerClick(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlAnchor.ServerClick" /> event. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlControls.HtmlAnchor.ServerClick> event is raised when the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked. This server event causes a round trip to occur from the client to the server and back.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnServerClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to declaratively specify and code an event handler for the <xref:System.Web.UI.HtmlControls.HtmlAnchor.ServerClick> event. When the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked, a message is displayed.  
  
 [!code-vb[HtmlAnchorServerClickDeclarative#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_21_1.aspx)]
 [!code-cs[HtmlAnchorServerClickDeclarative#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_21_1.aspx)]  
  
 The following code example modifies the preceding example to programmatically specify and code an event handler for the <xref:System.Web.UI.HtmlControls.HtmlAnchor.ServerClick> event.  
  
 [!code-cs[HtmlAnchorServerClick#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_21_2.aspx)]
 [!code-vb[HtmlAnchorServerClick#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_21_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The argument for the event.</param>
        <summary>Raises events for the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> control when it posts back to the server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RaisePostBackEvent method is used by the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control, when it is clicked, to raise a <xref:System.Web.UI.HtmlControls.HtmlAnchor.ServerClick> event.  
  
 This method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderAttributes">
      <MemberSignature Language="C#" Value="protected override void RenderAttributes (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderAttributes(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that contains the output stream to render on the client.</param>
        <summary>Renders the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> control's attributes to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the value of the <xref:System.Web.UI.HtmlControls.HtmlAnchor.HRef%2A> property is a malformed URL, the RenderAttributes method throws an <xref:System.Web.HttpException> exception.  
  
   
  
## Examples  
 The following code example demonstrates how to override the RenderAttributes method in a custom server control so that specific title text, accessible as a ToolTip, is always displayed for the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control.  
  
 [!code-vb[CustomHtmlAnchorRenderAttributes#1](~/add/codesnippet/visualbasic/a6e3167c-82a8-4e47-820f-_1.aspx)]
 [!code-cs[CustomHtmlAnchorRenderAttributes#1](~/add/codesnippet/csharp/a6e3167c-82a8-4e47-820f-_1.aspx)]  
  
 [!code-cs[CustomHtmlAnchorRenderAttributes#2](~/add/codesnippet/csharp/a6e3167c-82a8-4e47-820f-_2.cs)]
 [!code-vb[CustomHtmlAnchorRenderAttributes#2](~/add/codesnippet/visualbasic/a6e3167c-82a8-4e47-820f-_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The &lt;xref:System.Web.UI.HtmlControls.HtmlAnchor.HRef%2A&gt; contains a malformed URL.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ServerClick">
      <MemberSignature Language="C#" Value="public event EventHandler ServerClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ServerClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> control is clicked.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ServerClick event is raised when the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked. This server event causes a round trip to occur from the client to the server and back.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to declaratively specify and code an event handler for the ServerClick event. When the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked, a message is displayed.  
  
 [!code-vb[HtmlAnchorServerClickDeclarative#1](~/add/codesnippet/visualbasic/e-system.web.ui.htmlcont_8_1.aspx)]
 [!code-cs[HtmlAnchorServerClickDeclarative#1](~/add/codesnippet/csharp/e-system.web.ui.htmlcont_8_1.aspx)]  
  
 The following code example modifies the previous example to programmatically specify and code an event handler for the ServerClick event.  
  
 [!code-cs[HtmlAnchorServerClick#1](~/add/codesnippet/csharp/e-system.web.ui.htmlcont_8_2.aspx)]
 [!code-vb[HtmlAnchorServerClick#1](~/add/codesnippet/visualbasic/e-system.web.ui.htmlcont_8_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The event arguments.</param>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.Page.RaisePostBackEvent%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IPostBackEventHandler.RaisePostBackEvent method calls the <xref:System.Web.UI.HtmlControls.HtmlAnchor.RaisePostBackEvent%2A> method.  
  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.HtmlControls.HtmlAnchor> instance is cast to an <xref:System.Web.UI.IPostBackEventHandler> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public string Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the browser window or frame that displays the contents of the Web page that is linked to when the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> control is clicked.</summary>
        <value>The browser window or frame that displays the contents of the Web page linked to when the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> is clicked. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Target property to specify the target window or frame that displays the contents of the Web page that is linked to when the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked.  
  
> [!NOTE]
>  The Target property renders as a `target` attribute. The `target` attribute on `a` elements is not allowed in the XHTML 1.1 document type definition. Do not set the Target property if the rendered output for the <xref:System.Web.UI.HtmlControls.HtmlAnchor> must be compliant with XHTML 1.1. For more information, see [XHTML Standards in Visual Studio and ASP.NET](~/add/includes/ajax-current-ext-md.md).  
>   
>  When creating accessible Web pages, avoid using the Target property to target another window. For more information, see [NIB: ASP.NET Accessibility](http://msdn.microsoft.com/en-us/9b5f3e05-e88d-4248-a5f4-9e64850fa0ae).  
  
 The Target value must begin with a letter in the range of A to Z (case-insensitive), except for the following special values, which begin with an underscore.  
  
|Target value|Description|  
|------------------|-----------------|  
|`_blank`|Renders the content in a new window without frames.|  
|`_parent`|Renders the content in the immediate frameset parent.|  
|`_search`|Renders the content in the search pane.|  
|`_self`|Renders the content in the frame with focus.|  
|`_top`|Renders the content in the full window without frames.|  
  
> [!NOTE]
>  Check your browser documentation to determine if the `_search` value is supported.  For example, Microsoft Internet Explorer 5.0 and later support the `_search` target value.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Target property to display the page that is navigated to when the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control is clicked in a new, unframed window.  
  
 [!code-cs[Classic HtmlAnchor.Target Example#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_54_1.aspx)]
 [!code-vb[Classic HtmlAnchor.Target Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_54_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ToolTip text displayed when the mouse pointer is placed over the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> control.</summary>
        <value>The text displayed when the mouse pointer is placed over the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to provide a custom ToolTip for the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control. This text is displayed when the mouse pointer rests over the control.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Title property to provide custom text for the ToolTip.  
  
 [!code-cs[Classic HtmlAnchor.Title Example#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_81_1.aspx)]
 [!code-vb[Classic HtmlAnchor.Title Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_81_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the group of controls for which the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> control causes validation when it posts back to the server.</summary>
        <value>The group of controls for which the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> causes validation when it posts back to the server. The default is an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Validation groups allow you to assign validation controls on a page to a specific category. Each validation group can be validated independently of other validation groups on the page. Use the ValidationGroup property to specify the name of the validation group for which the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control causes validation when it posts back to the server.  
  
 The ValidationGroup property has an effect only when the value of the <xref:System.Web.UI.HtmlControls.HtmlAnchor.CausesValidation%2A> property is set to `true`. When you specify a value for the ValidationGroup property, only the validation controls that are part of the specified group are validated when the <xref:System.Web.UI.HtmlControls.HtmlAnchor> control posts back to the server. If you do not specify a value for this property and the <xref:System.Web.UI.HtmlControls.HtmlAnchor.CausesValidation%2A> property is set to `true`, all validation controls on the page that are not assigned to a validation group are validated when the control posts back to the server.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>