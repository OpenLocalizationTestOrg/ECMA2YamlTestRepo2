<Type Name="HtmlSelect" FullName="System.Web.UI.HtmlControls.HtmlSelect">
  <TypeSignature Language="C#" Value="public class HtmlSelect : System.Web.UI.HtmlControls.HtmlContainerControl, System.Web.UI.IPostBackDataHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HtmlSelect extends System.Web.UI.HtmlControls.HtmlContainerControl implements class System.Web.UI.IParserAccessor, class System.Web.UI.IPostBackDataHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlControls.HtmlContainerControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerChange")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.HtmlControls.HtmlSelectBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("Value")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Allows programmatic access to the HTML <see langword="&lt;select&gt;" /> element on the server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the HtmlSelect control to create a selection box. Specify item listings in the control by placing HTML `<option>` elements between the opening and closing `<select>` tags. Each item is represented by a <xref:System.Web.UI.WebControls.ListItem?displayProperty=fullName> object. To specify the text that is displayed for each item in the control, you can set the <xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName> property of the item, or simply place text between the opening and closing `<option>` tags. By setting the <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> property of the item, you can associate a value with the item that is different from the text. To select an item from the list by default, set the <xref:System.Web.UI.WebControls.ListItem.Selected%2A?displayProperty=fullName> property of the item to `true`.  
  
 You can control the appearance and behavior of the HtmlSelect control by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.Size%2A> and <xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A> properties. The <xref:System.Web.UI.HtmlControls.HtmlSelect.Size%2A> property specifies the height (in rows) of the control. The <xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A> property specifies whether more than one item can be concurrently selected in the HtmlSelect control.  
  
 By default, the HtmlSelect control is displayed as a drop-down list box. If you allow multiple selections (by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A> property to `true`) or specify a height greater than one row (by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.Size%2A> property to a value greater than `1`), the control is displayed as a list box.  
  
 To determine the selected item in a single-selection HtmlSelect control, use the <xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex%2A> property to get the index of the selected item. You can then use this value to retrieve the item from the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection.  
  
 To determine the selected items from an HtmlSelect control that allows multiple selections, iterate through the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection and test the <xref:System.Web.UI.WebControls.ListItem.Selected%2A?displayProperty=fullName> property of each item.  
  
 The HtmlSelect class provides two properties to support data binding. To bind data to any object that implements the <xref:System.Collections.IEnumerable?displayProperty=fullName> interface (such as <xref:System.Data.DataView?displayProperty=fullName>, <xref:System.Collections.ArrayList?displayProperty=fullName>, and <xref:System.Collections.Generic.List%601?displayProperty=fullName>), or the <xref:System.ComponentModel.IListSource> interface, use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property to specify the data source to bind to. When you set the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property, you must manually write the code to perform the data binding. To automatically bind an HtmlSelect control to a data source represented by a data source control, use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property and set its value to the <xref:System.Web.UI.Control.ID%2A> property of the data source control to use. When you set the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property, the HtmlSelect control automatically binds to the specified data source control. Therefore, you do not need to explicitly call the <xref:System.Web.UI.Control.DataBind%2A> method.  
  
 You can also specify which fields in the data source bind to the <xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName> and <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> properties of an item in the control by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataTextField%2A> and <xref:System.Web.UI.HtmlControls.HtmlSelect.DataValueField%2A> properties, respectively. If the data source contains multiple sources of data, use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataMember%2A> property to specify the specific source to bind to the control. For example, if you have a <xref:System.Data.DataSet?displayProperty=fullName> object with multiple tables, you must specify which table to bind to the control with the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataMember%2A> property.  
  
 For a list of initial property values for an instance of HtmlSelect, see the <xref:System.Web.UI.HtmlControls.HtmlSelect.%23ctor%2A> constructor.  
  
   
  
## Examples  
 The following code example demonstrates how to create an HtmlSelect control by explicitly declaring the items that appear in the control.  
  
 [!code-cs[htmlselect#1](~/add/codesnippet/csharp/t-system.web.ui.htmlcont_15_1.aspx)]
 [!code-vb[htmlselect#1](~/add/codesnippet/visualbasic/t-system.web.ui.htmlcont_15_1.aspx)]  
  
 The following code example demonstrates how to create an HtmlSelect control by binding the control to a data source.  
  
 [!code-cs[HtmlSelectDataSource#1](~/add/codesnippet/csharp/t-system.web.ui.htmlcont_15_2.aspx)]
 [!code-vb[HtmlSelectDataSource#1](~/add/codesnippet/visualbasic/t-system.web.ui.htmlcont_15_2.aspx)]  
  
 The following code example demonstrates how to use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property to specify the data source for an HtmlSelect control. The <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property is set to the <xref:System.Web.UI.Control.ID%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control used to retrieve the data. When the page is loaded, the HtmlSelect control automatically binds to the data source specified by the <xref:System.Web.UI.WebControls.SqlDataSource> control and the data is displayed to the user.  
  
 [!code-cs[HtmlSelect.DataSourceID#1](~/add/codesnippet/csharp/t-system.web.ui.htmlcont_15_3.aspx)]
 [!code-vb[HtmlSelect.DataSourceID#1](~/add/codesnippet/visualbasic/t-system.web.ui.htmlcont_15_3.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlSelect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.HtmlControls.HtmlSelect> class.  
  
 The following table shows the initial property value for an instance of <xref:System.Web.UI.HtmlControls.HtmlSelect>.  
  
|Property|Initial Value|  
|--------------|-------------------|  
|<xref:System.Web.UI.HtmlControls.HtmlControl.TagName%2A>|The "select" literal string.|  
  
   
  
## Examples  
 The following code example demonstrates how to dynamically create an instance of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control and place it on the Web page.  
  
 [!code-cs[HtmlSelectCtor#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_13_1.aspx)]
 [!code-vb[HtmlSelectCtor#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_13_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The parsed child control to add.</param>
        <summary>Adds a parsed child control to the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The AddParsedSubObject method is used by ASP.NET to add parsed child controls to the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
   
  
## Examples  
 The following code example demonstrates how to override the AddParsedSubObject method in a custom server control so that it always checks that an instance of the <xref:System.Web.UI.WebControls.ListItem> class is added to the <xref:System.Web.UI.HtmlControls.HtmlSelect> selected items collection.  
  
 [!code-cs[CustomHtmlSelectAddParsedSubObject#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_30_1.aspx)]
 [!code-vb[CustomHtmlSelectAddParsedSubObject#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_30_1.aspx)]  
  
 [!code-cs[CustomHtmlSelectAddParsedSubObject#2](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_30_2.cs)]
 [!code-vb[CustomHtmlSelectAddParsedSubObject#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_30_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The child control specified by the <paramref name="obj" /> parameter must be of the type <see cref="T:System.Web.UI.WebControls.ListItem" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="protected virtual void ClearSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearSelection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the list selection of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control and sets the &lt;xref:System.Web.UI.WebControls.ListItem.Selected%2A?displayProperty=fullName&gt; property of all items to <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ClearSelection method iterates through the <xref:System.Web.UI.WebControls.ListItemCollection> collection represented by the <xref:System.Web.UI.HtmlControls.HtmlSelect> control's <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> property and sets the <xref:System.Web.UI.WebControls.ListItem.Selected%2A> property of each <xref:System.Web.UI.WebControls.ListItem> object to `false`.  
  
   
  
## Examples  
 The following code example demonstrates how to override the ClearSelection method in a custom server control so that it always clears all selected items of an <xref:System.Web.UI.HtmlControls.HtmlSelect> collection.  
  
 [!code-cs[CustomHtmlSelectClearSelection#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_28_1.aspx)]
 [!code-vb[CustomHtmlSelectClearSelection#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_28_1.aspx)]  
  
 [!code-vb[CustomHtmlSelectClearSelection#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_28_2.vb)]
 [!code-cs[CustomHtmlSelectClearSelection#2](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_28_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an <see cref="T:System.Web.UI.EmptyControlCollection" /> object for the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <returns>A <see cref="T:System.Web.UI.ControlCollection" /> to contain the current server control's child server controls.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlControls.HtmlSelect> control does not allow child controls.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataMember">
      <MemberSignature Language="C#" Value="public virtual string DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the set of data to bind to the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control from a &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A&gt; property with multiple sets of data.</summary>
        <value>The set of data to bind to the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control from a &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A&gt; with multiple sets of data. The default value is an empty string (""), which indicates the property has not been set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property contains multiple sets of data, use the DataMember property to specify which set of data to bind to the control. For example, if you have a <xref:System.Data.DataSet?displayProperty=fullName> object with multiple tables, use this property to indicate which table to bind to the control.  
  
 After you have specified the data source to bind to the control, you can then specify which fields from the data source to bind to the <xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName> and <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> properties of each item in the control by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataTextField%2A> and <xref:System.Web.UI.HtmlControls.HtmlSelect.DataValueField%2A> properties, respectively.  
  
   
  
## Examples  
 The following code example demonstrates how to use the DataMember property to specify a set of data to bind to the <xref:System.Web.UI.HtmlControls.HtmlSelect> control from a <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property with multiple sets of data.  
  
 [!code-cs[HtmlSelectDataMember#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_31_1.aspx)]
 [!code-vb[HtmlSelectDataMember#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_31_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The DataMember property is set during the data-binding phase of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public virtual object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the source of information to bind to the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>An &lt;xref:System.Collections.IEnumerable&gt; or <see cref="T:System.ComponentModel.IListSource" /> that contains a collection of values used to supply data to this control. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DataSource property to specify the data source to bind to the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. A data source must be a collection that implements either the <xref:System.Collections.IEnumerable?displayProperty=fullName> interface (such as <xref:System.Data.DataView?displayProperty=fullName>, <xref:System.Collections.ArrayList?displayProperty=fullName>, or <xref:System.Collections.Generic.List%601?displayProperty=fullName>) or the <xref:System.ComponentModel.IListSource> interface. When you set the DataSource property, you must manually write the code to perform data binding.  
  
 If the data source contains multiple sets of data, such as a <xref:System.Data.DataSet?displayProperty=fullName> object with multiple tables, use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataMember%2A> property to specify which data set to bind to the control.  
  
 You can specify which fields from the data source to bind to the <xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName> and <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> properties of each item in the control by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataTextField%2A> and <xref:System.Web.UI.HtmlControls.HtmlSelect.DataValueField%2A> properties, respectively.  
  
 Alternately, you can use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property to automatically bind to a data source represented by a data source control. When you set the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property, the data listing control automatically binds to the specified data source control. You do not need to write code that explicitly calls the <xref:System.Web.UI.Control.DataBind%2A> method.  
  
 If values are specified for both the DataSource property and the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property, ASP.NET is not able to resolve the data source and a <xref:System.Web.HttpException?displayProperty=fullName> exception is thrown.  
  
   
  
## Examples  
 The following code example demonstrates how to use the DataSource property to specify the source of information to bind to the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 [!code-cs[HtmlSelectDataSource#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_3_1.aspx)]
 [!code-vb[HtmlSelectDataSource#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_3_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified data source is not compatible with either &lt;xref:System.Collections.IEnumerable?displayProperty=fullName&gt; or <see cref="T:System.ComponentModel.IListSource" />, and it is not <see langword="null" />.</exception>
        <exception cref="T:System.Web.HttpException">The data source cannot be resolved because a value is specified for both the DataSource property and the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataSourceID">
      <MemberSignature Language="C#" Value="public virtual string DataSourceID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSourceID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the &lt;xref:System.Web.UI.Control.ID%2A&gt; property of the data source control that the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control should use to retrieve its data source.</summary>
        <value>The programmatic identifier assigned to the data source control. The default value is an empty string (""), which indicates that the property has not been set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DataSourceID property to set or access the <xref:System.Web.UI.Control.ID%2A> property of the data source control that the <xref:System.Web.UI.HtmlControls.HtmlSelect> control should use to retrieve its data source. The data source control referenced by the DataSourceID property can be any control that implements the <xref:System.Web.UI.IDataSource> interface. The data source control must exist either in the same naming container as the <xref:System.Web.UI.HtmlControls.HtmlSelect> control that references it or in a parent control of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. When you specify a value for this property, the <xref:System.Web.UI.HtmlControls.HtmlSelect> control automatically binds to the specified data source control. You do not need to write code that explicitly calls the <xref:System.Web.UI.Control.DataBind%2A> method.  
  
 Alternately, you can use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property to specify the source of values to bind to an <xref:System.Web.UI.HtmlControls.HtmlSelect> control. The data source must be a collection that implements the <xref:System.Collections.IEnumerable?displayProperty=fullName> interface (such as <xref:System.Data.DataView?displayProperty=fullName>, <xref:System.Collections.ArrayList?displayProperty=fullName>, or <xref:System.Collections.Generic.List%601?displayProperty=fullName>) or the <xref:System.ComponentModel.IListSource> interface. When you set the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property, you must manually write the code to perform data binding.  
  
 If values are specified for both the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property and the DataSourceID property, ASP.NET is not able to resolve the data source and a <xref:System.Web.HttpException?displayProperty=fullName> exception is thrown.  
  
   
  
## Examples  
 The following code example demonstrates how to use the DataSourceID property to specify the data source for an <xref:System.Web.UI.HtmlControls.HtmlSelect> control. The DataSourceID property is set to the <xref:System.Web.UI.Control.ID%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control used to retrieve the data. When the page is loaded, the <xref:System.Web.UI.HtmlControls.HtmlSelect> control automatically binds to the data source specified by the <xref:System.Web.UI.WebControls.SqlDataSource> control and the data is displayed to the user.  
  
 [!code-cs[HtmlSelect.DataSourceID#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_75_1.aspx)]
 [!code-vb[HtmlSelect.DataSourceID#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_75_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The data source cannot be resolved because a value is specified for both the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A&gt; property and the DataSourceID property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataTextField">
      <MemberSignature Language="C#" Value="public virtual string DataTextField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataTextField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the field from the data source to bind to the &lt;xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName&gt; property of each item in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>The field from the data source to bind to the &lt;xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName&gt; property of each item in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control. The default value is an empty string (""), which indicates that the property has not been set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DataTextField property to specify which field from the data source to bind to the <xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName> property of each item in the control. This property is commonly used to provide a value for the <xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName> property that differs from the value of the <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> property.  
  
 The <xref:System.Web.UI.HtmlControls.HtmlSelect> class provides two properties for specifying the data source to bind to. The <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property allows you to bind an <xref:System.Web.UI.HtmlControls.HtmlSelect> control to any collection that implements the <xref:System.Collections.IEnumerable?displayProperty=fullName> or <xref:System.ComponentModel.IListSource?displayProperty=fullName> interfaces (such as <xref:System.Data.DataView?displayProperty=fullName>, <xref:System.Collections.ArrayList?displayProperty=fullName>, or <xref:System.Collections.Generic.List%601?displayProperty=fullName>). When you use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property to specify the data source, you must explicitly call the <xref:System.Web.UI.Control.DataBind%2A> method to bind the control and its DataTextField property to the data source.  
  
 The <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property allows you to bind an <xref:System.Web.UI.HtmlControls.HtmlSelect> control to a data source control that represents a data source. When you use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property to specify the data source, the <xref:System.Web.UI.HtmlControls.HtmlSelect> control and its DataTextField property automatically bind to the specified data source control. Therefore, you do not need to explicitly call the <xref:System.Web.UI.Control.DataBind%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> and DataTextField properties to specify the field from the data source to bind to the <xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName> property of each item in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 [!code-cs[HtmlSelectDataSource#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_58_1.aspx)]
 [!code-vb[HtmlSelectDataSource#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_58_1.aspx)]  
  
 The following code example demonstrates how to use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> and DataTextField properties to specify the field from the data source to bind to the <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> property of each item in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 [!code-cs[HtmlSelect.DataValueField2#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_58_2.aspx)]
 [!code-vb[HtmlSelect.DataValueField2#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_58_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataValueField">
      <MemberSignature Language="C#" Value="public virtual string DataValueField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataValueField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the field from the data source to bind to the &lt;xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName&gt; property of each item in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>The field from the data source to bind to the &lt;xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName&gt; property of each item in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control. The default value is an empty string (""), which indicates that the property has not been set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the DataValueField property to specify which field from the data source to bind to the <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> property of each item in the control. This property is commonly used to provide a value for the <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> property that differs from the value of the <xref:System.Web.UI.WebControls.ListItem.Text%2A?displayProperty=fullName> property.  
  
 The <xref:System.Web.UI.HtmlControls.HtmlSelect> class provides two properties for specifying the data source to bind to. The <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property allows you to bind an <xref:System.Web.UI.HtmlControls.HtmlSelect> control to any collection that implements the <xref:System.Collections.IEnumerable> or <xref:System.ComponentModel.IListSource> interfaces (such as <xref:System.Data.DataView?displayProperty=fullName>, <xref:System.Collections.ArrayList?displayProperty=fullName>, or <xref:System.Collections.Generic.List%601?displayProperty=fullName>). When you use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property to specify the data source, you must explicitly call the <xref:System.Web.UI.Control.DataBind%2A> method to bind the control and its DataValueField property to the data source.  
  
 The <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property allows you to bind an <xref:System.Web.UI.HtmlControls.HtmlSelect> control to a data source control that represents a data source. When you use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property to specify the data source, the <xref:System.Web.UI.HtmlControls.HtmlSelect> control and its DataValueField property automatically bind to the data source control. Therefore, you do not need to explicitly call the <xref:System.Web.UI.Control.DataBind%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> and DataValueField properties to specify the field from the data source to bind to the <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> property of each item in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 [!code-cs[HtmlSelectDataSource#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_50_1.aspx)]
 [!code-vb[HtmlSelectDataSource#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_50_1.aspx)]  
  
 The following code example demonstrates how to use the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> and DataValueField properties to specify the field from the data source to bind to the <xref:System.Web.UI.WebControls.ListItem.Value%2A?displayProperty=fullName> property of each item in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 [!code-cs[HtmlSelect.DataValueField2#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_50_2.aspx)]
 [!code-vb[HtmlSelect.DataValueField2#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_50_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnsureDataBound">
      <MemberSignature Language="C#" Value="protected void EnsureDataBound ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void EnsureDataBound() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verifies that the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control requires data binding and that a valid data source control is specified before calling the &lt;xref:System.Web.UI.Control.DataBind%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you specify a value for the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property, ASP.NET automatically binds the data listing control to the specified data source control. When ASP.NET performs data binding for the control, it calls the EnsureDataBound method first to verify that the control has not already been data-bound and that a valid data source control that implements the <xref:System.Web.UI.IDataSource> interface is specified for its <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property. The EnsureDataBound method then calls the <xref:System.Web.UI.Control.DataBind%2A> method to ensure that the control is data-bound immediately after the call to this method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.IEnumerable GetData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.IEnumerable GetData() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an &lt;xref:System.Collections.IEnumerable&gt; object that represents the data source that is bound to the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerable&gt; object. If no data source is specified, a default value of <see langword="null" /> is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetData method returns an <xref:System.Collections.IEnumerable> object independent of whether the data source was specified by the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property or the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property is not of type <see cref="T:System.Web.UI.IDataSource" />.  
  
 \- or -  
  
 The &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property is not of type <see cref="T:System.Web.UI.IHierarchicalDataSource" />.</exception>
        <exception cref="T:System.InvalidOperationException">Both a &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A&gt; and a &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property are defined for the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.  
  
 \- or -  
  
 The requested data view cannot be found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InnerHtml">
      <MemberSignature Language="C#" Value="public override string InnerHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerHtml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the content between the opening and closing tags of the control without automatically converting special characters to their equivalent HTML entities. This property is not supported for this control.</summary>
        <value>The content between the opening and closing tags of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Do not read from or assign a value to this property. Otherwise, a <xref:System.NotSupportedException?displayProperty=fullName> exception is thrown. This property is inherited from the <xref:System.Web.UI.HtmlControls.HtmlContainerControl> class and is not applicable to the <xref:System.Web.UI.HtmlControls.HtmlSelect> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt is made to read from or assign a value to this property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public override string InnerText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the content between the opening and closing tags of the control with automatic conversion of special characters to their equivalent HTML entities. This property is not supported for this control.</summary>
        <value>The content between the opening and closing tags of the control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Do not read from or assign a value to this property. Otherwise, a <xref:System.NotSupportedException?displayProperty=fullName> exception is thrown. This property is inherited from the <xref:System.Web.UI.HtmlControls.HtmlContainerControl> class and is not applicable to the <xref:System.Web.UI.HtmlControls.HtmlSelect> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt is made to read from or assign a value to this property.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsBoundUsingDataSourceID">
      <MemberSignature Language="C#" Value="protected bool IsBoundUsingDataSourceID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBoundUsingDataSourceID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether a &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property is defined for the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>
          <see langword="true" /> if a data source control is defined; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the length of the string representing the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property string is greater than zero, then IsBoundUsingDataSourceID returns `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ListItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ListItemCollection Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ListItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection that contains the items listed in an <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ListItemCollection" /> that contains the items listed in an <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Items collection to manage the items listed in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. You can programmatically add items to, remove items from, and insert items into the collection.  
  
 The Items collection is commonly used to iterate through the items in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. For example, when multiple items are selected, you can iterate through the Items collection to determine which items are selected.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Items collection to iterate through the items in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control and determine which items are selected.  
  
 [!code-cs[htmlselect#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_44_1.aspx)]
 [!code-vb[htmlselect#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_44_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">The key identifier for the control.</param>
        <param name="postCollection">The collection of all incoming name values.</param>
        <summary>Processes the postback data for the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control's state has changed as a result of a postback; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LoadPostData method checks whether the postback data of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control is different from its previous value, and if so, returns `true`. If the <xref:System.Web.UI.HtmlControls.HtmlSelect> control's <xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A> property is `false`, indicating a single-selection <xref:System.Web.UI.HtmlControls.HtmlSelect> control, then the LoadPostData method checks the <xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex%2A> property. If the <xref:System.Web.UI.HtmlControls.HtmlSelect> control's <xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A> property is `true`, indicating a multiple-selection <xref:System.Web.UI.HtmlControls.HtmlSelect> control, then the LoadPostData method checks the <xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndices%2A> property.  
  
 The LoadPostData method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex%2A&gt; property was set to a value greater than the number of items in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control or less than <see langword="-1" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">An &lt;xref:System.Object&gt; that represents the control state to be restored.</param>
        <summary>Restores the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control's view state information from a previous page request that was saved by the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.SaveViewState%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code. However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  
  
 The <xref:System.Web.UI.HtmlControls.HtmlSelect> control's view state is stored as a <xref:System.Web.UI.Triplet> object. The <xref:System.Web.UI.Triplet.First> field of the <xref:System.Web.UI.Triplet> object holds the <xref:System.Web.UI.HtmlControls.HtmlSelect> control's base view state. The <xref:System.Web.UI.Triplet.Second> field of the <xref:System.Web.UI.Triplet> object holds the <xref:System.Web.UI.WebControls.ListItemCollection> collection represented by the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> property. The <xref:System.Web.UI.Triplet.Third> field of the <xref:System.Web.UI.Triplet> object holds the selected indices represented by the <xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndices%2A> property. The LoadViewState method calls the base class's <xref:System.Web.UI.HtmlControls.HtmlContainerControl.LoadViewState%2A?displayProperty=fullName> method to restore the control's base view state.  
  
 The LoadViewState method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="public bool Multiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether multiple items can be selected concurrently in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>
          <see langword="true" /> if multiple items can be concurrently selected in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Multiple property to specify whether multiple items can be concurrently selected in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 By default, the <xref:System.Web.UI.HtmlControls.HtmlSelect> control is displayed as a drop-down list box. If you allow multiple selections (by setting the Multiple property to `true`) or specify a height greater than one row (by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.Size%2A> property to a value greater than `1`), the control is displayed as a list box.  
  
 To determine the selected items in an <xref:System.Web.UI.HtmlControls.HtmlSelect> control that allows multiple simultaneous selections, iterate through the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection and test the <xref:System.Web.UI.WebControls.ListItem.Selected%2A?displayProperty=fullName> property of each item.  
  
> [!NOTE]
>  The `multiple` attribute is rendered in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control only if this property is set to `true`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Multiple property to specify whether multiple items can be selected in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 [!code-vb[HtmlSelectMultiple#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_51_1.aspx)]
 [!code-cs[HtmlSelectMultiple#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_51_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the unique identifier name associated with the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>The unique identifier name associated with the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Name property to determine the unique identifier name for an <xref:System.Web.UI.HtmlControls.HtmlSelect> control. In this implementation, the `get` accessor returns the value of the <xref:System.Web.UI.Control.UniqueID%2A?displayProperty=fullName> property. However, the `set` accessor does not assign a value to this property.  
  
> [!NOTE]
>  The `set` accessor does not assign a value to this property because the Name property must have the same value as the <xref:System.Web.UI.Control.UniqueID%2A?displayProperty=fullName> property for the <xref:System.Web.UI.HtmlControls.HtmlSelect> control to work properly.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Name property of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control to select a specific item in the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> list.  
  
 [!code-vb[HtmlSelectName#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_57_1.aspx)]
 [!code-cs[HtmlSelectName#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_57_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataBinding">
      <MemberSignature Language="C#" Value="protected override void OnDataBinding (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataBinding(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.DataBinding" /> event of an <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.Control.DataBinding> event is raised when data is bound to the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. This method notifies the control to perform any data-binding logic that is associated with it. Specifically, the OnDataBinding method creates the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection from the data source specified in either the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property or the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnDataBinding method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property is not of type <see cref="T:System.Web.UI.IDataSource" />.  
  
 \- or -  
  
 The &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property is not of type <see cref="T:System.Web.UI.IHierarchicalDataSource" />.</exception>
        <exception cref="T:System.InvalidOperationException">Both a &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A&gt; and a &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property are defined for the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.  
  
 \- or -  
  
 The requested data view cannot be found.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex%2A&gt; property was set to a value greater than the number of items in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control or less than <see langword="-1" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataPropertyChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataPropertyChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked when the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A&gt;, &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataMember%2A&gt;, or &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property is changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnDataPropertyChanged method sets the <xref:System.Web.UI.HtmlControls.HtmlSelect.RequiresDataBinding%2A> property to `true` if the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A>, <xref:System.Web.UI.HtmlControls.HtmlSelect.DataMember%2A>, or <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property has changed.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">An attempt was made to change the property value during the data-binding phase of the control.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceViewChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataSourceViewChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataSourceViewChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">The source of the event.</param>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Invoked when the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A&gt;, &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataMember%2A&gt;, or &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property is changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnDataSourceViewChanged method sets the <xref:System.Web.UI.HtmlControls.HtmlSelect.RequiresDataBinding%2A> property to `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event for the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnInit method notifies the <xref:System.Web.UI.HtmlControls.HtmlSelect> control to perform any initialization steps that are required to create and set up an instance. If the <xref:System.Web.UI.Control.IsViewStateEnabled%2A> property is `false` and the <xref:System.Web.UI.Page.IsPostBack%2A> property is `true`, then the <xref:System.Web.UI.HtmlControls.HtmlSelect.RequiresDataBinding%2A> property is set to `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnLoad">
      <MemberSignature Language="C#" Value="protected override void OnLoad (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnLoad(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.Load" /> event for the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnLoad method notifies the <xref:System.Web.UI.HtmlControls.HtmlSelect> control that it should perform actions common to each HTTP request for the page it is associated with. The OnLoad method connects the <xref:System.Web.UI.HtmlControls.HtmlSelect> control to the appropriate data source specified in either the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A> property or the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property. If the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A> property is to specify the data source control that the <xref:System.Web.UI.HtmlControls.HtmlSelect> control should use to retrieve its data source, then the <xref:System.Web.UI.HtmlControls.HtmlSelect.OnDataSourceViewChanged%2A> method is set as the event handler.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The ID specified in the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property cannot be found.  
  
 \- or -  
  
 The control specified in the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property is not of the type <see cref="T:System.Web.UI.IDataSource" />.</exception>
        <exception cref="T:System.InvalidOperationException">The data source cannot be resolved because a value is specified for both the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A&gt; property and the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A&gt; property.  
  
 \- or -  
  
 The requested &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.DataMember%2A&gt; property could not be found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event for the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Web.UI.HtmlControls.HtmlSelect.Size%2A> property is greater than 1, then the OnPreRender method registers the <xref:System.Web.UI.HtmlControls.HtmlSelect> control with the <xref:System.Web.UI.Page> control as one that requires postback processing.  
  
   
  
## Examples  
 The following code example demonstrates how to override the OnPreRender method so that it allows multiple selections in a custom <xref:System.Web.UI.HtmlControls.HtmlSelect> server control.  
  
 [!code-vb[CustomHtmlSelectOnPreRender#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_15_1.aspx)]
 [!code-cs[CustomHtmlSelectOnPreRender#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_15_1.aspx)]  
  
 [!code-cs[CustomHtmlSelectOnPreRender#2](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_15_2.cs)]
 [!code-vb[CustomHtmlSelectOnPreRender#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_15_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnServerChange">
      <MemberSignature Language="C#" Value="protected virtual void OnServerChange (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnServerChange(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlSelect.ServerChange" /> event of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlControls.HtmlSelect.ServerChange> event is raised when the selected items in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control change between posts to the server.  
  
> [!NOTE]
>  This event is raised only when the user initiates a post to the server, such as by clicking a Submit button. This event does not cause a post to the server to occur.  
  
> [!NOTE]
>  The control must have view state enabled for the <xref:System.Web.UI.HtmlControls.HtmlSelect.ServerChange> event to work correctly.  
  
 You can use this event to perform data validation on the <xref:System.Web.UI.HtmlControls.HtmlSelect> control when the user changes the selection in the control.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnServerChange method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code an event handler for the <xref:System.Web.UI.HtmlControls.HtmlSelect.ServerChange> event of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. The event handler determines whether the selected items are compatible with each other.  
  
 [!code-cs[HtmlSelectOnServerChange#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_35_1.aspx)]
 [!code-vb[HtmlSelectOnServerChange#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_35_1.aspx)]  
  
 [!code-cs[HtmlSelectServerChange#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_35_2.aspx)]
 [!code-vb[HtmlSelectServerChange#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_35_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calls the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.OnServerChange%2A&gt; method to signal the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control that the state of the control has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RaisePostDataChangedEvent method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderAttributes">
      <MemberSignature Language="C#" Value="protected override void RenderAttributes (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderAttributes(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the rendered content.</param>
        <summary>Renders the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control's attributes to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RenderAttributes method renders the `name` attribute of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control directly to ensure that it has the same value as the <xref:System.Web.UI.Control.UniqueID%2A?displayProperty=fullName> property. After rendering the attribute, the RenderAttributes method calls the base class's <xref:System.Web.UI.HtmlControls.HtmlContainerControl.RenderAttributes%2A> method.  
  
 The RenderAttributes method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
   
  
## Examples  
 The following code example demonstrates how to override the RenderAttributes method in a custom server control so that specific title text is always displayed for the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 [!code-cs[CustomHtmlSelectRenderAttributes#1](~/add/codesnippet/csharp/e7c80489-6558-47d1-b117-_1.aspx)]
 [!code-vb[CustomHtmlSelectRenderAttributes#1](~/add/codesnippet/visualbasic/e7c80489-6558-47d1-b117-_1.aspx)]  
  
 [!code-cs[CustomHtmlSelectRenderAttributes#2](~/add/codesnippet/csharp/e7c80489-6558-47d1-b117-_2.cs)]
 [!code-vb[CustomHtmlSelectRenderAttributes#2](~/add/codesnippet/visualbasic/e7c80489-6558-47d1-b117-_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderChildren">
      <MemberSignature Language="C#" Value="protected override void RenderChildren (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderChildren(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the rendered content.</param>
        <summary>Renders the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control's child controls to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RenderChildren method overrides the base class's <xref:System.Web.UI.Control.RenderChildren%2A> method without calling the base method. Each of the `<option>` elements between the opening and closing `<select>` tags is rendered with a `value` attribute, a `selected` attribute if the item is selected, and its associated text.  
  
 If multiple items were selected but the <xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A> property is set to `false`, then an <xref:System.Web.HttpException> exception is thrown.  
  
   
  
## Examples  
 The following code example demonstrates how to override the RenderChildren method so that it always displays default option text in a custom <xref:System.Web.UI.HtmlControls.HtmlSelect> server control.  
  
 [!code-cs[CustomHtmlSelectRenderChildren#1](~/add/codesnippet/csharp/ca3b7cbe-0e3e-46d9-86c8-_1.aspx)]
 [!code-vb[CustomHtmlSelectRenderChildren#1](~/add/codesnippet/visualbasic/ca3b7cbe-0e3e-46d9-86c8-_1.aspx)]  
  
 [!code-cs[CustomHtmlSelectRenderChildren#2](~/add/codesnippet/csharp/ca3b7cbe-0e3e-46d9-86c8-_2.cs)]
 [!code-vb[CustomHtmlSelectRenderChildren#2](~/add/codesnippet/visualbasic/ca3b7cbe-0e3e-46d9-86c8-_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Multiple items were selected but the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A&gt; property is set to <see langword="false" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RequiresDataBinding">
      <MemberSignature Language="C#" Value="protected bool RequiresDataBinding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresDataBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control needs to bind to its specified data source.</summary>
        <value>
          <see langword="true" /> if the control needs to bind to a data source; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlControls.HtmlSelect> control uses the RequiresDataBinding property to determine whether the control needs to call the <xref:System.Web.UI.Control.DataBind%2A> method to bind to its specified data source.  
  
 Each time the `set` accessor is called on either the <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSource%2A>, <xref:System.Web.UI.HtmlControls.HtmlSelect.DataSourceID%2A>, or <xref:System.Web.UI.HtmlControls.HtmlSelect.DataMember%2A> property to change the data source after the <xref:System.Web.UI.HtmlControls.HtmlSelect.OnInit%2A> method has already been called, ASP.NET automatically sets the value of the RequiresDataBinding property to `true`. The value of the RequiresDataBinding property is also set to `true` when the <xref:System.Web.UI.HtmlControls.HtmlSelect.OnDataPropertyChanged%2A> method is invoked.  
  
 ASP.NET automatically sets the value of the RequiresDataBinding property to `false` immediately after the <xref:System.Web.UI.Control.DataBind%2A> method has been called.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves any <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control view state changes that have occurred since the page was posted back to the server.</summary>
        <returns>The &lt;xref:System.Object&gt; that contains the changes to the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> view state. If no view state is associated with the object, this method returns a null reference (<see langword="Nothing" /> in Visual Basic).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlControls.HtmlSelect> control's view state is stored as a <xref:System.Web.UI.Triplet> object. The <xref:System.Web.UI.Triplet.First> field of the <xref:System.Web.UI.Triplet> object holds the <xref:System.Web.UI.HtmlControls.HtmlSelect> control's base view state. The <xref:System.Web.UI.Triplet.Second> field of the <xref:System.Web.UI.Triplet> object holds the <xref:System.Web.UI.WebControls.ListItemCollection> collection represented by the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> property. The <xref:System.Web.UI.Triplet.Third> field of the <xref:System.Web.UI.Triplet> object holds the selected indices represented by the <xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndices%2A> property. The SaveViewState method calls the base class's <xref:System.Web.UI.Control.SaveViewState%2A?displayProperty=fullName> method to save the control's base view state.  
  
 The SaveViewState method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected virtual void Select (int[] selectedIndices);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Select(int32[] selectedIndices) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectedIndices" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="selectedIndices">An &lt;xref:System.Array&gt; of type &lt;xref:System.Int32&gt; that contains the items to select.</param>
        <summary>Selects multiple items of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control's &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A&gt; collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Select method selects multiple items of the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public virtual int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ordinal index of the selected item in an <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>The ordinal index of the selected item in an <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control. A value of <see langword="-1" /> indicates that no item is selected.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectedIndex property is commonly used to determine the index of the selected item in a single-selection <xref:System.Web.UI.HtmlControls.HtmlSelect> control. This index can then be used to retrieve the item from the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection.  
  
 If the <xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A> property is set to `true`, indicating that multiple items can be concurrently selected, the SelectedIndex property contains the index of the first selected item. To determine the selected items from an <xref:System.Web.UI.HtmlControls.HtmlSelect> control that allows multiple simultaneous selections, iterate through the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection and test the <xref:System.Web.UI.WebControls.ListItem.Selected%2A?displayProperty=fullName> property of each item.  
  
> [!CAUTION]
>  It is possible to have no item selected. If no item is selected, the SelectedIndex property contains a value of `-1`. This commonly occurs when the page first loads and an item is not selected by default. Provide code to test this value before referencing the item in the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection. Otherwise, an exception is thrown if the index is out of the range of the collection.  
  
 By default, the <xref:System.Web.UI.HtmlControls.HtmlSelect> control is displayed as a drop-down list box. If you allow multiple selections (by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A> property to `true`) or specify a height greater than one row (by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.Size%2A> property to a value greater than `1`), the control is displayed as a list box. If a drop-down list box is displayed, an item is always selected. If a list box is displayed, you can programmatically clear the selection from all items by setting the SelectedIndex property to `-1`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the SelectedIndex property to determine the index of the selected item in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. The index is then used to retrieve the selected item from the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection.  
  
 [!code-vb[HtmlSelectSingleSelect#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_20_1.aspx)]
 [!code-cs[HtmlSelectSingleSelect#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_20_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The property was set to a value greater than the number of items in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control or less than <see langword="-1" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="protected virtual int[] SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection that contains the zero-based indexes of all currently selected items in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>A collection that contains the zero-based indexes of all currently selected items in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SelectedIndices property is used by the <xref:System.Web.UI.HtmlControls.HtmlSelect> class to return a collection that contains the zero-based indexes of all currently selected items in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 Control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlSelect> class can override the SelectedIndices property to provide a custom algorithm for returning currently selected items.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ServerChange">
      <MemberSignature Language="C#" Value="public event EventHandler ServerChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ServerChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the selected items in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control change between posts to the server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ServerChange event is raised when the selected items in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control change between posts to the server.  
  
> [!NOTE]
>  The control must have view state enabled for the ServerChange event to work correctly.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to specify and code an event handler declaratively for the ServerChange event of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. The event handler determines whether the selected items are compatible with each other.  
  
 [!code-cs[HtmlSelectOnServerChange#1](~/add/codesnippet/csharp/e-system.web.ui.htmlcont_3_1.aspx)]
 [!code-vb[HtmlSelectOnServerChange#1](~/add/codesnippet/visualbasic/e-system.web.ui.htmlcont_3_1.aspx)]  
  
 The following code example demonstrates how to specify and code an event handler programmatically for the ServerChange event of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. The event handler determines whether the selected items are compatible with each other.  
  
 [!code-cs[HtmlSelectServerChange#1](~/add/codesnippet/csharp/e-system.web.ui.htmlcont_3_2.aspx)]
 [!code-vb[HtmlSelectServerChange#1](~/add/codesnippet/visualbasic/e-system.web.ui.htmlcont_3_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height (in rows) of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</summary>
        <value>The height (in rows) of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the Size property to specify the height (in rows) of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control. If you specify a size that is smaller than the number of items in the control, scroll bars are displayed to allow you to move up and down the list.  
  
 By default, the <xref:System.Web.UI.HtmlControls.HtmlSelect> control is displayed as a drop-down list box. If you allow multiple selections (by setting the <xref:System.Web.UI.HtmlControls.HtmlSelect.Multiple%2A> property to `true`) or specify a height greater than one row (by setting the Size property to a value greater than `1`), the control is displayed as a list box.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Size property to specify the height (in rows) of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 [!code-vb[HtmlSelectMultiple#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_72_1.aspx)]
 [!code-cs[HtmlSelectMultiple#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_72_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">The key identifier for the control.</param>
        <param name="postCollection">The collection of all incoming name values.</param>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.IPostBackDataHandler.LoadPostData%2A?displayProperty=fullName&gt;.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control's state has changed as a result of a postback; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.HtmlControls.HtmlSelect> instance is cast to an <xref:System.Web.UI.IPostBackDataHandler> interface.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex%2A&gt; property was set to a value greater than the number of items in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control or less than <see langword="-1" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.HtmlControls.HtmlSelect> instance is cast to an <xref:System.Web.UI.IPostBackDataHandler> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tracks view state changes to the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control so the changes can be stored in the control's <see cref="T:System.Web.UI.StateBag" /> object. This object is accessible through the &lt;xref:System.Web.UI.Control.ViewState%2A?displayProperty=fullName&gt; property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TrackViewState method persists items in the <xref:System.Web.UI.HtmlControls.HtmlSelect.Items%2A> collection of the <xref:System.Web.UI.HtmlControls.HtmlSelect> control to view state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the selected item in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control or sets the &lt;xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex%2A&gt; property of the control to the index of the first item in the list with the specified value.</summary>
        <value>The value of the selected item in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control. If no item is selected in the control, &lt;xref:System.String.Empty?displayProperty=fullName&gt; is returned.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Value property is commonly used to get the value of the item referenced by the <xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex%2A> property.  
  
> [!NOTE]
>  If no item is selected in the control, <xref:System.String.Empty?displayProperty=fullName> is returned.  
  
 If you set this property to a value, the <xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex%2A> property is updated with the index of the first item in the list that contains that value. If no matching value is found, the <xref:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex%2A> property is left unchanged.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Value property to get the value of the selected item in the <xref:System.Web.UI.HtmlControls.HtmlSelect> control.  
  
 [!code-vb[HtmlSelectSingleSelect#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_39_1.aspx)]
 [!code-cs[HtmlSelectSingleSelect#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_39_1.aspx)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The Value property was set to an item greater than the number of items in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control or less than <see langword="-1" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>