<Type Name="HtmlButton" FullName="System.Web.UI.HtmlControls.HtmlButton">
  <TypeSignature Language="C#" Value="public class HtmlButton : System.Web.UI.HtmlControls.HtmlContainerControl, System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HtmlButton extends System.Web.UI.HtmlControls.HtmlContainerControl implements class System.Web.UI.IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlControls.HtmlContainerControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerClick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Allows programmatic access to the HTML <see langword="&lt;button&gt;" /> tag on the server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `<button>` element allows Web developers to create user interface (UI) form buttons that can be composed of embedded HTML elements, including other server controls.  
  
> [!NOTE]
>  The `<button>` element is defined in the HTML 4.0 specification and is supported only in Microsoft Internet Explorer version 4.0 and later. To create UI form buttons for use in other browsers, consider using the <xref:System.Web.UI.HtmlControls.HtmlInputImage> class.  
  
 To perform a set of custom instructions when the HtmlButton control is clicked, provide a custom event handler for the <xref:System.Web.UI.HtmlControls.HtmlButton.ServerClick> event.  
  
> [!NOTE]
>  The HtmlButton control renders ECMAScript to the client browser. The client browser must have ECMAScript enabled for this control to function properly. For more information on client script, see [Client Script in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  
  
 For a list of initial property values for an instance of HtmlButton, see the <xref:System.Web.UI.HtmlControls.HtmlButton.%23ctor%2A> constructor.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. ASP.NET provides an input request validation feature to block script and HTML in user input. Validation server controls are also provided to assess user input. For more information, see [Validation Server Control Syntax](http://msdn.microsoft.com/en-us/96d2c59e-693c-4079-9b53-b3ff0d9e9133).  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Web.UI.HtmlControls.HtmlButton.ServerClick> event to display the name entered in the text box.  
  
 [!code-vb[Classic HtmlButton Example#1](~/add/codesnippet/visualbasic/t-system.web.ui.htmlcont_8_1.aspx)]
 [!code-cs[Classic HtmlButton Example#1](~/add/codesnippet/csharp/t-system.web.ui.htmlcont_8_1.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.HtmlControls.HtmlButton> control.  
  
 The following table shows the initial property value for an instance of <xref:System.Web.UI.HtmlControls.HtmlButton>.  
  
|Property|Initial value|  
|--------------|-------------------|  
|<xref:System.Web.UI.HtmlControls.HtmlControl.TagName%2A>|The "button" literal string.|  
  
   
  
## Examples  
 The following code example demonstrates how to dynamically add an <xref:System.Web.UI.HtmlControls.HtmlButton> control to the Web Forms page.  
  
 [!code-vb[HtmlButtonConstructor#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_26_1.aspx)]
 [!code-cs[HtmlButtonConstructor#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_26_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether validation is performed when the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> control is clicked.</summary>
        <value>
          <see langword="true" /> if validation is performed when the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> control is clicked; otherwise, <see langword="false" />. The default value is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, page validation is performed when an <xref:System.Web.UI.HtmlControls.HtmlButton> control is clicked. Page validation determines whether the input controls associated with a validation control on the page all pass the validation rules specified by the validation control.  
  
 You can specify or determine whether validation is performed on both the client and the server when an <xref:System.Web.UI.HtmlControls.HtmlButton> control is clicked by using the CausesValidation property. To prevent validation from being performed, set the CausesValidation property to `false`.  
  
 This property is commonly used in the event handler for the <xref:System.Web.UI.HtmlControls.HtmlButton.ServerClick> event to prevent page validation from occurring when a Cancel or Reset button is clicked.  
  
   
  
## Examples  
 The following code example demonstrates how to use the CausesValidation property to prevent page validation from occurring. Note that the <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> method activates each validation control independently.  
  
 [!code-vb[HtmlButtonCausesValidation#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_59_1.aspx)]
 [!code-cs[HtmlButtonCausesValidation#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_59_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event and registers client script for generating a postback.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnPreRender method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlButton> control.  
  
   
  
## Examples  
 The following code example demonstrates how to override the OnPreRender method in a custom server control so that it always displays the <xref:System.Web.UI.HtmlControls.HtmlButton> with bold text.  
  
 [!code-vb[CustomHtmlButtonOnPreRender#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_23_1.aspx)]
 [!code-cs[CustomHtmlButtonOnPreRender#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_23_1.aspx)]  
  
 [!code-cs[CustomHtmlButtonOnPreRender#2](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_23_2.cs)]
 [!code-vb[CustomHtmlButtonOnPreRender#2](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_23_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnServerClick">
      <MemberSignature Language="C#" Value="protected virtual void OnServerClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnServerClick(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A &lt;xref:System.EventArgs?displayProperty=fullName&gt; that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlButton.ServerClick" /> event. This allows you to provide a custom handler for the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.HtmlControls.HtmlButton.ServerClick> event is raised when the <xref:System.Web.UI.HtmlControls.HtmlButton> control is clicked. This event causes a round trip to occur from the client to the server and back. It is deliberately different from the client-side `OnClick` event. If a conflict exists between code run with a <xref:System.Web.UI.HtmlControls.HtmlButton.ServerClick> event and code run by a client-side `OnClick` event, the server-side event instructions will override the client-side code.  
  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The OnServerClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
   
  
## Examples  
 The following code example demonstrates how to declaratively specify and code an event handler for the <xref:System.Web.UI.HtmlControls.HtmlButton.ServerClick> event. When the <xref:System.Web.UI.HtmlControls.HtmlButton> control is clicked, the value entered in the text box is displayed.  
  
 [!code-vb[Classic HtmlButton Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_33_1.aspx)]
 [!code-cs[Classic HtmlButton Example#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_33_1.aspx)]  
  
 The following code example demonstrates how to programmatically specify and code an event handler for the <xref:System.Web.UI.HtmlControls.HtmlButton.ServerClick> event.  
  
 [!code-vb[HtmlButtonConstructor#1](~/add/codesnippet/visualbasic/m-system.web.ui.htmlcont_33_2.aspx)]
 [!code-cs[HtmlButtonConstructor#1](~/add/codesnippet/csharp/m-system.web.ui.htmlcont_33_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The argument for the event.</param>
        <summary>Raises events for the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> control when it posts back to the server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RaisePostBackEvent method is used by the <xref:System.Web.UI.HtmlControls.HtmlButton> control, when it is clicked, to raise a <xref:System.Web.UI.HtmlControls.HtmlButton.ServerClick> event.  
  
 If the <xref:System.Web.UI.HtmlControls.HtmlButton.CausesValidation%2A> property is `true`, the <xref:System.Web.UI.Page.Validate%2A?displayProperty=fullName> method is called using the group of controls specified in the <xref:System.Web.UI.HtmlControls.HtmlButton.ValidationGroup%2A> property.  
  
 This method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlButton> control.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RenderAttributes">
      <MemberSignature Language="C#" Value="protected override void RenderAttributes (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderAttributes(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that contains the output stream to render on the client.</param>
        <summary>Renders the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> control's attributes to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RenderAttributes method writes the `onclick` attribute of the rendered <xref:System.Web.UI.HtmlControls.HtmlButton> control, and then calls the base <xref:System.Web.UI.HtmlControls.HtmlControl.RenderAttributes%2A?displayProperty=fullName> method.  
  
 The RenderAttributes method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.HtmlControls.HtmlButton> control.  
  
   
  
## Examples  
 The following code example demonstrates how to override the RenderAttributes method in a custom server control so that a title is always displayed for the <xref:System.Web.UI.HtmlControls.HtmlButton> control.  
  
 [!code-cs[CustomHtmlButtonRenderAttributes#1](~/add/codesnippet/csharp/ea295bbf-8841-481e-ab76-_1.aspx)]
 [!code-vb[CustomHtmlButtonRenderAttributes#1](~/add/codesnippet/visualbasic/ea295bbf-8841-481e-ab76-_1.aspx)]  
  
 [!code-vb[CustomHtmlButtonRenderAttributes#2](~/add/codesnippet/visualbasic/ea295bbf-8841-481e-ab76-_2.vb)]
 [!code-cs[CustomHtmlButtonRenderAttributes#2](~/add/codesnippet/csharp/ea295bbf-8841-481e-ab76-_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ServerClick">
      <MemberSignature Language="C#" Value="public event EventHandler ServerClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ServerClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks an <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> control on the client Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ServerClick event is raised when the <xref:System.Web.UI.HtmlControls.HtmlButton> control is clicked. This server event causes a round trip to occur from the client to the server and back. It is deliberately different from the client-side `OnClick` event. If a conflict exists between code run with a ServerClick event and code run by a client-side `OnClick` event, the server-side event instructions will override the client-side code.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example demonstrates how to declaratively specify and code an event handler for the ServerClick event. When the <xref:System.Web.UI.HtmlControls.HtmlButton> control is clicked, the value entered in the text box is displayed.  
  
 [!code-vb[Classic HtmlButton Example#1](~/add/codesnippet/visualbasic/e-system.web.ui.htmlcont_0_1.aspx)]
 [!code-cs[Classic HtmlButton Example#1](~/add/codesnippet/csharp/e-system.web.ui.htmlcont_0_1.aspx)]  
  
 The following code example demonstrates how to programmatically specify and code an event handler for the ServerClick event.  
  
 [!code-vb[HtmlButtonConstructor#1](~/add/codesnippet/visualbasic/e-system.web.ui.htmlcont_0_2.aspx)]
 [!code-cs[HtmlButtonConstructor#1](~/add/codesnippet/csharp/e-system.web.ui.htmlcont_0_2.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">The event arguments.</param>
        <summary>Raises events for the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> control when it posts back to the server.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the group of controls for which the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> causes validation when it posts back to the server.</summary>
        <value>The group of controls for which the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> control causes validation when it posts back to the server. The default value is an empty string ("") indicating that this property is not set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Validation groups allow you to assign validation controls on a page to a specific category. Each validation group can be validated independently from other validation groups on the page. Use the ValidationGroup property to specify the name of the validation group for which the <xref:System.Web.UI.HtmlControls.HtmlButton> control causes validation when it posts back to the server.  
  
 This property has an effect only when the value of the <xref:System.Web.UI.HtmlControls.HtmlButton.CausesValidation%2A> property is set to `true`. When you specify a value for the ValidationGroup property, only the validation controls that are part of the specified group are validated when the <xref:System.Web.UI.HtmlControls.HtmlButton> control posts back to the server. If you do not specify a value for this property and the <xref:System.Web.UI.HtmlControls.HtmlButton.CausesValidation%2A> property is set to `true`, all validation controls on the page that are not assigned to a validation group are validated when the control posts back to the server.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ValidationGroup property to specify the controls to validate when an <xref:System.Web.UI.HtmlControls.HtmlButton> control posts back to the server. The page contains two text boxes to capture data from the user and two <xref:System.Web.UI.WebControls.RequiredFieldValidator> controls to ensure that the user does not leave a text box blank. The <xref:System.Web.UI.WebControls.RequiredFieldValidator> control for the first text box is in the `CityInfoGroup` validation group and the <xref:System.Web.UI.WebControls.RequiredFieldValidator> control for the second box is in the `StateInfoGroup` validation group. When the `CityQueryButton` is clicked, only the control in the `CityInfoGroup` validation group is validated. When the `StateQueryButton` is clicked, only the control in the `StateInfoGroup` validation group is validated.  
  
 [!code-vb[HtmlButtonValidationGroup#1](~/add/codesnippet/visualbasic/p-system.web.ui.htmlcont_34_1.aspx)]
 [!code-cs[HtmlButtonValidationGroup#1](~/add/codesnippet/csharp/p-system.web.ui.htmlcont_34_1.aspx)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>