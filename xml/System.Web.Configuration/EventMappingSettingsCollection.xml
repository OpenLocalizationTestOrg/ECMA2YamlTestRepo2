<Type Name="EventMappingSettingsCollection" FullName="System.Web.Configuration.EventMappingSettingsCollection">
  <TypeSignature Language="C#" Value="public sealed class EventMappingSettingsCollection : System.Configuration.ConfigurationElementCollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventMappingSettingsCollection extends System.Configuration.ConfigurationElementCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElementCollection</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Configuration.ConfigurationCollection(typeof(System.Web.Configuration.EventMappingSettings))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a collection of <see cref="T:System.Web.Configuration.EventMappingSettings" /> objects. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.Configuration.EventMappingSettings> class corresponds to the `eventMappings` configuration file element. The `eventMappings` element allows you to assign friendly names to event sources. These names are then used to associate event sources with the related event consumers, called providers, in the `rules` subsection of the `healthMonitoring` section of the configuration file.  
  
   
  
## Examples  
 The following code example shows how to use the EventMappingSettingsCollection type. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HealthMonitoringSection> class.  
  
 [!code-cs[System.Web.Configuration.HealthMonitoringSection#5](~/add/codesnippet/csharp/t-system.web.configurati_63_1.cs)]
 [!code-vb[System.Web.Configuration.HealthMonitoringSection#5](~/add/codesnippet/visualbasic/t-system.web.configurati_63_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventMappingSettingsCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.EventMappingSettingsCollection" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.Configuration.HealthMonitoringSection.EventMappings%2A> property of the <xref:System.Web.Configuration.HealthMonitoringSection> class always contains an instance of the <xref:System.Web.Configuration.EventMappingSettingsCollection>. Use this instance, rather than creating your own instance of the class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Web.Configuration.EventMappingSettings eventMappingSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Web.Configuration.EventMappingSettings eventMappingSettings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventMappingSettings" Type="System.Web.Configuration.EventMappingSettings" />
      </Parameters>
      <Docs>
        <param name="eventMappingSettings">An <see cref="T:System.Web.Configuration.EventMappingSettings" /> object to add to the collection.</param>
        <summary>Adds an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object to the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The collection must not already contain a <xref:System.Web.Configuration.EventMappingSettings> object with the same name.  
  
   
  
## Examples  
 The following code example shows how to use the Add method. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HealthMonitoringSection> class.  
  
 [!code-cs[System.Web.Configuration.HealthMonitoringSection#30](~/add/codesnippet/csharp/4332581a-22d7-4467-86bc-_1.cs)]
 [!code-vb[System.Web.Configuration.HealthMonitoringSection#30](~/add/codesnippet/visualbasic/4332581a-22d7-4467-86bc-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">The <see cref="T:System.Web.Configuration.EventMappingSettings" /> object to add already exists in the collection, or the collection is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:System.Web.Configuration.EventMappingSettings" /> objects from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method inserts a `clear` directive into the appropriate section of the configuration file to clear all references to elements defined in a higher-level configuration file. All elements defined in the appropriate section of the current configuration file are removed.  
  
   
  
## Examples  
 The following code example shows how to use the Clear method. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HealthMonitoringSection> class.  
  
 [!code-cs[System.Web.Configuration.HealthMonitoringSection#40](~/add/codesnippet/csharp/m-system.web.configurati_48_1.cs)]
 [!code-vb[System.Web.Configuration.HealthMonitoringSection#40](~/add/codesnippet/visualbasic/m-system.web.configurati_48_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object in the collection.</param>
        <summary>Indicates whether the collection contains an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object with the specified name.</summary>
        <returns>
          <see langword="true" /> if the collection contains an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object with the specified name; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns `false` if the specified name does not exist.  
  
   
  
## Examples  
 The following code example shows how to use the Contains method. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HealthMonitoringSection> class.  
  
 [!code-cs[System.Web.Configuration.HealthMonitoringSection#35](~/add/codesnippet/csharp/0472e0fa-e534-4c09-9f11-_1.cs)]
 [!code-vb[System.Web.Configuration.HealthMonitoringSection#35](~/add/codesnippet/visualbasic/0472e0fa-e534-4c09-9f11-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateNewElement">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationElement CreateNewElement ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Configuration.ConfigurationElement CreateNewElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementKey">
      <MemberSignature Language="C#" Value="protected override object GetElementKey (System.Configuration.ConfigurationElement element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object GetElementKey(class System.Configuration.ConfigurationElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Configuration.ConfigurationElement" />
      </Parameters>
      <Docs>
        <param name="element">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object in the collection.</param>
        <summary>Returns the index of the specified <see cref="T:System.Web.Configuration.EventMappingSettings" /> object.</summary>
        <returns>The index of the specified <see cref="T:System.Web.Configuration.EventMappingSettings" /> object, or -1 if the object is not found in the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to use the IndexOf method. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HealthMonitoringSection> class.  
  
 [!code-cs[System.Web.Configuration.HealthMonitoringSection#36](~/add/codesnippet/csharp/m-system.web.configurati_40_1.cs)]
 [!code-vb[System.Web.Configuration.HealthMonitoringSection#36](~/add/codesnippet/visualbasic/m-system.web.configurati_40_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Web.Configuration.EventMappingSettings eventMappingSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Web.Configuration.EventMappingSettings eventMappingSettings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="eventMappingSettings" Type="System.Web.Configuration.EventMappingSettings" />
      </Parameters>
      <Docs>
        <param name="index">A valid index of an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object in the collection.</param>
        <param name="eventMappingSettings">The <see cref="T:System.Web.Configuration.EventMappingSettings" /> object to insert into the collection.</param>
        <summary>Adds the specified <see cref="T:System.Web.Configuration.EventMappingSettings" /> object to the specified index point in the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the index parameter equals the number of items in the collection, then the entry is appended to the end of the collection.  
  
   
  
## Examples  
 The following code example shows how to use the Insert method. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HealthMonitoringSection> class.  
  
 [!code-cs[System.Web.Configuration.HealthMonitoringSection#33](~/add/codesnippet/csharp/53862d59-8418-4761-a93d-_1.cs)]
 [!code-vb[System.Web.Configuration.HealthMonitoringSection#33](~/add/codesnippet/visualbasic/53862d59-8418-4761-a93d-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">The <see cref="T:System.Web.Configuration.EventMappingSettings" /> object to add already exists in the collection, the index is invalid, or the collection is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.EventMappingSettings this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.EventMappingSettings Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.EventMappingSettings</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">A valid index of an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object in the collection.</param>
        <summary>Gets or sets the <see cref="T:System.Web.Configuration.EventMappingSettings" /> object at the specified index location.</summary>
        <value>The <see cref="T:System.Web.Configuration.EventMappingSettings" /> object at the specified index, or <see langword="null" /> if there is no object at that index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to use the Item method. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HealthMonitoringSection> class.  
  
 [!code-cs[System.Web.Configuration.HealthMonitoringSection#45](~/add/codesnippet/csharp/p-system.web.configurati_353_1.cs)]
 [!code-vb[System.Web.Configuration.HealthMonitoringSection#45](~/add/codesnippet/visualbasic/p-system.web.configurati_353_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.EventMappingSettings this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.EventMappingSettings Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.EventMappingSettings</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Web.Configuration.EventMappingSettings" /> object contained in the collection.</param>
        <summary>Gets the <see cref="T:System.Web.Configuration.EventMappingSettings" /> object based on the specified key in the collection.</summary>
        <value>An <see cref="T:System.Web.Configuration.EventMappingSettings" /> object.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:System.Web.Configuration.EventMappingSettings" /> to remove from the collection.</param>
        <summary>Removes an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method inserts a `remove` element into the appropriate section of the configuration file for any element defined in a higher-level configuration file. If the element is defined in the appropriate section of the current configuration file, its entry is removed from the configuration file. The object to remove must exist in the collection.  
  
   
  
## Examples  
 The following code example shows how to use the Remove method. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HealthMonitoringSection> class.  
  
 [!code-cs[System.Web.Configuration.HealthMonitoringSection#38](~/add/codesnippet/csharp/m-system.web.configurati_0_1.cs)]
 [!code-vb[System.Web.Configuration.HealthMonitoringSection#38](~/add/codesnippet/visualbasic/m-system.web.configurati_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">There is no <see cref="T:System.Web.Configuration.EventMappingSettings" /> object with the specified key in the collection, the element has already been removed, or the collection is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object in the collection.</param>
        <summary>Removes an <see cref="T:System.Web.Configuration.EventMappingSettings" /> object from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method inserts a `remove` element into the appropriate section of the configuration file for any element defined in a higher-level configuration file. If the element is defined in the appropriate section of the current configuration file, its entry is removed from the configuration file. The object to remove must exist in the collection.  
  
   
  
## Examples  
 The following code example shows how to use the RemoveAt method. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HealthMonitoringSection> class.  
  
 [!code-cs[System.Web.Configuration.HealthMonitoringSection#39](~/add/codesnippet/csharp/m-system.web.configurati_52_1.cs)]
 [!code-vb[System.Web.Configuration.HealthMonitoringSection#39](~/add/codesnippet/visualbasic/m-system.web.configurati_52_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">There is no <see cref="T:System.Web.Configuration.EventMappingSettings" /> object with the specified index in the collection, the element has already been removed, or the collection is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>