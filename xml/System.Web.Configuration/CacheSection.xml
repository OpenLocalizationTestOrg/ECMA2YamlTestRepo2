<Type Name="CacheSection" FullName="System.Web.Configuration.CacheSection">
  <TypeSignature Language="C#" Value="public sealed class CacheSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CacheSection extends System.Configuration.ConfigurationSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Configures the global cache settings for an ASP.NET application. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CacheSection class provides a way to programmatically access and modify the `<cache>` section of a configuration file.  
  
 The ASP.NET caching feature is implemented by the <xref:System.Web.Caching.Cache> class. For more information, see [Caching](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  The CacheSection can write information into the related section of the configuration file according to the restrictions defined by the section property <xref:System.Configuration.SectionInformation.AllowDefinition%2A> whose value is <xref:System.Configuration.ConfigurationAllowDefinition>. Any attempt to write in a configuration file at a level not allowed in the hierarchy will result in an error message generated by the parser. However, you can use this class to read configuration information at any level in the hierarchy.  
  
 A cache is an application-specific hash table used to store frequently accessed data. Application and session state are similar to the cache, the application state being the most similar, due to its application-wide scope. One of the biggest differences between the cache and the application-state mechanism is that the cache supports dependencies These dependencies make it possible to build applications that automatically remove cached items when certain events occur.  
  
   
  
## Examples  
 The following code example shows a page and the related code file used to  access the  CacheSection section attributes.  
  
 [!code-cs[System.Web.Configuration.CacheSection#11](~/add/codesnippet/csharp/t-system.web.configurati_81_1.aspx)]
 [!code-vb[System.Web.Configuration.CacheSection#11](~/add/codesnippet/visualbasic/t-system.web.configurati_81_1.aspx)]  
  
 [!code-vb[System.Web.Configuration.CacheSection#1](~/add/codesnippet/visualbasic/t-system.web.configurati_81_2.vb)]
 [!code-cs[System.Web.Configuration.CacheSection#1](~/add/codesnippet/csharp/t-system.web.configurati_81_2.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.CacheSection" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CacheSection constructor is not intended to be used directly from your code. It is called by the ASP.NET configuration system. You obtain an instance of the <xref:System.Web.Configuration.CacheSection> class by using the <xref:System.Configuration.Configuration.GetSection%2A> method.  
  
   
  
## Examples  
 [!code-vb[System.Web.Configuration.CacheSection#2](~/add/codesnippet/visualbasic/m-system.web.configurati_30_1.vb)]
 [!code-cs[System.Web.Configuration.CacheSection#2](~/add/codesnippet/csharp/m-system.web.configurati_30_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisableExpiration">
      <MemberSignature Language="C#" Value="public bool DisableExpiration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisableExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("disableExpiration", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the cache expiration is disabled.</summary>
        <value>
          <see langword="true" /> if the cache expiration is disabled; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the DisableExpiration property is set to `true`, the cached items never expire. This setting is intended to help debug cache behavior in application code. Use caution when disabling cache expiration, as this might result in items being cached longer than they are valid.  
  
> [!NOTE]
>  To add a page to the output cache, you must establish an expiration policy for that page. You can do this declaratively with the [@ OutputCache](http://msdn.microsoft.com/en-us/28a9e101-fb44-4198-9cb6-b8a52312fec2) directive or programmatically using the <xref:System.Web.HttpCachePolicy.SetExpires%2A> method. For more information, see [How to: Set Expiration Values for ASP.NET Page Caching](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to use the DisableExpiration property.  
  
 [!code-vb[System.Web.Configuration.CacheSection#4](~/add/codesnippet/visualbasic/p-system.web.configurati_391_1.vb)]
 [!code-cs[System.Web.Configuration.CacheSection#4](~/add/codesnippet/csharp/p-system.web.configurati_391_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisableMemoryCollection">
      <MemberSignature Language="C#" Value="public bool DisableMemoryCollection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisableMemoryCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("disableMemoryCollection", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the cache memory collection is disabled.</summary>
        <value>
          <see langword="true" /> if the cache memory collection is disabled; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the DisableMemoryCollection property is set to `true`, calls to the cache-related API will have no effect.  
  
 If the DisableMemoryCollection property is set to `true`, the cache does not attempt to collect unused items. Use caution when using this setting, as disabling memory collection can quickly lead to Out of Memory conditions for the application.  
  
 This setting has no effect on the ASP.NET internal cache or on the output cache. For more information about the different types of cache, see [Caching](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to use the DisableMemoryCollection property.  
  
 [!code-vb[System.Web.Configuration.CacheSection#3](~/add/codesnippet/visualbasic/p-system.web.configurati_298_1.vb)]
 [!code-cs[System.Web.Configuration.CacheSection#3](~/add/codesnippet/csharp/p-system.web.configurati_298_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PercentagePhysicalMemoryUsedLimit">
      <MemberSignature Language="C#" Value="public int PercentagePhysicalMemoryUsedLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentagePhysicalMemoryUsedLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("percentagePhysicalMemoryUsedLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=100, MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating the maximum percentage of virtual memory usage.</summary>
        <value>The maximum percentage of virtual memory usage. The default value is 90%.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PercentagePhysicalMemoryUsedLimit property specifies the threshold for high pressure conditions. As this threshold is approached, the cache system gradually begins more aggressive scavenging measures.  
  
   
  
## Examples  
 [!code-vb[System.Web.Configuration.CacheSection#7](~/add/codesnippet/visualbasic/p-system.web.configurati_357_1.vb)]
 [!code-cs[System.Web.Configuration.CacheSection#7](~/add/codesnippet/csharp/p-system.web.configurati_357_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrivateBytesLimit">
      <MemberSignature Language="C#" Value="public long PrivateBytesLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PrivateBytesLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("privateBytesLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.LongValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating the maximum size of the working-process private space.</summary>
        <value>The maximum number, in bytes, of the private space allocated to the working process. The default value is 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PrivateBytesLimit property specifies the threshold for high pressure conditions. As this threshold is approached, the cache system gradually begins more aggressive scavenging measures.  
  
   
  
## Examples  
 [!code-vb[System.Web.Configuration.CacheSection#6](~/add/codesnippet/visualbasic/p-system.web.configurati_382_1.vb)]
 [!code-cs[System.Web.Configuration.CacheSection#6](~/add/codesnippet/csharp/p-system.web.configurati_382_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrivateBytesPollTime">
      <MemberSignature Language="C#" Value="public TimeSpan PrivateBytesPollTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PrivateBytesPollTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("privateBytesPollTime", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating the time interval between polling for the worker-process memory usage.</summary>
        <value>The time interval between polling for the worker process memory usage. The default value is 2 minutes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This polling is expensive and might need to be adjusted as a tradeoff between reaction speed of the cache-trimming algorithm and number of polling calls made.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>