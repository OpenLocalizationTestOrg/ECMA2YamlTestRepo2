<Type Name="TagPrefixInfo" FullName="System.Web.Configuration.TagPrefixInfo">
  <TypeSignature Language="C#" Value="public sealed class TagPrefixInfo : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TagPrefixInfo extends System.Configuration.ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines a configuration element containing tag-related information.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TagPrefixInfo class allows you to programmatically access and modify tag-prefix information stored in a configuration file. It provides the same functionality as the ASP.NET `@Register` directive. Tag prefixes associate a "namespace" in ASP.NET to the assemblies and namespaces that must be included for custom controls and user controls to work properly. TagPrefixInfo objects are stored as members of a <xref:System.Web.Configuration.TagPrefixCollection> object. The <xref:System.Web.Configuration.TagPrefixCollection> class allows you to programmatically access and modify the `controls` subsection of the `pages` section of a configuration file.  
  
 TagPrefixInfo objects are added to the collection using the `add` element and specifying a value for the `tagPrefix` attribute along with values for other relevant attributes. The other required information varies based on the kind of control you will use with the specified tag prefix:  
  
-   If it is a user control, you must define the <xref:System.Web.Configuration.TagPrefixInfo.TagPrefix%2A>, <xref:System.Web.Configuration.TagPrefixInfo.TagName%2A>, and <xref:System.Web.Configuration.TagPrefixInfo.Source%2A> properties.  
  
-   If it is a custom control, you must define the <xref:System.Web.Configuration.TagPrefixInfo.TagPrefix%2A>, <xref:System.Web.Configuration.TagPrefixInfo.Namespace%2A>, and <xref:System.Web.Configuration.TagPrefixInfo.Assembly%2A> properties. The <xref:System.Web.Configuration.TagPrefixInfo.Assembly%2A> property is not required if the control is in the application code directory.  
  
 The same `tagPrefix` value can be used to map to multiple assemblies or namespaces.  
  
> [!NOTE]
>  When a source is specified, the user control itself must not be in the same directory as the page. If it is, you get a run-time error when you attempt to load the page.  
  
   
  
## Examples  
 This example demonstrates how to specify values declaratively for several attributes of the `controls` section, which can also be accessed as members of the TagPrefixInfo class.  
  
```  
  
<system.web>  
  <pages>  
    <controls>  
      <!â€”- Searches all linked assemblies for the namespace -->  
      <add tagPrefix="MyTags1" namespace=" MyNameSpace "/>  
      <!-- Uses a specified assembly -->  
      <add tagPrefix="MyTags2" namespace="MyNameSpace"   
        assembly="MyAssembly"/>  
      <!-- Uses the specified source for the user control -->  
      <add tagprefix="MyTags3" tagname="MyCtrl" src="MyControl.ascx"/>  
    </controls>  
   </pages>  
</system.web>  
```  
  
 The following code example shows how to use the TagPrefixInfo class to programmatically modify tag prefix settings. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  
  
 [!code-cs[System.Web.Configuration.PagesSection#12](~/add/codesnippet/csharp/t-system.web.configurati_48_1.cs)]
 [!code-vb[System.Web.Configuration.PagesSection#12](~/add/codesnippet/visualbasic/t-system.web.configurati_48_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TagPrefixInfo (string tagPrefix, string nameSpace, string assembly, string tagName, string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tagPrefix, string nameSpace, string assembly, string tagName, string source) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tagPrefix" Type="System.String" />
        <Parameter Name="nameSpace" Type="System.String" />
        <Parameter Name="assembly" Type="System.String" />
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagPrefix">The tag prefix being mapped to a source file or namespace and assembly.</param>
        <param name="nameSpace">The namespace associated with the tag prefix.</param>
        <param name="assembly">The assembly where the namespace resides.</param>
        <param name="tagName">The name of the control to be used in the page.</param>
        <param name="source">The name of the file that contains the user control.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.TagPrefixInfo" /> class using the passed values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates an instance of the <xref:System.Web.Configuration.TagPrefixInfo> class and initializes it using the passed parameters. The parameters for which you specify values depend on the kind of control you refer to with the specified tag prefix. Parameters not required for that tag prefix should be left blank. (Use an empty string.)  
  
-   If the control is a user control, you must specify values for the `tagPrefix`, `tagName`, and `source` parameters.  
  
-   If the control is a custom control, you must specify values for the `tagPrefix` and `nameSpace` parameters. If the control is not in the application code directory, you must also specify the `assembly` parameter.  
  
   
  
## Examples  
 The following code example shows how to use the TagPrefixInfo constructor. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  
  
 [!code-cs[System.Web.Configuration.PagesSection#32](~/add/codesnippet/csharp/b70293f7-583b-4b59-b067-_1.cs)]
 [!code-vb[System.Web.Configuration.PagesSection#32](~/add/codesnippet/visualbasic/b70293f7-583b-4b59-b067-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public string Assembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("assembly")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the assembly containing the control implementation.</summary>
        <value>The name of the assembly (without an extension). The default is an empty string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property specifies the assembly in which the control resides. It applies only to a custom control and is not required if the control is in the application code directory.  
  
   
  
## Examples  
 The following code example shows how to use the Assembly property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ElementProperty">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationElementProperty ElementProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationElementProperty ElementProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElementProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="prefix">Object to compare.</param>
        <summary>Compares this instance to another object.</summary>
        <returns>
          <see langword="true" /> if the objects are identical; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash value for the current instance.</summary>
        <returns>A hash value for the current instance.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("namespace")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the namespace in which the control resides.</summary>
        <value>The name of the namespace. The default is an empty string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property specifies the namespace in which the control resides. It applies only to custom controls.  
  
   
  
## Examples  
 The following code example shows how to use the Namespace property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("src")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name and path of the file containing the user control.</summary>
        <value>The name and path of the file containing the user control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property specifies the name and path of the file containing the user control implementation. It applies only to user controls. The path may be relative to the application or the application root.  
  
> [!NOTE]
>  The user control itself must not be in the same directory as the page. If it is, you get a run-time error when you attempt to load the page.  
  
   
  
## Examples  
 The following code example shows how to use the Source property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="public string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("tagName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the user control.</summary>
        <value>The name of the user control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property specifies the name of the control. It applies only to user controls. This is the value that would follow the tag prefix in the ASP.NET code. For example, "myControl" in `<myTag: myControl />`.  
  
   
  
## Examples  
 The following code example shows how to use the TagName property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TagPrefix">
      <MemberSignature Language="C#" Value="public string TagPrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("tagPrefix", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tag prefix that is being associated with a source file or namespace and assembly.</summary>
        <value>The tag prefix.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TagPrefix property defines the alias used for the namespace where the control resides. It applies to user and custom controls. This is the value that would precede the tag name in the ASP.NET code. For example "myTag" in `<myTag: myControl />`.  
  
   
  
## Examples  
 The following code example shows how to use the TagPrefix property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  
  
 [!code-cs[System.Web.Configuration.PagesSection#30](~/add/codesnippet/csharp/p-system.web.configurati_280_1.cs)]
 [!code-vb[System.Web.Configuration.PagesSection#30](~/add/codesnippet/visualbasic/p-system.web.configurati_280_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>