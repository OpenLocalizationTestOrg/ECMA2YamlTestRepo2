<Type Name="CompilationSection" FullName="System.Web.Configuration.CompilationSection">
  <TypeSignature Language="C#" Value="public sealed class CompilationSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CompilationSection extends System.Configuration.ConfigurationSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines configuration settings that are used to support the compilation infrastructure of Web applications. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CompilationSection class provides a way to programmatically access and modify the content of the `compilation` section of the configuration file.  
  
   
  
## Examples  
 This example demonstrates how to specify values declaratively for several attributes of the `compilation` section, which can also be accessed as members of the CompilationSection class.  
  
 The following configuration file example shows how to specify values declaratively for the `compilation` section.  
  
```  
<system.web>  
  <compilation   
    tempDirectory=""   
    debug="False"   
    strict="False"   
    explicit="True"   
    batch="True"   
    batchTimeout="900"   
    maxBatchSize="1000"   
    maxBatchGeneratedFileSize="1000"   
    numRecompilesBeforeAppRestart="15"   
    defaultLanguage="vb"   
    targetFramework="4.0"   
    urlLinePragmas="False"   
    assemblyPostProcessorType="">  
    <assemblies>  
      <clear />  
    </assemblies>  
    <buildProviders>  
      <clear />  
    </buildProviders>  
    <expressionBuilders>  
      <clear />  
    </expressionBuilders>  
  </compilation>   
</system.web>  
```  
  
 The following code example demonstrates how to use members of the CompilationSection class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#1](~/add/codesnippet/csharp/t-system.web.configurati_46_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#1](~/add/codesnippet/visualbasic/t-system.web.configurati_46_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilationSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.CompilationSection" /> class by using default settings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CompilationSection constructor is not intended to be used directly from your code. It is called by the ASP.NET configuration system. You can obtain an instance of the <xref:System.Web.Configuration.CompilationSection> class by using the <xref:System.Configuration.Configuration.GetSection%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Assemblies">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.AssemblyCollection Assemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.AssemblyCollection Assemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("assemblies")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.AssemblyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.Configuration.AssemblyCollection" /> of the <see cref="T:System.Web.Configuration.CompilationSection" />.</summary>
        <value>A <see cref="T:System.Web.Configuration.AssemblyCollection" /> that contains the assembly objects used during compilation of an ASP.NET resource.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property contains the assembly references to use during compilation of a dynamic ASP.NET resource. ASP.NET automatically links these assemblies to the resource when compiling each code module.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AssemblyPostProcessorType">
      <MemberSignature Language="C#" Value="public string AssemblyPostProcessorType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyPostProcessorType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("assemblyPostProcessorType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value specifying a post-process compilation step for an assembly.</summary>
        <value>A string value specifying the post-process compilation step for an assembly.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Batch">
      <MemberSignature Language="C#" Value="public bool Batch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Batch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("batch", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether batch compilation is attempted.</summary>
        <value>
          <see langword="true" /> if batch compilation is attempted; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set this attribute to `true` to change the delay caused by the required compilation when you access an uncompiled file. Setting this attribute to `true` instructs ASP.NET to precompile all the uncompiled files in batch mode. A delay occurs when the files are first compiled; however once the files are compiled, the delay is eliminated.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Batch property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#4](~/add/codesnippet/csharp/p-system.web.configurati_312_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#4](~/add/codesnippet/visualbasic/p-system.web.configurati_312_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsOrInfiniteConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("batchTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the time-out period, in seconds, for batch compilation.</summary>
        <value>A value indicating the amount of time in seconds granted for batch compilation to occur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Indicates the time-out period, in seconds, for batch compilation. If the compilation cannot be completed within the time-out period, the compiler reverts to single-compilation mode for the current page.  
  
   
  
## Examples  
 The following code example demonstrates how to use the BatchTimeout property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#5](~/add/codesnippet/csharp/p-system.web.configurati_138_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#5](~/add/codesnippet/visualbasic/p-system.web.configurati_138_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BuildProviders">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.BuildProviderCollection BuildProviders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.BuildProviderCollection BuildProviders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("buildProviders")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.BuildProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.Configuration.BuildProviderCollection" /> collection of the <see cref="T:System.Web.Configuration.CompilationSection" /> class.</summary>
        <value>A <see cref="T:System.Web.Configuration.BuildProviderCollection" /> that contains the build providers used during a compilation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Web.Compilation.BuildProvider> object provides the functionality to parse a specific file type and to generate code from that file.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CodeSubDirectories">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.CodeSubDirectoriesCollection CodeSubDirectories { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.CodeSubDirectoriesCollection CodeSubDirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("codeSubDirectories")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.CodeSubDirectoriesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection" /> of the <see cref="T:System.Web.Configuration.CompilationSection" />.</summary>
        <value>A <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection" /> collection that contains an ordered collection of subdirectories containing files compiled at run time.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property defines an ordered collection of subdirectories containing files compiled at run time. There can be any number of subdirectories.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Compilers">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.CompilerCollection Compilers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.CompilerCollection Compilers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("compilers")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.CompilerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.Configuration.CompilerCollection" /> collection of the <see cref="T:System.Web.Configuration.CompilationSection" /> class.</summary>
        <value>A <see cref="T:System.Web.Configuration.CompilerCollection" /> collection that contains a collection of <see cref="T:System.Web.Configuration.Compiler" /> objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Compilers property does not refer to any actual element in the underlying configuration file. It is a construct that allows easy access to the <xref:System.Web.Configuration.Compiler> objects it contains.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlBuilderInterceptorType">
      <MemberSignature Language="C#" Value="public string ControlBuilderInterceptorType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ControlBuilderInterceptorType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("controlBuilderInterceptorType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a string representing the object type used to intercept a <see cref="T:System.Web.UI.ControlBuilder" /> object and configure a container.</summary>
        <value>A string representing the object type used to intercept a <see cref="T:System.Web.UI.ControlBuilder" /> object.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="public bool Debug { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Debug" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("debug", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value specifying whether to compile release binaries or debug binaries.</summary>
        <value>
          <see langword="true" /> if debug binaries will be used for compilation; otherwise, <see langword="false" />. <see langword="false" /> specifies that release binaries will be used for compilation. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the Debug property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#9](~/add/codesnippet/csharp/p-system.web.configurati_50_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#9](~/add/codesnippet/visualbasic/p-system.web.configurati_50_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultLanguage">
      <MemberSignature Language="C#" Value="public string DefaultLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("defaultLanguage", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default programming language to use in dynamic-compilation files.</summary>
        <value>A value specifying the default programming language to use in dynamic-compilation files.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Specifies the default programming language, such as C# or VB.NET, to use in dynamic compilation files. Language names are defined using the `system.codedom` section. The default programming language is `vb`, which specifies VB.NET as the default programming language.  
  
   
  
## Examples  
 The following code example demonstrates how to use the DefaultLanguage property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#10](~/add/codesnippet/csharp/p-system.web.configurati_317_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#10](~/add/codesnippet/visualbasic/p-system.web.configurati_317_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisableObsoleteWarnings">
      <MemberSignature Language="C#" Value="public bool DisableObsoleteWarnings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisableObsoleteWarnings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("disableObsoleteWarnings", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the "disableObsoleteWarnings" configuration value in the Compilation section is set.</summary>
        <value>
          <see langword="true" /> if the "disableObsoleteWarnings" configuration value in the Compilation section is set; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnablePrefetchOptimization">
      <MemberSignature Language="C#" Value="public bool EnablePrefetchOptimization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePrefetchOptimization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enablePrefetchOptimization", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether an ASP.NET application can take advantage of [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)] prefetch functionality.</summary>
        <value>
          <see langword="true" /> if an ASP.NET application can take advantage of [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)] prefetch functionality; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prefetch is a utility that is intended to improve application startup performance by loading application data into memory before it is demanded .  
  
> [!NOTE]
>  The [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)] prefetch service must be configured and running for this setting to be effective.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Explicit">
      <MemberSignature Language="C#" Value="public bool Explicit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Explicit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("explicit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to use the Microsoft Visual Basic <see langword="explicit" /> compile option.</summary>
        <value>
          <see langword="true" /> if the Visual Basic <see langword="explicit" /> compile option is enabled; otherwise, <see langword="false" />. <see langword="false" /> specifies that the Visual Basic <see langword="explicit" /> compile option is disabled. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property specifies the setting of the Microsoft Visual Basic `explicit` compile option. When set to `true`, the Visual Basic `explicit` compile option is enabled. When the option is enabled, all variables must be explicitly declared using a `Dim`, `Private`, `Public`, or `ReDim` statement. The default is `true`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Explicit property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#11](~/add/codesnippet/csharp/p-system.web.configurati_338_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#11](~/add/codesnippet/visualbasic/p-system.web.configurati_338_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExpressionBuilders">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.ExpressionBuilderCollection ExpressionBuilders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.ExpressionBuilderCollection ExpressionBuilders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("expressionBuilders")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.ExpressionBuilderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.Configuration.ExpressionBuilderCollection" /> of the <see cref="T:System.Web.Configuration.CompilationSection" />.</summary>
        <value>A <see cref="T:System.Web.Configuration.ExpressionBuilderCollection" /> that contains <see cref="T:System.Web.Configuration.ExpressionBuilder" /> objects.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FolderLevelBuildProviders">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.FolderLevelBuildProviderCollection FolderLevelBuildProviders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.FolderLevelBuildProviderCollection FolderLevelBuildProviders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("folderLevelBuildProviders")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.FolderLevelBuildProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.Configuration.FolderLevelBuildProviderCollection" /> collection of the <see cref="T:System.Web.Configuration.CompilationSection" /> class, which represents the build providers that are used during compilation.</summary>
        <value>The build providers that are used during compilation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Web.Configuration.FolderLevelBuildProvider> object provides the functionality to parse a particular file type and to generate code from that file.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeObject">
      <MemberSignature Language="C#" Value="protected override object GetRuntimeObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object GetRuntimeObject() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxBatchGeneratedFileSize">
      <MemberSignature Language="C#" Value="public int MaxBatchGeneratedFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxBatchGeneratedFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxBatchGeneratedFileSize", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum combined size of the generated source files per batched compilation.</summary>
        <value>An integer value indicating the maximum combined size of the generated source files per batched compilation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Specifies the maximum size (in kilobytes) of the generated source files per batched compilation. The default value is 1000 KB.  
  
   
  
## Examples  
 The following code example demonstrates how to use the MaxBatchGeneratedFileSize property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#13](~/add/codesnippet/csharp/p-system.web.configurati_379_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#13](~/add/codesnippet/visualbasic/p-system.web.configurati_379_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxBatchSize">
      <MemberSignature Language="C#" Value="public int MaxBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxBatchSize", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum number of pages per batched compilation.</summary>
        <value>An integer value indicating the maximum number of pages that will be compiled into a single batch. The default number of pages is 1000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the MaxBatchSize property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#14](~/add/codesnippet/csharp/p-system.web.configurati_124_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#14](~/add/codesnippet/visualbasic/p-system.web.configurati_124_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentCompilations">
      <MemberSignature Language="C#" Value="public int MaxConcurrentCompilations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentCompilations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxConcurrentCompilations", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the " maxConcurrentCompilations" configuration value in the Compilation section is set.</summary>
        <value>
          <see langword="true" /> if the " maxConcurrentCompilations" configuration value in the Compilation section is set; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NumRecompilesBeforeAppRestart">
      <MemberSignature Language="C#" Value="public int NumRecompilesBeforeAppRestart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumRecompilesBeforeAppRestart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("numRecompilesBeforeAppRestart", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of dynamic recompiles of resources that can occur before the application restarts.</summary>
        <value>A value indicating the number of dynamic recompiles of resources that can occur before the application restarts. The default is 15 recompilations.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Indicates the number of dynamic recompiles of resources that can occur before the application restarts. This attribute is supported at the global and application configuration levels, but not at the directory configuration level.  
  
> [!NOTE]
>  ASP.NET increases the NumRecompilesBeforeAppRestart property value every time an assembly is invalidated and fails to be deleted.  
  
   
  
## Examples  
 The following code example demonstrates how to use the NumRecompilesBeforeAppRestart property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#15](~/add/codesnippet/csharp/p-system.web.configurati_24_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#15](~/add/codesnippet/visualbasic/p-system.web.configurati_24_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OptimizeCompilations">
      <MemberSignature Language="C#" Value="public bool OptimizeCompilations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OptimizeCompilations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("optimizeCompilations", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the compilation must be optimized.</summary>
        <value>
          <see langword="true" /> if the compilation must be optimized; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PostDeserialize">
      <MemberSignature Language="C#" Value="protected override void PostDeserialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void PostDeserialize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfileGuidedOptimizations">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.ProfileGuidedOptimizationsFlags ProfileGuidedOptimizations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.ProfileGuidedOptimizationsFlags ProfileGuidedOptimizations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("profileGuidedOptimizations", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.ProfileGuidedOptimizationsFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the application is optimized for the deployed environment.</summary>
        <value>A value that indicates whether the application is optimized for the deployed environment.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is set to <xref:System.Web.Configuration.ProfileGuidedOptimizationsFlags>, the ASP.NET compilation system enables optimizations that are intended to speed up ASP.NET startup performance at the expense of increased CPU utilization. The default setting for this property is <xref:System.Web.Configuration.ProfileGuidedOptimizationsFlags>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReadOnly">
      <MemberSignature Language="C#" Value="protected override void SetReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetReadOnly() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Strict">
      <MemberSignature Language="C#" Value="public bool Strict { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Strict" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("strict", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the Visual Basic <see langword="strict" /> compile option.</summary>
        <value>
          <see langword="true" /> if the Visual Basic <see langword="strict" /> compile option is used; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When `true`, compilation explicitly disallows any data-type conversions in which data loss would occur, and any conversion between numeric types and strings.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Strict property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#16](~/add/codesnippet/csharp/p-system.web.configurati_80_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#16](~/add/codesnippet/visualbasic/p-system.web.configurati_80_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TargetFramework">
      <MemberSignature Language="C#" Value="public string TargetFramework { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetFramework" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("targetFramework", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the version of the .NET Framework that the Web site targets.</summary>
        <value>The version of the .NET Framework that the Web site targets. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For information about how to target a specific version of the .NET Framework, see [.NET Framework Multi-Targeting for ASP.NET Web Projects](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 [compilation Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/7c319582-074a-4d2a-a787-03b9d4541c12)  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TempDirectory">
      <MemberSignature Language="C#" Value="public string TempDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TempDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("tempDirectory", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies the directory to use for temporary file storage during compilation.</summary>
        <value>A value specifying the directory to use for temporary file storage during compilation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the TempDirectory property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#17](~/add/codesnippet/csharp/p-system.web.configurati_22_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#17](~/add/codesnippet/visualbasic/p-system.web.configurati_22_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UrlLinePragmas">
      <MemberSignature Language="C#" Value="public bool UrlLinePragmas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UrlLinePragmas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("urlLinePragmas", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether instructions to the compiler use physical paths or URLs.</summary>
        <value>
          <see langword="true" /> if instructions to the compiler use URLs rather than physical paths; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If this property is specified as `true` in the configuration, URLs will be used for the compiler instructions instead of physical paths.  
  
   
  
## Examples  
 The following code example demonstrates how to use the UrlLinePragmas property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.CompilationSection> class.  
  
 [!code-cs[System.Web.Configuration.CompilationSection#18](~/add/codesnippet/csharp/p-system.web.configurati_140_1.cs)]
 [!code-vb[System.Web.Configuration.CompilationSection#18](~/add/codesnippet/visualbasic/p-system.web.configurati_140_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>