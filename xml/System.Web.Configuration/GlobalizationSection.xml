<Type Name="GlobalizationSection" FullName="System.Web.Configuration.GlobalizationSection">
  <TypeSignature Language="C#" Value="public sealed class GlobalizationSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed GlobalizationSection extends System.Configuration.ConfigurationSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines configuration settings that are used to support the globalization infrastructure of Web applications. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GlobalizationSection class provides a way to programmatically access and modify the content of the `globalization` section of the configuration file.  
  
   
  
## Examples  
 This example demonstrates how to specify values declaratively for several attributes of the `globalization` section, which can also be accessed as members of the GlobalizationSection class.  
  
 The following configuration file example shows how to specify values declaratively for the `globalization` section.  
  
```  
<system.web>  
  <globalization   
    requestEncoding="utf-8"  
    responseEncoding="utf-8"/>  
</system.web>  
```  
  
 The following code example demonstrates how to use the GlobalizationSection class.  
  
 [!code-cs[System.Web.Configuration.GlobalizationSection#1](~/add/codesnippet/csharp/t-system.web.configurati_6_1.cs)]
 [!code-vb[System.Web.Configuration.GlobalizationSection#1](~/add/codesnippet/visualbasic/t-system.web.configurati_6_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GlobalizationSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.GlobalizationSection" /> class by using default settings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GlobalizationSection constructor is not intended to be used directly from your code. It is called by the ASP.NET configuration system. You obtain an instance of the <xref:System.Web.Configuration.GlobalizationSection> class by using the <xref:System.Configuration.Configuration.GetSection%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public string Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("culture", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value specifying the default culture for processing incoming Web requests.</summary>
        <value>The default culture for processing incoming Web requests.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Culture property returns the default culture for processing incoming Web requests.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Culture property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.GlobalizationSection> class.  
  
 [!code-cs[System.Web.Configuration.GlobalizationSection#2](~/add/codesnippet/csharp/p-system.web.configurati_334_1.cs)]
 [!code-vb[System.Web.Configuration.GlobalizationSection#2](~/add/codesnippet/visualbasic/p-system.web.configurati_334_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableBestFitResponseEncoding">
      <MemberSignature Language="C#" Value="public bool EnableBestFitResponseEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBestFitResponseEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableBestFitResponseEncoding", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the best-fit character encoding for a response is enabled.</summary>
        <value>
          <see langword="true" /> if the best-fit character encoding for a response is enabled; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnableClientBasedCulture">
      <MemberSignature Language="C#" Value="public bool EnableClientBasedCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientBasedCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableClientBasedCulture", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the &lt;xref:System.Web.Configuration.GlobalizationSection.Culture%2A&gt; and &lt;xref:System.Web.Configuration.GlobalizationSection.UICulture%2A&gt; properties should be based on the &lt;xref:System.Net.HttpRequestHeader&gt; header field value that is sent by the client browser.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Web.Configuration.GlobalizationSection.Culture%2A&gt; and &lt;xref:System.Web.Configuration.GlobalizationSection.UICulture%2A&gt; should be based on the &lt;xref:System.Net.HttpRequestHeader&gt; header field value sent by the client browser; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the EnableClientBasedCulture property is enabled, the <xref:System.Web.Configuration.GlobalizationSection.Culture%2A> and <xref:System.Web.Configuration.GlobalizationSection.UICulture%2A> properties are based on the <xref:System.Net.HttpRequestHeader> header field value that is sent by the client browser. If the <xref:System.Net.HttpRequestHeader> header value cannot be mapped to a specific culture, the <xref:System.Web.Configuration.GlobalizationSection.Culture%2A> and <xref:System.Web.Configuration.GlobalizationSection.UICulture%2A> values are used. The default value is `false`.  
  
   
  
## Examples  
 The following code example demonstrates how to use the EnableClientBasedCulture property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.GlobalizationSection> class.  
  
 [!code-cs[System.Web.Configuration.GlobalizationSection#3](~/add/codesnippet/csharp/p-system.web.configurati_92_1.cs)]
 [!code-vb[System.Web.Configuration.GlobalizationSection#3](~/add/codesnippet/visualbasic/p-system.web.configurati_92_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FileEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding FileEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding FileEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("fileEncoding")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value specifying the default encoding for .aspx, .asmx, and .asax file parsing.</summary>
        <value>The default encoding value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FileEncoding property specifies the default encoding that is used to interpret the data that is included in the .aspx, .asmx, and .asax file types. If the file encoding is specified in the Web.config file, the actual file must be saved in the same encoding. Unicode files and UTF-8 files that are saved with the byte order mark prefix <xref:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsByteOrdered%2A> property are automatically recognized regardless of the value of the FileEncoding.  
  
 If the FileEncoding property setting for the server or application is configured to use UTF-16, and if UTF-16 is not the encoding that is used for an .aspx page in the scope of the configuration file, the output that is sent to the client browser is corrupted. For this reason, ensure that the configured FileEncoding value matches the encoding that is used in the .aspx page.  
  
   
  
## Examples  
 The following code example demonstrates how to use the FileEncoding property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.GlobalizationSection> class.  
  
 [!code-cs[System.Web.Configuration.GlobalizationSection#4](~/add/codesnippet/csharp/p-system.web.configurati_370_1.cs)]
 [!code-vb[System.Web.Configuration.GlobalizationSection#4](~/add/codesnippet/visualbasic/p-system.web.configurati_370_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PostDeserialize">
      <MemberSignature Language="C#" Value="protected override void PostDeserialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void PostDeserialize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreSerialize">
      <MemberSignature Language="C#" Value="protected override void PreSerialize (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void PreSerialize(class System.Xml.XmlWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding RequestEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding RequestEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestEncoding", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value specifying the content encoding of HTTP requests.</summary>
        <value>The content encoding of HTTP requests. The default is UTF-8.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RequestEncoding property specifies the assumed encoding of each incoming HTTP request, including posted data and query-string data. If the request comes with a request header containing a <xref:System.Net.HttpRequestHeader> field, the <xref:System.Net.HttpRequestHeader> field of the request header overrides the RequestEncoding of the configuration.  
  
 The default encoding is UTF-8, specified in the `globalization` section of the Machine.config file that was created when the .NET Framework was installed. If the RequestEncoding property is not specified in the Machine.config or Web.config file, encoding defaults to the `Regional Options` locale setting on the computer. For single-server applications, the RequestEncoding and <xref:System.Web.Configuration.GlobalizationSection.ResponseEncoding%2A> properties should be the same. When using multiple server applications where the default server encodings are different, you can use local Web.config files to vary the RequestEncoding and <xref:System.Web.Configuration.GlobalizationSection.ResponseEncoding%2A> properties.  
  
   
  
## Examples  
 The following code example demonstrates how to use the RequestEncoding property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.GlobalizationSection> class.  
  
 [!code-cs[System.Web.Configuration.GlobalizationSection#5](~/add/codesnippet/csharp/p-system.web.configurati_361_1.cs)]
 [!code-vb[System.Web.Configuration.GlobalizationSection#5](~/add/codesnippet/visualbasic/p-system.web.configurati_361_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResourceProviderFactoryType">
      <MemberSignature Language="C#" Value="public string ResourceProviderFactoryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceProviderFactoryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("resourceProviderFactoryType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the factory type of the resource provider.</summary>
        <value>The factory type of the resource provider.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResponseEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding ResponseEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding ResponseEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("responseEncoding", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value specifying the content encoding of HTTP responses.</summary>
        <value>The content encoding of HTTP responses. The default is UTF-8.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ResponseEncoding property gets or sets a value specifying the content encoding of HTTP responses. The default encoding is UTF-8.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ResponseEncoding property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.GlobalizationSection> class.  
  
 [!code-cs[System.Web.Configuration.GlobalizationSection#6](~/add/codesnippet/csharp/p-system.web.configurati_160_1.cs)]
 [!code-vb[System.Web.Configuration.GlobalizationSection#6](~/add/codesnippet/visualbasic/p-system.web.configurati_160_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResponseHeaderEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding ResponseHeaderEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding ResponseHeaderEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("responseHeaderEncoding", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value specifying the header encoding of HTTP responses.</summary>
        <value>The header encoding of HTTP responses. The default is UTF-8.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ResponseHeaderEncoding property gets or sets a value specifying the header encoding of HTTP responses. The default encoding is UTF-8.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ResponseHeaderEncoding property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.GlobalizationSection> class.  
  
 [!code-cs[System.Web.Configuration.GlobalizationSection#7](~/add/codesnippet/csharp/p-system.web.configurati_122_1.cs)]
 [!code-vb[System.Web.Configuration.GlobalizationSection#7](~/add/codesnippet/visualbasic/p-system.web.configurati_122_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public string UICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("uiCulture", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value specifying the default culture for processing locale-dependent resource searches.</summary>
        <value>The default culture for processing locale-dependent resource searches.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UICulture property specifies the default culture for processing locale-dependent resource searches.  
  
   
  
## Examples  
 The following code example demonstrates how to use the UICulture property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.GlobalizationSection> class.  
  
 [!code-cs[System.Web.Configuration.GlobalizationSection#8](~/add/codesnippet/csharp/p-system.web.configurati_23_1.cs)]
 [!code-vb[System.Web.Configuration.GlobalizationSection#8](~/add/codesnippet/visualbasic/p-system.web.configurati_23_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>