<Type Name="FormsAuthenticationConfiguration" FullName="System.Web.Configuration.FormsAuthenticationConfiguration">
  <TypeSignature Language="C#" Value="public sealed class FormsAuthenticationConfiguration : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed FormsAuthenticationConfiguration extends System.Configuration.ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Configures an ASP.NET application to use the <see cref="T:System.Web.Configuration.AuthenticationMode" /> forms modality.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FormsAuthenticationConfiguration class provides a way to programmatically access and modify the `forms` element of a configuration `authentication` section.  
  
 This type is part of a group that includes the <xref:System.Web.Configuration.FormsAuthenticationCredentials>,the <xref:System.Web.Configuration.FormsAuthenticationUserCollection>, and the <xref:System.Web.Configuration.FormsAuthenticationUser> types. The types other than the collection type directly affect the underlying configuration tags.  
  
> [!NOTE]
>  The FormsAuthenticationConfiguration can write information into the related section of the configuration file according to the restrictions defined by the section property <xref:System.Configuration.SectionInformation.AllowDefinition%2A> whose value is <xref:System.Configuration.ConfigurationAllowDefinition>. Any attempt to write in a configuration file at a level not allowed in the hierarchy will result in an error message generated by the parser. However, you can use this class to read configuration information at any level in the hierarchy. For safety and scalability, it is recommended that you use an external repository, such as a database, to keep the users' credentials.  
  
   
  
## Examples  
 The following code example shows how to obtain the FormsAuthenticationConfiguration object from the configuration file of an existing Web application. You can use this object to access its members. The configuration file will contain a setup similar to the following.  
  
 **Note** If you use the `credentials` section, be sure to follow the guidelines explained at [ASP.NET Authentication](~/add/includes/ajax-current-ext-md.md). For scalability and better security, it is recommended that you use an external database to store the users' credentials. For more information about building secure ASP.NET applications search the Microsoft MSDN Web site (msdn.microsoft.com) for "Securing Your ASP.NET Application" and "Building Secure ASP.NET Applications: Authentication, Authorization, and Secure Communication."  
  
```  
<authentication mode="Forms">  
  <forms name="MyAppCookie" loginUrl="login.aspx"  
    defaultUrl="default.aspx"  
    protection="Encryption" timeout="5" path="aspnetTest"  
    slidingExpiration="false"  
    cookieless="UseCookies" domain="domainName">  
    <credentials passwordFormat="SHA1">  
      <user name="aspnetuser1"  
        password="5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8"/>  
       <user name="aspnetuser2"  
         password="E38AD214943DAAD1D64C102FAEC29DE4AFE9DA3D"/>  
    </credentials>            
  </forms>  
</authentication>   
```  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#1](~/add/codesnippet/visualbasic/t-system.web.configurati_36_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#1](~/add/codesnippet/csharp/t-system.web.configurati_36_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormsAuthenticationConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.FormsAuthenticationConfiguration" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to create a <xref:System.Web.Configuration.FormsAuthenticationConfiguration> object.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#2](~/add/codesnippet/visualbasic/m-system.web.configurati_39_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#2](~/add/codesnippet/csharp/m-system.web.configurati_39_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Cookieless">
      <MemberSignature Language="C#" Value="public System.Web.HttpCookieMode Cookieless { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.HttpCookieMode Cookieless" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("cookieless", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether forms-based authentication should use cookies.</summary>
        <value>One of the <see cref="T:System.Web.HttpCookieMode" /> values. The default value is <see cref="T:System.Web.HttpCookieMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Cookieless property defines whether forms-based authentication should use a cookie to exchange user information.  
  
   
  
## Examples  
 The following code example demonstrates how to access the Cookieless property. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#5](~/add/codesnippet/visualbasic/p-system.web.configurati_111_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#5](~/add/codesnippet/csharp/p-system.web.configurati_111_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.FormsAuthenticationCredentials Credentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.FormsAuthenticationCredentials Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("credentials")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.FormsAuthenticationCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Web.Configuration.FormsAuthenticationCredentials" /> collection of user names and passwords.</summary>
        <value>A <see cref="T:System.Web.Configuration.FormsAuthenticationCredentials" /> collection that contains the user names and passwords.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Credentials property gets the user names and passwords to use during forms-based authentication.  
  
> [!NOTE]
>  When security is required, you should use alternative ways of storing the user names and passwords; for example, in a database store. If you decide to use this collection, you should use the provided encryption facility.  
  
   
  
## Examples  
 The following code example shows how to access the Credentials property. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#14](~/add/codesnippet/visualbasic/p-system.web.configurati_231_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#14](~/add/codesnippet/csharp/p-system.web.configurati_231_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefaultUrl">
      <MemberSignature Language="C#" Value="public string DefaultUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("defaultUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default URL.</summary>
        <value>The URL to which to redirect the request after authentication. The default value is default.aspx.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DefaultUrl is used if the user accesses the login page directly or if a return URL is not provided.  
  
   
  
## Examples  
 The following code example shows how to access the DefaultUrl. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#4](~/add/codesnippet/visualbasic/p-system.web.configurati_45_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#4](~/add/codesnippet/csharp/p-system.web.configurati_45_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("domain", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the domain name to be sent with forms authentication cookies.</summary>
        <value>The name of the domain for the outgoing forms authentication cookies. Default is an empty string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Domain is used for the authentication cookies.  
  
 This property corresponds to the value of <xref:System.Web.HttpCookie.Domain%2A?displayProperty=fullName>.  
  
 This setting will take precedence over the `domain` attribute of the  section for forms authentication cookies.  
  
   
  
## Examples  
 The following code example shows how to access the Domain property. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#6](~/add/codesnippet/visualbasic/p-system.web.configurati_146_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#6](~/add/codesnippet/csharp/p-system.web.configurati_146_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ElementProperty">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationElementProperty ElementProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationElementProperty ElementProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElementProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCrossAppRedirects">
      <MemberSignature Language="C#" Value="public bool EnableCrossAppRedirects { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCrossAppRedirects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableCrossAppRedirects", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether authenticated users can be redirected to URLS in other applications.</summary>
        <value>true if authenticated users can be redirected to URLs in other applications; otherwise false. The default is false.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The EnableCrossAppRedirects property value sets the enableCrossAppRedirects attribute of the `forms` section in the authentication section of a configuration.  
  
 The EnableCrossAppRedirects property is checked by the EnableCrossAppRedirects method when the redirection is to a URL that is not in the current application. If EnableCrossAppRedirects is true, then the redirect is performed; otherwise the browser is redirected to the page defined in the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> property.  
  
> [!NOTE]
>  When performing redirects across applications, you must ensure that several of the attributes in the `form` configuration section are duplicated across the authenticated applications. For more information and an example, see [Forms Authentication Across Applications](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example shows how to access the EnableCrossAppRedirects property. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#8](~/add/codesnippet/visualbasic/d8731910-d9d8-43fd-9ec3-_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#8](~/add/codesnippet/csharp/d8731910-d9d8-43fd-9ec3-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LoginUrl">
      <MemberSignature Language="C#" Value="public string LoginUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LoginUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("loginUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the redirection URL for the request.</summary>
        <value>The URL the request is redirected to when the user is not authenticated. The default value is login.aspx.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LoginUrl property specifies the redirection URL for the request when the user is not authenticated or when no valid authentication cookie exists.  
  
   
  
## Examples  
 The following code example shows how to access the LoginUrl. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#3](~/add/codesnippet/visualbasic/p-system.web.configurati_35_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#3](~/add/codesnippet/csharp/p-system.web.configurati_35_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("name", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cookie name.</summary>
        <value>The name of the HTTP cookie to use for request authentication.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to access the Name property Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#21](~/add/codesnippet/csharp/p-system.web.configurati_377_1.cs)]
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#21](~/add/codesnippet/visualbasic/p-system.web.configurati_377_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("path", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cookie path.</summary>
        <value>The path of the HTTP cookie to use for authentication. The default value is a slash (/), which represents the Web-application root.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Path property indicates where the authentication cookie resides and is transmitted along with the authentication cookie itself.  
  
   
  
## Examples  
 The following code example shows how to access the Path property. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#9](~/add/codesnippet/visualbasic/p-system.web.configurati_228_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#9](~/add/codesnippet/csharp/p-system.web.configurati_228_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Protection">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.FormsProtectionEnum Protection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.FormsProtectionEnum Protection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("protection", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.FormsProtectionEnum</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the encryption type used to encrypt the cookie.</summary>
        <value>One of the <see cref="T:System.Web.Configuration.FormsProtectionEnum" /> enumeration values. The default value is <see langword="All" />.  
  
 **Note** Be sure to use the default value for this property if you want both data validation and encryption to help protect the cookie. This option uses the configured data-validation algorithm based on the <see langword="machineKey" />. Triple-DES (3DES) is used for encryption, if available and if the key is long enough (48 bytes or more).  
  
 To improve the protection of your cookie, you may also want to set the &lt;xref:System.Web.Configuration.FormsAuthenticationConfiguration.RequireSSL%2A&gt; to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to access the Protection property. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#11](~/add/codesnippet/visualbasic/p-system.web.configurati_12_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#11](~/add/codesnippet/csharp/p-system.web.configurati_12_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RequireSSL">
      <MemberSignature Language="C#" Value="public bool RequireSSL { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requireSSL", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a Secure Sockets Layer (SSL) connection is required when transmitting authentication information.</summary>
        <value>
          <see langword="true" /> if an SSL connection is required; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If RequireSSL is `true`, a Web application rejects all the forms authentication requests that do not use an SSL connection.  
  
   
  
## Examples  
 The following code example shows how to access the RequireSSL property Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#2](~/add/codesnippet/visualbasic/p-system.web.configurati_282_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#2](~/add/codesnippet/csharp/p-system.web.configurati_282_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SlidingExpiration">
      <MemberSignature Language="C#" Value="public bool SlidingExpiration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("slidingExpiration", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the authentication sliding expiration.</summary>
        <value>
          <see langword="true" /> if the sliding expiration is enabled; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the SlidingExpiration is set to `true`, the time interval during which the authentication cookie is valid is reset to the expiration <xref:System.Web.Configuration.FormsAuthenticationConfiguration.Timeout%2A> property value. This happens if the user browses after half of the timeout has expired. For example, if you set an expiration of 20 minutes by using sliding expiration, a user can visit the site at 2:00 PM and receive a cookie that is set to expire at 2:20 PM. The expiration is only updated if the user visits the site after 2:10 PM. If the user visits the site at 2:09 PM, the cookie is not updated because half of the expiration time has not passed. If the user then waits 12 minutes, visiting the site at 2:21 PM, the cookie will be expired.  
  
   
  
## Examples  
 The following code example shows how to access the SlidingExpiration property. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#7](~/add/codesnippet/visualbasic/p-system.web.configurati_238_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#7](~/add/codesnippet/csharp/p-system.web.configurati_238_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TicketCompatibilityMode">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("ticketCompatibilityMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TicketCompatibilityMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to use Coordinated Universal Time (UTC) or local time for the ticket expiration date.</summary>
        <value>The ticket expiration-date compatibility mode.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default value is local time as expressed by the <xref:System.Web.Configuration.TicketCompatibilityMode> enumeration value.  
  
   
  
## Examples  
 <xref:System.Web.Configuration.TicketCompatibilityMode>  
  
 [forms Element for authentication (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/8163b8b5-ea6c-46c8-b5a9-c4c3de31c0b3)  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanMinutesConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("timeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:01:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the authentication time-out.</summary>
        <value>The amount of time in minutes after which the authentication expires. The default value is 30 minutes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to access the Timeout property. Refer to the code example in the <xref:System.Web.Configuration.FormsAuthenticationConfiguration> class topic to learn how to get the section.  
  
 [!code-vb[System.Web.Configuration.FormsAuthenticationConfiguration#10](~/add/codesnippet/visualbasic/p-system.web.configurati_87_1.vb)]
 [!code-cs[System.Web.Configuration.FormsAuthenticationConfiguration#10](~/add/codesnippet/csharp/p-system.web.configurati_87_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>