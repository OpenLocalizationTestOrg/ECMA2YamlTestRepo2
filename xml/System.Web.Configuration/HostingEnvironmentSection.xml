<Type Name="HostingEnvironmentSection" FullName="System.Web.Configuration.HostingEnvironmentSection">
  <TypeSignature Language="C#" Value="public sealed class HostingEnvironmentSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HostingEnvironmentSection extends System.Configuration.ConfigurationSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines configuration settings that control the behavior of the application hosting environment. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The HostingEnvironmentSection class provides a way to programmatically access and modify the values of the HostingEnvironmentSection section in the configuration file.When an ASP.NET application is unused for a specified amount of time, it can be unloaded from memory based on the <xref:System.Web.Configuration.HostingEnvironmentSection.IdleTimeout%2A> and <xref:System.Web.Configuration.HostingEnvironmentSection.ShutdownTimeout%2A> properties.  
  
   
  
## Examples  
 This example demonstrates how to specify values declaratively for several attributes of the [hostingEnvironment Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/043a75c8-231a-4f8d-9633-501530bd7d40) section, which can also be accessed as members of the HostingEnvironmentSection class.  
  
 The following configuration file example shows how to specify values declaratively for the [hostingEnvironment Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/043a75c8-231a-4f8d-9633-501530bd7d40) section.  
  
```  
<system.web>  
  <hostingEnvironment  
    idleTimeout="20"  
    shutdownTimeout="30"  
  />  
</system.web>  
```  
  
 The following code example demonstrates how to use the HostingEnvironmentSection class.  
  
 [!code-vb[System.Web.Configuration.HostingEnvironmentSection#1](~/add/codesnippet/visualbasic/t-system.web.configurati_2_1.vb)]
 [!code-cs[System.Web.Configuration.HostingEnvironmentSection#1](~/add/codesnippet/csharp/t-system.web.configurati_2_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostingEnvironmentSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.HostingEnvironmentSection" /> class by using default settings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The HostingEnvironmentSection constructor is not intended to be used directly from your code. It is called by the ASP.NET configuration system. You obtain an instance of the <xref:System.Web.Configuration.HostingEnvironmentSection> class by using the <xref:System.Configuration.Configuration.GetSection%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IdleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan IdleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan IdleTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanMinutesOrInfiniteConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("idleTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the amount of time, in minutes, before unloading an inactive application.</summary>
        <value>A &lt;xref:System.TimeSpan&gt; that is the specified number of minutes before unloading an inactive application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default value for the IdleTimeout property is "Infinite". This setting can be set at the machine or application level. If this setting is defined at any other level, it is ignored.  
  
   
  
## Examples  
 The following code example shows how to use the IdleTimeout property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HostingEnvironmentSection> class.  
  
 [!code-vb[System.Web.Configuration.HostingEnvironmentSection#2](~/add/codesnippet/visualbasic/p-system.web.configurati_158_1.vb)]
 [!code-cs[System.Web.Configuration.HostingEnvironmentSection#2](~/add/codesnippet/csharp/p-system.web.configurati_158_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowCopyBinAssemblies">
      <MemberSignature Language="C#" Value="public bool ShadowCopyBinAssemblies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShadowCopyBinAssemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("shadowCopyBinAssemblies", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the assemblies of an application in Bin are shadow copied to the application's ASP.NET Temporary Files directory.</summary>
        <value>
          <see langword="true" /> if the assemblies of an application in Bin are shadow copied to the application's ASP.NET Temporary Files directory; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShutdownTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ShutdownTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ShutdownTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("shutdownTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the amount of time, in seconds, to gracefully shut down the application.</summary>
        <value>A &lt;xref:System.TimeSpan&gt; that is the specified number of seconds to gracefully shut down the application. The default is 30 seconds.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default value for the ShutdownTimeout property is 30 seconds. This setting can be set at the machine or application level. If this setting is defined at any other configuration level, it is ignored. If a debugger is attached to the application, the application will not be shut down.  
  
   
  
## Examples  
 The following code example shows how to use the ShutdownTimeout property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.HostingEnvironmentSection> class.  
  
 [!code-vb[System.Web.Configuration.HostingEnvironmentSection#3](~/add/codesnippet/visualbasic/p-system.web.configurati_291_1.vb)]
 [!code-cs[System.Web.Configuration.HostingEnvironmentSection#3](~/add/codesnippet/csharp/p-system.web.configurati_291_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UrlMetadataSlidingExpiration">
      <MemberSignature Language="C#" Value="public TimeSpan UrlMetadataSlidingExpiration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan UrlMetadataSlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("urlMetadataSlidingExpiration", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines how ASP.NET caches URL metadata.</summary>
        <value>A value that determines how ASP.NET caches URL metadata. The default value is 1 minute.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An example of URL metadata is information in the Web.config file about security restrictions that apply to a particular URL.  
  
 The following values have special meanings:  
  
-   "Infinite". URL metadata is cached without a sliding expiration. This means caching continues until the server uses the maximum allotted amount of memory. This is the default behavior in ASP.NET 3.5 and earlier versions.  
  
-   "00:00:00". URL metadata is not cached. The metadata is regenerated with every request. This is more efficient for scenarios where the same URL is rarely requested.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>