<Type Name="ResourceExpressionEditorSheet" FullName="System.Web.UI.Design.ResourceExpressionEditorSheet">
  <TypeSignature Language="C#" Value="public class ResourceExpressionEditorSheet : System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ResourceExpressionEditorSheet extends System.Web.UI.Design.ExpressionEditorSheet" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Design.ExpressionEditorSheet</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a design-time editor sheet for the properties of a resource expression in the UI of a designer host at design time.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The visual designer uses the <xref:System.Web.UI.Design.ResourceExpressionEditor> class with the ResourceExpressionEditorSheet class to select the individual properties of a resource reference expression, and to combine the selected resource expression property values into a resource expression.  
  
 The <xref:System.Web.UI.Design.ConnectionStringsExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=fullName> method returns a ResourceExpressionEditorSheet object. In the expressions dialog box, when you select a control property and bind it to a resource expression, the visual designer calls the <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method. The visual designer uses the returned ResourceExpressionEditorSheet object to prompt for the <xref:System.Web.UI.Design.ResourceExpressionEditorSheet.ClassKey%2A> and <xref:System.Web.UI.Design.ResourceExpressionEditorSheet.ResourceKey%2A> properties. Once the resource expression properties are selected, the visual designer calls the <xref:System.Web.UI.Design.ResourceExpressionEditorSheet.GetExpression%2A> method to combine the properties into a resource expression string.  
  
 The <xref:System.Web.UI.Design.ResourceExpressionEditorSheet.ResourceKey%2A> property must be specified in a resource expression; it indexes the resource value. The <xref:System.Web.UI.Design.ResourceExpressionEditorSheet.ClassKey%2A> property is optional. It references the class key or file name that defines the resource in the global resources folder.  
  
   
  
## Examples  
 The following code example demonstrates how to bind the <xref:System.Web.UI.WebControls.HyperLink.Text%2A> property of a <xref:System.Web.UI.WebControls.HyperLink> control to a resource expression using the <xref:System.Web.UI.Design.ResourceExpressionEditor>. To use the example:  
  
1.  In a Web site project, add a new resource file named Strings.resx to the App_GlobalResources folder.  
  
2.  Add a string named `myLinkText` to the Strings.resx resource file, and set the value to the text for a <xref:System.Web.UI.WebControls.HyperLink> control. For example, set the `myLinkText` string value to `This is a link`.  
  
3.  In an ASP.NET Web page, add a <xref:System.Web.UI.WebControls.HyperLink> control.  
  
4.  In the property grid for the `Hyperlink` control, click **Expressions**, and click the ellipsis button (**...)** to display the expression binding dialog box.  
  
5.  Select the `Text` property of a control, and set **Expression Type** to the `Resources` expression type. The visual designer displays the resource expression properties defined by the ResourceExpressionEditorSheet object.  
  
6.  Set the **Expression Properties** as follows:  
  
    -   Set **ClassKey** to `Strings`, the class name for the compiled Strings.resx resource file.  
  
    -   Set **ResourceKey** to `myLinkText`, the string name in Strings.resx.  
  
 The visual designer uses the <xref:System.Web.UI.Design.ResourceExpressionEditor> object to assign the resource expression for the `Text` property. The following aspx source shows an example of a property value set using a resource expression:  
  
 [!code-vb[ControlsUsingExpressions#3](~/add/codesnippet/visualbasic/t-system.web.ui.design.r_1_1.aspx)]
 [!code-cs[ControlsUsingExpressions#3](~/add/codesnippet/csharp/t-system.web.ui.design.r_1_1.aspx)]
 [!code-xml[ControlsUsingExpressions#3](~/add/codesnippet/xml/t-system.web.ui.design.r_1_1.xml)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">A resource expression, used to initialize the expression editor sheet.</param>
        <param name="serviceProvider">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The initial <xref:System.Web.UI.Design.ResourceExpressionEditorSheet.ClassKey%2A> and <xref:System.Web.UI.Design.ResourceExpressionEditorSheet.ResourceKey%2A> property values are set using the input `expression` string. The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property is set using the input `serviceProvider` implementation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClassKey">
      <MemberSignature Language="C#" Value="public string ClassKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClassKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key that matches the filename for the resource in the project's global resource folder.</summary>
        <value>The key for a resource file in the global resource folder.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], global resource files are located in the App_GlobalResources folder.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public override string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetExpression() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a resource expression that is formed by the expression editor sheet property values.</summary>
        <returns>The resource expression string for the current settings in the sheet.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public override bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the resource expression string is valid.</summary>
        <value>
          <see langword="true" /> if the resource expression string is valid; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This base implementation always returns `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResourceKey">
      <MemberSignature Language="C#" Value="public string ResourceKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.Design.ResourceExpressionEditorSheet/ResourceKeyTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the resource, which is used as a key to find the resource value.</summary>
        <value>The name of the resource.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ResourceKey property is required for a resource expression; it indicates the name of the resource. The name of the resource is used at both run time and design time to look up a resource and assign it to a control property.  
  
 For example, if the <xref:System.Web.UI.WebControls.Label.Text%2A> property for a <xref:System.Web.UI.WebControls.Label> control is assigned to the resource expression `<%$ Resources:Strings, labelText $>`, the resource expression is evaluated and the <xref:System.Web.UI.WebControls.Label.Text%2A> field is assigned to the `labelText` resource value in the `Strings` class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>