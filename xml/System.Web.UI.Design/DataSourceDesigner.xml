<Type Name="DataSourceDesigner" FullName="System.Web.UI.Design.DataSourceDesigner">
  <TypeSignature Language="C#" Value="public class DataSourceDesigner : System.Web.UI.Design.ControlDesigner, System.Web.UI.Design.IDataSourceDesigner" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataSourceDesigner extends System.Web.UI.Design.ControlDesigner implements class System.Web.UI.Design.IDataSourceDesigner" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Design.ControlDesigner</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.Design.IDataSourceDesigner</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides design-time support in a design host for the <see cref="T:System.Web.UI.DataSourceControl" /> class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataSourceDesigner class is the base class for data source designers, such as the <xref:System.Web.UI.Design.WebControls.SqlDataSourceDesigner>, <xref:System.Web.UI.Design.WebControls.AccessDataSourceDesigner>, and <xref:System.Web.UI.Design.WebControls.ObjectDataSourceDesigner> classes. If you create a new data source control, you might also want to create a custom control designer for your control and derive it from the DataSourceDesigner class.  
  
 The DataSourceDesigner class has two event methods: the <xref:System.Web.UI.Design.DataSourceDesigner.OnDataSourceChanged%2A> and <xref:System.Web.UI.Design.DataSourceDesigner.OnSchemaRefreshed%2A> methods. Both of these events can be temporarily disabled with the <xref:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents%2A> method, which sets the <xref:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents%2A> property. The event methods can be enabled again with the <xref:System.Web.UI.Design.DataSourceDesigner.ResumeDataSourceEvents%2A> method.  
  
 There are two static methods that you can use to evaluate the equivalency of schemas or views without creating an instance of the class:  
  
-   The <xref:System.Web.UI.Design.DataSourceDesigner.SchemasEquivalent%2A> method compares two schemas.  
  
-   The <xref:System.Web.UI.Design.DataSourceDesigner.ViewSchemasEquivalent%2A> method compares the schemas of two views.  
  
   
  
## Examples  
 The following code example shows how to use a custom data source control with several other small custom classes, as listed in the following table.  
  
|Custom class|Derived from|  
|------------------|------------------|  
|`CustomDataSource`|<xref:System.Web.UI.WebControls.ObjectDataSource>|  
|`CustomDataSourceDesigner`|DataSourceDesigner|  
|`CustomDataSourceView`|<xref:System.Web.UI.WebControls.ObjectDataSourceView>|  
|`CustomDesignDataSourceView`|<xref:System.Web.UI.Design.DesignerDataSourceView>|  
|`BookListViewSchema`|<xref:System.Web.UI.Design.IDataSourceViewSchema>|  
|`CustomIDFieldSchema`|<xref:System.Web.UI.Design.IDataSourceFieldSchema>|  
|`CustomTitleFieldSchema`|<xref:System.Web.UI.Design.IDataSourceFieldSchema>|  
|`BookItem` (A two-field data structure.)||  
  
 After compiling the code example, open the .aspx page in Design view and then set the `DataSourceID` property to the ID of the custom data source control.  
  
 [!code-cs[DataSourceDesignerSample#1](~/add/codesnippet/csharp/t-system.web.ui.design.d_2_1.cs)]
 [!code-vb[DataSourceDesignerSample#1](~/add/codesnippet/visualbasic/t-system.web.ui.design.d_2_1.vb)]  
[!code-vb[DataSourceDesignerSample#6](~/add/codesnippet/visualbasic/t-system.web.ui.design.d_2_2.aspx)]
[!code-cs[DataSourceDesignerSample#6](~/add/codesnippet/csharp/t-system.web.ui.design.d_2_2.aspx)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSourceDesigner ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.Design.DataSourceDesigner" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DataSourceDesigner constructor is called by the design host at design time.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ActionLists">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.Design.DesignerActionListCollection ActionLists { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerActionListCollection ActionLists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a list of items that are used to create an action list menu at design time.</summary>
        <value>A <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> object containing the action list items for the control designer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to create a simple composite control with a <xref:System.Web.UI.WebControls.Label> control and a <xref:System.Web.UI.WebControls.TextBox> control, along with properties to set the `Text` properties on both internal controls, as well as the <xref:System.Web.UI.WebControls.WebControl.Width%2A> and <xref:System.Web.UI.WebControls.WebControl.BackColor%2A> properties of the <xref:System.Web.UI.WebControls.TextBox> control. An associated control designer class creates three <xref:System.ComponentModel.Design.DesignerActionMethodItem> commands, each of which sets two properties on the control, and whose settings can be rolled back with the undo functionality in the design host. Although the code example does not use a custom <xref:System.Web.UI.DataSourceControl> object, it illustrates how to override the ActionLists property.  
  
 [!code-vb[DesignerInvokeTransactedChange#1](~/add/codesnippet/visualbasic/p-system.web.ui.design.d_3_1.vb)]
 [!code-cs[DesignerInvokeTransactedChange#1](~/add/codesnippet/csharp/p-system.web.ui.design.d_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConfigure">
      <MemberSignature Language="C#" Value="public virtual bool CanConfigure { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanConfigure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Web.UI.Design.DataSourceDesigner.Configure%2A&gt; method can be called.</summary>
        <value>
          <see langword="true" /> if &lt;xref:System.Web.UI.Design.DataSourceDesigner.Configure%2A&gt; can be called; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CanConfigure property in a custom class to enable or disable design-time configuration for a specific data source.  
  
 A design host such as [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] uses the CanConfigure property to determine whether a command to configure the data source appears in the action list menu at design time.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanRefreshSchema">
      <MemberSignature Language="C#" Value="public virtual bool CanRefreshSchema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRefreshSchema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A&gt; method can be called.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A&gt; can be called; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the CanRefreshSchema property in a derived class to enable or disable the ability to refresh the schema at design time for a specific data source. If your application requires an invariant data structure and the schema will never change, you want the CanRefreshSchema property to return `false`.  
  
 A design host such as [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] uses the CanRefreshSchema property to determine whether a command to refresh the schema appears in the action list menu at design time.  
  
 In a design host such as [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], you can see the CanRefreshSchema property in action by completing the following process:  
  
1.  On your page, place a <xref:System.Web.UI.WebControls.SqlDataSource> or an <xref:System.Web.UI.WebControls.AccessDataSource> control.  
  
2.  In Design view, on the action list, click **Configure**.  
  
3.  Remove a few fields from the data source.  
  
4.  On the action list, click **Refresh Schema**.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public virtual void Configure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Configure() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Launches the data source configuration utility in the design host.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Configure method is not supported in the <xref:System.Web.UI.Design.DataSourceDesigner> class; however, it can be overridden by custom data source designers inheriting from the <xref:System.Web.UI.Design.DataSourceDesigner> class.  
  
 In a design host such as [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], you can see the Configure method in action by completing the following process:  
  
1.  Put a <xref:System.Web.UI.WebControls.SqlDataSource> or an <xref:System.Web.UI.WebControls.AccessDataSource> control on your page.  
  
2.  In Design view, on the action list, clicking **Configure**.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to invoke this method in the base class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any property of the associated data source changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDesignTimeHtml">
      <MemberSignature Language="C#" Value="public override string GetDesignTimeHtml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetDesignTimeHtml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the HTML markup for displaying the associated data source control at design time.</summary>
        <returns>The markup for the design-time display.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default implementation of the GetDesignTimeHtml method returns the result from the base <xref:System.Web.UI.Design.ControlDesigner.CreatePlaceHolderDesignTimeHtml%2A?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.DesignerDataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.DesignerDataSourceView GetView(string viewName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.DesignerDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">The name of the view.</param>
        <summary>Retrieves a <see cref="T:System.Web.UI.Design.DesignerDataSourceView" /> object that is identified by the view name.</summary>
        <returns>This implementation always returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In derived classes, if `viewName` does not exist, the GetView method should return `null`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetViewNames() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of the view names that are available in this data source.</summary>
        <returns>An array of view names.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; object provided by the calling object.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Design.DataSourceDesigner.DataSourceChanged" /> event when the properties of the data source have changed and the &lt;xref:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents%2A&gt; value is <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnDataSourceChanged method notifies the control designers of each control that is bound to the associated data source to refresh its control in the design host. The OnDataSourceChanged method can be suppressed with the <xref:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents%2A> method or by calling the <xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A> method with an argument of `false`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnSchemaRefreshed">
      <MemberSignature Language="C#" Value="protected virtual void OnSchemaRefreshed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSchemaRefreshed(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An &lt;xref:System.EventArgs&gt; object.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Design.DataSourceDesigner.SchemaRefreshed" /> event when the schema of the data source has changed and the &lt;xref:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents%2A&gt; value is <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnSchemaRefreshed method notifies the control designers of each control that is bound to the associated data source that the fields in the schema have changed. The OnSchemaRefreshed method can be suppressed with the <xref:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents%2A> method or by calling the <xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A> property with an argument of `false`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RefreshSchema">
      <MemberSignature Language="C#" Value="public virtual void RefreshSchema (bool preferSilent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RefreshSchema(bool preferSilent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferSilent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="preferSilent">
          <see langword="true" /> to allow events when refreshing the schema; <see langword="false" /> to disable the <see cref="E:System.Web.UI.Design.DataSourceDesigner.DataSourceChanged" /> and <see cref="E:System.Web.UI.Design.DataSourceDesigner.SchemaRefreshed" /> events when refreshing the schema.</param>
        <summary>Refreshes the schema from the data source, while optionally suppressing events.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RefreshSchema method is not supported in the <xref:System.Web.UI.Design.DataSourceDesigner> class. However, it is supported in derived classes, such as the <xref:System.Web.UI.Design.WebControls.XmlDataSourceDesigner> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to invoke this method in the base class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResumeDataSourceEvents">
      <MemberSignature Language="C#" Value="public virtual void ResumeDataSourceEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResumeDataSourceEvents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restores data source events after the data source events have been suppressed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Data source events can be suppressed by setting the <xref:System.Web.UI.Design.DataSourceDesigner.SuppressingDataSourceEvents%2A> property to `false` or by calling the <xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A> method with an argument of `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An attempt was made to invoke this method in the base class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SchemaRefreshed">
      <MemberSignature Language="C#" Value="public event EventHandler SchemaRefreshed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SchemaRefreshed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the schema has been refreshed.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SchemasEquivalent">
      <MemberSignature Language="C#" Value="public static bool SchemasEquivalent (System.Web.UI.Design.IDataSourceSchema schema1, System.Web.UI.Design.IDataSourceSchema schema2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SchemasEquivalent(class System.Web.UI.Design.IDataSourceSchema schema1, class System.Web.UI.Design.IDataSourceSchema schema2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema1" Type="System.Web.UI.Design.IDataSourceSchema" />
        <Parameter Name="schema2" Type="System.Web.UI.Design.IDataSourceSchema" />
      </Parameters>
      <Docs>
        <param name="schema1">The first schema to compare (derived from the <see cref="T:System.Web.UI.Design.IDataSourceSchema" />).</param>
        <param name="schema2">The second schema to compare.</param>
        <summary>Provides a value that indicates whether two schemas are equal.</summary>
        <returns>
          <see langword="true" /> if both schemas are equivalent; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Comparison of the two schemas is based on the views, as well as the names and types of the fields that are contained in the views. The SchemasEquivalent method can be used without an instance of the <xref:System.Web.UI.Design.DataSourceDesigner> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuppressDataSourceEvents">
      <MemberSignature Language="C#" Value="public virtual void SuppressDataSourceEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SuppressDataSourceEvents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Postpones all data source events until after the &lt;xref:System.Web.UI.Design.DataSourceDesigner.ResumeDataSourceEvents%2A&gt; method is called.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SuppressingDataSourceEvents">
      <MemberSignature Language="C#" Value="protected bool SuppressingDataSourceEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressingDataSourceEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="E:System.Web.UI.Design.DataSourceDesigner.DataSourceChanged" /> event or the &lt;xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A&gt; method occurs.</summary>
        <value>
          <see langword="true" /> if events are being suppressed; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SuppressingDataSourceEvents property can be set by calling the <xref:System.Web.UI.Design.DataSourceDesigner.SuppressDataSourceEvents%2A> or <xref:System.Web.UI.Design.DataSourceDesigner.RefreshSchema%2A> method with an argument of `true`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ViewSchemasEquivalent">
      <MemberSignature Language="C#" Value="public static bool ViewSchemasEquivalent (System.Web.UI.Design.IDataSourceViewSchema viewSchema1, System.Web.UI.Design.IDataSourceViewSchema viewSchema2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ViewSchemasEquivalent(class System.Web.UI.Design.IDataSourceViewSchema viewSchema1, class System.Web.UI.Design.IDataSourceViewSchema viewSchema2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewSchema1" Type="System.Web.UI.Design.IDataSourceViewSchema" />
        <Parameter Name="viewSchema2" Type="System.Web.UI.Design.IDataSourceViewSchema" />
      </Parameters>
      <Docs>
        <param name="viewSchema1">The first view to compare (derived from the <see cref="T:System.Web.UI.Design.IDataSourceViewSchema" />).</param>
        <param name="viewSchema2">The second view to compare.</param>
        <summary>Provides a value that determines whether two schema views are equal.</summary>
        <returns>
          <see langword="true" /> if both views are equivalent; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ViewSchemasEquivalent method can be used without an instance of the <xref:System.Web.UI.Design.DataSourceDesigner> class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>