<Type Name="ConnectionStringEditor" FullName="System.Web.UI.Design.ConnectionStringEditor">
  <TypeSignature Language="C#" Value="public class ConnectionStringEditor : System.Drawing.Design.UITypeEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConnectionStringEditor extends System.Drawing.Design.UITypeEditor" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Drawing.Design.UITypeEditor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a base class for a user interface to select and edit a connection string property at design time.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An instance of the ConnectionStringEditor class is a <xref:System.Drawing.Design.UITypeEditor> object that can be used at design time to select and edit a connection string expression and to assign the expression to a control property. For example, the <xref:System.Web.UI.WebControls.SqlDataSource> control uses the ConnectionStringEditor class at design time to set the value of the <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property.  
  
 Use the <xref:System.ComponentModel.EditorAttribute> attribute to associate the ConnectionStringEditor with a property. When the associated property is edited on the design surface, the designer host calls the <xref:System.Web.UI.Design.ConnectionStringEditor.EditValue%2A> method. The <xref:System.Web.UI.Design.ConnectionStringEditor.EditValue%2A> method displays a user interface for building the connection string expression and returns the connection string that is selected by the user. The <xref:System.Web.UI.Design.ConnectionStringEditor.GetEditStyle%2A> method indicates the display style of the user interface.  
  
   
  
## Examples  
 The following code example demonstrates how to associate an instance of the ConnectionStringEditor class with a property that is contained within a custom control. When the control property is edited in the design surface, the ConnectionStringEditor class provides the user interface to select and edit a connection string for the property value.  
  
 [!code-cs[System.Web.UI.Design.ConnectionStringEditor#2](~/add/codesnippet/csharp/t-system.web.ui.design.c_1_1.cs)]
 [!code-vb[System.Web.UI.Design.ConnectionStringEditor#2](~/add/codesnippet/visualbasic/t-system.web.ui.design.c_1_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConnectionStringEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.Design.ConnectionStringEditor" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EditValue">
      <MemberSignature Language="C#" Value="public override object EditValue (System.ComponentModel.ITypeDescriptorContext context, IServiceProvider provider, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object EditValue(class System.ComponentModel.ITypeDescriptorContext context, class System.IServiceProvider provider, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="provider" Type="System.IServiceProvider" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> to use to gain additional context information.</param>
        <param name="provider">A service provider object through which to obtain editing services.</param>
        <param name="value">An instance of the object being edited.</param>
        <summary>Edits the value of the specified object by using the specified service provider and context.</summary>
        <returns>The selected connection expression, as a string object; otherwise, if a connection expression was not selected, the same <paramref name="value" /> that was passed in.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Web.UI.Design.ConnectionStringEditor.EditValue%2A> method starts the user interface for editing the `value` object. The designer host calls the <xref:System.Web.UI.Design.ConnectionStringEditor.EditValue%2A> method when you edit the value of a property that the connection string editor is associated with. The input service provider is used to obtain any editing services that are required within the <xref:System.Web.UI.Design.ConnectionStringEditor.EditValue%2A> method.  
  
 If an <xref:System.ComponentModel.Design.Data.IDataEnvironment> service implementation is supported in the specified context, the <xref:System.Web.UI.Design.ConnectionStringEditor.EditValue%2A> method initializes a <xref:System.Web.UI.WebControls.ListBox> control, which prompts you to select an existing connection expression or build a new connection expression. If an <xref:System.ComponentModel.Design.Data.IDataEnvironment> service implementation is not supported in the specified context, the <xref:System.Web.UI.Design.ConnectionStringEditor.EditValue%2A> method displays a simple instance of the <xref:System.Windows.Forms.Form> class, which prompts you to enter the connection expression string.  
  
 If you cancel without selecting a connection expression string, the returned object is the same as the `value` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetEditStyle">
      <MemberSignature Language="C#" Value="public override System.Drawing.Design.UITypeEditorEditStyle GetEditStyle (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Design.UITypeEditorEditStyle GetEditStyle(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Design.UITypeEditorEditStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> to use to gain additional context information.</param>
        <summary>Returns the editing style that is associated with the connection string editor for the specified context.</summary>
        <returns>An <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> enumeration value that indicates the editing style for the provided user interface.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the <xref:System.Web.UI.Design.ConnectionStringEditor.GetEditStyle%2A> method of the <xref:System.Web.UI.Design.ConnectionStringEditor> class returns the <xref:System.Drawing.Design.UITypeEditorEditStyle> value. If an <xref:System.ComponentModel.Design.Data.IDataEnvironment> service implementation is supported in the specified context, the <xref:System.Web.UI.Design.ConnectionStringEditor.GetEditStyle%2A> method returns the <xref:System.Drawing.Design.UITypeEditorEditStyle> value.  
  
 If the <xref:System.Web.UI.Design.ConnectionStringEditor.GetEditStyle%2A> method is not supported in the specified context, the <xref:System.Web.UI.Design.ConnectionStringEditor.GetEditStyle%2A> method returns the <xref:System.Drawing.Design.UITypeEditorEditStyle> value.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProviderName">
      <MemberSignature Language="C#" Value="protected virtual string GetProviderName (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetProviderName(object instance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">A <see cref="T:System.Web.UI.Design.ConnectionStringEditor" /> or an instance of a derived class.</param>
        <summary>Returns the provider name for the provided instance of the <see cref="T:System.Web.UI.Design.ConnectionStringEditor" /> class.</summary>
        <returns>Always an empty string ("").</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetProviderName method gets the provider name for the current instance of the <xref:System.Web.UI.Design.ConnectionStringEditor> class. For example, in the <xref:System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor> class, which is derived from <xref:System.Web.UI.Design.ConnectionStringEditor> class, the GetProviderName method returns the provider name.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetProviderName">
      <MemberSignature Language="C#" Value="protected virtual void SetProviderName (object instance, System.ComponentModel.Design.Data.DesignerDataConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetProviderName(object instance, class System.ComponentModel.Design.Data.DesignerDataConnection connection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="connection" Type="System.ComponentModel.Design.Data.DesignerDataConnection" />
      </Parameters>
      <Docs>
        <param name="instance">A <see cref="T:System.Web.UI.Design.ConnectionStringEditor" /> or an instance of a derived class.</param>
        <param name="connection">A <see cref="T:System.ComponentModel.Design.Data.DesignerDataConnection" />.</param>
        <summary>Puts the provider name on the specified instance of the <see cref="T:System.Web.UI.Design.ConnectionStringEditor" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SetProviderName method sets the provider name on the `instance` parameter. For example, in the `SqlDataSourceConnectionStringEditor`, which derives from the <xref:System.Web.UI.Design.ConnectionStringEditor> class, this either sets the provider name or adds an <xref:System.Web.UI.ExpressionBinding> object, if the connection is a configured connection. In this implementation, the SetProviderName method does nothing.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>