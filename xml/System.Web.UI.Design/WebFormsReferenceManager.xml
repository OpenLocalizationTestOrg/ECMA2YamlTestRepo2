<Type Name="WebFormsReferenceManager" FullName="System.Web.UI.Design.WebFormsReferenceManager">
  <TypeSignature Language="C#" Value="public abstract class WebFormsReferenceManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WebFormsReferenceManager extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a base class for accessing the types, directives, and controls in the current Web project document. This class must be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WebFormsReferenceManager base class is implemented by designer hosts to provide access to types, directives, and user controls defined in a Web project document. A control designer class can use the WebFormsReferenceManager to access the definitions in the current document, and to add a new tag prefix to the current document.  
  
 You access the WebFormsReferenceManager services supplied by the designer host through the <xref:System.Web.UI.Design.WebFormsRootDesigner.ReferenceManager%2A> property of a <xref:System.Web.UI.Design.WebFormsRootDesigner> implementation. The <xref:System.Web.UI.Design.WebFormsRootDesigner> implementation can be accessed in two ways:  
  
-   Classes deriving from <xref:System.Web.UI.Design.ControlDesigner> can use the <xref:System.Web.UI.Design.ControlDesigner.RootDesigner%2A> property to access a <xref:System.Web.UI.Design.WebFormsRootDesigner> implementation supplied by the designer host. The WebFormsReferenceManager implementation is supplied through the <xref:System.Web.UI.Design.WebFormsRootDesigner.ReferenceManager%2A> property of <xref:System.Web.UI.Design.ControlDesigner.RootDesigner%2A> property.  
  
-   Other designer classes can access the <xref:System.Web.UI.Design.WebFormsRootDesigner> implementation by first obtaining the <xref:System.ComponentModel.Design.IDesignerHost> services implementation through the designer component's <xref:System.ComponentModel.Component.Site%2A>, and then calling the <xref:System.ComponentModel.Design.IDesignerHost.GetDesigner%2A> method using the designer host <xref:System.ComponentModel.Design.IDesignerHost.RootComponent%2A> property.  
  
    > [!NOTE]
    >  WebFormsReferenceManager replaces the obsolete interface <xref:System.Web.UI.Design.IWebFormReferenceManager>. Older designer hosts may only support the <xref:System.Web.UI.Design.IWebFormReferenceManager> interface implementation. Check that the <xref:System.Web.UI.Design.WebFormsRootDesigner> and WebFormsReferenceManager implementations supplied by the designer host are not `null` to ensure the designer host implements the <xref:System.Web.UI.Design.WebFormsRootDesigner> and WebFormsReferenceManager classes.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebFormsReferenceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebFormsReferenceManager" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the <xref:System.Web.UI.Design.WebFormsReferenceManager> class is abstract, you cannot create an instance of <xref:System.Web.UI.Design.WebFormsReferenceManager> directly using the constructor.  
  
 When deriving from the <xref:System.Web.UI.Design.WebFormsReferenceManager> class, override the constructor to implement custom initialization actions for your reference manager implementation.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRegisterDirectives">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ICollection GetRegisterDirectives ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ICollection GetRegisterDirectives() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the register directives for the current project document.</summary>
        <returns>A collection of strings representing the register directives defined in the current document.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTagPrefix">
      <MemberSignature Language="C#" Value="public abstract string GetTagPrefix (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTagPrefix(class System.Type objectType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType">The type of the object.</param>
        <summary>Gets the tag prefix for the specified object type.</summary>
        <returns>The tag prefix for the specified object type, if found; otherwise, <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public abstract Type GetType (string tagPrefix, string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string tagPrefix, string tagName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagPrefix" Type="System.String" />
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagPrefix">The tag prefix of the type to retrieve.</param>
        <param name="tagName">The tag name of the type to retrieve.</param>
        <summary>Gets the object type with the specified tag prefix and tag name.</summary>
        <returns>The &lt;xref:System.Type&gt; of the object with the specified tag prefix and name, if found; otherwise, <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetUserControlPath">
      <MemberSignature Language="C#" Value="public abstract string GetUserControlPath (string tagPrefix, string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUserControlPath(string tagPrefix, string tagName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagPrefix" Type="System.String" />
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagPrefix">The tag prefix of the user control to retrieve.</param>
        <param name="tagName">The tag name of the user control to retrieve.</param>
        <summary>Gets the relative URL path for the user control with the specified tag prefix and tag name.</summary>
        <returns>A string representing the relative URL path for the specified user control, if found; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GetUserControlPath uses the tag prefix and name to locate the user control register directive in the current document, and returns the `src` attribute value defined in the register directive.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RegisterTagPrefix">
      <MemberSignature Language="C#" Value="public abstract string RegisterTagPrefix (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string RegisterTagPrefix(class System.Type objectType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType">The type to add a tag prefix for in the current document.</param>
        <summary>Adds a tag prefix for the specified type.</summary>
        <returns>The tag prefix string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the tag prefix already exists, then a new register directive is not added.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>