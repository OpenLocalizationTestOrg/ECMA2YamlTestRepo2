<Type Name="ExpressionsCollectionConverter" FullName="System.Web.UI.Design.ExpressionsCollectionConverter">
  <TypeSignature Language="C#" Value="public class ExpressionsCollectionConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExpressionsCollectionConverter extends System.ComponentModel.TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a type converter for expression binding collections.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ExpressionsCollectionConverter class converts an <xref:System.Web.UI.ExpressionBindingCollection> to a string for the property-editing grid at design time, which always appears as an empty string ("").  
  
 A designer host, such as [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], uses the <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> class implementations with the <xref:System.Web.UI.Design.ExpressionsCollectionEditor> and ExpressionsCollectionConverter classes to set the expression bindings for control properties at design time, and the <xref:System.Web.UI.Design.ControlPersister> to persist the expressions for run time. Expression strings reference a localizable resource, an application setting, a connection string, or a custom expression type. The expression string is bound to the control property at design time, and then used at run time to determine the value for the property.  
  
> [!NOTE]
>  You should never access a type converter directly. This implementation of <xref:System.ComponentModel.TypeConverter> is intended only for use by an <xref:System.Web.UI.ExpressionBindingCollection> object at design time.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionsCollectionConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.Design.ExpressionsCollectionConverter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  You should never access a type converter directly. This implementation of <xref:System.ComponentModel.TypeConverter> is intended only for use by an <xref:System.Web.UI.ExpressionBindingCollection> object at design time.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object that indicates the component or control the expression binding collection belongs to.</param>
        <param name="culture">A &lt;xref:System.Globalization.CultureInfo&gt; object that can be used to provide additional culture information.</param>
        <param name="value">The object to convert.</param>
        <param name="destinationType">The type to convert to.</param>
        <summary>Converts an expression binding collection to the specified type.</summary>
        <returns>If <paramref name="destinationType" /> is not of type &lt;xref:System.String&gt;, the object produced by the type conversion; otherwise, if <paramref name="destinationType" /> is a string, an empty string ("").</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  You should never access a type converter directly. This implementation of <xref:System.ComponentModel.TypeConverter> is intended only for use by an <xref:System.Web.UI.ExpressionBindingCollection> object at design time.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>