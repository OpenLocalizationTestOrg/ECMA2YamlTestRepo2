<Type Name="InstanceContextIdleCallback" FullName="System.ServiceModel.Dispatcher.InstanceContextIdleCallback">
  <TypeSignature Language="C#" Value="public delegate void InstanceContextIdleCallback(InstanceContext instanceContext);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed InstanceContextIdleCallback extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="instanceContext">The instance context that has finished processing.</param>
    <summary>Represents the method that is called when an &lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt; object has finished processing.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use an InstanceContextIdleCallback to notify the [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] runtime that an InstanceContextIdleCallback object has finished processing. When the InstanceContextIdleCallback object notifies the runtime that the InstanceContextIdleCallback has finished its work, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] calls <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A?displayProperty=fullName> once again. This cycle continues until <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A?displayProperty=fullName> returns `true` and the context is closed and recycled.  
  
 For more information, see <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A>.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
</Type>