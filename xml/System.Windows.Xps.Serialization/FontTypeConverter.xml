<Type Name="FontTypeConverter" FullName="System.Windows.Xps.Serialization.FontTypeConverter">
  <TypeSignature Language="C#" Value="public class FontTypeConverter : System.ComponentModel.ExpandableObjectConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FontTypeConverter extends System.ComponentModel.ExpandableObjectConverter" />
  <AssemblyInfo>
    <AssemblyName>ReachFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.ExpandableObjectConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides type converters for converting <see cref="T:System.Windows.Media.GlyphRun" /> objects to and from objects of other types.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Access this class only through the <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> method. See the base classes <xref:System.ComponentModel.TypeConverter> and <xref:System.ComponentModel.ExpandableObjectConverter> for other important usage notes.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FontTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.FontTypeConverter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Access this class only through the <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> method. See the base classes <xref:System.ComponentModel.TypeConverter> and <xref:System.ComponentModel.ExpandableObjectConverter> for other important usage notes.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An object that provides contextual information.</param>
        <param name="sourceType">The type of object to convert.</param>
        <summary>Returns a value that indicates whether this converter can convert an instance of a specified type to a <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
        <returns>
          <see langword="true" /> if objects of the specified type can be converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As implemented in this class, this method returns `true` only if `sourceType` is <xref:System.Uri>.  
  
 The `context` parameter is not used. See Notes for Inheritors.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An object that provides contextual information.</param>
        <param name="destinationType">The type of object that you want to convert a glyph run to.</param>
        <summary>Returns a value that indicates whether this <see cref="T:System.Windows.Xps.Serialization.FontTypeConverter" /> can convert a <see cref="T:System.Windows.Media.GlyphRun" /> to an instance of a specified type.</summary>
        <returns>
          <see langword="true" /> if conversion is possible; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As implemented in this class, this method returns `true` only if `destinationType` is <xref:System.Uri>.  
  
 The `context` parameter is not used. See Notes for Inheritors.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">An object that provides contextual information.</param>
        <param name="culture">The language and culture that are used during the conversion.</param>
        <param name="value">The object that is converted.</param>
        <summary>Converts a specified object to a <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
        <returns>The new <see cref="T:System.Windows.Media.GlyphRun" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not implemented in this classâ€”except to throw the exceptions. See Notes for Inheritors.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">The <paramref name="value" /> is not a type that can be converted.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">An object that provides contextual information.</param>
        <param name="culture">The language and culture that are used during the conversion.</param>
        <param name="value">The object you want to convert.</param>
        <param name="destinationType">The type that you want `value` converted to.</param>
        <summary>Converts a <see cref="T:System.Windows.Media.GlyphRun" /> to an object of the specified type.</summary>
        <returns>The new &lt;xref:System.Object&gt; of the designated type. As implemented in this class, this must be a &lt;xref:System.Uri&gt;. It expresses the [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)] of the font subset that is used by the <paramref name="value" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As implemented in this class, `value` must be a <xref:System.Windows.Media.GlyphRun>.  
  
 As implemented in this class, `destinationType` must be a <xref:System.Uri> or the <xref:System.NotSupportedException> is thrown.  
  
 The `culture` parameter is not used. See Notes for Inheritors.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The <paramref name="destinationType" /> is not a type that <paramref name="value" /> can be converted to.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Windows.Xps.XpsSerializationException">An error occurs when serializing the glyph run.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.PropertyDescriptorCollection GetProperties (System.ComponentModel.ITypeDescriptorContext context, object value, Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.PropertyDescriptorCollection GetProperties(class System.ComponentModel.ITypeDescriptorContext context, object value, class System.Attribute[] attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="attributes" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="context">An object that provides contextual information.</param>
        <param name="value">An object that you need property descriptions for.</param>
        <param name="attributes">An array of attributes that filter the returned collection in order to exclude irrelevant properties.</param>
        <summary>Gets a collection of property descriptions for the specified type.</summary>
        <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the property descriptions that are exposed for the component; or <see langword="null" /> if no property descriptions are returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is not implemented in this classâ€”except to throw the exception. See Notes for Inheritors.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>