<Type Name="X509CertificateInitiatorServiceCredential" FullName="System.ServiceModel.Security.X509CertificateInitiatorServiceCredential">
  <TypeSignature Language="C#" Value="public sealed class X509CertificateInitiatorServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit X509CertificateInitiatorServiceCredential extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the settings used by the service to validate the certificate presented by the clients. It also contains a certificate for the service to use for encrypting responses or callbacks for clients when <see langword="MutualCertificateDuplex" /> message security authentication mode is used.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The certificate set in this class is used to encrypt messages to the client only for bindings that are configured with `MutualCertificateDuplex` message security authentication mode.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Authentication">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.X509ClientCertificateAuthentication Authentication { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.X509ClientCertificateAuthentication Authentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.X509ClientCertificateAuthentication</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the settings used to validate the certificate presented by the client during authentication.</summary>
        <value>The settings used to validate the certificate presented by the client during authentication.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code shows how to use this property to set the certificate authentication properties.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Certificate">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the certificate to use in <see langword="MutualCertificateDuplex" /> message security authentication mode.</summary>
        <value>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to use to encrypt messages sent to the client by the service in the uncorrelated duplex transport case if the <see langword="MutualCertificateDuplex" /> message security authentication mode is used.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is used for bindings that are configured to message security mode when `MutualCertificateDuplex` message security authentication mode is used.  
  
   
  
## Examples  
 The following code shows how to use this property to get the certificate.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">An attempt was made to set a read-only credential.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetCertificate">
      <MemberSignature Language="C#" Value="public void SetCertificate (string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCertificate(string subjectName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.StoreName storeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subjectName" Type="System.String" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
      </Parameters>
      <Docs>
        <param name="subjectName">The subject distinguished name.</param>
        <param name="storeLocation">The location of the certificate store that the service uses to obtain the certificate.</param>
        <param name="storeName">The name of the X.509 certificate store to open.</param>
        <summary>Enables you to specify the certificate to use for encrypting messages for the client by specifying the subject distinguished name. This setting is used only by bindings that are configured with the <see langword="MutualCertificateDuplex" /> message security authentication mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] the `subjectName` parameter, see <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName%2A>.  
  
 Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation>: the certificate store assigned to the local machine (default).  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation>: the certificate store used by the current user.  
  
 If the client application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation>. If the client application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation>.  
  
 Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.  
  
   
  
## Examples  
 The following code shows how to use this method to set the certificate.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetCertificate">
      <MemberSignature Language="C#" Value="public void SetCertificate (System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCertificate(valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.StoreName storeName, valuetype System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
        <Parameter Name="findType" Type="System.Security.Cryptography.X509Certificates.X509FindType" />
        <Parameter Name="findValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="storeLocation">The location of the certificate store that the service uses to obtain the certificate.</param>
        <param name="storeName">The name of the X.509 certificate store to open.</param>
        <param name="findType">The type of X.509 search to be executed.</param>
        <param name="findValue">The value to search for in the X.509 certificate store.</param>
        <summary>Specifies the certificate to use for encrypting messages for the client. This setting is used only by bindings that are configured with the <see langword="MutualCertificateDuplex" /> message security authentication mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation>: the certificate store assigned to the local machine (default).  
  
-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation>: the certificate store used by the current user.  
  
 If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation>.  
  
 Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.  
  
 Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration.  
  
 The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown.  
  
   
  
## Examples  
 The following code shows how to use this method to set the certificate.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>