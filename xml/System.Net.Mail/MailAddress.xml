<Type Name="MailAddress" FullName="System.Net.Mail.MailAddress">
  <TypeSignature Language="C#" Value="public class MailAddress" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MailAddress extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the address of an electronic mail sender or recipient.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MailAddress class is used by the <xref:System.Net.Mail.SmtpClient> and <xref:System.Net.Mail.MailMessage> classes to store address information for e-mail messages.  
  
 A mail address is composed of a <xref:System.Net.Mail.MailAddress.User%2A> name, <xref:System.Net.Mail.MailAddress.Host%2A> name and optionally, a <xref:System.Net.Mail.MailAddress.DisplayName%2A>. The <xref:System.Net.Mail.MailAddress.DisplayName%2A> can contain non-ASCII characters if you encode them.  
  
 The MailAddress class supports the following mail address formats:  
  
-   A simple address format of `user@host`. If a <xref:System.Net.Mail.MailAddress.DisplayName%2A> is not set, this is the mail address format generated.  
  
-   A standard quoted display name format of `"display name" <user@host>`. If a <xref:System.Net.Mail.MailAddress.DisplayName%2A> is set, this is the format generated.  
  
-   Angle brackets are added around the <xref:System.Net.Mail.MailAddress.User%2A> name, <xref:System.Net.Mail.MailAddress.Host%2A> name for `"display name" user@host` if these are not included.  
  
-   Quotes are added around the <xref:System.Net.Mail.MailAddress.DisplayName%2A> for `display name <user@host>`, if these are not included.  
  
-   Unicode characters are supported in the <xref:System.Net.Mail.MailAddress.DisplayName%2A>. property.  
  
-   A <xref:System.Net.Mail.MailAddress.User%2A> name with quotes. For example, `"user name"@host`.  
  
-   Consecutive and trailing dots in user names. For example, `user...name..@host`.  
  
-   Bracketed domain literals. For example, `<user@[my domain]>`.  
  
-   Comments. For example, `(comment)"display name"(comment)<(comment)user(comment)@(comment)domain(comment)>(comment)`. Comments are removed before transmission.  
  
 A comma is used to separate elements in a list of mail addresses. As a result, a comma should not be used in unquoted display names in a list. The following mail addresses would be allowed  
  
 `"John, Doe" <user@host>, "Bob, Smith" <user2@host>`  
  
 The following mail address would not be allowed:  
  
 `John, Doe <user@host>, Bob, Smith <user2@host>`  
  
 Quotes can be embedded in a quoted string, but they must be escaped. The following mail addresses would be allowed  
  
 `"John \"Jr\" Doe" <user@host>`  
  
 `"\"John \\\"Jr\\\" Doe\" <user@host>"`  
  
 The following mail address would not be allowed:  
  
 `"John "Jr" Doe" <user@host>`  
  
 When the username is note quoted, all text between the start of the string (or comma) and the address are considered part of the <xref:System.Net.Mail.MailAddress.DisplayName%2A>, including comments.  
  
 -- Example: (non comment) unquoted display (non comment) name (non comment) \<user@host>  
  
 Although the MailAddress class accepts a mail address as valid, other mail servers may not accept the mail address.  
  
 The MailAddress class does not support the following mail address formats:  
  
 Mixed quoted and unquoted display names. For example, `display "name" <user@host>`  
  
 Groups, as defined in RFC 2822 Section 3.4 published by the IETF.  
  
 The obsolete user name formats of `"user"."name"@host, user."name"@host` or `"user".name@host`  
  
   
  
## Examples  
 The following code example demonstrates sending an e-mail message by using the <xref:System.Net.Mail.SmtpClient>, MailAddress, and <xref:System.Net.Mail.MailMessage> classes.  
  
 [!code-cpp[NclMailSync#10](~/add/codesnippet/cpp/t-system.net.mail.mailad_1_1.cpp)]
 [!code-cs[NclMailSync#10](~/add/codesnippet/csharp/t-system.net.mail.mailad_1_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MailAddress (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string address) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">A &lt;xref:System.String&gt; that contains an e-mail address.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.MailAddress" /> class using the specified address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `address` parameter can contain a display name and the associated e-mail address if you enclose the address in angle brackets. For example:  
  
 `"Tom Smith <tsmith@contoso.com>"`  
  
 White space is permitted between the display name and the angle brackets.  
  
 The following table shows the property values for a <xref:System.Net.Mail.MailAddress> object constructed using the preceding example address.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Net.Mail.MailAddress.DisplayName%2A>|`"Tom Smith"`|  
|<xref:System.Net.Mail.MailAddress.Host%2A>|`"contoso.com"`|  
|<xref:System.Net.Mail.MailAddress.User%2A>|`"tsmith"`|  
|<xref:System.Net.Mail.MailAddress.Address%2A>|`"tsmith@contoso.com"`|  
  
   
  
## Examples  
 The following code example uses this constructor to create a <xref:System.Net.Mail.MailAddress> object for the <xref:System.Net.Mail.MailMessage.Bcc%2A> recipient of an e-mail message.  
  
 [!code-cpp[NclMailSync#9](~/add/codesnippet/cpp/m-system.net.mail.mailad_1_1.cpp)]
 [!code-cs[NclMailSync#9](~/add/codesnippet/csharp/m-system.net.mail.mailad_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> is &lt;xref:System.String?displayProperty=fullName&gt; ("").</exception>
        <exception cref="T:System.FormatException">
          <paramref name="address" /> is not in a recognized format.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MailAddress (string address, string displayName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string address, string displayName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">A &lt;xref:System.String&gt; that contains an e-mail address.</param>
        <param name="displayName">A &lt;xref:System.String&gt; that contains the display name associated with `address`. This parameter can be <see langword="null" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.MailAddress" /> class using the specified address and display name.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leading and trailing white space in the display name is preserved.  
  
 If `displayName` contains non-ASCII characters, the iso-8859-1 character set is used for the `displayName` encoding. Encoding non-ASCII characters is discussed in RFC 1522, which is available at [http://www.ietf.org](http://www.ietf.org).  
  
 If `address` contains a display name, and `displayName` is not `null` and is not equal to <xref:System.String?displayProperty=fullName>, `displayName` overrides the value specified in `address`.  
  
   
  
## Examples  
 The following code example uses this constructor to create <xref:System.Net.Mail.MailAddress> instances for the sender and recipient of an e-mail message.  
  
 [!code-cpp[NclMailSync#9](~/add/codesnippet/cpp/m-system.net.mail.mailad_0_1.cpp)]
 [!code-cs[NclMailSync#9](~/add/codesnippet/csharp/m-system.net.mail.mailad_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> is &lt;xref:System.String?displayProperty=fullName&gt; ("").</exception>
        <exception cref="T:System.FormatException">
          <paramref name="address" /> is not in a recognized format.  
  
 -or-  
  
 <paramref name="address" /> contains non-ASCII characters.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MailAddress (string address, string displayName, System.Text.Encoding displayNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string address, string displayName, class System.Text.Encoding displayNameEncoding) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="displayNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="address">A &lt;xref:System.String&gt; that contains an e-mail address.</param>
        <param name="displayName">A &lt;xref:System.String&gt; that contains the display name associated with `address`.</param>
        <param name="displayNameEncoding">The &lt;xref:System.Text.Encoding&gt; that defines the character set used for `displayName`.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Mail.MailAddress" /> class using the specified address, display name, and encoding.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leading and trailing white space in the display name is preserved.  
  
 If `address` contains a display name, and `displayName` is not `null` and is not equal to <xref:System.String.Empty?displayProperty=fullName>, `displayName` overrides the value specified in `address`.  
  
 The MailAddress method does not check if the `displayName` parameter is valid. This method removes surrounding quotes not displayed by the <xref:System.Net.Mail.MailAddress.DisplayName%2A> property. Quotes will be added before transmission, except where <xref:System.Text.Encoding.ASCII%2A> or <xref:System.Text.Encoding.Unicode%2A> is specified in the `displayNameEncoding` parameter. The encoding specified in the `displayNameEncoding` parameter will be applied to the <xref:System.Net.Mail.MailAddress.DisplayName%2A> property before transmission <xref:System.Text.Encoding.ASCII%2A> or <xref:System.Text.Encoding.Unicode%2A> is specified in the `displayNameEncoding` parameter. <xref:System.Text.Encoding.UTF8%2A> is the default encoding if none is specified.  
  
 For more information on supported mail address formats, see <xref:System.Net.Mail.MailAddress>.  
  
   
  
## Examples  
 The following code example uses this constructor to create <xref:System.Net.Mail.MailAddress> instances for the sender of an e-mail message.  
  
 [!code-cs[NclMailASync#2](~/add/codesnippet/csharp/3eef20fd-9220-4c25-85a3-_1.cs)]
 [!code-cpp[NclMailASync#2](~/add/codesnippet/cpp/3eef20fd-9220-4c25-85a3-_1.cpp)]
 [!code-vb[NclMailASync#2](~/add/codesnippet/visualbasic/3eef20fd-9220-4c25-85a3-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="displayName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> is &lt;xref:System.String.Empty?displayProperty=fullName&gt; ("").  
  
 -or-  
  
 <paramref name="displayName" /> is &lt;xref:System.String.Empty?displayProperty=fullName&gt; ("").</exception>
        <exception cref="T:System.FormatException">
          <paramref name="address" /> is not in a recognized format.  
  
 -or-  
  
 <paramref name="address" /> contains non-ASCII characters.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public string Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the e-mail address specified when this instance was created.</summary>
        <value>A &lt;xref:System.String&gt; that contains the e-mail address.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property does not include the <xref:System.Net.Mail.MailAddress.DisplayName%2A> information.  
  
   
  
## Examples  
 The following code example displays the address for an e-mail message recipient.  
  
 [!code-cpp[NclMailSync#10](~/add/codesnippet/cpp/p-system.net.mail.mailad_2_1.cpp)]
 [!code-cs[NclMailSync#10](~/add/codesnippet/csharp/p-system.net.mail.mailad_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display name composed from the display name and address information specified when this instance was created.</summary>
        <value>A &lt;xref:System.String&gt; that contains the display name; otherwise, &lt;xref:System.String?displayProperty=fullName&gt; ("") if no display name information was specified when this instance was created.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Display names that contain non-ASCII characters are returned in human-readable form. Use the <xref:System.Net.Mail.MailAddress.ToString%2A> method to get the encoded form of the DisplayName.  
  
 Some software programs that are used to read e-mail display the DisplayName property value instead of, or in addition to, the e-mail address.  
  
   
  
## Examples  
 The following code example displays the DisplayName for the recipient of an e-mail message.  
  
 [!code-cpp[NclMailSync#9](~/add/codesnippet/cpp/p-system.net.mail.mailad_3_1.cpp)]
 [!code-cs[NclMailSync#9](~/add/codesnippet/csharp/p-system.net.mail.mailad_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.Net.Mail.MailAddress" /> instance to compare to the current instance.</param>
        <summary>Compares two mail addresses.</summary>
        <returns>
          <see langword="true" /> if the two mail addresses are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash value for a mail address.</summary>
        <returns>An integer hash value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetHashCode method returns a hash code of the mail address. This value can be used as a key in hash tables.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the host portion of the address specified when this instance was created.</summary>
        <value>A &lt;xref:System.String&gt; that contains the name of the host computer that accepts e-mail for the &lt;xref:System.Net.Mail.MailAddress.User%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a typical e-mail address, the host string includes all information following the "`@`" sign. For example, in `"tsmith@contoso.com"`, the host is `"contoso.com"`.  
  
   
  
## Examples  
 The following code example displays the destination of an e-mail message.  
  
 [!code-cpp[NclMailSync#4](~/add/codesnippet/cpp/p-system.net.mail.mailad_0_1.cpp)]
 [!code-cs[NclMailSync#4](~/add/codesnippet/csharp/p-system.net.mail.mailad_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of this instance.</summary>
        <returns>A &lt;xref:System.String&gt; that contains the contents of this <see cref="T:System.Net.Mail.MailAddress" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The string returned by this method is not necessarily identical to the string specified when the instance was created. If the <xref:System.Net.Mail.MailAddress.DisplayName%2A> property is not `null` and not equal to <xref:System.String.Empty?displayProperty=fullName> (""), ToString returns a string composed using the following syntax:  
  
 <xref:System.Net.Mail.MailAddress.DisplayName%2A> \<<xref:System.Net.Mail.MailAddress.User%2A>@<xref:System.Net.Mail.MailAddress.Host%2A>>  
  
 If <xref:System.Net.Mail.MailAddress.DisplayName%2A> is `null` or is equal to <xref:System.String.Empty?displayProperty=fullName>, ToString returns the value of the <xref:System.Net.Mail.MailAddress.Address%2A> property.  
  
   
  
## Examples  
 The following code example displays the destination of an e-mail message.  
  
 [!code-cpp[NclMailSync#7](~/add/codesnippet/cpp/m-system.net.mail.mailad_2_1.cpp)]
 [!code-cs[NclMailSync#7](~/add/codesnippet/csharp/m-system.net.mail.mailad_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public string User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string User" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the user information from the address specified when this instance was created.</summary>
        <value>A &lt;xref:System.String&gt; that contains the user name portion of the &lt;xref:System.Net.Mail.MailAddress.Address%2A&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In a typical e-mail address, the user string includes all information preceding the "`@`" sign. For example, in `"tsmith@contoso.com"`, the user is `"tsmith"`.  
  
   
  
## Examples  
 The following code example displays the destination of an e-mail message.  
  
 [!code-cpp[NclMailSync#4](~/add/codesnippet/cpp/p-system.net.mail.mailad_1_1.cpp)]
 [!code-cs[NclMailSync#4](~/add/codesnippet/csharp/p-system.net.mail.mailad_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>