<Type Name="XmlDocumentType" FullName="System.Xml.XmlDocumentType">
  <TypeSignature Language="C#" Value="public class XmlDocumentType : System.Xml.XmlLinkedNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDocumentType extends System.Xml.XmlLinkedNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlLinkedNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the document type declaration.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The XmlDocumentType class can be used to return information about a document type declaration. Use the <xref:System.Xml.XmlDocument.CreateDocumentType%2A?displayProperty=fullName> method to create an XmlDocumentType object.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlDocumentType (string name, string publicId, string systemId, string internalSubset, System.Xml.XmlDocument doc);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string name, string publicId, string systemId, string internalSubset, class System.Xml.XmlDocument doc) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
        <Parameter Name="internalSubset" Type="System.String" />
        <Parameter Name="doc" Type="System.Xml.XmlDocument" />
      </Parameters>
      <Docs>
        <param name="name">The qualified name; see the &lt;xref:System.Xml.XmlDocumentType.Name%2A&gt; property.</param>
        <param name="publicId">The public identifier; see the &lt;xref:System.Xml.XmlDocumentType.PublicId%2A&gt; property.</param>
        <param name="systemId">The system identifier; see the &lt;xref:System.Xml.XmlDocumentType.SystemId%2A&gt; property.</param>
        <param name="internalSubset">The DTD internal subset; see the &lt;xref:System.Xml.XmlDocumentType.InternalSubset%2A&gt; property.</param>
        <param name="doc">The parent document.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDocumentType" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not instantiate an <xref:System.Xml.XmlDocumentType> directly; instead, use members such as <xref:System.Xml.XmlDocument.DocumentType%2A> to obtain one.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode CloneNode(bool deep) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">
          <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. For document type nodes, the cloned node always includes the subtree, regardless of the parameter setting.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>The cloned node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method serves as a copy constructor for nodes. The cloned node has no parent (<xref:System.Xml.XmlNode.ParentNode%2A> returns `null`).  
  
 To see how this method behaves with other node types, see <xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Entities">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNamedNodeMap Entities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNamedNodeMap Entities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNamedNodeMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of <see cref="T:System.Xml.XmlEntity" /> nodes declared in the document type declaration.</summary>
        <value>An <see cref="T:System.Xml.XmlNamedNodeMap" /> containing the <see langword="XmlEntity" /> nodes. The returned <see langword="XmlNamedNodeMap" /> is read-only.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The order in which the entities are returned is not based on the order in which these items may appear in the document. The order is also not guaranteed to be the same between similar documents, or between different implementations or versions of the class.  
  
   
  
## Examples  
 The following example displays information about the entities declared in the XML document.  
  
 [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_1_1.cs)]
 [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_1_1.cpp)]
 [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_1_1.vb)]  
  
 The example uses the file `doment.xml` as input.  
  
 [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmldocument_1_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InternalSubset">
      <MemberSignature Language="C#" Value="public string InternalSubset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InternalSubset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the document type definition (DTD) internal subset on the DOCTYPE declaration.</summary>
        <value>The DTD internal subset on the DOCTYPE. If there is no DTD internal subset, String.Empty is returned.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays information about the DocumentType node.  
  
 [!code-cpp[Classic WebData XmlDocumentType.Name Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_3_1.cpp)]
 [!code-cs[Classic WebData XmlDocumentType.Name Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_3_1.cs)]
 [!code-vb[Classic WebData XmlDocumentType.Name Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public override bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the node is read-only.</summary>
        <value>
          <see langword="true" /> if the node is read-only; otherwise <see langword="false" />.  
  
 Because DocumentType nodes are read-only, this property always returns <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A read-only node is one whose properties, attributes, or children cannot be changed. However, you can remove a read-only node from the tree and insert it somewhere else.  
  
 You can remove a `XmlDocumentType` from a document and reinsert it back into the document as long as the document does not have an element node. Once a document has a root element, its `XmlDocumentType` cannot be changed.  
  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example displays information about the DocumentType node.  
  
 [!code-cpp[Classic WebData XmlDocumentType.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_12_1.cpp)]
 [!code-vb[Classic WebData XmlDocumentType.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_12_1.vb)]
 [!code-cs[Classic WebData XmlDocumentType.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_12_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the node.</summary>
        <value>For DocumentType nodes, this property returns the name of the document type.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the qualified name of the node.</summary>
        <value>For DocumentType nodes, this property returns the name of the document type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays information about the DocumentType node.  
  
 [!code-cpp[Classic WebData XmlDocumentType.Name Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_5_1.cpp)]
 [!code-cs[Classic WebData XmlDocumentType.Name Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_5_1.cs)]
 [!code-vb[Classic WebData XmlDocumentType.Name Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the current node.</summary>
        <value>For DocumentType nodes, this value is XmlNodeType.DocumentType.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Notations">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNamedNodeMap Notations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNamedNodeMap Notations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNamedNodeMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of <see cref="T:System.Xml.XmlNotation" /> nodes present in the document type declaration.</summary>
        <value>An <see cref="T:System.Xml.XmlNamedNodeMap" /> containing the <see langword="XmlNotation" /> nodes. The returned <see langword="XmlNamedNodeMap" /> is read-only.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The order in which the notations are returned is not based on the order in which these items may appear in the document. The order is also not guaranteed to be the same between similar documents, or between different implementations or versions of the class.  
  
   
  
## Examples  
 The following example displays information about the notations declared in the XML document.  
  
 [!code-cs[XmlNotation#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_0_1.cs)]
 [!code-cpp[XmlNotation#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_0_1.cpp)]
 [!code-vb[XmlNotation#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_0_1.vb)]  
  
 The example uses the file `doment.xml` as input.  
  
 [!code-xml[XmlNotation#2](~/add/codesnippet/xml/p-system.xml.xmldocument_0_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PublicId">
      <MemberSignature Language="C#" Value="public string PublicId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PublicId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the public identifier on the DOCTYPE declaration.</summary>
        <value>The public identifier on the DOCTYPE. If there is no public identifier, <see langword="null" /> is returned.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SystemId">
      <MemberSignature Language="C#" Value="public string SystemId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SystemId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the system identifier on the DOCTYPE declaration.</summary>
        <value>The system identifier on the DOCTYPE. If there is no system identifier, <see langword="null" /> is returned.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteContentTo">
      <MemberSignature Language="C#" Value="public override void WriteContentTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteContentTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
        <summary>Saves all the children of the node to the specified &lt;xref:System.Xml.XmlWriter&gt;. For <see langword="XmlDocumentType" /> nodes, this method has no effect.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
        <summary>Saves the node to the specified &lt;xref:System.Xml.XmlWriter&gt;.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>