<Type Name="XmlAttribute" FullName="System.Xml.XmlAttribute">
  <TypeSignature Language="C#" Value="public class XmlAttribute : System.Xml.XmlNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlAttribute extends System.Xml.XmlNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents an attribute. Valid and default values for the attribute are defined in a document type definition (DTD) or schema.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Attributes can be associated with an element. Use the <xref:System.Xml.XmlAttribute.OwnerElement%2A> property to get the <xref:System.Xml.XmlElement> to which the attribute belongs.  
  
 The `XmlElement` class has several methods which allow you to access attribute nodes (<xref:System.Xml.XmlElement.GetAttribute%2A?displayProperty=fullName>, <xref:System.Xml.XmlElement.SetAttribute%2A?displayProperty=fullName>, <xref:System.Xml.XmlElement.RemoveAttribute%2A?displayProperty=fullName>, and so on). Additionally, you can call the <xref:System.Xml.XmlElement.Attributes%2A?displayProperty=fullName> property, which returns an <xref:System.Xml.XmlAttributeCollection> enabling you to access attributes by name or index from the collection.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlAttribute (string prefix, string localName, string namespaceURI, System.Xml.XmlDocument doc);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string prefix, string localName, string namespaceURI, class System.Xml.XmlDocument doc) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="doc" Type="System.Xml.XmlDocument" />
      </Parameters>
      <Docs>
        <param name="prefix">The namespace prefix.</param>
        <param name="localName">The local name of the attribute.</param>
        <param name="namespaceURI">The namespace uniform resource identifier (URI).</param>
        <param name="doc">The parent XML document.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not instantiate an <xref:System.Xml.XmlAttribute> directly; instead, use methods such as <xref:System.Xml.XmlDocument.CreateAttribute%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode AppendChild (System.Xml.XmlNode newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode AppendChild(class System.Xml.XmlNode newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to add.</param>
        <summary>Adds the specified node to the end of the list of child nodes, of this node.</summary>
        <returns>The <see cref="T:System.Xml.XmlNode" /> added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `newChild` is already in the tree, it is first removed.  
  
 If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.  
  
   
  
## Examples  
 For an example of the AppendChild method, see the <xref:System.Xml.XmlNode.AppendChild%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 This node is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the base Uniform Resource Identifier (URI) of the node.</summary>
        <value>The location from which the node was loaded or String.Empty if the node has no base URI. Attribute nodes have the same base URI as their owner element. If an attribute node does not have an owner element, <see langword="BaseURI" /> returns String.Empty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A networked XML document is comprised of chunks of data aggregated using various World Wide Web Consortium (W3C) standard inclusion mechanisms and therefore contains nodes that come from different places. The `BaseURI` tells you where these nodes came from.  
  
 For additional information on `BaseURI` and how it behaves with other node types, see <xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>.  
  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example displays information on the attribute node, including its base URI.  
  
 [!code-cpp[Classic WebData XmlAttribute.BaseURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_7_1.cpp)]
 [!code-vb[Classic WebData XmlAttribute.BaseURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_7_1.vb)]
 [!code-cs[Classic WebData XmlAttribute.BaseURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_7_1.cs)]  
  
 The sample uses the file, `baseuri.xml`, as input.  
  
 [!code-xml[Classic WebData XmlAttribute.BaseURI Example#2](~/add/codesnippet/xml/p-system.xml.xmlattribut_7_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode CloneNode(bool deep) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">
          <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>The duplicate node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method serves as a copy constructor for nodes. The cloned node has no parent (<xref:System.Xml.XmlAttribute.ParentNode%2A> returns `null`).  
  
 Cloning an unspecified attribute returns a specified attribute (<xref:System.Xml.XmlAttribute.Specified%2A> returns `true`).  
  
   
  
## Examples  
 The following example uses `CloneNode` to add an attribute to two different element nodes.  
  
 [!code-cpp[Classic WebData XmlAttribute.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmlattribut_1_1.cpp)]
 [!code-cs[Classic WebData XmlAttribute.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmlattribut_1_1.cs)]
 [!code-vb[Classic WebData XmlAttribute.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlattribut_1_1.vb)]  
  
 The example uses the file, `2elems.xml`, as input.  
  
 [!code-xml[Classic WebData XmlAttribute.CloneNode Example#2](~/add/codesnippet/xml/m-system.xml.xmlattribut_1_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public override string InnerText { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the concatenated values of the node and all its children.</summary>
        <value>The concatenated values of the node and all its children. For attribute nodes, this property has the same functionality as the &lt;xref:System.Xml.XmlAttribute.Value%2A&gt; property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property replaces all the children with the parsed contents of the given string.  
  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InnerXml">
      <MemberSignature Language="C#" Value="public override string InnerXml { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the value of the attribute.</summary>
        <value>The attribute value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode InsertAfter (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode InsertAfter(class System.Xml.XmlNode newChild, class System.Xml.XmlNode refChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
        <Parameter Name="refChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to insert.</param>
        <param name="refChild">The <see cref="T:System.Xml.XmlNode" /> that is the reference node. The `newChild` is placed after the `refChild`.</param>
        <summary>Inserts the specified node immediately after the specified reference node.</summary>
        <returns>The <see cref="T:System.Xml.XmlNode" /> inserted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `refChild` is `null`, insert `newChild` at the beginning of the list of child nodes. If `newChild` is an <xref:System.Xml.XmlDocumentFragment> object, its child nodes are inserted, in the same order, after `refChild`. If the `newChild` is already in the tree, it is first removed.  
  
 If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 For an example of the InsertAfter method see the <xref:System.Xml.XmlNode.InsertAfter%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 The <paramref name="refChild" /> is not a child of this node.  
  
 This node is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode InsertBefore (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode InsertBefore(class System.Xml.XmlNode newChild, class System.Xml.XmlNode refChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
        <Parameter Name="refChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to insert.</param>
        <param name="refChild">The <see cref="T:System.Xml.XmlNode" /> that is the reference node. The `newChild` is placed before this node.</param>
        <summary>Inserts the specified node immediately before the specified reference node.</summary>
        <returns>The <see cref="T:System.Xml.XmlNode" /> inserted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `refChild` is `null`, insert `newChild` at the end of the list of child nodes. If `newChild` is an <xref:System.Xml.XmlDocumentFragment> object, its child nodes are inserted, in the same order, before `refChild`. If the `newChild` is already in the tree, it is first removed.  
  
 If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.  
  
   
  
## Examples  
 For an example of the InsertBefore method, see the <xref:System.Xml.XmlNode.InsertBefore%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The current node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 The <paramref name="refChild" /> is not a child of this node.  
  
 This node is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the node.</summary>
        <value>The name of the attribute node with the prefix removed. In the following example &lt;book bk:genre= 'novel'&gt;, the <see langword="LocalName" /> of the attribute is <see langword="genre" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the node does not have a prefix, `LocalName` is the same as <xref:System.Xml.XmlAttribute.Name%2A>.  
  
   
  
## Examples  
 The following example displays information on each of the nodes in the attribute collection.  
  
 [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_3_1.cs)]
 [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_3_1.cpp)]
 [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the qualified name of the node.</summary>
        <value>The qualified name of the attribute node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays information on each of the nodes in the attribute collection.  
  
 [!code-cs[Classic WebData XmlAttribute.Name Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_8_1.cs)]
 [!code-cpp[Classic WebData XmlAttribute.Name Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_8_1.cpp)]
 [!code-vb[Classic WebData XmlAttribute.Name Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace URI of this node.</summary>
        <value>The namespace URI of this node. If the attribute is not explicitly given a namespace, this property returns String.Empty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An attribute does not inherit its namespace from the element it is attached to. If an attribute is not explicitly given a namespace, the namespace URI is considered to be String.Empty.  
  
   
  
## Examples  
 The following example displays information on each of the nodes in the attribute collection.  
  
 [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_1_1.cs)]
 [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_1_1.cpp)]
 [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the current node.</summary>
        <value>The node type for <see langword="XmlAttribute" /> nodes is XmlNodeType.Attribute.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OwnerDocument">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlDocument OwnerDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocument OwnerDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
        <value>An XML document to which this node belongs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates an attribute and displays its `OwnerDocument`.  
  
 [!code-cs[Classic WebData XmlAttribute.OwnerDocument Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_2_1.cs)]
 [!code-cpp[Classic WebData XmlAttribute.OwnerDocument Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_2_1.cpp)]
 [!code-vb[Classic WebData XmlAttribute.OwnerDocument Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OwnerElement">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement OwnerElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlElement OwnerElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Xml.XmlElement" /> to which the attribute belongs.</summary>
        <value>The <see langword="XmlElement" /> that the attribute belongs to or <see langword="null" /> if this attribute is not part of an <see langword="XmlElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates an attribute and displays the `OwnerElement` of the attribute.  
  
 [!code-cs[Classic WebData XmlAttribute.OwnerElement Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_4_1.cs)]
 [!code-vb[Classic WebData XmlAttribute.OwnerElement Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_4_1.vb)]
 [!code-cpp[Classic WebData XmlAttribute.OwnerElement Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_4_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParentNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode ParentNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode ParentNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent of this node. For <see langword="XmlAttribute" /> nodes, this property always returns <see langword="null" />.</summary>
        <value>For <see langword="XmlAttribute" /> nodes, this property always returns <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Xml.XmlAttribute.OwnerElement%2A> property to get the <xref:System.Xml.XmlElement> to which the attribute belongs.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the namespace prefix of this node.</summary>
        <value>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because changing the prefix of an attribute does not change its namespace URI, changing the prefix of an attribute that is known to have a default value does not create a new attribute with the default value and the original prefix.  
  
   
  
## Examples  
 The following example displays information on each of the nodes in the attribute collection.  
  
 [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_9_1.cs)]
 [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_9_1.cpp)]
 [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">This node is read-only.</exception>
        <exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.  
  
 The specified prefix is malformed.  
  
 The namespaceURI of this node is <see langword="null" />.  
  
 The specified prefix is "xml", and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".  
  
 This node is an attribute, the specified prefix is "xmlns", and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/".  
  
 This node is an attribute, and the qualifiedName of this node is "xmlns" [Namespaces].</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrependChild">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode PrependChild (System.Xml.XmlNode newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode PrependChild(class System.Xml.XmlNode newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to add. If it is an <see cref="T:System.Xml.XmlDocumentFragment" />, the entire contents of the document fragment are moved into the child list of this node.</param>
        <summary>Adds the specified node to the beginning of the list of child nodes for this node.</summary>
        <returns>The <see cref="T:System.Xml.XmlNode" /> added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `newChild` is already in the tree, it is first removed.  
  
 If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 For an example of the PrependChild method, see the <xref:System.Xml.XmlNode.PrependChild%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 This node is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode RemoveChild (System.Xml.XmlNode oldChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode RemoveChild(class System.Xml.XmlNode oldChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="oldChild">The <see cref="T:System.Xml.XmlNode" /> to remove.</param>
        <summary>Removes the specified child node.</summary>
        <returns>The <see cref="T:System.Xml.XmlNode" /> removed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 For an example of the RemoveChild method, see the <xref:System.Xml.XmlNode.RemoveChild%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="oldChild" /> is not a child of this node. Or this node is read-only.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReplaceChild">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode ReplaceChild (System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode ReplaceChild(class System.Xml.XmlNode newChild, class System.Xml.XmlNode oldChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
        <Parameter Name="oldChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The new child <see cref="T:System.Xml.XmlNode" />.</param>
        <param name="oldChild">The <see cref="T:System.Xml.XmlNode" /> to replace.</param>
        <summary>Replaces the child node specified with the new child node specified.</summary>
        <returns>The <see cref="T:System.Xml.XmlNode" /> replaced.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `newChild` is already in the tree, it is first removed.  
  
 If the `newChild` was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document.  
  
   
  
## Examples  
 For an example of the ReplaceChild method, see the <xref:System.Xml.XmlNode.ReplaceChild%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 This node is read-only.  
  
 The <paramref name="oldChild" /> is not a child of this node.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SchemaInfo">
      <MemberSignature Language="C#" Value="public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.IXmlSchemaInfo SchemaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the post-schema-validation-infoset that has been assigned to this node as a result of schema validation.</summary>
        <value>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> containing the post-schema-validation-infoset of this node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SchemaInfo property is set when this node is validated.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Specified">
      <MemberSignature Language="C#" Value="public virtual bool Specified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Specified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the attribute value was explicitly set.</summary>
        <value>
          <see langword="true" /> if this attribute was explicitly given a value in the original instance document; otherwise, <see langword="false" />. A value of <see langword="false" /> indicates that the value of the attribute came from the DTD.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The implementation is in charge of this property, not the user. If the user changes the value of the attribute (even if it ends up having the same value as the default/fixed value), then the specified flag is automatically flipped to `true`. To re-specify the attribute as the default/fixed value from the DTD, the user must delete the attribute. The implementation then makes a new attribute available with specified set to `false` and the default/fixed value (if one exists).  
  
 In summary:  
  
1.  If the attribute has an assigned value in the document, `Specified` is `true`, and the value is the assigned value.  
  
2.  If the attribute has no assigned value in the document and has a default/fixed value in the DTD, `Specified` is `false`, and the value is the default/fixed value in the DTD.  
  
3.  Otherwise, the attribute does not appear in the structure model of the document.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value of the node.</summary>
        <value>The value returned depends on the &lt;xref:System.Xml.XmlNode.NodeType%2A&gt; of the node. For <see langword="XmlAttribute" /> nodes, this property is the value of attribute.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays information on each of the nodes in the attribute collection.  
  
 [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_6_1.cs)]
 [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_6_1.cpp)]
 [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The node is read-only and a set operation is called.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteContentTo">
      <MemberSignature Language="C#" Value="public override void WriteContentTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteContentTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
        <summary>Saves all the children of the node to the specified &lt;xref:System.Xml.XmlWriter&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <xref:System.Xml.XmlAttribute.InnerXml%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
        <summary>Saves the node to the specified &lt;xref:System.Xml.XmlWriter&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <xref:System.Xml.XmlNode.OuterXml%2A?displayProperty=fullName> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>