<Type Name="ISymbolBinder" FullName="System.Diagnostics.SymbolStore.ISymbolBinder">
  <TypeSignature Language="C#" Value="public interface ISymbolBinder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISymbolBinder" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a symbol binder for managed code.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  This interface is the managed counterpart of the `ISymUnmanagedBinder` interface, which is one of the unmanaged symbol store interfaces that provide an alternate way to read and write debug symbol information.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="GetReader">
      <MemberSignature Language="C#" Value="public System.Diagnostics.SymbolStore.ISymbolReader GetReader (int importer, string filename, string searchPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolReader GetReader(int32 importer, string filename, string searchPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ISymbolBinder1.GetReader. ISymbolBinder1.GetReader takes the importer interface pointer as an IntPtr instead of an Int32, and thus works on both 32-bit and 64-bit architectures. http://go.microsoft.com/fwlink/?linkid=14202=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.Int32" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="searchPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="importer">The metadata import interface.</param>
        <param name="filename">The name of the file for which the reader interface is required.</param>
        <param name="searchPath">The search path used to locate the symbol file.</param>
        <summary>Gets the interface of the symbol reader for the current file.</summary>
        <returns>The <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> interface that reads the debugging symbols.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When given a metadata interface, a file name, and a search path, the GetReader method returns the <xref:System.Diagnostics.SymbolStore.ISymbolReader> interface that reads the debugging symbols associated with the module.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>