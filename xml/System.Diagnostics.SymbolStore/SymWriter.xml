<Type Name="SymWriter" FullName="System.Diagnostics.SymbolStore.SymWriter">
  <TypeSignature Language="C#" Value="public class SymWriter : System.Diagnostics.SymbolStore.SymWriterBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SymWriter extends System.Diagnostics.SymbolStore.SymWriterBase implements class System.Diagnostics.SymbolStore.ISymbolWriter, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>ISymWrapper</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.SymbolStore.SymWriterBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Diagnostics.SymbolStore.ISymbolWriter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a symbol writer for managed code.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SymWriter class provides methods that define documents, sequence points, lexical scopes, and variables.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.SymbolStore.SymWriter" /> class.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymWriter (bool noUnderlyingWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool noUnderlyingWriter) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="noUnderlyingWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="noUnderlyingWriter">
          <see langword="true" /> if an underlying symbol writer will be provided by calling the &lt;xref:System.Diagnostics.SymbolStore.SymWriter.SetUnderlyingWriter%2A&gt; method; <see langword="false" /> if a default underlying symbol writer should be created instead.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.SymbolStore.SymWriter" /> class, specifying whether to create an underlying symbol writer.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the <see cref="T:System.Diagnostics.SymbolStore.SymWriter" /> and commits the symbols to the symbol store.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After this call, the <xref:System.Diagnostics.SymbolStore.SymWriter> becomes invalid for further updates.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloseMethod">
      <MemberSignature Language="C#" Value="public virtual void CloseMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseMethod() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the current method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After a method is closed, you cannot define a symbol from within the method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloseNamespace">
      <MemberSignature Language="C#" Value="public virtual void CloseNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseNamespace() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the most recent namespace.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CloseScope">
      <MemberSignature Language="C#" Value="public virtual void CloseScope (int endOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseScope(int32 endOffset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endOffset">The IL offset just past the last instruction in the scope.</param>
        <summary>Closes the current lexical scope.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After a scope is closed, you cannot define a variable from within the method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefineDocument">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument (string url, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument(string url, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
        <Parameter Name="documentType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="url">The URL that identifies the document.</param>
        <param name="language">The document language. This parameter can be &lt;xref:System.Guid&gt;.</param>
        <param name="languageVendor">The identity of the vendor for the document language. This parameter can be &lt;xref:System.Guid&gt;.</param>
        <param name="documentType">The type of the document. This parameter can be &lt;xref:System.Guid&gt;.</param>
        <summary>Defines a source document.</summary>
        <returns>The <see cref="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter" /> object that represents the document.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefineField">
      <MemberSignature Language="C#" Value="public virtual void DefineField (System.Diagnostics.SymbolStore.SymbolToken parent, string name, System.Reflection.FieldAttributes attributes, byte[] signature, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DefineField(valuetype System.Diagnostics.SymbolStore.SymbolToken parent, string name, valuetype System.Reflection.FieldAttributes attributes, unsigned int8[] signature, valuetype System.Diagnostics.SymbolStore.SymAddressKind addrKind, int32 addr1, int32 addr2, int32 addr3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.Diagnostics.SymbolStore.SymbolToken" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
        <Parameter Name="signature" Type="System.Byte[]" />
        <Parameter Name="addrKind" Type="System.Diagnostics.SymbolStore.SymAddressKind" />
        <Parameter Name="addr1" Type="System.Int32" />
        <Parameter Name="addr2" Type="System.Int32" />
        <Parameter Name="addr3" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parent">This parameter is not used.</param>
        <param name="name">This parameter is not used.</param>
        <param name="attributes">This parameter is not used.</param>
        <param name="signature">This parameter is not used.</param>
        <param name="addrKind">This parameter is not used.</param>
        <param name="addr1">This parameter is not used.</param>
        <param name="addr2">This parameter is not used.</param>
        <param name="addr3">This parameter is not used.</param>
        <summary>Throws a &lt;xref:System.NotSupportedException&gt; in all cases.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">In all cases.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefineGlobalVariable">
      <MemberSignature Language="C#" Value="public virtual void DefineGlobalVariable (string name, System.Reflection.FieldAttributes attributes, byte[] signature, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DefineGlobalVariable(string name, valuetype System.Reflection.FieldAttributes attributes, unsigned int8[] signature, valuetype System.Diagnostics.SymbolStore.SymAddressKind addrKind, int32 addr1, int32 addr2, int32 addr3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
        <Parameter Name="signature" Type="System.Byte[]" />
        <Parameter Name="addrKind" Type="System.Diagnostics.SymbolStore.SymAddressKind" />
        <Parameter Name="addr1" Type="System.Int32" />
        <Parameter Name="addr2" Type="System.Int32" />
        <Parameter Name="addr3" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name">This parameter is not used.</param>
        <param name="attributes">This parameter is not used.</param>
        <param name="signature">This parameter is not used.</param>
        <param name="addrKind">This parameter is not used.</param>
        <param name="addr1">This parameter is not used.</param>
        <param name="addr2">This parameter is not used.</param>
        <param name="addr3">This parameter is not used.</param>
        <summary>Throws a &lt;xref:System.NotSupportedException&gt; in all cases.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">In all cases.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefineLocalVariable">
      <MemberSignature Language="C#" Value="public virtual void DefineLocalVariable (string name, System.Reflection.FieldAttributes attributes, byte[] signature, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DefineLocalVariable(string name, valuetype System.Reflection.FieldAttributes attributes, unsigned int8[] signature, valuetype System.Diagnostics.SymbolStore.SymAddressKind addrKind, int32 addr1, int32 addr2, int32 addr3, int32 startOffset, int32 endOffset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
        <Parameter Name="signature" Type="System.Byte[]" />
        <Parameter Name="addrKind" Type="System.Diagnostics.SymbolStore.SymAddressKind" />
        <Parameter Name="addr1" Type="System.Int32" />
        <Parameter Name="addr2" Type="System.Int32" />
        <Parameter Name="addr3" Type="System.Int32" />
        <Parameter Name="startOffset" Type="System.Int32" />
        <Parameter Name="endOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name">The local variable name.</param>
        <param name="attributes">The local variable attributes specified using the &lt;xref:System.Reflection.FieldAttributes&gt; enumerator.</param>
        <param name="signature">The local variable signature.</param>
        <param name="addrKind">The address types for `addr1`, `addr2`, and `addr3` using <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />.</param>
        <param name="addr1">The first address for the local variable specification.</param>
        <param name="addr2">The second address for the local variable specification.</param>
        <param name="addr3">The third address for the local variable specification.</param>
        <param name="startOffset">The start offset for the variable. If zero, this parameter is ignored and the variable is defined throughout the entire scope. If nonzero, it falls within the offsets of the current scope.</param>
        <param name="endOffset">The end offset for the variable. If zero, this parameter is ignored and the variable is defined throughout the entire scope. If nonzero, it falls within the offsets of the current scope.</param>
        <summary>Defines a single variable in the current lexical scope.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `startOffset` and `endOffset` parameters are optional. If their value is zero, they are ignored and the variable is defined throughout the entire scope. If their value is nonzero, they fall within the offsets of the current scope.  
  
 You can call DefineLocalVariable multiple times for a variable of the same name that occurs multiple times in different offset ranges throughout a scope. (In this case, start and end offsets must not overlap.)  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public virtual void DefineParameter (string name, System.Reflection.ParameterAttributes attributes, int sequence, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DefineParameter(string name, valuetype System.Reflection.ParameterAttributes attributes, int32 sequence, valuetype System.Diagnostics.SymbolStore.SymAddressKind addrKind, int32 addr1, int32 addr2, int32 addr3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="sequence" Type="System.Int32" />
        <Parameter Name="addrKind" Type="System.Diagnostics.SymbolStore.SymAddressKind" />
        <Parameter Name="addr1" Type="System.Int32" />
        <Parameter Name="addr2" Type="System.Int32" />
        <Parameter Name="addr3" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name">This parameter is not used.</param>
        <param name="attributes">This parameter is not used.</param>
        <param name="sequence">This parameter is not used.</param>
        <param name="addrKind">This parameter is not used.</param>
        <param name="addr1">This parameter is not used.</param>
        <param name="addr2">This parameter is not used.</param>
        <param name="addr3">This parameter is not used.</param>
        <summary>Throws a &lt;xref:System.NotSupportedException&gt; in all cases.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">In all cases.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DefineSequencePoints">
      <MemberSignature Language="C#" Value="public virtual void DefineSequencePoints (System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int[] offsets, int[] lines, int[] columns, int[] endLines, int[] endColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DefineSequencePoints(class System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int32[] offsets, int32[] lines, int32[] columns, int32[] endLines, int32[] endColumns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Diagnostics.SymbolStore.ISymbolDocumentWriter" />
        <Parameter Name="offsets" Type="System.Int32[]" />
        <Parameter Name="lines" Type="System.Int32[]" />
        <Parameter Name="columns" Type="System.Int32[]" />
        <Parameter Name="endLines" Type="System.Int32[]" />
        <Parameter Name="endColumns" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="document">The document object for which the sequence points are being defined.</param>
        <param name="offsets">The IL offset of the sequence points measured from the beginning of the method.</param>
        <param name="lines">The starting line numbers of the sequence points.</param>
        <param name="columns">The starting column numbers of the sequence points.</param>
        <param name="endLines">The ending line numbers of the sequence points.</param>
        <param name="endColumns">The ending column numbers of the sequence points.</param>
        <summary>Defines a group of sequence points within the current method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sequence points are used to map between source file locations and IL offsets.  Each sequence point consists of an IL offset and source file region, specified by start and end line/column numbers relative to an <xref:System.Diagnostics.SymbolStore.ISymbolDocument> object.  Each element at a specific index of every array corresponds to a specific sequence point. Each line and each column defines the start of a statement within a method. The arrays should be sorted in the increasing order of offsets. The offset is always the offset from the start of the method, in bytes.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override sealed void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the current instance of the <see cref="T:System.Diagnostics.SymbolStore.SymWriter" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool A_0);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool A_0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A_0" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="A_0">
          <see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Called by the &lt;xref:System.Diagnostics.SymbolStore.SymWriter.Dispose%2A&gt; and &lt;xref:System.Diagnostics.SymbolStore.SymWriter.Finalize%2A&gt; methods to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.Diagnostics.SymbolStore.SymWriter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymWriter.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymWriter.Finalize%2A> methods; do not call this method directly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SymWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:System.Diagnostics.SymbolStore.SymWriter" /> is reclaimed by garbage collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetWriter">
      <MemberSignature Language="C#" Value="public System.Diagnostics.SymbolStore.Private.ISymUnmanagedWriter* GetWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Diagnostics.SymbolStore.Private.ISymUnmanagedWriter* GetWriter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.Private.ISymUnmanagedWriter*</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (IntPtr emitter, string filename, bool fFullBuild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(native int emitter, string filename, bool fFullBuild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emitter" Type="System.IntPtr" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="fFullBuild" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="emitter">The metadata emitter interface.</param>
        <param name="filename">The file name for which the debugging symbols are written. Some writers require a file name, while others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored.</param>
        <param name="fFullBuild">
          <see langword="true" /> indicates that this is a full rebuild; <see langword="false" /> indicates an incremental compilation.</param>
        <summary>Sets the metadata emitter interface to associate with this writer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize%2A> also sets the output file name where the debugging symbols are written. This method can be called only once and must be called before any other writer methods are called.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InitWriter">
      <MemberSignature Language="C#" Value="public void InitWriter (bool noUnderlyingWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InitWriter(bool noUnderlyingWriter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noUnderlyingWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="noUnderlyingWriter">
          <see langword="true" /> if an underlying symbol writer will be provided by calling the &lt;xref:System.Diagnostics.SymbolStore.SymWriter.SetUnderlyingWriter%2A&gt; method; <see langword="false" /> if a default underlying symbol writer should be created instead.</param>
        <summary>Initializes the symbol writer. This method should not be called directly; it is called by the constructor.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenMethod">
      <MemberSignature Language="C#" Value="public virtual void OpenMethod (System.Diagnostics.SymbolStore.SymbolToken method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OpenMethod(valuetype System.Diagnostics.SymbolStore.SymbolToken method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Diagnostics.SymbolStore.SymbolToken" />
      </Parameters>
      <Docs>
        <param name="method">The metadata token for the method to be opened.</param>
        <summary>Opens a method in which to place symbol information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified method becomes the current method for calls to define sequence points, parameters, and lexical scopes. There is an implicit lexical scope around the entire method. Reopening a method that has been previously closed erases any previously defined symbols for the method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenNamespace">
      <MemberSignature Language="C#" Value="public virtual void OpenNamespace (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OpenNamespace(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the new namespace.</param>
        <summary>Opens a new namespace.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call this method before defining methods or variables that exist within a namespace. Namespaces can be nested.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OpenScope">
      <MemberSignature Language="C#" Value="public virtual int OpenScope (int startOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 OpenScope(int32 startOffset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startOffset">The IL offset in bytes from the beginning of the method to the first instruction in the lexical scope.</param>
        <summary>Opens a new lexical scope in the current method.</summary>
        <returns>An opaque scope identifier that can be used with &lt;xref:System.Diagnostics.SymbolStore.SymWriter.SetScopeRange%2A&gt; to define the start and end offsets of a scope at a later time. In this case, the offsets passed to OpenScope and &lt;xref:System.Diagnostics.SymbolStore.SymWriter.CloseScope%2A&gt; are ignored. A scope identifier is valid only in the current method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This scope becomes the new current scope and is pushed onto a stack of scopes. Scopes must form a hierarchy. Siblings are not allowed to overlap.  
  
 Scope identifiers are only valid in the current method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetMethodSourceRange">
      <MemberSignature Language="C#" Value="public virtual void SetMethodSourceRange (System.Diagnostics.SymbolStore.ISymbolDocumentWriter startDoc, int startLine, int startColumn, System.Diagnostics.SymbolStore.ISymbolDocumentWriter endDoc, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMethodSourceRange(class System.Diagnostics.SymbolStore.ISymbolDocumentWriter startDoc, int32 startLine, int32 startColumn, class System.Diagnostics.SymbolStore.ISymbolDocumentWriter endDoc, int32 endLine, int32 endColumn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startDoc" Type="System.Diagnostics.SymbolStore.ISymbolDocumentWriter" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endDoc" Type="System.Diagnostics.SymbolStore.ISymbolDocumentWriter" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startDoc">This parameter is not used.</param>
        <param name="startLine">This parameter is not used.</param>
        <param name="startColumn">This parameter is not used.</param>
        <param name="endDoc">This parameter is not used.</param>
        <param name="endLine">This parameter is not used.</param>
        <param name="endColumn">This parameter is not used.</param>
        <summary>Throws a &lt;xref:System.NotSupportedException&gt; in all cases.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">In all cases.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetScopeRange">
      <MemberSignature Language="C#" Value="public virtual void SetScopeRange (int scopeID, int startOffset, int endOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScopeRange(int32 scopeID, int32 startOffset, int32 endOffset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeID" Type="System.Int32" />
        <Parameter Name="startOffset" Type="System.Int32" />
        <Parameter Name="endOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="scopeID">The identifier of the lexical scope returned by the &lt;xref:System.Diagnostics.SymbolStore.SymWriter.OpenScope%2A&gt; method.</param>
        <param name="startOffset">The IL offset of the beginning of the lexical scope.</param>
        <param name="endOffset">The IL offset of the end of the lexical scope.</param>
        <summary>Defines the offset range for the specified lexical scope.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetSymAttribute">
      <MemberSignature Language="C#" Value="public virtual void SetSymAttribute (System.Diagnostics.SymbolStore.SymbolToken parent, string name, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSymAttribute(valuetype System.Diagnostics.SymbolStore.SymbolToken parent, string name, unsigned int8[] data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.Diagnostics.SymbolStore.SymbolToken" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="parent">The metadata token for which the attribute is being defined.</param>
        <param name="name">The attribute name.</param>
        <param name="data">The attribute value.</param>
        <summary>Defines an attribute when given the attribute name and the attribute value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SetSymAttribute method is only associated with symbolic information and is not a metadata custom attribute.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetUnderlyingWriter">
      <MemberSignature Language="C#" Value="public virtual void SetUnderlyingWriter (IntPtr underlyingWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUnderlyingWriter(native int underlyingWriter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="underlyingWriter" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="underlyingWriter">An &lt;xref:System.IntPtr&gt; type pointer to code that is the underlying writer.</param>
        <summary>Sets the underlying [ISymUnmanagedWriter Interface](~/add/includes/ajax-current-ext-md.md) (the corresponding unmanaged API) that a managed <see cref="T:System.Diagnostics.SymbolStore.SymWriter" /> uses to emit symbols.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The underlying [ISymUnmanagedWriter Interface](../Topic/ISymUnmanagedWriter%20Interface.md) (the corresponding unmanaged API) interface represents a symbol writer for managed code. The interface provides methods to define documents, sequence points, lexical scopes, and variables.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetUserEntryPoint">
      <MemberSignature Language="C#" Value="public virtual void SetUserEntryPoint (System.Diagnostics.SymbolStore.SymbolToken entryMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUserEntryPoint(valuetype System.Diagnostics.SymbolStore.SymbolToken entryMethod) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryMethod" Type="System.Diagnostics.SymbolStore.SymbolToken" />
      </Parameters>
      <Docs>
        <param name="entryMethod">The metadata token for the method that is the user entry point.</param>
        <summary>Identifies the user-defined method as the entry point for the current module.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is normally the main method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UsingNamespace">
      <MemberSignature Language="C#" Value="public virtual void UsingNamespace (string fullName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UsingNamespace(string fullName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fullName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fullName">The fully qualified name of the namespace.</param>
        <summary>Specifies that the given, fully qualified namespace name is used within the open lexical scope.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Closing the current scope prevents this scope from using the namespace. The namespace remains in use in all scopes that inherit from the current open scope.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>