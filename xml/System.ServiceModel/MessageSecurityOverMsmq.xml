<Type Name="MessageSecurityOverMsmq" FullName="System.ServiceModel.MessageSecurityOverMsmq">
  <TypeSignature Language="C#" Value="public sealed class MessageSecurityOverMsmq" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MessageSecurityOverMsmq extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enables setting message-level security properties on the <see cref="T:System.ServiceModel.NetMsmqBinding" /> binding.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This object is accessed from the binding by means of the <xref:System.ServiceModel.NetMsmqBinding.Security%2A> property, which returns a <xref:System.ServiceModel.NetMsmqSecurity> object. This object has a <xref:System.ServiceModel.NetMsmqSecurity.Message%2A> property that provides a reference to the MessageSecurityOverMsmq object.  
  
   
  
## Examples  
 [!code-vb[UEMessageSecurityOverMsmq#1](~/add/codesnippet/visualbasic/t-system.servicemodel.me_1_1.vb)]
 [!code-cs[UEMessageSecurityOverMsmq#1](~/add/codesnippet/csharp/t-system.servicemodel.me_1_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageSecurityOverMsmq ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageSecurityOverMsmq" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AlgorithmSuite">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.ServiceModel.Security.SecurityAlgorithmSuite), "Default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the algorithm suite used for security messages at the SOAP level.</summary>
        <value>The <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> setting for messages sent over the <see cref="T:System.ServiceModel.NetMsmqBinding" /> binding.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> defines of a variety of algorithms such as Canonicalization, Digest, KeyWrap, Signature, Encryption, and KeyDerivation algorithms. This property is most relevant when working with a platform that uses a set of algorithms different than the default. You should be aware of the strengths and weaknesses of the relevant algorithms when making modifications to this property.  
  
   
  
## Examples  
 [!code-vb[UEMessageSecurityOverMsmq#2](~/add/codesnippet/visualbasic/p-system.servicemodel.me_1_1.vb)]
 [!code-cs[UEMessageSecurityOverMsmq#2](~/add/codesnippet/csharp/p-system.servicemodel.me_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientCredentialType">
      <MemberSignature Language="C#" Value="public System.ServiceModel.MessageCredentialType ClientCredentialType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.MessageCredentialType ClientCredentialType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.MessageCredentialType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the &lt;xref:System.ServiceModel.MessageCredentialType&gt; security setting for messages sent over the MSMQ transport.</summary>
        <value>The &lt;xref:System.ServiceModel.MessageCredentialType&gt; security setting for messages sent over the MSMQ transport.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property can be set to one of the following values:  
  
-   **None**: This allows the service to interact with anonymous clients. Neither the service nor the client requires a credential.  
  
-   **Windows**: This allows the SOAP exchanges to be under the authenticated context of a Windows credential. This always performs Kerberos-based authentication.  
  
-   **UserName**: This allows the service to require that the client be authenticated using a UserName credential. This credential must be specified using <xref:System.ServiceModel.Description.ClientCredentials> class.  
  
> [!NOTE]
>  [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] does not support sending a password digest or deriving keys using password and using such keys for message security. As such, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] enforces that the exchange is secured when using UserName credentials. This mode requires that the service certificate be specified on the client using `ClientCredential` behavior and `serviceCertificate`:  
  
-   `Certificate`: This allows the service to require that the client be authenticated using a certificate. The client credential in this case must be specified using <xref:System.ServiceModel.Description.ClientCredentials> class or `ClientCredentials` behavior. The service credential in this case must be specified using <xref:System.ServiceModel.Description.ClientCredentials> class or `ClientCredentials` behavior by specifying the `serviceCertificate`.  
  
-   `InfoCard`: This allows the service to require that the client be authenticated using an InfoCard. The `serviceCertificate` must be provisioned in the `ClientCredential` behavior.  
  
-   The Certificate credential for the `MessageSecurityOverMsmq` is relevant only when the security mode is set to `Both` or `Message`.  
  
   
  
## Examples  
 [!code-vb[UEMessageSecurityOverMsmq#3](~/add/codesnippet/visualbasic/p-system.servicemodel.me_4_1.vb)]
 [!code-cs[UEMessageSecurityOverMsmq#3](~/add/codesnippet/csharp/p-system.servicemodel.me_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>