<Type Name="WSDualHttpBinding" FullName="System.ServiceModel.WSDualHttpBinding">
  <TypeSignature Language="C#" Value="public class WSDualHttpBinding : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WSDualHttpBinding extends System.ServiceModel.Channels.Binding implements class System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.Binding</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IBindingRuntimePreferences</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A secure and interoperable binding that is designed for use with duplex service contracts that allows both services and clients to send and receive messages.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WSDualHttpBinding provides the same support for Web Service protocols as the <xref:System.ServiceModel.WSHttpBinding>, but for use with duplex contracts. WSDualHttpBinding only supports SOAP security and requires reliable messaging. This binding requires that the client has a public URI that provides a callback endpoint for the service. This is provided by the <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A>. A dual binding exposes the IP address of the client to the service. The client should use security to ensure that it only connects to services it trusts.  
  
 By default the WSDualHttpBinding generates the following binding element stack:  
  
-   <xref:System.ServiceModel.Channels.TransactionFlowBindingElement>  
  
-   <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>  
  
-   <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement>  
  
-   <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement>  
  
-   <xref:System.ServiceModel.Channels.OneWayBindingElement>  
  
-   <xref:System.ServiceModel.Channels.TextMessageEncodingBindingElement>  
  
-   <xref:System.ServiceModel.Channels.HttpTransportBindingElement>  
  
   
  
## Examples  
 The following example shows how to specify the `wsDualHttpBinding` binding in a configuration file.  
  
 [!code-cs[S_dualhttp#134](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#134)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WSDualHttpBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WSDualHttpBinding" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the default constructor for wsDualHttpBinding.  
  
 [!code-cs[S_dualhttp#1](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#1)]
 [!code-vb[S_dualhttp#1](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WSDualHttpBinding (System.ServiceModel.WSDualHttpSecurityMode securityMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ServiceModel.WSDualHttpSecurityMode securityMode) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="securityMode" Type="System.ServiceModel.WSDualHttpSecurityMode" />
      </Parameters>
      <Docs>
        <param name="securityMode">The value of <see cref="T:System.ServiceModel.WSDualHttpSecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WSDualHttpBinding" /> class with a specified type of security used by the binding.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reliable messaging is required by the <xref:System.ServiceModel.WSDualHttpBinding>, so there is no constructor that provides a switch to turn it off as there is on the <xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29> constructor for the <xref:System.ServiceModel.WSHttpBinding>.  
  
   
  
## Examples  
 The following example shows how to use the `wsDualHttpBinding` constructor with a security mode.  
  
 [!code-cs[S_dualhttp#3](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#3)]
 [!code-vb[S_dualhttp#3](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WSDualHttpBinding (string configName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configName">The binding configuration name for the <see cref="T:System.ServiceModel.Configuration.WSHttpBindingElement" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WSDualHttpBinding" /> class with a binding specified by its configuration name.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">The binding element with the name <paramref name="configurationName" /> was not found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BypassProxyOnLocal">
      <MemberSignature Language="C#" Value="public bool BypassProxyOnLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BypassProxyOnLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to bypass the proxy server for local addresses.</summary>
        <value>
          <see langword="true" /> to bypass the proxy server for local addresses; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An Internet resource is local if it has a local address. A local address is one that is on the same computer, the local LAN or intranet and is identified, syntactically, by the lack of a period (.) as in the URIs "http://webserver/" and "http://localhost/".  
  
 Setting the BypassProxyOnLocal property determines whether endpoints configured with the <xref:System.ServiceModel.WSDualHttpBinding> use the proxy server when accessing local resources.  
  
 If BypassProxyOnLocal is `true`, requests to local Internet resources do not use the proxy server. Use the host name (rather than `localhost`) if you want clients to go through a proxy when talking to services on the same machine when this property is set to `true`.  
  
 When BypassProxyOnLocal is `false`, all Internet requests are made through the proxy server.  
  
   
  
## Examples  
 The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 The following example sets this property to indicate that the proxy should be bypassed for local resources.  
  
 [!code-cs[S_dualhttp#6](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#6)]
 [!code-vb[S_dualhttp#6](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#6)]  
  
 The value of this property can also be set in the configuration file.  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientBaseAddress">
      <MemberSignature Language="C#" Value="public Uri ClientBaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ClientBaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the base address of the client.</summary>
        <value>The &lt;xref:System.Uri&gt; that is the base address of the client. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This public URI for the client provides the callback endpoint required for the service to contact the client when the contract is duplex.  
  
   
  
## Examples  
 The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  
  
 [!code-cs[S_dualhttp#8](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#8)]
 [!code-vb[S_dualhttp#8](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#8)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateBindingElements">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElementCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an ordered collection of binding elements contained in the current binding.</summary>
        <returns>A &lt;xref:System.ServiceModel.Channels.BindingElementCollection&gt; that includes a <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" /> and, because a reliable session is required for the <see cref="T:System.ServiceModel.WSDualHttpBinding" />, a <see cref="T:System.ServiceModel.Channels.ReliableSessionBindingElement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to get an ordered collection of binding elements contained in the current binding.  
  
 [!code-cs[S_dualhttp#20](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#20)]
 [!code-vb[S_dualhttp#20](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#20)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EnvelopeVersion">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EnvelopeVersion EnvelopeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EnvelopeVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the version of SOAP that is used for messages that are processed by this binding.</summary>
        <value>The value of the &lt;xref:System.ServiceModel.EnvelopeVersion&gt; that is used with this binding. The value must always be SOAP 1.2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to get the version of SOAP that is used for messages that are processed by this binding.  
  
 [!code-cs[S_dualhttp#21](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#21)]
 [!code-vb[S_dualhttp#21](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#21)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HostNameComparisonMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.HostNameComparisonMode HostNameComparisonMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.HostNameComparisonMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the hostname is used to reach the service when matching the URI.</summary>
        <value>The &lt;xref:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode%2A&gt; value that indicates whether the hostname is used to reach the service when matching on the URI. The default value is <see cref="T:System.ServiceModel.HostNameComparisonMode" />, which ignores the hostname in the match.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  
  
 [!code-cs[S_dualhttp#9](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#9)]
 [!code-vb[S_dualhttp#9](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#9)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxBufferPoolSize">
      <MemberSignature Language="C#" Value="public long MaxBufferPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxBufferPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(524288)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum amount of memory, in bytes, that can be allocated for the manager of message buffers that receive messages at the endpoints configured with this binding.</summary>
        <value>The maximum size, in bytes, for the pool of buffers used by an endpoint configured with this binding. The default value is 524288 bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.ServiceModel.Channels.BufferManager> minimizes the cost of using buffers with a buffer pool. Buffers are required to process messages by the service when they come out of the channel. If there is not sufficient memory in the buffer pool to process the message load, the <xref:System.ServiceModel.Channels.BufferManager> must allocate additional memory from the CLR heap, which increases the garbage collection overhead. Extensive allocation from the CLR garbage heap is an indication that the buffer pool size is too small and that performance can be improved with a larger allocation by increasing the MaxBufferPoolSize limit.  
  
 The limitations on buffer size set here are for optimizing the performance of message exchanges. If a message exceeds the maximum value set for the buffer, it is not dropped. Instead, more memory is requested from the CLR heap and this incurs more garbage collection overhead than using the buffers.  
  
   
  
## Examples  
 The following example shows how to set the `MaxBufferPoolSize`.  
  
 [!code-cs[S_dualhttp#10](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#10)]
 [!code-vb[S_dualhttp#10](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#10)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxReceivedMessageSize">
      <MemberSignature Language="C#" Value="public long MaxReceivedMessageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxReceivedMessageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(65536)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum size, in bytes, for a message that can be received on a channel configured with this binding.</summary>
        <value>The maximum size, in bytes, for a message that is processed by the binding. The default value is 65,536 bytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The size of the messages that can be received on the wire by services using the <xref:System.ServiceModel.WSDualHttpBinding> is bounded by the amount of memory allocated for each message. This bound on message size is intended to limit exposure to DOS-style attacks.  
  
 Note that the settings for <xref:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize%2A> and <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize%2A> are local behavioral settings. This means that they are not transmitted to other endpoints in metadata. If you generate a proxy to a service with a maximum message size of 2GB from metadata, the proxy still has a default value 64K. This leaves control of the appropriate bounds for message and message buffer size in the scope of local administrators.  
  
   
  
## Examples  
 The following example shows how to get the MaxReceivedMessageSize property.  
  
 [!code-cs[S_dualhttp#22](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#22)]
 [!code-vb[S_dualhttp#22](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MessageEncoding">
      <MemberSignature Language="C#" Value="public System.ServiceModel.WSMessageEncoding MessageEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.WSMessageEncoding MessageEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.WSMessageEncoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether MTOM or Text/XML is used to encode SOAP messages.</summary>
        <value>The value of <see cref="T:System.ServiceModel.WSMessageEncoding" /> that indicates that MTOM or Text/XML is used to encode SOAP messages. The default value is <see cref="T:System.ServiceModel.WSMessageEncoding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to set the `WSMessageEncoding` property to MTOM.  
  
 [!code-cs[S_dualhttp#11](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#11)]
 [!code-vb[S_dualhttp#11](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#11)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProxyAddress">
      <MemberSignature Language="C#" Value="public Uri ProxyAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ProxyAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URI address of the HTTP proxy.</summary>
        <value>A &lt;xref:System.Uri&gt; that serves as the address of the HTTP proxy. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy%2A> is set to `true`, the value of the ProxyAddress is ignored.  
  
   
  
## Examples  
 The following example shows how to specify the address of the HTTP proxy.  
  
 [!code-cs[S_dualhttp#12](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#12)]
 [!code-vb[S_dualhttp#12](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#12)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReaderQuotas">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDictionaryReaderQuotas ReaderQuotas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReaderQuotas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding.</summary>
        <value>The &lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt; that specifies the complexity constraints.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The complexity constraints include items such as a maximum element depth and a maximum length for string content within the message. The constraints protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources.  
  
   
  
## Examples  
 The following example shows how to get the `ReaderQuotas` property.  
  
 [!code-cs[S_dualhttp#13](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#13)]
 [!code-vb[S_dualhttp#13](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#13)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReliableSession">
      <MemberSignature Language="C#" Value="public System.ServiceModel.ReliableSession ReliableSession { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.ReliableSession ReliableSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ReliableSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings.</summary>
        <value>The <see cref="T:System.ServiceModel.ReliableSession" /> that provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The reliable session is required for service configured with a <xref:System.ServiceModel.WSDualHttpBinding>.  
  
   
  
## Examples  
 The following example shows how to get the ReliableSession property.  
  
 [!code-cs[S_dualhttp#14](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#14)]
 [!code-vb[S_dualhttp#14](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#14)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public override string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the URI transport scheme for the channels and listeners that are configured with this binding.</summary>
        <value>The transport scheme: "http".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  
  
 [!code-cs[S_dualhttp#15](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#15)]
 [!code-vb[S_dualhttp#15](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#15)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Security">
      <MemberSignature Language="C#" Value="public System.ServiceModel.WSDualHttpSecurity Security { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.WSDualHttpSecurity Security" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.WSDualHttpSecurity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that specifies the security settings used with this binding.</summary>
        <value>The <see cref="T:System.ServiceModel.WSDualHttpSecurity" /> that specifies security settings used with the binding. The default value of <see cref="T:System.ServiceModel.WSDualHttpSecurityMode" /> is <see cref="T:System.ServiceModel.WSDualHttpSecurityMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A dual binding exposes the IP address of the client to the service. The client should use security to ensure that it only connects to services it trusts.  
  
   
  
## Examples  
 The following example shows how to get the type of security of the binding.  
  
 [!code-cs[S_dualhttp#16](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#16)]
 [!code-vb[S_dualhttp#16](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#16)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeReaderQuotas">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeReaderQuotas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeReaderQuotas() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a value that indicates whether the &lt;xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas%2A&gt; property has changed from its default value and should be serialized.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas%2A&gt; property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeReliableSession">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeReliableSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeReliableSession() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a value that indicates whether the &lt;xref:System.ServiceModel.WSDualHttpBinding.ReliableSession%2A&gt; property has changed from its default value and should be serialized.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.ServiceModel.WSDualHttpBinding.ReliableSession%2A&gt; property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSecurity">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSecurity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a value that indicates whether the &lt;xref:System.ServiceModel.WSDualHttpBinding.Security%2A&gt; property has changed from its default value and should be serialized.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.ServiceModel.WSDualHttpBinding.Security%2A&gt; property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTextEncoding">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTextEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTextEncoding() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a value that indicates whether the &lt;xref:System.ServiceModel.WSDualHttpBinding.TextEncoding%2A&gt; property has changed from its default value and should be serialized.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.ServiceModel.WSDualHttpBinding.TextEncoding%2A&gt; property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
      <MemberSignature Language="C#" Value="bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether incoming requests are handled synchronously or asynchronously.</summary>
        <value>
          <see langword="true" /> if requests are handled synchronously; <see langword="false" /> if handled asynchronously. The value returned is always is <see langword="false" />, to handle requests asynchronously.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This value can be changed by using a service model behavior.  
  
   
  
## Examples  
 The following examples show how to get the <xref:System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously%2A> value.  
  
 [!code-cs[S_dualhttp#23](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#23)]
 [!code-vb[S_dualhttp#23](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#23)]  
  
 [!code-cs[S_dualhttp#24](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#24)]
 [!code-vb[S_dualhttp#24](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#24)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TextEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding TextEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding TextEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ServiceModel.Configuration.EncodingConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the character encoding that is used for the message text.</summary>
        <value>The &lt;xref:System.Text.Encoding&gt; that indicates the character encoding that is used. The default is &lt;xref:System.Text.UTF8Encoding&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to get the character encoding that is used for the message text.  
  
 [!code-cs[S_dualhttp#17](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#17)]
 [!code-vb[S_dualhttp#17](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#17)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TransactionFlow">
      <MemberSignature Language="C#" Value="public bool TransactionFlow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransactionFlow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether this binding should support flowing WS-Transactions.</summary>
        <value>
          <see langword="true" /> if the flowing of transactions is supported; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default value specifies that clients do not flow transactions and services reject messages with a flowed transaction message header.  
  
   
  
## Examples  
 The following example shows how to set the `TransactionFlow` property to support the flowing of transactions.  
  
 [!code-cs[S_dualhttp#18](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#18)]
 [!code-vb[S_dualhttp#18](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#18)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UseDefaultWebProxy">
      <MemberSignature Language="C#" Value="public bool UseDefaultWebProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultWebProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the auto-configured HTTP proxy of the system should be used, if available.</summary>
        <value>
          <see langword="true" /> if the auto-configured HTTP proxy of the system should be used, if available; otherwise, <see langword="false" />. The default value is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to set the `UseDefaultWebProxy` property to use the auto-configured HTTP proxy of the system.  
  
 [!code-cs[S_dualhttp#19](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#19)]
 [!code-vb[S_dualhttp#19](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#19)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>