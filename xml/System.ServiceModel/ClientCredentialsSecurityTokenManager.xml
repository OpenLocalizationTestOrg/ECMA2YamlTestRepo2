<Type Name="ClientCredentialsSecurityTokenManager" FullName="System.ServiceModel.ClientCredentialsSecurityTokenManager">
  <TypeSignature Language="C#" Value="public class ClientCredentialsSecurityTokenManager : System.IdentityModel.Selectors.SecurityTokenManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClientCredentialsSecurityTokenManager extends System.IdentityModel.Selectors.SecurityTokenManager" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Selectors.SecurityTokenManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Manages security tokens for the client.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class handles security token serialization, security token provision and security token authentication for the client. There is one instance of this class for each client channel factory.  
  
   
  
## Examples  
 The following code shows how you can override this class to create a custom Client Credentials Security Token Manager.  
  
 [!code-vb[c_CustomCredentials#2](~/add/codesnippet/visualbasic/t-system.servicemodel.cl_1.vb)]
 [!code-cs[c_CustomCredentials#2](~/add/codesnippet/csharp/t-system.servicemodel.cl_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientCredentialsSecurityTokenManager (System.ServiceModel.Description.ClientCredentials clientCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.Description.ClientCredentials clientCredentials) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="clientCredentials" Type="System.ServiceModel.Description.ClientCredentials" />
      </Parameters>
      <Docs>
        <param name="clientCredentials">The &lt;xref:System.ServiceModel.Description.ClientCredentials&gt;.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code shows how to override this constructor.  
  
 [!code-vb[ClientCredentialsSecurityTokenManager#8](~/add/codesnippet/visualbasic/f7027904-ba13-4c11-87f9-_1.vb)]
 [!code-cs[ClientCredentialsSecurityTokenManager#8](~/add/codesnippet/csharp/f7027904-ba13-4c11-87f9-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="clientCredentials" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ClientCredentials">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ClientCredentials ClientCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Description.ClientCredentials ClientCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ClientCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the client credentials.</summary>
        <value>The &lt;xref:System.ServiceModel.Description.ClientCredentials&gt; object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.ServiceModel.Description.ClientCredentials> object allows the user to configure client credentials to be used for authentication to the service.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenAuthenticator">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Selectors.SecurityTokenAuthenticator CreateSecurityTokenAuthenticator (System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement, out System.IdentityModel.Selectors.SecurityTokenResolver outOfBandTokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Selectors.SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(class System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement, class System.IdentityModel.Selectors.SecurityTokenResolver outOfBandTokenResolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.SecurityTokenAuthenticator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenRequirement" Type="System.IdentityModel.Selectors.SecurityTokenRequirement" />
        <Parameter Name="outOfBandTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="tokenRequirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
        <param name="outOfBandTokenResolver">When this method returns, contains a <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />. This parameter is passed uninitialized.</param>
        <summary>Creates a security token authenticator.</summary>
        <returns>The <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator> is responsible for validating security tokens and providing a <xref:System.IdentityModel.Policy.IAuthorizationPolicy> to obtain claims for security tokens that meet the requirements specified in <xref:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tokenRequirement" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenProvider">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Selectors.SecurityTokenProvider CreateSecurityTokenProvider (System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Selectors.SecurityTokenProvider CreateSecurityTokenProvider(class System.IdentityModel.Selectors.SecurityTokenRequirement tokenRequirement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.SecurityTokenProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenRequirement" Type="System.IdentityModel.Selectors.SecurityTokenRequirement" />
      </Parameters>
      <Docs>
        <param name="tokenRequirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
        <summary>Creates a security token provider.</summary>
        <returns>The <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.IdentityModel.Selectors.SecurityTokenProvider> class is responsible for obtaining tokens for a given <xref:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement>. Optionally token providers support renewing and canceling tokens as well.  
  
   
  
## Examples  
 The following code shows how to override this method.  
  
 [!code-vb[ClientCredentialsSecurityTokenManager#2](~/add/codesnippet/visualbasic/5c6f32c5-5142-4e18-b825-_1.vb)]
 [!code-cs[ClientCredentialsSecurityTokenManager#2](~/add/codesnippet/csharp/5c6f32c5-5142-4e18-b825-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tokenRequirement" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenSerializer">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Selectors.SecurityTokenSerializer CreateSecurityTokenSerializer (System.IdentityModel.Selectors.SecurityTokenVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Selectors.SecurityTokenSerializer CreateSecurityTokenSerializer(class System.IdentityModel.Selectors.SecurityTokenVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.SecurityTokenSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.IdentityModel.Selectors.SecurityTokenVersion" />
      </Parameters>
      <Docs>
        <param name="version">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenVersion" /> of the security token.</param>
        <summary>Creates a security token serializer.</summary>
        <returns>The <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.IdentityModel.Selectors.SecurityTokenSerializer> is used to write and read security tokens, security key identifiers, and security key identifier clauses. When deserializing the token from XML, the returned token must be able to perform cryptographic operations. The token serializer therefore must ensure the deserialized token can perform cryptographic operations (Kerberos ticket processing, X.509 decoding, SAML decoding and other operations) but should defer application trust decisions to the security token authenticator.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenSerializer">
      <MemberSignature Language="C#" Value="protected System.IdentityModel.Selectors.SecurityTokenSerializer CreateSecurityTokenSerializer (System.ServiceModel.Security.SecurityVersion version);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IdentityModel.Selectors.SecurityTokenSerializer CreateSecurityTokenSerializer(class System.ServiceModel.Security.SecurityVersion version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.SecurityTokenSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.ServiceModel.Security.SecurityVersion" />
      </Parameters>
      <Docs>
        <param name="version">The &lt;xref:System.ServiceModel.Security.SecurityVersion&gt; of the security token.</param>
        <summary>Creates a security token serializer.</summary>
        <returns>The <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.IdentityModel.Selectors.SecurityTokenSerializer> is used to write and read security tokens, security key identifiers and security key identifier clauses. When deserializing the token from XML, the returned token must be able to perform cryptographic operations. The token serializer therefore must ensure the deserialized token can perform cryptographic operations (Kerberos ticket processing, X.509 decoding, SAML decoding and other operations) but should defer application trust decisions to the security token authenticator.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsIssuedSecurityTokenRequirement">
      <MemberSignature Language="C#" Value="protected bool IsIssuedSecurityTokenRequirement (System.IdentityModel.Selectors.SecurityTokenRequirement requirement);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool IsIssuedSecurityTokenRequirement(class System.IdentityModel.Selectors.SecurityTokenRequirement requirement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requirement" Type="System.IdentityModel.Selectors.SecurityTokenRequirement" />
      </Parameters>
      <Docs>
        <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
        <summary>Gets a value that indicates whether the specified token requirement is an issued security token requirement.</summary>
        <returns>
          <see langword="true" /> if the specified token requirement is an issued security token requirement; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="requirement" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>