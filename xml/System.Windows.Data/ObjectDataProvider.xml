<Type Name="ObjectDataProvider" FullName="System.Windows.Data.ObjectDataProvider">
  <TypeSignature Language="C#" Value="public class ObjectDataProvider : System.Windows.Data.DataSourceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataProvider extends System.Windows.Data.DataSourceProvider" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Data.DataSourceProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wraps and creates an object that you can use as a binding source.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  ObjectDataProvider fails when it does not have permissions to perform reflection on the given type or member. For more information, see Permissions Requirements in [Binding Sources Overview](~/add/includes/ajax-current-ext-md.md).  
  
 There are many ways to create an object to use as a binding source. For example, you can create your object in the resources section of your [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] page, or you can create your object in code and set it as the `DataContext` of your window.  
  
 ObjectDataProvider enables you to create your object in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and make it available as a binding source. It provides the following properties that enable you to execute a query on your object and bind to the results.  
  
-   Use the <xref:System.Windows.Data.ObjectDataProvider.ConstructorParameters%2A> property to pass parameters to the constructor of your object.  
  
-   Use the <xref:System.Windows.Data.ObjectDataProvider.MethodName%2A> property to call a method and use the <xref:System.Windows.Data.ObjectDataProvider.MethodParameters%2A> property to pass parameters to the method. You can then bind to the results of the method.  
  
 You can also use the <xref:System.Windows.Data.ObjectDataProvider.IsAsynchronous%2A> property to specify whether to perform object creation in a worker thread or in the active context.  
  
 This class is also useful when you want to replace your current binding source object with another object and have all the associated bindings updated.  
  
 ObjectDataProvider provides a convenient way to create and use objects as binding source objects in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], but it does not replace existing data models.  
  
 If you are implementing your own objects for data binding, see [Binding Sources Overview](../Topic/Binding%20Sources%20Overview.md) for information and recommendations.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.ObjectDataProvider" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginQuery">
      <MemberSignature Language="C#" Value="protected override void BeginQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void BeginQuery() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts to create the requested object, either immediately or on a background thread, based on the value of the &lt;xref:System.Windows.Data.ObjectDataProvider.IsAsynchronous%2A&gt; property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the <xref:System.Windows.Data.DataSourceProvider.InitialLoad%2A> and <xref:System.Windows.Data.DataSourceProvider.Refresh%2A> methods of the base class.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ConstructorParameters">
      <MemberSignature Language="C#" Value="public System.Collections.IList ConstructorParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList ConstructorParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the list of parameters to pass to the constructor.</summary>
        <value>The list of parameters to pass to the constructor. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Changing this collection implicitly causes the <xref:System.Windows.Data.ObjectDataProvider> to refresh. When changing multiple refresh-causing properties, the use of <xref:System.Windows.Data.DataSourceProvider.DeferRefresh%2A> is recommended.  
  
<a name="xamlPropertyElementUsage_ConstructorParameters"></a>   
## XAML Property Element Usage  
  
```  
<object>  
  <object.ConstructorParameters>  
    parameterValues  
  </object.ConstructorParameters>  
</object>  
```  
  
   
  
## Examples  
 The following example shows how to use this property:  
  
 [!code-xml[SimpleBinding#ODPCP](~/add/codesnippet/xaml/SimpleBinding_VB/Page1.xaml#odpcp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsAsynchronous">
      <MemberSignature Language="C#" Value="public bool IsAsynchronous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsynchronous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to perform object creation in a worker thread or in the active context.</summary>
        <value>
          <see langword="true" /> to perform object creation in a worker thread; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is useful if you are binding to external data objects that are slow to be available.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MethodName">
      <MemberSignature Language="C#" Value="public string MethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MethodName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method to call.</summary>
        <value>The name of the method to call. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this property to call a method on your object and use the <xref:System.Windows.Data.ObjectDataProvider.MethodParameters%2A> property to pass parameters to the method. You can then bind to the results of the method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MethodParameters">
      <MemberSignature Language="C#" Value="public System.Collections.IList MethodParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList MethodParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the list of parameters to pass to the method.</summary>
        <value>The list of parameters to pass to the method. The default is an empty list.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the <xref:System.Windows.Data.ObjectDataProvider.MethodName%2A> property to call a method on your object and use the MethodParameters property to pass parameters to the method. You can then bind to the results of the method.  
  
 Changing this collection implicitly causes the <xref:System.Windows.Data.ObjectDataProvider> object to refresh. When changing multiple refresh-causing properties, the use of <xref:System.Windows.Data.DataSourceProvider.DeferRefresh%2A> is recommended.  
  
<a name="xamlPropertyElementUsage_MethodParameters"></a>   
## XAML Property Element Usage  
  
```  
<object>  
  <object.MethodParameters>  
    parameterValues  
  </object.MethodParameters>  
</object>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ObjectInstance">
      <MemberSignature Language="C#" Value="public object ObjectInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ObjectInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object used as the binding source.</summary>
        <value>The instance of the object constructed from &lt;xref:System.Windows.Data.ObjectDataProvider.ObjectType%2A&gt; and &lt;xref:System.Windows.Data.ObjectDataProvider.ConstructorParameters%2A&gt;, or the <see cref="T:System.Windows.Data.DataSourceProvider" /> of which the &lt;xref:System.Windows.Data.DataSourceProvider.Data%2A&gt; is used as the ObjectInstance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When <xref:System.Windows.Data.ObjectDataProvider.ObjectType%2A> is set to a non-null value, the property holds the object of the type specified by <xref:System.Windows.Data.ObjectDataProvider.ObjectType%2A>. If ObjectInstance is assigned by the user, the <xref:System.Windows.Data.ObjectDataProvider.ObjectType%2A> property returns the type of the assigned object. If ObjectInstance is set to a <xref:System.Windows.Data.DataSourceProvider>, the <xref:System.Windows.Data.ObjectDataProvider> uses the <xref:System.Windows.Data.DataSourceProvider.Data%2A> of the assigned source provider as the effective ObjectInstance.  
  
 If <xref:System.Windows.Data.DataSourceProvider.DeferRefresh%2A> is used, ObjectInstance and <xref:System.Windows.Data.DataSourceProvider.Data%2A> will not update until <xref:System.Windows.Data.DataSourceProvider.Refresh%2A> is called.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Data.ObjectDataProvider" /> is assigned both an &lt;xref:System.Windows.Data.ObjectDataProvider.ObjectType%2A&gt; and an ObjectInstance; only one is allowed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ObjectType">
      <MemberSignature Language="C#" Value="public Type ObjectType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of object to create an instance of.</summary>
        <value>This property is <see langword="null" /> when the <see cref="T:System.Windows.Data.ObjectDataProvider" /> is uninitialized or explicitly set to null. If &lt;xref:System.Windows.Data.ObjectDataProvider.ObjectInstance%2A&gt; is assigned, ObjectType returns the type of the object or null if the object is null. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If <xref:System.Windows.Data.DataSourceProvider.DeferRefresh%2A> is used, <xref:System.Windows.Data.ObjectDataProvider.ObjectInstance%2A> and <xref:System.Windows.Data.DataSourceProvider.Data%2A> do not update until <xref:System.Windows.Data.DataSourceProvider.Refresh%2A> is called.  
  
<a name="xamlAttributeUsage_ObjectType"></a>   
## XAML Attribute Usage  
  
```  
<object ObjectType="myDataType"/>  
```  
  
<a name="xamlValues_ObjectType"></a>   
## XAML Values  
 *myDataType*  
 The data type to create an instance of. Use the [x:Type Markup Extension](~/add/includes/ajax-current-ext-md.md) to set a type.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Data.ObjectDataProvider" /> is assigned both an ObjectType and an &lt;xref:System.Windows.Data.ObjectDataProvider.ObjectInstance%2A&gt;; only one is allowed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeConstructorParameters">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeConstructorParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeConstructorParameters() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Data.ObjectDataProvider.ConstructorParameters%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This `ShouldSerialize` method is provided because the <xref:System.Windows.Data.ObjectDataProvider.ConstructorParameters%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer for the <xref:System.Windows.Data.ObjectDataProvider> or developing your own control incorporating the <xref:System.Windows.Data.ObjectDataProvider>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeMethodParameters">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeMethodParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeMethodParameters() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Data.ObjectDataProvider.MethodParameters%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This `ShouldSerialize` method is provided because the <xref:System.Windows.Data.ObjectDataProvider.MethodParameters%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer for the <xref:System.Windows.Data.ObjectDataProvider> or developing your own control incorporating the <xref:System.Windows.Data.ObjectDataProvider>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeObjectInstance">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeObjectInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeObjectInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Data.ObjectDataProvider.ObjectInstance%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This `ShouldSerialize` method is provided because the <xref:System.Windows.Data.ObjectDataProvider.ObjectInstance%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer for the <xref:System.Windows.Data.ObjectDataProvider> or developing your own control incorporating the <xref:System.Windows.Data.ObjectDataProvider>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeObjectType">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeObjectType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeObjectType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Data.ObjectDataProvider.ObjectType%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the property value has changed from its default; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This `ShouldSerialize` method is provided because the <xref:System.Windows.Data.ObjectDataProvider.ObjectType%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer for the <xref:System.Windows.Data.ObjectDataProvider> or developing your own control incorporating the <xref:System.Windows.Data.ObjectDataProvider>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>