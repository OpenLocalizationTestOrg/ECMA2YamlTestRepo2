<Type Name="X509Certificate2" FullName="System.Security.Cryptography.X509Certificates.X509Certificate2">
  <TypeSignature Language="C#" Value="public class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit X509Certificate2 extends System.Security.Cryptography.X509Certificates.X509Certificate" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.X509Certificates.X509Certificate</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents an X.509 certificate.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The X.509 structure originated in the International Organization for Standardization (ISO) working groups. This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth). Although the ISO specifications are most informative on the structure itself, the X509Certificate2 class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group. The most informative of these specifications is RFC 3280, "[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286)."  
  
> [!IMPORTANT]
>  Starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)], this type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  
>   
>  For apps that target the [!INCLUDE[net_v452](~/add/includes/net-v452-md.md)] and earlier versions, the X509Certificate2 class does not implement the <xref:System.IDisposable> interface and therefore does not have a `Dispose` method.  
  
   
  
## Examples  
 The following example demonstrates how to use an X509Certificate2 object to encrypt and decrypt a file.  
  
 [!code-vb[X509Certificate2#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_1.vb)]
 [!code-cs[X509Certificate2#1](~/add/codesnippet/csharp/t-system.security.crypto_122_1.cs)]  
  
 The following example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/t-system.security.crypto_122_2.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/t-system.security.crypto_122_2.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_2.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates an empty <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.  
  
   
  
## Examples  
 The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_122_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_122_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_122_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawData">A byte array containing data from an X.509 certificate.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using information from a byte array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using certificate information from a byte array. The byte array can be binary (DER) encoded or Base64-encoded X.509 data. The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.  
  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">A pointer to a certificate context in unmanaged code. The C structure is called <see langword="PCCERT_CONTEXT" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using an unmanaged handle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a handle for the Microsoft Cryptographic API certificate context, `PCCERT_CONTEXT`. Note that the immediate caller of this constructor requires unmanaged code permission.  
  
> [!IMPORTANT]
>  The constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current `PCCERT_CONTEXT` structure from the <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A> property, but it is valid only during the lifetime of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (System.Security.Cryptography.X509Certificates.X509Certificate certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.X509Certificates.X509Certificate certificate) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method creates a new instance of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class using an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> object.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of a certificate file.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using a certificate file name.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name. It supports binary (DER) encoding or Base64 encoding.  
  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData, System.Security.SecureString password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData, class System.Security.SecureString password) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="rawData">A byte array that contains data from an X.509 certificate.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using a byte array and a password.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData, string password) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rawData">A byte array containing data from an X.509 certificate.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using a byte array and a password.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array and a password that is needed to access the certificate data. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected X509Certificate2 (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The serialization information required to deserialize the new <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</param>
        <param name="context">Contextual information about the source of the stream to be deserialized.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using the specified serialization and stream context information.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName, System.Security.SecureString password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, class System.Security.SecureString password) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of a certificate file.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using a certificate file name and a password.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string password) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of a certificate file.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using a certificate file name and a password used to access the certificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name and a password needed to access the certificate. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData, class System.Security.SecureString password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="rawData">A byte array that contains data from an X.509 certificate.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using a byte array, a password, and a key storage flag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="rawData">A byte array containing data from an X.509 certificate.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using a byte array, a password, and a key storage flag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array, a password that is needed to access the certificate data, and a key storage flag. It is used with PKCS12 (PFX) files that contain the certificate's private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, class System.Security.SecureString password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of a certificate file.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using a certificate file name, a password, and a key storage flag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of a certificate file.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class using a certificate file name, a password used to access the certificate, and a key storage flag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name, a password needed to access the certificate, and a key storage flag.  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:  
  
-   The certificate file does not exist.  
  
-   The certificate is invalid.  
  
-   The certificate's password is incorrect.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Archived">
      <MemberSignature Language="C#" Value="public bool Archived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Archived" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating that an X.509 certificate is archived.</summary>
        <value>
          <see langword="true" /> if the certificate is archived, <see langword="false" /> if the certificate is not archived.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is set only on a certificate that is associated with a store. If the property is set and the certificate is added to a certificate store, the value is persisted. If the property is set on a certificate retrieved from a store, the value is persisted immediately.  
  
 In an X.509 store, archived certificates are not included in the returned <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> object unless the Archived property is set to `true`. No physical archival activity occurs when the Archived value is set or unset.  
  
   
  
## Examples  
 The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_26_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_26_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_26_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509ExtensionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> objects.</summary>
        <value>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate. A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, "[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286)." Common extensions include information regarding key usage (<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>), key identifiers (<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>), certificate policies, revocation information (CRL Distribution Point extension), and other uses.  
  
   
  
## Examples  
 The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_97_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_97_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_97_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FriendlyName">
      <MemberSignature Language="C#" Value="public string FriendlyName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FriendlyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the associated alias for a certificate.</summary>
        <value>The certificate's friendly name.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Friendly names are properties in the X.509 certificate store that can be set. They are used to enable a user to associate aliases with certificates so they can be easily identified.  
  
 If no friendly name exists for the certificate, an empty string ("") is returned.  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_16_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_16_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCertContentType">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(unsigned int8[] rawData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509ContentType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawData">A byte array containing data from an X.509 certificate.</param>
        <summary>Indicates the type of certificate contained in a byte array.</summary>
        <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables you to discover the type of certificate in a file.  
  
   
  
## Examples  
 The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/a34c0539-d23c-4bd1-9b29-_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/a34c0539-d23c-4bd1-9b29-_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/a34c0539-d23c-4bd1-9b29-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rawData" /> has a zero length or is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCertContentType">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(string fileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509ContentType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of a certificate file.</param>
        <summary>Indicates the type of certificate contained in a file.</summary>
        <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables you to discover the type of certificate in a file.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading the certificate. Security action: <see cref="T:System.Security.Permissions.SecurityAction" />. Associated enumeration: <see cref="T:System.IO.FileAccess" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNameInfo">
      <MemberSignature Language="C#" Value="public string GetNameInfo (System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetNameInfo(valuetype System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameType" Type="System.Security.Cryptography.X509Certificates.X509NameType" />
        <Parameter Name="forIssuer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nameType">The <see cref="T:System.Security.Cryptography.X509Certificates.X509NameType" /> value for the subject.</param>
        <param name="forIssuer">
          <see langword="true" /> to include the issuer name; otherwise, <see langword="false" />.</param>
        <summary>Gets the subject and issuer names from a certificate.</summary>
        <returns>The name of the certificate.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations. Using this method ensures that the appropriate name is returned.  
  
   
  
## Examples  
 The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/3126ffa7-3ffc-4612-bfb2-_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/3126ffa7-3ffc-4612-bfb2-_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/3126ffa7-3ffc-4612-bfb2-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasPrivateKey">
      <MemberSignature Language="C#" Value="public bool HasPrivateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPrivateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object contains a private key.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object contains a private key; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(unsigned int8[] rawData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawData">A byte array containing data from an X.509 certificate.</param>
        <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object with data from a byte array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to take a raw byte array of an X.509 certificate and populate the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with its associated values.  
  
 Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(string fileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of a certificate.</param>
        <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object with information from a certificate file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with the certificate the file contains.  
  
 This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(unsigned int8[] rawData, class System.Security.SecureString password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="rawData">A byte array that contains data from an X.509 certificate.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
        <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object using data from a byte array, a password, and a key storage flag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(unsigned int8[] rawData, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="rawData">A byte array containing data from an X.509 certificate.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
        <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object using data from a byte array, a password, and flags for determining how to import the private key.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a password for the certificate represented by the byte array. The <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value can be used to control where and how to import the private key.  
  
 This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/af855297-61a6-47ed-8dcb-_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/af855297-61a6-47ed-8dcb-_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/af855297-61a6-47ed-8dcb-_1.vb)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(string fileName, class System.Security.SecureString password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of a certificate file.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
        <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object with information from a certificate file, a password, and a key storage flag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **Security Note** Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(string fileName, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of a certificate file.</param>
        <param name="password">The password required to access the X.509 certificate data.</param>
        <param name="keyStorageFlags">A bitwise combination of the enumeration values that control where and how to import the certificate.</param>
        <summary>Populates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object with information from a certificate file, a password, and a <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with information from a certificate file, a password, and an <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value.  
  
> [!IMPORTANT]
>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IssuerName">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X500DistinguishedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the distinguished name of the certificate issuer.</summary>
        <value>An <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> object that contains the name of the certificate issuer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property contains the name of the certificate authority (CA) that issued the certificate. To obtain the name of a certificate, use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A> method.  
  
 The distinguished name for the certificate is a textual representation of the certificate subject or issuer. This representation consists of name attributes (for example, "CN=MyName, OU=MyOrgUnit, C=US").  
  
   
  
## Examples  
 The following code example creates a command-line executable file that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_20_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_20_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_20_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NotAfter">
      <MemberSignature Language="C#" Value="public DateTime NotAfter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime NotAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date in local time after which a certificate is no longer valid.</summary>
        <value>A &lt;xref:System.DateTime&gt; object that represents the expiration date for the certificate.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property indicates an expiration date on which the certificate becomes invalid.  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_116_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_116_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_116_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NotBefore">
      <MemberSignature Language="C#" Value="public DateTime NotBefore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime NotBefore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date in local time on which a certificate becomes valid.</summary>
        <value>A &lt;xref:System.DateTime&gt; object that represents the effective date of the certificate.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property indicates the date on which the certificate becomes valid.  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_85_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_85_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_85_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrivateKey">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.AsymmetricAlgorithm PrivateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object that represents the private key associated with a certificate.</summary>
        <value>An <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object, which is either an RSA or DSA cryptographic service provider.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Currently this property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object. If no private key is associated with the certificate, it returns `null`.  
  
> [!WARNING]
>  If you set this property to `null` or to another key without first deleting it, a private key file is left on the disk.  
  
 To properly delete the private key associated with this property, set `PersistKeyInCsp` to `false`, and then call the <xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A> method.  
  
   
  
## Examples  
 The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_115_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_115_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_115_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The key value is not an RSA or DSA key, or the key is unreadable.</exception>
        <exception cref="T:System.ArgumentNullException">The value being set for this property is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">The key algorithm for this private key is not supported.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The X.509 keys do not match.</exception>
        <exception cref="T:System.ArgumentException">The cryptographic service provider key is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.PublicKey PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.PublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a PublicKey object associated with a certificate.</summary>
        <value>A PublicKey object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns a PublicKey object, which contains the object identifier (<xref:System.Security.Cryptography.Oid>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.  
  
 You can also obtain the key as an <xref:System.Security.Cryptography.AsymmetricAlgorithm> object by referencing the PublicKey property. This property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object that represents the public key.  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_120_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_120_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_120_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The key value is not an RSA or DSA key, or the key is unreadable.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RawData">
      <MemberSignature Language="C#" Value="public byte[] RawData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] RawData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the raw data of a certificate.</summary>
        <value>The raw data of the certificate as a byte array.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_59_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_59_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_59_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the state of an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to reset the state of the certificate. It also frees any resources associated with the certificate.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SerialNumber">
      <MemberSignature Language="C#" Value="public string SerialNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SerialNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the serial number of a certificate.</summary>
        <value>The serial number of the certificate.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The serial number of the certificate is part of the original X.509 protocol. The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_114_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_114_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_114_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SignatureAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Oid SignatureAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Oid SignatureAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Oid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the algorithm used to create the signature of a certificate.</summary>
        <value>Returns the object identifier (<see cref="T:System.Security.Cryptography.Oid" />) of the signature algorithm.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The object identifier (<xref:System.Security.Cryptography.Oid>) identifies the type of signature algorithm used by the certificate.  
  
   
  
## Examples  
 The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/6cab3ad3-94fb-4ecd-9a6c-_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/6cab3ad3-94fb-4ecd-9a6c-_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/6cab3ad3-94fb-4ecd-9a6c-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SubjectName">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X500DistinguishedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the subject distinguished name from a certificate.</summary>
        <value>An <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> object that represents the name of the certificate subject.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The subject distinguished name is the name of the user of the certificate. The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate. This representation consists of name attributes, for example, "CN=MyName, OU=MyOrgUnit, C=US".  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_80_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_80_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_80_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Thumbprint">
      <MemberSignature Language="C#" Value="public string Thumbprint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Thumbprint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the thumbprint of a certificate.</summary>
        <value>The thumbprint of the certificate.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate. Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_51_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_51_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_51_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Displays an X.509 certificate in text format.</summary>
        <returns>The certificate information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information about the content or use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A> method to obtain information about the certificate.  
  
 This method displays the certificate in text format.  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/m-system.security.crypto_81_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/m-system.security.crypto_81_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/m-system.security.crypto_81_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString (bool verbose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString(bool verbose) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verbose" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="verbose">
          <see langword="true" /> to display the public key, private key, extensions, and so forth; <see langword="false" /> to display information that is similar to the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> class, including thumbprint, serial number, subject and issuer names, and so on.</param>
        <summary>Displays an X.509 certificate in text format.</summary>
        <returns>The certificate information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information.  
  
 This method displays the certificate in text format. If the `verbose` parameter is set to `true`, the text display includes the public key, private key, and extensions. If `verbose` is set to `false`, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information.  
  
   
  
## Examples  
 The following code example creates a command line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/38d69126-bcaf-4cee-a89b-_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/38d69126-bcaf-4cee-a89b-_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/38d69126-bcaf-4cee-a89b-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Verify">
      <MemberSignature Language="C#" Value="public bool Verify ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Verify() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs a X.509 chain validation using basic validation policy.</summary>
        <returns>
          <see langword="true" /> if the validation succeeds; <see langword="false" /> if the validation fails.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method builds a simple chain for the certificate and applies the base policy to that chain. If you need more information about a failure, validate the certificate directly using the <xref:System.Security.Cryptography.X509Certificates.X509Chain> object.  
  
 Note that the default chaining engine can be overridden using the <xref:System.Security.Cryptography.CryptoConfig> class. On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, "[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286)."  
  
   
  
## Examples  
 The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  
  
 [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_98_1.vb)]
 [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_98_1.cs)]
 [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_98_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public int Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the X.509 format version of a certificate.</summary>
        <value>The certificate format.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 There are several versions of X.509 certificates. This property identifies which format the certificate uses. For example, "3" is returned for a version 3 certificate.  
  
   
  
## Examples  
 The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_37_1.cpp)]
 [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_37_1.cs)]
 [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_37_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>