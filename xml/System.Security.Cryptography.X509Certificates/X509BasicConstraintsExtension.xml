<Type Name="X509BasicConstraintsExtension" FullName="System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension">
  <TypeSignature Language="C#" Value="public sealed class X509BasicConstraintsExtension : System.Security.Cryptography.X509Certificates.X509Extension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit X509BasicConstraintsExtension extends System.Security.Cryptography.X509Certificates.X509Extension" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.X509Certificates.X509Extension</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines the constraints set on a certificate. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class provides properties that define the basic constraints set on a certificate.  
  
   
  
## Examples  
 The following code example demonstrates how to open a user’s personal certificate store and display information about each certificate in the store.  This example uses the X509BasicConstraintsExtension class to display the information.  
  
 [!code-cs[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/csharp/t-system.security.crypto_64_1.cs)]
 [!code-vb[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/visualbasic/t-system.security.crypto_64_1.vb)]
 [!code-cpp[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/cpp/t-system.security.crypto_64_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509BasicConstraintsExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to open a user’s personal certificate store and display information about each certificate in the store.  This example uses the <xref:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension> class to display the information.  
  
 [!code-cs[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/csharp/61f39d50-05d0-49a3-b816-_1.cs)]
 [!code-vb[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/visualbasic/61f39d50-05d0-49a3-b816-_1.vb)]
 [!code-cpp[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/cpp/61f39d50-05d0-49a3-b816-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509BasicConstraintsExtension (System.Security.Cryptography.AsnEncodedData encodedBasicConstraints, bool critical);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.AsnEncodedData encodedBasicConstraints, bool critical) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encodedBasicConstraints" Type="System.Security.Cryptography.AsnEncodedData" />
        <Parameter Name="critical" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encodedBasicConstraints">The encoded data to use to create the extension.</param>
        <param name="critical">
          <see langword="true" /> if the extension is critical; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> class using an <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object and a value that identifies whether the extension is critical.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor if the information to create an extension is already in an <xref:System.Security.Cryptography.AsnEncodedData> object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509BasicConstraintsExtension (bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool certificateAuthority, bool hasPathLengthConstraint, int32 pathLengthConstraint, bool critical) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="certificateAuthority" Type="System.Boolean" />
        <Parameter Name="hasPathLengthConstraint" Type="System.Boolean" />
        <Parameter Name="pathLengthConstraint" Type="System.Int32" />
        <Parameter Name="critical" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="certificateAuthority">
          <see langword="true" /> if the certificate is a certificate authority (CA) certificate; otherwise, <see langword="false" />.</param>
        <param name="hasPathLengthConstraint">
          <see langword="true" /> if the certificate has a restriction on the number of path levels it allows; otherwise, <see langword="false" />.</param>
        <param name="pathLengthConstraint">The number of levels allowed in a certificate's path.</param>
        <param name="critical">
          <see langword="true" /> if the extension is critical; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> class. Parameters specify a value that indicates whether a certificate is a certificate authority (CA) certificate, a value that indicates whether the certificate has a restriction on the number of path levels it allows, the number of levels allowed in a certificate's path, and a value that indicates whether the extension is critical.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CertificateAuthority">
      <MemberSignature Language="C#" Value="public bool CertificateAuthority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CertificateAuthority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether a certificate is a certificate authority (CA) certificate.</summary>
        <value>
          <see langword="true" /> if the certificate is a certificate authority (CA) certificate, otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to determine if the certificate is a certificate authority (CA) certificate.  
  
   
  
## Examples  
 The following code example demonstrates how to open a user’s personal certificate store and display information about each certificate in the store.  This example uses the <xref:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension> class to display the information.  
  
 [!code-cs[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/csharp/81d2d95c-6fb7-46bc-8d4d-_1.cs)]
 [!code-vb[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/visualbasic/81d2d95c-6fb7-46bc-8d4d-_1.vb)]
 [!code-cpp[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/cpp/81d2d95c-6fb7-46bc-8d4d-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyFrom">
      <MemberSignature Language="C#" Value="public override void CopyFrom (System.Security.Cryptography.AsnEncodedData asnEncodedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFrom(class System.Security.Cryptography.AsnEncodedData asnEncodedData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asnEncodedData" Type="System.Security.Cryptography.AsnEncodedData" />
      </Parameters>
      <Docs>
        <param name="asnEncodedData">The encoded data to use to create the extension.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> class using an <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor if the information to create an extension is already in an <xref:System.Security.Cryptography.AsnEncodedData> object.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasPathLengthConstraint">
      <MemberSignature Language="C#" Value="public bool HasPathLengthConstraint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPathLengthConstraint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether a certificate has a restriction on the number of path levels it allows.</summary>
        <value>
          <see langword="true" /> if the certificate has a restriction on the number of path levels it allows, otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A certificate issuer can restrict the number of levels in a certificate path. This property indicates whether the certificate has this restriction. If this value is `true`, you can use the <xref:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.PathLengthConstraint%2A> property to determine the number of levels allowed.  
  
   
  
## Examples  
 The following code example demonstrates how to open a user’s personal certificate store and display information about each certificate in the store.  This example uses the <xref:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension> class to display the information.  
  
 [!code-cs[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/csharp/a312dc6e-560d-4b07-a1b5-_1.cs)]
 [!code-vb[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/visualbasic/a312dc6e-560d-4b07-a1b5-_1.vb)]
 [!code-cpp[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/cpp/a312dc6e-560d-4b07-a1b5-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The extension cannot be decoded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PathLengthConstraint">
      <MemberSignature Language="C#" Value="public int PathLengthConstraint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PathLengthConstraint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of levels allowed in a certificate's path.</summary>
        <value>An integer indicating the number of levels allowed in a certificate's path.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a certificate has a constraint on the number of path levels it allows, this property indicates how many levels are allowed.  
  
   
  
## Examples  
 The following code example demonstrates how to open a user’s personal certificate store and display information about each certificate in the store.  This example uses the <xref:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension> class to display the information.  
  
 [!code-cs[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/csharp/43c6ba08-6598-4ea2-96d7-_1.cs)]
 [!code-vb[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/visualbasic/43c6ba08-6598-4ea2-96d7-_1.vb)]
 [!code-cpp[Cryptography.X509Certificates.X509Extensions#1](~/add/codesnippet/cpp/43c6ba08-6598-4ea2-96d7-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">The extension cannot be decoded.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>