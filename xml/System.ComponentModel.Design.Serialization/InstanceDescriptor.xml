<Type Name="InstanceDescriptor" FullName="System.ComponentModel.Design.Serialization.InstanceDescriptor">
  <TypeSignature Language="C#" Value="public sealed class InstanceDescriptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InstanceDescriptor extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the information necessary to create an instance of an object. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 InstanceDescriptor can store information that describes an instance of an object. This information can be used to create an instance of the object.  
  
 Some custom serializers use InstanceDescriptor to represent serializable objects. Several methods of a <xref:System.ComponentModel.TypeDescriptor> use InstanceDescriptor to represent or instantiate objects.  
  
 An InstanceDescriptor provides the following members:  
  
-   A <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo%2A> property that describes this object.  
  
-   An <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments%2A> property that consists of the constructor arguments that can be used to instantiate this object.  
  
-   A Boolean <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete%2A> property that indicates whether the object is completely represented by the current information.  
  
-   An <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke%2A> method that can be used to create an instance of the represented object.  
  
   
  
## Examples  
 The following code example illustrates how to use a type converter that participates in code generation through the use of instance descriptors.  
  
 [!code-cpp[InstanceDescriptorSample#1](~/add/codesnippet/cpp/t-system.componentmodel._121_1.cpp)]
 [!code-vb[InstanceDescriptorSample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._121_1.vb)]
 [!code-cs[InstanceDescriptorSample#1](~/add/codesnippet/csharp/t-system.componentmodel._121_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstanceDescriptor (System.Reflection.MemberInfo member, System.Collections.ICollection arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MemberInfo member, class System.Collections.ICollection arguments) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="arguments" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="member">The member information for the descriptor. This can be a &lt;xref:System.Reflection.MethodInfo&gt;, &lt;xref:System.Reflection.ConstructorInfo&gt;, &lt;xref:System.Reflection.FieldInfo&gt;, or &lt;xref:System.Reflection.PropertyInfo&gt;. If this is a &lt;xref:System.Reflection.MethodInfo&gt;, &lt;xref:System.Reflection.FieldInfo&gt;, or &lt;xref:System.Reflection.PropertyInfo&gt;, it must represent a <see langword="static" /> member.</param>
        <param name="arguments">The collection of arguments to pass to the member. This parameter can be <see langword="null" /> or an empty collection if there are no arguments. The collection can also consist of other instances of <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> class using the specified member information and arguments.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="member" /> is of type &lt;xref:System.Reflection.MethodInfo&gt;, &lt;xref:System.Reflection.FieldInfo&gt;, or &lt;xref:System.Reflection.PropertyInfo&gt;, and it does not represent a <see langword="static" /> member.  
  
 <paramref name="member" /> is of type &lt;xref:System.Reflection.PropertyInfo&gt; and is not readable.  
  
 <paramref name="member" /> is of type &lt;xref:System.Reflection.MethodInfo&gt; or &lt;xref:System.Reflection.ConstructorInfo&gt;, and the number of arguments in <paramref name="arguments" /> does not match the signature of <paramref name="member." />  
  
 <paramref name="member" /> is of type &lt;xref:System.Reflection.ConstructorInfo&gt; and represents a <see langword="static" /> member.  
  
 <paramref name="member" /> is of type &lt;xref:System.Reflection.FieldInfo&gt;, and the number of arguments in <paramref name="arguments" /> is not zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstanceDescriptor (System.Reflection.MemberInfo member, System.Collections.ICollection arguments, bool isComplete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MemberInfo member, class System.Collections.ICollection arguments, bool isComplete) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="arguments" Type="System.Collections.ICollection" />
        <Parameter Name="isComplete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="member">The member information for the descriptor. This can be a &lt;xref:System.Reflection.MethodInfo&gt;, &lt;xref:System.Reflection.ConstructorInfo&gt;, &lt;xref:System.Reflection.FieldInfo&gt;, or &lt;xref:System.Reflection.PropertyInfo&gt;. If this is a &lt;xref:System.Reflection.MethodInfo&gt;, &lt;xref:System.Reflection.FieldInfo&gt;, or &lt;xref:System.Reflection.PropertyInfo&gt;, it must represent a <see langword="static" /> member.</param>
        <param name="arguments">The collection of arguments to pass to the member. This parameter can be <see langword="null" /> or an empty collection if there are no arguments. The collection can also consist of other instances of <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
        <param name="isComplete">
          <see langword="true" /> if the specified information completely describes the instance; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="member" /> is of type &lt;xref:System.Reflection.MethodInfo&gt;, &lt;xref:System.Reflection.FieldInfo&gt;, or &lt;xref:System.Reflection.PropertyInfo&gt;, and it does not represent a <see langword="static" /> member  
  
 <paramref name="member" /> is of type &lt;xref:System.Reflection.PropertyInfo&gt; and is not readable.  
  
 <paramref name="member" /> is of type &lt;xref:System.Reflection.MethodInfo&gt; or &lt;xref:System.Reflection.ConstructorInfo&gt; and the number of arguments in <paramref name="arguments" /> does not match the signature of <paramref name="member" />.  
  
 <paramref name="member" /> is of type &lt;xref:System.Reflection.ConstructorInfo&gt; and represents a <see langword="static" /> member  
  
 <paramref name="member" /> is of type &lt;xref:System.Reflection.FieldInfo&gt;, and the number of arguments in <paramref name="arguments" /> is not zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Arguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.</summary>
        <value>An &lt;xref:System.Collections.ICollection&gt; of arguments that can be used to create the object.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invokes this instance descriptor and returns the object the descriptor describes.</summary>
        <returns>The object this instance descriptor describes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method creates a new instance of the object indicated by the <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo%2A> property, using the specified arguments to create that particular type of instance.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsComplete">
      <MemberSignature Language="C#" Value="public bool IsComplete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsComplete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the contents of this <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> completely identify the instance.</summary>
        <value>
          <see langword="true" /> if the instance is completely described; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, an <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor> completely describes a particular instance. However, some objects are too complex for a single method or constructor to represent. IsComplete indicates whether an <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor> is incomplete, so a user can identify these objects and perform additional processing, if necessary, to further describe their state.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MemberInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo MemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo MemberInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the member information that describes the instance this descriptor is associated with.</summary>
        <value>A &lt;xref:System.Reflection.MemberInfo&gt; that describes the instance that this object is associated with.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property can be a <xref:System.Reflection.MethodInfo>, <xref:System.Reflection.ConstructorInfo>, <xref:System.Reflection.FieldInfo>, or <xref:System.Reflection.PropertyInfo>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>