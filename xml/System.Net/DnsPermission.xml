<Type Name="DnsPermission" FullName="System.Net.DnsPermission">
  <TypeSignature Language="C#" Value="public sealed class DnsPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DnsPermission extends System.Security.CodeAccessPermission implements class System.Security.Permissions.IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Controls rights to access Domain Name System (DNS) servers on the network.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default permissions allow all local and Intranet zone applications to access DNS services, and no DNS permission for Internet zone applications.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DnsPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
        <summary>Creates a new instance of the <see cref="T:System.Net.DnsPermission" /> class that either allows unrestricted DNS access or disallows DNS access.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `state` is <xref:System.Security.Permissions.PermissionState>, the <xref:System.Net.DnsPermission> instance passes all demands. If `state` contains any other value, the <xref:System.Net.DnsPermission> instance fails all demands.  
  
   
  
## Examples  
 The following example creates an instance of the <xref:System.Net.DnsPermission> class.  
  
 [!code-cpp[DnsPermission_Constructor#1](~/add/codesnippet/cpp/3a7d5b50-fdd8-4887-a768-_1.cpp)]
 [!code-cs[DnsPermission_Constructor#1](~/add/codesnippet/csharp/3a7d5b50-fdd8-4887-a768-_1.cs)]
 [!code-vb[DnsPermission_Constructor#1](~/add/codesnippet/visualbasic/3a7d5b50-fdd8-4887-a768-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="state" /> is not a valid <see cref="T:System.Security.Permissions.PermissionState" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an identical copy of the current permission instance.</summary>
        <returns>A new instance of the <see cref="T:System.Net.DnsPermission" /> class that is an identical copy of the current instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A copy of a <xref:System.Net.DnsPermission> instance provides the same access to DNS servers as the original permission instance.  
  
   
  
## Examples  
 The following example creates an identical copy of an existing <xref:System.Net.DnsPermission> instance.  
  
 [!code-cs[DnsPermission_Copy#1](~/add/codesnippet/csharp/m-system.net.dnspermissi_3_1.cs)]
 [!code-vb[DnsPermission_Copy#1](~/add/codesnippet/visualbasic/m-system.net.dnspermissi_3_1.vb)]
 [!code-cpp[DnsPermission_Copy#1](~/add/codesnippet/cpp/m-system.net.dnspermissi_3_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement securityElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement securityElement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityElement" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="securityElement">The XML encoding to use to reconstruct the <see cref="T:System.Net.DnsPermission" /> instance.</param>
        <summary>Reconstructs a <see cref="T:System.Net.DnsPermission" /> instance from an XML encoding.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FromXml method reconstructs a <xref:System.Net.DnsPermission> instance from an XML encoding defined by the <xref:System.Security.SecurityElement> class.  
  
 Use the <xref:System.Net.DnsPermission.ToXml%2A> method to XML-encode the <xref:System.Net.DnsPermission> instance, including state information.  
  
   
  
## Examples  
 The following example reconstructs a <xref:System.Net.DnsPermission> instance from an XML encoding.  
  
 [!code-cs[DnsPermission_FromXml#1](~/add/codesnippet/csharp/m-system.net.dnspermissi_0_1.cs)]
 [!code-cpp[DnsPermission_FromXml#1](~/add/codesnippet/cpp/m-system.net.dnspermissi_0_1.cpp)]
 [!code-vb[DnsPermission_FromXml#1](~/add/codesnippet/visualbasic/m-system.net.dnspermissi_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="securityElement" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="securityElement" /> is not a <see cref="T:System.Net.DnsPermission" /> element.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">The <see cref="T:System.Net.DnsPermission" /> instance to intersect with the current instance.</param>
        <summary>Creates a permission instance that is the intersection of the current permission instance and the specified permission instance.</summary>
        <returns>A <see cref="T:System.Net.DnsPermission" /> instance that represents the intersection of the current <see cref="T:System.Net.DnsPermission" /> instance with the specified <see cref="T:System.Net.DnsPermission" /> instance, or <see langword="null" /> if the intersection is empty. If both the current instance and <paramref name="target" /> are unrestricted, this method returns a new <see cref="T:System.Net.DnsPermission" /> instance that is unrestricted; otherwise, it returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Intersect method returns a <xref:System.Net.DnsPermission> instance that allows the access defined by both the current <xref:System.Net.DnsPermission> instance and the specified <xref:System.Net.DnsPermission> instance. Any demand must pass both permissions to pass their intersection.  
  
   
  
## Examples  
 The following example creates a permission instance that is the intersection of the current permission instance and the specified permission instance.  
  
 [!code-cs[dnspermission_union_intersect#2](~/add/codesnippet/csharp/m-system.net.dnspermissi_2_1.cs)]
 [!code-vb[dnspermission_union_intersect#2](~/add/codesnippet/visualbasic/m-system.net.dnspermissi_2_1.vb)]
 [!code-cpp[dnspermission_union_intersect#2](~/add/codesnippet/cpp/m-system.net.dnspermissi_2_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> is neither a <see cref="T:System.Net.DnsPermission" /> nor <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">The second <see cref="T:System.Net.DnsPermission" /> instance to be tested for the subset relationship.</param>
        <summary>Determines whether the current permission instance is a subset of the specified permission instance.</summary>
        <returns>
          <see langword="false" /> if the current instance is unrestricted and <paramref name="target" /> is either <see langword="null" /> or unrestricted; otherwise, <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The current <xref:System.Net.DnsPermission> instance is a subset of the specified <xref:System.Net.DnsPermission> instance if the current <xref:System.Net.DnsPermission> instance specifies a set of operations that is wholly contained by the specified <xref:System.Net.DnsPermission> instance.  
  
 If the IsSubsetOf method returns `true`, the current <xref:System.Net.DnsPermission> instance allows no more access to DNS servers than does the specified <xref:System.Net.DnsPermission> instance.  
  
   
  
## Examples  
 The following example uses the IsSubsetOf method to determine whether the current permission instance is a subset of the specified permission instance.  
  
 [!code-cs[DnsPermission_IsSubsetOf#1](~/add/codesnippet/csharp/m-system.net.dnspermissi_6_1.cs)]
 [!code-cpp[DnsPermission_IsSubsetOf#1](~/add/codesnippet/cpp/m-system.net.dnspermissi_6_1.cpp)]
 [!code-vb[DnsPermission_IsSubsetOf#1](~/add/codesnippet/visualbasic/m-system.net.dnspermissi_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> is neither a <see cref="T:System.Net.DnsPermission" /> nor <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks the overall permission state of the object.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Net.DnsPermission" /> instance was created with <see cref="T:System.Security.Permissions.PermissionState" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the IsUnrestricted method to check the overall permission state of the object.  
  
 [!code-cpp[DnsPermission_IsUnrestricted#1](~/add/codesnippet/cpp/m-system.net.dnspermissi_4_1.cpp)]
 [!code-vb[DnsPermission_IsUnrestricted#1](~/add/codesnippet/visualbasic/m-system.net.dnspermissi_4_1.vb)]
 [!code-cs[DnsPermission_IsUnrestricted#1](~/add/codesnippet/csharp/m-system.net.dnspermissi_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an XML encoding of a <see cref="T:System.Net.DnsPermission" /> instance and its current state.</summary>
        <returns>A <see cref="T:System.Security.SecurityElement" /> instance that contains an XML-encoded representation of the security object, including state information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ToXml method creates a <xref:System.Security.SecurityElement> instance to XML-encode a representation of the <xref:System.Net.DnsPermission> instance, including state information.  
  
 Use the <xref:System.Net.DnsPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement> instance.  
  
   
  
## Examples  
 The following example creates an XML encoding of a <xref:System.Net.DnsPermission> instance.  
  
 [!code-cpp[DnsPermission_Constructor#1](~/add/codesnippet/cpp/m-system.net.dnspermissi_1_1.cpp)]
 [!code-cs[DnsPermission_Constructor#1](~/add/codesnippet/csharp/m-system.net.dnspermissi_1_1.cs)]
 [!code-vb[DnsPermission_Constructor#1](~/add/codesnippet/visualbasic/m-system.net.dnspermissi_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">The <see cref="T:System.Net.DnsPermission" /> instance to combine with the current instance.</param>
        <summary>Creates a permission instance that is the union of the current permission instance and the specified permission instance.</summary>
        <returns>A <see cref="T:System.Net.DnsPermission" /> instance that represents the union of the current <see cref="T:System.Net.DnsPermission" /> instance with the specified <see cref="T:System.Net.DnsPermission" /> instance. If <paramref name="target" /> is <see langword="null" />, this method returns a copy of the current instance. If the current instance or <paramref name="target" /> is unrestricted, this method returns a <see cref="T:System.Net.DnsPermission" /> instance that is unrestricted; otherwise, it returns a <see cref="T:System.Net.DnsPermission" /> instance that is restricted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Union method returns a <xref:System.Net.DnsPermission> instance that allows the access defined by either the current <xref:System.Net.DnsPermission> instance or the specified <xref:System.Net.DnsPermission> instance. Any demand that passes either permission passes their union.  
  
   
  
## Examples  
 The following example creates a permission instance that is the union of the current permission instance and the specified permission instance.  
  
 [!code-cs[dnspermission_union_intersect#1](~/add/codesnippet/csharp/m-system.net.dnspermissi_5_1.cs)]
 [!code-vb[dnspermission_union_intersect#1](~/add/codesnippet/visualbasic/m-system.net.dnspermissi_5_1.vb)]
 [!code-cpp[dnspermission_union_intersect#1](~/add/codesnippet/cpp/m-system.net.dnspermissi_5_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> is neither a <see cref="T:System.Net.DnsPermission" /> nor <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>