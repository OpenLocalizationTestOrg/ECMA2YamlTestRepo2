<Type Name="DnsPermissionAttribute" FullName="System.Net.DnsPermissionAttribute">
  <TypeSignature Language="C#" Value="public sealed class DnsPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DnsPermissionAttribute extends System.Security.Permissions.CodeAccessSecurityAttribute" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Permissions.CodeAccessSecurityAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies permission to request information from Domain Name Servers.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The security information declared by DnsPermissionAttribute is stored in the metadata of the attribute target, which is the class to which the DnsPermissionAttribute is applied. The system then accesses this information at run time. The <xref:System.Security.Permissions.SecurityAction> that is passed to the constructor determines the allowable DNS targets.  
  
 These security attributes are used only for [Declarative Security](http://msdn.microsoft.com/en-us/97e21efd-6e89-4115-90d5-ad239513dad8). For [Imperative Security](http://msdn.microsoft.com/en-us/15aab1e1-6b7d-41ad-b102-c1ed7bedea27), use the corresponding <xref:System.Net.DnsPermission> class.  
  
 Security access is either fully restricted or fully unrestricted. Set the <xref:System.Security.Permissions.PermissionState> property to `true` to grant access, or `false` for no access. Set this property as a named parameter.  
  
 For more information about using attributes, see [Attributes](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example uses DnsPermissionAttribute to apply declarative security to a custom class.  
  
 [!code-cs[Classic DnsPermissionAttributeExample#1](~/add/codesnippet/csharp/t-system.net.dnspermissi_1.cs)]
 [!code-cpp[Classic DnsPermissionAttributeExample#1](~/add/codesnippet/cpp/t-system.net.dnspermissi_1.cpp)]
 [!code-vb[Classic DnsPermissionAttributeExample#1](~/add/codesnippet/visualbasic/t-system.net.dnspermissi_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DnsPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.SecurityAction action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
      </Parameters>
      <Docs>
        <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.DnsPermissionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Security.Permissions.SecurityAction> value that is passed to this constructor specifies the allowable <xref:System.Net.DnsPermissionAttribute> targets.  
  
   
  
## Examples  
 The following example uses <xref:System.Net.DnsPermissionAttribute> to apply declarative security to a custom class.  
  
 [!code-cs[Classic DnsPermissionAttributeExample#1](~/add/codesnippet/csharp/7a2591f2-0b5e-4482-b768-_1.cs)]
 [!code-cpp[Classic DnsPermissionAttributeExample#1](~/add/codesnippet/cpp/7a2591f2-0b5e-4482-b768-_1.cpp)]
 [!code-vb[Classic DnsPermissionAttributeExample#1](~/add/codesnippet/visualbasic/7a2591f2-0b5e-4482-b768-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="action" /> parameter is not a valid <see cref="T:System.Security.Permissions.SecurityAction" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreatePermission">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission CreatePermission ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission CreatePermission() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns a new instance of the <see cref="T:System.Net.DnsPermission" /> class.</summary>
        <returns>A <see cref="T:System.Net.DnsPermission" /> that corresponds to the security declaration.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `CreatePermission` method is called by the security system, not by application code.  
  
 The security information described by <xref:System.Net.DnsPermissionAttribute> is stored in the metadata of the attribute target, which is the class to which <xref:System.Net.DnsPermissionAttribute> is applied. The system then accesses the information at run time and calls CreatePermission. The system uses the returned <xref:System.Security.IPermission> to enforce the specified security requirements.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>