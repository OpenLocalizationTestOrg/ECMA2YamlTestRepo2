<Type Name="HttpListenerResponse" FullName="System.Net.HttpListenerResponse">
  <TypeSignature Language="C#" Value="public sealed class HttpListenerResponse : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListenerResponse extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a response to a request being handled by an <see cref="T:System.Net.HttpListener" /> object.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a client makes a request for a resource handled by an <xref:System.Net.HttpListener> object, the request and response are made available to your application in an <xref:System.Net.HttpListenerContext> object. The request is represented by an <xref:System.Net.HttpListenerRequest> object and is available in the <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName> property. The response is represented by an HttpListenerResponse object and is available in the <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=fullName> property.  
  
 You can customize the response by setting various properties, such as <xref:System.Net.HttpListenerResponse.StatusCode%2A>, <xref:System.Net.HttpListenerResponse.StatusDescription%2A>, and <xref:System.Net.HttpListenerResponse.Cookies%2A>. Use the <xref:System.Net.HttpListenerResponse.OutputStream%2A?displayProperty=fullName> property to obtain a <xref:System.IO.Stream> instance to which response data can be written. Finally, send the response data to the client by calling the <xref:System.Net.HttpListenerResponse.Close%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates responding to a client request.  
  
 [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/t-system.net.httplistene_2_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the connection to the client without sending a response.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this method on an object that has already been closed has no effect. If the response has not already been closed, this method closes it and the associated <xref:System.Net.HttpListenerRequest> and <xref:System.Net.HttpListenerContext> objects. The connection to the client is also closed, regardless of the <xref:System.Net.HttpListenerRequest.KeepAlive%2A> property value of the client request.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddHeader">
      <MemberSignature Language="C#" Value="public void AddHeader (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHeader(string name, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the HTTP header to set.</param>
        <param name="value">The value for the `name` header.</param>
        <summary>Adds the specified header and value to the HTTP headers for this response.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this method is equivalent to calling the <xref:System.Net.WebHeaderCollection.Set%2A> method on the collection returned by the <xref:System.Net.HttpListenerResponse.Headers%2A> property.  
  
 If the header specified in `name` does not exist, this method inserts a new header into the <xref:System.Net.HttpListenerResponse.Headers%2A> property's collection. If `name` is present in the collection, this method replaces the existing value with `value`. To add a value to an existing header without replacing the existing value, use the <xref:System.Net.HttpListenerResponse.AppendHeader%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates adding a header using this property.  
  
 [!code-cs[Net_Listener_Basic#26](~/add/codesnippet/csharp/m-system.net.httplistene_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" /> or an empty string ("").</exception>
        <exception cref="T:System.ArgumentException">You are not allowed to specify a value for the specified header.  
  
 -or-  
  
 <paramref name="name" /> or <paramref name="value" /> contains invalid characters.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value" /> is greater than 65,535 characters.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendCookie">
      <MemberSignature Language="C#" Value="public void AppendCookie (System.Net.Cookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendCookie(class System.Net.Cookie cookie) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Net.Cookie" />
      </Parameters>
      <Docs>
        <param name="cookie">The &lt;xref:System.Net.Cookie&gt; to add to the collection to be sent with this response.</param>
        <summary>Adds the specified &lt;xref:System.Net.Cookie&gt; to the collection of cookies for this response.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this method is equivalent to calling the <xref:System.Net.CookieCollection.Add%2A> method on the collection returned by the <xref:System.Net.HttpListenerResponse.Cookies%2A> property.  
  
 If the specified cookie does not exist in the <xref:System.Net.HttpListenerResponse.Cookies%2A> property's collection, `cookie` is added. If the cookie exists in the collection, `cookie` replaces it.  
  
   
  
## Examples  
 The following code example demonstrates adding a cookie to a response  
  
 [!code-cs[Net_Listener_Basic#20](~/add/codesnippet/csharp/m-system.net.httplistene_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cookie" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppendHeader">
      <MemberSignature Language="C#" Value="public void AppendHeader (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendHeader(string name, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the HTTP header to append `value` to.</param>
        <param name="value">The value to append to the `name` header.</param>
        <summary>Appends a value to the specified HTTP header to be sent with this response.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this method is equivalent to calling the <xref:System.Net.WebHeaderCollection.Add%2A> method on the collection returned by the <xref:System.Net.HttpListenerResponse.Headers%2A> property.  
  
 If the header specified in `header` does not exist, this method inserts a new header into the <xref:System.Net.HttpListenerResponse.Headers%2A> property's collection. If `header` is present in the collection, this method adds `value` to the existing values. To replace the value of an existing header, use the <xref:System.Net.HttpListenerResponse.AddHeader%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is <see langword="null" /> or an empty string ("").  
  
 -or-  
  
 You are not allowed to specify a value for the specified header.  
  
 -or-  
  
 <paramref name="name" /> or <paramref name="value" /> contains invalid characters.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="value" /> is greater than 65,535 characters.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sends the response to the client and releases the resources held by this <see cref="T:System.Net.HttpListenerResponse" /> instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method closes the response stream and the <xref:System.Net.HttpListenerRequest> associated with the response.  
  
   
  
## Examples  
 The following code example demonstrates calling this method to send a <xref:System.Net.HttpStatusCode> (403) response to the client.  
  
 [!code-vb[NclListener#5](~/add/codesnippet/visualbasic/m-system.net.httplistene_0_1.vb)]
 [!code-cs[NclListener#5](~/add/codesnippet/csharp/m-system.net.httplistene_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (byte[] responseEntity, bool willBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(unsigned int8[] responseEntity, bool willBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseEntity" Type="System.Byte[]" />
        <Parameter Name="willBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="responseEntity">A &lt;xref:System.Byte&gt; array that contains the response to send to the client.</param>
        <param name="willBlock">
          <see langword="true" /> to block execution while flushing the stream to the client; otherwise, <see langword="false" />.</param>
        <summary>Returns the specified byte array to the client and releases the resources held by this <see cref="T:System.Net.HttpListenerResponse" /> instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you are sending body data with the response, you can use this method to send it as a <xref:System.Byte> array instead of writing the body data to the <xref:System.Net.HttpListenerResponse.OutputStream%2A> property and calling the <xref:System.Net.HttpListenerResponse.Close%2A> method.  
  
 This method closes the response stream and the <xref:System.Net.HttpListenerRequest> associated with the response.  
  
   
  
## Examples  
 The following code example demonstrates calling this method.  
  
 [!code-cs[Net_Listener_Basic#24](~/add/codesnippet/csharp/m-system.net.httplistene_17_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="responseEntity" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding ContentEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding ContentEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the &lt;xref:System.Text.Encoding&gt; for this response's &lt;xref:System.Net.HttpListenerResponse.OutputStream%2A&gt;.</summary>
        <value>An &lt;xref:System.Text.Encoding&gt; object suitable for use with the data in the &lt;xref:System.Net.HttpListenerResponse.OutputStream%2A&gt; property, or <see langword="null" /> if no encoding is specified.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An <xref:System.Text.Encoding> object can be used to convert byte sequences into character sets (code pages) and characters into byte sequences.  
  
   
  
## Examples  
 The following code example demonstrates using this property.  
  
 [!code-vb[NclListener#5](~/add/codesnippet/visualbasic/p-system.net.httplistene_45_1.vb)]
 [!code-cs[NclListener#5](~/add/codesnippet/csharp/p-system.net.httplistene_45_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentLength64">
      <MemberSignature Language="C#" Value="public long ContentLength64 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ContentLength64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of bytes in the body data included in the response.</summary>
        <value>The value of the response's <see langword="Content-Length" /> header.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Content-Length` header expresses the length, in bytes, of the response's body data. When using a format that is not send the data chunked or raw, you must set the ContentLength64 property. If you do not, the <xref:System.Net.HttpListener> does not send the response data.  
  
 For a complete list of response headers, see the <xref:System.Net.HttpResponseHeader> enumeration.  
  
   
  
## Examples  
 The following code example demonstrates setting the value of this property.  
  
 [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/p-system.net.httplistene_15_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">The response is already being sent.</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the MIME type of the content returned.</summary>
        <value>A &lt;xref:System.String&gt; instance that contains the text of the response's <see langword="Content-Type" /> header.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When communicating with a Web browser, you should explicitly set this property when returning any content type other than `text/html`.  
  
 For a complete list of response headers, see the <xref:System.Net.HttpResponseHeader> enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The value specified for a set operation is an empty string ("").</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public System.Net.CookieCollection Cookies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.CookieCollection Cookies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.CookieCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the collection of cookies returned with the response.</summary>
        <value>A &lt;xref:System.Net.CookieCollection&gt; that contains cookies to accompany the response. The collection is empty if no cookies have been added to the response.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cookie is name/value text data from a Web server that is stored on the local (client) computer. The following cookie formats are supported: Netscape, RFC 2109, and RFC 2965. The Netscape cookie specification is available at http://wp.netscape.com/newsref/std/cookie_spec.html; the RFC documents are available at [http://www.rfc-editor.org](http://www.rfc-editor.org).  
  
   
  
## Examples  
 The following code example checks a request for a cookie, and returns a new cookie with the response if the request did not have one.  
  
 [!code-cs[Net_Listener_Basic#20](~/add/codesnippet/csharp/p-system.net.httplistene_23_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CopyFrom">
      <MemberSignature Language="C#" Value="public void CopyFrom (System.Net.HttpListenerResponse templateResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFrom(class System.Net.HttpListenerResponse templateResponse) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateResponse" Type="System.Net.HttpListenerResponse" />
      </Parameters>
      <Docs>
        <param name="templateResponse">The <see cref="T:System.Net.HttpListenerResponse" /> instance to copy.</param>
        <summary>Copies properties from the specified <see cref="T:System.Net.HttpListenerResponse" /> to this response.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you regularly change many properties from their default values to a fixed set of new values, it is convenient to use an <xref:System.Net.HttpListenerResponse> instance as a template. Customize the template response once and, instead of configuring each response separately, call the CopyFrom method to configure a new response based on property values in the template response.  
  
 The following properties are copied from `templateResponse` to the current instance.  
  
-   <xref:System.Net.HttpListenerResponse.Headers%2A>  
  
-   <xref:System.Net.HttpListenerResponse.ContentLength64%2A>  
  
-   <xref:System.Net.HttpListenerResponse.StatusCode%2A>  
  
-   <xref:System.Net.HttpListenerResponse.StatusDescription%2A>  
  
-   <xref:System.Net.HttpListenerResponse.KeepAlive%2A>  
  
-   <xref:System.Net.HttpListenerResponse.ProtocolVersion%2A>  
  
   
  
## Examples  
 The following code example demonstrates creating a response by copying a template response.  
  
 [!code-vb[NCLListener#5](~/add/codesnippet/visualbasic/m-system.net.httplistene_9_1.vb)]
 [!code-cs[NCLListener#5](~/add/codesnippet/csharp/m-system.net.httplistene_9_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the collection of header name/value pairs returned by the server.</summary>
        <value>A &lt;xref:System.Net.WebHeaderCollection&gt; instance that contains all the explicitly set HTTP headers to be included in the response.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Response headers contain metadata information such as the date and time of the response, the identity of the responding server, and the MIME type of the data contained in the response body.  
  
 For a complete list of response headers, see the <xref:System.Net.HttpResponseHeader> enumeration.  
  
> [!NOTE]
>  If you attempt to set a Content-Length, Keep-Alive, Transfer-Encoding, or WWW-Authenticate header using the Headers property, an exception will be thrown. Use the <xref:System.Net.HttpListenerResponse.KeepAlive%2A> or <xref:System.Net.HttpListenerResponse.ContentLength64%2A> properties to set these headers. You cannot set the Transfer-Encoding or WWW-Authenticate headers manually.  
  
   
  
## Examples  
 The following code example demonstrates displaying the headers in a <xref:System.Net.WebHeaderCollection>.  
  
 [!code-cs[Net_Listener_Basic#23](~/add/codesnippet/csharp/p-system.net.httplistene_32_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The &lt;xref:System.Net.WebHeaderCollection&gt; instance specified for a set operation is not valid for a response.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the server requests a persistent connection.</summary>
        <value>
          <see langword="true" /> if the server requests a persistent connection; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If an HTTP client and server expect to exchange data multiple times in a short period, a persistent connection speeds up their communications by allowing them to avoid the overhead required to open and close a TCP connection for each message. Persistent connections are in widespread use in communications between modern Web browsers and Web servers.  
  
 Persistent connections are described in detail in the HTTP/1.1 protocol specification (RFC 2616) available at the RTF Editor Web site ([http://www.rfc-editor.org](http://www.rfc-editor.org)).  
  
   
  
## Examples  
 The following code example demonstrates setting the value of this property.  
  
 [!code-vb[NclListener#7](~/add/codesnippet/visualbasic/p-system.net.httplistene_36_1.vb)]
 [!code-cs[NclListener#7](~/add/codesnippet/csharp/p-system.net.httplistene_36_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OutputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream OutputStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream OutputStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.IO.Stream&gt; object to which a response can be written.</summary>
        <value>A &lt;xref:System.IO.Stream&gt; object to which a response can be written.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.HttpListenerResponse.ContentLength64%2A> property must be set explicitly before writing to the returned <xref:System.IO.Stream> object.  
  
> [!NOTE]
>  Closing the request does not close the stream returned by this property. When you no longer need the stream, you should close it by calling the Close method.  
  
   
  
## Examples  
 The following code example demonstrates calling this method.  
  
 [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_44_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ProtocolVersion">
      <MemberSignature Language="C#" Value="public Version ProtocolVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ProtocolVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the HTTP version used for the response.</summary>
        <value>A &lt;xref:System.Version&gt; object indicating the version of HTTP used when responding to the client. Note that this property is now obsolete.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The capabilities of different HTTP versions are specified in the documents available at http://www.ietf.org.  
  
   
  
## Examples  
 The following code example demonstrates setting the value of this property.  
  
 [!code-vb[NclListener#5](~/add/codesnippet/visualbasic/p-system.net.httplistene_30_1.vb)]
 [!code-cs[NclListener#5](~/add/codesnippet/csharp/p-system.net.httplistene_30_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The value specified for a set operation does not have its &lt;xref:System.Version.Major%2A&gt; property set to 1 or does not have its &lt;xref:System.Version.Minor%2A&gt; property set to either 0 or 1.</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Redirect">
      <MemberSignature Language="C#" Value="public void Redirect (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Redirect(string url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">The URL that the client should use to locate the requested resource.</param>
        <summary>Configures the response to redirect the client to the specified URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Redirect method is used to redirect a client to the new location for a resource. This method sets the response's `Location` header to `url`, the <xref:System.Net.HttpListenerResponse.StatusCode%2A> property to <xref:System.Net.HttpStatusCode>, and the <xref:System.Net.HttpListenerResponse.StatusDescription%2A> property to "Found".  
  
   
  
## Examples  
 The following code example demonstrates calling this method.  
  
 [!code-cs[Net_Listener_Basic#27](~/add/codesnippet/csharp/m-system.net.httplistene_11_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RedirectLocation">
      <MemberSignature Language="C#" Value="public string RedirectLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RedirectLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value of the HTTP <see langword="Location" /> header in this response.</summary>
        <value>A &lt;xref:System.String&gt; that contains the absolute URL to be sent to the client in the <see langword="Location" /> header.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Location` header specifies the URL to which the client is directed to locate a requested resource.  
  
> [!NOTE]
>  Setting this property does not automatically set the <xref:System.Net.HttpListenerResponse.StatusCode%2A> property.  
  
   
  
## Examples  
 The following code example demonstrates setting this property.  
  
 [!code-cs[Net_Listener_Basic#25](~/add/codesnippet/csharp/p-system.net.httplistene_25_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The value specified for a set operation is an empty string ("").</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SendChunked">
      <MemberSignature Language="C#" Value="public bool SendChunked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendChunked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the response uses chunked transfer encoding.</summary>
        <value>
          <see langword="true" /> if the response is set to use chunked transfer encoding; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The body of a chunked message is made up of a series of chunks. Each chunk comprises of two parts—the size of the chunk data and the actual data. When set to true the response is sent using chunked transfer encoding.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetCookie">
      <MemberSignature Language="C#" Value="public void SetCookie (System.Net.Cookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCookie(class System.Net.Cookie cookie) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Net.Cookie" />
      </Parameters>
      <Docs>
        <param name="cookie">A &lt;xref:System.Net.Cookie&gt; for this response.</param>
        <summary>Adds or updates a &lt;xref:System.Net.Cookie&gt; in the collection of cookies sent with this response.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Two cookies are considered the same if the values of their <xref:System.Net.Cookie.Name%2A>, <xref:System.Net.Cookie.Domain%2A>, and <xref:System.Net.Cookie.Path%2A> properties are the same. If these three pieces of information are the same, the method attempts to update the cookie. The name and domain comparisons are not case sensitive, but the path comparison is case sensitive.  
  
   
  
## Examples  
 The following code example demonstrates calling this method.  
  
 [!code-cs[Net_Listener_Basic#28](~/add/codesnippet/csharp/m-system.net.httplistene_15_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cookie" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The cookie already exists in the collection and could not be replaced.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StatusCode">
      <MemberSignature Language="C#" Value="public int StatusCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StatusCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the HTTP status code to be returned to the client.</summary>
        <value>An &lt;xref:System.Int32&gt; value that specifies the HTTP status code for the requested resource. The default is &lt;xref:System.Net.HttpStatusCode&gt;, indicating that the server successfully processed the client's request and included the requested resource in the response body.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clients use the status code returned by the server to decide how to proceed. A value of <xref:System.Net.HttpStatusCode> indicates that the server successfully processed the client's request and included the requested resource in the response body. Other common status codes include <xref:System.Net.HttpStatusCode>, indicating that the requested resource was not found on the server, and <xref:System.Net.HttpStatusCode>, indicating that it was unnecessary to return the requested resource in the response body because the client's cached copy of the resource is up-to-date.  
  
 For a complete list of possible status codes, see the <xref:System.Net.HttpStatusCode> enumeration.  
  
   
  
## Examples  
 The following code example demonstrates setting the value of this property.  
  
 [!code-cs[Net_Listener_Basic#7](~/add/codesnippet/csharp/p-system.net.httplistene_46_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <exception cref="T:System.Net.ProtocolViolationException">The value specified for a set operation is not valid. Valid values are between 100 and 999 inclusive.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StatusDescription">
      <MemberSignature Language="C#" Value="public string StatusDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a text description of the HTTP status code returned to the client.</summary>
        <value>The text description of the HTTP status code returned to the client. The default is the RFC 2616 description for the &lt;xref:System.Net.HttpListenerResponse.StatusCode%2A&gt; property value, or an empty string ("") if an RFC 2616 description does not exist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The status description typically provides details that explain the <xref:System.Net.HttpListenerResponse.StatusCode%2A> value.  
  
   
  
## Examples  
 The following code example demonstrates setting the value of this property.  
  
 [!code-vb[NclListener#7](~/add/codesnippet/visualbasic/p-system.net.httplistene_13_1.vb)]
 [!code-cs[NclListener#7](~/add/codesnippet/csharp/p-system.net.httplistene_13_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The value specified for a set operation contains non-printable characters.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by the <see cref="T:System.Net.HttpListenerResponse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Net.HttpListenerResponse.Close%2A> method to send the response and release resources held by an <xref:System.Net.HttpListenerResponse>. To discard the response and release the resources held by this instance, use the <xref:System.Net.HttpListenerResponse.Abort%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>