<Type Name="WebProxy" FullName="System.Net.WebProxy">
  <TypeSignature Language="C#" Value="public class WebProxy : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit WebProxy extends System.Object implements class System.Net.IWebProxy, class System.Runtime.Serialization.ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Contains HTTP proxy settings for the &lt;xref:System.Net.WebRequest&gt; class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The WebProxy class contains the proxy settings that <xref:System.Net.WebRequest> instances use to determine whether a Web proxy is used to send requests. Global Web proxy settings can be specified in machine and application configuration files, and applications can use instances of the WebProxy class to customize Web proxy use. The WebProxy class is the base implementation of the <xref:System.Net.IWebProxy> interface.  
  
 To obtain instances of the Web proxy class, you can use any of the following methods:  
  
-   The <xref:System.Net.WebProxy.%23ctor%2A> constructor.  
  
-   The <xref:System.Net.WebProxy.GetDefaultProxy%2A> method.  
  
-   The <xref:System.Net.GlobalProxySelection.Select%2A> method.  
  
 These methods each supply a WebProxy instance that you can further customize; the difference between them is how the instance is initialized before it is returned to your application. The <xref:System.Net.WebProxy.%23ctor%2A> constructor returns an instance of the WebProxy class with the <xref:System.Net.WebProxy.Address%2A> property set to `null`. When a request uses a WebProxy instance in this state, no proxy is used to send the request.  
  
 The <xref:System.Net.WebProxy.GetDefaultProxy%2A> method returns an instance of the WebProxy class with the <xref:System.Net.WebProxy.Address%2A>, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>, and <xref:System.Net.WebProxy.BypassList%2A> properties set to the values used by Internet Explorer 5.5 and later.  
  
 The <xref:System.Net.GlobalProxySelection.Select%2A> method returns an instance of the WebProxy class with it properties set according to a combination of Internet Explorer and configuration file settings.  
  
 The WebProxy class supports automatic detection and execution of proxy configuration scripts. This feature is also known as Web Proxy Auto-Discovery (WPAD). When using automatic proxy configuration, a configuration script, typically named Wpad.dat, must be located, downloaded, compiled, and run. If these operations are successful, the script returns the proxies that can be used for a request.  
  
   
  
## Examples  
 The following code example assigns a WebProxy instance to a <xref:System.Net.WebRequest> instance. The <xref:System.Net.WebRequest> instance uses the proxy to connect to external Internet resources. (For an example that demonstrates using the WPAD feature, see the documentation for the <xref:System.Net.IWebProxyScript> class.)  
  
 [!code-cpp[Classic WebProxy Example#1](~/add/codesnippet/cpp/t-system.net.webproxy_1.cpp)]
 [!code-vb[Classic WebProxy Example#1](~/add/codesnippet/visualbasic/t-system.net.webproxy_1.vb)]
 [!code-cs[Classic WebProxy Example#1](~/add/codesnippet/csharp/t-system.net.webproxy_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes an empty instance of the <see cref="T:System.Net.WebProxy" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default constructor initializes an empty instance of the <xref:System.Net.WebProxy> class with the <xref:System.Net.WebProxy.Address%2A> property set to `null`.  
  
 When the <xref:System.Net.WebProxy.Address%2A> property is `null`, the <xref:System.Net.WebProxy.IsBypassed%2A> method returns `true` and the <xref:System.Net.WebProxy.GetProxy%2A> method returns the destination address.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#1](~/add/codesnippet/cpp/m-system.net.webproxy.sh_3_1.cpp)]
 [!code-cs[NCLWebProxy#1](~/add/codesnippet/csharp/m-system.net.webproxy.sh_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Address">The URI of the proxy server.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance containing `Address`.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#6](~/add/codesnippet/cpp/m-system.net.webproxy.sh_1_1.cpp)]
 [!code-cs[NCLWebProxy#6](~/add/codesnippet/csharp/m-system.net.webproxy.sh_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">
          <paramref name="Address" /> is an invalid URI.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="Address">A &lt;xref:System.Uri&gt; instance that contains the address of the proxy server.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class from the specified &lt;xref:System.Uri&gt; instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to the `Address` parameter.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#2](~/add/codesnippet/cpp/m-system.net.webproxy.sh_0_1.cpp)]
 [!code-cs[NCLWebProxy#2](~/add/codesnippet/csharp/m-system.net.webproxy.sh_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebProxy (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">The serialization data.</param>
        <param name="streamingContext">The context for the serialized data.</param>
        <summary>Initializes an instance of the <see cref="T:System.Net.WebProxy" /> class using previously serialized content.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the system to deserialize a <xref:System.Net.WebProxy> instance; applications do not call it.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address, bool BypassOnLocal) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Address">The URI of the proxy server.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI and bypass setting.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance that contains `Address` and the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#7](~/add/codesnippet/cpp/m-system.net.webproxy.sh_4_1.cpp)]
 [!code-cs[NCLWebProxy#7](~/add/codesnippet/csharp/m-system.net.webproxy.sh_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">
          <paramref name="Address" /> is an invalid URI.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Host, int Port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Host, int32 Port) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Host" Type="System.String" />
        <Parameter Name="Port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Host">The name of the proxy host.</param>
        <param name="Port">The port number on `Host` to use.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified host and port number.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance of the form http:// `Host` : `Port`.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#5](~/add/codesnippet/cpp/m-system.net.webproxy.sh_6_1.cpp)]
 [!code-cs[NCLWebProxy#5](~/add/codesnippet/csharp/m-system.net.webproxy.sh_6_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">The URI formed by combining <paramref name="Host" /> and <paramref name="Port" /> is not a valid URI.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address, bool BypassOnLocal) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Address">A &lt;xref:System.Uri&gt; instance that contains the address of the proxy server.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the &lt;xref:System.Uri&gt; instance and bypass setting.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to `Address` and with the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#3](~/add/codesnippet/cpp/m-system.net.webproxy.sh_7_1.cpp)]
 [!code-cs[NCLWebProxy#3](~/add/codesnippet/csharp/m-system.net.webproxy.sh_7_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal, string[] BypassList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address, bool BypassOnLocal, string[] BypassList) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="Address">The URI of the proxy server.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
        <param name="BypassList">An array of regular expression strings that contain the URIs of the servers to bypass.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI, bypass setting, and list of URIs to bypass.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance that contains `Address`, the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`, and the <xref:System.Net.WebProxy.BypassList%2A> property set to `BypassList`.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#8](~/add/codesnippet/cpp/m-system.net.webproxy.sh_2_1.cpp)]
 [!code-cs[NCLWebProxy#8](~/add/codesnippet/csharp/m-system.net.webproxy.sh_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">
          <paramref name="Address" /> is an invalid URI.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address, bool BypassOnLocal, string[] BypassList) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="Address">A &lt;xref:System.Uri&gt; instance that contains the address of the proxy server.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
        <param name="BypassList">An array of regular expression strings that contains the URIs of the servers to bypass.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified &lt;xref:System.Uri&gt; instance, bypass setting, and list of URIs to bypass.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to `Address`, the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`, and the <xref:System.Net.WebProxy.BypassList%2A> property set to `BypassList`.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#4](~/add/codesnippet/cpp/m-system.net.webproxy.sh_5_1.cpp)]
 [!code-cs[NCLWebProxy#4](~/add/codesnippet/csharp/m-system.net.webproxy.sh_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address, bool BypassOnLocal, string[] BypassList, class System.Net.ICredentials Credentials) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
        <Parameter Name="Credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="Address">The URI of the proxy server.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
        <param name="BypassList">An array of regular expression strings that contains the URIs of the servers to bypass.</param>
        <param name="Credentials">An &lt;xref:System.Net.ICredentials&gt; instance to submit to the proxy server for authentication.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI, bypass setting, list of URIs to bypass, and credentials.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance that contains `Address`, the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`, the <xref:System.Net.WebProxy.BypassList%2A> property set to `BypassList`, and the <xref:System.Net.WebProxy.Credentials%2A> property set to `Credentials`.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#9](~/add/codesnippet/cpp/25929c39-89a2-4ac3-bf8d-_1.cpp)]
 [!code-cs[NCLWebProxy#9](~/add/codesnippet/csharp/25929c39-89a2-4ac3-bf8d-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">
          <paramref name="Address" /> is an invalid URI.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address, bool BypassOnLocal, string[] BypassList, class System.Net.ICredentials Credentials) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
        <Parameter Name="Credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="Address">A &lt;xref:System.Uri&gt; instance that contains the address of the proxy server.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
        <param name="BypassList">An array of regular expression strings that contains the URIs of the servers to bypass.</param>
        <param name="Credentials">An &lt;xref:System.Net.ICredentials&gt; instance to submit to the proxy server for authentication.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified &lt;xref:System.Uri&gt; instance, bypass setting, list of URIs to bypass, and credentials.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to `Address`, the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`, the <xref:System.Net.WebProxy.BypassList%2A> property set to `BypassList`, and the <xref:System.Net.WebProxy.Credentials%2A> property set to `Credentials`.  
  
   
  
## Examples  
 The following code example demonstrates calling this constructor.  
  
 [!code-cpp[NCLWebProxy#13](~/add/codesnippet/cpp/35b6ace3-e60e-4d11-a417-_1.cpp)]
 [!code-cs[NCLWebProxy#13](~/add/codesnippet/csharp/35b6ace3-e60e-4d11-a417-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Uri Address { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the address of the proxy server.</summary>
        <value>A &lt;xref:System.Uri&gt; instance that contains the address of the proxy server.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Address property contains the address of the proxy server. When automatic proxy detection is not enabled, and no automatic configuration script is specified, the Address property and <xref:System.Net.WebProxy.BypassList%2A> determine the proxy used for a request.  
  
 When the Address property is `null`, requests bypass the proxy and connect directly to the destination host.  
  
   
  
## Examples  
 The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its Address.  
  
 [!code-cs[NCLAutoProxy#1](~/add/codesnippet/csharp/p-system.net.webproxy.ad_1.cs)]
 [!code-cpp[NCLAutoProxy#1](~/add/codesnippet/cpp/p-system.net.webproxy.ad_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BypassArrayList">
      <MemberSignature Language="C#" Value="public System.Collections.ArrayList BypassArrayList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList BypassArrayList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a list of addresses that do not use the proxy server.</summary>
        <value>An <see cref="T:System.Collections.ArrayList" /> that contains a list of &lt;xref:System.Net.WebProxy.BypassList%2A&gt; arrays that represents URIs that do not use the proxy server when accessed.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.WebProxy.BypassList%2A> is an array list of regular expression strings that describe the URIs that a <xref:System.Net.WebRequest> instance accesses directly instead of through the proxy server.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BypassList">
      <MemberSignature Language="C#" Value="public string[] BypassList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] BypassList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an array of addresses that do not use the proxy server.</summary>
        <value>An array that contains a list of regular expressions that describe URIs that do not use the proxy server when accessed.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BypassList property contains an array of regular expressions that describe URIs that a <xref:System.Net.WebRequest> instance accesses directly instead of through the proxy server.  
  
   
  
## Examples  
 The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its BypassList property.  
  
 [!code-cs[NCLAutoProxy#1](~/add/codesnippet/csharp/p-system.net.webproxy.by_0_1.cs)]
 [!code-cpp[NCLAutoProxy#1](~/add/codesnippet/cpp/p-system.net.webproxy.by_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BypassProxyOnLocal">
      <MemberSignature Language="C#" Value="public bool BypassProxyOnLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BypassProxyOnLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to bypass the proxy server for local addresses.</summary>
        <value>
          <see langword="true" /> to bypass the proxy server for local addresses; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The setting of the BypassProxyOnLocal property determines whether <xref:System.Net.WebRequest> instances use the proxy server when accessing local Internet resources.  
  
 If BypassProxyOnLocal is `true`, requests to local Internet resources do not use the proxy server. Local requests are identified by the lack of a period (.) in the URI, as in http://webserver/, or access the local server, including http://localhost, http://loopback, or http://127.0.0.1. When BypassProxyOnLocal is `false`, all Internet requests are made through the proxy server.  
  
> [!NOTE]
>  Requests to a local host with a URI that contain a period use the proxy. To avoid using a proxy in these cases, create an entry for the host in the <xref:System.Net.WebProxy.BypassList%2A>.  
  
   
  
## Examples  
 The following code example demonstrates calling a constructor that sets this property and getting the value of this property.  
  
 [!code-cpp[NCLWebProxy#7](~/add/codesnippet/cpp/p-system.net.webproxy.by_1_1.cpp)]
 [!code-cs[NCLWebProxy#7](~/add/codesnippet/csharp/p-system.net.webproxy.by_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the credentials to submit to the proxy server for authentication.</summary>
        <value>An &lt;xref:System.Net.ICredentials&gt; instance that contains the credentials to submit to the proxy server for authentication.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Credentials property contains the authentication credentials to send to the proxy server in response to an HTTP 407 (proxy authorization) status code. In most client scenarios, you should use the <xref:System.Net.CredentialCache.DefaultCredentials%2A>, which are the credentials of the currently logged on user. To do this, set the <xref:System.Net.WebProxy.UseDefaultCredentials%2A> property to `true` instead of setting this property.  
  
> [!NOTE]
>  If you set the Credentials property to credentials other than the <xref:System.Net.CredentialCache.DefaultCredentials%2A>, setting the <xref:System.Net.WebProxy.UseDefaultCredentials%2A> property to `true` causes a <xref:System.InvalidOperationException>. To prevent this, you must set the Credentials property to `null` before setting the <xref:System.Net.WebProxy.UseDefaultCredentials%2A> property to `true`. Likewise, you cannot set this property to any value when <xref:System.Net.WebProxy.UseDefaultCredentials%2A> is `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">You attempted to set this property when the &lt;xref:System.Net.WebProxy.UseDefaultCredentials%2A&gt; property was set to <see langword="true" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.WebProxy GetDefaultProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.WebProxy GetDefaultProxy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated. Please use the proxy selected for you by default. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WebProxy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the Internet Explorer nondynamic proxy settings.</summary>
        <returns>A <see cref="T:System.Net.WebProxy" /> instance that contains the nondynamic proxy settings from Internet Explorer 5.5 and later.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetDefaultProxy method reads the nondynamic proxy settings stored by Internet Explorer 5.5 and later, and creates a <xref:System.Net.WebProxy> instance with those settings.  
  
 The GetDefaultProxy method does not pick up any dynamic settings that are generated from scripts run by Internet Explorer, from automatic configuration entries, or from DHCP or DNS lookups.  
  
 Applications should use the <xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=fullName> property and the <xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=fullName> method instead of the GetDefaultProxy method.  
  
   
  
## Examples  
 The following code example demonstrates calling this method.  
  
 [!code-cpp[NCLWebProxy#11](~/add/codesnippet/cpp/m-system.net.webproxy.ge_0_1.cpp)]
 [!code-cs[NCLWebProxy#11](~/add/codesnippet/csharp/m-system.net.webproxy.ge_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">for unrestricted access to network resources. Associated Enumeration: <see cref="T:System.Security.Permissions.PermissionState" />.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
        <param name="streamingContext">A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that specifies the destination for this serialization.</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data that is needed to serialize the target object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Any objects included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetProxy">
      <MemberSignature Language="C#" Value="public Uri GetProxy (Uri destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Uri GetProxy(class System.Uri destination) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="destination">The &lt;xref:System.Uri&gt; instance of the requested Internet resource.</param>
        <summary>Returns the proxied URI for a request.</summary>
        <returns>The &lt;xref:System.Uri&gt; instance of the Internet resource, if the resource is on the bypass list; otherwise, the &lt;xref:System.Uri&gt; instance of the proxy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetProxy method returns the URI that the <xref:System.Net.WebRequest> instance uses to access the Internet resource.  
  
 GetProxy compares `destination` with the contents of <xref:System.Net.WebProxy.BypassList%2A>, using the <xref:System.Net.WebProxy.IsBypassed%2A> method. If <xref:System.Net.WebProxy.IsBypassed%2A> returns `true`, GetProxy returns `destination` and the <xref:System.Net.WebRequest> instance does not use the proxy server.  
  
 If `destination` is not in <xref:System.Net.WebProxy.BypassList%2A>, the <xref:System.Net.WebRequest> instance uses the proxy server and the <xref:System.Net.WebProxy.Address%2A> property is returned.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Net.WebProxy> object and calls this method to get the proxy that is selected for a resource.  
  
 [!code-cs[NCLAutoProxy#2](~/add/codesnippet/csharp/m-system.net.webproxy.ge_1_1.cs)]
 [!code-cpp[NCLAutoProxy#2](~/add/codesnippet/cpp/m-system.net.webproxy.ge_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="destination" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsBypassed">
      <MemberSignature Language="C#" Value="public bool IsBypassed (Uri host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsBypassed(class System.Uri host) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="host">The &lt;xref:System.Uri&gt; instance of the host to check for proxy use.</param>
        <summary>Indicates whether to use the proxy server for the specified host.</summary>
        <returns>
          <see langword="true" /> if the proxy server should not be used for <paramref name="host" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsBypassed method is used to determine whether to bypass the proxy server when accessing an Internet resource.  
  
 The <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> and <xref:System.Net.WebProxy.BypassList%2A> properties control the return value of the IsBypassed method.  
  
 IsBypassed returns `true` under any of the following conditions:  
  
-   If <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> is `true` and `host` is a local URI. Local requests are identified by the lack of a period (.) in the URI, as in "http://webserver/".  
  
-   If `host` matches a regular expression in <xref:System.Net.WebProxy.BypassList%2A>.  
  
-   If <xref:System.Net.WebProxy.Address%2A> is `null`.  
  
 All other conditions return `false`.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Net.WebProxy> object and calls this method to check whether the bypass list is properly set.  
  
 [!code-cpp[NCLWebProxy#12](~/add/codesnippet/cpp/m-system.net.webproxy.is_1.cpp)]
 [!code-cs[NCLWebProxy#12](~/add/codesnippet/csharp/m-system.net.webproxy.is_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="host" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
        <param name="streamingContext">A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; structure that indicates the destination for this serialization.</param>
        <summary>Creates the serialization data and context that are used by the system to serialize a <see cref="T:System.Net.WebProxy" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The system calls this method to serialize an object; applications do not call it directly.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a &lt;xref:System.Boolean&gt; value that controls whether the &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt; are sent with requests.</summary>
        <value>
          <see langword="true" /> if the default credentials are used; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set this property to `true` when requests made by this <xref:System.Net.WebProxy> object should, if requested by the server, be authenticated using the credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref:System.Net.WebProxy.Credentials%2A> property to the credentials of the client on whose behalf the request is made.  
  
 The following table shows the effect of setting the UseDefaultCredentials value, based on the value of the <xref:System.Net.WebProxy.Credentials%2A> property.  
  
|<xref:System.Net.WebProxy.Credentials%2A> value|UseDefaultCredentials value|Effect|  
|----------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|  
|<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`true`|No effect.|  
|<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`false`|<xref:System.Net.WebProxy.Credentials%2A> is set to `null`.|  
|`null`|`true`|<xref:System.Net.WebProxy.Credentials%2A> is set to <xref:System.Net.CredentialCache.DefaultCredentials%2A>.|  
|Any value other than <xref:System.Net.CredentialCache.DefaultCredentials%2A> or `null`|`true` or `false`|Setting UseDefaultCredentials throws an exception.|  
  
 If UseDefaultCredentials is `false`, you can change the <xref:System.Net.WebProxy.Credentials%2A> property to any credentials. If UseDefaultCredentials is `true`, changing the <xref:System.Net.WebProxy.Credentials%2A> property from <xref:System.Net.CredentialCache.DefaultCredentials%2A> (the value that is set when the UseDefaultCredentials property is set to `true`) will throw an exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">You attempted to set this property when the &lt;xref:System.Net.WebProxy.Credentials%2A&gt; property contains credentials other than the default credentials. For more information, see the Remarks section.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>