<Type Name="Dns" FullName="System.Net.Dns">
  <TypeSignature Language="C#" Value="public static class Dns" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Dns extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides simple domain name resolution functionality.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Dns class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).  
  
 The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class. If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases.  
  
   
  
## Examples  
 The following example queries the DNS database for information on the host www.contoso.com.  
  
 [!code-cpp[Classic Dns Example#1](~/add/codesnippet/cpp/t-system.net.dns_1.cpp)]
 [!code-vb[Classic Dns Example#1](~/add/codesnippet/visualbasic/t-system.net.dns_1.vb)]
 [!code-cs[Classic Dns Example#1](~/add/codesnippet/csharp/t-system.net.dns_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="BeginGetHostAddresses">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetHostAddresses (string hostNameOrAddress, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetHostAddresses(string hostNameOrAddress, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
        <param name="requestCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.</param>
        <param name="state">A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.</param>
        <summary>Asynchronously returns the Internet Protocol (IP) addresses for the specified host.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BeginGetHostAddresses method asynchronously queries a DNS server for the IP addresses that are associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  
  
 The asynchronous BeginGetHostAddresses operation must be completed by calling the <xref:System.Net.Dns.EndGetHostAddresses%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  
  
 This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method.  
  
 For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress" /> is greater than 255 characters.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostNameOrAddress" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="hostNameOrAddress" /> is an invalid IP address.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginGetHostByName">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetHostByName (string hostName, AsyncCallback requestCallback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetHostByName(string hostName, class System.AsyncCallback requestCallback, object stateObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BeginGetHostByName is obsoleted for this type, please use BeginGetHostEntry instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostName">The DNS name of the host.</param>
        <param name="requestCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.</param>
        <param name="stateObject">A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.</param>
        <summary>Begins an asynchronous request for <see cref="T:System.Net.IPHostEntry" /> information about the specified DNS host name.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The asynchronous BeginGetHostByName operation must be completed by calling the <xref:System.Net.Dns.EndGetHostByName%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  
  
 This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method.  
  
 For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error was encountered executing the DNS query.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginGetHostEntry">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetHostEntry (System.Net.IPAddress address, AsyncCallback requestCallback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetHostEntry(class System.Net.IPAddress address, class System.AsyncCallback requestCallback, object stateObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">The IP address to resolve.</param>
        <param name="requestCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.</param>
        <param name="stateObject">A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.</param>
        <summary>Asynchronously resolves an IP address to an <see cref="T:System.Net.IPHostEntry" /> instance.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BeginGetHostEntry method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.  
  
 **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 The asynchronous BeginGetHostEntry operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  
  
 This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  
  
 For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  
  
   
  
## Examples  
 The following code example uses the <xref:System.Net.Dns.BeginGetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  
  
 [!code-cpp[System.Net.Dns#2](~/add/codesnippet/cpp/99071e7b-2f93-4096-bd4a-_1.cpp)]
 [!code-cs[System.Net.Dns#2](~/add/codesnippet/csharp/99071e7b-2f93-4096-bd4a-_1.cs)]
 [!code-vb[System.Net.Dns#2](~/add/codesnippet/visualbasic/99071e7b-2f93-4096-bd4a-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> is an invalid IP address.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginGetHostEntry">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetHostEntry (string hostNameOrAddress, AsyncCallback requestCallback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetHostEntry(string hostNameOrAddress, class System.AsyncCallback requestCallback, object stateObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
        <param name="requestCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.</param>
        <param name="stateObject">A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.</param>
        <summary>Asynchronously resolves a host name or IP address to an <see cref="T:System.Net.IPHostEntry" /> instance.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BeginGetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address.  
  
 **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 The asynchronous BeginGetHostEntry operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  
  
 This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  
  
 For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the BeginGetHostEntry method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  
  
 [!code-cpp[System.Net.Dns#2](~/add/codesnippet/cpp/f5923916-9329-4c02-b636-_1.cpp)]
 [!code-cs[System.Net.Dns#2](~/add/codesnippet/csharp/f5923916-9329-4c02-b636-_1.cs)]
 [!code-vb[System.Net.Dns#2](~/add/codesnippet/visualbasic/f5923916-9329-4c02-b636-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress" /> is greater than 255 characters.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostNameOrAddress" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="hostNameOrAddress" /> is an invalid IP address.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (string hostName, AsyncCallback requestCallback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(string hostName, class System.AsyncCallback requestCallback, object stateObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BeginResolve is obsoleted for this type, please use BeginGetHostEntry instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostName">The DNS name of the host.</param>
        <param name="requestCallback">An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.</param>
        <param name="stateObject">A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.</param>
        <summary>Begins an asynchronous request to resolve a DNS host name or IP address to an &lt;xref:System.Net.IPAddress&gt; instance.</summary>
        <returns>An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The asynchronous BeginResolve operation must be completed by calling the <xref:System.Net.Dns.EndResolve%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  
  
 This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method.  
  
 For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example uses BeginResolve to resolve a DNS host name to an <xref:System.Net.IPAddress>.  
  
 [!code-vb[Dns_Begin_EndResolve#1](~/add/codesnippet/visualbasic/m-system.net.dns.beginre_1.vb)]
 [!code-cs[Dns_Begin_EndResolve#1](~/add/codesnippet/csharp/m-system.net.dns.beginre_1.cs)]
 [!code-cpp[Dns_Begin_EndResolve#1](~/add/codesnippet/cpp/m-system.net.dns.beginre_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">The caller does not have permission to access DNS information.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndGetHostAddresses">
      <MemberSignature Language="C#" Value="public static System.Net.IPAddress[] EndGetHostAddresses (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPAddress[] EndGetHostAddresses(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An &lt;xref:System.IAsyncResult&gt; instance returned by a call to the &lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt; method.</param>
        <summary>Ends an asynchronous request for DNS information.</summary>
        <returns>An array of type &lt;xref:System.Net.IPAddress&gt; that holds the IP addresses for the host specified by the <paramref name="hostNameOrAddress" /> parameter of &lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  
  
 When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndGetHostByName">
      <MemberSignature Language="C#" Value="public static System.Net.IPHostEntry EndGetHostByName (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPHostEntry EndGetHostByName(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("EndGetHostByName is obsoleted for this type, please use EndGetHostEntry instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPHostEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An &lt;xref:System.IAsyncResult&gt; instance that is returned by a call to the &lt;xref:System.Net.Dns.BeginGetHostByName%2A&gt; method.</param>
        <summary>Ends an asynchronous request for DNS information.</summary>
        <returns>An <see cref="T:System.Net.IPHostEntry" /> object that contains DNS information about a host.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method blocks until the operation is complete.  
  
 To perform this operation synchronously, use the <xref:System.Net.Dns.GetHostByName%2A> method.  
  
 If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndGetHostEntry">
      <MemberSignature Language="C#" Value="public static System.Net.IPHostEntry EndGetHostEntry (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPHostEntry EndGetHostEntry(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPHostEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An &lt;xref:System.IAsyncResult&gt; instance returned by a call to an &lt;xref:System.Net.Dns.BeginGetHostEntry%2A&gt; method.</param>
        <summary>Ends an asynchronous request for DNS information.</summary>
        <returns>An <see cref="T:System.Net.IPHostEntry" /> instance that contains address information about the host.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method blocks until the operation is complete.  
  
 The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  
  
 To perform this operation synchronously, use a <xref:System.Net.Dns.GetHostEntry%2A> method.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndResolve">
      <MemberSignature Language="C#" Value="public static System.Net.IPHostEntry EndResolve (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPHostEntry EndResolve(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("EndResolve is obsoleted for this type, please use EndGetHostEntry instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPHostEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An &lt;xref:System.IAsyncResult&gt; instance that is returned by a call to the &lt;xref:System.Net.Dns.BeginResolve%2A&gt; method.</param>
        <summary>Ends an asynchronous request for DNS information.</summary>
        <returns>An <see cref="T:System.Net.IPHostEntry" /> object that contains DNS information about a host.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method blocks until the operation is complete.  
  
 If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  
  
 To perform this operation synchronously, use the <xref:System.Net.Dns.Resolve%2A> method.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example ends an asynchronous request for DNS host information.  
  
 [!code-vb[Dns_Begin_EndResolve#1](~/add/codesnippet/visualbasic/m-system.net.dns.endreso_1.vb)]
 [!code-cs[Dns_Begin_EndResolve#1](~/add/codesnippet/csharp/m-system.net.dns.endreso_1.cs)]
 [!code-cpp[Dns_Begin_EndResolve#1](~/add/codesnippet/cpp/m-system.net.dns.endreso_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostAddresses">
      <MemberSignature Language="C#" Value="public static System.Net.IPAddress[] GetHostAddresses (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPAddress[] GetHostAddresses(string hostNameOrAddress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
        <summary>Returns the Internet Protocol (IP) addresses for the specified host.</summary>
        <returns>An array of type &lt;xref:System.Net.IPAddress&gt; that holds the IP addresses for the host that is specified by the <paramref name="hostNameOrAddress" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetHostAddresses method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  
  
 When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  
  
 IPv6 addresses are filtered from the results of the GetHostAddresses method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPAddress> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the GetHostAddresses method to resolve an IP address to an array of type <xref:System.Net.IPAddress>.  
  
 [!code-cpp[System.Net.Dns#3](~/add/codesnippet/cpp/m-system.net.dns.gethost_5_1.cpp)]
 [!code-cs[System.Net.Dns#3](~/add/codesnippet/csharp/m-system.net.dns.gethost_5_1.cs)]
 [!code-vb[System.Net.Dns#3](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress" /> is greater than 255 characters.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostNameOrAddress" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="hostNameOrAddress" /> is an invalid IP address.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostAddressesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.IPAddress[]&gt; GetHostAddressesAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.IPAddress[]&gt; GetHostAddressesAsync(string hostNameOrAddress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.IPAddress[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
        <summary>Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.</summary>
        <returns>Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  
  
 The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an array of type &lt;xref:System.Net.IPAddress&gt; that holds the IP addresses for the host that is specified by the <paramref name="hostNameOrAddress" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  
  
 This method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress" /> is greater than 255 characters.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostNameOrAddress" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="hostNameOrAddress" /> is an invalid IP address.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostByAddress">
      <MemberSignature Language="C#" Value="public static System.Net.IPHostEntry GetHostByAddress (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPHostEntry GetHostByAddress(class System.Net.IPAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("GetHostByAddress is obsoleted for this type, please use GetHostEntry instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPHostEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">An &lt;xref:System.Net.IPAddress&gt;.</param>
        <summary>Creates an <see cref="T:System.Net.IPHostEntry" /> instance from the specified &lt;xref:System.Net.IPAddress&gt;.</summary>
        <returns>An <see cref="T:System.Net.IPHostEntry" />.  
  
 An <see cref="T:System.Net.IPHostEntry" /> instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example creates a <xref:System.Net.IPHostEntry> from an <xref:System.Net.IPAddress>.  
  
 [!code-cpp[Dns_GetHostByAddress_IPAddress#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_4_1.cpp)]
 [!code-cs[Dns_GetHostByAddress_IPAddress#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_4_1.cs)]
 [!code-vb[Dns_GetHostByAddress_IPAddress#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address" />.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostByAddress">
      <MemberSignature Language="C#" Value="public static System.Net.IPHostEntry GetHostByAddress (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPHostEntry GetHostByAddress(string address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("GetHostByAddress is obsoleted for this type, please use GetHostEntry instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPHostEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">An IP address.</param>
        <summary>Creates an <see cref="T:System.Net.IPHostEntry" /> instance from an IP address.</summary>
        <returns>An <see cref="T:System.Net.IPHostEntry" /> instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostByName">
      <MemberSignature Language="C#" Value="public static System.Net.IPHostEntry GetHostByName (string hostName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPHostEntry GetHostByName(string hostName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("GetHostByName is obsoleted for this type, please use GetHostEntry instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPHostEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostName">The DNS name of the host.</param>
        <summary>Gets the DNS information for the specified DNS host name.</summary>
        <returns>An <see cref="T:System.Net.IPHostEntry" /> object that contains host information for the address specified in <paramref name="hostName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetHostByName method queries the Internet DNS server for host information. If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.  
  
 For asynchronous access to DNS information, use the <xref:System.Net.Dns.BeginGetHostByName%2A> and <xref:System.Net.Dns.EndGetHostByName%2A> methods.  
  
 If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example uses the GetHostByName method to get the DNS information for the specified DNS host name.  
  
 [!code-vb[Dns_GetHostByName#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_2_1.vb)]
 [!code-cs[Dns_GetHostByName#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_2_1.cs)]
 [!code-cpp[Dns_GetHostByName#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_2_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostName" /> is greater than 255 characters.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostName" />.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostEntry">
      <MemberSignature Language="C#" Value="public static System.Net.IPHostEntry GetHostEntry (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPHostEntry GetHostEntry(class System.Net.IPAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPHostEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">An IP address.</param>
        <summary>Resolves an IP address to an <see cref="T:System.Net.IPHostEntry" /> instance.</summary>
        <returns>An <see cref="T:System.Net.IPHostEntry" /> instance that contains address information about the host specified in <paramref name="address" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetHostEntry method queries a DNS server for the IP addresses and aliases associated with an IP address.  
  
 IPv6 addresses are filtered from the results of the GetHostEntry method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  
  
 The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following code example uses the <xref:System.Net.Dns.GetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  
  
 [!code-cpp[System.Net.Dns#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_1_1.cpp)]
 [!code-cs[System.Net.Dns#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_1_1.cs)]
 [!code-vb[System.Net.Dns#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> is an invalid IP address.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostEntry">
      <MemberSignature Language="C#" Value="public static System.Net.IPHostEntry GetHostEntry (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPHostEntry GetHostEntry(string hostNameOrAddress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPHostEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
        <summary>Resolves a host name or IP address to an <see cref="T:System.Net.IPHostEntry" /> instance.</summary>
        <returns>An <see cref="T:System.Net.IPHostEntry" /> instance that contains address information about the host specified in <paramref name="hostNameOrAddress" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address.  
  
 When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  
  
 If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  
  
 The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  
  
 The GetHostEntry method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of the GetHostEntry method exhibits the following behavior when an IP string literal is passed:  
  
1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  
  
2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  
  
3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  
  
 For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  
  
 For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  
  
 The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  
  
 IPv6 addresses are filtered from the results of the GetHostEntry method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  
  
 The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example uses the GetHostEntry method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  
  
 [!code-cpp[System.Net.Dns#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_0_1.cpp)]
 [!code-cs[System.Net.Dns#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_0_1.cs)]
 [!code-vb[System.Net.Dns#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="hostNameOrAddress" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress" /> parameter is greater than 255 characters.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error was encountered when resolving the <paramref name="hostNameOrAddress" /> parameter.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="hostNameOrAddress" /> parameter is an invalid IP address.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostEntryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.IPHostEntry&gt; GetHostEntryAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.IPHostEntry&gt; GetHostEntryAsync(class System.Net.IPAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.IPHostEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">An IP address.</param>
        <summary>Resolves an IP address to an <see cref="T:System.Net.IPHostEntry" /> instance as an asynchronous operation.</summary>
        <returns>Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  
  
 The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <see cref="T:System.Net.IPHostEntry" /> instance that contains address information about the host specified in <paramref name="address" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `address` has been resolved.  
  
 This method queries a DNS server for the IP addresses and aliases associated with an IP address.  
  
 IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  
  
 The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="address" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> is an invalid IP address.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostEntryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.IPHostEntry&gt; GetHostEntryAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.IPHostEntry&gt; GetHostEntryAsync(string hostNameOrAddress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.IPHostEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
        <summary>Resolves a host name or IP address to an <see cref="T:System.Net.IPHostEntry" /> instance as an asynchronous operation.</summary>
        <returns>Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  
  
 The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <see cref="T:System.Net.IPHostEntry" /> instance that contains address information about the host specified in <paramref name="hostNameOrAddress" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  
  
 This method queries a DNS server for the IP address that is associated with a host name or IP address.  
  
 When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  
  
 If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  
  
 The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  
  
 This method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of this method exhibits the following behavior when an IP string literal is passed:  
  
1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  
  
2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  
  
3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  
  
 For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  
  
 For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  
  
 The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  
  
 IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  
  
 The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="hostNameOrAddress" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostNameOrAddress" /> parameter is greater than 255 characters.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error was encountered when resolving the <paramref name="hostNameOrAddress" /> parameter.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="hostNameOrAddress" /> parameter is an invalid IP address.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHostName">
      <MemberSignature Language="C#" Value="public static string GetHostName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetHostName() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the host name of the local computer.</summary>
        <returns>A string that contains the DNS host name of the local computer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the GetHostName method to obtain the host name of the local computer.  
  
 [!code-cs[Dns_GetHostName#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_3_1.cs)]
 [!code-vb[Dns_GetHostName#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_3_1.vb)]
 [!code-cpp[Dns_GetHostName#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_3_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving the local host name.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.Net.IPHostEntry Resolve (string hostName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPHostEntry Resolve(string hostName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Resolve is obsoleted for this type, please use GetHostEntry instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPHostEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostName">A DNS-style host name or IP address.</param>
        <summary>Resolves a DNS host name or IP address to an <see cref="T:System.Net.IPHostEntry" /> instance.</summary>
        <returns>An <see cref="T:System.Net.IPHostEntry" /> instance that contains address information about the host specified in <paramref name="hostName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Resolve method queries a DNS server for the IP address associated with a host name or IP address.  
  
 When `hostName` is a DNS-style host name associated with multiple IP addresses, only the first IP address that resolves to that host name is returned.  
  
 If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  
  
> [!NOTE]
>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  
  
   
  
## Examples  
 The following example uses the Resolve method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  
  
 [!code-cs[Dns_Resolve#1](~/add/codesnippet/csharp/m-system.net.dns.resolve_1.cs)]
 [!code-cpp[Dns_Resolve#1](~/add/codesnippet/cpp/m-system.net.dns.resolve_1.cpp)]
 [!code-vb[Dns_Resolve#1](~/add/codesnippet/visualbasic/m-system.net.dns.resolve_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="hostName" /> is greater than 255 characters.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostName" />.</exception>
        <permission cref="T:System.Net.DnsPermission">for accessing DNS information. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>