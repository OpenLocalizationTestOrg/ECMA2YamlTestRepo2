<Type Name="CharacterRange" FullName="System.Drawing.CharacterRange">
  <TypeSignature Language="C#" Value="public struct CharacterRange" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CharacterRange extends System.ValueType" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Specifies a range of character positions within a string.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to create a CharacterRange and use it to highlight part of a string. This example is designed to be used with Windows Forms. Paste the example into a form and call the `HighlightACharacterRange` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/csharp/t-system.drawing.charact_1.cs)]
 [!code-cpp[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/cpp/t-system.drawing.charact_1.cpp)]
 [!code-vb[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/visualbasic/t-system.drawing.charact_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CharacterRange (int First, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 First, int32 Length) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="First" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="First">The position of the first character in the range. For example, if `First` is set to 0, the first position of the range is position 0 in the string.</param>
        <param name="Length">The number of positions in the range.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.CharacterRange" /> structure, specifying a range of character positions within a string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to create a <xref:System.Drawing.CharacterRange> and use it to highlight part of a string. This example is designed to be used with Windows Forms. Paste the example into a form and call the `HighlightACharacterRange` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/csharp/m-system.drawing.charact_0_1.cs)]
 [!code-cpp[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/cpp/m-system.drawing.charact_0_1.cpp)]
 [!code-vb[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/visualbasic/m-system.drawing.charact_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to for equality.</param>
        <summary>Gets a value indicating whether this object is equivalent to the specified object.</summary>
        <returns>
          <see langword="true" /> to indicate the specified object is an instance with the same &lt;xref:System.Drawing.CharacterRange.First%2A&gt; and &lt;xref:System.Drawing.CharacterRange.Length%2A&gt; value as this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also use <xref:System.Drawing.CharacterRange.op_Equality%2A> to test for equality.  
  
   
  
## Examples  
 The following example demonstrates how to use the Equals method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CharacterRangeEquality2` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#2](~/add/codesnippet/visualbasic/m-system.drawing.charact_1_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#2](~/add/codesnippet/csharp/m-system.drawing.charact_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="First">
      <MemberSignature Language="C#" Value="public int First { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 First" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the position in the string of the first character of this <see cref="T:System.Drawing.CharacterRange" />.</summary>
        <value>The first position of this <see cref="T:System.Drawing.CharacterRange" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of positions in this <see cref="T:System.Drawing.CharacterRange" />.</summary>
        <value>The number of positions in this <see cref="T:System.Drawing.CharacterRange" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Drawing.CharacterRange cr1, System.Drawing.CharacterRange cr2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Drawing.CharacterRange cr1, valuetype System.Drawing.CharacterRange cr2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cr1" Type="System.Drawing.CharacterRange" />
        <Parameter Name="cr2" Type="System.Drawing.CharacterRange" />
      </Parameters>
      <Docs>
        <param name="cr1">A <see cref="T:System.Drawing.CharacterRange" /> to compare for equality.</param>
        <param name="cr2">A <see cref="T:System.Drawing.CharacterRange" /> to compare for equality.</param>
        <summary>Compares two <see cref="T:System.Drawing.CharacterRange" /> objects. Gets a value indicating whether the &lt;xref:System.Drawing.CharacterRange.First%2A&gt; and &lt;xref:System.Drawing.CharacterRange.Length%2A&gt; values of the two <see cref="T:System.Drawing.CharacterRange" /> objects are equal.</summary>
        <returns>
          <see langword="true" /> to indicate the two <see cref="T:System.Drawing.CharacterRange" /> objects have the same &lt;xref:System.Drawing.CharacterRange.First%2A&gt; and &lt;xref:System.Drawing.CharacterRange.Length%2A&gt; values; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also test for equality using the <xref:System.Drawing.CharacterRange.Equals%2A> method.  
  
   
  
## Examples  
 The following example demonstrates how to use the Equality operator. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CharacterRangeEquality1` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#1](~/add/codesnippet/visualbasic/77d6f8e6-d038-41e3-99f0-_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#1](~/add/codesnippet/csharp/77d6f8e6-d038-41e3-99f0-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Drawing.CharacterRange cr1, System.Drawing.CharacterRange cr2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Drawing.CharacterRange cr1, valuetype System.Drawing.CharacterRange cr2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cr1" Type="System.Drawing.CharacterRange" />
        <Parameter Name="cr2" Type="System.Drawing.CharacterRange" />
      </Parameters>
      <Docs>
        <param name="cr1">A <see cref="T:System.Drawing.CharacterRange" /> to compare for inequality.</param>
        <param name="cr2">A <see cref="T:System.Drawing.CharacterRange" /> to compare for inequality.</param>
        <summary>Compares two <see cref="T:System.Drawing.CharacterRange" /> objects. Gets a value indicating whether the &lt;xref:System.Drawing.CharacterRange.First%2A&gt; or &lt;xref:System.Drawing.CharacterRange.Length%2A&gt; values of the two <see cref="T:System.Drawing.CharacterRange" /> objects are not equal.</summary>
        <returns>
          <see langword="true" /> to indicate the either the &lt;xref:System.Drawing.CharacterRange.First%2A&gt; or &lt;xref:System.Drawing.CharacterRange.Length%2A&gt; values of the two <see cref="T:System.Drawing.CharacterRange" /> objects differ; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Inequality method returns the opposite of the <xref:System.Drawing.CharacterRange.op_Equality%2A> method.  
  
   
  
## Examples  
 The following example demonstrates how to use the Inequality method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CharacterRangeInequality` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#3](~/add/codesnippet/visualbasic/b5fb9968-06fd-40a0-abf3-_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#3](~/add/codesnippet/csharp/b5fb9968-06fd-40a0-abf3-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>