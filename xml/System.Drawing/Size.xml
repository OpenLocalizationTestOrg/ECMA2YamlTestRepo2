<Type Name="Size" FullName="System.Drawing.Size">
  <TypeSignature Language="C#" Value="public struct Size" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Size extends System.ValueType" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.SizeConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stores an ordered pair of integers, which specify a &lt;xref:System.Drawing.Size.Height%2A&gt; and &lt;xref:System.Drawing.Size.Width%2A&gt;.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Size class is used to specify a height and width through the <xref:System.Drawing.Rectangle.Size%2A> property for  <xref:System.Drawing.Rectangle>, <xref:System.Drawing.RectangleF>, <xref:System.Drawing.Image>, <xref:System.Drawing.Icon> and other graphics classes. You can perform operations on a Size by using the overloaded operators such as <xref:System.Drawing.Size.op_Addition%2A>, <xref:System.Drawing.Size.op_Subtraction%2A>, and <xref:System.Drawing.Size.op_Equality%2A>. The unit for the <xref:System.Drawing.Size.Height%2A> and <xref:System.Drawing.Size.Width%2A> of the Size structure depend on the <xref:System.Drawing.Graphics.PageUnit%2A> and <xref:System.Drawing.Graphics.PageScale%2A> settings for the <xref:System.Drawing.Graphics> object that is used to draw.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Size (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Point pt) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">The <see cref="T:System.Drawing.Point" /> structure from which to initialize this <see cref="T:System.Drawing.Size" /> structure.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Size" /> structure from the specified <see cref="T:System.Drawing.Point" /> structure.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Size (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">The width component of the new <see cref="T:System.Drawing.Size" />.</param>
        <param name="height">The height component of the new <see cref="T:System.Drawing.Size" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Size" /> structure from the specified dimensions.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Drawing.Point.%23ctor%2A?displayProperty=fullName> and Size constructors and the <xref:System.Drawing.ContentAlignment?displayProperty=fullName> enumeration. To run this example, paste this code into a Windows Form that contains a label named `Label1` and call the `IntializeLabel1` method in the form's constructor.  
  
 [!code-cs[System.Drawing.PointsAndSizes#7](~/add/codesnippet/csharp/m-system.drawing.size.sh_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#7](~/add/codesnippet/cpp/m-system.drawing.size.sh_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#7](~/add/codesnippet/visualbasic/m-system.drawing.size.sh_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size Add (System.Drawing.Size sz1, System.Drawing.Size sz2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size Add(valuetype System.Drawing.Size sz1, valuetype System.Drawing.Size sz2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sz1" Type="System.Drawing.Size" />
        <Parameter Name="sz2" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sz1">The first <see cref="T:System.Drawing.Size" /> structure to add.</param>
        <param name="sz2">The second <see cref="T:System.Drawing.Size" /> structure to add.</param>
        <summary>Adds the width and height of one <see cref="T:System.Drawing.Size" /> structure to the width and height of another <see cref="T:System.Drawing.Size" /> structure.</summary>
        <returns>A <see cref="T:System.Drawing.Size" /> structure that is the result of the addition operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the Add method. To run this example, paste it into a Windows Form. Handle the formâ€™s <xref:System.Windows.Forms.Control.Paint> event and call the `AddSizes` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#11](~/add/codesnippet/visualbasic/m-system.drawing.size.ad_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#11](~/add/codesnippet/csharp/m-system.drawing.size.ad_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size Ceiling (System.Drawing.SizeF value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size Ceiling(valuetype System.Drawing.SizeF value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Drawing.SizeF" /> structure to convert.</param>
        <summary>Converts the specified <see cref="T:System.Drawing.SizeF" /> structure to a <see cref="T:System.Drawing.Size" /> structure by rounding the values of the <see cref="T:System.Drawing.Size" /> structure to the next higher integer values.</summary>
        <returns>The <see cref="T:System.Drawing.Size" /> structure this method converts to.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Drawing.Size Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Drawing.Size Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Size" /> structure that has a &lt;xref:System.Drawing.Size.Height%2A&gt; and &lt;xref:System.Drawing.Size.Width%2A&gt; value of 0.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The &lt;xref:System.Object&gt; to test.</param>
        <summary>Tests to see whether the specified object is a <see cref="T:System.Drawing.Size" /> structure with the same dimensions as this <see cref="T:System.Drawing.Size" /> structure.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Drawing.Size" /> and has the same width and height as this <see cref="T:System.Drawing.Size" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash code for this <see cref="T:System.Drawing.Size" /> structure.</summary>
        <returns>An integer value that specifies a hash value for this <see cref="T:System.Drawing.Size" /> structure.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You should avoid depending on GetHashCode for unique values, as two <xref:System.Drawing.Size> objects with the same values for their <xref:System.Drawing.Size.Width%2A> and <xref:System.Drawing.Size.Height%2A> properties may return the same hash code. This behavior could change in a future release.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the vertical component of this <see cref="T:System.Drawing.Size" /> structure.</summary>
        <value>The vertical component of this <see cref="T:System.Drawing.Size" /> structure, typically measured in pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The unit for the Height and <xref:System.Drawing.Size.Width%2A> of the <xref:System.Drawing.Size> structure depend on the <xref:System.Drawing.Graphics.PageUnit%2A> and <xref:System.Drawing.Graphics.PageScale%2A> settings for the <xref:System.Drawing.Graphics> object that is used to draw.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tests whether this <see cref="T:System.Drawing.Size" /> structure has width and height of 0.</summary>
        <value>This property returns <see langword="true" /> when this <see cref="T:System.Drawing.Size" /> structure has both a width and height of 0; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size op_Addition (System.Drawing.Size sz1, System.Drawing.Size sz2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Drawing.Size op_Addition(valuetype System.Drawing.Size sz1, valuetype System.Drawing.Size sz2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sz1" Type="System.Drawing.Size" />
        <Parameter Name="sz2" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sz1">The first <see cref="T:System.Drawing.Size" /> to add.</param>
        <param name="sz2">The second <see cref="T:System.Drawing.Size" /> to add.</param>
        <summary>Adds the width and height of one <see cref="T:System.Drawing.Size" /> structure to the width and height of another <see cref="T:System.Drawing.Size" /> structure.</summary>
        <returns>A <see cref="T:System.Drawing.Size" /> structure that is the result of the addition operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the Addition operator. The example is designed to be used with Windows Forms. To run this example, paste it into a form that contains a button named `addButton` and associate the `addButton_Click` method with the button's <xref:System.Windows.Forms.Control.Click> event.  
  
 [!code-cs[System.Drawing.PointsAndSizes#4](~/add/codesnippet/csharp/m-system.drawing.size.op_2_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#4](~/add/codesnippet/cpp/m-system.drawing.size.op_2_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#4](~/add/codesnippet/visualbasic/m-system.drawing.size.op_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Drawing.Size sz1, System.Drawing.Size sz2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Drawing.Size sz1, valuetype System.Drawing.Size sz2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sz1" Type="System.Drawing.Size" />
        <Parameter Name="sz2" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sz1">The <see cref="T:System.Drawing.Size" /> structure on the left side of the equality operator.</param>
        <param name="sz2">The <see cref="T:System.Drawing.Size" /> structure on the right of the equality operator.</param>
        <summary>Tests whether two <see cref="T:System.Drawing.Size" /> structures are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="sz1" /> and <paramref name="sz2" /> have equal width and height; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates points and sizes by using several of the overloaded operators defined for these types. It also demonstrates how to use the <xref:System.Drawing.SystemPens> class.  
  
 This example is designed to be used with Windows Forms. Create a form that contains a <xref:System.Windows.Forms.Button> named `subtractButton`. Paste the code into the form and call the `CreatePointsAndSizes` method from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PointsAndSizes#1](~/add/codesnippet/csharp/m-system.drawing.size.op_0_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#1](~/add/codesnippet/cpp/m-system.drawing.size.op_0_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#1](~/add/codesnippet/visualbasic/m-system.drawing.size.op_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point op_Explicit (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Drawing.Point op_Explicit(valuetype System.Drawing.Size size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Drawing.SizeF op_Implicit (System.Drawing.Size p);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Drawing.SizeF op_Implicit(valuetype System.Drawing.Size p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="p">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Drawing.Size sz1, System.Drawing.Size sz2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Drawing.Size sz1, valuetype System.Drawing.Size sz2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sz1" Type="System.Drawing.Size" />
        <Parameter Name="sz2" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sz1">The <see cref="T:System.Drawing.Size" /> structure on the left of the inequality operator.</param>
        <param name="sz2">The <see cref="T:System.Drawing.Size" /> structure on the right of the inequality operator.</param>
        <summary>Tests whether two <see cref="T:System.Drawing.Size" /> structures are different.</summary>
        <returns>
          <see langword="true" /> if <paramref name="sz1" /> and <paramref name="sz2" /> differ either in width or height; <see langword="false" /> if <paramref name="sz1" /> and <paramref name="sz2" /> are equal.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size op_Subtraction (System.Drawing.Size sz1, System.Drawing.Size sz2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Drawing.Size op_Subtraction(valuetype System.Drawing.Size sz1, valuetype System.Drawing.Size sz2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sz1" Type="System.Drawing.Size" />
        <Parameter Name="sz2" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sz1">The <see cref="T:System.Drawing.Size" /> structure on the left side of the subtraction operator.</param>
        <param name="sz2">The <see cref="T:System.Drawing.Size" /> structure on the right side of the subtraction operator.</param>
        <summary>Subtracts the width and height of one <see cref="T:System.Drawing.Size" /> structure from the width and height of another <see cref="T:System.Drawing.Size" /> structure.</summary>
        <returns>A <see cref="T:System.Drawing.Size" /> structure that is the result of the subtraction operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the Subtraction operator. The example is designed to be used with Windows Forms. To run the example, paste it into a form that contains a button named `subtractionButton` and associate the `subtractButton_Click` method with the button's <xref:System.Windows.Forms.Control.Click> event.  
  
 [!code-cs[System.Drawing.PointsAndSizes#2](~/add/codesnippet/csharp/m-system.drawing.size.op_1_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#2](~/add/codesnippet/cpp/m-system.drawing.size.op_1_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#2](~/add/codesnippet/visualbasic/m-system.drawing.size.op_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size Round (System.Drawing.SizeF value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size Round(valuetype System.Drawing.SizeF value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Drawing.SizeF" /> structure to convert.</param>
        <summary>Converts the specified <see cref="T:System.Drawing.SizeF" /> structure to a <see cref="T:System.Drawing.Size" /> structure by rounding the values of the <see cref="T:System.Drawing.SizeF" /> structure to the nearest integer values.</summary>
        <returns>The <see cref="T:System.Drawing.Size" /> structure this method converts to.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use static Round and <xref:System.Drawing.Size.Truncate%2A> methods to convert a <xref:System.Drawing.SizeF> to a <xref:System.Drawing.Size>. This example is designed to be used with Windows Forms. To run this example, paste it into a form that contains two <xref:System.Windows.Forms.Label> objects named `Label1` and `Label2`, and then call this method from the form's constructor.  
  
 [!code-cs[System.Drawing.PointsAndSizes#5](~/add/codesnippet/csharp/m-system.drawing.size.ro_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#5](~/add/codesnippet/cpp/m-system.drawing.size.ro_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#5](~/add/codesnippet/visualbasic/m-system.drawing.size.ro_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size Subtract (System.Drawing.Size sz1, System.Drawing.Size sz2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size Subtract(valuetype System.Drawing.Size sz1, valuetype System.Drawing.Size sz2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sz1" Type="System.Drawing.Size" />
        <Parameter Name="sz2" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sz1">The <see cref="T:System.Drawing.Size" /> structure on the left side of the subtraction operator.</param>
        <param name="sz2">The <see cref="T:System.Drawing.Size" /> structure on the right side of the subtraction operator.</param>
        <summary>Subtracts the width and height of one <see cref="T:System.Drawing.Size" /> structure from the width and height of another <see cref="T:System.Drawing.Size" /> structure.</summary>
        <returns>A <see cref="T:System.Drawing.Size" /> structure that is a result of the subtraction operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the Subtract method. To run this example, paste it into a Windows Form. Handle the formâ€™s <xref:System.Windows.Forms.Control.Paint> event and call the `SubtractSizes` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#12](~/add/codesnippet/visualbasic/m-system.drawing.size.su_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#12](~/add/codesnippet/csharp/m-system.drawing.size.su_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a human-readable string that represents this <see cref="T:System.Drawing.Size" /> structure.</summary>
        <returns>A string that represents this <see cref="T:System.Drawing.Size" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size Truncate (System.Drawing.SizeF value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size Truncate(valuetype System.Drawing.SizeF value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Drawing.SizeF" /> structure to convert.</param>
        <summary>Converts the specified <see cref="T:System.Drawing.SizeF" /> structure to a <see cref="T:System.Drawing.Size" /> structure by truncating the values of the <see cref="T:System.Drawing.SizeF" /> structure to the next lower integer values.</summary>
        <returns>The <see cref="T:System.Drawing.Size" /> structure this method converts to.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use static <xref:System.Drawing.Size.Round%2A> and Truncate methods to convert a <xref:System.Drawing.SizeF> to a <xref:System.Drawing.Size>. This example is designed to be used with Windows Forms. To run this example, paste it into a form that contains two <xref:System.Windows.Forms.Label> objects named `Label1` and `Label2`, and then call this method from the form's constructor.  
  
 [!code-cs[System.Drawing.PointsAndSizes#5](~/add/codesnippet/csharp/m-system.drawing.size.tr_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#5](~/add/codesnippet/cpp/m-system.drawing.size.tr_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#5](~/add/codesnippet/visualbasic/m-system.drawing.size.tr_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the horizontal component of this <see cref="T:System.Drawing.Size" /> structure.</summary>
        <value>The horizontal component of this <see cref="T:System.Drawing.Size" /> structure, typically measured in pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The unit for the <xref:System.Drawing.Size.Height%2A> and Width of the <xref:System.Drawing.Size> structure depend on the <xref:System.Drawing.Graphics.PageUnit%2A> and <xref:System.Drawing.Graphics.PageScale%2A> settings for the <xref:System.Drawing.Graphics> object used to draw.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>