<Type Name="Point" FullName="System.Drawing.Point">
  <TypeSignature Language="C#" Value="public struct Point" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Point extends System.ValueType" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.PointConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To convert a Point to a <xref:System.Drawing.PointF>, use <xref:System.Drawing.Point.op_Implicit%2A>.  
  
   
  
## Examples  
 The following code example creates points and sizes using several of the overloaded operators defined for these types. It also demonstrates how to use the <xref:System.Drawing.SystemPens> class.  
  
 This example is designed to be used with Windows Forms. Create a form that contains a <xref:System.Windows.Forms.Button> named `subtractButton`. Paste the code into the form and call the `CreatePointsAndSizes` method from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PointsAndSizes#1](~/add/codesnippet/csharp/t-system.drawing.point_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#1](~/add/codesnippet/cpp/t-system.drawing.point_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#1](~/add/codesnippet/visualbasic/t-system.drawing.point_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Point (System.Drawing.Size sz);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Size sz) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sz" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sz">A <see cref="T:System.Drawing.Size" /> that specifies the coordinates for the new <see cref="T:System.Drawing.Point" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Point" /> class from a <see cref="T:System.Drawing.Size" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Drawing.Point.op_Equality%2A> operator and how to construct a <xref:System.Drawing.Point> from a <xref:System.Drawing.Size> or two integers. It also demonstrates how to use the <xref:System.Drawing.Point.X%2A> and <xref:System.Drawing.Point.Y%2A> properties. This example is designed to be used with Windows Forms. Paste the code into a form that contains a button named `Button1`, and associate the `Button1_Click` method with the button's <xref:System.Windows.Forms.Control.Click> event.  
  
 [!code-cs[System.Drawing.Misc2#3](~/add/codesnippet/csharp/m-system.drawing.point.s_2_1.cs)]
 [!code-vb[System.Drawing.Misc2#3](~/add/codesnippet/visualbasic/m-system.drawing.point.s_2_1.vb)]
 [!code-cpp[System.Drawing.Misc2#3](~/add/codesnippet/cpp/m-system.drawing.point.s_2_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Point (int dw);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 dw) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dw" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dw">A 32-bit integer that specifies the coordinates for the new <see cref="T:System.Drawing.Point" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Point" /> class using coordinates specified by an integer value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The low-order 16 bits of the `dw` parameter specify the horizontal x-coordinate and the higher 16 bits specify the vertical y-coordinate for the new <xref:System.Drawing.Point>.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Point and <xref:System.Drawing.Size.%23ctor%2A?displayProperty=fullName> constructors and the <xref:System.Drawing.ContentAlignment?displayProperty=fullName> enumeration. To run this example, paste this code into a Windows Form that contains a label named `Label1`, and call the `IntializeLabel1` method in the form's constructor.  
  
 [!code-cs[System.Drawing.PointsAndSizes#7](~/add/codesnippet/csharp/m-system.drawing.point.s_0_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#7](~/add/codesnippet/cpp/m-system.drawing.point.s_0_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#7](~/add/codesnippet/visualbasic/m-system.drawing.point.s_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Point (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 x, int32 y) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The horizontal position of the point.</param>
        <param name="y">The vertical position of the point.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Point" /> class with the specified coordinates.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Drawing.Point.op_Equality%2A> operator and how to construct a <xref:System.Drawing.Point> from a <xref:System.Drawing.Size> or two integers. It also demonstrates how to use the <xref:System.Drawing.Point.X%2A> and <xref:System.Drawing.Point.Y%2A> properties. This example is designed to be used with Windows Forms. Paste the code into a form that contains a button named `Button1`, and associate the `Button1_Click` method with the button's <xref:System.Windows.Forms.Control.Click> event.  
  
 [!code-cs[System.Drawing.Misc2#3](~/add/codesnippet/csharp/m-system.drawing.point.s_1_1.cs)]
 [!code-vb[System.Drawing.Misc2#3](~/add/codesnippet/visualbasic/m-system.drawing.point.s_1_1.vb)]
 [!code-cpp[System.Drawing.Misc2#3](~/add/codesnippet/cpp/m-system.drawing.point.s_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point Add (System.Drawing.Point pt, System.Drawing.Size sz);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Point Add(valuetype System.Drawing.Point pt, valuetype System.Drawing.Size sz) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="sz" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="pt">The <see cref="T:System.Drawing.Point" /> to add.</param>
        <param name="sz">The <see cref="T:System.Drawing.Size" /> to add</param>
        <summary>Adds the specified <see cref="T:System.Drawing.Size" /> to the specified <see cref="T:System.Drawing.Point" />.</summary>
        <returns>The <see cref="T:System.Drawing.Point" /> that is the result of the addition operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Add adds the <xref:System.Drawing.Size.Width%2A> and <xref:System.Drawing.Size.Height%2A> of the specified <xref:System.Drawing.Size> to the <xref:System.Drawing.Point.X%2A> and <xref:System.Drawing.Point.Y%2A> values of the specified point.  
  
   
  
## Examples  
 The following example shows how to use the Add method. To run this example, paste it into a Windows Form. Handle the formâ€™s <xref:System.Windows.Forms.Control.Paint> event and call the `AddPoint` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#9](~/add/codesnippet/visualbasic/m-system.drawing.point.a_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#9](~/add/codesnippet/csharp/m-system.drawing.point.a_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point Ceiling (System.Drawing.PointF value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Point Ceiling(valuetype System.Drawing.PointF value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Drawing.PointF" /> to convert.</param>
        <summary>Converts the specified <see cref="T:System.Drawing.PointF" /> to a <see cref="T:System.Drawing.Point" /> by rounding the values of the <see cref="T:System.Drawing.PointF" /> to the next higher integer values.</summary>
        <returns>The <see cref="T:System.Drawing.Point" /> this method converts to.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Drawing.Point Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Drawing.Point Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents a <see cref="T:System.Drawing.Point" /> that has &lt;xref:System.Drawing.Point.X%2A&gt; and &lt;xref:System.Drawing.Point.Y%2A&gt; values set to zero.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The &lt;xref:System.Object&gt; to test.</param>
        <summary>Specifies whether this <see cref="T:System.Drawing.Point" /> contains the same coordinates as the specified &lt;xref:System.Object&gt;.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Drawing.Point" /> and has the same coordinates as this <see cref="T:System.Drawing.Point" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash code for this <see cref="T:System.Drawing.Point" />.</summary>
        <returns>An integer value that specifies a hash value for this <see cref="T:System.Drawing.Point" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You should avoid depending on GetHashCode for unique values, as two <xref:System.Drawing.Point> objects with the same values for their <xref:System.Drawing.Point.X%2A> and <xref:System.Drawing.Point.Y%2A> properties may return the same hash code. This behavior could change in a future release.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this <see cref="T:System.Drawing.Point" /> is empty.</summary>
        <value>
          <see langword="true" /> if both &lt;xref:System.Drawing.Point.X%2A&gt; and &lt;xref:System.Drawing.Point.Y%2A&gt; are 0; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(valuetype System.Drawing.Point p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">The <see cref="T:System.Drawing.Point" /> used offset this <see cref="T:System.Drawing.Point" />.</param>
        <summary>Translates this <see cref="T:System.Drawing.Point" /> by the specified <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method adjusts the <xref:System.Drawing.Point.X%2A> and <xref:System.Drawing.Point.Y%2A> values of this <xref:System.Drawing.Point> to the sum of the <xref:System.Drawing.Point.X%2A> and <xref:System.Drawing.Point.Y%2A> values of this <xref:System.Drawing.Point> and `p`.  
  
   
  
## Examples  
 The following example shows how to use the Offset method. To run this example, paste it into a Windows Form. Handle the formâ€™s <xref:System.Windows.Forms.Control.Paint> event and call the `OffsetPoint` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#10](~/add/codesnippet/visualbasic/m-system.drawing.point.o_1_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#10](~/add/codesnippet/csharp/m-system.drawing.point.o_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(int32 dx, int32 dy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">The amount to offset the x-coordinate.</param>
        <param name="dy">The amount to offset the y-coordinate.</param>
        <summary>Translates this <see cref="T:System.Drawing.Point" /> by the specified amount.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point op_Addition (System.Drawing.Point pt, System.Drawing.Size sz);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Drawing.Point op_Addition(valuetype System.Drawing.Point pt, valuetype System.Drawing.Size sz) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="sz" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="pt">The <see cref="T:System.Drawing.Point" /> to translate.</param>
        <param name="sz">A <see cref="T:System.Drawing.Size" /> that specifies the pair of numbers to add to the coordinates of `pt`.</param>
        <summary>Translates a <see cref="T:System.Drawing.Point" /> by a given <see cref="T:System.Drawing.Size" />.</summary>
        <returns>The translated <see cref="T:System.Drawing.Point" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates points and sizes using several of the overloaded operators defined for these types. It also demonstrates how to use the <xref:System.Drawing.SystemPens> class.  
  
 This example is designed to be used with Windows Forms. Create a form that contains a <xref:System.Windows.Forms.Button> named `subtractButton`. Paste the code into the form and call the `CreatePointsAndSizes` method from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PointsAndSizes#1](~/add/codesnippet/csharp/m-system.drawing.point.o_2_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#1](~/add/codesnippet/cpp/m-system.drawing.point.o_2_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#1](~/add/codesnippet/visualbasic/m-system.drawing.point.o_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Drawing.Point left, System.Drawing.Point right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Drawing.Point left, valuetype System.Drawing.Point right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Drawing.Point" />
        <Parameter Name="right" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="left">A <see cref="T:System.Drawing.Point" /> to compare.</param>
        <param name="right">A <see cref="T:System.Drawing.Point" /> to compare.</param>
        <summary>Compares two <see cref="T:System.Drawing.Point" /> objects. The result specifies whether the values of the &lt;xref:System.Drawing.Point.X%2A&gt; and &lt;xref:System.Drawing.Point.Y%2A&gt; properties of the two <see cref="T:System.Drawing.Point" /> objects are equal.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.Drawing.Point.X%2A&gt; and &lt;xref:System.Drawing.Point.Y%2A&gt; values of <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the Equality operator and how to construct a <xref:System.Drawing.Point> from a <xref:System.Drawing.Size> or two integers. It also demonstrates how to use the <xref:System.Drawing.Point.X%2A> and <xref:System.Drawing.Point.Y%2A> properties. This example is designed to be used with Windows Forms. Paste the code into a form that contains a button named `Button1`, and associate the `Button1_Click` method with the button's <xref:System.Windows.Forms.Control.Click> event.  
  
 [!code-cs[System.Drawing.Misc2#3](~/add/codesnippet/csharp/m-system.drawing.point.o_0_1.cs)]
 [!code-vb[System.Drawing.Misc2#3](~/add/codesnippet/visualbasic/m-system.drawing.point.o_0_1.vb)]
 [!code-cpp[System.Drawing.Misc2#3](~/add/codesnippet/cpp/m-system.drawing.point.o_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size op_Explicit (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Drawing.Size op_Explicit(valuetype System.Drawing.Point p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Drawing.PointF op_Implicit (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Drawing.PointF op_Implicit(valuetype System.Drawing.Point p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Drawing.Point left, System.Drawing.Point right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Drawing.Point left, valuetype System.Drawing.Point right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Drawing.Point" />
        <Parameter Name="right" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="left">A <see cref="T:System.Drawing.Point" /> to compare.</param>
        <param name="right">A <see cref="T:System.Drawing.Point" /> to compare.</param>
        <summary>Compares two <see cref="T:System.Drawing.Point" /> objects. The result specifies whether the values of the &lt;xref:System.Drawing.Point.X%2A&gt; or &lt;xref:System.Drawing.Point.Y%2A&gt; properties of the two <see cref="T:System.Drawing.Point" /> objects are unequal.</summary>
        <returns>
          <see langword="true" /> if the values of either the &lt;xref:System.Drawing.Point.X%2A&gt; properties or the &lt;xref:System.Drawing.Point.Y%2A&gt; properties of <paramref name="left" /> and <paramref name="right" /> differ; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point op_Subtraction (System.Drawing.Point pt, System.Drawing.Size sz);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Drawing.Point op_Subtraction(valuetype System.Drawing.Point pt, valuetype System.Drawing.Size sz) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="sz" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="pt">The <see cref="T:System.Drawing.Point" /> to translate.</param>
        <param name="sz">A <see cref="T:System.Drawing.Size" /> that specifies the pair of numbers to subtract from the coordinates of `pt`.</param>
        <summary>Translates a <see cref="T:System.Drawing.Point" /> by the negative of a given <see cref="T:System.Drawing.Size" />.</summary>
        <returns>A <see cref="T:System.Drawing.Point" /> structure that is translated by the negative of a given <see cref="T:System.Drawing.Size" /> structure.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Drawing.PointConverter> and the Subtraction operator. This example is designed to be used with Windows Forms. Paste this code into a form and call the `ShowPointConverter` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.Converters#1](~/add/codesnippet/cpp/m-system.drawing.point.o_3_1.cpp)]
 [!code-cs[System.Drawing.Converters#1](~/add/codesnippet/csharp/m-system.drawing.point.o_3_1.cs)]
 [!code-vb[System.Drawing.Converters#1](~/add/codesnippet/visualbasic/m-system.drawing.point.o_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point Round (System.Drawing.PointF value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Point Round(valuetype System.Drawing.PointF value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Drawing.PointF" /> to convert.</param>
        <summary>Converts the specified <see cref="T:System.Drawing.PointF" /> to a <see cref="T:System.Drawing.Point" /> object by rounding the <see cref="T:System.Drawing.Point" /> values to the nearest integer.</summary>
        <returns>The <see cref="T:System.Drawing.Point" /> this method converts to.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point Subtract (System.Drawing.Point pt, System.Drawing.Size sz);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Point Subtract(valuetype System.Drawing.Point pt, valuetype System.Drawing.Size sz) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="sz" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="pt">The <see cref="T:System.Drawing.Point" /> to be subtracted from.</param>
        <param name="sz">The <see cref="T:System.Drawing.Size" /> to subtract from the <see cref="T:System.Drawing.Point" />.</param>
        <summary>Returns the result of subtracting specified <see cref="T:System.Drawing.Size" /> from the specified <see cref="T:System.Drawing.Point" />.</summary>
        <returns>The <see cref="T:System.Drawing.Point" /> that is the result of the subtraction operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Subtract subtracts the <xref:System.Drawing.Size.Width%2A> and <xref:System.Drawing.Size.Height%2A> of the specified <xref:System.Drawing.Size> from the <xref:System.Drawing.Point.X%2A> and <xref:System.Drawing.Point.Y%2A> values of the specified point.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts this <see cref="T:System.Drawing.Point" /> to a human-readable string.</summary>
        <returns>A string that represents this <see cref="T:System.Drawing.Point" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point Truncate (System.Drawing.PointF value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Point Truncate(valuetype System.Drawing.PointF value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Drawing.PointF" /> to convert.</param>
        <summary>Converts the specified <see cref="T:System.Drawing.PointF" /> to a <see cref="T:System.Drawing.Point" /> by truncating the values of the <see cref="T:System.Drawing.Point" />.</summary>
        <returns>The <see cref="T:System.Drawing.Point" /> this method converts to.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the x-coordinate of this <see cref="T:System.Drawing.Point" />.</summary>
        <value>The x-coordinate of this <see cref="T:System.Drawing.Point" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Drawing.Point.op_Equality%2A> operator and how to construct a <xref:System.Drawing.Point> from a <xref:System.Drawing.Size> or two integers. It also demonstrates how to use the X and <xref:System.Drawing.Point.Y%2A> properties. This example is designed to be used with Windows Forms. Paste the code into a form that contains a button named `Button1`, and associate the `Button1_Click` method with the button's <xref:System.Windows.Forms.Control.Click> event.  
  
 [!code-cs[System.Drawing.Misc2#3](~/add/codesnippet/csharp/p-system.drawing.point.x_1.cs)]
 [!code-vb[System.Drawing.Misc2#3](~/add/codesnippet/visualbasic/p-system.drawing.point.x_1.vb)]
 [!code-cpp[System.Drawing.Misc2#3](~/add/codesnippet/cpp/p-system.drawing.point.x_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the y-coordinate of this <see cref="T:System.Drawing.Point" />.</summary>
        <value>The y-coordinate of this <see cref="T:System.Drawing.Point" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Drawing.Point.op_Equality%2A> operator and how to construct a <xref:System.Drawing.Point> from a <xref:System.Drawing.Size> or two integers. It also demonstrates how to use the <xref:System.Drawing.Point.X%2A> and Y properties. This example is designed to be used with Windows Forms. Paste the code into a form that contains a button named `Button1`, and associate the `Button1_Click` method with the button's <xref:System.Windows.Forms.Control.Click> event.  
  
 [!code-cs[System.Drawing.Misc2#3](~/add/codesnippet/csharp/p-system.drawing.point.y_1.cs)]
 [!code-vb[System.Drawing.Misc2#3](~/add/codesnippet/visualbasic/p-system.drawing.point.y_1.vb)]
 [!code-cpp[System.Drawing.Misc2#3](~/add/codesnippet/cpp/p-system.drawing.point.y_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>