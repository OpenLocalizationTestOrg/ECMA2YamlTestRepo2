<Type Name="SystemPens" FullName="System.Drawing.SystemPens">
  <TypeSignature Language="C#" Value="public sealed class SystemPens" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SystemPens extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Each property of the SystemPens class is a <see cref="T:System.Drawing.Pen" /> that is the color of a Windows display element and that has a width of 1 pixel.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates points and sizes using several of the overloaded operators defined for these types. It also demonstrates how to use the SystemPens class.  
  
 This example is designed to be used with Windows Forms. Create a form that contains a <xref:System.Windows.Forms.Button> named `subtractButton`. Paste the code into the form and call the `CreatePointsAndSizes` method from the form's `Paint` event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PointsAndSizes#1](~/add/codesnippet/csharp/t-system.drawing.systemp_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#1](~/add/codesnippet/cpp/t-system.drawing.systemp_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#1](~/add/codesnippet/visualbasic/t-system.drawing.systemp_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ActiveBorder">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ActiveBorder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ActiveBorder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the active window's border.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the active window's border.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the ActiveBorder property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithActiveBorderPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#13](~/add/codesnippet/visualbasic/p-system.drawing.systemp_22_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#13](~/add/codesnippet/csharp/p-system.drawing.systemp_22_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ActiveCaption">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ActiveCaption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ActiveCaption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the background of the active window's title bar.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the background of the active window's title bar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the ActiveCaption property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithActiveCaptionPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#14](~/add/codesnippet/visualbasic/p-system.drawing.systemp_7_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#14](~/add/codesnippet/csharp/p-system.drawing.systemp_7_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ActiveCaptionText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ActiveCaptionText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ActiveCaptionText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the text in the active window's title bar.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the text in the active window's title bar.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AppWorkspace">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen AppWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen AppWorkspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the application workspace.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the application workspace.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The application workspace is the area in a multiple document view that is not being occupied by documents.  
  
   
  
## Examples  
 The following code example demonstrates how to use the AppWorkspace property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithActiveAppWorkspacePen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#14](~/add/codesnippet/visualbasic/p-system.drawing.systemp_13_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#14](~/add/codesnippet/csharp/p-system.drawing.systemp_13_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ButtonFace">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ButtonFace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ButtonFace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the face color of a 3-D element.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the face color of a 3-D element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the ButtonFace property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithButtonSpacePen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#16](~/add/codesnippet/visualbasic/p-system.drawing.systemp_1_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#16](~/add/codesnippet/csharp/p-system.drawing.systemp_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ButtonHighlight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ButtonHighlight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ButtonHighlight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the highlight color of a 3-D element.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the highlight color of a 3-D element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This color is applied to parts of a 3-D element that face the light source.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ButtonHighlight property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithButtonHighlightPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#17](~/add/codesnippet/visualbasic/p-system.drawing.systemp_26_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#17](~/add/codesnippet/csharp/p-system.drawing.systemp_26_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ButtonShadow">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ButtonShadow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ButtonShadow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the shadow color of a 3-D element.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the shadow color of a 3-D element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This color is applied to parts of a 3-D element that face away from the light source.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ButtonShadow property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithButtonShadowPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#18](~/add/codesnippet/visualbasic/p-system.drawing.systemp_31_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#18](~/add/codesnippet/csharp/p-system.drawing.systemp_31_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the face color of a 3-D element.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the face color of a 3-D element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the Control property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithControlPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#19](~/add/codesnippet/visualbasic/p-system.drawing.systemp_27_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#19](~/add/codesnippet/csharp/p-system.drawing.systemp_27_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlDark">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlDark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlDark" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the shadow color of a 3-D element.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the shadow color of a 3-D element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This color is applied to parts of a 3-D element that face away from the light source.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ControlDark property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithControlDarkPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#20](~/add/codesnippet/visualbasic/p-system.drawing.systemp_6_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#20](~/add/codesnippet/csharp/p-system.drawing.systemp_6_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlDarkDark">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlDarkDark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlDarkDark" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the dark shadow color of a 3-D element.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the dark shadow color of a 3-D element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This color is applied to the parts of a 3-D element that are the darkest color.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ControlDarkDark property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithControlDarkDarkPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#21](~/add/codesnippet/visualbasic/p-system.drawing.systemp_30_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#21](~/add/codesnippet/csharp/p-system.drawing.systemp_30_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlLight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlLight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlLight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the light color of a 3-D element.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the light color of a 3-D element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This color is applied to parts of a 3-D element that face the light source.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ControlLight property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithControlLightPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#22](~/add/codesnippet/visualbasic/p-system.drawing.systemp_14_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#22](~/add/codesnippet/csharp/p-system.drawing.systemp_14_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlLightLight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlLightLight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlLightLight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the highlight color of a 3-D element.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the highlight color of a 3-D element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This color is applied to the parts of a 3-D element that are the lightest color.  
  
   
  
## Examples  
 The following code example demonstrates how to use the ControlLightLight property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithControlLightLightPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#23](~/add/codesnippet/visualbasic/p-system.drawing.systemp_9_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#23](~/add/codesnippet/csharp/p-system.drawing.systemp_9_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ControlText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ControlText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ControlText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of text in a 3-D element.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of text in a 3-D element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the ControlText property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithControlTextPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#24](~/add/codesnippet/visualbasic/p-system.drawing.systemp_20_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#24](~/add/codesnippet/csharp/p-system.drawing.systemp_20_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Desktop">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Desktop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Desktop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the Windows desktop.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the Windows desktop.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the Desktop property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithControlDesktopPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#25](~/add/codesnippet/visualbasic/p-system.drawing.systemp_16_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#25](~/add/codesnippet/csharp/p-system.drawing.systemp_16_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromSystemColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen FromSystemColor (System.Drawing.Color c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Pen FromSystemColor(valuetype System.Drawing.Color c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="c">The <see cref="T:System.Drawing.Color" /> for the new <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Creates a <see cref="T:System.Drawing.Pen" /> from the specified <see cref="T:System.Drawing.Color" />.</summary>
        <returns>The <see cref="T:System.Drawing.Pen" /> this method creates.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GradientActiveCaption">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen GradientActiveCaption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen GradientActiveCaption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the lightest color in the color gradient of an active window's title bar.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the lightest color in the color gradient of an active window's title bar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the GradientActiveCaption property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithGradientActiveCaptionPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#26](~/add/codesnippet/visualbasic/p-system.drawing.systemp_11_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#26](~/add/codesnippet/csharp/p-system.drawing.systemp_11_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GradientInactiveCaption">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen GradientInactiveCaption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen GradientInactiveCaption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the lightest color in the color gradient of an inactive window's title bar.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the lightest color in the color gradient of an inactive window's title bar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the GradientInactiveCaption property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithGradientInactiveCaptionPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#27](~/add/codesnippet/visualbasic/p-system.drawing.systemp_10_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#27](~/add/codesnippet/csharp/p-system.drawing.systemp_10_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GrayText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen GrayText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen GrayText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of dimmed text.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of dimmed text.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Items in a list that are disabled are displayed in dimmed text.  
  
   
  
## Examples  
 The following code example demonstrates how to use the GrayText property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithGrayTextPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#28](~/add/codesnippet/visualbasic/p-system.drawing.systemp_0_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#28](~/add/codesnippet/csharp/p-system.drawing.systemp_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Highlight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Highlight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Highlight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the background of selected items.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the background of selected items.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Selected items may include menu items as well as selected text. For example, the pen may be the color used for the background of selected items in a list box.  
  
   
  
## Examples  
 The following code example creates points and sizes using several of the overloaded operators defined for these types. It also demonstrates how to use the Highlight property.  
  
 This example is designed to be used with Windows Forms. Create a form that contains a <xref:System.Windows.Forms.Button> named `subtractButton`. Paste the code into the form and call the `CreatePointsAndSizes` method from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PointsAndSizes#1](~/add/codesnippet/csharp/p-system.drawing.systemp_23_1.cs)]
 [!code-cpp[System.Drawing.PointsAndSizes#1](~/add/codesnippet/cpp/p-system.drawing.systemp_23_1.cpp)]
 [!code-vb[System.Drawing.PointsAndSizes#1](~/add/codesnippet/visualbasic/p-system.drawing.systemp_23_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HighlightText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen HighlightText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen HighlightText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the text of selected items.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the text of selected items.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Selected items may include menu items as well as selected text. For example, the pen may be the color used for the text of selected items in a list box.  
  
   
  
## Examples  
 The following code example demonstrates how to use the HighlightText property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithHighlightTextPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#30](~/add/codesnippet/visualbasic/p-system.drawing.systemp_3_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#30](~/add/codesnippet/csharp/p-system.drawing.systemp_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HotTrack">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen HotTrack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen HotTrack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color used to designate a hot-tracked item.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color used to designate a hot-tracked item.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the HotTrack property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithHotTrackPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#31](~/add/codesnippet/visualbasic/p-system.drawing.systemp_17_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#31](~/add/codesnippet/csharp/p-system.drawing.systemp_17_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InactiveBorder">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen InactiveBorder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen InactiveBorder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> is the color of the border of an inactive window.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the border of an inactive window.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the InactiveBorder property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithInactiveBorderPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#32](~/add/codesnippet/visualbasic/p-system.drawing.systemp_8_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#32](~/add/codesnippet/csharp/p-system.drawing.systemp_8_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InactiveCaption">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen InactiveCaption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen InactiveCaption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the title bar caption of an inactive window.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the title bar caption of an inactive window.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the InactiveCaption property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithInactiveCaptionPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#33](~/add/codesnippet/visualbasic/p-system.drawing.systemp_29_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#33](~/add/codesnippet/csharp/p-system.drawing.systemp_29_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InactiveCaptionText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen InactiveCaptionText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen InactiveCaptionText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the text in an inactive window's title bar.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the text in an inactive window's title bar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the InactiveCaptionText property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithInactiveCaptionTextPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#34](~/add/codesnippet/visualbasic/p-system.drawing.systemp_28_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#34](~/add/codesnippet/csharp/p-system.drawing.systemp_28_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the background of a ToolTip.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the background of a ToolTip.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the Info property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithInfoPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#35](~/add/codesnippet/visualbasic/p-system.drawing.systemp_4_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#35](~/add/codesnippet/csharp/p-system.drawing.systemp_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InfoText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen InfoText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen InfoText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the text of a ToolTip.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the text of a ToolTip.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the InfoText property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithInfoTextPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#36](~/add/codesnippet/visualbasic/p-system.drawing.systemp_24_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#36](~/add/codesnippet/csharp/p-system.drawing.systemp_24_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Menu">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Menu { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Menu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of a menu's background.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of a menu's background.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the Menu property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithMenuPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#37](~/add/codesnippet/visualbasic/p-system.drawing.systemp_12_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#37](~/add/codesnippet/csharp/p-system.drawing.systemp_12_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MenuBar">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen MenuBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen MenuBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the background of a menu bar.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the background of a menu bar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the MenuBar property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithMenuBarPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#38](~/add/codesnippet/visualbasic/p-system.drawing.systemp_18_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#38](~/add/codesnippet/csharp/p-system.drawing.systemp_18_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MenuHighlight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen MenuHighlight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen MenuHighlight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color used to highlight menu items when the menu appears as a flat menu.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color used to highlight menu items when the menu appears as a flat menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the MenuHighlight property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithMenuHighlightPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#39](~/add/codesnippet/visualbasic/p-system.drawing.systemp_21_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#39](~/add/codesnippet/csharp/p-system.drawing.systemp_21_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MenuText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen MenuText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen MenuText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of a menu's text.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of a menu's text.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the MenuText property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithMenuTextPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#40](~/add/codesnippet/visualbasic/p-system.drawing.systemp_2_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#40](~/add/codesnippet/csharp/p-system.drawing.systemp_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScrollBar">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen ScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen ScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the background of a scroll bar.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the background of a scroll bar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the ScrollBar property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithScrollBarPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#41](~/add/codesnippet/visualbasic/p-system.drawing.systemp_5_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#41](~/add/codesnippet/csharp/p-system.drawing.systemp_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen Window" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the background in the client area of a window.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the background in the client area of a window.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the Window property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithWindowPen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#42](~/add/codesnippet/visualbasic/p-system.drawing.systemp_15_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#42](~/add/codesnippet/csharp/p-system.drawing.systemp_15_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WindowFrame">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen WindowFrame { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen WindowFrame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of a window frame.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of a window frame.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the WindowFrame property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithWindowFramePen` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#44](~/add/codesnippet/visualbasic/p-system.drawing.systemp_19_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#44](~/add/codesnippet/csharp/p-system.drawing.systemp_19_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WindowText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Pen WindowText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Pen WindowText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Pen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Drawing.Pen" /> that is the color of the text in the client area of a window.</summary>
        <value>A <see cref="T:System.Drawing.Pen" /> that is the color of the text in the client area of a window.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the WindowText property. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawWithWindowText` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-vb[System.Drawing.MiscWhidbeySnippets#45](~/add/codesnippet/visualbasic/p-system.drawing.systemp_25_1.vb)]
 [!code-cs[System.Drawing.MiscWhidbeySnippets#45](~/add/codesnippet/csharp/p-system.drawing.systemp_25_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>