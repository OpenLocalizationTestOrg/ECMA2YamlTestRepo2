<Type Name="Pen" FullName="System.Drawing.Pen">
  <TypeSignature Language="C#" Value="public sealed class Pen : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pen extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Defines an object used to draw lines and curves. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A Pen draws a line of specified width and style. Use the <xref:System.Drawing.Drawing2D.DashStyle> property to draw several varieties of dashed lines. The line drawn by a Pen can be filled in a variety of fill styles, including solid colors and textures. The fill style depends on brush or texture that is used as the fill object.  
  
   
  
## Examples  
 The following code example demonstrates constructing a Pen with a <xref:System.Drawing.Pen.Brush%2A> and the effects of setting the <xref:System.Drawing.Pen.LineJoin%2A> property on a Pen.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/t-system.drawing.pen_1.cs)]
 [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/t-system.drawing.pen_1.vb)]
 [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/t-system.drawing.pen_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
      </Parameters>
      <Docs>
        <param name="brush">A <see cref="T:System.Drawing.Brush" /> that determines the fill properties of this <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Pen" /> class with the specified <see cref="T:System.Drawing.Brush" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Drawing.Pen.Brush%2A> property determines how the <xref:System.Drawing.Pen> draws lines. Lines are drawn as if they are filled rectangles, with the characteristics of the specified <xref:System.Drawing.Brush>.  
  
 The <xref:System.Drawing.Pen.Width%2A> property of the new <xref:System.Drawing.Pen> is set to 1 (the default).  
  
   
  
## Examples  
 The following code example demonstrates constructing a <xref:System.Drawing.Pen> with a <xref:System.Drawing.Pen.Brush%2A> and the effects of setting the <xref:System.Drawing.Pen.LineJoin%2A> property on a <xref:System.Drawing.Pen>.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/m-system.drawing.pen.sha_2_1.cs)]
 [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/m-system.drawing.pen.sha_2_1.vb)]
 [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/m-system.drawing.pen.sha_2_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">A <see cref="T:System.Drawing.Color" /> structure that indicates the color of this <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Pen" /> class with the specified color.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Drawing.Color> property is set to the color specified by the `color` parameter. The <xref:System.Drawing.Pen.Width%2A> property is set to 1 (the default).  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush, float32 width) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">A <see cref="T:System.Drawing.Brush" /> that determines the characteristics of this <see cref="T:System.Drawing.Pen" />.</param>
        <param name="width">The width of the new <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Pen" /> class with the specified <see cref="T:System.Drawing.Brush" /> and &lt;xref:System.Drawing.Pen.Width%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Drawing.Brush> is set to the color specified in the `brush` parameter, the <xref:System.Drawing.Pen.Width%2A> property is set to the value specified in the `width` parameter, and the units are set to <xref:System.Drawing.GraphicsUnit>.  
  
 Note that the `brush` parameter also specifies the <xref:System.Drawing.Color> property of this <xref:System.Drawing.Pen>.  
  
 A `width` of 0 will result in the <xref:System.Drawing.Pen> drawing as if the width were 1.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Drawing.Pen> and demonstrates the effects of setting the <xref:System.Drawing.Pen.StartCap%2A> and <xref:System.Drawing.Pen.EndCap%2A> properties on a <xref:System.Drawing.Pen>.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowStartAndEndCaps` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.ImageExample#3](~/add/codesnippet/csharp/m-system.drawing.pen.sha_0_1.cs)]
 [!code-cpp[System.Drawing.ImageExample#3](~/add/codesnippet/cpp/m-system.drawing.pen.sha_0_1.cpp)]
 [!code-vb[System.Drawing.ImageExample#3](~/add/codesnippet/visualbasic/m-system.drawing.pen.sha_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color, float32 width) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="color">A <see cref="T:System.Drawing.Color" /> structure that indicates the color of this <see cref="T:System.Drawing.Pen" />.</param>
        <param name="width">A value indicating the width of this <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Drawing.Pen" /> class with the specified <see cref="T:System.Drawing.Color" /> and &lt;xref:System.Drawing.Pen.Width%2A&gt; properties.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Drawing.Color> property is set to the color specified by the `color` parameter. The <xref:System.Drawing.Pen.Width%2A> property is set to the value specified in the `width` parameter. A `width` of 0 will result in the <xref:System.Drawing.Pen> drawing as if the width were 1.  
  
   
  
## Examples  
 The following code example demonstrates creating a <xref:System.Drawing.Pen> and the effects of setting the <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, and <xref:System.Drawing.Graphics.SmoothingMode%2A> properties.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowPensAndSmoothingMode` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing e as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PensExample#3](~/add/codesnippet/csharp/m-system.drawing.pen.sha_1_1.cs)]
 [!code-vb[System.Drawing.PensExample#3](~/add/codesnippet/visualbasic/m-system.drawing.pen.sha_1_1.vb)]
 [!code-cpp[System.Drawing.PensExample#3](~/add/codesnippet/cpp/m-system.drawing.pen.sha_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenAlignment Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the alignment for this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.PenAlignment" /> that represents the alignment for this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property determines how the <xref:System.Drawing.Pen> draws closed curves and polygons. The <xref:System.Drawing.Drawing2D.PenAlignment> enumeration specifies five values; however, only two values—<xref:System.Drawing.Drawing2D.PenAlignment> and <xref:System.Drawing.Drawing2D.PenAlignment>—will change the appearance of a drawn line. <xref:System.Drawing.Drawing2D.PenAlignment> is the default value for this property and specifies that the width of the pen is centered on the outline of the curve or polygon. A value of <xref:System.Drawing.Drawing2D.PenAlignment> for this property specifies that the width of the pen is inside the outline of the curve or polygon. The other three values, <xref:System.Drawing.Drawing2D.PenAlignment>, <xref:System.Drawing.Drawing2D.PenAlignment>, and <xref:System.Drawing.Drawing2D.PenAlignment>, will result in a pen that is centered.  
  
 A <xref:System.Drawing.Pen> that has its alignment set to <xref:System.Drawing.Drawing2D.PenAlignment> will yield unreliable results, sometimes drawing in the inset position and sometimes in the centered position. Also, an inset pen cannot be used to draw compound lines and cannot draw dashed lines with <xref:System.Drawing.Drawing2D.DashCap> dash caps.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not a member of <see cref="T:System.Drawing.Drawing2D.PenAlignment" />.</exception>
        <exception cref="T:System.ArgumentException">The Alignment property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Brush">
      <MemberSignature Language="C#" Value="public System.Drawing.Brush Brush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Brush Brush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Drawing.Brush" /> that determines attributes of this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Brush" /> that determines attributes of this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Assigning this property causes the pen to draw filled lines and curves. It overrides the <xref:System.Drawing.Color> property of the <xref:System.Drawing.Pen>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The Brush property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an exact copy of this <see cref="T:System.Drawing.Pen" />.</summary>
        <returns>An &lt;xref:System.Object&gt; that can be cast to a <see cref="T:System.Drawing.Pen" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a <xref:System.Drawing.Pen>.  
  
-   Creates a copy of that pen.  
  
-   Draws a line to the screen, using the copy of the pen.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#1](~/add/codesnippet/cpp/m-system.drawing.pen.clone_1.cpp)]
 [!code-cs[System.Drawing.ClassicPenExamples#1](~/add/codesnippet/csharp/m-system.drawing.pen.clone_1.cs)]
 [!code-vb[System.Drawing.ClassicPenExamples#1](~/add/codesnippet/visualbasic/m-system.drawing.pen.clone_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> structure that represents the color of this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The Color property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CompoundArray">
      <MemberSignature Language="C#" Value="public float[] CompoundArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] CompoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an array of values that specifies a compound pen. A compound pen draws a compound line made up of parallel lines and spaces.</summary>
        <value>An array of real numbers that specifies the compound array. The elements in the array must be in increasing order, not less than 0, and not greater than 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A compound line is made up of alternating parallel lines and spaces of varying widths. The values in the array specify the starting points of each component of the compound line relative to the pen's width. The first value in the array specifies where the first component (a line) begins as a fraction of the distance across the width of the pen. The second value in the array specifies the beginning of the next component (a space) as a fraction of the distance across the width of the pen. The final value in the array specifies where the last component ends.  
  
 Suppose you want a pen to draw two parallel lines where the width of the first line is 20 percent of the pen's width, the width of the space that separates the two lines is 50 percent of the pen' s width, and the width of the second line is 30 percent of the pen's width. Start by creating a <xref:System.Drawing.Pen> and an array of real numbers. Set the compound array by passing the array with the values 0.0, 0.2, 0.7, and 1.0 to this property.  
  
 Do not set this property if the <xref:System.Drawing.Pen> has its <xref:System.Drawing.Pen.Alignment%2A> property set to <xref:System.Drawing.Drawing2D.PenAlignment>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The CompoundArray property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CustomEndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomEndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomEndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a custom cap to use at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> that represents the cap used at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The CustomEndCap property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CustomStartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomStartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomStartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a custom cap to use at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> that represents the cap used at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The CustomStartCap property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DashCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashCap DashCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashCap DashCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cap style used at the end of the dashes that make up dashed lines drawn with this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>One of the <see cref="T:System.Drawing.Drawing2D.DashCap" /> values that represents the cap style used at the beginning and end of the dashes that make up dashed lines drawn with this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not set this property to <xref:System.Drawing.Drawing2D.DashCap> if the <xref:System.Drawing.Pen> has its <xref:System.Drawing.Pen.Alignment%2A> property set to <xref:System.Drawing.Drawing2D.PenAlignment>.  
  
   
  
## Examples  
 The following code example demonstrates creating a <xref:System.Drawing.Pen> and the effects of setting the DashCap, <xref:System.Drawing.Pen.DashPattern%2A>, and <xref:System.Drawing.Graphics.SmoothingMode%2A> properties.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowPensAndSmoothingMode` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PensExample#3](~/add/codesnippet/csharp/p-system.drawing.pen.das_0_1.cs)]
 [!code-vb[System.Drawing.PensExample#3](~/add/codesnippet/visualbasic/p-system.drawing.pen.das_0_1.vb)]
 [!code-cpp[System.Drawing.PensExample#3](~/add/codesnippet/cpp/p-system.drawing.pen.das_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not a member of <see cref="T:System.Drawing.Drawing2D.DashCap" />.</exception>
        <exception cref="T:System.ArgumentException">The DashCap property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DashOffset">
      <MemberSignature Language="C#" Value="public float DashOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DashOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the distance from the start of a line to the beginning of a dash pattern.</summary>
        <value>The distance from the start of a line to the beginning of a dash pattern.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The DashOffset property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DashPattern">
      <MemberSignature Language="C#" Value="public float[] DashPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] DashPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an array of custom dashes and spaces.</summary>
        <value>An array of real numbers that specifies the lengths of alternating dashes and spaces in dashed lines.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Assigning a value other than `null` to this property will set the <xref:System.Drawing.Drawing2D.DashStyle> property for this <xref:System.Drawing.Pen> to <xref:System.Drawing.Drawing2D.DashStyle>.  
  
 The elements in the `dashArray` array set the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. Consequently, each element should be a non-zero positive number.  
  
 The length of each dash and space in the dash pattern is the product of the element value in the array and the width of the <xref:System.Drawing.Pen>.  
  
   
  
## Examples  
 The following code example demonstrates the effects of setting the <xref:System.Drawing.Pen.DashCap%2A>, DashPattern, and <xref:System.Drawing.Graphics.SmoothingMode%2A> properties.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowPensAndSmoothingMode` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PensExample#3](~/add/codesnippet/csharp/p-system.drawing.pen.das_1_1.cs)]
 [!code-vb[System.Drawing.PensExample#3](~/add/codesnippet/visualbasic/p-system.drawing.pen.das_1_1.vb)]
 [!code-cpp[System.Drawing.PensExample#3](~/add/codesnippet/cpp/p-system.drawing.pen.das_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The DashPattern property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DashStyle">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashStyle DashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashStyle DashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style used for dashed lines drawn with this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.DashStyle" /> that represents the style used for dashed lines drawn with this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A value of <xref:System.Drawing.Drawing2D.DashStyle> for this property specifies that a custom pattern of dashes and spaces, defined by the <xref:System.Drawing.Pen.DashPattern%2A> property, makes up lines drawn with this <xref:System.Drawing.Pen>. If the value of this property is <xref:System.Drawing.Drawing2D.DashStyle> and the value of the <xref:System.Drawing.Pen.DashPattern%2A> property is `null`, the pen draws solid lines.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The DashStyle property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by this <see cref="T:System.Drawing.Pen" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling Dispose allows the resources used by this <xref:System.Drawing.Brush> to be reallocated for other purposes.  
  
 Call Dispose when you are finished using the <xref:System.Drawing.Pen>. The Dispose method leaves the <xref:System.Drawing.Pen> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Drawing.Pen> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Pen> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  
  
> [!NOTE]
>  Always call Dispose before you release your last reference to the <xref:System.Drawing.Pen>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Pen> object's `Finalize` method.  
  
   
  
## Examples  
 The following code example demonstrates the effects of setting the <xref:System.Drawing.Pen.Width%2A> and <xref:System.Drawing.Pen.LineJoin%2A> properties, and shows how to call the Dispose method for a <xref:System.Drawing.Pen>.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/m-system.drawing.pen.dis_1.cs)]
 [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/m-system.drawing.pen.dis_1.vb)]
 [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/m-system.drawing.pen.dis_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap EndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap EndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cap style used at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>One of the <see cref="T:System.Drawing.Drawing2D.LineCap" /> values that represents the cap style used at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the effects of setting the <xref:System.Drawing.Pen.StartCap%2A> and EndCap properties on a <xref:System.Drawing.Pen>.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowStartAndEndCaps` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PensExample#2](~/add/codesnippet/csharp/p-system.drawing.pen.end_1.cs)]
 [!code-vb[System.Drawing.PensExample#2](~/add/codesnippet/visualbasic/p-system.drawing.pen.end_1.vb)]
 [!code-cpp[System.Drawing.PensExample#2](~/add/codesnippet/cpp/p-system.drawing.pen.end_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not a member of <see cref="T:System.Drawing.Drawing2D.LineCap" />.</exception>
        <exception cref="T:System.ArgumentException">The EndCap property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Pen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LineJoin">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineJoin LineJoin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineJoin LineJoin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the join style for the ends of two consecutive lines drawn with this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.LineJoin" /> that represents the join style for the ends of two consecutive lines drawn with this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A line join is the common area that is formed by two lines whose ends meet or overlap. There are three line join styles: miter, bevel, and round.  When you specify a line join style for a <xref:System.Drawing.Pen> object, that join style will be applied to all the connected lines in any <xref:System.Drawing.Drawing2D.GraphicsPath> object drawn using that pen.The following illustration shows the results of the beveled line join example.  
  
 ![Pens](~/add/media/pens5.gif "Pens")  
  
   
  
## Examples  
 The following code example demonstrates the effects of setting the <xref:System.Drawing.Pen.Width%2A> and LineJoin properties on a <xref:System.Drawing.Pen>.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs> .  
  
 [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/p-system.drawing.pen.lin_1.cs)]
 [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/p-system.drawing.pen.lin_1.vb)]
 [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/p-system.drawing.pen.lin_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The LineJoin property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MiterLimit">
      <MemberSignature Language="C#" Value="public float MiterLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MiterLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the limit of the thickness of the join on a mitered corner.</summary>
        <value>The limit of the thickness of the join on a mitered corner.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The miter length is the distance from the intersection of the line walls on the inside of the join to the intersection of the line walls outside of the join. The miter length can be large when the angle between two lines is small. The miter limit is the maximum allowed ratio of miter length to stroke width. The default value is 10.0f.  
  
 If the miter length of the join of the intersection exceeds the limit of the join, then the join will be beveled to keep it within the limit of the join of the intersection.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The MiterLimit property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" /> object by which to multiply the transformation matrix.</param>
        <summary>Multiplies the transformation matrix for this <see cref="T:System.Drawing.Pen" /> by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method prepends the multiplication matrix specified in the `matrix` parameter to the transformation matrix for the multiplication operation.  
  
   
  
## Examples  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a <xref:System.Drawing.Pen>.  
  
-   Draws a line to the screen.  
  
-   Multiplies the transformation matrix of the pen by the specified matrix.  
  
-   Draws a line with the transformed pen.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#2](~/add/codesnippet/cpp/m-system.drawing.pen.mul_1.cpp)]
 [!code-cs[System.Drawing.ClassicPenExamples#2](~/add/codesnippet/csharp/m-system.drawing.pen.mul_1.cs)]
 [!code-vb[System.Drawing.ClassicPenExamples#2](~/add/codesnippet/visualbasic/m-system.drawing.pen.mul_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" /> by which to multiply the transformation matrix.</param>
        <param name="order">The order in which to perform the multiplication operation.</param>
        <summary>Multiplies the transformation matrix for this <see cref="T:System.Drawing.Pen" /> by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" /> in the specified order.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method uses the <xref:System.Drawing.Drawing2D.MatrixOrder> enumeration element (either prepend or append) specified by the `order` parameter to carry out the multiplication operation.  
  
   
  
## Examples  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a <xref:System.Drawing.Pen>.  
  
-   Draws a line to the screen.  
  
-   Multiplies the transformation matrix of the pen by the specified matrix.  
  
-   Draws a line with the transformed pen.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#3](~/add/codesnippet/cpp/b3caf9f4-4a37-409d-bccb-_1.cpp)]
 [!code-cs[System.Drawing.ClassicPenExamples#3](~/add/codesnippet/csharp/b3caf9f4-4a37-409d-bccb-_1.cs)]
 [!code-vb[System.Drawing.ClassicPenExamples#3](~/add/codesnippet/visualbasic/b3caf9f4-4a37-409d-bccb-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PenType">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenType PenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenType PenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the style of lines drawn with this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.PenType" /> enumeration that specifies the style of lines drawn with this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Pen> can draw solid lines, filled lines, or textured lines, depending on the style specified by a member of the <xref:System.Drawing.Drawing2D.PenType> enumeration.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the geometric transformation matrix for this <see cref="T:System.Drawing.Pen" /> to identity.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a <xref:System.Drawing.Pen>.  
  
-   Sets the transformation matrix of the pen to scale 2 times in the x-axis direction.  
  
-   Draws a line to the screen.  
  
-   Resets the transformation matrix to identity.  
  
-   Draws a second line to the screen.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#4](~/add/codesnippet/cpp/m-system.drawing.pen.res_1.cpp)]
 [!code-cs[System.Drawing.ClassicPenExamples#4](~/add/codesnippet/csharp/m-system.drawing.pen.res_1.cs)]
 [!code-vb[System.Drawing.ClassicPenExamples#4](~/add/codesnippet/visualbasic/m-system.drawing.pen.res_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">The angle of rotation.</param>
        <summary>Rotates the local geometric transformation by the specified angle. This method prepends the rotation to the transformation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-axis direction.  
  
   
  
## Examples  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a <xref:System.Drawing.Pen>.  
  
-   Draws a rectangle using the pen.  
  
-   Scales the pen by 2 times in the x-axis direction.  
  
-   Rotates the pen 90 degrees clockwise.  
  
-   Draws a second rectangle to demonstrate the difference.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#5](~/add/codesnippet/cpp/m-system.drawing.pen.rot_1.cpp)]
 [!code-cs[System.Drawing.ClassicPenExamples#5](~/add/codesnippet/csharp/m-system.drawing.pen.rot_1.cs)]
 [!code-vb[System.Drawing.ClassicPenExamples#5](~/add/codesnippet/visualbasic/m-system.drawing.pen.rot_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">The angle of rotation.</param>
        <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> that specifies whether to append or prepend the rotation matrix.</param>
        <summary>Rotates the local geometric transformation by the specified angle in the specified order.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-axis direction.  
  
   
  
## Examples  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a <xref:System.Drawing.Pen>.  
  
-   Scales the pen by 2 times in the x-axis direction.  
  
-   Draws a rectangle using the pen.  
  
-   Rotates the pen 90 degrees clockwise.  
  
-   Draws a second rectangle to demonstrate the difference.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#6](~/add/codesnippet/cpp/35c127d1-4f45-4168-8641-_1.cpp)]
 [!code-cs[System.Drawing.ClassicPenExamples#6](~/add/codesnippet/csharp/35c127d1-4f45-4168-8641-_1.cs)]
 [!code-vb[System.Drawing.ClassicPenExamples#6](~/add/codesnippet/visualbasic/35c127d1-4f45-4168-8641-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">The factor by which to scale the transformation in the x-axis direction.</param>
        <param name="sy">The factor by which to scale the transformation in the y-axis direction.</param>
        <summary>Scales the local geometric transformation by the specified factors. This method prepends the scaling matrix to the transformation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
 Creates a <xref:System.Drawing.Pen>.  
  
 Draws a rectangle using the pen.  
  
 Scales the pen by 2 times in the x-axis direction.  
  
 Draws a second rectangle to demonstrate the difference.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#7](~/add/codesnippet/cpp/m-system.drawing.pen.sca_1.cpp)]
 [!code-cs[System.Drawing.ClassicPenExamples#7](~/add/codesnippet/csharp/m-system.drawing.pen.sca_1.cs)]
 [!code-vb[System.Drawing.ClassicPenExamples#7](~/add/codesnippet/visualbasic/m-system.drawing.pen.sca_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">The factor by which to scale the transformation in the x-axis direction.</param>
        <param name="sy">The factor by which to scale the transformation in the y-axis direction.</param>
        <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> that specifies whether to append or prepend the scaling matrix.</param>
        <summary>Scales the local geometric transformation by the specified factors in the specified order.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a <xref:System.Drawing.Pen>.  
  
-   Draws a rectangle using the pen.  
  
-   Scales the pen by 2 times in the x-axis direction.  
  
-   Draws a second rectangle to demonstrate the difference.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#8](~/add/codesnippet/cpp/f408f2ab-3827-481d-becb-_1.cpp)]
 [!code-cs[System.Drawing.ClassicPenExamples#8](~/add/codesnippet/csharp/f408f2ab-3827-481d-becb-_1.cs)]
 [!code-vb[System.Drawing.ClassicPenExamples#8](~/add/codesnippet/visualbasic/f408f2ab-3827-481d-becb-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetLineCap">
      <MemberSignature Language="C#" Value="public void SetLineCap (System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap, System.Drawing.Drawing2D.DashCap dashCap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineCap(valuetype System.Drawing.Drawing2D.LineCap startCap, valuetype System.Drawing.Drawing2D.LineCap endCap, valuetype System.Drawing.Drawing2D.DashCap dashCap) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="endCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="dashCap" Type="System.Drawing.Drawing2D.DashCap" />
      </Parameters>
      <Docs>
        <param name="startCap">A <see cref="T:System.Drawing.Drawing2D.LineCap" /> that represents the cap style to use at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />.</param>
        <param name="endCap">A <see cref="T:System.Drawing.Drawing2D.LineCap" /> that represents the cap style to use at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />.</param>
        <param name="dashCap">A <see cref="T:System.Drawing.Drawing2D.LineCap" /> that represents the cap style to use at the beginning or end of dashed lines drawn with this <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Sets the values that determine the style of cap used to end lines drawn by this <see cref="T:System.Drawing.Pen" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code creates a <xref:System.Drawing.Pen> and sets it to draw arrow anchor caps at the beginning of lines:  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#9](~/add/codesnippet/cpp/40b79849-2bf1-4135-844f-_1.cpp)]
 [!code-cs[System.Drawing.ClassicPenExamples#9](~/add/codesnippet/csharp/40b79849-2bf1-4135-844f-_1.cs)]
 [!code-vb[System.Drawing.ClassicPenExamples#9](~/add/codesnippet/visualbasic/40b79849-2bf1-4135-844f-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="StartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap StartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap StartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cap style used at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>One of the <see cref="T:System.Drawing.Drawing2D.LineCap" /> values that represents the cap style used at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the effects of setting the StartCap and <xref:System.Drawing.Pen.EndCap%2A> properties on a <xref:System.Drawing.Pen>.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowStartAndEndCaps` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PensExample#2](~/add/codesnippet/csharp/p-system.drawing.pen.sta_1.cs)]
 [!code-vb[System.Drawing.PensExample#2](~/add/codesnippet/visualbasic/p-system.drawing.pen.sta_1.vb)]
 [!code-cpp[System.Drawing.PensExample#2](~/add/codesnippet/cpp/p-system.drawing.pen.sta_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not a member of <see cref="T:System.Drawing.Drawing2D.LineCap" />.</exception>
        <exception cref="T:System.ArgumentException">The StartCap property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a copy of the geometric transformation for this <see cref="T:System.Drawing.Pen" />.</summary>
        <value>A copy of the <see cref="T:System.Drawing.Drawing2D.Matrix" /> that represents the geometric transformation for this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property defines an elliptical shape for the pen tip. This ellipse is obtained from the default circular shape by applying the transformation matrix. Note that the translation portion of the matrix is ignored. Because the matrix returned and by the Transform property is a copy of the pen's geometric transform, you should dispose of the matrix when you no longer need it.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The Transform property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">The value of the translation in x.</param>
        <param name="dy">The value of the translation in y.</param>
        <summary>Translates the local geometric transformation by the specified dimensions. This method prepends the translation to the transformation.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">The value of the translation in x.</param>
        <param name="dy">The value of the translation in y.</param>
        <param name="order">The order (prepend or append) in which to apply the translation.</param>
        <summary>Translates the local geometric transformation by the specified dimensions in the specified order.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public float Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of this <see cref="T:System.Drawing.Pen" />, in units of the <see cref="T:System.Drawing.Graphics" /> object used for drawing.</summary>
        <value>The width of this <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can access the unit of measure of the <xref:System.Drawing.Graphics> object using its <xref:System.Drawing.Graphics.PageUnit%2A> property. The unit of measure is typically pixels. A Width of 0 will result in the <xref:System.Drawing.Pen> drawing as if the Width were 1.  
  
   
  
## Examples  
 The following code example demonstrates the effects of setting the Width and <xref:System.Drawing.Pen.LineJoin%2A> properties on a <xref:System.Drawing.Pen>.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/p-system.drawing.pen.width_1.cs)]
 [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/p-system.drawing.pen.width_1.vb)]
 [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/p-system.drawing.pen.width_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The Width property is set on an immutable <see cref="T:System.Drawing.Pen" />, such as those returned by the <see cref="T:System.Drawing.Pens" /> class.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>