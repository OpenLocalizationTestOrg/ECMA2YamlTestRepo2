<Type Name="NavigationCommands" FullName="System.Windows.Input.NavigationCommands">
  <TypeSignature Language="C#" Value="public static class NavigationCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit NavigationCommands extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a standard set of navigation-related commands.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The NavigationCommands class exposes a standard set of navigation-related commands, including browser and document navigation.  
  
 For more information on commands and commanding, see [Commanding Overview](~/add/includes/ajax-current-ext-md.md).  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="BrowseBack">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Browse Back" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> ALT+LEFT  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Back  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to navigate back to the previous page in the journal.  
  
 <xref:System.Windows.Controls.Frame> and <xref:System.Windows.Navigation.NavigationWindow> implement support for responding to the BrowseBack, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_BrowseBack"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.BrowseBack"/>  
```  
  
   
  
## Examples  
 The following example shows how to use BrowseBack in conjunction with a <xref:System.Windows.Controls.Frame>. The <xref:System.Windows.Controls.Frame> provides an implementation that responds to the BrowseBack command by navigating the <xref:System.Windows.Controls.Frame> back, if there are journal entries on the back stack.  
  
 [!code-xml[NavigationCommandsSnippets#BrowseBackMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseBack.xaml#browsebackmarkup1)]  
[!code-xml[NavigationCommandsSnippets#BrowseBackMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseBack.xaml#browsebackmarkup2)]  
[!code-xml[NavigationCommandsSnippets#BrowseBackMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseBack.xaml#browsebackmarkup3)]  
[!code-xml[NavigationCommandsSnippets#BrowseBackMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseBack.xaml#browsebackmarkup4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BrowseForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Browse Forward" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> ALT+RIGHT  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Forward  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to navigate forward the next page in the journal.  
  
 <xref:System.Windows.Controls.Frame> and <xref:System.Windows.Navigation.NavigationWindow> implement support for responding to the BrowseForward command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_BrowseForward"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.BrowseForward"/>  
```  
  
   
  
## Examples  
 The following example shows how to use BrowseForward in conjunction with a <xref:System.Windows.Controls.Frame>. The <xref:System.Windows.Controls.Frame> provides an implementation that responds to the BrowseForward command by navigating the <xref:System.Windows.Controls.Frame> forward, if there are journal entries on the forward stack.  
  
 [!code-xml[NavigationCommandsSnippets#BrowseForwardMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseForward.xaml#browseforwardmarkup1)]  
[!code-xml[NavigationCommandsSnippets#BrowseForwardMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseForward.xaml#browseforwardmarkup2)]  
[!code-xml[NavigationCommandsSnippets#BrowseForwardMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseForward.xaml#browseforwardmarkup3)]  
[!code-xml[NavigationCommandsSnippets#BrowseForwardMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseForward.xaml#browseforwardmarkup4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BrowseHome">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseHome { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseHome" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Browse Home" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> ALT+HOME  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Home  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to navigate home.  
  
 There is no implementation for responding to the BrowseHome command on any given [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] class. As such, you need to provide an appropriate implementation, which is shown in the example.  
  
<a name="xamlAttributeUsage_BrowseHome"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.BrowseHome"/>  
```  
  
   
  
## Examples  
 The following example shows how to implement code that responds to the BrowseHome command in conjunction with a <xref:System.Windows.Controls.Frame>.  
  
 [!code-xml[NavigationCommandsSnippets#BrowseHomeMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseHome.xaml#browsehomemarkup1)]  
[!code-xml[NavigationCommandsSnippets#BrowseHomeMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseHome.xaml#browsehomemarkup2)]  
[!code-xml[NavigationCommandsSnippets#BrowseHomeMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseHome.xaml#browsehomemarkup3)]  
[!code-xml[NavigationCommandsSnippets#BrowseHomeMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseHome.xaml#browsehomemarkup4)]  
  
 [!code-vb[NavigationCommandsSnippets#BrowseHomeCODEBEHIND](~/add/codesnippet/visualbasic/navigationcommandssnippets/browsehome.xaml.vb#browsehomecodebehind)]
 [!code-cs[NavigationCommandsSnippets#BrowseHomeCODEBEHIND](~/add/codesnippet/csharp/NavigationCommandsSnippets/BrowseHome.xaml.cs#browsehomecodebehind)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="BrowseStop">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseStop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Browse Stop" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> ALT+ESC  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Stop  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to stop the browser loading.  
  
 <xref:System.Windows.Controls.Frame> and <xref:System.Windows.Navigation.NavigationWindow> implement support for responding to the BrowseStop command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_BrowseStop"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.BrowseStop"/>  
```  
  
   
  
## Examples  
 The following example shows how to use BrowseStop in conjunction with a <xref:System.Windows.Controls.Frame>. The <xref:System.Windows.Controls.Frame> provides an implementation that responds to the BrowseStop command by stopping the current <xref:System.Windows.Controls.Frame> navigation.  
  
 [!code-xml[NavigationCommandsSnippets#BrowseStopMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseStop.xaml#browsestopmarkup1)]  
[!code-xml[NavigationCommandsSnippets#BrowseStopMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseStop.xaml#browsestopmarkup2)]  
[!code-xml[NavigationCommandsSnippets#BrowseStopMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseStop.xaml#browsestopmarkup3)]  
[!code-xml[NavigationCommandsSnippets#BrowseStopMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/BrowseStop.xaml#browsestopmarkup4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DecreaseZoom">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseZoom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseZoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Decrease Zoom" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> N/A  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Decrease Zoom  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to decrease the zoom.  
  
 <xref:System.Windows.Controls.DocumentViewer>, <xref:System.Windows.Controls.FlowDocumentReader>, <xref:System.Windows.Controls.FlowDocumentScrollViewer>, and <xref:System.Windows.Controls.FlowDocumentPageViewer> implement support for responding to the DecreaseZoom command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_DecreaseZoom"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.DecreaseZoom"/>  
```  
  
   
  
## Examples  
 The following example shows how to use DecreaseZoom in conjunction with a <xref:System.Windows.Controls.FlowDocumentPageViewer>. The <xref:System.Windows.Controls.FlowDocumentPageViewer> provides an implementation that responds to the DecreaseZoom command by decreasing the zoom percentage.  
  
 [!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/DecreaseZoom.xaml#decreasezoommarkup1)]  
[!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/DecreaseZoom.xaml#decreasezoommarkup2)]  
[!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/DecreaseZoom.xaml#decreasezoommarkup3)]  
[!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/DecreaseZoom.xaml#decreasezoommarkup4)]  
[!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP5](~/add/codesnippet/xaml/NavigationCommandsSnippets/DecreaseZoom.xaml#decreasezoommarkup5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Favorites">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Favorites { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Favorites" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Favorites" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> CTRL+I  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Favorites  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to manage and navigate to favorites.  
  
 There is no implementation for responding to the Favorites command on any given [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] class. As such, you need to provide an appropriate implementation, which is shown in the example.  
  
<a name="xamlAttributeUsage_Favorites"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.Favorites"/>  
```  
  
   
  
## Examples  
 The following example shows how to implement code that responds to the Favorites command in conjunction with a <xref:System.Windows.Controls.Frame>.  
  
 [!code-xml[NavigationCommandsSnippets#FavoritesMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/Favorites.xaml#favoritesmarkup1)]  
[!code-xml[NavigationCommandsSnippets#FavoritesMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/Favorites.xaml#favoritesmarkup2)]  
[!code-xml[NavigationCommandsSnippets#FavoritesMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/Favorites.xaml#favoritesmarkup3)]  
[!code-xml[NavigationCommandsSnippets#FavoritesMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/Favorites.xaml#favoritesmarkup4)]  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FirstPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand FirstPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand FirstPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="First Page" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> N/A  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> First Page  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to go to the first page.  
  
 <xref:System.Windows.Controls.DocumentViewer>, <xref:System.Windows.Controls.FlowDocumentReader>, <xref:System.Windows.Controls.FlowDocumentScrollViewer>, and <xref:System.Windows.Controls.FlowDocumentPageViewer> implement support for responding to the FirstPage command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_FirstPage"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.FirstPage"/>  
```  
  
   
  
## Examples  
 The following example shows how to use FirstPage in conjunction with a <xref:System.Windows.Controls.FlowDocumentPageViewer>. The <xref:System.Windows.Controls.FlowDocumentPageViewer> provides an implementation that responds to the FirstPage command by going to the first page.  
  
 [!code-xml[NavigationCommandsSnippets#FirstPageMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/FirstPage.xaml#firstpagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#FirstPageMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/FirstPage.xaml#firstpagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#FirstPageMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/FirstPage.xaml#firstpagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#FirstPageMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/FirstPage.xaml#firstpagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#FirstPageMARKUP5](~/add/codesnippet/xaml/NavigationCommandsSnippets/FirstPage.xaml#firstpagemarkup5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GoToPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand GoToPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand GoToPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Go To Page" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> N/A  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Go To Page  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to change the zoom.  
  
 <xref:System.Windows.Controls.DocumentViewer> and <xref:System.Windows.Controls.FlowDocumentPageViewer> implement support for responding to the GoToPage command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_GoToPage"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.GoToPage"/>  
```  
  
   
  
## Examples  
 The following example shows how to use the GoToPage command in conjunction with a <xref:System.Windows.Controls.FlowDocumentPageViewer>. The <xref:System.Windows.Controls.FlowDocumentPageViewer> provides an implementation that responds to the GoToPage command by going to the page specified by the text value of a <xref:System.Windows.Controls.TextBox> control.  
  
 [!code-xml[NavigationCommandsSnippets#GoToPageMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/GoToPage.xaml#gotopagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#GoToPageMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/GoToPage.xaml#gotopagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#GoToPageMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/GoToPage.xaml#gotopagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#GoToPageMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/GoToPage.xaml#gotopagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#GoToPageMARKUP5](~/add/codesnippet/xaml/NavigationCommandsSnippets/GoToPage.xaml#gotopagemarkup5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IncreaseZoom">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseZoom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseZoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Increase Zoom" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> N/A  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Increase Zoom  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to increase the zoom.  
  
 <xref:System.Windows.Controls.DocumentViewer>, <xref:System.Windows.Controls.FlowDocumentReader>, <xref:System.Windows.Controls.FlowDocumentScrollViewer>, and <xref:System.Windows.Controls.FlowDocumentPageViewer> implement support for responding to the IncreaseZoom command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_IncreaseZoom"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.IncreaseZoom"/>  
```  
  
   
  
## Examples  
 The following example shows how to use IncreaseZoom in conjunction with a <xref:System.Windows.Controls.FlowDocumentPageViewer>. The <xref:System.Windows.Controls.FlowDocumentPageViewer> provides an implementation that responds to the IncreaseZoom command by decreasing the zoom percentage.  
  
 [!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/IncreaseZoom.xaml#increasezoommarkup1)]  
[!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/IncreaseZoom.xaml#increasezoommarkup2)]  
[!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/IncreaseZoom.xaml#increasezoommarkup3)]  
[!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/IncreaseZoom.xaml#increasezoommarkup4)]  
[!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP5](~/add/codesnippet/xaml/NavigationCommandsSnippets/IncreaseZoom.xaml#increasezoommarkup5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LastPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand LastPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand LastPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Last Page" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> N/A  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Last Page  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to go to the last page.  
  
 <xref:System.Windows.Controls.DocumentViewer>, <xref:System.Windows.Controls.FlowDocumentReader>, <xref:System.Windows.Controls.FlowDocumentScrollViewer>, and <xref:System.Windows.Controls.FlowDocumentPageViewer> implement support for responding to the LastPage command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_LastPage"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.LastPage"/>  
```  
  
   
  
## Examples  
 The following example shows how to use LastPage in conjunction with a <xref:System.Windows.Controls.FlowDocumentPageViewer>. The <xref:System.Windows.Controls.FlowDocumentPageViewer> provides an implementation that responds to the LastPage command by going to the last page.  
  
 [!code-xml[NavigationCommandsSnippets#LastPageMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/LastPage.xaml#lastpagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#LastPageMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/LastPage.xaml#lastpagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#LastPageMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/LastPage.xaml#lastpagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#LastPageMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/LastPage.xaml#lastpagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#LastPageMARKUP5](~/add/codesnippet/xaml/NavigationCommandsSnippets/LastPage.xaml#lastpagemarkup5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NavigateJournal">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand NavigateJournal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand NavigateJournal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Navigate Journal" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> N/A  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Navigation Journal  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to navigate the journal.  
  
 <xref:System.Windows.Controls.Frame> and <xref:System.Windows.Navigation.NavigationWindow> implement support for responding to the NavigateJournal command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_NavigateJournal"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.NavigateJournal"/>  
```  
  
   
  
## Examples  
 The following example shows how to use NavigateJournal in conjunction with a <xref:System.Windows.Controls.Frame>. The <xref:System.Windows.Controls.Frame> provides an implementation that responds to the NavigateJournal command by navigating to the specified journal entry on either the forward or back stacks of the <xref:System.Windows.Controls.Frame>. The journal entries are provided by the <xref:System.Windows.Navigation.JournalEntryUnifiedViewConverter> to the top-level `Navigate Journal` <xref:System.Windows.Controls.MenuItem>. Each journal entry is bound to a child <xref:System.Windows.Controls.MenuItem> that uses the NavigateJournal command.  
  
 [!code-xml[NavigationCommandsSnippets#NavigateJournalMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/NavigateJournal.xaml#navigatejournalmarkup1)]  
[!code-xml[NavigationCommandsSnippets#NavigateJournalMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/NavigateJournal.xaml#navigatejournalmarkup2)]  
[!code-xml[NavigationCommandsSnippets#NavigateJournalMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/NavigateJournal.xaml#navigatejournalmarkup3)]  
[!code-xml[NavigationCommandsSnippets#NavigateJournalMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/NavigateJournal.xaml#navigatejournalmarkup4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NextPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand NextPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand NextPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Next Page" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> N/A  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Next Page  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to go to the next page.  
  
 <xref:System.Windows.Controls.DocumentViewer>, <xref:System.Windows.Controls.FlowDocumentReader>, <xref:System.Windows.Controls.FlowDocumentScrollViewer>, and <xref:System.Windows.Controls.FlowDocumentPageViewer> implement support for responding to the NextPage command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_NextPage"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.NextPage"/>  
```  
  
   
  
## Examples  
 The following example shows how to use NextPage in conjunction with a <xref:System.Windows.Controls.FlowDocumentPageViewer>. The <xref:System.Windows.Controls.FlowDocumentPageViewer> provides an implementation that responds to the NextPage command by going to the next page.  
  
 [!code-xml[NavigationCommandsSnippets#NextPageMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/NextPage.xaml#nextpagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#NextPageMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/NextPage.xaml#nextpagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#NextPageMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/NextPage.xaml#nextpagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#NextPageMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/NextPage.xaml#nextpagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#NextPageMARKUP5](~/add/codesnippet/xaml/NavigationCommandsSnippets/NextPage.xaml#nextpagemarkup5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PreviousPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand PreviousPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand PreviousPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Previous Page" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> N/A  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Previous Page  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to go to the previous page.  
  
 <xref:System.Windows.Controls.DocumentViewer>, <xref:System.Windows.Controls.FlowDocumentReader>, <xref:System.Windows.Controls.FlowDocumentScrollViewer>, and <xref:System.Windows.Controls.FlowDocumentPageViewer> implement support for responding to the PreviousPage command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_PreviousPage"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.PreviousPage"/>  
```  
  
   
  
## Examples  
 The following example shows how to use PreviousPage in conjunction with a <xref:System.Windows.Controls.FlowDocumentPageViewer>. The <xref:System.Windows.Controls.FlowDocumentPageViewer> provides an implementation that responds to the PreviousPage command by going to the previous page.  
  
 [!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/PreviousPage.xaml#previouspagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/PreviousPage.xaml#previouspagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/PreviousPage.xaml#previouspagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/PreviousPage.xaml#previouspagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP5](~/add/codesnippet/xaml/NavigationCommandsSnippets/PreviousPage.xaml#previouspagemarkup5)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Refresh { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Refresh" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Refresh" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> F5  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Refresh  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to refresh the current page.  
  
 <xref:System.Windows.Controls.Frame> and <xref:System.Windows.Navigation.NavigationWindow> implement support for responding to the Refresh command, although you are not required to use it; in many cases the implementation in response to that command is the responsibility of the application writer.  
  
<a name="xamlAttributeUsage_Refresh"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.Refresh"/>  
```  
  
   
  
## Examples  
 The following example shows how to use Refresh in conjunction with a <xref:System.Windows.Controls.Frame>. The <xref:System.Windows.Controls.Frame> provides an implementation that responds to the Refresh command by reloading the current <xref:System.Windows.Controls.Frame> content.  
  
 [!code-xml[NavigationCommandsSnippets#RefreshMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/Refresh.xaml#refreshmarkup1)]  
[!code-xml[NavigationCommandsSnippets#RefreshMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/Refresh.xaml#refreshmarkup2)]  
[!code-xml[NavigationCommandsSnippets#RefreshMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/Refresh.xaml#refreshmarkup3)]  
[!code-xml[NavigationCommandsSnippets#RefreshMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/Refresh.xaml#refreshmarkup4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Search { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Search" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Search" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> F3  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Search  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to search.  
  
 There is no implementation for responding to the Search command on any given [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] class. As such, you need to provide an appropriate implementation, which is shown in the example.  
  
<a name="xamlAttributeUsage_Search"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.Search"/>  
```  
  
   
  
## Examples  
 The following example shows how to implement code that responds to the Search command in conjunction with a <xref:System.Windows.Controls.FlowDocumentPageViewer>.  
  
 [!code-xml[NavigationCommandsSnippets#SearchMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/Search.xaml#searchmarkup1)]  
[!code-xml[NavigationCommandsSnippets#SearchMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/Search.xaml#searchmarkup2)]  
[!code-xml[NavigationCommandsSnippets#SearchMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/Search.xaml#searchmarkup3)]  
[!code-xml[NavigationCommandsSnippets#SearchMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/Search.xaml#searchmarkup4)]  
[!code-xml[NavigationCommandsSnippets#SearchMARKUP5](~/add/codesnippet/xaml/NavigationCommandsSnippets/Search.xaml#searchmarkup5)]  
  
 [!code-cs[NavigationCommandsSnippets#SearchCODEBEHIND](~/add/codesnippet/csharp/NavigationCommandsSnippets/Search.xaml.cs#searchcodebehind)]
 [!code-vb[NavigationCommandsSnippets#SearchCODEBEHIND](~/add/codesnippet/visualbasic/navigationcommandssnippets/search.xaml.vb#searchcodebehind)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Zoom">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Zoom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Zoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that represents the <see langword="Zoom" /> command.</summary>
        <value>The routed [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] command.  
  
 <list type="table">  
<listheader>  
<term> Default Values  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> Key Gesture  
  
 </term>  
<description> N/A  
  
 </description>  
</item>  
<item>  
<term> UI Text  
  
 </term>  
<description> Zoom  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This command indicates the intention to set the zoom level.  
  
 There is no implementation for responding to the Zoom command on any given [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] class. As such, you need to provide an appropriate implementation, which is shown in the example.  
  
<a name="xamlAttributeUsage_Zoom"></a>   
## XAML Attribute Usage  
  
```  
<object property="NavigationCommands.Zoom"/>  
```  
  
   
  
## Examples  
 The following example shows how to implement code that responds to the Zoom command in conjunction with a <xref:System.Windows.Controls.FlowDocumentPageViewer>.  
  
 [!code-xml[NavigationCommandsSnippets#ZoomMARKUP1](~/add/codesnippet/xaml/NavigationCommandsSnippets/Zoom.xaml#zoommarkup1)]  
[!code-xml[NavigationCommandsSnippets#ZoomMARKUP2](~/add/codesnippet/xaml/NavigationCommandsSnippets/Zoom.xaml#zoommarkup2)]  
[!code-xml[NavigationCommandsSnippets#ZoomMARKUP3](~/add/codesnippet/xaml/NavigationCommandsSnippets/Zoom.xaml#zoommarkup3)]  
[!code-xml[NavigationCommandsSnippets#ZoomMARKUP4](~/add/codesnippet/xaml/NavigationCommandsSnippets/Zoom.xaml#zoommarkup4)]  
  
 [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>