<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides real-time spell-checking functionality to text-editing controls, such as <see cref="T:System.Windows.Controls.TextBox" /> and <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To enable the spelling checker, set the <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=fullName> property to `true` on a text-editing control. When this spelling checker is enabled, misspelled words are underlined by using a red wavy line, as shown in the following illustration. Spelling checker is supported only when WPF provides a default dictionary. In [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], WPF provides dictionaries for English, French, German, and Spanish.  
  
 ![Textbox with spell&#45;checking](~/add/media/editing-textbox-with-spellchecking.png "Textbox with spell-checking")  
  
 To add a custom dictionary, add the location of the lexicon file to the <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> collection.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of lexicon file locations that are used for custom spell checking.</summary>
        <value>The collection of lexicon file locations.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Custom dictionaries use lexicon files, which are text files that have a .lex extension. Each line of a lexicon file contains a single word that is accepted as a legitimate spelling. The first line of the file can specify a locale identifier (LCID) that the dictionary applies to. If the locale is not specified, the dictionary applies to all languages. For more information, see [Locale IDs](http://go.microsoft.com/fwlink/?LinkId=165561). The following example shows the first few lines of a lexicon file for the English language.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 To specify one or more custom dictionaries for a <xref:System.Windows.Controls.TextBox> or for any class that derives from <xref:System.Windows.Controls.Primitives.TextBoxBase>, specify the location of the lexicon file by adding the URI for the file to the CustomDictionaries collection.  
  
> [!NOTE]
>  Using <xref:System.Collections.IList.Insert%2A> to add a file to the CustomDictionaries collection causes an exception. Instead, use <xref:System.Collections.IList.Add%2A> and <xref:System.Collections.IList.Remove%2A> to update the collection.  
  
 The lexicon files can be included in the application as content files installed on the local computer or as resource files compiled into a local referenced assembly. You can reference the file by using pack URIs. For more information, see [Pack URIs in WPF](~/add/includes/ajax-current-ext-md.md).  
  
 To enable the spelling checker, set the <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=fullName> property to `true` on a <xref:System.Windows.Controls.TextBox> or on any class that derives from <xref:System.Windows.Controls.Primitives.TextBoxBase>. All custom dictionaries for that <xref:System.Windows.Controls.TextBox> are used in addition to the default spelling checker. For more information about the spelling checker, see <xref:System.Windows.Controls.SpellCheck>.  
  
   
  
## Examples  
 The following example shows how to add two custom dictionaries to a <xref:System.Windows.Controls.RichTextBox>. The first custom dictionary (customwords.lex) is added in XAML. The file is included in the application as a content file and copied to the output directory. To use the <xref:System.Uri> element, you have to include the System namespace.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 The second custom dictionary (customwords2.lex) is added in the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler. The file is included as a resource file and compiled into the application assembly that is named WPFCustomDictionary.  
  
 [!code-xml[WpfCustomDictionary#1](~/add/codesnippet/xaml/wpfcustomdictionary/window1.xaml#1)]  
  
 [!code-cs[WpfCustomDictionary#2](~/add/codesnippet/csharp/wpfcustomdictionary/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/add/codesnippet/visualbasic/wpfcustomdictionaries_vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">The text-editing control whose collection of lexicon files is retrieved.</param>
        <summary>Gets the collection of lexicon file locations that are used for custom spelling checkers on a specified text-editing control.</summary>
        <returns>The collection of lexicon file locations.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Custom dictionaries use lexicon files, which are simple text files that have a .lex extension. Each line of a lexicon file contains a single word that is accepted as a legitimate spelling. The first line of the file can specify a locale identifier (LCID) that the dictionary applies to. If the locale is not specified, the dictionary applies to all languages. For more information, see [Locale IDs](http://go.microsoft.com/fwlink/?LinkId=165561). The following example shows the first few lines of a lexicon file for the English language.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 To specify one or more custom dictionaries for a <xref:System.Windows.Controls.TextBox> or any class that derives from <xref:System.Windows.Controls.Primitives.TextBoxBase>, specify the location of the lexicon file by adding the URI for the file to the <xref:System.Collections.IList> returned by the GetCustomDictionaries method.  
  
 To enable the spelling checker, set the <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=fullName> property to `true` on a <xref:System.Windows.Controls.TextBox> or on any class that derives from <xref:System.Windows.Controls.Primitives.TextBoxBase>. All custom dictionaries for that <xref:System.Windows.Controls.TextBox> are used in addition to the default spelling checker. For more information about the spelling checker, see <xref:System.Windows.Controls.SpellCheck>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="textBoxBase " />is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">The text-editing control to check. Example controls include <see cref="T:System.Windows.Controls.TextBox" /> and <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <summary>Returns a value that indicates whether the spelling checker is enabled on the specified text-editing control.</summary>
        <returns>
          <see langword="true" /> if the spelling checker is enabled on the text-editing control; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="textBoxBase " />is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines whether the spelling checker is enabled on this text-editing control, such as <see cref="T:System.Windows.Controls.TextBox" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <value>
          <see langword="true" /> if the spelling checker is enabled on the control; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This dependency property also has a specialized write-only attached property usage. The [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax for setting the property is `<`*textBoxBaseClass* **SpellCheck.IsEnabled**`="`*boolValue*`" .../>`, where *textBoxBaseClass* is an object element for a class that derives from <xref:System.Windows.Controls.Primitives.TextBoxBase>, and *boolValue* is either `true` or `false` (case insensitive). To set the property as an attached property in code, see the <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> method. There is no matching `GetIsEnabled` accessor. To get the value, get the current <xref:System.Windows.Controls.SpellCheck> object from the <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=fullName> property, and then get the value of the IsEnabled property from that <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="xamlTextUsage_IsEnabled"></a>   
## XAML Text Usage  
 See Remarks.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.SpellCheck.IsEnabled%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">The text-editing control on which to enable or disable the spelling checker. Example controls include <see cref="T:System.Windows.Controls.TextBox" /> and <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">A Boolean value that specifies whether the spelling checker is enabled on the text-editing control.</param>
        <summary>Enables or disables the spelling checker on the specified text-editing control, such as <see cref="T:System.Windows.Controls.TextBox" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables an attached property usage for the <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. The following example shows the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">The text-editing control to which the spelling checker is applied. Example controls include <see cref="T:System.Windows.Controls.TextBox" /> and <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">The &lt;xref:System.Windows.Controls.SpellCheck.SpellingReform%2A&gt; value that determines the spelling reform rules.</param>
        <summary>Determines the spelling reform rules that are used by the spelling checker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The spelling reform rules that are accessed by this method refer to the French and German spelling reforms of the 1990's. This method has no effect when it is used with any other language.  
  
 This method enables an attached property usage for the <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the spelling reform rules that are used by the spelling checker.</summary>
        <value>The spelling reform rules that are used by the spelling checker. The default value is <see cref="T:System.Windows.Controls.SpellingReform" /> for French and <see cref="T:System.Windows.Controls.SpellingReform" /> for German.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The spelling reform rules that are determined by this property refer to the French and German spelling reforms. This property has no effect when it is used with any other language.  
  
 This dependency property also has a specialized write-only attached property usage. The [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax for setting the property is `<`*textBoxBaseClass* **SpellCheck.SpellingReform**`="`*enumValue*`" .../>`, where *textBoxBaseClass* is an object element for a class that derives from <xref:System.Windows.Controls.Primitives.TextBoxBase>, and *enumValue* is a string name for a value of the <xref:System.Windows.Controls.SpellingReform> enumeration. To set the property as an attached property in code, see the <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> method. There is no matching `GetSpellingReform` accessor. To get the value, get the current <xref:System.Windows.Controls.SpellCheck> object from the <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=fullName> property, and then get the value of the SpellingReform property from that <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="xamlTextUsage_SpellingReform"></a>   
## XAML Text Usage  
 See Remarks.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.SpellCheck.SpellingReform%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>