<Type Name="HeaderedContentControl" FullName="System.Windows.Controls.HeaderedContentControl">
  <TypeSignature Language="C#" Value="public class HeaderedContentControl : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HeaderedContentControl extends System.Windows.Controls.ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Text)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides the base implementation for all controls that contain single content and have a header.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HeaderedContentControl inherits the <xref:System.Windows.Controls.ContentControl.Content%2A> property from <xref:System.Windows.Controls.ContentControl> and defines the <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> property that is of type <xref:System.Object>.  <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> provides a heading for the control. Like the <xref:System.Windows.Controls.ContentControl.Content%2A> property of a <xref:System.Windows.Controls.ContentControl>, the <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> can be any type.  
  
 The following illustration shows two <xref:System.Windows.Controls.TabItem> objects, which inherit from HeaderedContentControl. The first <xref:System.Windows.Controls.TabItem> has <xref:System.Windows.UIElement> objects as the content in both the <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> and the <xref:System.Windows.Controls.ContentControl.Content%2A>: the <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> is set to a <xref:System.Windows.Controls.StackPanel> that contains an <xref:System.Windows.Shapes.Ellipse> and a <xref:System.Windows.Controls.TextBlock>; the <xref:System.Windows.Controls.ContentControl.Content%2A> is set to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.TextBlock> and a <xref:System.Windows.Controls.Label>.  The <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> of the second <xref:System.Windows.Controls.TabItem> is set to a string and the <xref:System.Windows.Controls.ContentControl.Content%2A> is set to a single <xref:System.Windows.Controls.TextBlock>.  
  
 ![TabControl](~/add/media/controlcontentmodelteabitem.PNG "TabControl")  
TabControl with different types in the Header property  
  
 A HeaderedContentControl has a limited default style. An application developer can create a HeaderedContentControl, but its appearance will be very simple. If you wish to enhance the appearance of the control, you can create a new <xref:System.Windows.Controls.ControlTemplate>. A HeaderedContentControl is useful for creating custom controls because it provides a model for single content controls with headers.  
  
 Dependency properties for this control might be set by the controlâ€™s default style.  If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running.  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
   
  
## Examples  
 The following example shows how to create the <xref:System.Windows.Controls.TabControl> shown in the Remarks section.  
  
 [!code-xml[ControlContentOverviewSnippets#16](~/add/codesnippet/xaml/ControlContentOverviewSnippets/Window1.xaml#16)]  
  
 The following examples show how to create a <xref:System.Windows.Controls.ControlTemplate> for a HeaderedContentControl.  
  
 [!code-xml[HeaderedContentControl#HeaderedContentControlStyle](~/add/codesnippet/xaml/HeaderedContentControlSimple/Page1.xaml#headeredcontentcontrolstyle)]  
  
 [!code-xml[HeaderedContentControl#HeaderedContentControl](~/add/codesnippet/xaml/HeaderedContentControlSimple/Page1.xaml#headeredcontentcontrol)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HeaderedContentControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.HeaderedContentControl" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasHeader">
      <MemberSignature Language="C#" Value="public bool HasHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the header is <see langword="null" />.</summary>
        <value>
          <see langword="true" /> if the &lt;xref:System.Windows.Controls.HeaderedContentControl.Header%2A&gt; property is not <see langword="null" />; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_HasHeader"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.HeaderedContentControl.HasHeaderProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example tests whether the control has a header containing content.  
  
 [!code-cs[HeaderedContentControl#HasHeader](~/add/codesnippet/csharp/HeaderedContentControlSimple/Page1.xaml.cs#hasheader)]
 [!code-vb[HeaderedContentControl#HasHeader](~/add/codesnippet/visualbasic/HeaderedContentControlSimple/Page1.xaml.vb#hasheader)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasHeaderProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HasHeaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HasHeaderProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedContentControl.HasHeader%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public object Header { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Header" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Content")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data used for the header of each control.</summary>
        <value>A header object. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Like the <xref:System.Windows.Controls.ContentControl.Content%2A> property of a <xref:System.Windows.Controls.ContentControl>, the Header can be any type. The <xref:System.Windows.Controls.HeaderedContentControl> uses the same logic to display the Header that is described in <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName>.  
  
<a name="dependencyPropertyInfo_Header"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.HeaderedContentControl.HeaderProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example creates a <xref:System.Windows.Controls.TabControl> that contains two <xref:System.Windows.Controls.TabItem> objects, which inherit from <xref:System.Windows.Controls.HeaderedContentControl>.  The first <xref:System.Windows.Controls.TabItem> has <xref:System.Windows.UIElement> objects as the content in both the Header and the <xref:System.Windows.Controls.ContentControl.Content%2A>: the Header is set to a <xref:System.Windows.Controls.StackPanel> that contains an <xref:System.Windows.Shapes.Ellipse> and a <xref:System.Windows.Controls.TextBlock>; the <xref:System.Windows.Controls.ContentControl.Content%2A> is set to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.TextBlock> and a <xref:System.Windows.Controls.Label>.  The Header of the second <xref:System.Windows.Controls.TabItem> is set to a string and the <xref:System.Windows.Controls.ContentControl.Content%2A> is set to a single <xref:System.Windows.Controls.TextBlock>.  
  
 [!code-xml[ControlContentOverviewSnippets#16](~/add/codesnippet/xaml/ControlContentOverviewSnippets/Window1.xaml#16)]  
  
 The following illustration shows the <xref:System.Windows.Controls.TabControl> created by the previous example.  
  
 ![TabControl](~/add/media/controlcontentmodelteabitem.PNG "TabControl")  
TabControl with different types in the Header property  
  
 The following example creates two <xref:System.Windows.DataTemplate> objects to specify the appearance of the Header and <xref:System.Windows.Controls.ContentControl.Content%2A> of the <xref:System.Windows.Controls.HeaderedContentControl>.  
  
 [!code-xml[HeaderedContentControl#HeaderTemplate1](~/add/codesnippet/xaml/HeaderedContentControlSimple/Page1.xaml#headertemplate1)]  
[!code-xml[HeaderedContentControl#HeaderTemplate2](~/add/codesnippet/xaml/HeaderedContentControlSimple/Page1.xaml#headertemplate2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedContentControl.Header%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormat">
      <MemberSignature Language="C#" Value="public string HeaderStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderStringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a composite string that specifies how to format the &lt;xref:System.Windows.Controls.HeaderedContentControl.Header%2A&gt; property if it is displayed as a string.</summary>
        <value>A composite string that specifies how to format the &lt;xref:System.Windows.Controls.HeaderedContentControl.Header%2A&gt; property if it is displayed as a string. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HeaderStringFormat can be a predefined, composite, or custom string format. For more information about string formats, see [Formatting Types](~/add/includes/ajax-current-ext-md.md). If you set the <xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplate%2A> or <xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector%2A> property of a <xref:System.Windows.Controls.HeaderedContentControl>, the HeaderStringFormat property is ignored.  
  
<a name="dependencyPropertyInfo_HeaderStringFormat"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.HeaderedContentControl.HeaderStringFormatProperty>|  
|Metadata properties set to **true**|None|  
  
   
  
## Examples  
 The following example binds a <xref:System.Windows.Controls.TabControl> to a collection of `Student` objects.  The `Student` class has a `Name` property, a collection of `Course` objects, and implements the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> method to return either the `Name` of the student or a string that lists the student's courses.  The example uses HeaderStringFormat to put a student's name in the <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> of each <xref:System.Windows.Controls.TabItem> (which inherits from <xref:System.Windows.Controls.HeaderedContentControl>), and the <xref:System.Windows.Controls.TabControl.ContentStringFormat%2A?displayProperty=fullName> to display the course list for each student in the Content of the <xref:System.Windows.Controls.TabItem>.  
  
 [!code-xml[ContentStringSnippets#TabControl](~/add/codesnippet/xaml/ContentStringSnippets/Window1.xaml#tabcontrol)]  
  
 The following example implements the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> method to return either the `Name` of the student or a string that lists the student's courses.  
  
 [!code-cs[ContentStringSnippets#TabControlToString](~/add/codesnippet/csharp/ContentStringSnippets/Window1.xaml.cs#tabcontroltostring)]
 [!code-vb[ContentStringSnippets#TabControlToString](~/add/codesnippet/visualbasic/contentstringsnippets/window1.xaml.vb#tabcontroltostring)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormatProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderStringFormatProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderStringFormatProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Content")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the template used to display the content of the control's header.</summary>
        <value>A data template. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_HeaderTemplate"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ HeaderTemplate="{ResourceExtensionÂ TemplateResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_HeaderTemplate"></a>   
## XAML Property Element Usage  
  
<a name="xamlValues_HeaderTemplate"></a>   
## XAML Values  
 *ResourceExtension*  
 One of the following: `StaticResource`, or `DynamicResource`. See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  
  
 *TemplateResourceKey*  
 The key that identifies the template being requested. The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Property element syntax is technically possible, but not recommended. See [Inline Styles and Templates](~/add/includes/ajax-current-ext-md.md). A binding reference using  or  is also possible, but uncommon.  
  
<a name="dependencyPropertyInfo_HeaderTemplate"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example creates two <xref:System.Windows.DataTemplate> objects to specify the appearance of the <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> and <xref:System.Windows.Controls.ContentControl.Content%2A> of the <xref:System.Windows.Controls.HeaderedContentControl>.  
  
 [!code-xml[HeaderedContentControl#HeaderTemplate1](~/add/codesnippet/xaml/HeaderedContentControlSimple/Page1.xaml#headertemplate1)]  
[!code-xml[HeaderedContentControl#HeaderTemplate2](~/add/codesnippet/xaml/HeaderedContentControlSimple/Page1.xaml#headertemplate2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderTemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplate%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Content")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a data template selector that provides custom logic for choosing the template used to display the header.</summary>
        <value>A data template selector object. The default is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If both the HeaderTemplateSelector and the <xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplate%2A> properties are set, the template selector property is ignored.  
  
<a name="xamlAttributeUsage_HeaderTemplateSelector"></a>   
## XAML Attribute Usage  
  
```  
<objectÂ HeaderTemplateSelector="{ResourceExtensionÂ DataTemplateSelectorClassKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_HeaderTemplateSelector"></a>   
## XAML Property Element Usage  
  
```  
<object>  
  <object.HeaderTemplateSelector>  
    <MyDataTemplateSelectorImplementation .../>  
  </object.HeaderTemplateSelector>  
</object>  
```  
  
<a name="xamlValues_HeaderTemplateSelector"></a>   
## XAML Values  
 *MyDataTemplateSelectorImplementation*  
 A class derived from <xref:System.Windows.Controls.DataTemplateSelector> that implements a practical <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> override. For information about how to map your custom class, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md).  
  
 *ResourceExtension*  
 One of the following: `StaticResource`, or `DynamicResource`. See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  
  
 *DataTemplateSelectorClassKey*  
 The key that identifies the selector implementation being requested. The key refers to a derived class that implements a practical <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> override. For information about how to map your custom class, see [XAML Namespaces and Namespace Mapping for WPF XAML](../Topic/XAML%20Namespaces%20and%20Namespace%20Mapping%20for%20WPF%20XAML.md). You can also programmatically add an instance of your <xref:System.Windows.Controls.DataTemplateSelector> class as a resource to a resource dictionary.  
  
<a name="dependencyPropertyInfo_HeaderTemplateSelector"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelectorProperty>|  
|Metadata properties set to `true`|None|  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderTemplateSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderTemplateSelectorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator to the logical child elements of the <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <value>An enumerator.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHeaderChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderChanged (object oldHeader, object newHeader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderChanged(object oldHeader, object newHeader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeader" Type="System.Object" />
        <Parameter Name="newHeader" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldHeader">Old value of the &lt;xref:System.Windows.Controls.HeaderedContentControl.Header%2A&gt; property.</param>
        <param name="newHeader">New value of the &lt;xref:System.Windows.Controls.HeaderedContentControl.Header%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.HeaderedContentControl.Header%2A&gt; property of a <see cref="T:System.Windows.Controls.HeaderedContentControl" /> changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHeaderStringFormatChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderStringFormatChanged (string oldHeaderStringFormat, string newHeaderStringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderStringFormatChanged(string oldHeaderStringFormat, string newHeaderStringFormat) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderStringFormat" Type="System.String" />
        <Parameter Name="newHeaderStringFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldHeaderStringFormat">The old value of the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat%2A&gt; property.</param>
        <param name="newHeaderStringFormat">The new value of the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHeaderTemplateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderTemplateChanged (System.Windows.DataTemplate oldHeaderTemplate, System.Windows.DataTemplate newHeaderTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderTemplateChanged(class System.Windows.DataTemplate oldHeaderTemplate, class System.Windows.DataTemplate newHeaderTemplate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderTemplate" Type="System.Windows.DataTemplate" />
        <Parameter Name="newHeaderTemplate" Type="System.Windows.DataTemplate" />
      </Parameters>
      <Docs>
        <param name="oldHeaderTemplate">Old value of the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplate%2A&gt; property.</param>
        <param name="newHeaderTemplate">New value of the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplate%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplate%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnHeaderTemplateSelectorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderTemplateSelectorChanged (System.Windows.Controls.DataTemplateSelector oldHeaderTemplateSelector, System.Windows.Controls.DataTemplateSelector newHeaderTemplateSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderTemplateSelectorChanged(class System.Windows.Controls.DataTemplateSelector oldHeaderTemplateSelector, class System.Windows.Controls.DataTemplateSelector newHeaderTemplateSelector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
        <Parameter Name="newHeaderTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
      </Parameters>
      <Docs>
        <param name="oldHeaderTemplateSelector">Old value of the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector%2A&gt; property.</param>
        <param name="newHeaderTemplateSelector">New value of the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides a string representation of a <see cref="T:System.Windows.Controls.HeaderedContentControl" />.</summary>
        <returns>A string representation of the object.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>