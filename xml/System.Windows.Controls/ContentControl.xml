<Type Name="ContentControl" FullName="System.Windows.Controls.ContentControl">
  <TypeSignature Language="C#" Value="public class ContentControl : System.Windows.Controls.Control, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentControl extends System.Windows.Controls.Control implements class System.Windows.Markup.IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Content")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Content")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a control with a single piece of content of any type.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ContentControl can contain any type of common language runtime object (such as a string or a <xref:System.DateTime> object) or a <xref:System.Windows.UIElement> object (such as a <xref:System.Windows.Shapes.Rectangle> or a <xref:System.Windows.Controls.Panel>). This enables you to add rich content to controls such as <xref:System.Windows.Controls.Button> and <xref:System.Windows.Controls.CheckBox>.  
  
 The following illustration shows four buttons whose <xref:System.Windows.Controls.ContentControl.Content%2A> property is set to one of the following:  
  
-   A string.  
  
-   A <xref:System.DateTime> object.  
  
-   A <xref:System.Windows.UIElement> object.  
  
-   A <xref:System.Windows.Controls.Panel> control that contains other <xref:System.Windows.UIElement> objects.  
  
 ![Four buttons](~/add/media/controlcontentmodelbuttons.PNG "Four buttons")  
Four buttons with different types of content  
  
 AContentControl has a limited default style. If you want to enhance the appearance of the control, you can create a new <xref:System.Windows.DataTemplate>. For more information, see [Data Templating Overview](~/add/includes/ajax-current-ext-md.md). Another typical scenario is to use the ContentControl to show more information about an item selected in an <xref:System.Windows.Controls.ItemsControl> control. For more information, see [How to: Bind to a Collection and Display Information Based on Selection](~/add/includes/ajax-current-ext-md.md).  
  
 Dependency properties for this control might be set by the control’s default style.  If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running.  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
   
  
## Examples  
 The following example demonstrates how to create the four buttons shown in the Remarks section.  
  
> [!NOTE]
>  Although the [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] version of the example could use the `<Button.Content>` tags around the content of each button, it is not necessary. For more information, see [XAML Overview (WPF)](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-xml[ControlContentOverviewSnippets#1](~/add/codesnippet/xaml/ControlContentOverviewSnippets/Window1.xaml#1)]  
  
 [!code-cs[ControlContentOverviewSnippets#2](~/add/codesnippet/csharp/ControlContentOverviewSnippets/Window1.xaml.cs#2)]
 [!code-vb[ControlContentOverviewSnippets#2](~/add/codesnippet/visualbasic/ControlContentOverviewSnippets/Window1.xaml.vb#2)]  
  
 The following example shows how to make a style for a ContentControl so that the control has an enhanced visual appearance.  
  
 [!code-xml[ContentControl#1](~/add/codesnippet/xaml/ContentControlSimple/Page1.xaml#1)]  
[!code-xml[ContentControl#5](~/add/codesnippet/xaml/ContentControlSimple/Page1.xaml#5)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ContentControl" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="protected virtual void AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddChild(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to add.</param>
        <summary>Adds a specified object as the child of a <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="protected virtual void AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The string to add.</param>
        <summary>Adds a specified text string to a <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public object Content { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Content" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the content of a <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
        <value>An object that contains the control's content. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the Content property is of type <xref:System.Object>, there are no restrictions on what you can put in a <xref:System.Windows.Controls.ContentControl>. The Content is displayed by a <xref:System.Windows.Controls.ContentPresenter>, which is in the <xref:System.Windows.Controls.ControlTemplate> of the <xref:System.Windows.Controls.ContentControl>.  Every <xref:System.Windows.Controls.ContentControl> type in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] has a <xref:System.Windows.Controls.ContentPresenter> in its default <xref:System.Windows.Controls.ControlTemplate>.  For more information about how the <xref:System.Windows.Controls.ContentPresenter> displays Content, see <xref:System.Windows.Controls.ContentPresenter>.  
  
<a name="dependencyPropertyInfo_Content"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.ContentControl.ContentProperty>|  
|Metadata properties set to `true`|None|  
  
<a name="xamlAttributeUsage_Content"></a>   
## XAML Attribute Usage  
  
```  
<object Content="content"/>  
```  
  
<a name="xamlPropertyElementUsage_Content"></a>   
## XAML Property Element Usage  
  
```  
<object> content</object>  
```  
  
<a name="xamlValues_Content"></a>   
## XAML Values  
 `Content`  
 Text or a single object.  
  
   
  
## Examples  
 The following example demonstrates how to create four <xref:System.Windows.Controls.Button> controls with Content set to one of the following:  
  
-   A string.  
  
-   A <xref:System.DateTime> object.  
  
-   A <xref:System.Windows.UIElement> object.  
  
-   A <xref:System.Windows.Controls.Panel> control that contains other <xref:System.Windows.UIElement> objects.  
  
> [!NOTE]
>  Although the [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] version of the example could use the `<Button.Content>` tags around the content of each button, it is not necessary. For more information, see [XAML Overview (WPF)](~/add/includes/ajax-current-ext-md.md).  
  
 [!code-xml[ControlContentOverviewSnippets#1](~/add/codesnippet/xaml/ControlContentOverviewSnippets/Window1.xaml#1)]  
  
 [!code-cs[ControlContentOverviewSnippets#2](~/add/codesnippet/csharp/ControlContentOverviewSnippets/Window1.xaml.cs#2)]
 [!code-vb[ControlContentOverviewSnippets#2](~/add/codesnippet/visualbasic/ControlContentOverviewSnippets/Window1.xaml.vb#2)]  
  
 The following illustration shows the four buttons created in the previous example.  
  
 ![Four buttons](~/add/media/controlcontentmodelbuttons.PNG "Four buttons")  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentStringFormat">
      <MemberSignature Language="C#" Value="public string ContentStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentStringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a composite string that specifies how to format the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property if it is displayed as a string.</summary>
        <value>A composite string that specifies how to format the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property if it is displayed as a string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ContentStringFormat can be a predefined, composite, or custom string format. For more information about string formats, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  If you set the <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> or <xref:System.Windows.Controls.ContentControl.ContentTemplateSelector%2A> property of a <xref:System.Windows.Controls.ContentControl>, the ContentStringFormat property is ignored.  
  
   
  
## Examples  
 The following example specifies the format of <xref:System.DateTime> objects by setting the ContentStringFormat property in a <xref:System.Windows.Style> and applying the <xref:System.Windows.Style> to two <xref:System.Windows.Controls.Label> objects, which inherit from <xref:System.Windows.Controls.ContentControl>.  
  
 [!code-xml[ContentStringSnippets#ContentControl](~/add/codesnippet/xaml/ContentStringSnippets/Window1.xaml#contentcontrol)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentStringFormatProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContentStringFormatProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContentStringFormatProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.ContentControl.ContentStringFormat%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate ContentTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate ContentTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data template used to display the content of the <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
        <value>A data template. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Set this property to a <xref:System.Windows.DataTemplate> to specify the appearance of the <xref:System.Windows.Controls.ContentControl>. For more information on data templates, see [Data Templating Overview](~/add/includes/ajax-current-ext-md.md).  
  
<a name="xamlAttributeUsage_ContentTemplate"></a>   
## XAML Attribute Usage  
  
```  
<object ContentTemplate="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlValues_ContentTemplate"></a>   
## XAML Values  
 *resourceExtension*  
 A markup extension that identifies how to reference the template resource, either `StaticResource` or `DynamicResource`. See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  
  
 *styleResourceKey*  
 The key that identifies the requested template selector. The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Property element syntax is technically possible, but not recommended. For more information, see [Inline Styles and Templates](~/add/includes/ajax-current-ext-md.md).  
  
<a name="dependencyPropertyInfo_ContentTemplate"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.ContentControl.ContentTemplateProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following examples show how to create a content template and apply the template to a content control.  
  
 [!code-xml[ContentControl#2](~/add/codesnippet/xaml/ContentControlSimple/Page1.xaml#2)]  
  
 [!code-xml[ContentControl#3](~/add/codesnippet/xaml/ContentControlSimple/Page1.xaml#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContentTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContentTemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.ContentControl.ContentTemplate%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector ContentTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector ContentTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a template selector that enables an application writer to provide custom template-selection logic.</summary>
        <value>A data template selector. The default value is <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you create a <xref:System.Windows.Controls.DataTemplateSelector> when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object. Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>. If you do that, then there is no need to create a <xref:System.Windows.Controls.DataTemplateSelector>. Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter. For more information, see [Data Templating Overview](~/add/includes/ajax-current-ext-md.md).  
  
 To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. After your class is defined, you can assign an instance of the class to the template selector property of your element.  
  
 If both the ContentTemplateSelector and the <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> properties are set, then this property is ignored.  
  
<a name="xamlAttributeUsage_ContentTemplateSelector"></a>   
## XAML Attribute Usage  
  
```  
<object ContentTemplateSelector="{ResourceExtension TemplateSelectorKey}"/>  
```  
  
<a name="xamlValues_ContentTemplateSelector"></a>   
## XAML Values  
 *ResourceExtension*  
 A markup extension that identifies how to reference the template resource, either `StaticResource` or `DynamicResource`. See [XAML Resources](~/add/includes/ajax-current-ext-md.md).  
  
 *TemplateSelectorKey*  
 The key that identifies the requested template selector. The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.  
  
<a name="dependencyPropertyInfo_ContentTemplateSelector"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example shows how to use the ContentTemplateSelector property. This example binds the selected item in a <xref:System.Windows.Controls.ComboBox> to the <xref:System.Windows.Controls.ContentControl.Content%2A> property of a <xref:System.Windows.Controls.Label>, which inherits from <xref:System.Windows.Controls.ContentControl>.  When the user selects a value below 5, the value of the selected item appears in a black square in the <xref:System.Windows.Controls.Label>.  When the user selects a value that is 5 or above, the value appears in a green ellipse. The example accomplishes this by creating two <xref:System.Windows.DataTemplate> objects and a <xref:System.Windows.Controls.DataTemplateSelector>, which is set to the ContentTemplateSelector property and chooses the appropriate <xref:System.Windows.DataTemplate> based on the value of the selected item.  
  
 [!code-xml[ContentControlTemplateSelector#1](~/add/codesnippet/xaml/ContentControlTemplateSelector/Window1.xaml#1)]  
[!code-cs[ContentControlTemplateSelector#2](~/add/codesnippet/csharp/ContentControlTemplateSelector/Window1.xaml.cs#2)]
[!code-vb[ContentControlTemplateSelector#2](~/add/codesnippet/visualbasic/ContentControlTemplateSelector/Window1.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ContentTemplateSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContentTemplateSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContentTemplateSelectorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.ContentControl.ContentTemplateSelector%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasContent">
      <MemberSignature Language="C#" Value="public bool HasContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.ContentControl" /> contains content.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Windows.Controls.ContentControl" /> has content; otherwise <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Controls.ContentControl.Content%2A> property is `null`, this property returns `false`.  
  
<a name="dependencyPropertyInfo_HasContent"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.ContentControl.HasContentProperty>|  
|Metadata properties set to `true`|None|  
  
   
  
## Examples  
 The following example shows how to use the HasContent property to determine whether a content control contains content.  
  
 [!code-vb[ContentControl#4](~/add/codesnippet/visualbasic/ContentControlSimple/Page1.xaml.vb#4)]
 [!code-cs[ContentControl#4](~/add/codesnippet/csharp/ContentControlSimple/Page1.xaml.cs#4)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HasContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HasContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.ContentControl.HasContent%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator to the content control's logical child elements.</summary>
        <value>An enumerator. The default value is <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent">The old value of the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property.</param>
        <param name="newContent">The new value of the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContentStringFormatChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContentStringFormatChanged (string oldContentStringFormat, string newContentStringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentStringFormatChanged(string oldContentStringFormat, string newContentStringFormat) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContentStringFormat" Type="System.String" />
        <Parameter Name="newContentStringFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldContentStringFormat">The old value of &lt;xref:System.Windows.Controls.ContentControl.ContentStringFormat%2A&gt;.</param>
        <param name="newContentStringFormat">The new value of &lt;xref:System.Windows.Controls.ContentControl.ContentStringFormat%2A&gt;.</param>
        <summary>Occurs when the &lt;xref:System.Windows.Controls.ContentControl.ContentStringFormat%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContentTemplateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContentTemplateChanged (System.Windows.DataTemplate oldContentTemplate, System.Windows.DataTemplate newContentTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentTemplateChanged(class System.Windows.DataTemplate oldContentTemplate, class System.Windows.DataTemplate newContentTemplate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContentTemplate" Type="System.Windows.DataTemplate" />
        <Parameter Name="newContentTemplate" Type="System.Windows.DataTemplate" />
      </Parameters>
      <Docs>
        <param name="oldContentTemplate">The old value of the &lt;xref:System.Windows.Controls.ContentControl.ContentTemplate%2A&gt; property.</param>
        <param name="newContentTemplate">The new value of the &lt;xref:System.Windows.Controls.ContentControl.ContentTemplate%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.ContentControl.ContentTemplate%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnContentTemplateSelectorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContentTemplateSelectorChanged (System.Windows.Controls.DataTemplateSelector oldContentTemplateSelector, System.Windows.Controls.DataTemplateSelector newContentTemplateSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentTemplateSelectorChanged(class System.Windows.Controls.DataTemplateSelector oldContentTemplateSelector, class System.Windows.Controls.DataTemplateSelector newContentTemplateSelector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContentTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
        <Parameter Name="newContentTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
      </Parameters>
      <Docs>
        <param name="oldContentTemplateSelector">The old value of the &lt;xref:System.Windows.Controls.ContentControl.ContentTemplateSelector%2A&gt; property.</param>
        <param name="newContentTemplateSelector">The new value of the &lt;xref:System.Windows.Controls.ContentControl.ContentTemplateSelector%2A&gt; property.</param>
        <summary>Called when the &lt;xref:System.Windows.Controls.ContentControl.ContentTemplateSelector%2A&gt; property changes.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeContent">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSerializeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSerializeContent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property should be persisted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This `ShouldSerialize` method is provided because the <xref:System.Windows.Controls.ContentControl.Content%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer for the <xref:System.Windows.Controls.ContentControl> or developing your own control incorporating the <xref:System.Windows.Controls.ContentControl>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object to add as a child.</param>
        <summary>This type or member supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">A string to add to the object.</param>
        <summary>This type or member supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>