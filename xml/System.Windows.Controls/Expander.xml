<Type Name="Expander" FullName="System.Windows.Controls.Expander">
  <TypeSignature Language="C#" Value="public class Expander : System.Windows.Controls.HeaderedContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Expander extends System.Windows.Controls.HeaderedContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.HeaderedContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the control that displays a header that has a collapsible window that displays content.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Expander is a <xref:System.Windows.Controls.HeaderedContentControl>, which means its <xref:System.Windows.Controls.ContentControl.Content%2A> and <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> properties can be of any type (such as string, image, or panel).  For more information, see the <xref:System.Windows.Controls.HeaderedContentControl> class.  
  
 The following illustration shows an Expander control.  
  
 ![Expander example](~/add/media/expanderexample.JPG "Expander example")  
  
 If the content of the expanded window is too large for the window, you can wrap the content of the Expander in a <xref:System.Windows.Controls.ScrollViewer> control to provide scrollable content. Scrolling capability is not automatically provided by the Expander control.  
  
 For an Expander to work correctly, do not specify a <xref:System.Windows.FrameworkElement.Height%2A> on the Expander control when the <xref:System.Windows.Controls.Expander.ExpandDirection%2A> property is set to <xref:System.Windows.Controls.ExpandDirection> or <xref:System.Windows.Controls.ExpandDirection>. Similarly, do not specify a <xref:System.Windows.FrameworkElement.Width%2A> on the Expander control when the <xref:System.Windows.Controls.Expander.ExpandDirection%2A> property is set to <xref:System.Windows.Controls.ExpandDirection> or <xref:System.Windows.Controls.ExpandDirection>. When you set a size on the Expander control in the direction that the expanded content is displayed, the area that is defined by the size parameter is displayed with a border around it. This area displays even when the window is collapsed. To set the size of the expanded window, set size dimensions on the content of the Expander control or the <xref:System.Windows.Controls.ScrollViewer> that encloses the content.  
  
 When an Expander control is the last element in a <xref:System.Windows.Controls.DockPanel>, the Expander is sized to fill the remaining area of the <xref:System.Windows.Controls.DockPanel>. To prevent this, set the <xref:System.Windows.Controls.DockPanel.LastChildFill%2A> property on the <xref:System.Windows.Controls.DockPanel> to `false`, or make sure that the Expander is not the last element in a <xref:System.Windows.Controls.DockPanel>.  
  
 The alignment of Expander content can be defined by setting the <xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A> and <xref:System.Windows.Controls.Control.VerticalContentAlignment%2A> properties on the control. These properties are applied to the header and to the contents of the expanded window.  
  
## Customizing the Expander Control  
 To apply the same property settings to multiple Expander controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property. You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance. For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/add/includes/ajax-current-ext-md.md).  To see the parts and states that are specific to the Expander, see [Expander Styles and Templates](~/add/includes/ajax-current-ext-md.md).  
  
 Dependency properties for this control might be set by the controlâ€™s default style.  If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running.  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
> [!NOTE]
>  Setting a visual property will only have an effect if that property is both present in Expander control's default template and is set by using a . You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md).  
  
   
  
## Examples  
 The following example shows how to create a simple Expander control.  
  
 [!code-xml[ExpanderExample#2](~/add/codesnippet/xaml/ExpanderExample/Page1.xaml#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Expander ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Expander" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Collapsed">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Collapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Collapsed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the content window of an <see cref="T:System.Windows.Controls.Expander" /> control closes and only the &lt;xref:System.Windows.Controls.HeaderedContentControl.Header%2A&gt; is visible.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Collapsed event occurs when the <xref:System.Windows.Controls.Expander.IsExpanded%2A> property changes from `true` to `false`.  
  
<a name="routedEventInfo_Collapsed"></a>   
## Routed Event Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Expander.CollapsedEvent>|  
|Routing strategy|Bubbling|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
   
  
## Examples  
 The following example shows how to specify the event handler for the Collapsed event.  
  
 [!code-cs[ExpanderSnips#Collapsed](~/add/codesnippet/csharp/ExpanderSnips/Window1.xaml.cs#collapsed)]
 [!code-vb[ExpanderSnips#Collapsed](~/add/codesnippet/visualbasic/expandersnips/window1.xaml.vb#collapsed)]
 [!code-xml[ExpanderSnips#Collapsed](~/add/codesnippet/xaml/ExpanderSnips/Window1.xaml#collapsed)]  
  
 The following example shows how to define the event handler.  
  
 [!code-cs[ExpanderSnips#CollapsedHandler](~/add/codesnippet/csharp/ExpanderSnips/Window1.xaml.cs#collapsedhandler)]
 [!code-vb[ExpanderSnips#CollapsedHandler](~/add/codesnippet/visualbasic/expandersnips/window1.xaml.vb#collapsedhandler)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CollapsedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent CollapsedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent CollapsedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.Controls.Expander.Collapsed" /> routed event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExpandDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ExpandDirection ExpandDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ExpandDirection ExpandDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ExpandDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the direction in which the <see cref="T:System.Windows.Controls.Expander" /> content window opens.</summary>
        <value>One of the <see cref="T:System.Windows.Controls.ExpandDirection" /> values that defines which direction the content window opens. The default is <see cref="T:System.Windows.Controls.ExpandDirection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_ExpandDirection"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Expander.ExpandDirectionProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
   
  
## Examples  
 The following example shows how to set the ExpandDirection property.  
  
 [!code-cs[ExpanderSnips#ExpandDirection](~/add/codesnippet/csharp/ExpanderSnips/Window1.xaml.cs#expanddirection)]
 [!code-vb[ExpanderSnips#ExpandDirection](~/add/codesnippet/visualbasic/expandersnips/window1.xaml.vb#expanddirection)]
 [!code-xml[ExpanderSnips#ExpandDirection](~/add/codesnippet/xaml/ExpanderSnips/Window1.xaml#expanddirection)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExpandDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ExpandDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ExpandDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.Expander.ExpandDirection%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Expanded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Expanded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Expanded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the content window of an <see cref="T:System.Windows.Controls.Expander" /> control opens to display both its header and content.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Expanded event occurs when the <xref:System.Windows.Controls.Expander.IsExpanded%2A> property changes from `false` to `true`.  
  
<a name="routedEventInfo_Expanded"></a>   
## Routed Event Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Expander.ExpandedEvent>|  
|Routing strategy|Bubbling|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
   
  
## Examples  
 The following example shows how to specify the event handler for the Expanded event.  
  
 [!code-cs[ExpanderSnips#Expanded](~/add/codesnippet/csharp/ExpanderSnips/Window1.xaml.cs#expanded)]
 [!code-vb[ExpanderSnips#Expanded](~/add/codesnippet/visualbasic/expandersnips/window1.xaml.vb#expanded)]
 [!code-xml[ExpanderSnips#Expanded](~/add/codesnippet/xaml/ExpanderSnips/Window1.xaml#expanded)]  
  
 The following example shows how to define the event handler.  
  
 [!code-cs[ExpanderSnips#ExpandedHandler](~/add/codesnippet/csharp/ExpanderSnips/Window1.xaml.cs#expandedhandler)]
 [!code-vb[ExpanderSnips#ExpandedHandler](~/add/codesnippet/visualbasic/expandersnips/window1.xaml.vb#expandedhandler)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ExpandedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ExpandedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ExpandedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.Controls.Expander.Expanded" /> routed event.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsExpanded">
      <MemberSignature Language="C#" Value="public bool IsExpanded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpanded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the <see cref="T:System.Windows.Controls.Expander" /> content window is visible.</summary>
        <value>
          <see langword="true" /> if the content window is expanded; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsExpanded"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Expander.IsExpandedProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Journal%2A>|  
  
   
  
## Examples  
 The following example shows how to set the IsExpanded property.  
  
 [!code-cs[ExpanderSnips#IsExpanded](~/add/codesnippet/csharp/ExpanderSnips/Window1.xaml.cs#isexpanded)]
 [!code-vb[ExpanderSnips#IsExpanded](~/add/codesnippet/visualbasic/expandersnips/window1.xaml.vb#isexpanded)]
 [!code-xml[ExpanderSnips#IsExpanded](~/add/codesnippet/xaml/ExpanderSnips/Window1.xaml#isexpanded)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsExpandedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsExpandedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsExpandedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.Expander.IsExpanded%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCollapsed">
      <MemberSignature Language="C#" Value="protected virtual void OnCollapsed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCollapsed() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raises the <see cref="E:System.Windows.Controls.Expander.Collapsed" /> event when the &lt;xref:System.Windows.Controls.Expander.IsExpanded%2A&gt; property changes from <see langword="true" /> to <see langword="false" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the implementation of <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.Controls.Expander" /> control.</summary>
        <returns>A new <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" /> for this <see cref="T:System.Windows.Controls.Expander" /> control.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OnExpanded">
      <MemberSignature Language="C#" Value="protected virtual void OnExpanded ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExpanded() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raises the <see cref="E:System.Windows.Controls.Expander.Expanded" /> event when the &lt;xref:System.Windows.Controls.Expander.IsExpanded%2A&gt; property changes from <see langword="false" /> to <see langword="true" />.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>